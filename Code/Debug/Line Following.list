
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007774  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08007888  08007888  00017888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c48  08007c48  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007c48  08007c48  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c48  08007c48  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c4c  08007c4c  00017c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  200001e8  08007e38  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08007e38  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e74  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ce7  00000000  00000000  0002a085  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  0002bd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a20  00000000  00000000  0002c878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001583b  00000000  00000000  0002d298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006db2  00000000  00000000  00042ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dc29  00000000  00000000  00049885  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b74ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e24  00000000  00000000  000b752c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800786c 	.word	0x0800786c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800786c 	.word	0x0800786c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	621a      	str	r2, [r3, #32]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	611a      	str	r2, [r3, #16]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29a      	uxth	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	615a      	str	r2, [r3, #20]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <MotorL_EnablePWM>:
 */
#include "MotorControl.h"


void MotorL_EnablePWM(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 80011a4:	2101      	movs	r1, #1
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <MotorL_EnablePWM+0x10>)
 80011a8:	f7ff ffb2 	bl	8001110 <LL_TIM_CC_EnableChannel>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40012c00 	.word	0x40012c00

080011b4 <MotorR_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void MotorR_EnablePWM(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <MotorR_EnablePWM+0x14>)
 80011be:	f7ff ffa7 	bl	8001110 <LL_TIM_CC_EnableChannel>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012c00 	.word	0x40012c00

080011cc <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011da:	db03      	blt.n	80011e4 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 80011dc:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	e005      	b.n	80011f0 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80011ea:	dc01      	bgt.n	80011f0 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MotorL_SetPWM+0x60>)
 80011ee:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0a      	blt.n	800120c <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MotorL_SetPWM+0x64>)
 80011fe:	f7ff ff97 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001202:	490c      	ldr	r1, [pc, #48]	; (8001234 <MotorL_SetPWM+0x68>)
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MotorL_SetPWM+0x6c>)
 8001206:	f7ff ffbc 	bl	8001182 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800120a:	e00a      	b.n	8001222 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001212:	4619      	mov	r1, r3
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <MotorL_SetPWM+0x64>)
 8001216:	f7ff ff8b 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800121a:	4906      	ldr	r1, [pc, #24]	; (8001234 <MotorL_SetPWM+0x68>)
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <MotorL_SetPWM+0x6c>)
 800121e:	f7ff ffa1 	bl	8001164 <LL_GPIO_SetOutputPin>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	ffffe3e0 	.word	0xffffe3e0
 8001230:	40012c00 	.word	0x40012c00
 8001234:	04800080 	.word	0x04800080
 8001238:	40010c00 	.word	0x40010c00

0800123c <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800124a:	db03      	blt.n	8001254 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 800124c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	e005      	b.n	8001260 <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800125a:	dc01      	bgt.n	8001260 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MotorR_SetPWM+0x60>)
 800125e:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0a      	blt.n	800127c <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MotorR_SetPWM+0x64>)
 800126e:	f7ff ff6c 	bl	800114a <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001272:	490c      	ldr	r1, [pc, #48]	; (80012a4 <MotorR_SetPWM+0x68>)
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MotorR_SetPWM+0x6c>)
 8001276:	f7ff ff84 	bl	8001182 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 800127a:	e00a      	b.n	8001292 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001282:	4619      	mov	r1, r3
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MotorR_SetPWM+0x64>)
 8001286:	f7ff ff60 	bl	800114a <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <MotorR_SetPWM+0x68>)
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MotorR_SetPWM+0x6c>)
 800128e:	f7ff ff69 	bl	8001164 <LL_GPIO_SetOutputPin>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	ffffe3e0 	.word	0xffffe3e0
 80012a0:	40012c00 	.word	0x40012c00
 80012a4:	04020002 	.word	0x04020002
 80012a8:	40010800 	.word	0x40010800

080012ac <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90) ServoAngle = 90;
 80012b4:	4916      	ldr	r1, [pc, #88]	; (8001310 <Servo_SetAngle+0x64>)
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff00 	bl	80010bc <__aeabi_fcmpgt>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <Servo_SetAngle+0x1c>
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <Servo_SetAngle+0x64>)
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	e008      	b.n	80012da <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90) ServoAngle = -90;
 80012c8:	4912      	ldr	r1, [pc, #72]	; (8001314 <Servo_SetAngle+0x68>)
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fed8 	bl	8001080 <__aeabi_fcmplt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <Servo_SetAngle+0x2e>
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <Servo_SetAngle+0x68>)
 80012d8:	607b      	str	r3, [r7, #4]
//	uint16_t ServoCPR = 540 + ServoAngle*2;
	LL_TIM_OC_SetCompareCH1(TIM4, 4600 + ServoAngle*50/3);
 80012da:	490f      	ldr	r1, [pc, #60]	; (8001318 <Servo_SetAngle+0x6c>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fd31 	bl	8000d44 <__aeabi_fmul>
 80012e2:	4603      	mov	r3, r0
 80012e4:	490d      	ldr	r1, [pc, #52]	; (800131c <Servo_SetAngle+0x70>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fde0 	bl	8000eac <__aeabi_fdiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	490c      	ldr	r1, [pc, #48]	; (8001320 <Servo_SetAngle+0x74>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fc1f 	bl	8000b34 <__addsf3>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fee9 	bl	80010d0 <__aeabi_f2uiz>
 80012fe:	4603      	mov	r3, r0
 8001300:	4619      	mov	r1, r3
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <Servo_SetAngle+0x78>)
 8001304:	f7ff ff14 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	42b40000 	.word	0x42b40000
 8001314:	c2b40000 	.word	0xc2b40000
 8001318:	42480000 	.word	0x42480000
 800131c:	40400000 	.word	0x40400000
 8001320:	458fc000 	.word	0x458fc000
 8001324:	40000800 	.word	0x40000800

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4906      	ldr	r1, [pc, #24]	; (80013c0 <__NVIC_EnableIRQ+0x34>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800147c:	b490      	push	{r4, r7}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	332c      	adds	r3, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001494:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001498:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	fa92 f2a2 	rbit	r2, r2
 80014a0:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	fab2 f282 	clz	r2, r2
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	40d3      	lsrs	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	211f      	movs	r1, #31
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 011f 	and.w	r1, r3, #31
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc90      	pop	{r4, r7}
 80014e0:	4770      	bx	lr

080014e2 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001506:	b490      	push	{r4, r7}
 8001508:	b08a      	sub	sp, #40	; 0x28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	330c      	adds	r3, #12
 8001516:	4619      	mov	r1, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	613a      	str	r2, [r7, #16]
  return result;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	fab2 f282 	clz	r2, r2
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	40d3      	lsrs	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001544:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001548:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	69f9      	ldr	r1, [r7, #28]
 800154c:	fa91 f1a1 	rbit	r1, r1
 8001550:	61b9      	str	r1, [r7, #24]
  return result;
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	fab1 f181 	clz	r1, r1
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	40cb      	lsrs	r3, r1
 800155c:	2107      	movs	r1, #7
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	401a      	ands	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800156c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001570:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001574:	fa91 f1a1 	rbit	r1, r1
 8001578:	6239      	str	r1, [r7, #32]
  return result;
 800157a:	6a39      	ldr	r1, [r7, #32]
 800157c:	fab1 f181 	clz	r1, r1
 8001580:	b2c9      	uxtb	r1, r1
 8001582:	40cb      	lsrs	r3, r1
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bc90      	pop	{r4, r7}
 8001596:	4770      	bx	lr

08001598 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f043 0204 	orr.w	r2, r3, #4
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
	...

08001618 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LL_DMA_EnableChannel+0x38>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	3a01      	subs	r2, #1
 8001636:	4906      	ldr	r1, [pc, #24]	; (8001650 <LL_DMA_EnableChannel+0x38>)
 8001638:	5c8a      	ldrb	r2, [r1, r2]
 800163a:	4611      	mov	r1, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	440a      	add	r2, r1
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	08007924 	.word	0x08007924

08001654 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <LL_DMA_SetDataTransferDirection+0x44>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	461a      	mov	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001674:	f023 0310 	bic.w	r3, r3, #16
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	3a01      	subs	r2, #1
 800167c:	4906      	ldr	r1, [pc, #24]	; (8001698 <LL_DMA_SetDataTransferDirection+0x44>)
 800167e:	5c8a      	ldrb	r2, [r1, r2]
 8001680:	4611      	mov	r1, r2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	440a      	add	r2, r1
 8001686:	4611      	mov	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	08007924 	.word	0x08007924

0800169c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LL_DMA_SetMode+0x40>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	461a      	mov	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 0220 	bic.w	r2, r3, #32
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3b01      	subs	r3, #1
 80016c0:	4906      	ldr	r1, [pc, #24]	; (80016dc <LL_DMA_SetMode+0x40>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	4619      	mov	r1, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	440b      	add	r3, r1
 80016ca:	4619      	mov	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
             Mode);
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	08007924 	.word	0x08007924

080016e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LL_DMA_SetPeriphIncMode+0x40>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3b01      	subs	r3, #1
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <LL_DMA_SetPeriphIncMode+0x40>)
 8001706:	5ccb      	ldrb	r3, [r1, r3]
 8001708:	4619      	mov	r1, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	440b      	add	r3, r1
 800170e:	4619      	mov	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	08007924 	.word	0x08007924

08001724 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3b01      	subs	r3, #1
 8001734:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LL_DMA_SetMemoryIncMode+0x40>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	461a      	mov	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	3b01      	subs	r3, #1
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <LL_DMA_SetMemoryIncMode+0x40>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	4619      	mov	r1, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	440b      	add	r3, r1
 8001752:	4619      	mov	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	08007924 	.word	0x08007924

08001768 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3b01      	subs	r3, #1
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LL_DMA_SetPeriphSize+0x40>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3b01      	subs	r3, #1
 800178c:	4906      	ldr	r1, [pc, #24]	; (80017a8 <LL_DMA_SetPeriphSize+0x40>)
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	4619      	mov	r1, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	440b      	add	r3, r1
 8001796:	4619      	mov	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	08007924 	.word	0x08007924

080017ac <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LL_DMA_SetMemorySize+0x40>)
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4906      	ldr	r1, [pc, #24]	; (80017ec <LL_DMA_SetMemorySize+0x40>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	440b      	add	r3, r1
 80017da:	4619      	mov	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	08007924 	.word	0x08007924

080017f0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	461a      	mov	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3b01      	subs	r3, #1
 8001814:	4906      	ldr	r1, [pc, #24]	; (8001830 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	4619      	mov	r1, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	440b      	add	r3, r1
 800181e:	4619      	mov	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	08007924 	.word	0x08007924

08001834 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3b01      	subs	r3, #1
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LL_DMA_SetDataLength+0x40>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	461a      	mov	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	3a01      	subs	r2, #1
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <LL_DMA_SetDataLength+0x40>)
 800185a:	5c8a      	ldrb	r2, [r1, r2]
 800185c:	4611      	mov	r1, r2
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	440a      	add	r2, r1
 8001862:	4611      	mov	r1, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	08007924 	.word	0x08007924

08001878 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <LL_DMA_SetMemoryAddress+0x2c>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	08007924 	.word	0x08007924

080018a8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <LL_DMA_SetPeriphAddress+0x2c>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	461a      	mov	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6093      	str	r3, [r2, #8]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	08007924 	.word	0x08007924

080018d8 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60da      	str	r2, [r3, #12]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f023 0201 	bic.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60da      	str	r2, [r3, #12]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <LL_RCC_HSE_Enable+0x18>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <LL_RCC_HSE_Enable+0x18>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000

08001990 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_RCC_HSE_IsReady+0x20>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000

080019b4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <LL_RCC_SetSysClkSource+0x24>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 0203 	bic.w	r2, r3, #3
 80019c4:	4904      	ldr	r1, [pc, #16]	; (80019d8 <LL_RCC_SetSysClkSource+0x24>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <LL_RCC_GetSysClkSource+0x14>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <LL_RCC_SetAHBPrescaler+0x24>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	4904      	ldr	r1, [pc, #16]	; (8001a18 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a54:	4904      	ldr	r1, [pc, #16]	; (8001a68 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <LL_RCC_SetADCClockSource+0x24>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a7c:	4904      	ldr	r1, [pc, #16]	; (8001a90 <LL_RCC_SetADCClockSource+0x24>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <LL_RCC_PLL_Enable+0x18>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <LL_RCC_PLL_Enable+0x18>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40021000 	.word	0x40021000

08001ab0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <LL_RCC_PLL_IsReady+0x20>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ac0:	bf0c      	ite	eq
 8001ac2:	2301      	moveq	r3, #1
 8001ac4:	2300      	movne	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000

08001b04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <LL_FLASH_SetLatency+0x24>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 0207 	bic.w	r2, r3, #7
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <LL_FLASH_SetLatency+0x24>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000

08001bbc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <LL_FLASH_GetLatency+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <LL_TIM_EnableCounter>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <LL_TIM_DisableARRPreload>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <LL_TIM_SetCounter>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <LL_TIM_OC_DisableFast>:
{
 8001c2c:	b4b0      	push	{r4, r5, r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d01c      	beq.n	8001c76 <LL_TIM_OC_DisableFast+0x4a>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d017      	beq.n	8001c72 <LL_TIM_OC_DisableFast+0x46>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d012      	beq.n	8001c6e <LL_TIM_OC_DisableFast+0x42>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d00d      	beq.n	8001c6a <LL_TIM_OC_DisableFast+0x3e>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c54:	d007      	beq.n	8001c66 <LL_TIM_OC_DisableFast+0x3a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d101      	bne.n	8001c62 <LL_TIM_OC_DisableFast+0x36>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e00a      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e008      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e006      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e004      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e002      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c76:	2300      	movs	r3, #0
 8001c78:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3318      	adds	r3, #24
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4629      	mov	r1, r5
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <LL_TIM_OC_DisableFast+0x7c>)
 8001c84:	5c5b      	ldrb	r3, [r3, r1]
 8001c86:	4413      	add	r3, r2
 8001c88:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001c8a:	6822      	ldr	r2, [r4, #0]
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <LL_TIM_OC_DisableFast+0x80>)
 8001c90:	5c5b      	ldrb	r3, [r3, r1]
 8001c92:	4619      	mov	r1, r3
 8001c94:	2304      	movs	r3, #4
 8001c96:	408b      	lsls	r3, r1
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	6023      	str	r3, [r4, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bcb0      	pop	{r4, r5, r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	0800792c 	.word	0x0800792c
 8001cac:	08007934 	.word	0x08007934

08001cb0 <LL_TIM_OC_EnablePreload>:
{
 8001cb0:	b4b0      	push	{r4, r5, r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d01c      	beq.n	8001cfa <LL_TIM_OC_EnablePreload+0x4a>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d017      	beq.n	8001cf6 <LL_TIM_OC_EnablePreload+0x46>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d012      	beq.n	8001cf2 <LL_TIM_OC_EnablePreload+0x42>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d00d      	beq.n	8001cee <LL_TIM_OC_EnablePreload+0x3e>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d007      	beq.n	8001cea <LL_TIM_OC_EnablePreload+0x3a>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce0:	d101      	bne.n	8001ce6 <LL_TIM_OC_EnablePreload+0x36>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e00a      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e008      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3318      	adds	r3, #24
 8001d02:	461a      	mov	r2, r3
 8001d04:	4629      	mov	r1, r5
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <LL_TIM_OC_EnablePreload+0x7c>)
 8001d08:	5c5b      	ldrb	r3, [r3, r1]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	4629      	mov	r1, r5
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <LL_TIM_OC_EnablePreload+0x80>)
 8001d14:	5c5b      	ldrb	r3, [r3, r1]
 8001d16:	4619      	mov	r1, r3
 8001d18:	2308      	movs	r3, #8
 8001d1a:	408b      	lsls	r3, r1
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	6023      	str	r3, [r4, #0]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bcb0      	pop	{r4, r5, r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	0800792c 	.word	0x0800792c
 8001d30:	08007934 	.word	0x08007934

08001d34 <LL_TIM_OC_DisablePreload>:
{
 8001d34:	b4b0      	push	{r4, r5, r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d01c      	beq.n	8001d7e <LL_TIM_OC_DisablePreload+0x4a>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d017      	beq.n	8001d7a <LL_TIM_OC_DisablePreload+0x46>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d012      	beq.n	8001d76 <LL_TIM_OC_DisablePreload+0x42>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d00d      	beq.n	8001d72 <LL_TIM_OC_DisablePreload+0x3e>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d007      	beq.n	8001d6e <LL_TIM_OC_DisablePreload+0x3a>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	d101      	bne.n	8001d6a <LL_TIM_OC_DisablePreload+0x36>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e00a      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	e008      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e006      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3318      	adds	r3, #24
 8001d86:	461a      	mov	r2, r3
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <LL_TIM_OC_DisablePreload+0x7c>)
 8001d8c:	5c5b      	ldrb	r3, [r3, r1]
 8001d8e:	4413      	add	r3, r2
 8001d90:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	4629      	mov	r1, r5
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <LL_TIM_OC_DisablePreload+0x80>)
 8001d98:	5c5b      	ldrb	r3, [r3, r1]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	408b      	lsls	r3, r1
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4013      	ands	r3, r2
 8001da4:	6023      	str	r3, [r4, #0]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bcb0      	pop	{r4, r5, r7}
 8001dae:	4770      	bx	lr
 8001db0:	0800792c 	.word	0x0800792c
 8001db4:	08007934 	.word	0x08007934

08001db8 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001db8:	b4b0      	push	{r4, r5, r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d01c      	beq.n	8001e04 <LL_TIM_IC_SetActiveInput+0x4c>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d017      	beq.n	8001e00 <LL_TIM_IC_SetActiveInput+0x48>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d012      	beq.n	8001dfc <LL_TIM_IC_SetActiveInput+0x44>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d00d      	beq.n	8001df8 <LL_TIM_IC_SetActiveInput+0x40>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de2:	d007      	beq.n	8001df4 <LL_TIM_IC_SetActiveInput+0x3c>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d101      	bne.n	8001df0 <LL_TIM_IC_SetActiveInput+0x38>
 8001dec:	2305      	movs	r3, #5
 8001dee:	e00a      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df0:	2306      	movs	r3, #6
 8001df2:	e008      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df4:	2304      	movs	r3, #4
 8001df6:	e006      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e004      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e002      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001e04:	2300      	movs	r3, #0
 8001e06:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001e12:	5c5b      	ldrb	r3, [r3, r1]
 8001e14:	4413      	add	r3, r2
 8001e16:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <LL_TIM_IC_SetActiveInput+0x90>)
 8001e1e:	5c5b      	ldrb	r3, [r3, r1]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2303      	movs	r3, #3
 8001e24:	408b      	lsls	r3, r1
 8001e26:	43db      	mvns	r3, r3
 8001e28:	401a      	ands	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	4628      	mov	r0, r5
 8001e30:	4905      	ldr	r1, [pc, #20]	; (8001e48 <LL_TIM_IC_SetActiveInput+0x90>)
 8001e32:	5c09      	ldrb	r1, [r1, r0]
 8001e34:	408b      	lsls	r3, r1
 8001e36:	4313      	orrs	r3, r2
 8001e38:	6023      	str	r3, [r4, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bcb0      	pop	{r4, r5, r7}
 8001e42:	4770      	bx	lr
 8001e44:	0800792c 	.word	0x0800792c
 8001e48:	0800793c 	.word	0x0800793c

08001e4c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001e4c:	b4b0      	push	{r4, r5, r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d01c      	beq.n	8001e98 <LL_TIM_IC_SetPrescaler+0x4c>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d017      	beq.n	8001e94 <LL_TIM_IC_SetPrescaler+0x48>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d012      	beq.n	8001e90 <LL_TIM_IC_SetPrescaler+0x44>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d00d      	beq.n	8001e8c <LL_TIM_IC_SetPrescaler+0x40>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d007      	beq.n	8001e88 <LL_TIM_IC_SetPrescaler+0x3c>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d101      	bne.n	8001e84 <LL_TIM_IC_SetPrescaler+0x38>
 8001e80:	2305      	movs	r3, #5
 8001e82:	e00a      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e84:	2306      	movs	r3, #6
 8001e86:	e008      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e006      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e004      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001ea6:	5c5b      	ldrb	r3, [r3, r1]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001eac:	6822      	ldr	r2, [r4, #0]
 8001eae:	4629      	mov	r1, r5
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <LL_TIM_IC_SetPrescaler+0x90>)
 8001eb2:	5c5b      	ldrb	r3, [r3, r1]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	408b      	lsls	r3, r1
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	4905      	ldr	r1, [pc, #20]	; (8001edc <LL_TIM_IC_SetPrescaler+0x90>)
 8001ec6:	5c09      	ldrb	r1, [r1, r0]
 8001ec8:	408b      	lsls	r3, r1
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	6023      	str	r3, [r4, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bcb0      	pop	{r4, r5, r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	0800792c 	.word	0x0800792c
 8001edc:	0800793c 	.word	0x0800793c

08001ee0 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001ee0:	b4b0      	push	{r4, r5, r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d01c      	beq.n	8001f2c <LL_TIM_IC_SetFilter+0x4c>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d017      	beq.n	8001f28 <LL_TIM_IC_SetFilter+0x48>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d012      	beq.n	8001f24 <LL_TIM_IC_SetFilter+0x44>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b40      	cmp	r3, #64	; 0x40
 8001f02:	d00d      	beq.n	8001f20 <LL_TIM_IC_SetFilter+0x40>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	d007      	beq.n	8001f1c <LL_TIM_IC_SetFilter+0x3c>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f12:	d101      	bne.n	8001f18 <LL_TIM_IC_SetFilter+0x38>
 8001f14:	2305      	movs	r3, #5
 8001f16:	e00a      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f18:	2306      	movs	r3, #6
 8001f1a:	e008      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e006      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e004      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e002      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3318      	adds	r3, #24
 8001f34:	461a      	mov	r2, r3
 8001f36:	4629      	mov	r1, r5
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <LL_TIM_IC_SetFilter+0x8c>)
 8001f3a:	5c5b      	ldrb	r3, [r3, r1]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	4629      	mov	r1, r5
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <LL_TIM_IC_SetFilter+0x90>)
 8001f46:	5c5b      	ldrb	r3, [r3, r1]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	23f0      	movs	r3, #240	; 0xf0
 8001f4c:	408b      	lsls	r3, r1
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	4628      	mov	r0, r5
 8001f58:	4905      	ldr	r1, [pc, #20]	; (8001f70 <LL_TIM_IC_SetFilter+0x90>)
 8001f5a:	5c09      	ldrb	r1, [r1, r0]
 8001f5c:	408b      	lsls	r3, r1
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	6023      	str	r3, [r4, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bcb0      	pop	{r4, r5, r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	0800792c 	.word	0x0800792c
 8001f70:	0800793c 	.word	0x0800793c

08001f74 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001f74:	b490      	push	{r4, r7}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d01c      	beq.n	8001fc0 <LL_TIM_IC_SetPolarity+0x4c>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d017      	beq.n	8001fbc <LL_TIM_IC_SetPolarity+0x48>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d012      	beq.n	8001fb8 <LL_TIM_IC_SetPolarity+0x44>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d00d      	beq.n	8001fb4 <LL_TIM_IC_SetPolarity+0x40>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f9e:	d007      	beq.n	8001fb0 <LL_TIM_IC_SetPolarity+0x3c>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa6:	d101      	bne.n	8001fac <LL_TIM_IC_SetPolarity+0x38>
 8001fa8:	2305      	movs	r3, #5
 8001faa:	e00a      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fac:	2306      	movs	r3, #6
 8001fae:	e008      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e006      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e004      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	4621      	mov	r1, r4
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <LL_TIM_IC_SetPolarity+0x80>)
 8001fcc:	5c5b      	ldrb	r3, [r3, r1]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	408b      	lsls	r3, r1
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	4621      	mov	r1, r4
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <LL_TIM_IC_SetPolarity+0x80>)
 8001fdc:	5c5b      	ldrb	r3, [r3, r1]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	408b      	lsls	r3, r1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc90      	pop	{r4, r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	08007944 	.word	0x08007944

08001ff8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200a:	f023 0307 	bic.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	605a      	str	r2, [r3, #4]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f06f 0201 	mvn.w	r2, #1
 80020b2:	611a      	str	r2, [r3, #16]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f06f 0202 	mvn.w	r2, #2
 80020cc:	611a      	str	r2, [r3, #16]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f06f 0204 	mvn.w	r2, #4
 80020e6:	611a      	str	r2, [r3, #16]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60da      	str	r2, [r3, #12]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f043 0202 	orr.w	r2, r3, #2
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f043 0204 	orr.w	r2, r3, #4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60da      	str	r2, [r3, #12]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	615a      	str	r2, [r3, #20]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	605a      	str	r2, [r3, #4]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <LL_GPIO_SetPinMode>:
{
 80021d4:	b490      	push	{r4, r7}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0e1b      	lsrs	r3, r3, #24
 80021e8:	4413      	add	r3, r2
 80021ea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80021ec:	6822      	ldr	r2, [r4, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	613b      	str	r3, [r7, #16]
  return result;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	210f      	movs	r1, #15
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	61bb      	str	r3, [r7, #24]
  return result;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	6023      	str	r3, [r4, #0]
}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bc90      	pop	{r4, r7}
 8002236:	4770      	bx	lr

08002238 <LL_GPIO_ResetOutputPin>:
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
	...

08002258 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8002262:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	6053      	str	r3, [r2, #4]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40010000 	.word	0x40010000

08002278 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8002282:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6053      	str	r3, [r2, #4]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40010000 	.word	0x40010000

08002298 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80022a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022aa:	6053      	str	r3, [r2, #4]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40010000 	.word	0x40010000

080022b8 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80022ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d2:	6053      	str	r3, [r2, #4]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40010000 	.word	0x40010000

080022e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ee:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fa:	6053      	str	r3, [r2, #4]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40010000 	.word	0x40010000

08002308 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3302      	adds	r3, #2
 800231a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	43db      	mvns	r3, r3
 8002324:	ea02 0103 	and.w	r1, r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	60bb      	str	r3, [r7, #8]
  return result;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	fa03 f202 	lsl.w	r2, r3, r2
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	430a      	orrs	r2, r1
 800234e:	3302      	adds	r3, #2
 8002350:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000

08002364 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 800236c:	bf00      	nop
 800236e:	4808      	ldr	r0, [pc, #32]	; (8002390 <__io_putchar+0x2c>)
 8002370:	f7ff ff10 	bl	8002194 <LL_USART_IsActiveFlag_TC>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f9      	beq.n	800236e <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4619      	mov	r1, r3
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <__io_putchar+0x2c>)
 8002382:	f7ff ff19 	bl	80021b8 <LL_USART_TransmitData8>

  	return ch;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013800 	.word	0x40013800
 8002394:	00000000 	.word	0x00000000

08002398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800239e:	2001      	movs	r0, #1
 80023a0:	f7ff fbe0 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80023a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80023a8:	f7ff fbc4 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ac:	2003      	movs	r0, #3
 80023ae:	f7fe ffbb 	bl	8001328 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023b2:	f7fe ffdd 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2200      	movs	r2, #0
 80023ba:	2101      	movs	r1, #1
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f82b 	bl	8001418 <NVIC_EncodePriority>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4619      	mov	r1, r3
 80023c6:	f06f 000b 	mvn.w	r0, #11
 80023ca:	f7fe fffb 	bl	80013c4 <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023ce:	f7fe ffcf 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2200      	movs	r2, #0
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f81d 	bl	8001418 <NVIC_EncodePriority>
 80023de:	4603      	mov	r3, r0
 80023e0:	4619      	mov	r1, r3
 80023e2:	f06f 000a 	mvn.w	r0, #10
 80023e6:	f7fe ffed 	bl	80013c4 <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023ea:	f7fe ffc1 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2200      	movs	r2, #0
 80023f2:	2101      	movs	r1, #1
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f80f 	bl	8001418 <NVIC_EncodePriority>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4619      	mov	r1, r3
 80023fe:	f06f 0009 	mvn.w	r0, #9
 8002402:	f7fe ffdf 	bl	80013c4 <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002406:	f7fe ffb3 	bl	8001370 <__NVIC_GetPriorityGrouping>
 800240a:	4603      	mov	r3, r0
 800240c:	2200      	movs	r2, #0
 800240e:	2101      	movs	r1, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f801 	bl	8001418 <NVIC_EncodePriority>
 8002416:	4603      	mov	r3, r0
 8002418:	4619      	mov	r1, r3
 800241a:	f06f 0004 	mvn.w	r0, #4
 800241e:	f7fe ffd1 	bl	80013c4 <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002422:	f7fe ffa5 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002426:	4603      	mov	r3, r0
 8002428:	2200      	movs	r2, #0
 800242a:	2101      	movs	r1, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fff3 	bl	8001418 <NVIC_EncodePriority>
 8002432:	4603      	mov	r3, r0
 8002434:	4619      	mov	r1, r3
 8002436:	f06f 0003 	mvn.w	r0, #3
 800243a:	f7fe ffc3 	bl	80013c4 <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800243e:	f7fe ff97 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002442:	4603      	mov	r3, r0
 8002444:	2200      	movs	r2, #0
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe ffe5 	bl	8001418 <NVIC_EncodePriority>
 800244e:	4603      	mov	r3, r0
 8002450:	4619      	mov	r1, r3
 8002452:	f06f 0001 	mvn.w	r0, #1
 8002456:	f7fe ffb5 	bl	80013c4 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800245a:	f7fe ff89 	bl	8001370 <__NVIC_GetPriorityGrouping>
 800245e:	4603      	mov	r3, r0
 8002460:	2200      	movs	r2, #0
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe ffd7 	bl	8001418 <NVIC_EncodePriority>
 800246a:	4603      	mov	r3, r0
 800246c:	4619      	mov	r1, r3
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
 8002472:	f7fe ffa7 	bl	80013c4 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8002476:	f7ff ff33 	bl	80022e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 800247a:	4ba3      	ldr	r3, [pc, #652]	; (8002708 <main+0x370>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6858      	ldr	r0, [r3, #4]
 8002480:	2300      	movs	r3, #0
 8002482:	2202      	movs	r2, #2
 8002484:	2100      	movs	r1, #0
 8002486:	f003 fa49 	bl	800591c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800248a:	4b9f      	ldr	r3, [pc, #636]	; (8002708 <main+0x370>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6898      	ldr	r0, [r3, #8]
 8002490:	2300      	movs	r3, #0
 8002492:	2202      	movs	r2, #2
 8002494:	2100      	movs	r1, #0
 8002496:	f003 fa41 	bl	800591c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 800249a:	4b9b      	ldr	r3, [pc, #620]	; (8002708 <main+0x370>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68d8      	ldr	r0, [r3, #12]
 80024a0:	2300      	movs	r3, #0
 80024a2:	2202      	movs	r2, #2
 80024a4:	2100      	movs	r1, #0
 80024a6:	f003 fa39 	bl	800591c <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024aa:	f000 fc3f 	bl	8002d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ae:	f001 f8f5 	bl	800369c <MX_GPIO_Init>
  MX_DMA_Init();
 80024b2:	f001 f8db 	bl	800366c <MX_DMA_Init>
  MX_TIM1_Init();
 80024b6:	f000 fdeb 	bl	8003090 <MX_TIM1_Init>
  MX_ADC1_Init();
 80024ba:	f000 fc79 	bl	8002db0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80024be:	f000 fd8d 	bl	8002fdc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80024c2:	f001 f869 	bl	8003598 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80024c6:	f000 fe99 	bl	80031fc <MX_TIM2_Init>
  MX_TIM3_Init();
 80024ca:	f000 ff47 	bl	800335c <MX_TIM3_Init>
  MX_TIM4_Init();
 80024ce:	f000 ffd5 	bl	800347c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 80024d2:	f7fe fe65 	bl	80011a0 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 80024d6:	f7fe fe6d 	bl	80011b4 <MotorR_EnablePWM>
  MotorL_SetPWM(0);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fe76 	bl	80011cc <MotorL_SetPWM>
  MotorR_SetPWM(0);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7fe feab 	bl	800123c <MotorR_SetPWM>
  Servo_SetAngle(0);
 80024e6:	f04f 0000 	mov.w	r0, #0
 80024ea:	f7fe fedf 	bl	80012ac <Servo_SetAngle>
//  OC2_IT_Setmillis(2.5);
  float ServoAngle = 0.00;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]

//  uint32_t Count = LL_TIM_GetCounter(TIM2);

  while (1)
  {
	  LineDetect = 0;
 80024f4:	4b85      	ldr	r3, [pc, #532]	; (800270c <main+0x374>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
	  Sensor_Convert_A2D();
 80024fa:	f001 f99d 	bl	8003838 <Sensor_Convert_A2D>
//	  Sensor_Print_Thres();
//	  Sensor_PrintValue();
//	  Sensor_Print_LineDetect();

	  if(GetThreshold_Flag == 1)
 80024fe:	4b84      	ldr	r3, [pc, #528]	; (8002710 <main+0x378>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d104      	bne.n	8002510 <main+0x178>
	  {
		  GetThreshold_Flag = 0;
 8002506:	4b82      	ldr	r3, [pc, #520]	; (8002710 <main+0x378>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
		  Sensor_Print_LineDetect();
 800250c:	f001 f9c6 	bl	800389c <Sensor_Print_LineDetect>
	  }

	  if(BTN2_Flag == 1)
 8002510:	4b80      	ldr	r3, [pc, #512]	; (8002714 <main+0x37c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d11f      	bne.n	8002558 <main+0x1c0>
	  {
		  BTN2_Flag = 0;
 8002518:	4b7e      	ldr	r3, [pc, #504]	; (8002714 <main+0x37c>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
		  ServoAngle = ServoAngle - BTN_Servo_Step;
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fd ff82 	bl	8000428 <__aeabi_f2d>
 8002524:	a374      	add	r3, pc, #464	; (adr r3, 80026f8 <main+0x360>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fd fe1d 	bl	8000168 <__aeabi_dsub>
 800252e:	4603      	mov	r3, r0
 8002530:	460c      	mov	r4, r1
 8002532:	4618      	mov	r0, r3
 8002534:	4621      	mov	r1, r4
 8002536:	f7fe faa7 	bl	8000a88 <__aeabi_d2f>
 800253a:	4603      	mov	r3, r0
 800253c:	607b      	str	r3, [r7, #4]
		  Servo_SetAngle(ServoAngle);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe feb4 	bl	80012ac <Servo_SetAngle>
		  printf("Servo Angle: %g  \n", ServoAngle);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7fd ff6f 	bl	8000428 <__aeabi_f2d>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	461a      	mov	r2, r3
 8002550:	4623      	mov	r3, r4
 8002552:	4871      	ldr	r0, [pc, #452]	; (8002718 <main+0x380>)
 8002554:	f003 f9ca 	bl	80058ec <iprintf>
	  }

	  if(BTN3_Flag == 1)
 8002558:	4b70      	ldr	r3, [pc, #448]	; (800271c <main+0x384>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d11f      	bne.n	80025a0 <main+0x208>
	  {
		  BTN3_Flag = 0;
 8002560:	4b6e      	ldr	r3, [pc, #440]	; (800271c <main+0x384>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
		  ServoAngle = ServoAngle + BTN_Servo_Step;
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fd ff5e 	bl	8000428 <__aeabi_f2d>
 800256c:	a362      	add	r3, pc, #392	; (adr r3, 80026f8 <main+0x360>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	f7fd fdfb 	bl	800016c <__adddf3>
 8002576:	4603      	mov	r3, r0
 8002578:	460c      	mov	r4, r1
 800257a:	4618      	mov	r0, r3
 800257c:	4621      	mov	r1, r4
 800257e:	f7fe fa83 	bl	8000a88 <__aeabi_d2f>
 8002582:	4603      	mov	r3, r0
 8002584:	607b      	str	r3, [r7, #4]
		  Servo_SetAngle(ServoAngle);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fe90 	bl	80012ac <Servo_SetAngle>
		  printf("Servo Angle: %g \n", ServoAngle);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7fd ff4b 	bl	8000428 <__aeabi_f2d>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	461a      	mov	r2, r3
 8002598:	4623      	mov	r3, r4
 800259a:	4861      	ldr	r0, [pc, #388]	; (8002720 <main+0x388>)
 800259c:	f003 f9a6 	bl	80058ec <iprintf>
	  }

	  if(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000)
 80025a0:	4b5a      	ldr	r3, [pc, #360]	; (800270c <main+0x374>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b18      	cmp	r3, #24
 80025a6:	d007      	beq.n	80025b8 <main+0x220>
 80025a8:	4b58      	ldr	r3, [pc, #352]	; (800270c <main+0x374>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b1c      	cmp	r3, #28
 80025ae:	d003      	beq.n	80025b8 <main+0x220>
 80025b0:	4b56      	ldr	r3, [pc, #344]	; (800270c <main+0x374>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b38      	cmp	r3, #56	; 0x38
 80025b6:	d111      	bne.n	80025dc <main+0x244>
	  {
		  CarState = DiThang;
 80025b8:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <main+0x38c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
		  MotorL_SetPWM(MaxSpeed);
 80025be:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <main+0x390>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fe02 	bl	80011cc <MotorL_SetPWM>
		  MotorR_SetPWM(MaxSpeed);
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <main+0x390>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fe35 	bl	800123c <MotorR_SetPWM>
		  Servo_SetAngle(0);
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f7fe fe69 	bl	80012ac <Servo_SetAngle>
		  continue;
 80025da:	e379      	b.n	8002cd0 <main+0x938>
//		  MotorL_Brake();
//		  MotorR_Brake();
//		  MotorL_DisablePWM();
//		  MotorR_DisablePWM();
//	  }
	  if(LineDetect == 0b10000000 || LineDetect == 0b11000000 || LineDetect == 0b11100000 ||
 80025dc:	4b4b      	ldr	r3, [pc, #300]	; (800270c <main+0x374>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d00f      	beq.n	8002604 <main+0x26c>
 80025e4:	4b49      	ldr	r3, [pc, #292]	; (800270c <main+0x374>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2bc0      	cmp	r3, #192	; 0xc0
 80025ea:	d00b      	beq.n	8002604 <main+0x26c>
 80025ec:	4b47      	ldr	r3, [pc, #284]	; (800270c <main+0x374>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2be0      	cmp	r3, #224	; 0xe0
 80025f2:	d007      	beq.n	8002604 <main+0x26c>
			  LineDetect == 0b01110000 || LineDetect == 0b00110000)
 80025f4:	4b45      	ldr	r3, [pc, #276]	; (800270c <main+0x374>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
	  if(LineDetect == 0b10000000 || LineDetect == 0b11000000 || LineDetect == 0b11100000 ||
 80025f8:	2b70      	cmp	r3, #112	; 0x70
 80025fa:	d003      	beq.n	8002604 <main+0x26c>
			  LineDetect == 0b01110000 || LineDetect == 0b00110000)
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <main+0x374>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b30      	cmp	r3, #48	; 0x30
 8002602:	d103      	bne.n	800260c <main+0x274>
	  {
		  CarState = LechPhai;
 8002604:	4b47      	ldr	r3, [pc, #284]	; (8002724 <main+0x38c>)
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e036      	b.n	800267a <main+0x2e2>
	  }
	  else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 || LineDetect == 0b00000111 ||
 800260c:	4b3f      	ldr	r3, [pc, #252]	; (800270c <main+0x374>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d00f      	beq.n	8002634 <main+0x29c>
 8002614:	4b3d      	ldr	r3, [pc, #244]	; (800270c <main+0x374>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d00b      	beq.n	8002634 <main+0x29c>
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <main+0x374>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b07      	cmp	r3, #7
 8002622:	d007      	beq.n	8002634 <main+0x29c>
			  LineDetect == 0b00001110 || LineDetect == 0b00001100)
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <main+0x374>)
 8002626:	781b      	ldrb	r3, [r3, #0]
	  else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 || LineDetect == 0b00000111 ||
 8002628:	2b0e      	cmp	r3, #14
 800262a:	d003      	beq.n	8002634 <main+0x29c>
			  LineDetect == 0b00001110 || LineDetect == 0b00001100)
 800262c:	4b37      	ldr	r3, [pc, #220]	; (800270c <main+0x374>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d103      	bne.n	800263c <main+0x2a4>
	  {
		  CarState = LechTrai;
 8002634:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <main+0x38c>)
 8002636:	22ff      	movs	r2, #255	; 0xff
 8002638:	701a      	strb	r2, [r3, #0]
 800263a:	e01e      	b.n	800267a <main+0x2e2>
	  }

	  else if( LineDetect == 0b00111111 ||LineDetect == 0b00011111 || LineDetect == 0b00001111 )
 800263c:	4b33      	ldr	r3, [pc, #204]	; (800270c <main+0x374>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b3f      	cmp	r3, #63	; 0x3f
 8002642:	d007      	beq.n	8002654 <main+0x2bc>
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <main+0x374>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b1f      	cmp	r3, #31
 800264a:	d003      	beq.n	8002654 <main+0x2bc>
 800264c:	4b2f      	ldr	r3, [pc, #188]	; (800270c <main+0x374>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b0f      	cmp	r3, #15
 8002652:	d103      	bne.n	800265c <main+0x2c4>
	  {
		  ChuyenLaneFlag = ChuyenLanePhai;
 8002654:	4b35      	ldr	r3, [pc, #212]	; (800272c <main+0x394>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e00e      	b.n	800267a <main+0x2e2>
	  }
	  else if(LineDetect == 0b11110000 || LineDetect == 0b11111000 || LineDetect == 0b11111100)
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <main+0x374>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2bf0      	cmp	r3, #240	; 0xf0
 8002662:	d007      	beq.n	8002674 <main+0x2dc>
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <main+0x374>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2bf8      	cmp	r3, #248	; 0xf8
 800266a:	d003      	beq.n	8002674 <main+0x2dc>
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <main+0x374>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2bfc      	cmp	r3, #252	; 0xfc
 8002672:	d102      	bne.n	800267a <main+0x2e2>
	  {
		  ChuyenLaneFlag = ChuyenLaneTrai;
 8002674:	4b2d      	ldr	r3, [pc, #180]	; (800272c <main+0x394>)
 8002676:	22ff      	movs	r2, #255	; 0xff
 8002678:	701a      	strb	r2, [r3, #0]
	  }

	  if(LineDetect == 0)
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <main+0x374>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 8090 	bne.w	80027a4 <main+0x40c>
	  {
		  if (ChuyenLaneFlag == ChuyenLaneTrai)
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <main+0x394>)
 8002686:	f993 3000 	ldrsb.w	r3, [r3]
 800268a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268e:	d153      	bne.n	8002738 <main+0x3a0>
		  {
			  ChuyenLaneFlag = 0;
 8002690:	4b26      	ldr	r3, [pc, #152]	; (800272c <main+0x394>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
			  MotorR_SetPWM(MaxSpeed * 0.75);
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <main+0x390>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd feb2 	bl	8000404 <__aeabi_i2d>
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <main+0x398>)
 80026a6:	f7fd ff17 	bl	80004d8 <__aeabi_dmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	4618      	mov	r0, r3
 80026b0:	4621      	mov	r1, r4
 80026b2:	f7fe f9c1 	bl	8000a38 <__aeabi_d2iz>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fdbf 	bl	800123c <MotorR_SetPWM>
			  MotorL_SetPWM(MaxSpeed * 0.4);
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <main+0x390>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd fe9e 	bl	8000404 <__aeabi_i2d>
 80026c8:	a30d      	add	r3, pc, #52	; (adr r3, 8002700 <main+0x368>)
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f7fd ff03 	bl	80004d8 <__aeabi_dmul>
 80026d2:	4603      	mov	r3, r0
 80026d4:	460c      	mov	r4, r1
 80026d6:	4618      	mov	r0, r3
 80026d8:	4621      	mov	r1, r4
 80026da:	f7fe f9ad 	bl	8000a38 <__aeabi_d2iz>
 80026de:	4603      	mov	r3, r0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fd73 	bl	80011cc <MotorL_SetPWM>
			  Servo_SetAngle(-54);
 80026e6:	4813      	ldr	r0, [pc, #76]	; (8002734 <main+0x39c>)
 80026e8:	f7fe fde0 	bl	80012ac <Servo_SetAngle>
			  CarState = LechPhai;
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <main+0x38c>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e057      	b.n	80027a4 <main+0x40c>
 80026f4:	f3af 8000 	nop.w
 80026f8:	33333333 	.word	0x33333333
 80026fc:	3fe33333 	.word	0x3fe33333
 8002700:	9999999a 	.word	0x9999999a
 8002704:	3fd99999 	.word	0x3fd99999
 8002708:	20000018 	.word	0x20000018
 800270c:	20000206 	.word	0x20000206
 8002710:	20000204 	.word	0x20000204
 8002714:	20000212 	.word	0x20000212
 8002718:	08007888 	.word	0x08007888
 800271c:	20000213 	.word	0x20000213
 8002720:	0800789c 	.word	0x0800789c
 8002724:	20000207 	.word	0x20000207
 8002728:	20000010 	.word	0x20000010
 800272c:	20000208 	.word	0x20000208
 8002730:	3fe80000 	.word	0x3fe80000
 8002734:	c2580000 	.word	0xc2580000

		  } else if (ChuyenLaneFlag == ChuyenLanePhai)
 8002738:	4bcb      	ldr	r3, [pc, #812]	; (8002a68 <main+0x6d0>)
 800273a:	f993 3000 	ldrsb.w	r3, [r3]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d130      	bne.n	80027a4 <main+0x40c>
		  {
			  ChuyenLaneFlag = 0;
 8002742:	4bc9      	ldr	r3, [pc, #804]	; (8002a68 <main+0x6d0>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
			  MotorL_SetPWM(MaxSpeed * 0.75);
 8002748:	4bc8      	ldr	r3, [pc, #800]	; (8002a6c <main+0x6d4>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fe59 	bl	8000404 <__aeabi_i2d>
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	4bc6      	ldr	r3, [pc, #792]	; (8002a70 <main+0x6d8>)
 8002758:	f7fd febe 	bl	80004d8 <__aeabi_dmul>
 800275c:	4603      	mov	r3, r0
 800275e:	460c      	mov	r4, r1
 8002760:	4618      	mov	r0, r3
 8002762:	4621      	mov	r1, r4
 8002764:	f7fe f968 	bl	8000a38 <__aeabi_d2iz>
 8002768:	4603      	mov	r3, r0
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fd2e 	bl	80011cc <MotorL_SetPWM>
			  MotorR_SetPWM(MaxSpeed * 0.4);
 8002770:	4bbe      	ldr	r3, [pc, #760]	; (8002a6c <main+0x6d4>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fe45 	bl	8000404 <__aeabi_i2d>
 800277a:	a3ad      	add	r3, pc, #692	; (adr r3, 8002a30 <main+0x698>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fd feaa 	bl	80004d8 <__aeabi_dmul>
 8002784:	4603      	mov	r3, r0
 8002786:	460c      	mov	r4, r1
 8002788:	4618      	mov	r0, r3
 800278a:	4621      	mov	r1, r4
 800278c:	f7fe f954 	bl	8000a38 <__aeabi_d2iz>
 8002790:	4603      	mov	r3, r0
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fd52 	bl	800123c <MotorR_SetPWM>
			  Servo_SetAngle(54);
 8002798:	48b6      	ldr	r0, [pc, #728]	; (8002a74 <main+0x6dc>)
 800279a:	f7fe fd87 	bl	80012ac <Servo_SetAngle>
			  CarState = LechTrai;
 800279e:	4bb6      	ldr	r3, [pc, #728]	; (8002a78 <main+0x6e0>)
 80027a0:	22ff      	movs	r2, #255	; 0xff
 80027a2:	701a      	strb	r2, [r3, #0]

		  }
//		  continue;
	  }
	  if (CarState == LechTrai)
 80027a4:	4bb4      	ldr	r3, [pc, #720]	; (8002a78 <main+0x6e0>)
 80027a6:	f993 3000 	ldrsb.w	r3, [r3]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	f040 812a 	bne.w	8002a06 <main+0x66e>
	  {
		  switch (LineDetect)
 80027b2:	4bb2      	ldr	r3, [pc, #712]	; (8002a7c <main+0x6e4>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	f000 8107 	beq.w	80029ca <main+0x632>
 80027bc:	2b08      	cmp	r3, #8
 80027be:	dc0d      	bgt.n	80027dc <main+0x444>
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d070      	beq.n	80028a6 <main+0x50e>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	dc02      	bgt.n	80027ce <main+0x436>
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d04f      	beq.n	800286c <main+0x4d4>
//			  case 0b00011100:
//				  MotorR_SetPWM(MaxSpeed * 0.95);
//				  MotorL_SetPWM(MaxSpeed * 1);
//				  Servo_SetAngle(4);
		  }
		  continue;
 80027cc:	e280      	b.n	8002cd0 <main+0x938>
		  switch (LineDetect)
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	f000 8087 	beq.w	80028e2 <main+0x54a>
 80027d4:	2b07      	cmp	r3, #7
 80027d6:	f000 80a1 	beq.w	800291c <main+0x584>
		  continue;
 80027da:	e279      	b.n	8002cd0 <main+0x938>
		  switch (LineDetect)
 80027dc:	2b0e      	cmp	r3, #14
 80027de:	f000 80ba 	beq.w	8002956 <main+0x5be>
 80027e2:	2b0e      	cmp	r3, #14
 80027e4:	dc03      	bgt.n	80027ee <main+0x456>
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	f000 80d2 	beq.w	8002990 <main+0x5f8>
		  continue;
 80027ec:	e270      	b.n	8002cd0 <main+0x938>
		  switch (LineDetect)
 80027ee:	2b80      	cmp	r3, #128	; 0x80
 80027f0:	d01f      	beq.n	8002832 <main+0x49a>
 80027f2:	2bc0      	cmp	r3, #192	; 0xc0
 80027f4:	d000      	beq.n	80027f8 <main+0x460>
		  continue;
 80027f6:	e26b      	b.n	8002cd0 <main+0x938>
	  	  	  		MotorR_SetPWM(MaxSpeed * 0.95);
 80027f8:	4b9c      	ldr	r3, [pc, #624]	; (8002a6c <main+0x6d4>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fe01 	bl	8000404 <__aeabi_i2d>
 8002802:	a38d      	add	r3, pc, #564	; (adr r3, 8002a38 <main+0x6a0>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f7fd fe66 	bl	80004d8 <__aeabi_dmul>
 800280c:	4603      	mov	r3, r0
 800280e:	460c      	mov	r4, r1
 8002810:	4618      	mov	r0, r3
 8002812:	4621      	mov	r1, r4
 8002814:	f7fe f910 	bl	8000a38 <__aeabi_d2iz>
 8002818:	4603      	mov	r3, r0
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fd0e 	bl	800123c <MotorR_SetPWM>
	  	  	  	  	MotorL_SetPWM(MaxSpeed * 1);
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <main+0x6d4>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fcd1 	bl	80011cc <MotorL_SetPWM>
	  	  	  		Servo_SetAngle(9);// 60
 800282a:	4895      	ldr	r0, [pc, #596]	; (8002a80 <main+0x6e8>)
 800282c:	f7fe fd3e 	bl	80012ac <Servo_SetAngle>
	  	  	  	  	break;
 8002830:	e0e8      	b.n	8002a04 <main+0x66c>
	  	  	  		MotorR_SetPWM(MaxSpeed * 0.85);
 8002832:	4b8e      	ldr	r3, [pc, #568]	; (8002a6c <main+0x6d4>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fde4 	bl	8000404 <__aeabi_i2d>
 800283c:	a380      	add	r3, pc, #512	; (adr r3, 8002a40 <main+0x6a8>)
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f7fd fe49 	bl	80004d8 <__aeabi_dmul>
 8002846:	4603      	mov	r3, r0
 8002848:	460c      	mov	r4, r1
 800284a:	4618      	mov	r0, r3
 800284c:	4621      	mov	r1, r4
 800284e:	f7fe f8f3 	bl	8000a38 <__aeabi_d2iz>
 8002852:	4603      	mov	r3, r0
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe fcf1 	bl	800123c <MotorR_SetPWM>
	  	  	  	  	MotorL_SetPWM(MaxSpeed * 1);
 800285a:	4b84      	ldr	r3, [pc, #528]	; (8002a6c <main+0x6d4>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe fcb4 	bl	80011cc <MotorL_SetPWM>
	  	  	  		Servo_SetAngle(24);// 54
 8002864:	4887      	ldr	r0, [pc, #540]	; (8002a84 <main+0x6ec>)
 8002866:	f7fe fd21 	bl	80012ac <Servo_SetAngle>
	  	  	  	  	break;
 800286a:	e0cb      	b.n	8002a04 <main+0x66c>
	  	  	  		MotorR_SetPWM(MaxSpeed * 0.97);
 800286c:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <main+0x6d4>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fdc7 	bl	8000404 <__aeabi_i2d>
 8002876:	a374      	add	r3, pc, #464	; (adr r3, 8002a48 <main+0x6b0>)
 8002878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287c:	f7fd fe2c 	bl	80004d8 <__aeabi_dmul>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	4618      	mov	r0, r3
 8002886:	4621      	mov	r1, r4
 8002888:	f7fe f8d6 	bl	8000a38 <__aeabi_d2iz>
 800288c:	4603      	mov	r3, r0
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fcd4 	bl	800123c <MotorR_SetPWM>
	  	  	  	  	MotorL_SetPWM(MaxSpeed * 1);
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <main+0x6d4>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fc97 	bl	80011cc <MotorL_SetPWM>
	  	  	  		Servo_SetAngle(7);// 43
 800289e:	487a      	ldr	r0, [pc, #488]	; (8002a88 <main+0x6f0>)
 80028a0:	f7fe fd04 	bl	80012ac <Servo_SetAngle>
	  	  	  	  	break;
 80028a4:	e0ae      	b.n	8002a04 <main+0x66c>
				  MotorR_SetPWM(MaxSpeed * 0.95);
 80028a6:	4b71      	ldr	r3, [pc, #452]	; (8002a6c <main+0x6d4>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fdaa 	bl	8000404 <__aeabi_i2d>
 80028b0:	a361      	add	r3, pc, #388	; (adr r3, 8002a38 <main+0x6a0>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f7fd fe0f 	bl	80004d8 <__aeabi_dmul>
 80028ba:	4603      	mov	r3, r0
 80028bc:	460c      	mov	r4, r1
 80028be:	4618      	mov	r0, r3
 80028c0:	4621      	mov	r1, r4
 80028c2:	f7fe f8b9 	bl	8000a38 <__aeabi_d2iz>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fcb7 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <main+0x6d4>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fc7a 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(8);// 37
 80028d8:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
 80028dc:	f7fe fce6 	bl	80012ac <Servo_SetAngle>
				  break;
 80028e0:	e090      	b.n	8002a04 <main+0x66c>
				  MotorR_SetPWM(MaxSpeed * 0.96);
 80028e2:	4b62      	ldr	r3, [pc, #392]	; (8002a6c <main+0x6d4>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fd8c 	bl	8000404 <__aeabi_i2d>
 80028ec:	a358      	add	r3, pc, #352	; (adr r3, 8002a50 <main+0x6b8>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f7fd fdf1 	bl	80004d8 <__aeabi_dmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	460c      	mov	r4, r1
 80028fa:	4618      	mov	r0, r3
 80028fc:	4621      	mov	r1, r4
 80028fe:	f7fe f89b 	bl	8000a38 <__aeabi_d2iz>
 8002902:	4603      	mov	r3, r0
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fc99 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 800290a:	4b58      	ldr	r3, [pc, #352]	; (8002a6c <main+0x6d4>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fc5c 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(7); //26
 8002914:	485c      	ldr	r0, [pc, #368]	; (8002a88 <main+0x6f0>)
 8002916:	f7fe fcc9 	bl	80012ac <Servo_SetAngle>
				  break;
 800291a:	e073      	b.n	8002a04 <main+0x66c>
				  MotorR_SetPWM(MaxSpeed * 0.93);
 800291c:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <main+0x6d4>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fd6f 	bl	8000404 <__aeabi_i2d>
 8002926:	a34c      	add	r3, pc, #304	; (adr r3, 8002a58 <main+0x6c0>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fdd4 	bl	80004d8 <__aeabi_dmul>
 8002930:	4603      	mov	r3, r0
 8002932:	460c      	mov	r4, r1
 8002934:	4618      	mov	r0, r3
 8002936:	4621      	mov	r1, r4
 8002938:	f7fe f87e 	bl	8000a38 <__aeabi_d2iz>
 800293c:	4603      	mov	r3, r0
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fc7c 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002944:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <main+0x6d4>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fc3f 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(10); // 18
 800294e:	484f      	ldr	r0, [pc, #316]	; (8002a8c <main+0x6f4>)
 8002950:	f7fe fcac 	bl	80012ac <Servo_SetAngle>
				  break;
 8002954:	e056      	b.n	8002a04 <main+0x66c>
				  MotorR_SetPWM(MaxSpeed * 0.96);
 8002956:	4b45      	ldr	r3, [pc, #276]	; (8002a6c <main+0x6d4>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fd52 	bl	8000404 <__aeabi_i2d>
 8002960:	a33b      	add	r3, pc, #236	; (adr r3, 8002a50 <main+0x6b8>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd fdb7 	bl	80004d8 <__aeabi_dmul>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	4618      	mov	r0, r3
 8002970:	4621      	mov	r1, r4
 8002972:	f7fe f861 	bl	8000a38 <__aeabi_d2iz>
 8002976:	4603      	mov	r3, r0
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fc5f 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 800297e:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <main+0x6d4>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fc22 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(7.5); //11
 8002988:	4841      	ldr	r0, [pc, #260]	; (8002a90 <main+0x6f8>)
 800298a:	f7fe fc8f 	bl	80012ac <Servo_SetAngle>
				  break;
 800298e:	e039      	b.n	8002a04 <main+0x66c>
				  MotorR_SetPWM(MaxSpeed * 0.95);
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <main+0x6d4>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fd35 	bl	8000404 <__aeabi_i2d>
 800299a:	a327      	add	r3, pc, #156	; (adr r3, 8002a38 <main+0x6a0>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	f7fd fd9a 	bl	80004d8 <__aeabi_dmul>
 80029a4:	4603      	mov	r3, r0
 80029a6:	460c      	mov	r4, r1
 80029a8:	4618      	mov	r0, r3
 80029aa:	4621      	mov	r1, r4
 80029ac:	f7fe f844 	bl	8000a38 <__aeabi_d2iz>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fc42 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <main+0x6d4>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fc05 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(6);
 80029c2:	4834      	ldr	r0, [pc, #208]	; (8002a94 <main+0x6fc>)
 80029c4:	f7fe fc72 	bl	80012ac <Servo_SetAngle>
				  break;
 80029c8:	e01c      	b.n	8002a04 <main+0x66c>
				  MotorL_SetPWM(MaxSpeed * 0.98);
 80029ca:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <main+0x6d4>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fd18 	bl	8000404 <__aeabi_i2d>
 80029d4:	a322      	add	r3, pc, #136	; (adr r3, 8002a60 <main+0x6c8>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fd fd7d 	bl	80004d8 <__aeabi_dmul>
 80029de:	4603      	mov	r3, r0
 80029e0:	460c      	mov	r4, r1
 80029e2:	4618      	mov	r0, r3
 80029e4:	4621      	mov	r1, r4
 80029e6:	f7fe f827 	bl	8000a38 <__aeabi_d2iz>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fbed 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <main+0x6d4>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fc20 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(0.6);
 80029fc:	4826      	ldr	r0, [pc, #152]	; (8002a98 <main+0x700>)
 80029fe:	f7fe fc55 	bl	80012ac <Servo_SetAngle>
				  break;
 8002a02:	bf00      	nop
		  continue;
 8002a04:	e164      	b.n	8002cd0 <main+0x938>
	  }
	  if (CarState == LechPhai)
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <main+0x6e0>)
 8002a08:	f993 3000 	ldrsb.w	r3, [r3]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f47f ad71 	bne.w	80024f4 <main+0x15c>
	  {
		  switch (LineDetect)
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <main+0x6e4>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b30      	cmp	r3, #48	; 0x30
 8002a18:	f000 811f 	beq.w	8002c5a <main+0x8c2>
 8002a1c:	2b30      	cmp	r3, #48	; 0x30
 8002a1e:	dc43      	bgt.n	8002aa8 <main+0x710>
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d06c      	beq.n	8002afe <main+0x766>
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	dc39      	bgt.n	8002a9c <main+0x704>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8085 	beq.w	8002b38 <main+0x7a0>
//			  case 0b00111000:
//				  MotorL_SetPWM(MaxSpeed * 0.95);
//				  MotorR_SetPWM(MaxSpeed * 1);
//				  Servo_SetAngle(-0);
		  }
		  continue;
 8002a2e:	e14e      	b.n	8002cce <main+0x936>
 8002a30:	9999999a 	.word	0x9999999a
 8002a34:	3fd99999 	.word	0x3fd99999
 8002a38:	66666666 	.word	0x66666666
 8002a3c:	3fee6666 	.word	0x3fee6666
 8002a40:	33333333 	.word	0x33333333
 8002a44:	3feb3333 	.word	0x3feb3333
 8002a48:	70a3d70a 	.word	0x70a3d70a
 8002a4c:	3fef0a3d 	.word	0x3fef0a3d
 8002a50:	eb851eb8 	.word	0xeb851eb8
 8002a54:	3feeb851 	.word	0x3feeb851
 8002a58:	5c28f5c3 	.word	0x5c28f5c3
 8002a5c:	3fedc28f 	.word	0x3fedc28f
 8002a60:	f5c28f5c 	.word	0xf5c28f5c
 8002a64:	3fef5c28 	.word	0x3fef5c28
 8002a68:	20000208 	.word	0x20000208
 8002a6c:	20000010 	.word	0x20000010
 8002a70:	3fe80000 	.word	0x3fe80000
 8002a74:	42580000 	.word	0x42580000
 8002a78:	20000207 	.word	0x20000207
 8002a7c:	20000206 	.word	0x20000206
 8002a80:	41100000 	.word	0x41100000
 8002a84:	41c00000 	.word	0x41c00000
 8002a88:	40e00000 	.word	0x40e00000
 8002a8c:	41200000 	.word	0x41200000
 8002a90:	40f00000 	.word	0x40f00000
 8002a94:	40c00000 	.word	0x40c00000
 8002a98:	3f19999a 	.word	0x3f19999a
		  switch (LineDetect)
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d011      	beq.n	8002ac4 <main+0x72c>
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	f000 80f7 	beq.w	8002c94 <main+0x8fc>
		  continue;
 8002aa6:	e112      	b.n	8002cce <main+0x936>
		  switch (LineDetect)
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d062      	beq.n	8002b72 <main+0x7da>
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	dc03      	bgt.n	8002ab8 <main+0x720>
 8002ab0:	2b70      	cmp	r3, #112	; 0x70
 8002ab2:	f000 80b5 	beq.w	8002c20 <main+0x888>
		  continue;
 8002ab6:	e10a      	b.n	8002cce <main+0x936>
		  switch (LineDetect)
 8002ab8:	2bc0      	cmp	r3, #192	; 0xc0
 8002aba:	d077      	beq.n	8002bac <main+0x814>
 8002abc:	2be0      	cmp	r3, #224	; 0xe0
 8002abe:	f000 8092 	beq.w	8002be6 <main+0x84e>
		  continue;
 8002ac2:	e104      	b.n	8002cce <main+0x936>
				MotorL_SetPWM(MaxSpeed * 0.95);
 8002ac4:	4b90      	ldr	r3, [pc, #576]	; (8002d08 <main+0x970>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fc9b 	bl	8000404 <__aeabi_i2d>
 8002ace:	a382      	add	r3, pc, #520	; (adr r3, 8002cd8 <main+0x940>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fd00 	bl	80004d8 <__aeabi_dmul>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	460c      	mov	r4, r1
 8002adc:	4618      	mov	r0, r3
 8002ade:	4621      	mov	r1, r4
 8002ae0:	f7fd ffaa 	bl	8000a38 <__aeabi_d2iz>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fb70 	bl	80011cc <MotorL_SetPWM>
				MotorR_SetPWM(MaxSpeed * 1);
 8002aec:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <main+0x970>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fba3 	bl	800123c <MotorR_SetPWM>
				Servo_SetAngle(-9);// 60
 8002af6:	4885      	ldr	r0, [pc, #532]	; (8002d0c <main+0x974>)
 8002af8:	f7fe fbd8 	bl	80012ac <Servo_SetAngle>
				break;
 8002afc:	e0e7      	b.n	8002cce <main+0x936>
				  MotorL_SetPWM(MaxSpeed * 0.93);
 8002afe:	4b82      	ldr	r3, [pc, #520]	; (8002d08 <main+0x970>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fc7e 	bl	8000404 <__aeabi_i2d>
 8002b08:	a375      	add	r3, pc, #468	; (adr r3, 8002ce0 <main+0x948>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f7fd fce3 	bl	80004d8 <__aeabi_dmul>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	4618      	mov	r0, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f7fd ff8d 	bl	8000a38 <__aeabi_d2iz>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fb53 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002b26:	4b78      	ldr	r3, [pc, #480]	; (8002d08 <main+0x970>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fb86 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-11); // -54
 8002b30:	4877      	ldr	r0, [pc, #476]	; (8002d10 <main+0x978>)
 8002b32:	f7fe fbbb 	bl	80012ac <Servo_SetAngle>
				  break;
 8002b36:	e0ca      	b.n	8002cce <main+0x936>
				  MotorL_SetPWM(MaxSpeed * 0.93);
 8002b38:	4b73      	ldr	r3, [pc, #460]	; (8002d08 <main+0x970>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fc61 	bl	8000404 <__aeabi_i2d>
 8002b42:	a367      	add	r3, pc, #412	; (adr r3, 8002ce0 <main+0x948>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd fcc6 	bl	80004d8 <__aeabi_dmul>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	4618      	mov	r0, r3
 8002b52:	4621      	mov	r1, r4
 8002b54:	f7fd ff70 	bl	8000a38 <__aeabi_d2iz>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fb36 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002b60:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <main+0x970>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fb69 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-44.4); // -44.4
 8002b6a:	486a      	ldr	r0, [pc, #424]	; (8002d14 <main+0x97c>)
 8002b6c:	f7fe fb9e 	bl	80012ac <Servo_SetAngle>
					break;
 8002b70:	e0ad      	b.n	8002cce <main+0x936>
				  MotorL_SetPWM(MaxSpeed * 0.93);
 8002b72:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <main+0x970>)
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fc44 	bl	8000404 <__aeabi_i2d>
 8002b7c:	a358      	add	r3, pc, #352	; (adr r3, 8002ce0 <main+0x948>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fca9 	bl	80004d8 <__aeabi_dmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	f7fd ff53 	bl	8000a38 <__aeabi_d2iz>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe fb19 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <main+0x970>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fb4c 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-7.5); //-24
 8002ba4:	485c      	ldr	r0, [pc, #368]	; (8002d18 <main+0x980>)
 8002ba6:	f7fe fb81 	bl	80012ac <Servo_SetAngle>
				  break;
 8002baa:	e090      	b.n	8002cce <main+0x936>
				  MotorL_SetPWM(MaxSpeed * 0.96);
 8002bac:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <main+0x970>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fc27 	bl	8000404 <__aeabi_i2d>
 8002bb6:	a34c      	add	r3, pc, #304	; (adr r3, 8002ce8 <main+0x950>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fc8c 	bl	80004d8 <__aeabi_dmul>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	f7fd ff36 	bl	8000a38 <__aeabi_d2iz>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fafc 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <main+0x970>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fb2f 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-6.6); //-24
 8002bde:	484f      	ldr	r0, [pc, #316]	; (8002d1c <main+0x984>)
 8002be0:	f7fe fb64 	bl	80012ac <Servo_SetAngle>
				  break;
 8002be4:	e073      	b.n	8002cce <main+0x936>
				  MotorL_SetPWM(MaxSpeed * 0.90);
 8002be6:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <main+0x970>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fc0a 	bl	8000404 <__aeabi_i2d>
 8002bf0:	a33f      	add	r3, pc, #252	; (adr r3, 8002cf0 <main+0x958>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fc6f 	bl	80004d8 <__aeabi_dmul>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	460c      	mov	r4, r1
 8002bfe:	4618      	mov	r0, r3
 8002c00:	4621      	mov	r1, r4
 8002c02:	f7fd ff19 	bl	8000a38 <__aeabi_d2iz>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fadf 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <main+0x970>)
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fb12 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-11); // -21
 8002c18:	483d      	ldr	r0, [pc, #244]	; (8002d10 <main+0x978>)
 8002c1a:	f7fe fb47 	bl	80012ac <Servo_SetAngle>
				  break;
 8002c1e:	e056      	b.n	8002cce <main+0x936>
				  MotorL_SetPWM(MaxSpeed * 0.97);
 8002c20:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <main+0x970>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fbed 	bl	8000404 <__aeabi_i2d>
 8002c2a:	a333      	add	r3, pc, #204	; (adr r3, 8002cf8 <main+0x960>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fc52 	bl	80004d8 <__aeabi_dmul>
 8002c34:	4603      	mov	r3, r0
 8002c36:	460c      	mov	r4, r1
 8002c38:	4618      	mov	r0, r3
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	f7fd fefc 	bl	8000a38 <__aeabi_d2iz>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fac2 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002c48:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <main+0x970>)
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe faf5 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-4); // -11
 8002c52:	4833      	ldr	r0, [pc, #204]	; (8002d20 <main+0x988>)
 8002c54:	f7fe fb2a 	bl	80012ac <Servo_SetAngle>
				  break;
 8002c58:	e039      	b.n	8002cce <main+0x936>
				  MotorL_SetPWM(MaxSpeed * 0.96);
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <main+0x970>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fbd0 	bl	8000404 <__aeabi_i2d>
 8002c64:	a320      	add	r3, pc, #128	; (adr r3, 8002ce8 <main+0x950>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fc35 	bl	80004d8 <__aeabi_dmul>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	4618      	mov	r0, r3
 8002c74:	4621      	mov	r1, r4
 8002c76:	f7fd fedf 	bl	8000a38 <__aeabi_d2iz>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe faa5 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <main+0x970>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fad8 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-7.4); // -9
 8002c8c:	4825      	ldr	r0, [pc, #148]	; (8002d24 <main+0x98c>)
 8002c8e:	f7fe fb0d 	bl	80012ac <Servo_SetAngle>
				  break;
 8002c92:	e01c      	b.n	8002cce <main+0x936>
				  MotorL_SetPWM(MaxSpeed * 0.98);
 8002c94:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <main+0x970>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fbb3 	bl	8000404 <__aeabi_i2d>
 8002c9e:	a318      	add	r3, pc, #96	; (adr r3, 8002d00 <main+0x968>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	f7fd fc18 	bl	80004d8 <__aeabi_dmul>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	460c      	mov	r4, r1
 8002cac:	4618      	mov	r0, r3
 8002cae:	4621      	mov	r1, r4
 8002cb0:	f7fd fec2 	bl	8000a38 <__aeabi_d2iz>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fa88 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <main+0x970>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe fabb 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-0.6);
 8002cc6:	4818      	ldr	r0, [pc, #96]	; (8002d28 <main+0x990>)
 8002cc8:	f7fe faf0 	bl	80012ac <Servo_SetAngle>
				  break;
 8002ccc:	bf00      	nop
		  continue;
 8002cce:	bf00      	nop
	  LineDetect = 0;
 8002cd0:	e410      	b.n	80024f4 <main+0x15c>
 8002cd2:	bf00      	nop
 8002cd4:	f3af 8000 	nop.w
 8002cd8:	66666666 	.word	0x66666666
 8002cdc:	3fee6666 	.word	0x3fee6666
 8002ce0:	5c28f5c3 	.word	0x5c28f5c3
 8002ce4:	3fedc28f 	.word	0x3fedc28f
 8002ce8:	eb851eb8 	.word	0xeb851eb8
 8002cec:	3feeb851 	.word	0x3feeb851
 8002cf0:	cccccccd 	.word	0xcccccccd
 8002cf4:	3feccccc 	.word	0x3feccccc
 8002cf8:	70a3d70a 	.word	0x70a3d70a
 8002cfc:	3fef0a3d 	.word	0x3fef0a3d
 8002d00:	f5c28f5c 	.word	0xf5c28f5c
 8002d04:	3fef5c28 	.word	0x3fef5c28
 8002d08:	20000010 	.word	0x20000010
 8002d0c:	c1100000 	.word	0xc1100000
 8002d10:	c1300000 	.word	0xc1300000
 8002d14:	c231999a 	.word	0xc231999a
 8002d18:	c0f00000 	.word	0xc0f00000
 8002d1c:	c0d33333 	.word	0xc0d33333
 8002d20:	c0800000 	.word	0xc0800000
 8002d24:	c0eccccd 	.word	0xc0eccccd
 8002d28:	bf19999a 	.word	0xbf19999a

08002d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002d30:	2002      	movs	r0, #2
 8002d32:	f7fe ff2f 	bl	8001b94 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8002d36:	bf00      	nop
 8002d38:	f7fe ff40 	bl	8001bbc <LL_FLASH_GetLatency>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d1fa      	bne.n	8002d38 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8002d42:	f7fe fe17 	bl	8001974 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002d46:	bf00      	nop
 8002d48:	f7fe fe22 	bl	8001990 <LL_RCC_HSE_IsReady>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d1fa      	bne.n	8002d48 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8002d52:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8002d56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002d5a:	f7fe febb 	bl	8001ad4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002d5e:	f7fe fe99 	bl	8001a94 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002d62:	bf00      	nop
 8002d64:	f7fe fea4 	bl	8001ab0 <LL_RCC_PLL_IsReady>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d1fa      	bne.n	8002d64 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fe fe40 	bl	80019f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002d74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d78:	f7fe fe50 	bl	8001a1c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fe fe61 	bl	8001a44 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002d82:	2002      	movs	r0, #2
 8002d84:	f7fe fe16 	bl	80019b4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002d88:	bf00      	nop
 8002d8a:	f7fe fe27 	bl	80019dc <LL_RCC_GetSysClkSource>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d1fa      	bne.n	8002d8a <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8002d94:	4805      	ldr	r0, [pc, #20]	; (8002dac <SystemClock_Config+0x80>)
 8002d96:	f002 f8f1 	bl	8004f7c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8002d9a:	4804      	ldr	r0, [pc, #16]	; (8002dac <SystemClock_Config+0x80>)
 8002d9c:	f002 f8fc 	bl	8004f98 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8002da0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002da4:	f7fe fe62 	bl	8001a6c <LL_RCC_SetADCClockSource>
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	044aa200 	.word	0x044aa200

08002db0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002db6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002dc4:	f107 0318 	add.w	r3, r7, #24
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002de2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002de6:	f7fe febd 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002dea:	2004      	movs	r0, #4
 8002dec:	f7fe feba 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8002df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002df4:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	486b      	ldr	r0, [pc, #428]	; (8002fac <MX_ADC1_Init+0x1fc>)
 8002e00:	f001 fa4e 	bl	80042a0 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002e04:	2200      	movs	r2, #0
 8002e06:	2101      	movs	r1, #1
 8002e08:	4869      	ldr	r0, [pc, #420]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e0a:	f7fe fc23 	bl	8001654 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8002e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e12:	2101      	movs	r1, #1
 8002e14:	4866      	ldr	r0, [pc, #408]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e16:	f7fe fceb 	bl	80017f0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	4864      	ldr	r0, [pc, #400]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e20:	f7fe fc3c 	bl	800169c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2101      	movs	r1, #1
 8002e28:	4861      	ldr	r0, [pc, #388]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e2a:	f7fe fc59 	bl	80016e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002e2e:	2280      	movs	r2, #128	; 0x80
 8002e30:	2101      	movs	r1, #1
 8002e32:	485f      	ldr	r0, [pc, #380]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e34:	f7fe fc76 	bl	8001724 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	485c      	ldr	r0, [pc, #368]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e40:	f7fe fc92 	bl	8001768 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e48:	2101      	movs	r1, #1
 8002e4a:	4859      	ldr	r0, [pc, #356]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e4c:	f7fe fcae 	bl	80017ac <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 8002e50:	2208      	movs	r2, #8
 8002e52:	2101      	movs	r1, #1
 8002e54:	4856      	ldr	r0, [pc, #344]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e56:	f7fe fced 	bl	8001834 <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &Sensor_ADC_Value);
 8002e5a:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <MX_ADC1_Init+0x204>)
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2101      	movs	r1, #1
 8002e60:	4853      	ldr	r0, [pc, #332]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e62:	f7fe fd09 	bl	8001878 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 8002e66:	4a54      	ldr	r2, [pc, #336]	; (8002fb8 <MX_ADC1_Init+0x208>)
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4851      	ldr	r0, [pc, #324]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e6c:	f7fe fd1c 	bl	80018a8 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8002e70:	2101      	movs	r1, #1
 8002e72:	484f      	ldr	r0, [pc, #316]	; (8002fb0 <MX_ADC1_Init+0x200>)
 8002e74:	f7fe fbd0 	bl	8001618 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002e82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e86:	4619      	mov	r1, r3
 8002e88:	484c      	ldr	r0, [pc, #304]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002e8a:	f000 ffd7 	bl	8003e3c <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e96:	4619      	mov	r1, r3
 8002e98:	4848      	ldr	r0, [pc, #288]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002e9a:	f000 ff9d 	bl	8003dd8 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002e9e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8002ea2:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8002ea4:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8002ea8:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002eb8:	f107 0318 	add.w	r3, r7, #24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	483f      	ldr	r0, [pc, #252]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002ec0:	f000 ffe3 	bl	8003e8a <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8002ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ecc:	483b      	ldr	r0, [pc, #236]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002ece:	f7fe fad5 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ed8:	4838      	ldr	r0, [pc, #224]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002eda:	f7fe fb14 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002ede:	4a38      	ldr	r2, [pc, #224]	; (8002fc0 <MX_ADC1_Init+0x210>)
 8002ee0:	f240 2105 	movw	r1, #517	; 0x205
 8002ee4:	4835      	ldr	r0, [pc, #212]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002ee6:	f7fe fac9 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002eea:	2203      	movs	r2, #3
 8002eec:	4934      	ldr	r1, [pc, #208]	; (8002fc0 <MX_ADC1_Init+0x210>)
 8002eee:	4833      	ldr	r0, [pc, #204]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002ef0:	f7fe fb09 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8002ef4:	4a33      	ldr	r2, [pc, #204]	; (8002fc4 <MX_ADC1_Init+0x214>)
 8002ef6:	f240 210a 	movw	r1, #522	; 0x20a
 8002efa:	4830      	ldr	r0, [pc, #192]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002efc:	f7fe fabe 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002f00:	2203      	movs	r2, #3
 8002f02:	4930      	ldr	r1, [pc, #192]	; (8002fc4 <MX_ADC1_Init+0x214>)
 8002f04:	482d      	ldr	r0, [pc, #180]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f06:	f7fe fafe 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	; (8002fc8 <MX_ADC1_Init+0x218>)
 8002f0c:	f240 210f 	movw	r1, #527	; 0x20f
 8002f10:	482a      	ldr	r0, [pc, #168]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f12:	f7fe fab3 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002f16:	2203      	movs	r2, #3
 8002f18:	492b      	ldr	r1, [pc, #172]	; (8002fc8 <MX_ADC1_Init+0x218>)
 8002f1a:	4828      	ldr	r0, [pc, #160]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f1c:	f7fe faf3 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8002f20:	4a2a      	ldr	r2, [pc, #168]	; (8002fcc <MX_ADC1_Init+0x21c>)
 8002f22:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002f26:	4825      	ldr	r0, [pc, #148]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f28:	f7fe faa8 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	4927      	ldr	r1, [pc, #156]	; (8002fcc <MX_ADC1_Init+0x21c>)
 8002f30:	4822      	ldr	r0, [pc, #136]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f32:	f7fe fae8 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <MX_ADC1_Init+0x220>)
 8002f38:	f240 2119 	movw	r1, #537	; 0x219
 8002f3c:	481f      	ldr	r0, [pc, #124]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f3e:	f7fe fa9d 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002f42:	2203      	movs	r2, #3
 8002f44:	4922      	ldr	r1, [pc, #136]	; (8002fd0 <MX_ADC1_Init+0x220>)
 8002f46:	481d      	ldr	r0, [pc, #116]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f48:	f7fe fadd 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8002f4c:	4a21      	ldr	r2, [pc, #132]	; (8002fd4 <MX_ADC1_Init+0x224>)
 8002f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f52:	481a      	ldr	r0, [pc, #104]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f54:	f7fe fa92 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002f58:	2203      	movs	r2, #3
 8002f5a:	491e      	ldr	r1, [pc, #120]	; (8002fd4 <MX_ADC1_Init+0x224>)
 8002f5c:	4817      	ldr	r0, [pc, #92]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f5e:	f7fe fad2 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <MX_ADC1_Init+0x228>)
 8002f64:	f240 1105 	movw	r1, #261	; 0x105
 8002f68:	4814      	ldr	r0, [pc, #80]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f6a:	f7fe fa87 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002f6e:	2203      	movs	r2, #3
 8002f70:	4919      	ldr	r1, [pc, #100]	; (8002fd8 <MX_ADC1_Init+0x228>)
 8002f72:	4812      	ldr	r0, [pc, #72]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f74:	f7fe fac7 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8002f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f7c:	480f      	ldr	r0, [pc, #60]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f7e:	f7fe fab0 	bl	80014e2 <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 8002f82:	480e      	ldr	r0, [pc, #56]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f84:	f7fe fb08 	bl	8001598 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 8002f88:	480c      	ldr	r0, [pc, #48]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f8a:	f7fe fb14 	bl	80015b6 <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8002f8e:	bf00      	nop
 8002f90:	480a      	ldr	r0, [pc, #40]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f92:	f7fe fb1f 	bl	80015d4 <LL_ADC_IsCalibrationOnGoing>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f9      	bne.n	8002f90 <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 8002f9c:	4807      	ldr	r0, [pc, #28]	; (8002fbc <MX_ADC1_Init+0x20c>)
 8002f9e:	f7fe fb2b 	bl	80015f8 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	3738      	adds	r7, #56	; 0x38
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40010800 	.word	0x40010800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	20000220 	.word	0x20000220
 8002fb8:	4001244c 	.word	0x4001244c
 8002fbc:	40012400 	.word	0x40012400
 8002fc0:	02300001 	.word	0x02300001
 8002fc4:	02600002 	.word	0x02600002
 8002fc8:	02900003 	.word	0x02900003
 8002fcc:	02c00004 	.word	0x02c00004
 8002fd0:	02f00005 	.word	0x02f00005
 8002fd4:	03200006 	.word	0x03200006
 8002fd8:	03500007 	.word	0x03500007

08002fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08c      	sub	sp, #48	; 0x30
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002fe2:	f107 0318 	add.w	r3, r7, #24
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
 8002fee:	60da      	str	r2, [r3, #12]
 8002ff0:	611a      	str	r2, [r3, #16]
 8002ff2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	60da      	str	r2, [r3, #12]
 8003000:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003002:	2008      	movs	r0, #8
 8003004:	f7fe fdae 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <MX_I2C1_Init+0xa4>)
 800300a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800300c:	2309      	movs	r3, #9
 800300e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003010:	2303      	movs	r3, #3
 8003012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003014:	2304      	movs	r3, #4
 8003016:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4819      	ldr	r0, [pc, #100]	; (8003084 <MX_I2C1_Init+0xa8>)
 800301e:	f001 f93f 	bl	80042a0 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 8003022:	f7ff f919 	bl	8002258 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8003026:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800302a:	f7fe fd83 	bl	8001b34 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800302e:	4816      	ldr	r0, [pc, #88]	; (8003088 <MX_I2C1_Init+0xac>)
 8003030:	f7fe fc91 	bl	8001956 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8003034:	4814      	ldr	r0, [pc, #80]	; (8003088 <MX_I2C1_Init+0xac>)
 8003036:	f7fe fc6d 	bl	8001914 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800303a:	4813      	ldr	r0, [pc, #76]	; (8003088 <MX_I2C1_Init+0xac>)
 800303c:	f7fe fc5b 	bl	80018f6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <MX_I2C1_Init+0xb0>)
 8003046:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8003048:	2300      	movs	r3, #0
 800304a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8003056:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800305c:	f107 0318 	add.w	r3, r7, #24
 8003060:	4619      	mov	r1, r3
 8003062:	4809      	ldr	r0, [pc, #36]	; (8003088 <MX_I2C1_Init+0xac>)
 8003064:	f001 fa68 	bl	8004538 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8003068:	2100      	movs	r1, #0
 800306a:	4807      	ldr	r0, [pc, #28]	; (8003088 <MX_I2C1_Init+0xac>)
 800306c:	f7fe fc61 	bl	8001932 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8003070:	4805      	ldr	r0, [pc, #20]	; (8003088 <MX_I2C1_Init+0xac>)
 8003072:	f7fe fc31 	bl	80018d8 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	3730      	adds	r7, #48	; 0x30
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	04030003 	.word	0x04030003
 8003084:	40010c00 	.word	0x40010c00
 8003088:	40005400 	.word	0x40005400
 800308c:	000186a0 	.word	0x000186a0

08003090 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b098      	sub	sp, #96	; 0x60
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003096:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80030a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030aa:	2220      	movs	r2, #32
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 ffc4 	bl	800503c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
 80030c4:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c6:	463b      	mov	r3, r7
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80030d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80030d8:	f7fe fd44 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80030e2:	2300      	movs	r3, #0
 80030e4:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 80030e6:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80030ea:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80030ec:	2300      	movs	r3, #0
 80030ee:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80030f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030fa:	4619      	mov	r1, r3
 80030fc:	483c      	ldr	r0, [pc, #240]	; (80031f0 <MX_TIM1_Init+0x160>)
 80030fe:	f001 fbc3 	bl	8004888 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003102:	483b      	ldr	r0, [pc, #236]	; (80031f0 <MX_TIM1_Init+0x160>)
 8003104:	f7fe fd75 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8003108:	2101      	movs	r1, #1
 800310a:	4839      	ldr	r0, [pc, #228]	; (80031f0 <MX_TIM1_Init+0x160>)
 800310c:	f7fe fdd0 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003110:	2360      	movs	r3, #96	; 0x60
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003120:	2300      	movs	r3, #0
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003124:	2300      	movs	r3, #0
 8003126:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003128:	2300      	movs	r3, #0
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003134:	461a      	mov	r2, r3
 8003136:	2101      	movs	r1, #1
 8003138:	482d      	ldr	r0, [pc, #180]	; (80031f0 <MX_TIM1_Init+0x160>)
 800313a:	f001 fc03 	bl	8004944 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 800313e:	2101      	movs	r1, #1
 8003140:	482b      	ldr	r0, [pc, #172]	; (80031f0 <MX_TIM1_Init+0x160>)
 8003142:	f7fe fd73 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8003146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800314a:	4829      	ldr	r0, [pc, #164]	; (80031f0 <MX_TIM1_Init+0x160>)
 800314c:	f7fe fdb0 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800315c:	461a      	mov	r2, r3
 800315e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003162:	4823      	ldr	r0, [pc, #140]	; (80031f0 <MX_TIM1_Init+0x160>)
 8003164:	f001 fbee 	bl	8004944 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8003168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800316c:	4820      	ldr	r0, [pc, #128]	; (80031f0 <MX_TIM1_Init+0x160>)
 800316e:	f7fe fd5d 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8003172:	2100      	movs	r1, #0
 8003174:	481e      	ldr	r0, [pc, #120]	; (80031f0 <MX_TIM1_Init+0x160>)
 8003176:	f7fe ff65 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800317a:	481d      	ldr	r0, [pc, #116]	; (80031f0 <MX_TIM1_Init+0x160>)
 800317c:	f7fe ff74 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80031a0:	f107 0314 	add.w	r3, r7, #20
 80031a4:	4619      	mov	r1, r3
 80031a6:	4812      	ldr	r0, [pc, #72]	; (80031f0 <MX_TIM1_Init+0x160>)
 80031a8:	f001 fc04 	bl	80049b4 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 80031ac:	4810      	ldr	r0, [pc, #64]	; (80031f0 <MX_TIM1_Init+0x160>)
 80031ae:	f7fe ffa0 	bl	80020f2 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM1,0);
 80031b2:	2100      	movs	r1, #0
 80031b4:	480e      	ldr	r0, [pc, #56]	; (80031f0 <MX_TIM1_Init+0x160>)
 80031b6:	f7fe fd2b 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 80031ba:	480d      	ldr	r0, [pc, #52]	; (80031f0 <MX_TIM1_Init+0x160>)
 80031bc:	f7fe ff63 	bl	8002086 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 80031c0:	480b      	ldr	r0, [pc, #44]	; (80031f0 <MX_TIM1_Init+0x160>)
 80031c2:	f7fe fd07 	bl	8001bd4 <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80031c6:	2004      	movs	r0, #4
 80031c8:	f7fe fccc 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <MX_TIM1_Init+0x164>)
 80031ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80031d0:	2309      	movs	r3, #9
 80031d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80031d4:	2303      	movs	r3, #3
 80031d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031dc:	463b      	mov	r3, r7
 80031de:	4619      	mov	r1, r3
 80031e0:	4805      	ldr	r0, [pc, #20]	; (80031f8 <MX_TIM1_Init+0x168>)
 80031e2:	f001 f85d 	bl	80042a0 <LL_GPIO_Init>

}
 80031e6:	bf00      	nop
 80031e8:	3760      	adds	r7, #96	; 0x60
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	04050005 	.word	0x04050005
 80031f8:	40010800 	.word	0x40010800

080031fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003212:	463b      	mov	r3, r7
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003220:	2001      	movs	r0, #1
 8003222:	f7fe fc87 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003226:	2004      	movs	r0, #4
 8003228:	f7fe fc9c 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800322c:	2008      	movs	r0, #8
 800322e:	f7fe fc99 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <MX_TIM2_Init+0x154>)
 8003234:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003236:	2304      	movs	r3, #4
 8003238:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323a:	463b      	mov	r3, r7
 800323c:	4619      	mov	r1, r3
 800323e:	4845      	ldr	r0, [pc, #276]	; (8003354 <MX_TIM2_Init+0x158>)
 8003240:	f001 f82e 	bl	80042a0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8003244:	f640 0308 	movw	r3, #2056	; 0x808
 8003248:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800324a:	2304      	movs	r3, #4
 800324c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324e:	463b      	mov	r3, r7
 8003250:	4619      	mov	r1, r3
 8003252:	4841      	ldr	r0, [pc, #260]	; (8003358 <MX_TIM2_Init+0x15c>)
 8003254:	f001 f824 	bl	80042a0 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003258:	f7fe f88a 	bl	8001370 <__NVIC_GetPriorityGrouping>
 800325c:	4603      	mov	r3, r0
 800325e:	2200      	movs	r2, #0
 8003260:	2102      	movs	r1, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe f8d8 	bl	8001418 <NVIC_EncodePriority>
 8003268:	4603      	mov	r3, r0
 800326a:	4619      	mov	r1, r3
 800326c:	201c      	movs	r0, #28
 800326e:	f7fe f8a9 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8003272:	201c      	movs	r0, #28
 8003274:	f7fe f88a 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8003278:	f7ff f80e 	bl	8002298 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 800327c:	2103      	movs	r1, #3
 800327e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003282:	f7fe fecd 	bl	8002020 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8003286:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800328a:	2101      	movs	r1, #1
 800328c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003290:	f7fe fd92 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8003294:	2200      	movs	r2, #0
 8003296:	2101      	movs	r1, #1
 8003298:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800329c:	f7fe fdd6 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2101      	movs	r1, #1
 80032a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032a8:	f7fe fe1a 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2101      	movs	r1, #1
 80032b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032b4:	f7fe fe5e 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80032b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032bc:	2110      	movs	r1, #16
 80032be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032c2:	f7fe fd79 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2110      	movs	r1, #16
 80032ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032ce:	f7fe fdbd 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2110      	movs	r1, #16
 80032d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032da:	f7fe fe01 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80032de:	2200      	movs	r2, #0
 80032e0:	2110      	movs	r1, #16
 80032e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032e6:	f7fe fe45 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 80032f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032f6:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80032f8:	2300      	movs	r3, #0
 80032fa:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003306:	f001 fabf 	bl	8004888 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800330a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800330e:	f7fe fc70 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003312:	2100      	movs	r1, #0
 8003314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003318:	f7fe fe94 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800331c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003320:	f7fe fea2 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2,0);
 8003324:	2100      	movs	r1, #0
 8003326:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800332a:	f7fe fc71 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 800332e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003332:	f7fe feb7 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8003336:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800333a:	f7fe feda 	bl	80020f2 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 800333e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003342:	f7fe fc47 	bl	8001bd4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8003346:	bf00      	nop
 8003348:	3728      	adds	r7, #40	; 0x28
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	04800080 	.word	0x04800080
 8003354:	40010800 	.word	0x40010800
 8003358:	40010c00 	.word	0x40010c00

0800335c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003372:	463b      	mov	r3, r7
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003380:	2002      	movs	r0, #2
 8003382:	f7fe fbd7 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003386:	2008      	movs	r0, #8
 8003388:	f7fe fbec 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800338c:	f243 0330 	movw	r3, #12336	; 0x3030
 8003390:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003392:	2304      	movs	r3, #4
 8003394:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003396:	463b      	mov	r3, r7
 8003398:	4619      	mov	r1, r3
 800339a:	4836      	ldr	r0, [pc, #216]	; (8003474 <MX_TIM3_Init+0x118>)
 800339c:	f000 ff80 	bl	80042a0 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80033a0:	f7fd ffe6 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2200      	movs	r2, #0
 80033a8:	2102      	movs	r1, #2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe f834 	bl	8001418 <NVIC_EncodePriority>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4619      	mov	r1, r3
 80033b4:	201d      	movs	r0, #29
 80033b6:	f7fe f805 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80033ba:	201d      	movs	r0, #29
 80033bc:	f7fd ffe6 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 80033c0:	f7fe ff7a 	bl	80022b8 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 80033c4:	2103      	movs	r1, #3
 80033c6:	482c      	ldr	r0, [pc, #176]	; (8003478 <MX_TIM3_Init+0x11c>)
 80033c8:	f7fe fe2a 	bl	8002020 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80033cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033d0:	2101      	movs	r1, #1
 80033d2:	4829      	ldr	r0, [pc, #164]	; (8003478 <MX_TIM3_Init+0x11c>)
 80033d4:	f7fe fcf0 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80033d8:	2200      	movs	r2, #0
 80033da:	2101      	movs	r1, #1
 80033dc:	4826      	ldr	r0, [pc, #152]	; (8003478 <MX_TIM3_Init+0x11c>)
 80033de:	f7fe fd35 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80033e2:	2200      	movs	r2, #0
 80033e4:	2101      	movs	r1, #1
 80033e6:	4824      	ldr	r0, [pc, #144]	; (8003478 <MX_TIM3_Init+0x11c>)
 80033e8:	f7fe fd7a 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80033ec:	2200      	movs	r2, #0
 80033ee:	2101      	movs	r1, #1
 80033f0:	4821      	ldr	r0, [pc, #132]	; (8003478 <MX_TIM3_Init+0x11c>)
 80033f2:	f7fe fdbf 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80033f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033fa:	2110      	movs	r1, #16
 80033fc:	481e      	ldr	r0, [pc, #120]	; (8003478 <MX_TIM3_Init+0x11c>)
 80033fe:	f7fe fcdb 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8003402:	2200      	movs	r2, #0
 8003404:	2110      	movs	r1, #16
 8003406:	481c      	ldr	r0, [pc, #112]	; (8003478 <MX_TIM3_Init+0x11c>)
 8003408:	f7fe fd20 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 800340c:	2200      	movs	r2, #0
 800340e:	2110      	movs	r1, #16
 8003410:	4819      	ldr	r0, [pc, #100]	; (8003478 <MX_TIM3_Init+0x11c>)
 8003412:	f7fe fd65 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8003416:	2200      	movs	r2, #0
 8003418:	2110      	movs	r1, #16
 800341a:	4817      	ldr	r0, [pc, #92]	; (8003478 <MX_TIM3_Init+0x11c>)
 800341c:	f7fe fdaa 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8003428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800342c:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800342e:	2300      	movs	r3, #0
 8003430:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003432:	f107 0314 	add.w	r3, r7, #20
 8003436:	4619      	mov	r1, r3
 8003438:	480f      	ldr	r0, [pc, #60]	; (8003478 <MX_TIM3_Init+0x11c>)
 800343a:	f001 fa25 	bl	8004888 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800343e:	480e      	ldr	r0, [pc, #56]	; (8003478 <MX_TIM3_Init+0x11c>)
 8003440:	f7fe fbd7 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003444:	2100      	movs	r1, #0
 8003446:	480c      	ldr	r0, [pc, #48]	; (8003478 <MX_TIM3_Init+0x11c>)
 8003448:	f7fe fdfc 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800344c:	480a      	ldr	r0, [pc, #40]	; (8003478 <MX_TIM3_Init+0x11c>)
 800344e:	f7fe fe0b 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3,0);
 8003452:	2100      	movs	r1, #0
 8003454:	4808      	ldr	r0, [pc, #32]	; (8003478 <MX_TIM3_Init+0x11c>)
 8003456:	f7fe fbdb 	bl	8001c10 <LL_TIM_SetCounter>
   LL_TIM_EnableCounter(TIM3);
 800345a:	4807      	ldr	r0, [pc, #28]	; (8003478 <MX_TIM3_Init+0x11c>)
 800345c:	f7fe fbba 	bl	8001bd4 <LL_TIM_EnableCounter>
   LL_TIM_ClearFlag_UPDATE(TIM3);
 8003460:	4805      	ldr	r0, [pc, #20]	; (8003478 <MX_TIM3_Init+0x11c>)
 8003462:	f7fe fe1f 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>
   LL_TIM_EnableIT_UPDATE(TIM3);
 8003466:	4804      	ldr	r0, [pc, #16]	; (8003478 <MX_TIM3_Init+0x11c>)
 8003468:	f7fe fe43 	bl	80020f2 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 800346c:	bf00      	nop
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40010c00 	.word	0x40010c00
 8003478:	40000400 	.word	0x40000400

0800347c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08e      	sub	sp, #56	; 0x38
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	2220      	movs	r2, #32
 8003496:	2100      	movs	r1, #0
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fdcf 	bl	800503c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800349e:	2004      	movs	r0, #4
 80034a0:	f7fe fb48 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80034a4:	f7fd ff64 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd ffb2 	bl	8001418 <NVIC_EncodePriority>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4619      	mov	r1, r3
 80034b8:	201e      	movs	r0, #30
 80034ba:	f7fd ff83 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 80034be:	201e      	movs	r0, #30
 80034c0:	f7fd ff64 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 24;
 80034c4:	2318      	movs	r3, #24
 80034c6:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 60000;
 80034cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80034d2:	2300      	movs	r3, #0
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80034d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034da:	4619      	mov	r1, r3
 80034dc:	482d      	ldr	r0, [pc, #180]	; (8003594 <MX_TIM4_Init+0x118>)
 80034de:	f001 f9d3 	bl	8004888 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80034e2:	482c      	ldr	r0, [pc, #176]	; (8003594 <MX_TIM4_Init+0x118>)
 80034e4:	f7fe fb85 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80034e8:	2100      	movs	r1, #0
 80034ea:	482a      	ldr	r0, [pc, #168]	; (8003594 <MX_TIM4_Init+0x118>)
 80034ec:	f7fe fd84 	bl	8001ff8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 80034f0:	2101      	movs	r1, #1
 80034f2:	4828      	ldr	r0, [pc, #160]	; (8003594 <MX_TIM4_Init+0x118>)
 80034f4:	f7fe fbdc 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80034f8:	2360      	movs	r3, #96	; 0x60
 80034fa:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 4500;
 8003504:	f241 1394 	movw	r3, #4500	; 0x1194
 8003508:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	461a      	mov	r2, r3
 8003512:	2101      	movs	r1, #1
 8003514:	481f      	ldr	r0, [pc, #124]	; (8003594 <MX_TIM4_Init+0x118>)
 8003516:	f001 fa15 	bl	8004944 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 800351a:	2101      	movs	r1, #1
 800351c:	481d      	ldr	r0, [pc, #116]	; (8003594 <MX_TIM4_Init+0x118>)
 800351e:	f7fe fb85 	bl	8001c2c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800352e:	1d3b      	adds	r3, r7, #4
 8003530:	461a      	mov	r2, r3
 8003532:	2110      	movs	r1, #16
 8003534:	4817      	ldr	r0, [pc, #92]	; (8003594 <MX_TIM4_Init+0x118>)
 8003536:	f001 fa05 	bl	8004944 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 800353a:	2110      	movs	r1, #16
 800353c:	4815      	ldr	r0, [pc, #84]	; (8003594 <MX_TIM4_Init+0x118>)
 800353e:	f7fe fb75 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8003542:	2100      	movs	r1, #0
 8003544:	4813      	ldr	r0, [pc, #76]	; (8003594 <MX_TIM4_Init+0x118>)
 8003546:	f7fe fd7d 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800354a:	4812      	ldr	r0, [pc, #72]	; (8003594 <MX_TIM4_Init+0x118>)
 800354c:	f7fe fd8c 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8003550:	2101      	movs	r1, #1
 8003552:	4810      	ldr	r0, [pc, #64]	; (8003594 <MX_TIM4_Init+0x118>)
 8003554:	f7fe fbee 	bl	8001d34 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM4_Init 2 */

  LL_TIM_EnableIT_UPDATE(TIM4);
 8003558:	480e      	ldr	r0, [pc, #56]	; (8003594 <MX_TIM4_Init+0x118>)
 800355a:	f7fe fdca 	bl	80020f2 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM4);
 800355e:	480d      	ldr	r0, [pc, #52]	; (8003594 <MX_TIM4_Init+0x118>)
 8003560:	f7fe fda0 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>

  LL_TIM_EnableIT_CC1(TIM4);
 8003564:	480b      	ldr	r0, [pc, #44]	; (8003594 <MX_TIM4_Init+0x118>)
 8003566:	f7fe fdd3 	bl	8002110 <LL_TIM_EnableIT_CC1>
  LL_TIM_ClearFlag_CC1(TIM4);
 800356a:	480a      	ldr	r0, [pc, #40]	; (8003594 <MX_TIM4_Init+0x118>)
 800356c:	f7fe fda7 	bl	80020be <LL_TIM_ClearFlag_CC1>
//
  LL_TIM_EnableIT_CC2(TIM4);
 8003570:	4808      	ldr	r0, [pc, #32]	; (8003594 <MX_TIM4_Init+0x118>)
 8003572:	f7fe fddc 	bl	800212e <LL_TIM_EnableIT_CC2>
  LL_TIM_ClearFlag_CC2(TIM4);
 8003576:	4807      	ldr	r0, [pc, #28]	; (8003594 <MX_TIM4_Init+0x118>)
 8003578:	f7fe fdae 	bl	80020d8 <LL_TIM_ClearFlag_CC2>


  LL_TIM_SetCounter(TIM4,0);
 800357c:	2100      	movs	r1, #0
 800357e:	4805      	ldr	r0, [pc, #20]	; (8003594 <MX_TIM4_Init+0x118>)
 8003580:	f7fe fb46 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM4);
 8003584:	4803      	ldr	r0, [pc, #12]	; (8003594 <MX_TIM4_Init+0x118>)
 8003586:	f7fe fb25 	bl	8001bd4 <LL_TIM_EnableCounter>


  /* USER CODE END TIM4_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	3738      	adds	r7, #56	; 0x38
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40000800 	.word	0x40000800

08003598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	; 0x30
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	611a      	str	r2, [r3, #16]
 80035ae:	615a      	str	r2, [r3, #20]
 80035b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b2:	463b      	mov	r3, r7
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80035c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035c4:	f7fe face 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80035c8:	2008      	movs	r0, #8
 80035ca:	f7fe facb 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80035ce:	f244 0340 	movw	r3, #16448	; 0x4040
 80035d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80035d4:	2309      	movs	r3, #9
 80035d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	463b      	mov	r3, r7
 80035e2:	4619      	mov	r1, r3
 80035e4:	481f      	ldr	r0, [pc, #124]	; (8003664 <MX_USART1_UART_Init+0xcc>)
 80035e6:	f000 fe5b 	bl	80042a0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80035ea:	f248 0380 	movw	r3, #32896	; 0x8080
 80035ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80035f0:	2304      	movs	r3, #4
 80035f2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f4:	463b      	mov	r3, r7
 80035f6:	4619      	mov	r1, r3
 80035f8:	481a      	ldr	r0, [pc, #104]	; (8003664 <MX_USART1_UART_Init+0xcc>)
 80035fa:	f000 fe51 	bl	80042a0 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 80035fe:	f7fe fe3b 	bl	8002278 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003602:	f7fd feb5 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8003606:	4603      	mov	r3, r0
 8003608:	2200      	movs	r2, #0
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd ff03 	bl	8001418 <NVIC_EncodePriority>
 8003612:	4603      	mov	r3, r0
 8003614:	4619      	mov	r1, r3
 8003616:	2025      	movs	r0, #37	; 0x25
 8003618:	f7fd fed4 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800361c:	2025      	movs	r0, #37	; 0x25
 800361e:	f7fd feb5 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003622:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003626:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8003628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800362c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003636:	230c      	movs	r3, #12
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800363a:	2300      	movs	r3, #0
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800363e:	2300      	movs	r3, #0
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4807      	ldr	r0, [pc, #28]	; (8003668 <MX_USART1_UART_Init+0xd0>)
 800364a:	f001 fc1d 	bl	8004e88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800364e:	4806      	ldr	r0, [pc, #24]	; (8003668 <MX_USART1_UART_Init+0xd0>)
 8003650:	f7fe fd8b 	bl	800216a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003654:	4804      	ldr	r0, [pc, #16]	; (8003668 <MX_USART1_UART_Init+0xd0>)
 8003656:	f7fe fd79 	bl	800214c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800365a:	bf00      	nop
 800365c:	3730      	adds	r7, #48	; 0x30
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40010c00 	.word	0x40010c00
 8003668:	40013800 	.word	0x40013800

0800366c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003670:	2001      	movs	r0, #1
 8003672:	f7fe fa47 	bl	8001b04 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003676:	f7fd fe7b 	bl	8001370 <__NVIC_GetPriorityGrouping>
 800367a:	4603      	mov	r3, r0
 800367c:	2200      	movs	r2, #0
 800367e:	2101      	movs	r1, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f7fd fec9 	bl	8001418 <NVIC_EncodePriority>
 8003686:	4603      	mov	r3, r0
 8003688:	4619      	mov	r1, r3
 800368a:	200b      	movs	r0, #11
 800368c:	f7fd fe9a 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003690:	200b      	movs	r0, #11
 8003692:	f7fd fe7b 	bl	800138c <__NVIC_EnableIRQ>

}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80036a2:	f107 0318 	add.w	r3, r7, #24
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	1d3b      	adds	r3, r7, #4
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80036ba:	2010      	movs	r0, #16
 80036bc:	f7fe fa52 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80036c0:	2020      	movs	r0, #32
 80036c2:	f7fe fa4f 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80036c6:	2004      	movs	r0, #4
 80036c8:	f7fe fa4c 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80036cc:	2008      	movs	r0, #8
 80036ce:	f7fe fa49 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80036d2:	494c      	ldr	r1, [pc, #304]	; (8003804 <MX_GPIO_Init+0x168>)
 80036d4:	484c      	ldr	r0, [pc, #304]	; (8003808 <MX_GPIO_Init+0x16c>)
 80036d6:	f7fe fdaf 	bl	8002238 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80036da:	494c      	ldr	r1, [pc, #304]	; (800380c <MX_GPIO_Init+0x170>)
 80036dc:	484c      	ldr	r0, [pc, #304]	; (8003810 <MX_GPIO_Init+0x174>)
 80036de:	f7fe fdab 	bl	8002238 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 80036e2:	494c      	ldr	r1, [pc, #304]	; (8003814 <MX_GPIO_Init+0x178>)
 80036e4:	484c      	ldr	r0, [pc, #304]	; (8003818 <MX_GPIO_Init+0x17c>)
 80036e6:	f7fe fda7 	bl	8002238 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80036ea:	4b46      	ldr	r3, [pc, #280]	; (8003804 <MX_GPIO_Init+0x168>)
 80036ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80036ee:	2301      	movs	r3, #1
 80036f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80036f2:	2302      	movs	r3, #2
 80036f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4842      	ldr	r0, [pc, #264]	; (8003808 <MX_GPIO_Init+0x16c>)
 8003700:	f000 fdce 	bl	80042a0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003704:	4b41      	ldr	r3, [pc, #260]	; (800380c <MX_GPIO_Init+0x170>)
 8003706:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003708:	2301      	movs	r3, #1
 800370a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800370c:	2303      	movs	r3, #3
 800370e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	4619      	mov	r1, r3
 8003718:	483d      	ldr	r0, [pc, #244]	; (8003810 <MX_GPIO_Init+0x174>)
 800371a:	f000 fdc1 	bl	80042a0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <MX_GPIO_Init+0x180>)
 8003720:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003722:	2301      	movs	r3, #1
 8003724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003726:	2302      	movs	r3, #2
 8003728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	4619      	mov	r1, r3
 8003732:	4839      	ldr	r0, [pc, #228]	; (8003818 <MX_GPIO_Init+0x17c>)
 8003734:	f000 fdb4 	bl	80042a0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <MX_GPIO_Init+0x184>)
 800373a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800373c:	2301      	movs	r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003740:	2303      	movs	r3, #3
 8003742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4832      	ldr	r0, [pc, #200]	; (8003818 <MX_GPIO_Init+0x17c>)
 800374e:	f000 fda7 	bl	80042a0 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 8003752:	4934      	ldr	r1, [pc, #208]	; (8003824 <MX_GPIO_Init+0x188>)
 8003754:	2001      	movs	r0, #1
 8003756:	f7fe fdd7 	bl	8002308 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 800375a:	4933      	ldr	r1, [pc, #204]	; (8003828 <MX_GPIO_Init+0x18c>)
 800375c:	2001      	movs	r0, #1
 800375e:	f7fe fdd3 	bl	8002308 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 8003762:	4932      	ldr	r1, [pc, #200]	; (800382c <MX_GPIO_Init+0x190>)
 8003764:	2001      	movs	r0, #1
 8003766:	f7fe fdcf 	bl	8002308 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 800376a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800376e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003770:	2301      	movs	r3, #1
 8003772:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003774:	2300      	movs	r3, #0
 8003776:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003778:	2301      	movs	r3, #1
 800377a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800377c:	f107 0318 	add.w	r3, r7, #24
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fc59 	bl	8004038 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8003786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800378a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800378c:	2301      	movs	r3, #1
 800378e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003790:	2300      	movs	r3, #0
 8003792:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003794:	2301      	movs	r3, #1
 8003796:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003798:	f107 0318 	add.w	r3, r7, #24
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fc4b 	bl	8004038 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80037a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037a6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80037a8:	2301      	movs	r3, #1
 80037aa:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80037ac:	2300      	movs	r3, #0
 80037ae:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80037b0:	2301      	movs	r3, #1
 80037b2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80037b4:	f107 0318 	add.w	r3, r7, #24
 80037b8:	4618      	mov	r0, r3
 80037ba:	f000 fc3d 	bl	8004038 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 80037be:	2204      	movs	r2, #4
 80037c0:	491b      	ldr	r1, [pc, #108]	; (8003830 <MX_GPIO_Init+0x194>)
 80037c2:	4813      	ldr	r0, [pc, #76]	; (8003810 <MX_GPIO_Init+0x174>)
 80037c4:	f7fe fd06 	bl	80021d4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 80037c8:	2204      	movs	r2, #4
 80037ca:	490e      	ldr	r1, [pc, #56]	; (8003804 <MX_GPIO_Init+0x168>)
 80037cc:	4810      	ldr	r0, [pc, #64]	; (8003810 <MX_GPIO_Init+0x174>)
 80037ce:	f7fe fd01 	bl	80021d4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 80037d2:	2204      	movs	r2, #4
 80037d4:	4917      	ldr	r1, [pc, #92]	; (8003834 <MX_GPIO_Init+0x198>)
 80037d6:	480e      	ldr	r0, [pc, #56]	; (8003810 <MX_GPIO_Init+0x174>)
 80037d8:	f7fe fcfc 	bl	80021d4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80037dc:	f7fd fdc8 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2200      	movs	r2, #0
 80037e4:	2102      	movs	r1, #2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fe16 	bl	8001418 <NVIC_EncodePriority>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4619      	mov	r1, r3
 80037f0:	2028      	movs	r0, #40	; 0x28
 80037f2:	f7fd fde7 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037f6:	2028      	movs	r0, #40	; 0x28
 80037f8:	f7fd fdc8 	bl	800138c <__NVIC_EnableIRQ>

}
 80037fc:	bf00      	nop
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	04200020 	.word	0x04200020
 8003808:	40011000 	.word	0x40011000
 800380c:	04800080 	.word	0x04800080
 8003810:	40010c00 	.word	0x40010c00
 8003814:	040a000a 	.word	0x040a000a
 8003818:	40010800 	.word	0x40010800
 800381c:	04020002 	.word	0x04020002
 8003820:	04080008 	.word	0x04080008
 8003824:	000f0003 	.word	0x000f0003
 8003828:	00f00003 	.word	0x00f00003
 800382c:	0f000003 	.word	0x0f000003
 8003830:	04100010 	.word	0x04100010
 8003834:	04400040 	.word	0x04400040

08003838 <Sensor_Convert_A2D>:
	 {
		 Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i])/2;
	 }
}
void Sensor_Convert_A2D()
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; ++i)
 800383e:	2300      	movs	r3, #0
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	e01c      	b.n	800387e <Sensor_Convert_A2D+0x46>
	  {
		  if(Sensor_ADC_Value[i] < Sensor_Threshold[i])
 8003844:	4a12      	ldr	r2, [pc, #72]	; (8003890 <Sensor_Convert_A2D+0x58>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800384c:	b29a      	uxth	r2, r3
 800384e:	4911      	ldr	r1, [pc, #68]	; (8003894 <Sensor_Convert_A2D+0x5c>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003856:	429a      	cmp	r2, r3
 8003858:	d20e      	bcs.n	8003878 <Sensor_Convert_A2D+0x40>
		  {
			  sbi(LineDetect, (7-i));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f1c3 0307 	rsb	r3, r3, #7
 8003860:	2201      	movs	r2, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	b25a      	sxtb	r2, r3
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <Sensor_Convert_A2D+0x60>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b25b      	sxtb	r3, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	b25b      	sxtb	r3, r3
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <Sensor_Convert_A2D+0x60>)
 8003876:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; ++i)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3301      	adds	r3, #1
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b07      	cmp	r3, #7
 8003882:	dddf      	ble.n	8003844 <Sensor_Convert_A2D+0xc>
//			  printf("0 ");
		  }
	  };
//	printf("\n");
//	LL_mDelay(500);
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000220 	.word	0x20000220
 8003894:	20000000 	.word	0x20000000
 8003898:	20000206 	.word	0x20000206

0800389c <Sensor_Print_LineDetect>:
  printf("\n");

}

void Sensor_Print_LineDetect()
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
//	if(PrevLine != LineDetect)
//	{
		char buffer[8];
		itoa (LineDetect,buffer,2);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <Sensor_Print_LineDetect+0x30>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	463b      	mov	r3, r7
 80038aa:	2202      	movs	r2, #2
 80038ac:	4619      	mov	r1, r3
 80038ae:	f001 fbc3 	bl	8005038 <itoa>
		printf ("binary: %s\n",buffer);
 80038b2:	463b      	mov	r3, r7
 80038b4:	4619      	mov	r1, r3
 80038b6:	4806      	ldr	r0, [pc, #24]	; (80038d0 <Sensor_Print_LineDetect+0x34>)
 80038b8:	f002 f818 	bl	80058ec <iprintf>
		PrevLine = LineDetect;
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <Sensor_Print_LineDetect+0x30>)
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <Sensor_Print_LineDetect+0x38>)
 80038c2:	701a      	strb	r2, [r3, #0]
//	}

}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000206 	.word	0x20000206
 80038d0:	08007918 	.word	0x08007918
 80038d4:	20000205 	.word	0x20000205

080038d8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4013      	ands	r3, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40010400 	.word	0x40010400

08003904 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800390c:	4a03      	ldr	r2, [pc, #12]	; (800391c <LL_EXTI_ClearFlag_0_31+0x18>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6153      	str	r3, [r2, #20]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	40010400 	.word	0x40010400

08003920 <LL_TIM_ClearFlag_UPDATE>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f06f 0201 	mvn.w	r2, #1
 800392e:	611a      	str	r2, [r3, #16]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <LL_TIM_IsActiveFlag_UPDATE>:
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <LL_TIM_ClearFlag_CC1>:
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f06f 0202 	mvn.w	r2, #2
 800396c:	611a      	str	r2, [r3, #16]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <LL_TIM_IsActiveFlag_CC1>:
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b02      	cmp	r3, #2
 800398a:	d101      	bne.n	8003990 <LL_TIM_IsActiveFlag_CC1+0x18>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <LL_TIM_ClearFlag_CC2>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f06f 0204 	mvn.w	r2, #4
 80039aa:	611a      	str	r2, [r3, #16]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <LL_TIM_IsActiveFlag_CC2>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d101      	bne.n	80039ce <LL_TIM_IsActiveFlag_CC2+0x18>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <LL_GPIO_SetOutputPin>:
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	611a      	str	r2, [r3, #16]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <LL_GPIO_ResetOutputPin>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	615a      	str	r2, [r3, #20]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a26:	e7fe      	b.n	8003a26 <HardFault_Handler+0x4>

08003a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a2c:	e7fe      	b.n	8003a2c <MemManage_Handler+0x4>

08003a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a32:	e7fe      	b.n	8003a32 <BusFault_Handler+0x4>

08003a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a38:	e7fe      	b.n	8003a38 <UsageFault_Handler+0x4>

08003a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
	...

08003a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <SysTick_Handler+0x18>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a03      	ldr	r2, [pc, #12]	; (8003a78 <SysTick_Handler+0x18>)
 8003a6c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	2000020c 	.word	0x2000020c

08003a7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8003a8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a90:	f7ff ff46 	bl	8003920 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <TIM3_IRQHandler+0x10>)
 8003a9e:	f7ff ff3f 	bl	8003920 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40000400 	.word	0x40000400

08003aac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 8003ab2:	4819      	ldr	r0, [pc, #100]	; (8003b18 <TIM4_IRQHandler+0x6c>)
 8003ab4:	f7ff ff60 	bl	8003978 <LL_TIM_IsActiveFlag_CC1>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d006      	beq.n	8003acc <TIM4_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 8003abe:	4816      	ldr	r0, [pc, #88]	; (8003b18 <TIM4_IRQHandler+0x6c>)
 8003ac0:	f7ff ff4d 	bl	800395e <LL_TIM_ClearFlag_CC1>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003ac4:	4915      	ldr	r1, [pc, #84]	; (8003b1c <TIM4_IRQHandler+0x70>)
 8003ac6:	4816      	ldr	r0, [pc, #88]	; (8003b20 <TIM4_IRQHandler+0x74>)
 8003ac8:	f7ff ff96 	bl	80039f8 <LL_GPIO_ResetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 8003acc:	4812      	ldr	r0, [pc, #72]	; (8003b18 <TIM4_IRQHandler+0x6c>)
 8003ace:	f7ff ff34 	bl	800393a <LL_TIM_IsActiveFlag_UPDATE>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d006      	beq.n	8003ae6 <TIM4_IRQHandler+0x3a>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8003ad8:	480f      	ldr	r0, [pc, #60]	; (8003b18 <TIM4_IRQHandler+0x6c>)
 8003ada:	f7ff ff21 	bl	8003920 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003ade:	490f      	ldr	r1, [pc, #60]	; (8003b1c <TIM4_IRQHandler+0x70>)
 8003ae0:	480f      	ldr	r0, [pc, #60]	; (8003b20 <TIM4_IRQHandler+0x74>)
 8003ae2:	f7ff ff7a 	bl	80039da <LL_GPIO_SetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_CC2(TIM4))
 8003ae6:	480c      	ldr	r0, [pc, #48]	; (8003b18 <TIM4_IRQHandler+0x6c>)
 8003ae8:	f7ff ff65 	bl	80039b6 <LL_TIM_IsActiveFlag_CC2>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00e      	beq.n	8003b10 <TIM4_IRQHandler+0x64>
	{
//		LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
		uint16_t newCPR = TIM4->CNT + AddCPRTime - 1;
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <TIM4_IRQHandler+0x6c>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <TIM4_IRQHandler+0x78>)
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	80fb      	strh	r3, [r7, #6]
		TIM4->CCR2 = newCPR;
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <TIM4_IRQHandler+0x6c>)
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	6393      	str	r3, [r2, #56]	; 0x38
		LL_TIM_ClearFlag_CC2(TIM4);
 8003b0a:	4803      	ldr	r0, [pc, #12]	; (8003b18 <TIM4_IRQHandler+0x6c>)
 8003b0c:	f7ff ff46 	bl	800399c <LL_TIM_ClearFlag_CC2>
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	04080008 	.word	0x04080008
 8003b20:	40010800 	.word	0x40010800
 8003b24:	20000210 	.word	0x20000210

08003b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8003b38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b3c:	f7ff fecc 	bl	80038d8 <LL_EXTI_IsActiveFlag_0_31>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8003b46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b4a:	f7ff fedb 	bl	8003904 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <EXTI15_10_IRQHandler+0x5c>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8003b54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b58:	f7ff febe 	bl	80038d8 <LL_EXTI_IsActiveFlag_0_31>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d006      	beq.n	8003b70 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8003b62:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b66:	f7ff fecd 	bl	8003904 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BTN2_Flag = 1;
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <EXTI15_10_IRQHandler+0x60>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003b70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b74:	f7ff feb0 	bl	80038d8 <LL_EXTI_IsActiveFlag_0_31>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <EXTI15_10_IRQHandler+0x58>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8003b7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b82:	f7ff febf 	bl	8003904 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    BTN3_Flag = 1;
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <EXTI15_10_IRQHandler+0x64>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b8c:	bf00      	nop
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000204 	.word	0x20000204
 8003b94:	20000212 	.word	0x20000212
 8003b98:	20000213 	.word	0x20000213

08003b9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	e00a      	b.n	8003bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bae:	f3af 8000 	nop.w
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	60ba      	str	r2, [r7, #8]
 8003bba:	b2ca      	uxtb	r2, r1
 8003bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	dbf0      	blt.n	8003bae <_read+0x12>
	}

return len;
 8003bcc:	687b      	ldr	r3, [r7, #4]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e009      	b.n	8003bfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	60ba      	str	r2, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe fbb7 	bl	8002364 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	dbf1      	blt.n	8003be8 <_write+0x12>
	}
	return len;
 8003c04:	687b      	ldr	r3, [r7, #4]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <_close>:

int _close(int file)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
	return -1;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c34:	605a      	str	r2, [r3, #4]
	return 0;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <_isatty>:

int _isatty(int file)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	return 1;
 8003c4a:	2301      	movs	r3, #1
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
	return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr
	...

08003c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <_sbrk+0x5c>)
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <_sbrk+0x60>)
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <_sbrk+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <_sbrk+0x64>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <_sbrk+0x68>)
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca0:	f001 f988 	bl	8004fb4 <__errno>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e009      	b.n	8003cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_sbrk+0x64>)
 8003cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20005000 	.word	0x20005000
 8003cd0:	00000400 	.word	0x00000400
 8003cd4:	20000214 	.word	0x20000214
 8003cd8:	20000238 	.word	0x20000238

08003cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <SystemInit+0x5c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <SystemInit+0x5c>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <SystemInit+0x5c>)
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	4911      	ldr	r1, [pc, #68]	; (8003d38 <SystemInit+0x5c>)
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <SystemInit+0x60>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <SystemInit+0x5c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <SystemInit+0x5c>)
 8003cfe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <SystemInit+0x5c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <SystemInit+0x5c>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <SystemInit+0x5c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <SystemInit+0x5c>)
 8003d1a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003d1e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <SystemInit+0x5c>)
 8003d22:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003d26:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <SystemInit+0x64>)
 8003d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d2e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	f8ff0000 	.word	0xf8ff0000
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d46:	e003      	b.n	8003d50 <LoopCopyDataInit>

08003d48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003d4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003d4e:	3104      	adds	r1, #4

08003d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003d50:	480a      	ldr	r0, [pc, #40]	; (8003d7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003d54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003d56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003d58:	d3f6      	bcc.n	8003d48 <CopyDataInit>
  ldr r2, =_sbss
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003d5c:	e002      	b.n	8003d64 <LoopFillZerobss>

08003d5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003d5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003d60:	f842 3b04 	str.w	r3, [r2], #4

08003d64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003d66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003d68:	d3f9      	bcc.n	8003d5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d6a:	f7ff ffb7 	bl	8003cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d6e:	f001 f927 	bl	8004fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d72:	f7fe fb11 	bl	8002398 <main>
  bx lr
 8003d76:	4770      	bx	lr
  ldr r3, =_sidata
 8003d78:	08007c50 	.word	0x08007c50
  ldr r0, =_sdata
 8003d7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003d80:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8003d84:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8003d88:	20000234 	.word	0x20000234

08003d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d8c:	e7fe      	b.n	8003d8c <ADC1_2_IRQHandler>

08003d8e <LL_ADC_REG_SetSequencerLength>:
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr

08003db2 <LL_ADC_IsEnabled>:
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
	...

08003dd8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003de6:	4813      	ldr	r0, [pc, #76]	; (8003e34 <LL_ADC_CommonInit+0x5c>)
 8003de8:	f7ff ffe3 	bl	8003db2 <LL_ADC_IsEnabled>
 8003dec:	4604      	mov	r4, r0
 8003dee:	4812      	ldr	r0, [pc, #72]	; (8003e38 <LL_ADC_CommonInit+0x60>)
 8003df0:	f7ff ffdf 	bl	8003db2 <LL_ADC_IsEnabled>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4323      	orrs	r3, r4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d114      	bne.n	8003e26 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d009      	beq.n	8003e18 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	e008      	b.n	8003e2a <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	e001      	b.n	8003e2a <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd90      	pop	{r4, r7, pc}
 8003e34:	40012400 	.word	0x40012400
 8003e38:	40012800 	.word	0x40012800

08003e3c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff ffb1 	bl	8003db2 <LL_ADC_IsEnabled>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d112      	bne.n	8003e7c <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	e001      	b.n	8003e80 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff8a 	bl	8003db2 <LL_ADC_IsEnabled>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d131      	bne.n	8003f08 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00c      	beq.n	8003ec6 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	605a      	str	r2, [r3, #4]
 8003ec4:	e008      	b.n	8003ed8 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8003ee0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	6811      	ldr	r1, [r2, #0]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	68d2      	ldr	r2, [r2, #12]
 8003eec:	4311      	orrs	r1, r2
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	6912      	ldr	r2, [r2, #16]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4619      	mov	r1, r3
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff44 	bl	8003d8e <LL_ADC_REG_SetSequencerLength>
 8003f06:	e001      	b.n	8003f0c <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <LL_EXTI_EnableIT_0_31>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <LL_EXTI_EnableIT_0_31+0x20>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <LL_EXTI_EnableIT_0_31+0x20>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010400 	.word	0x40010400

08003f3c <LL_EXTI_DisableIT_0_31>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <LL_EXTI_DisableIT_0_31+0x20>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <LL_EXTI_DisableIT_0_31+0x20>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40010400 	.word	0x40010400

08003f60 <LL_EXTI_EnableEvent_0_31>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010400 	.word	0x40010400

08003f84 <LL_EXTI_DisableEvent_0_31>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	4903      	ldr	r1, [pc, #12]	; (8003fa4 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010400 	.word	0x40010400

08003fcc <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	4903      	ldr	r1, [pc, #12]	; (8003fec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	40010400 	.word	0x40010400

08003ff0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4904      	ldr	r1, [pc, #16]	; (8004010 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4313      	orrs	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010400 	.word	0x40010400

08004014 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	43db      	mvns	r3, r3
 8004024:	4903      	ldr	r1, [pc, #12]	; (8004034 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004026:	4013      	ands	r3, r2
 8004028:	60cb      	str	r3, [r1, #12]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40010400 	.word	0x40010400

08004038 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d060      	beq.n	800410e <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d067      	beq.n	8004124 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	795b      	ldrb	r3, [r3, #5]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d00e      	beq.n	800407a <LL_EXTI_Init+0x42>
 800405c:	2b02      	cmp	r3, #2
 800405e:	d017      	beq.n	8004090 <LL_EXTI_Init+0x58>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d120      	bne.n	80040a6 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff8b 	bl	8003f84 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff50 	bl	8003f18 <LL_EXTI_EnableIT_0_31>
          break;
 8004078:	e018      	b.n	80040ac <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff ff5c 	bl	8003f3c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff ff69 	bl	8003f60 <LL_EXTI_EnableEvent_0_31>
          break;
 800408e:	e00d      	b.n	80040ac <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff3f 	bl	8003f18 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ff5e 	bl	8003f60 <LL_EXTI_EnableEvent_0_31>
          break;
 80040a4:	e002      	b.n	80040ac <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
          break;
 80040aa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	799b      	ldrb	r3, [r3, #6]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d037      	beq.n	8004124 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	799b      	ldrb	r3, [r3, #6]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d00e      	beq.n	80040da <LL_EXTI_Init+0xa2>
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d017      	beq.n	80040f0 <LL_EXTI_Init+0xb8>
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d120      	bne.n	8004106 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ffa3 	bl	8004014 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff68 	bl	8003fa8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80040d8:	e025      	b.n	8004126 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff74 	bl	8003fcc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff ff81 	bl	8003ff0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80040ee:	e01a      	b.n	8004126 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff ff57 	bl	8003fa8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff ff76 	bl	8003ff0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004104:	e00f      	b.n	8004126 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
            break;
 800410a:	bf00      	nop
 800410c:	e00b      	b.n	8004126 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ff12 	bl	8003f3c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff31 	bl	8003f84 <LL_EXTI_DisableEvent_0_31>
 8004122:	e000      	b.n	8004126 <LL_EXTI_Init+0xee>
      }
 8004124:	bf00      	nop
  }
  return status;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <LL_GPIO_SetPinMode>:
{
 8004130:	b490      	push	{r4, r7}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	461a      	mov	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	0e1b      	lsrs	r3, r3, #24
 8004144:	4413      	add	r3, r2
 8004146:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004148:	6822      	ldr	r2, [r4, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	613b      	str	r3, [r7, #16]
  return result;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	210f      	movs	r1, #15
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	401a      	ands	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	61bb      	str	r3, [r7, #24]
  return result;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	4313      	orrs	r3, r2
 8004188:	6023      	str	r3, [r4, #0]
}
 800418a:	bf00      	nop
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bc90      	pop	{r4, r7}
 8004192:	4770      	bx	lr

08004194 <LL_GPIO_SetPinSpeed>:
{
 8004194:	b490      	push	{r4, r7}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	461a      	mov	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	0e1b      	lsrs	r3, r3, #24
 80041a8:	4413      	add	r3, r2
 80041aa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80041ac:	6822      	ldr	r2, [r4, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	613b      	str	r3, [r7, #16]
  return result;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	2103      	movs	r1, #3
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	43db      	mvns	r3, r3
 80041cc:	401a      	ands	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	61bb      	str	r3, [r7, #24]
  return result;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	4313      	orrs	r3, r2
 80041ec:	6023      	str	r3, [r4, #0]
}
 80041ee:	bf00      	nop
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc90      	pop	{r4, r7}
 80041f6:	4770      	bx	lr

080041f8 <LL_GPIO_SetPinOutputType>:
{
 80041f8:	b490      	push	{r4, r7}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0e1b      	lsrs	r3, r3, #24
 800420c:	4413      	add	r3, r2
 800420e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	fa93 f3a3 	rbit	r3, r3
 800421c:	613b      	str	r3, [r7, #16]
  return result;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	fab3 f383 	clz	r3, r3
 8004224:	b2db      	uxtb	r3, r3
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	2104      	movs	r1, #4
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	401a      	ands	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	61bb      	str	r3, [r7, #24]
  return result;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	fa01 f303 	lsl.w	r3, r1, r3
 800424e:	4313      	orrs	r3, r2
 8004250:	6023      	str	r3, [r4, #0]
}
 8004252:	bf00      	nop
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bc90      	pop	{r4, r7}
 800425a:	4770      	bx	lr

0800425c <LL_GPIO_SetPinPull>:
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	43db      	mvns	r3, r3
 8004272:	401a      	ands	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	fa93 f3a3 	rbit	r3, r3
 8004280:	613b      	str	r3, [r7, #16]
  return result;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4619      	mov	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	408b      	lsls	r3, r1
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	60da      	str	r2, [r3, #12]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	60fb      	str	r3, [r7, #12]
  return result;
 80042c0:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80042ca:	e040      	b.n	800434e <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80042cc:	2201      	movs	r2, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	409a      	lsls	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d036      	beq.n	8004348 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b07      	cmp	r3, #7
 80042de:	d806      	bhi.n	80042ee <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80042e0:	f240 1201 	movw	r2, #257	; 0x101
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	e008      	b.n	8004300 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3b08      	subs	r3, #8
 80042f2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042fe:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	461a      	mov	r2, r3
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff11 	bl	8004130 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	461a      	mov	r2, r3
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ffa0 	bl	800425c <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d003      	beq.n	800432c <LL_GPIO_Init+0x8c>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b09      	cmp	r3, #9
 800432a:	d10d      	bne.n	8004348 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	461a      	mov	r2, r3
 8004332:	69b9      	ldr	r1, [r7, #24]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff2d 	bl	8004194 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	461a      	mov	r2, r3
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff58 	bl	80041f8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	3301      	adds	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1b8      	bne.n	80042cc <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <LL_I2C_Enable>:
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	601a      	str	r2, [r3, #0]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr

08004382 <LL_I2C_Disable>:
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0201 	bic.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <LL_I2C_SetOwnAddress1>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	430a      	orrs	r2, r1
 80043be:	431a      	orrs	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
	...

080043d0 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80043d0:	b490      	push	{r4, r7}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 80043de:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 80043e0:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4a3f      	ldr	r2, [pc, #252]	; (80044e4 <LL_I2C_ConfigSpeed+0x114>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043f4:	ea44 0203 	orr.w	r2, r4, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4938      	ldr	r1, [pc, #224]	; (80044e8 <LL_I2C_ConfigSpeed+0x118>)
 8004408:	428b      	cmp	r3, r1
 800440a:	d801      	bhi.n	8004410 <LL_I2C_ConfigSpeed+0x40>
 800440c:	1c63      	adds	r3, r4, #1
 800440e:	e008      	b.n	8004422 <LL_I2C_ConfigSpeed+0x52>
 8004410:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004414:	fb03 f304 	mul.w	r3, r3, r4
 8004418:	4934      	ldr	r1, [pc, #208]	; (80044ec <LL_I2C_ConfigSpeed+0x11c>)
 800441a:	fba1 1303 	umull	r1, r3, r1, r3
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	3301      	adds	r3, #1
 8004422:	431a      	orrs	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <LL_I2C_ConfigSpeed+0x118>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d939      	bls.n	80044a4 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d117      	bne.n	8004466 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4413      	add	r3, r2
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	e01d      	b.n	800449c <LL_I2C_ConfigSpeed+0xcc>
 8004460:	f248 0301 	movw	r3, #32769	; 0x8001
 8004464:	e01a      	b.n	800449c <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009a      	lsls	r2, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009a      	lsls	r2, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	e001      	b.n	800449c <LL_I2C_ConfigSpeed+0xcc>
 8004498:	f248 0301 	movw	r3, #32769	; 0x8001
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	ea43 0402 	orr.w	r4, r3, r2
 80044a2:	e010      	b.n	80044c6 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d905      	bls.n	80044c2 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	e000      	b.n	80044c4 <LL_I2C_ConfigSpeed+0xf4>
 80044c2:	2304      	movs	r3, #4
 80044c4:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80044ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044d2:	ea44 0203 	orr.w	r2, r4, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	61da      	str	r2, [r3, #28]
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc90      	pop	{r4, r7}
 80044e2:	4770      	bx	lr
 80044e4:	431bde83 	.word	0x431bde83
 80044e8:	000186a0 	.word	0x000186a0
 80044ec:	10624dd3 	.word	0x10624dd3

080044f0 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 021a 	bic.w	r2, r3, #26
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	601a      	str	r2, [r3, #0]
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ff1d 	bl	8004382 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004548:	f107 0308 	add.w	r3, r7, #8
 800454c:	4618      	mov	r0, r3
 800454e:	f000 f87b 	bl	8004648 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004552:	6939      	ldr	r1, [r7, #16]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ff37 	bl	80043d0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68d9      	ldr	r1, [r3, #12]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	461a      	mov	r2, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff17 	bl	80043a0 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ffb9 	bl	80044f0 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fef0 	bl	8004364 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ffc2 	bl	8004514 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <LL_RCC_GetSysClkSource>:
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <LL_RCC_GetSysClkSource+0x14>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 030c 	and.w	r3, r3, #12
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	40021000 	.word	0x40021000

080045b4 <LL_RCC_GetAHBPrescaler>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <LL_RCC_GetAHBPrescaler+0x14>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	40021000 	.word	0x40021000

080045cc <LL_RCC_GetAPB1Prescaler>:
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80045d0:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	40021000 	.word	0x40021000

080045e4 <LL_RCC_GetAPB2Prescaler>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <LL_RCC_GetAPB2Prescaler+0x14>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	40021000 	.word	0x40021000

080045fc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <LL_RCC_PLL_GetMainSource+0x14>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	40021000 	.word	0x40021000

08004614 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	40021000 	.word	0x40021000

0800462c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004630:	4b04      	ldr	r3, [pc, #16]	; (8004644 <LL_RCC_PLL_GetPrediv+0x18>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	0c5b      	lsrs	r3, r3, #17
 8004636:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800463a:	4618      	mov	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000

08004648 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004650:	f000 f820 	bl	8004694 <RCC_GetSystemClockFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f83a 	bl	80046d8 <RCC_GetHCLKClockFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f848 	bl	8004704 <RCC_GetPCLK1ClockFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f854 	bl	800472c <RCC_GetPCLK2ClockFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60da      	str	r2, [r3, #12]
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800469e:	f7ff ff7d 	bl	800459c <LL_RCC_GetSysClkSource>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d006      	beq.n	80046b6 <RCC_GetSystemClockFreq+0x22>
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d007      	beq.n	80046bc <RCC_GetSystemClockFreq+0x28>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80046b0:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <RCC_GetSystemClockFreq+0x40>)
 80046b2:	607b      	str	r3, [r7, #4]
      break;
 80046b4:	e009      	b.n	80046ca <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <RCC_GetSystemClockFreq+0x40>)
 80046b8:	607b      	str	r3, [r7, #4]
      break;
 80046ba:	e006      	b.n	80046ca <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80046bc:	f000 f84a 	bl	8004754 <RCC_PLL_GetFreqDomain_SYS>
 80046c0:	6078      	str	r0, [r7, #4]
      break;
 80046c2:	e002      	b.n	80046ca <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <RCC_GetSystemClockFreq+0x40>)
 80046c6:	607b      	str	r3, [r7, #4]
      break;
 80046c8:	bf00      	nop
  }

  return frequency;
 80046ca:	687b      	ldr	r3, [r7, #4]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	007a1200 	.word	0x007a1200

080046d8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80046e0:	f7ff ff68 	bl	80045b4 <LL_RCC_GetAHBPrescaler>
 80046e4:	4603      	mov	r3, r0
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <RCC_GetHCLKClockFreq+0x28>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	40d3      	lsrs	r3, r2
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	0800794c 	.word	0x0800794c

08004704 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800470c:	f7ff ff5e 	bl	80045cc <LL_RCC_GetAPB1Prescaler>
 8004710:	4603      	mov	r3, r0
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <RCC_GetPCLK1ClockFreq+0x24>)
 8004716:	5cd3      	ldrb	r3, [r2, r3]
 8004718:	461a      	mov	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	40d3      	lsrs	r3, r2
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	0800795c 	.word	0x0800795c

0800472c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004734:	f7ff ff56 	bl	80045e4 <LL_RCC_GetAPB2Prescaler>
 8004738:	4603      	mov	r3, r0
 800473a:	0adb      	lsrs	r3, r3, #11
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <RCC_GetPCLK2ClockFreq+0x24>)
 800473e:	5cd3      	ldrb	r3, [r2, r3]
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	40d3      	lsrs	r3, r2
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	0800795c 	.word	0x0800795c

08004754 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	2300      	movs	r3, #0
 8004760:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004762:	f7ff ff4b 	bl	80045fc <LL_RCC_PLL_GetMainSource>
 8004766:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800476e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004772:	d003      	beq.n	800477c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8004774:	e00b      	b.n	800478e <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004778:	607b      	str	r3, [r7, #4]
      break;
 800477a:	e00b      	b.n	8004794 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800477c:	f7ff ff56 	bl	800462c <LL_RCC_PLL_GetPrediv>
 8004780:	4603      	mov	r3, r0
 8004782:	3301      	adds	r3, #1
 8004784:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	607b      	str	r3, [r7, #4]
      break;
 800478c:	e002      	b.n	8004794 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004790:	607b      	str	r3, [r7, #4]
      break;
 8004792:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004794:	f7ff ff3e 	bl	8004614 <LL_RCC_PLL_GetMultiplicator>
 8004798:	4603      	mov	r3, r0
 800479a:	0c9b      	lsrs	r3, r3, #18
 800479c:	3302      	adds	r3, #2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	003d0900 	.word	0x003d0900
 80047b0:	007a1200 	.word	0x007a1200

080047b4 <LL_TIM_SetPrescaler>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <LL_TIM_SetAutoReload>:
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <LL_TIM_SetRepetitionCounter>:
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <LL_TIM_OC_SetCompareCH1>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <LL_TIM_OC_SetCompareCH2>:
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <LL_TIM_OC_SetCompareCH3>:
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <LL_TIM_OC_SetCompareCH4>:
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f043 0201 	orr.w	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	615a      	str	r2, [r3, #20]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a27      	ldr	r2, [pc, #156]	; (8004938 <LL_TIM_Init+0xb0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <LL_TIM_Init+0x30>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d007      	beq.n	80048b8 <LL_TIM_Init+0x30>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a24      	ldr	r2, [pc, #144]	; (800493c <LL_TIM_Init+0xb4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <LL_TIM_Init+0x30>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a23      	ldr	r2, [pc, #140]	; (8004940 <LL_TIM_Init+0xb8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d106      	bne.n	80048c6 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <LL_TIM_Init+0xb0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <LL_TIM_Init+0x5e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d4:	d007      	beq.n	80048e6 <LL_TIM_Init+0x5e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <LL_TIM_Init+0xb4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <LL_TIM_Init+0x5e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a17      	ldr	r2, [pc, #92]	; (8004940 <LL_TIM_Init+0xb8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d106      	bne.n	80048f4 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ff64 	bl	80047ce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff51 	bl	80047b4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <LL_TIM_Init+0xb0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d105      	bne.n	8004926 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	7c1b      	ldrb	r3, [r3, #16]
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff61 	bl	80047e8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ff9f 	bl	800486a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800

08004944 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b10      	cmp	r3, #16
 8004958:	d012      	beq.n	8004980 <LL_TIM_OC_Init+0x3c>
 800495a:	2b10      	cmp	r3, #16
 800495c:	d802      	bhi.n	8004964 <LL_TIM_OC_Init+0x20>
 800495e:	2b01      	cmp	r3, #1
 8004960:	d007      	beq.n	8004972 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004962:	e022      	b.n	80049aa <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8004964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004968:	d011      	beq.n	800498e <LL_TIM_OC_Init+0x4a>
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496e:	d015      	beq.n	800499c <LL_TIM_OC_Init+0x58>
      break;
 8004970:	e01b      	b.n	80049aa <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f865 	bl	8004a44 <OC1Config>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]
      break;
 800497e:	e014      	b.n	80049aa <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f8c4 	bl	8004b10 <OC2Config>
 8004988:	4603      	mov	r3, r0
 800498a:	75fb      	strb	r3, [r7, #23]
      break;
 800498c:	e00d      	b.n	80049aa <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f927 	bl	8004be4 <OC3Config>
 8004996:	4603      	mov	r3, r0
 8004998:	75fb      	strb	r3, [r7, #23]
      break;
 800499a:	e006      	b.n	80049aa <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f98a 	bl	8004cb8 <OC4Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	75fb      	strb	r3, [r7, #23]
      break;
 80049a8:	bf00      	nop
  }

  return result;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	7b12      	ldrb	r2, [r2, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	89d2      	ldrh	r2, [r2, #14]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f023 0201 	bic.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 0202 	bic.w	r2, r3, #2
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <OC1Config+0xc8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d11e      	bne.n	8004ae4 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 0208 	bic.w	r2, r3, #8
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f023 0204 	bic.w	r2, r3, #4
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fe83 	bl	8004802 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40012c00 	.word	0x40012c00

08004b10 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0210 	bic.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0220 	bic.w	r2, r3, #32
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0210 	bic.w	r2, r3, #16
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <OC2Config+0xd0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d11f      	bne.n	8004bb8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	019b      	lsls	r3, r3, #6
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	019b      	lsls	r3, r3, #6
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff fe26 	bl	800481c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40012c00 	.word	0x40012c00

08004be4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <OC3Config+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d11f      	bne.n	8004c8a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	029b      	lsls	r3, r3, #10
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	029b      	lsls	r3, r3, #10
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	015b      	lsls	r3, r3, #5
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fdca 	bl	8004836 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00

08004cb8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	031b      	lsls	r3, r3, #12
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	031b      	lsls	r3, r3, #12
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0f      	ldr	r2, [pc, #60]	; (8004d58 <OC4Config+0xa0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d107      	bne.n	8004d30 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	019b      	lsls	r3, r3, #6
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fd84 	bl	8004850 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40012c00 	.word	0x40012c00

08004d5c <LL_USART_IsEnabled>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <LL_USART_SetStopBitsLength>:
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	611a      	str	r2, [r3, #16]
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <LL_USART_SetHWFlowCtrl>:
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	615a      	str	r2, [r3, #20]
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr
	...

08004dcc <LL_USART_SetBaudRate>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009a      	lsls	r2, r3, #2
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <LL_USART_SetBaudRate+0xb8>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	b299      	uxth	r1, r3
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009a      	lsls	r2, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <LL_USART_SetBaudRate+0xb8>)
 8004e10:	fba3 0302 	umull	r0, r3, r3, r2
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	2064      	movs	r0, #100	; 0x64
 8004e18:	fb00 f303 	mul.w	r3, r0, r3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	3332      	adds	r3, #50	; 0x32
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <LL_USART_SetBaudRate+0xb8>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	440b      	add	r3, r1
 8004e34:	b299      	uxth	r1, r3
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009a      	lsls	r2, r3, #2
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e4a:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <LL_USART_SetBaudRate+0xb8>)
 8004e4c:	fba3 0302 	umull	r0, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2064      	movs	r0, #100	; 0x64
 8004e54:	fb00 f303 	mul.w	r3, r0, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	3332      	adds	r3, #50	; 0x32
 8004e5e:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <LL_USART_SetBaudRate+0xb8>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	440b      	add	r3, r1
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	609a      	str	r2, [r3, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	51eb851f 	.word	0x51eb851f

08004e88 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ff5e 	bl	8004d5c <LL_USART_IsEnabled>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d145      	bne.n	8004f32 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eae:	f023 030c 	bic.w	r3, r3, #12
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	6851      	ldr	r1, [r2, #4]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	68d2      	ldr	r2, [r2, #12]
 8004eba:	4311      	orrs	r1, r2
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	6912      	ldr	r2, [r2, #16]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff ff57 	bl	8004d82 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff ff63 	bl	8004da6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fbaf 	bl	8004648 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <LL_USART_Init+0xb4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d102      	bne.n	8004ef8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	e00c      	b.n	8004f12 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <LL_USART_Init+0xb8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d102      	bne.n	8004f06 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e005      	b.n	8004f12 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a0e      	ldr	r2, [pc, #56]	; (8004f44 <LL_USART_Init+0xbc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d101      	bne.n	8004f12 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004f20:	2300      	movs	r3, #0
 8004f22:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	69b9      	ldr	r1, [r7, #24]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff4d 	bl	8004dcc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40013800 	.word	0x40013800
 8004f40:	40004400 	.word	0x40004400
 8004f44:	40004800 	.word	0x40004800

08004f48 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	4a07      	ldr	r2, [pc, #28]	; (8004f78 <LL_InitTick+0x30>)
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <LL_InitTick+0x30>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <LL_InitTick+0x30>)
 8004f68:	2205      	movs	r2, #5
 8004f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	e000e010 	.word	0xe000e010

08004f7c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004f84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ffdd 	bl	8004f48 <LL_InitTick>
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004fa0:	4a03      	ldr	r2, [pc, #12]	; (8004fb0 <LL_SetSystemCoreClock+0x18>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6013      	str	r3, [r2, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	20000014 	.word	0x20000014

08004fb4 <__errno>:
 8004fb4:	4b01      	ldr	r3, [pc, #4]	; (8004fbc <__errno+0x8>)
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000018 	.word	0x20000018

08004fc0 <__libc_init_array>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	2500      	movs	r5, #0
 8004fc4:	4e0c      	ldr	r6, [pc, #48]	; (8004ff8 <__libc_init_array+0x38>)
 8004fc6:	4c0d      	ldr	r4, [pc, #52]	; (8004ffc <__libc_init_array+0x3c>)
 8004fc8:	1ba4      	subs	r4, r4, r6
 8004fca:	10a4      	asrs	r4, r4, #2
 8004fcc:	42a5      	cmp	r5, r4
 8004fce:	d109      	bne.n	8004fe4 <__libc_init_array+0x24>
 8004fd0:	f002 fc4c 	bl	800786c <_init>
 8004fd4:	2500      	movs	r5, #0
 8004fd6:	4e0a      	ldr	r6, [pc, #40]	; (8005000 <__libc_init_array+0x40>)
 8004fd8:	4c0a      	ldr	r4, [pc, #40]	; (8005004 <__libc_init_array+0x44>)
 8004fda:	1ba4      	subs	r4, r4, r6
 8004fdc:	10a4      	asrs	r4, r4, #2
 8004fde:	42a5      	cmp	r5, r4
 8004fe0:	d105      	bne.n	8004fee <__libc_init_array+0x2e>
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe8:	4798      	blx	r3
 8004fea:	3501      	adds	r5, #1
 8004fec:	e7ee      	b.n	8004fcc <__libc_init_array+0xc>
 8004fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ff2:	4798      	blx	r3
 8004ff4:	3501      	adds	r5, #1
 8004ff6:	e7f2      	b.n	8004fde <__libc_init_array+0x1e>
 8004ff8:	08007c48 	.word	0x08007c48
 8004ffc:	08007c48 	.word	0x08007c48
 8005000:	08007c48 	.word	0x08007c48
 8005004:	08007c4c 	.word	0x08007c4c

08005008 <__itoa>:
 8005008:	1e93      	subs	r3, r2, #2
 800500a:	2b22      	cmp	r3, #34	; 0x22
 800500c:	b510      	push	{r4, lr}
 800500e:	460c      	mov	r4, r1
 8005010:	d904      	bls.n	800501c <__itoa+0x14>
 8005012:	2300      	movs	r3, #0
 8005014:	461c      	mov	r4, r3
 8005016:	700b      	strb	r3, [r1, #0]
 8005018:	4620      	mov	r0, r4
 800501a:	bd10      	pop	{r4, pc}
 800501c:	2a0a      	cmp	r2, #10
 800501e:	d109      	bne.n	8005034 <__itoa+0x2c>
 8005020:	2800      	cmp	r0, #0
 8005022:	da07      	bge.n	8005034 <__itoa+0x2c>
 8005024:	232d      	movs	r3, #45	; 0x2d
 8005026:	700b      	strb	r3, [r1, #0]
 8005028:	2101      	movs	r1, #1
 800502a:	4240      	negs	r0, r0
 800502c:	4421      	add	r1, r4
 800502e:	f000 fd23 	bl	8005a78 <__utoa>
 8005032:	e7f1      	b.n	8005018 <__itoa+0x10>
 8005034:	2100      	movs	r1, #0
 8005036:	e7f9      	b.n	800502c <__itoa+0x24>

08005038 <itoa>:
 8005038:	f7ff bfe6 	b.w	8005008 <__itoa>

0800503c <memset>:
 800503c:	4603      	mov	r3, r0
 800503e:	4402      	add	r2, r0
 8005040:	4293      	cmp	r3, r2
 8005042:	d100      	bne.n	8005046 <memset+0xa>
 8005044:	4770      	bx	lr
 8005046:	f803 1b01 	strb.w	r1, [r3], #1
 800504a:	e7f9      	b.n	8005040 <memset+0x4>

0800504c <__cvt>:
 800504c:	2b00      	cmp	r3, #0
 800504e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005052:	461e      	mov	r6, r3
 8005054:	bfbb      	ittet	lt
 8005056:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800505a:	461e      	movlt	r6, r3
 800505c:	2300      	movge	r3, #0
 800505e:	232d      	movlt	r3, #45	; 0x2d
 8005060:	b088      	sub	sp, #32
 8005062:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005064:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005068:	f027 0720 	bic.w	r7, r7, #32
 800506c:	2f46      	cmp	r7, #70	; 0x46
 800506e:	4614      	mov	r4, r2
 8005070:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005072:	700b      	strb	r3, [r1, #0]
 8005074:	d004      	beq.n	8005080 <__cvt+0x34>
 8005076:	2f45      	cmp	r7, #69	; 0x45
 8005078:	d100      	bne.n	800507c <__cvt+0x30>
 800507a:	3501      	adds	r5, #1
 800507c:	2302      	movs	r3, #2
 800507e:	e000      	b.n	8005082 <__cvt+0x36>
 8005080:	2303      	movs	r3, #3
 8005082:	aa07      	add	r2, sp, #28
 8005084:	9204      	str	r2, [sp, #16]
 8005086:	aa06      	add	r2, sp, #24
 8005088:	e9cd a202 	strd	sl, r2, [sp, #8]
 800508c:	e9cd 3500 	strd	r3, r5, [sp]
 8005090:	4622      	mov	r2, r4
 8005092:	4633      	mov	r3, r6
 8005094:	f000 fdbc 	bl	8005c10 <_dtoa_r>
 8005098:	2f47      	cmp	r7, #71	; 0x47
 800509a:	4680      	mov	r8, r0
 800509c:	d102      	bne.n	80050a4 <__cvt+0x58>
 800509e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050a0:	07db      	lsls	r3, r3, #31
 80050a2:	d526      	bpl.n	80050f2 <__cvt+0xa6>
 80050a4:	2f46      	cmp	r7, #70	; 0x46
 80050a6:	eb08 0905 	add.w	r9, r8, r5
 80050aa:	d111      	bne.n	80050d0 <__cvt+0x84>
 80050ac:	f898 3000 	ldrb.w	r3, [r8]
 80050b0:	2b30      	cmp	r3, #48	; 0x30
 80050b2:	d10a      	bne.n	80050ca <__cvt+0x7e>
 80050b4:	2200      	movs	r2, #0
 80050b6:	2300      	movs	r3, #0
 80050b8:	4620      	mov	r0, r4
 80050ba:	4631      	mov	r1, r6
 80050bc:	f7fb fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80050c0:	b918      	cbnz	r0, 80050ca <__cvt+0x7e>
 80050c2:	f1c5 0501 	rsb	r5, r5, #1
 80050c6:	f8ca 5000 	str.w	r5, [sl]
 80050ca:	f8da 3000 	ldr.w	r3, [sl]
 80050ce:	4499      	add	r9, r3
 80050d0:	2200      	movs	r2, #0
 80050d2:	2300      	movs	r3, #0
 80050d4:	4620      	mov	r0, r4
 80050d6:	4631      	mov	r1, r6
 80050d8:	f7fb fc66 	bl	80009a8 <__aeabi_dcmpeq>
 80050dc:	b938      	cbnz	r0, 80050ee <__cvt+0xa2>
 80050de:	2230      	movs	r2, #48	; 0x30
 80050e0:	9b07      	ldr	r3, [sp, #28]
 80050e2:	454b      	cmp	r3, r9
 80050e4:	d205      	bcs.n	80050f2 <__cvt+0xa6>
 80050e6:	1c59      	adds	r1, r3, #1
 80050e8:	9107      	str	r1, [sp, #28]
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	e7f8      	b.n	80050e0 <__cvt+0x94>
 80050ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80050f2:	4640      	mov	r0, r8
 80050f4:	9b07      	ldr	r3, [sp, #28]
 80050f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050f8:	eba3 0308 	sub.w	r3, r3, r8
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	b008      	add	sp, #32
 8005100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005104 <__exponent>:
 8005104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005106:	2900      	cmp	r1, #0
 8005108:	bfb4      	ite	lt
 800510a:	232d      	movlt	r3, #45	; 0x2d
 800510c:	232b      	movge	r3, #43	; 0x2b
 800510e:	4604      	mov	r4, r0
 8005110:	bfb8      	it	lt
 8005112:	4249      	neglt	r1, r1
 8005114:	2909      	cmp	r1, #9
 8005116:	f804 2b02 	strb.w	r2, [r4], #2
 800511a:	7043      	strb	r3, [r0, #1]
 800511c:	dd21      	ble.n	8005162 <__exponent+0x5e>
 800511e:	f10d 0307 	add.w	r3, sp, #7
 8005122:	461f      	mov	r7, r3
 8005124:	260a      	movs	r6, #10
 8005126:	fb91 f5f6 	sdiv	r5, r1, r6
 800512a:	fb06 1115 	mls	r1, r6, r5, r1
 800512e:	2d09      	cmp	r5, #9
 8005130:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005134:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005138:	f103 32ff 	add.w	r2, r3, #4294967295
 800513c:	4629      	mov	r1, r5
 800513e:	dc09      	bgt.n	8005154 <__exponent+0x50>
 8005140:	3130      	adds	r1, #48	; 0x30
 8005142:	3b02      	subs	r3, #2
 8005144:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005148:	42bb      	cmp	r3, r7
 800514a:	4622      	mov	r2, r4
 800514c:	d304      	bcc.n	8005158 <__exponent+0x54>
 800514e:	1a10      	subs	r0, r2, r0
 8005150:	b003      	add	sp, #12
 8005152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005154:	4613      	mov	r3, r2
 8005156:	e7e6      	b.n	8005126 <__exponent+0x22>
 8005158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800515c:	f804 2b01 	strb.w	r2, [r4], #1
 8005160:	e7f2      	b.n	8005148 <__exponent+0x44>
 8005162:	2330      	movs	r3, #48	; 0x30
 8005164:	4419      	add	r1, r3
 8005166:	7083      	strb	r3, [r0, #2]
 8005168:	1d02      	adds	r2, r0, #4
 800516a:	70c1      	strb	r1, [r0, #3]
 800516c:	e7ef      	b.n	800514e <__exponent+0x4a>
	...

08005170 <_printf_float>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	b091      	sub	sp, #68	; 0x44
 8005176:	460c      	mov	r4, r1
 8005178:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800517a:	4693      	mov	fp, r2
 800517c:	461e      	mov	r6, r3
 800517e:	4605      	mov	r5, r0
 8005180:	f001 fc74 	bl	8006a6c <_localeconv_r>
 8005184:	6803      	ldr	r3, [r0, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	9309      	str	r3, [sp, #36]	; 0x24
 800518a:	f7fa ffe1 	bl	8000150 <strlen>
 800518e:	2300      	movs	r3, #0
 8005190:	930e      	str	r3, [sp, #56]	; 0x38
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	900a      	str	r0, [sp, #40]	; 0x28
 8005196:	3307      	adds	r3, #7
 8005198:	f023 0307 	bic.w	r3, r3, #7
 800519c:	f103 0208 	add.w	r2, r3, #8
 80051a0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80051a4:	f8d4 a000 	ldr.w	sl, [r4]
 80051a8:	603a      	str	r2, [r7, #0]
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051b2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80051b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295
 80051c0:	4ba6      	ldr	r3, [pc, #664]	; (800545c <_printf_float+0x2ec>)
 80051c2:	4638      	mov	r0, r7
 80051c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051c6:	f7fb fc21 	bl	8000a0c <__aeabi_dcmpun>
 80051ca:	bb68      	cbnz	r0, 8005228 <_printf_float+0xb8>
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295
 80051d0:	4ba2      	ldr	r3, [pc, #648]	; (800545c <_printf_float+0x2ec>)
 80051d2:	4638      	mov	r0, r7
 80051d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051d6:	f7fb fbfb 	bl	80009d0 <__aeabi_dcmple>
 80051da:	bb28      	cbnz	r0, 8005228 <_printf_float+0xb8>
 80051dc:	2200      	movs	r2, #0
 80051de:	2300      	movs	r3, #0
 80051e0:	4638      	mov	r0, r7
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fb fbea 	bl	80009bc <__aeabi_dcmplt>
 80051e8:	b110      	cbz	r0, 80051f0 <_printf_float+0x80>
 80051ea:	232d      	movs	r3, #45	; 0x2d
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f0:	4f9b      	ldr	r7, [pc, #620]	; (8005460 <_printf_float+0x2f0>)
 80051f2:	4b9c      	ldr	r3, [pc, #624]	; (8005464 <_printf_float+0x2f4>)
 80051f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051f8:	bf98      	it	ls
 80051fa:	461f      	movls	r7, r3
 80051fc:	2303      	movs	r3, #3
 80051fe:	f04f 0900 	mov.w	r9, #0
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	f02a 0304 	bic.w	r3, sl, #4
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	9600      	str	r6, [sp, #0]
 800520c:	465b      	mov	r3, fp
 800520e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f9e2 	bl	80055dc <_printf_common>
 8005218:	3001      	adds	r0, #1
 800521a:	f040 8090 	bne.w	800533e <_printf_float+0x1ce>
 800521e:	f04f 30ff 	mov.w	r0, #4294967295
 8005222:	b011      	add	sp, #68	; 0x44
 8005224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005228:	463a      	mov	r2, r7
 800522a:	464b      	mov	r3, r9
 800522c:	4638      	mov	r0, r7
 800522e:	4649      	mov	r1, r9
 8005230:	f7fb fbec 	bl	8000a0c <__aeabi_dcmpun>
 8005234:	b110      	cbz	r0, 800523c <_printf_float+0xcc>
 8005236:	4f8c      	ldr	r7, [pc, #560]	; (8005468 <_printf_float+0x2f8>)
 8005238:	4b8c      	ldr	r3, [pc, #560]	; (800546c <_printf_float+0x2fc>)
 800523a:	e7db      	b.n	80051f4 <_printf_float+0x84>
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	a80d      	add	r0, sp, #52	; 0x34
 8005246:	a90e      	add	r1, sp, #56	; 0x38
 8005248:	d140      	bne.n	80052cc <_printf_float+0x15c>
 800524a:	2306      	movs	r3, #6
 800524c:	6063      	str	r3, [r4, #4]
 800524e:	f04f 0c00 	mov.w	ip, #0
 8005252:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005256:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	6022      	str	r2, [r4, #0]
 800525e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	463a      	mov	r2, r7
 8005266:	464b      	mov	r3, r9
 8005268:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800526c:	4628      	mov	r0, r5
 800526e:	f7ff feed 	bl	800504c <__cvt>
 8005272:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005276:	2b47      	cmp	r3, #71	; 0x47
 8005278:	4607      	mov	r7, r0
 800527a:	d109      	bne.n	8005290 <_printf_float+0x120>
 800527c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800527e:	1cd8      	adds	r0, r3, #3
 8005280:	db02      	blt.n	8005288 <_printf_float+0x118>
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	4293      	cmp	r3, r2
 8005286:	dd47      	ble.n	8005318 <_printf_float+0x1a8>
 8005288:	f1a8 0802 	sub.w	r8, r8, #2
 800528c:	fa5f f888 	uxtb.w	r8, r8
 8005290:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005294:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005296:	d824      	bhi.n	80052e2 <_printf_float+0x172>
 8005298:	3901      	subs	r1, #1
 800529a:	4642      	mov	r2, r8
 800529c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052a0:	910d      	str	r1, [sp, #52]	; 0x34
 80052a2:	f7ff ff2f 	bl	8005104 <__exponent>
 80052a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052a8:	4681      	mov	r9, r0
 80052aa:	1813      	adds	r3, r2, r0
 80052ac:	2a01      	cmp	r2, #1
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	dc02      	bgt.n	80052b8 <_printf_float+0x148>
 80052b2:	6822      	ldr	r2, [r4, #0]
 80052b4:	07d1      	lsls	r1, r2, #31
 80052b6:	d501      	bpl.n	80052bc <_printf_float+0x14c>
 80052b8:	3301      	adds	r3, #1
 80052ba:	6123      	str	r3, [r4, #16]
 80052bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0a2      	beq.n	800520a <_printf_float+0x9a>
 80052c4:	232d      	movs	r3, #45	; 0x2d
 80052c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ca:	e79e      	b.n	800520a <_printf_float+0x9a>
 80052cc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80052d0:	f000 816e 	beq.w	80055b0 <_printf_float+0x440>
 80052d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052d8:	d1b9      	bne.n	800524e <_printf_float+0xde>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1b7      	bne.n	800524e <_printf_float+0xde>
 80052de:	2301      	movs	r3, #1
 80052e0:	e7b4      	b.n	800524c <_printf_float+0xdc>
 80052e2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80052e6:	d119      	bne.n	800531c <_printf_float+0x1ac>
 80052e8:	2900      	cmp	r1, #0
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	dd0c      	ble.n	8005308 <_printf_float+0x198>
 80052ee:	6121      	str	r1, [r4, #16]
 80052f0:	b913      	cbnz	r3, 80052f8 <_printf_float+0x188>
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	07d2      	lsls	r2, r2, #31
 80052f6:	d502      	bpl.n	80052fe <_printf_float+0x18e>
 80052f8:	3301      	adds	r3, #1
 80052fa:	440b      	add	r3, r1
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005300:	f04f 0900 	mov.w	r9, #0
 8005304:	65a3      	str	r3, [r4, #88]	; 0x58
 8005306:	e7d9      	b.n	80052bc <_printf_float+0x14c>
 8005308:	b913      	cbnz	r3, 8005310 <_printf_float+0x1a0>
 800530a:	6822      	ldr	r2, [r4, #0]
 800530c:	07d0      	lsls	r0, r2, #31
 800530e:	d501      	bpl.n	8005314 <_printf_float+0x1a4>
 8005310:	3302      	adds	r3, #2
 8005312:	e7f3      	b.n	80052fc <_printf_float+0x18c>
 8005314:	2301      	movs	r3, #1
 8005316:	e7f1      	b.n	80052fc <_printf_float+0x18c>
 8005318:	f04f 0867 	mov.w	r8, #103	; 0x67
 800531c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005320:	4293      	cmp	r3, r2
 8005322:	db05      	blt.n	8005330 <_printf_float+0x1c0>
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	6123      	str	r3, [r4, #16]
 8005328:	07d1      	lsls	r1, r2, #31
 800532a:	d5e8      	bpl.n	80052fe <_printf_float+0x18e>
 800532c:	3301      	adds	r3, #1
 800532e:	e7e5      	b.n	80052fc <_printf_float+0x18c>
 8005330:	2b00      	cmp	r3, #0
 8005332:	bfcc      	ite	gt
 8005334:	2301      	movgt	r3, #1
 8005336:	f1c3 0302 	rsble	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	e7de      	b.n	80052fc <_printf_float+0x18c>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	055a      	lsls	r2, r3, #21
 8005342:	d407      	bmi.n	8005354 <_printf_float+0x1e4>
 8005344:	6923      	ldr	r3, [r4, #16]
 8005346:	463a      	mov	r2, r7
 8005348:	4659      	mov	r1, fp
 800534a:	4628      	mov	r0, r5
 800534c:	47b0      	blx	r6
 800534e:	3001      	adds	r0, #1
 8005350:	d129      	bne.n	80053a6 <_printf_float+0x236>
 8005352:	e764      	b.n	800521e <_printf_float+0xae>
 8005354:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005358:	f240 80d7 	bls.w	800550a <_printf_float+0x39a>
 800535c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005360:	2200      	movs	r2, #0
 8005362:	2300      	movs	r3, #0
 8005364:	f7fb fb20 	bl	80009a8 <__aeabi_dcmpeq>
 8005368:	b388      	cbz	r0, 80053ce <_printf_float+0x25e>
 800536a:	2301      	movs	r3, #1
 800536c:	4a40      	ldr	r2, [pc, #256]	; (8005470 <_printf_float+0x300>)
 800536e:	4659      	mov	r1, fp
 8005370:	4628      	mov	r0, r5
 8005372:	47b0      	blx	r6
 8005374:	3001      	adds	r0, #1
 8005376:	f43f af52 	beq.w	800521e <_printf_float+0xae>
 800537a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800537e:	429a      	cmp	r2, r3
 8005380:	db02      	blt.n	8005388 <_printf_float+0x218>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	07d8      	lsls	r0, r3, #31
 8005386:	d50e      	bpl.n	80053a6 <_printf_float+0x236>
 8005388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800538c:	4659      	mov	r1, fp
 800538e:	4628      	mov	r0, r5
 8005390:	47b0      	blx	r6
 8005392:	3001      	adds	r0, #1
 8005394:	f43f af43 	beq.w	800521e <_printf_float+0xae>
 8005398:	2700      	movs	r7, #0
 800539a:	f104 081a 	add.w	r8, r4, #26
 800539e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a0:	3b01      	subs	r3, #1
 80053a2:	42bb      	cmp	r3, r7
 80053a4:	dc09      	bgt.n	80053ba <_printf_float+0x24a>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	079f      	lsls	r7, r3, #30
 80053aa:	f100 80fd 	bmi.w	80055a8 <_printf_float+0x438>
 80053ae:	68e0      	ldr	r0, [r4, #12]
 80053b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053b2:	4298      	cmp	r0, r3
 80053b4:	bfb8      	it	lt
 80053b6:	4618      	movlt	r0, r3
 80053b8:	e733      	b.n	8005222 <_printf_float+0xb2>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4642      	mov	r2, r8
 80053be:	4659      	mov	r1, fp
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b0      	blx	r6
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f af2a 	beq.w	800521e <_printf_float+0xae>
 80053ca:	3701      	adds	r7, #1
 80053cc:	e7e7      	b.n	800539e <_printf_float+0x22e>
 80053ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dc2b      	bgt.n	800542c <_printf_float+0x2bc>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4a26      	ldr	r2, [pc, #152]	; (8005470 <_printf_float+0x300>)
 80053d8:	4659      	mov	r1, fp
 80053da:	4628      	mov	r0, r5
 80053dc:	47b0      	blx	r6
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f af1d 	beq.w	800521e <_printf_float+0xae>
 80053e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e6:	b923      	cbnz	r3, 80053f2 <_printf_float+0x282>
 80053e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ea:	b913      	cbnz	r3, 80053f2 <_printf_float+0x282>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	07d9      	lsls	r1, r3, #31
 80053f0:	d5d9      	bpl.n	80053a6 <_printf_float+0x236>
 80053f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053f6:	4659      	mov	r1, fp
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b0      	blx	r6
 80053fc:	3001      	adds	r0, #1
 80053fe:	f43f af0e 	beq.w	800521e <_printf_float+0xae>
 8005402:	f04f 0800 	mov.w	r8, #0
 8005406:	f104 091a 	add.w	r9, r4, #26
 800540a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800540c:	425b      	negs	r3, r3
 800540e:	4543      	cmp	r3, r8
 8005410:	dc01      	bgt.n	8005416 <_printf_float+0x2a6>
 8005412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005414:	e797      	b.n	8005346 <_printf_float+0x1d6>
 8005416:	2301      	movs	r3, #1
 8005418:	464a      	mov	r2, r9
 800541a:	4659      	mov	r1, fp
 800541c:	4628      	mov	r0, r5
 800541e:	47b0      	blx	r6
 8005420:	3001      	adds	r0, #1
 8005422:	f43f aefc 	beq.w	800521e <_printf_float+0xae>
 8005426:	f108 0801 	add.w	r8, r8, #1
 800542a:	e7ee      	b.n	800540a <_printf_float+0x29a>
 800542c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800542e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005430:	429a      	cmp	r2, r3
 8005432:	bfa8      	it	ge
 8005434:	461a      	movge	r2, r3
 8005436:	2a00      	cmp	r2, #0
 8005438:	4690      	mov	r8, r2
 800543a:	dd07      	ble.n	800544c <_printf_float+0x2dc>
 800543c:	4613      	mov	r3, r2
 800543e:	4659      	mov	r1, fp
 8005440:	463a      	mov	r2, r7
 8005442:	4628      	mov	r0, r5
 8005444:	47b0      	blx	r6
 8005446:	3001      	adds	r0, #1
 8005448:	f43f aee9 	beq.w	800521e <_printf_float+0xae>
 800544c:	f104 031a 	add.w	r3, r4, #26
 8005450:	f04f 0a00 	mov.w	sl, #0
 8005454:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005458:	930b      	str	r3, [sp, #44]	; 0x2c
 800545a:	e015      	b.n	8005488 <_printf_float+0x318>
 800545c:	7fefffff 	.word	0x7fefffff
 8005460:	0800796c 	.word	0x0800796c
 8005464:	08007968 	.word	0x08007968
 8005468:	08007974 	.word	0x08007974
 800546c:	08007970 	.word	0x08007970
 8005470:	08007978 	.word	0x08007978
 8005474:	2301      	movs	r3, #1
 8005476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005478:	4659      	mov	r1, fp
 800547a:	4628      	mov	r0, r5
 800547c:	47b0      	blx	r6
 800547e:	3001      	adds	r0, #1
 8005480:	f43f aecd 	beq.w	800521e <_printf_float+0xae>
 8005484:	f10a 0a01 	add.w	sl, sl, #1
 8005488:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800548c:	eba9 0308 	sub.w	r3, r9, r8
 8005490:	4553      	cmp	r3, sl
 8005492:	dcef      	bgt.n	8005474 <_printf_float+0x304>
 8005494:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005498:	429a      	cmp	r2, r3
 800549a:	444f      	add	r7, r9
 800549c:	db14      	blt.n	80054c8 <_printf_float+0x358>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	07da      	lsls	r2, r3, #31
 80054a2:	d411      	bmi.n	80054c8 <_printf_float+0x358>
 80054a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054a8:	eba3 0209 	sub.w	r2, r3, r9
 80054ac:	eba3 0901 	sub.w	r9, r3, r1
 80054b0:	4591      	cmp	r9, r2
 80054b2:	bfa8      	it	ge
 80054b4:	4691      	movge	r9, r2
 80054b6:	f1b9 0f00 	cmp.w	r9, #0
 80054ba:	dc0d      	bgt.n	80054d8 <_printf_float+0x368>
 80054bc:	2700      	movs	r7, #0
 80054be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054c2:	f104 081a 	add.w	r8, r4, #26
 80054c6:	e018      	b.n	80054fa <_printf_float+0x38a>
 80054c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054cc:	4659      	mov	r1, fp
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b0      	blx	r6
 80054d2:	3001      	adds	r0, #1
 80054d4:	d1e6      	bne.n	80054a4 <_printf_float+0x334>
 80054d6:	e6a2      	b.n	800521e <_printf_float+0xae>
 80054d8:	464b      	mov	r3, r9
 80054da:	463a      	mov	r2, r7
 80054dc:	4659      	mov	r1, fp
 80054de:	4628      	mov	r0, r5
 80054e0:	47b0      	blx	r6
 80054e2:	3001      	adds	r0, #1
 80054e4:	d1ea      	bne.n	80054bc <_printf_float+0x34c>
 80054e6:	e69a      	b.n	800521e <_printf_float+0xae>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4642      	mov	r2, r8
 80054ec:	4659      	mov	r1, fp
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b0      	blx	r6
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f ae93 	beq.w	800521e <_printf_float+0xae>
 80054f8:	3701      	adds	r7, #1
 80054fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	eba3 0309 	sub.w	r3, r3, r9
 8005504:	42bb      	cmp	r3, r7
 8005506:	dcef      	bgt.n	80054e8 <_printf_float+0x378>
 8005508:	e74d      	b.n	80053a6 <_printf_float+0x236>
 800550a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800550c:	2a01      	cmp	r2, #1
 800550e:	dc01      	bgt.n	8005514 <_printf_float+0x3a4>
 8005510:	07db      	lsls	r3, r3, #31
 8005512:	d538      	bpl.n	8005586 <_printf_float+0x416>
 8005514:	2301      	movs	r3, #1
 8005516:	463a      	mov	r2, r7
 8005518:	4659      	mov	r1, fp
 800551a:	4628      	mov	r0, r5
 800551c:	47b0      	blx	r6
 800551e:	3001      	adds	r0, #1
 8005520:	f43f ae7d 	beq.w	800521e <_printf_float+0xae>
 8005524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005528:	4659      	mov	r1, fp
 800552a:	4628      	mov	r0, r5
 800552c:	47b0      	blx	r6
 800552e:	3001      	adds	r0, #1
 8005530:	f107 0701 	add.w	r7, r7, #1
 8005534:	f43f ae73 	beq.w	800521e <_printf_float+0xae>
 8005538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800553c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800553e:	2200      	movs	r2, #0
 8005540:	f103 38ff 	add.w	r8, r3, #4294967295
 8005544:	2300      	movs	r3, #0
 8005546:	f7fb fa2f 	bl	80009a8 <__aeabi_dcmpeq>
 800554a:	b9c0      	cbnz	r0, 800557e <_printf_float+0x40e>
 800554c:	4643      	mov	r3, r8
 800554e:	463a      	mov	r2, r7
 8005550:	4659      	mov	r1, fp
 8005552:	4628      	mov	r0, r5
 8005554:	47b0      	blx	r6
 8005556:	3001      	adds	r0, #1
 8005558:	d10d      	bne.n	8005576 <_printf_float+0x406>
 800555a:	e660      	b.n	800521e <_printf_float+0xae>
 800555c:	2301      	movs	r3, #1
 800555e:	4642      	mov	r2, r8
 8005560:	4659      	mov	r1, fp
 8005562:	4628      	mov	r0, r5
 8005564:	47b0      	blx	r6
 8005566:	3001      	adds	r0, #1
 8005568:	f43f ae59 	beq.w	800521e <_printf_float+0xae>
 800556c:	3701      	adds	r7, #1
 800556e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005570:	3b01      	subs	r3, #1
 8005572:	42bb      	cmp	r3, r7
 8005574:	dcf2      	bgt.n	800555c <_printf_float+0x3ec>
 8005576:	464b      	mov	r3, r9
 8005578:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800557c:	e6e4      	b.n	8005348 <_printf_float+0x1d8>
 800557e:	2700      	movs	r7, #0
 8005580:	f104 081a 	add.w	r8, r4, #26
 8005584:	e7f3      	b.n	800556e <_printf_float+0x3fe>
 8005586:	2301      	movs	r3, #1
 8005588:	e7e1      	b.n	800554e <_printf_float+0x3de>
 800558a:	2301      	movs	r3, #1
 800558c:	4642      	mov	r2, r8
 800558e:	4659      	mov	r1, fp
 8005590:	4628      	mov	r0, r5
 8005592:	47b0      	blx	r6
 8005594:	3001      	adds	r0, #1
 8005596:	f43f ae42 	beq.w	800521e <_printf_float+0xae>
 800559a:	3701      	adds	r7, #1
 800559c:	68e3      	ldr	r3, [r4, #12]
 800559e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	42bb      	cmp	r3, r7
 80055a4:	dcf1      	bgt.n	800558a <_printf_float+0x41a>
 80055a6:	e702      	b.n	80053ae <_printf_float+0x23e>
 80055a8:	2700      	movs	r7, #0
 80055aa:	f104 0819 	add.w	r8, r4, #25
 80055ae:	e7f5      	b.n	800559c <_printf_float+0x42c>
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f43f ae94 	beq.w	80052de <_printf_float+0x16e>
 80055b6:	f04f 0c00 	mov.w	ip, #0
 80055ba:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80055be:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80055c2:	6022      	str	r2, [r4, #0]
 80055c4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80055c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	463a      	mov	r2, r7
 80055d0:	464b      	mov	r3, r9
 80055d2:	4628      	mov	r0, r5
 80055d4:	f7ff fd3a 	bl	800504c <__cvt>
 80055d8:	4607      	mov	r7, r0
 80055da:	e64f      	b.n	800527c <_printf_float+0x10c>

080055dc <_printf_common>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	4691      	mov	r9, r2
 80055e2:	461f      	mov	r7, r3
 80055e4:	688a      	ldr	r2, [r1, #8]
 80055e6:	690b      	ldr	r3, [r1, #16]
 80055e8:	4606      	mov	r6, r0
 80055ea:	4293      	cmp	r3, r2
 80055ec:	bfb8      	it	lt
 80055ee:	4613      	movlt	r3, r2
 80055f0:	f8c9 3000 	str.w	r3, [r9]
 80055f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055f8:	460c      	mov	r4, r1
 80055fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055fe:	b112      	cbz	r2, 8005606 <_printf_common+0x2a>
 8005600:	3301      	adds	r3, #1
 8005602:	f8c9 3000 	str.w	r3, [r9]
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	0699      	lsls	r1, r3, #26
 800560a:	bf42      	ittt	mi
 800560c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005610:	3302      	addmi	r3, #2
 8005612:	f8c9 3000 	strmi.w	r3, [r9]
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	f015 0506 	ands.w	r5, r5, #6
 800561c:	d107      	bne.n	800562e <_printf_common+0x52>
 800561e:	f104 0a19 	add.w	sl, r4, #25
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	f8d9 2000 	ldr.w	r2, [r9]
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	42ab      	cmp	r3, r5
 800562c:	dc29      	bgt.n	8005682 <_printf_common+0xa6>
 800562e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	3300      	adds	r3, #0
 8005636:	bf18      	it	ne
 8005638:	2301      	movne	r3, #1
 800563a:	0692      	lsls	r2, r2, #26
 800563c:	d42e      	bmi.n	800569c <_printf_common+0xc0>
 800563e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005642:	4639      	mov	r1, r7
 8005644:	4630      	mov	r0, r6
 8005646:	47c0      	blx	r8
 8005648:	3001      	adds	r0, #1
 800564a:	d021      	beq.n	8005690 <_printf_common+0xb4>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	68e5      	ldr	r5, [r4, #12]
 8005650:	f003 0306 	and.w	r3, r3, #6
 8005654:	2b04      	cmp	r3, #4
 8005656:	bf18      	it	ne
 8005658:	2500      	movne	r5, #0
 800565a:	f8d9 2000 	ldr.w	r2, [r9]
 800565e:	f04f 0900 	mov.w	r9, #0
 8005662:	bf08      	it	eq
 8005664:	1aad      	subeq	r5, r5, r2
 8005666:	68a3      	ldr	r3, [r4, #8]
 8005668:	6922      	ldr	r2, [r4, #16]
 800566a:	bf08      	it	eq
 800566c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005670:	4293      	cmp	r3, r2
 8005672:	bfc4      	itt	gt
 8005674:	1a9b      	subgt	r3, r3, r2
 8005676:	18ed      	addgt	r5, r5, r3
 8005678:	341a      	adds	r4, #26
 800567a:	454d      	cmp	r5, r9
 800567c:	d11a      	bne.n	80056b4 <_printf_common+0xd8>
 800567e:	2000      	movs	r0, #0
 8005680:	e008      	b.n	8005694 <_printf_common+0xb8>
 8005682:	2301      	movs	r3, #1
 8005684:	4652      	mov	r2, sl
 8005686:	4639      	mov	r1, r7
 8005688:	4630      	mov	r0, r6
 800568a:	47c0      	blx	r8
 800568c:	3001      	adds	r0, #1
 800568e:	d103      	bne.n	8005698 <_printf_common+0xbc>
 8005690:	f04f 30ff 	mov.w	r0, #4294967295
 8005694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005698:	3501      	adds	r5, #1
 800569a:	e7c2      	b.n	8005622 <_printf_common+0x46>
 800569c:	2030      	movs	r0, #48	; 0x30
 800569e:	18e1      	adds	r1, r4, r3
 80056a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056aa:	4422      	add	r2, r4
 80056ac:	3302      	adds	r3, #2
 80056ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056b2:	e7c4      	b.n	800563e <_printf_common+0x62>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4622      	mov	r2, r4
 80056b8:	4639      	mov	r1, r7
 80056ba:	4630      	mov	r0, r6
 80056bc:	47c0      	blx	r8
 80056be:	3001      	adds	r0, #1
 80056c0:	d0e6      	beq.n	8005690 <_printf_common+0xb4>
 80056c2:	f109 0901 	add.w	r9, r9, #1
 80056c6:	e7d8      	b.n	800567a <_printf_common+0x9e>

080056c8 <_printf_i>:
 80056c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80056d0:	460c      	mov	r4, r1
 80056d2:	7e09      	ldrb	r1, [r1, #24]
 80056d4:	b085      	sub	sp, #20
 80056d6:	296e      	cmp	r1, #110	; 0x6e
 80056d8:	4617      	mov	r7, r2
 80056da:	4606      	mov	r6, r0
 80056dc:	4698      	mov	r8, r3
 80056de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056e0:	f000 80b3 	beq.w	800584a <_printf_i+0x182>
 80056e4:	d822      	bhi.n	800572c <_printf_i+0x64>
 80056e6:	2963      	cmp	r1, #99	; 0x63
 80056e8:	d036      	beq.n	8005758 <_printf_i+0x90>
 80056ea:	d80a      	bhi.n	8005702 <_printf_i+0x3a>
 80056ec:	2900      	cmp	r1, #0
 80056ee:	f000 80b9 	beq.w	8005864 <_printf_i+0x19c>
 80056f2:	2958      	cmp	r1, #88	; 0x58
 80056f4:	f000 8083 	beq.w	80057fe <_printf_i+0x136>
 80056f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005700:	e032      	b.n	8005768 <_printf_i+0xa0>
 8005702:	2964      	cmp	r1, #100	; 0x64
 8005704:	d001      	beq.n	800570a <_printf_i+0x42>
 8005706:	2969      	cmp	r1, #105	; 0x69
 8005708:	d1f6      	bne.n	80056f8 <_printf_i+0x30>
 800570a:	6820      	ldr	r0, [r4, #0]
 800570c:	6813      	ldr	r3, [r2, #0]
 800570e:	0605      	lsls	r5, r0, #24
 8005710:	f103 0104 	add.w	r1, r3, #4
 8005714:	d52a      	bpl.n	800576c <_printf_i+0xa4>
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6011      	str	r1, [r2, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	da03      	bge.n	8005726 <_printf_i+0x5e>
 800571e:	222d      	movs	r2, #45	; 0x2d
 8005720:	425b      	negs	r3, r3
 8005722:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005726:	486f      	ldr	r0, [pc, #444]	; (80058e4 <_printf_i+0x21c>)
 8005728:	220a      	movs	r2, #10
 800572a:	e039      	b.n	80057a0 <_printf_i+0xd8>
 800572c:	2973      	cmp	r1, #115	; 0x73
 800572e:	f000 809d 	beq.w	800586c <_printf_i+0x1a4>
 8005732:	d808      	bhi.n	8005746 <_printf_i+0x7e>
 8005734:	296f      	cmp	r1, #111	; 0x6f
 8005736:	d020      	beq.n	800577a <_printf_i+0xb2>
 8005738:	2970      	cmp	r1, #112	; 0x70
 800573a:	d1dd      	bne.n	80056f8 <_printf_i+0x30>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	f043 0320 	orr.w	r3, r3, #32
 8005742:	6023      	str	r3, [r4, #0]
 8005744:	e003      	b.n	800574e <_printf_i+0x86>
 8005746:	2975      	cmp	r1, #117	; 0x75
 8005748:	d017      	beq.n	800577a <_printf_i+0xb2>
 800574a:	2978      	cmp	r1, #120	; 0x78
 800574c:	d1d4      	bne.n	80056f8 <_printf_i+0x30>
 800574e:	2378      	movs	r3, #120	; 0x78
 8005750:	4865      	ldr	r0, [pc, #404]	; (80058e8 <_printf_i+0x220>)
 8005752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005756:	e055      	b.n	8005804 <_printf_i+0x13c>
 8005758:	6813      	ldr	r3, [r2, #0]
 800575a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575e:	1d19      	adds	r1, r3, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6011      	str	r1, [r2, #0]
 8005764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005768:	2301      	movs	r3, #1
 800576a:	e08c      	b.n	8005886 <_printf_i+0x1be>
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005772:	6011      	str	r1, [r2, #0]
 8005774:	bf18      	it	ne
 8005776:	b21b      	sxthne	r3, r3
 8005778:	e7cf      	b.n	800571a <_printf_i+0x52>
 800577a:	6813      	ldr	r3, [r2, #0]
 800577c:	6825      	ldr	r5, [r4, #0]
 800577e:	1d18      	adds	r0, r3, #4
 8005780:	6010      	str	r0, [r2, #0]
 8005782:	0628      	lsls	r0, r5, #24
 8005784:	d501      	bpl.n	800578a <_printf_i+0xc2>
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	e002      	b.n	8005790 <_printf_i+0xc8>
 800578a:	0668      	lsls	r0, r5, #25
 800578c:	d5fb      	bpl.n	8005786 <_printf_i+0xbe>
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	296f      	cmp	r1, #111	; 0x6f
 8005792:	bf14      	ite	ne
 8005794:	220a      	movne	r2, #10
 8005796:	2208      	moveq	r2, #8
 8005798:	4852      	ldr	r0, [pc, #328]	; (80058e4 <_printf_i+0x21c>)
 800579a:	2100      	movs	r1, #0
 800579c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a0:	6865      	ldr	r5, [r4, #4]
 80057a2:	2d00      	cmp	r5, #0
 80057a4:	60a5      	str	r5, [r4, #8]
 80057a6:	f2c0 8095 	blt.w	80058d4 <_printf_i+0x20c>
 80057aa:	6821      	ldr	r1, [r4, #0]
 80057ac:	f021 0104 	bic.w	r1, r1, #4
 80057b0:	6021      	str	r1, [r4, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d13d      	bne.n	8005832 <_printf_i+0x16a>
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	f040 808e 	bne.w	80058d8 <_printf_i+0x210>
 80057bc:	4665      	mov	r5, ip
 80057be:	2a08      	cmp	r2, #8
 80057c0:	d10b      	bne.n	80057da <_printf_i+0x112>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	07db      	lsls	r3, r3, #31
 80057c6:	d508      	bpl.n	80057da <_printf_i+0x112>
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	6862      	ldr	r2, [r4, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	bfde      	ittt	le
 80057d0:	2330      	movle	r3, #48	; 0x30
 80057d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057da:	ebac 0305 	sub.w	r3, ip, r5
 80057de:	6123      	str	r3, [r4, #16]
 80057e0:	f8cd 8000 	str.w	r8, [sp]
 80057e4:	463b      	mov	r3, r7
 80057e6:	aa03      	add	r2, sp, #12
 80057e8:	4621      	mov	r1, r4
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7ff fef6 	bl	80055dc <_printf_common>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d14d      	bne.n	8005890 <_printf_i+0x1c8>
 80057f4:	f04f 30ff 	mov.w	r0, #4294967295
 80057f8:	b005      	add	sp, #20
 80057fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057fe:	4839      	ldr	r0, [pc, #228]	; (80058e4 <_printf_i+0x21c>)
 8005800:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005804:	6813      	ldr	r3, [r2, #0]
 8005806:	6821      	ldr	r1, [r4, #0]
 8005808:	1d1d      	adds	r5, r3, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6015      	str	r5, [r2, #0]
 800580e:	060a      	lsls	r2, r1, #24
 8005810:	d50b      	bpl.n	800582a <_printf_i+0x162>
 8005812:	07ca      	lsls	r2, r1, #31
 8005814:	bf44      	itt	mi
 8005816:	f041 0120 	orrmi.w	r1, r1, #32
 800581a:	6021      	strmi	r1, [r4, #0]
 800581c:	b91b      	cbnz	r3, 8005826 <_printf_i+0x15e>
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	f022 0220 	bic.w	r2, r2, #32
 8005824:	6022      	str	r2, [r4, #0]
 8005826:	2210      	movs	r2, #16
 8005828:	e7b7      	b.n	800579a <_printf_i+0xd2>
 800582a:	064d      	lsls	r5, r1, #25
 800582c:	bf48      	it	mi
 800582e:	b29b      	uxthmi	r3, r3
 8005830:	e7ef      	b.n	8005812 <_printf_i+0x14a>
 8005832:	4665      	mov	r5, ip
 8005834:	fbb3 f1f2 	udiv	r1, r3, r2
 8005838:	fb02 3311 	mls	r3, r2, r1, r3
 800583c:	5cc3      	ldrb	r3, [r0, r3]
 800583e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005842:	460b      	mov	r3, r1
 8005844:	2900      	cmp	r1, #0
 8005846:	d1f5      	bne.n	8005834 <_printf_i+0x16c>
 8005848:	e7b9      	b.n	80057be <_printf_i+0xf6>
 800584a:	6813      	ldr	r3, [r2, #0]
 800584c:	6825      	ldr	r5, [r4, #0]
 800584e:	1d18      	adds	r0, r3, #4
 8005850:	6961      	ldr	r1, [r4, #20]
 8005852:	6010      	str	r0, [r2, #0]
 8005854:	0628      	lsls	r0, r5, #24
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	d501      	bpl.n	800585e <_printf_i+0x196>
 800585a:	6019      	str	r1, [r3, #0]
 800585c:	e002      	b.n	8005864 <_printf_i+0x19c>
 800585e:	066a      	lsls	r2, r5, #25
 8005860:	d5fb      	bpl.n	800585a <_printf_i+0x192>
 8005862:	8019      	strh	r1, [r3, #0]
 8005864:	2300      	movs	r3, #0
 8005866:	4665      	mov	r5, ip
 8005868:	6123      	str	r3, [r4, #16]
 800586a:	e7b9      	b.n	80057e0 <_printf_i+0x118>
 800586c:	6813      	ldr	r3, [r2, #0]
 800586e:	1d19      	adds	r1, r3, #4
 8005870:	6011      	str	r1, [r2, #0]
 8005872:	681d      	ldr	r5, [r3, #0]
 8005874:	6862      	ldr	r2, [r4, #4]
 8005876:	2100      	movs	r1, #0
 8005878:	4628      	mov	r0, r5
 800587a:	f001 f971 	bl	8006b60 <memchr>
 800587e:	b108      	cbz	r0, 8005884 <_printf_i+0x1bc>
 8005880:	1b40      	subs	r0, r0, r5
 8005882:	6060      	str	r0, [r4, #4]
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	2300      	movs	r3, #0
 800588a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800588e:	e7a7      	b.n	80057e0 <_printf_i+0x118>
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	462a      	mov	r2, r5
 8005894:	4639      	mov	r1, r7
 8005896:	4630      	mov	r0, r6
 8005898:	47c0      	blx	r8
 800589a:	3001      	adds	r0, #1
 800589c:	d0aa      	beq.n	80057f4 <_printf_i+0x12c>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	079b      	lsls	r3, r3, #30
 80058a2:	d413      	bmi.n	80058cc <_printf_i+0x204>
 80058a4:	68e0      	ldr	r0, [r4, #12]
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	4298      	cmp	r0, r3
 80058aa:	bfb8      	it	lt
 80058ac:	4618      	movlt	r0, r3
 80058ae:	e7a3      	b.n	80057f8 <_printf_i+0x130>
 80058b0:	2301      	movs	r3, #1
 80058b2:	464a      	mov	r2, r9
 80058b4:	4639      	mov	r1, r7
 80058b6:	4630      	mov	r0, r6
 80058b8:	47c0      	blx	r8
 80058ba:	3001      	adds	r0, #1
 80058bc:	d09a      	beq.n	80057f4 <_printf_i+0x12c>
 80058be:	3501      	adds	r5, #1
 80058c0:	68e3      	ldr	r3, [r4, #12]
 80058c2:	9a03      	ldr	r2, [sp, #12]
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	42ab      	cmp	r3, r5
 80058c8:	dcf2      	bgt.n	80058b0 <_printf_i+0x1e8>
 80058ca:	e7eb      	b.n	80058a4 <_printf_i+0x1dc>
 80058cc:	2500      	movs	r5, #0
 80058ce:	f104 0919 	add.w	r9, r4, #25
 80058d2:	e7f5      	b.n	80058c0 <_printf_i+0x1f8>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1ac      	bne.n	8005832 <_printf_i+0x16a>
 80058d8:	7803      	ldrb	r3, [r0, #0]
 80058da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e2:	e76c      	b.n	80057be <_printf_i+0xf6>
 80058e4:	0800797a 	.word	0x0800797a
 80058e8:	0800798b 	.word	0x0800798b

080058ec <iprintf>:
 80058ec:	b40f      	push	{r0, r1, r2, r3}
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <iprintf+0x2c>)
 80058f0:	b513      	push	{r0, r1, r4, lr}
 80058f2:	681c      	ldr	r4, [r3, #0]
 80058f4:	b124      	cbz	r4, 8005900 <iprintf+0x14>
 80058f6:	69a3      	ldr	r3, [r4, #24]
 80058f8:	b913      	cbnz	r3, 8005900 <iprintf+0x14>
 80058fa:	4620      	mov	r0, r4
 80058fc:	f001 f82c 	bl	8006958 <__sinit>
 8005900:	ab05      	add	r3, sp, #20
 8005902:	9a04      	ldr	r2, [sp, #16]
 8005904:	68a1      	ldr	r1, [r4, #8]
 8005906:	4620      	mov	r0, r4
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	f001 fcfb 	bl	8007304 <_vfiprintf_r>
 800590e:	b002      	add	sp, #8
 8005910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005914:	b004      	add	sp, #16
 8005916:	4770      	bx	lr
 8005918:	20000018 	.word	0x20000018

0800591c <setvbuf>:
 800591c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005920:	461d      	mov	r5, r3
 8005922:	4b51      	ldr	r3, [pc, #324]	; (8005a68 <setvbuf+0x14c>)
 8005924:	4604      	mov	r4, r0
 8005926:	681e      	ldr	r6, [r3, #0]
 8005928:	460f      	mov	r7, r1
 800592a:	4690      	mov	r8, r2
 800592c:	b126      	cbz	r6, 8005938 <setvbuf+0x1c>
 800592e:	69b3      	ldr	r3, [r6, #24]
 8005930:	b913      	cbnz	r3, 8005938 <setvbuf+0x1c>
 8005932:	4630      	mov	r0, r6
 8005934:	f001 f810 	bl	8006958 <__sinit>
 8005938:	4b4c      	ldr	r3, [pc, #304]	; (8005a6c <setvbuf+0x150>)
 800593a:	429c      	cmp	r4, r3
 800593c:	d152      	bne.n	80059e4 <setvbuf+0xc8>
 800593e:	6874      	ldr	r4, [r6, #4]
 8005940:	f1b8 0f02 	cmp.w	r8, #2
 8005944:	d006      	beq.n	8005954 <setvbuf+0x38>
 8005946:	f1b8 0f01 	cmp.w	r8, #1
 800594a:	f200 8089 	bhi.w	8005a60 <setvbuf+0x144>
 800594e:	2d00      	cmp	r5, #0
 8005950:	f2c0 8086 	blt.w	8005a60 <setvbuf+0x144>
 8005954:	4621      	mov	r1, r4
 8005956:	4630      	mov	r0, r6
 8005958:	f000 ff94 	bl	8006884 <_fflush_r>
 800595c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800595e:	b141      	cbz	r1, 8005972 <setvbuf+0x56>
 8005960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005964:	4299      	cmp	r1, r3
 8005966:	d002      	beq.n	800596e <setvbuf+0x52>
 8005968:	4630      	mov	r0, r6
 800596a:	f001 fbfd 	bl	8007168 <_free_r>
 800596e:	2300      	movs	r3, #0
 8005970:	6363      	str	r3, [r4, #52]	; 0x34
 8005972:	2300      	movs	r3, #0
 8005974:	61a3      	str	r3, [r4, #24]
 8005976:	6063      	str	r3, [r4, #4]
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	061b      	lsls	r3, r3, #24
 800597c:	d503      	bpl.n	8005986 <setvbuf+0x6a>
 800597e:	6921      	ldr	r1, [r4, #16]
 8005980:	4630      	mov	r0, r6
 8005982:	f001 fbf1 	bl	8007168 <_free_r>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f1b8 0f02 	cmp.w	r8, #2
 800598c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	d05d      	beq.n	8005a54 <setvbuf+0x138>
 8005998:	ab01      	add	r3, sp, #4
 800599a:	466a      	mov	r2, sp
 800599c:	4621      	mov	r1, r4
 800599e:	4630      	mov	r0, r6
 80059a0:	f001 f872 	bl	8006a88 <__swhatbuf_r>
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	4318      	orrs	r0, r3
 80059a8:	81a0      	strh	r0, [r4, #12]
 80059aa:	bb2d      	cbnz	r5, 80059f8 <setvbuf+0xdc>
 80059ac:	9d00      	ldr	r5, [sp, #0]
 80059ae:	4628      	mov	r0, r5
 80059b0:	f001 f8ce 	bl	8006b50 <malloc>
 80059b4:	4607      	mov	r7, r0
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d14e      	bne.n	8005a58 <setvbuf+0x13c>
 80059ba:	f8dd 9000 	ldr.w	r9, [sp]
 80059be:	45a9      	cmp	r9, r5
 80059c0:	d13c      	bne.n	8005a3c <setvbuf+0x120>
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f043 0302 	orr.w	r3, r3, #2
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	2300      	movs	r3, #0
 80059d0:	60a3      	str	r3, [r4, #8]
 80059d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	2301      	movs	r3, #1
 80059dc:	6163      	str	r3, [r4, #20]
 80059de:	b003      	add	sp, #12
 80059e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059e4:	4b22      	ldr	r3, [pc, #136]	; (8005a70 <setvbuf+0x154>)
 80059e6:	429c      	cmp	r4, r3
 80059e8:	d101      	bne.n	80059ee <setvbuf+0xd2>
 80059ea:	68b4      	ldr	r4, [r6, #8]
 80059ec:	e7a8      	b.n	8005940 <setvbuf+0x24>
 80059ee:	4b21      	ldr	r3, [pc, #132]	; (8005a74 <setvbuf+0x158>)
 80059f0:	429c      	cmp	r4, r3
 80059f2:	bf08      	it	eq
 80059f4:	68f4      	ldreq	r4, [r6, #12]
 80059f6:	e7a3      	b.n	8005940 <setvbuf+0x24>
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	d0d8      	beq.n	80059ae <setvbuf+0x92>
 80059fc:	69b3      	ldr	r3, [r6, #24]
 80059fe:	b913      	cbnz	r3, 8005a06 <setvbuf+0xea>
 8005a00:	4630      	mov	r0, r6
 8005a02:	f000 ffa9 	bl	8006958 <__sinit>
 8005a06:	f1b8 0f01 	cmp.w	r8, #1
 8005a0a:	bf08      	it	eq
 8005a0c:	89a3      	ldrheq	r3, [r4, #12]
 8005a0e:	6027      	str	r7, [r4, #0]
 8005a10:	bf04      	itt	eq
 8005a12:	f043 0301 	orreq.w	r3, r3, #1
 8005a16:	81a3      	strheq	r3, [r4, #12]
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005a1e:	f013 0008 	ands.w	r0, r3, #8
 8005a22:	d01b      	beq.n	8005a5c <setvbuf+0x140>
 8005a24:	f013 0001 	ands.w	r0, r3, #1
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	bf1f      	itttt	ne
 8005a2e:	426d      	negne	r5, r5
 8005a30:	60a3      	strne	r3, [r4, #8]
 8005a32:	61a5      	strne	r5, [r4, #24]
 8005a34:	4618      	movne	r0, r3
 8005a36:	bf08      	it	eq
 8005a38:	60a5      	streq	r5, [r4, #8]
 8005a3a:	e7d0      	b.n	80059de <setvbuf+0xc2>
 8005a3c:	4648      	mov	r0, r9
 8005a3e:	f001 f887 	bl	8006b50 <malloc>
 8005a42:	4607      	mov	r7, r0
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d0bc      	beq.n	80059c2 <setvbuf+0xa6>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	464d      	mov	r5, r9
 8005a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	e7d3      	b.n	80059fc <setvbuf+0xe0>
 8005a54:	2000      	movs	r0, #0
 8005a56:	e7b6      	b.n	80059c6 <setvbuf+0xaa>
 8005a58:	46a9      	mov	r9, r5
 8005a5a:	e7f5      	b.n	8005a48 <setvbuf+0x12c>
 8005a5c:	60a0      	str	r0, [r4, #8]
 8005a5e:	e7be      	b.n	80059de <setvbuf+0xc2>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	e7bb      	b.n	80059de <setvbuf+0xc2>
 8005a66:	bf00      	nop
 8005a68:	20000018 	.word	0x20000018
 8005a6c:	080079f0 	.word	0x080079f0
 8005a70:	08007a10 	.word	0x08007a10
 8005a74:	080079d0 	.word	0x080079d0

08005a78 <__utoa>:
 8005a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7a:	b08b      	sub	sp, #44	; 0x2c
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	466e      	mov	r6, sp
 8005a82:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <__utoa+0x78>)
 8005a84:	f103 0c20 	add.w	ip, r3, #32
 8005a88:	4637      	mov	r7, r6
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	6859      	ldr	r1, [r3, #4]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	c703      	stmia	r7!, {r0, r1}
 8005a92:	4563      	cmp	r3, ip
 8005a94:	463e      	mov	r6, r7
 8005a96:	d1f7      	bne.n	8005a88 <__utoa+0x10>
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	791b      	ldrb	r3, [r3, #4]
 8005a9c:	6038      	str	r0, [r7, #0]
 8005a9e:	713b      	strb	r3, [r7, #4]
 8005aa0:	1e93      	subs	r3, r2, #2
 8005aa2:	2b22      	cmp	r3, #34	; 0x22
 8005aa4:	f04f 0300 	mov.w	r3, #0
 8005aa8:	d904      	bls.n	8005ab4 <__utoa+0x3c>
 8005aaa:	7023      	strb	r3, [r4, #0]
 8005aac:	461c      	mov	r4, r3
 8005aae:	4620      	mov	r0, r4
 8005ab0:	b00b      	add	sp, #44	; 0x2c
 8005ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab4:	1e66      	subs	r6, r4, #1
 8005ab6:	fbb5 f0f2 	udiv	r0, r5, r2
 8005aba:	fb02 5510 	mls	r5, r2, r0, r5
 8005abe:	af0a      	add	r7, sp, #40	; 0x28
 8005ac0:	443d      	add	r5, r7
 8005ac2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005ac6:	1c59      	adds	r1, r3, #1
 8005ac8:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005acc:	4605      	mov	r5, r0
 8005ace:	b968      	cbnz	r0, 8005aec <__utoa+0x74>
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	5460      	strb	r0, [r4, r1]
 8005ad4:	4423      	add	r3, r4
 8005ad6:	1b19      	subs	r1, r3, r4
 8005ad8:	1b10      	subs	r0, r2, r4
 8005ada:	4281      	cmp	r1, r0
 8005adc:	dde7      	ble.n	8005aae <__utoa+0x36>
 8005ade:	7811      	ldrb	r1, [r2, #0]
 8005ae0:	7818      	ldrb	r0, [r3, #0]
 8005ae2:	f802 0b01 	strb.w	r0, [r2], #1
 8005ae6:	f803 1901 	strb.w	r1, [r3], #-1
 8005aea:	e7f4      	b.n	8005ad6 <__utoa+0x5e>
 8005aec:	460b      	mov	r3, r1
 8005aee:	e7e2      	b.n	8005ab6 <__utoa+0x3e>
 8005af0:	0800799c 	.word	0x0800799c

08005af4 <quorem>:
 8005af4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af8:	6903      	ldr	r3, [r0, #16]
 8005afa:	690c      	ldr	r4, [r1, #16]
 8005afc:	4680      	mov	r8, r0
 8005afe:	42a3      	cmp	r3, r4
 8005b00:	f2c0 8084 	blt.w	8005c0c <quorem+0x118>
 8005b04:	3c01      	subs	r4, #1
 8005b06:	f101 0714 	add.w	r7, r1, #20
 8005b0a:	f100 0614 	add.w	r6, r0, #20
 8005b0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005b12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b16:	3501      	adds	r5, #1
 8005b18:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b1c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005b20:	eb06 030c 	add.w	r3, r6, ip
 8005b24:	eb07 090c 	add.w	r9, r7, ip
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	b39d      	cbz	r5, 8005b94 <quorem+0xa0>
 8005b2c:	f04f 0a00 	mov.w	sl, #0
 8005b30:	4638      	mov	r0, r7
 8005b32:	46b6      	mov	lr, r6
 8005b34:	46d3      	mov	fp, sl
 8005b36:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b3a:	b293      	uxth	r3, r2
 8005b3c:	fb05 a303 	mla	r3, r5, r3, sl
 8005b40:	0c12      	lsrs	r2, r2, #16
 8005b42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b46:	fb05 a202 	mla	r2, r5, r2, sl
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	ebab 0303 	sub.w	r3, fp, r3
 8005b50:	f8de b000 	ldr.w	fp, [lr]
 8005b54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b58:	fa1f fb8b 	uxth.w	fp, fp
 8005b5c:	445b      	add	r3, fp
 8005b5e:	fa1f fb82 	uxth.w	fp, r2
 8005b62:	f8de 2000 	ldr.w	r2, [lr]
 8005b66:	4581      	cmp	r9, r0
 8005b68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b76:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b7a:	f84e 3b04 	str.w	r3, [lr], #4
 8005b7e:	d2da      	bcs.n	8005b36 <quorem+0x42>
 8005b80:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b84:	b933      	cbnz	r3, 8005b94 <quorem+0xa0>
 8005b86:	9b01      	ldr	r3, [sp, #4]
 8005b88:	3b04      	subs	r3, #4
 8005b8a:	429e      	cmp	r6, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	d331      	bcc.n	8005bf4 <quorem+0x100>
 8005b90:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b94:	4640      	mov	r0, r8
 8005b96:	f001 fa11 	bl	8006fbc <__mcmp>
 8005b9a:	2800      	cmp	r0, #0
 8005b9c:	db26      	blt.n	8005bec <quorem+0xf8>
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f04f 0c00 	mov.w	ip, #0
 8005ba4:	3501      	adds	r5, #1
 8005ba6:	f857 1b04 	ldr.w	r1, [r7], #4
 8005baa:	f8d0 e000 	ldr.w	lr, [r0]
 8005bae:	b28b      	uxth	r3, r1
 8005bb0:	ebac 0303 	sub.w	r3, ip, r3
 8005bb4:	fa1f f28e 	uxth.w	r2, lr
 8005bb8:	4413      	add	r3, r2
 8005bba:	0c0a      	lsrs	r2, r1, #16
 8005bbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bca:	45b9      	cmp	r9, r7
 8005bcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005bd0:	f840 3b04 	str.w	r3, [r0], #4
 8005bd4:	d2e7      	bcs.n	8005ba6 <quorem+0xb2>
 8005bd6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005bda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005bde:	b92a      	cbnz	r2, 8005bec <quorem+0xf8>
 8005be0:	3b04      	subs	r3, #4
 8005be2:	429e      	cmp	r6, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	d30b      	bcc.n	8005c00 <quorem+0x10c>
 8005be8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005bec:	4628      	mov	r0, r5
 8005bee:	b003      	add	sp, #12
 8005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	3b04      	subs	r3, #4
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	d1c9      	bne.n	8005b90 <quorem+0x9c>
 8005bfc:	3c01      	subs	r4, #1
 8005bfe:	e7c4      	b.n	8005b8a <quorem+0x96>
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	3b04      	subs	r3, #4
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	d1ef      	bne.n	8005be8 <quorem+0xf4>
 8005c08:	3c01      	subs	r4, #1
 8005c0a:	e7ea      	b.n	8005be2 <quorem+0xee>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e7ee      	b.n	8005bee <quorem+0xfa>

08005c10 <_dtoa_r>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	4616      	mov	r6, r2
 8005c16:	461f      	mov	r7, r3
 8005c18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c1a:	b095      	sub	sp, #84	; 0x54
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005c22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005c26:	b93d      	cbnz	r5, 8005c38 <_dtoa_r+0x28>
 8005c28:	2010      	movs	r0, #16
 8005c2a:	f000 ff91 	bl	8006b50 <malloc>
 8005c2e:	6260      	str	r0, [r4, #36]	; 0x24
 8005c30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c34:	6005      	str	r5, [r0, #0]
 8005c36:	60c5      	str	r5, [r0, #12]
 8005c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c3a:	6819      	ldr	r1, [r3, #0]
 8005c3c:	b151      	cbz	r1, 8005c54 <_dtoa_r+0x44>
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	2301      	movs	r3, #1
 8005c42:	4093      	lsls	r3, r2
 8005c44:	604a      	str	r2, [r1, #4]
 8005c46:	608b      	str	r3, [r1, #8]
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 ffd6 	bl	8006bfa <_Bfree>
 8005c4e:	2200      	movs	r2, #0
 8005c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	1e3b      	subs	r3, r7, #0
 8005c56:	bfaf      	iteee	ge
 8005c58:	2300      	movge	r3, #0
 8005c5a:	2201      	movlt	r2, #1
 8005c5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c60:	9303      	strlt	r3, [sp, #12]
 8005c62:	bfac      	ite	ge
 8005c64:	f8c8 3000 	strge.w	r3, [r8]
 8005c68:	f8c8 2000 	strlt.w	r2, [r8]
 8005c6c:	4bae      	ldr	r3, [pc, #696]	; (8005f28 <_dtoa_r+0x318>)
 8005c6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c72:	ea33 0308 	bics.w	r3, r3, r8
 8005c76:	d11b      	bne.n	8005cb0 <_dtoa_r+0xa0>
 8005c78:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	9b02      	ldr	r3, [sp, #8]
 8005c82:	b923      	cbnz	r3, 8005c8e <_dtoa_r+0x7e>
 8005c84:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	f000 8545 	beq.w	8006718 <_dtoa_r+0xb08>
 8005c8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c90:	b953      	cbnz	r3, 8005ca8 <_dtoa_r+0x98>
 8005c92:	4ba6      	ldr	r3, [pc, #664]	; (8005f2c <_dtoa_r+0x31c>)
 8005c94:	e021      	b.n	8005cda <_dtoa_r+0xca>
 8005c96:	4ba6      	ldr	r3, [pc, #664]	; (8005f30 <_dtoa_r+0x320>)
 8005c98:	9306      	str	r3, [sp, #24]
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	9806      	ldr	r0, [sp, #24]
 8005ca2:	b015      	add	sp, #84	; 0x54
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	4ba0      	ldr	r3, [pc, #640]	; (8005f2c <_dtoa_r+0x31c>)
 8005caa:	9306      	str	r3, [sp, #24]
 8005cac:	3303      	adds	r3, #3
 8005cae:	e7f5      	b.n	8005c9c <_dtoa_r+0x8c>
 8005cb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8005cc0:	4682      	mov	sl, r0
 8005cc2:	b160      	cbz	r0, 8005cde <_dtoa_r+0xce>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8520 	beq.w	8006712 <_dtoa_r+0xb02>
 8005cd2:	4b98      	ldr	r3, [pc, #608]	; (8005f34 <_dtoa_r+0x324>)
 8005cd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	9306      	str	r3, [sp, #24]
 8005cdc:	e7e0      	b.n	8005ca0 <_dtoa_r+0x90>
 8005cde:	ab12      	add	r3, sp, #72	; 0x48
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	ab13      	add	r3, sp, #76	; 0x4c
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	463b      	mov	r3, r7
 8005cea:	4620      	mov	r0, r4
 8005cec:	f001 f9de 	bl	80070ac <__d2b>
 8005cf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005cf4:	4683      	mov	fp, r0
 8005cf6:	2d00      	cmp	r5, #0
 8005cf8:	d07d      	beq.n	8005df6 <_dtoa_r+0x1e6>
 8005cfa:	46b0      	mov	r8, r6
 8005cfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d00:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005d04:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005d08:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d0c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005d10:	2200      	movs	r2, #0
 8005d12:	4b89      	ldr	r3, [pc, #548]	; (8005f38 <_dtoa_r+0x328>)
 8005d14:	4640      	mov	r0, r8
 8005d16:	4649      	mov	r1, r9
 8005d18:	f7fa fa26 	bl	8000168 <__aeabi_dsub>
 8005d1c:	a37c      	add	r3, pc, #496	; (adr r3, 8005f10 <_dtoa_r+0x300>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa fbd9 	bl	80004d8 <__aeabi_dmul>
 8005d26:	a37c      	add	r3, pc, #496	; (adr r3, 8005f18 <_dtoa_r+0x308>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f7fa fa1e 	bl	800016c <__adddf3>
 8005d30:	4606      	mov	r6, r0
 8005d32:	4628      	mov	r0, r5
 8005d34:	460f      	mov	r7, r1
 8005d36:	f7fa fb65 	bl	8000404 <__aeabi_i2d>
 8005d3a:	a379      	add	r3, pc, #484	; (adr r3, 8005f20 <_dtoa_r+0x310>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fbca 	bl	80004d8 <__aeabi_dmul>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4630      	mov	r0, r6
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa fa0e 	bl	800016c <__adddf3>
 8005d50:	4606      	mov	r6, r0
 8005d52:	460f      	mov	r7, r1
 8005d54:	f7fa fe70 	bl	8000a38 <__aeabi_d2iz>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4682      	mov	sl, r0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4630      	mov	r0, r6
 8005d60:	4639      	mov	r1, r7
 8005d62:	f7fa fe2b 	bl	80009bc <__aeabi_dcmplt>
 8005d66:	b148      	cbz	r0, 8005d7c <_dtoa_r+0x16c>
 8005d68:	4650      	mov	r0, sl
 8005d6a:	f7fa fb4b 	bl	8000404 <__aeabi_i2d>
 8005d6e:	4632      	mov	r2, r6
 8005d70:	463b      	mov	r3, r7
 8005d72:	f7fa fe19 	bl	80009a8 <__aeabi_dcmpeq>
 8005d76:	b908      	cbnz	r0, 8005d7c <_dtoa_r+0x16c>
 8005d78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d7c:	f1ba 0f16 	cmp.w	sl, #22
 8005d80:	d85a      	bhi.n	8005e38 <_dtoa_r+0x228>
 8005d82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d86:	496d      	ldr	r1, [pc, #436]	; (8005f3c <_dtoa_r+0x32c>)
 8005d88:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d90:	f7fa fe32 	bl	80009f8 <__aeabi_dcmpgt>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d051      	beq.n	8005e3c <_dtoa_r+0x22c>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da2:	1b5d      	subs	r5, r3, r5
 8005da4:	1e6b      	subs	r3, r5, #1
 8005da6:	9307      	str	r3, [sp, #28]
 8005da8:	bf43      	ittte	mi
 8005daa:	2300      	movmi	r3, #0
 8005dac:	f1c5 0901 	rsbmi	r9, r5, #1
 8005db0:	9307      	strmi	r3, [sp, #28]
 8005db2:	f04f 0900 	movpl.w	r9, #0
 8005db6:	f1ba 0f00 	cmp.w	sl, #0
 8005dba:	db41      	blt.n	8005e40 <_dtoa_r+0x230>
 8005dbc:	9b07      	ldr	r3, [sp, #28]
 8005dbe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005dc2:	4453      	add	r3, sl
 8005dc4:	9307      	str	r3, [sp, #28]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	9308      	str	r3, [sp, #32]
 8005dca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	f200 808f 	bhi.w	8005ef0 <_dtoa_r+0x2e0>
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	bfc4      	itt	gt
 8005dd6:	3b04      	subgt	r3, #4
 8005dd8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005dda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ddc:	bfc8      	it	gt
 8005dde:	2500      	movgt	r5, #0
 8005de0:	f1a3 0302 	sub.w	r3, r3, #2
 8005de4:	bfd8      	it	le
 8005de6:	2501      	movle	r5, #1
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	f200 808d 	bhi.w	8005f08 <_dtoa_r+0x2f8>
 8005dee:	e8df f003 	tbb	[pc, r3]
 8005df2:	7d7b      	.short	0x7d7b
 8005df4:	6f2f      	.short	0x6f2f
 8005df6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005dfa:	441d      	add	r5, r3
 8005dfc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005e00:	2820      	cmp	r0, #32
 8005e02:	dd13      	ble.n	8005e2c <_dtoa_r+0x21c>
 8005e04:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005e08:	9b02      	ldr	r3, [sp, #8]
 8005e0a:	fa08 f800 	lsl.w	r8, r8, r0
 8005e0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005e12:	fa23 f000 	lsr.w	r0, r3, r0
 8005e16:	ea48 0000 	orr.w	r0, r8, r0
 8005e1a:	f7fa fae3 	bl	80003e4 <__aeabi_ui2d>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4680      	mov	r8, r0
 8005e22:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005e26:	3d01      	subs	r5, #1
 8005e28:	9310      	str	r3, [sp, #64]	; 0x40
 8005e2a:	e771      	b.n	8005d10 <_dtoa_r+0x100>
 8005e2c:	9b02      	ldr	r3, [sp, #8]
 8005e2e:	f1c0 0020 	rsb	r0, r0, #32
 8005e32:	fa03 f000 	lsl.w	r0, r3, r0
 8005e36:	e7f0      	b.n	8005e1a <_dtoa_r+0x20a>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e7b0      	b.n	8005d9e <_dtoa_r+0x18e>
 8005e3c:	900d      	str	r0, [sp, #52]	; 0x34
 8005e3e:	e7af      	b.n	8005da0 <_dtoa_r+0x190>
 8005e40:	f1ca 0300 	rsb	r3, sl, #0
 8005e44:	9308      	str	r3, [sp, #32]
 8005e46:	2300      	movs	r3, #0
 8005e48:	eba9 090a 	sub.w	r9, r9, sl
 8005e4c:	930c      	str	r3, [sp, #48]	; 0x30
 8005e4e:	e7bc      	b.n	8005dca <_dtoa_r+0x1ba>
 8005e50:	2301      	movs	r3, #1
 8005e52:	9309      	str	r3, [sp, #36]	; 0x24
 8005e54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dd74      	ble.n	8005f44 <_dtoa_r+0x334>
 8005e5a:	4698      	mov	r8, r3
 8005e5c:	9304      	str	r3, [sp, #16]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e62:	6072      	str	r2, [r6, #4]
 8005e64:	2204      	movs	r2, #4
 8005e66:	f102 0014 	add.w	r0, r2, #20
 8005e6a:	4298      	cmp	r0, r3
 8005e6c:	6871      	ldr	r1, [r6, #4]
 8005e6e:	d96e      	bls.n	8005f4e <_dtoa_r+0x33e>
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 fe8e 	bl	8006b92 <_Balloc>
 8005e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e78:	6030      	str	r0, [r6, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f1b8 0f0e 	cmp.w	r8, #14
 8005e80:	9306      	str	r3, [sp, #24]
 8005e82:	f200 80ed 	bhi.w	8006060 <_dtoa_r+0x450>
 8005e86:	2d00      	cmp	r5, #0
 8005e88:	f000 80ea 	beq.w	8006060 <_dtoa_r+0x450>
 8005e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e90:	f1ba 0f00 	cmp.w	sl, #0
 8005e94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005e98:	dd77      	ble.n	8005f8a <_dtoa_r+0x37a>
 8005e9a:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <_dtoa_r+0x32c>)
 8005e9c:	f00a 030f 	and.w	r3, sl, #15
 8005ea0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005ea4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ea8:	06f0      	lsls	r0, r6, #27
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005eb2:	d568      	bpl.n	8005f86 <_dtoa_r+0x376>
 8005eb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005eb8:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <_dtoa_r+0x330>)
 8005eba:	2503      	movs	r5, #3
 8005ebc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ec0:	f7fa fc34 	bl	800072c <__aeabi_ddiv>
 8005ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ec8:	f006 060f 	and.w	r6, r6, #15
 8005ecc:	4f1c      	ldr	r7, [pc, #112]	; (8005f40 <_dtoa_r+0x330>)
 8005ece:	e04f      	b.n	8005f70 <_dtoa_r+0x360>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ed6:	4453      	add	r3, sl
 8005ed8:	f103 0801 	add.w	r8, r3, #1
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	4643      	mov	r3, r8
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	bfb8      	it	lt
 8005ee4:	2301      	movlt	r3, #1
 8005ee6:	e7ba      	b.n	8005e5e <_dtoa_r+0x24e>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e7b2      	b.n	8005e52 <_dtoa_r+0x242>
 8005eec:	2300      	movs	r3, #0
 8005eee:	e7f0      	b.n	8005ed2 <_dtoa_r+0x2c2>
 8005ef0:	2501      	movs	r5, #1
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9509      	str	r5, [sp, #36]	; 0x24
 8005ef6:	931e      	str	r3, [sp, #120]	; 0x78
 8005ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8005efc:	2200      	movs	r2, #0
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	4698      	mov	r8, r3
 8005f02:	2312      	movs	r3, #18
 8005f04:	921f      	str	r2, [sp, #124]	; 0x7c
 8005f06:	e7aa      	b.n	8005e5e <_dtoa_r+0x24e>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f0c:	e7f4      	b.n	8005ef8 <_dtoa_r+0x2e8>
 8005f0e:	bf00      	nop
 8005f10:	636f4361 	.word	0x636f4361
 8005f14:	3fd287a7 	.word	0x3fd287a7
 8005f18:	8b60c8b3 	.word	0x8b60c8b3
 8005f1c:	3fc68a28 	.word	0x3fc68a28
 8005f20:	509f79fb 	.word	0x509f79fb
 8005f24:	3fd34413 	.word	0x3fd34413
 8005f28:	7ff00000 	.word	0x7ff00000
 8005f2c:	080079ca 	.word	0x080079ca
 8005f30:	080079c1 	.word	0x080079c1
 8005f34:	08007979 	.word	0x08007979
 8005f38:	3ff80000 	.word	0x3ff80000
 8005f3c:	08007a58 	.word	0x08007a58
 8005f40:	08007a30 	.word	0x08007a30
 8005f44:	2301      	movs	r3, #1
 8005f46:	9304      	str	r3, [sp, #16]
 8005f48:	4698      	mov	r8, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	e7da      	b.n	8005f04 <_dtoa_r+0x2f4>
 8005f4e:	3101      	adds	r1, #1
 8005f50:	6071      	str	r1, [r6, #4]
 8005f52:	0052      	lsls	r2, r2, #1
 8005f54:	e787      	b.n	8005e66 <_dtoa_r+0x256>
 8005f56:	07f1      	lsls	r1, r6, #31
 8005f58:	d508      	bpl.n	8005f6c <_dtoa_r+0x35c>
 8005f5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f62:	f7fa fab9 	bl	80004d8 <__aeabi_dmul>
 8005f66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f6a:	3501      	adds	r5, #1
 8005f6c:	1076      	asrs	r6, r6, #1
 8005f6e:	3708      	adds	r7, #8
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	d1f0      	bne.n	8005f56 <_dtoa_r+0x346>
 8005f74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f7c:	f7fa fbd6 	bl	800072c <__aeabi_ddiv>
 8005f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f84:	e01b      	b.n	8005fbe <_dtoa_r+0x3ae>
 8005f86:	2502      	movs	r5, #2
 8005f88:	e7a0      	b.n	8005ecc <_dtoa_r+0x2bc>
 8005f8a:	f000 80a4 	beq.w	80060d6 <_dtoa_r+0x4c6>
 8005f8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f92:	f1ca 0600 	rsb	r6, sl, #0
 8005f96:	4ba0      	ldr	r3, [pc, #640]	; (8006218 <_dtoa_r+0x608>)
 8005f98:	f006 020f 	and.w	r2, r6, #15
 8005f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f7fa fa98 	bl	80004d8 <__aeabi_dmul>
 8005fa8:	2502      	movs	r5, #2
 8005faa:	2300      	movs	r3, #0
 8005fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb0:	4f9a      	ldr	r7, [pc, #616]	; (800621c <_dtoa_r+0x60c>)
 8005fb2:	1136      	asrs	r6, r6, #4
 8005fb4:	2e00      	cmp	r6, #0
 8005fb6:	f040 8083 	bne.w	80060c0 <_dtoa_r+0x4b0>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e0      	bne.n	8005f80 <_dtoa_r+0x370>
 8005fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 808a 	beq.w	80060da <_dtoa_r+0x4ca>
 8005fc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005fce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4b92      	ldr	r3, [pc, #584]	; (8006220 <_dtoa_r+0x610>)
 8005fd6:	f7fa fcf1 	bl	80009bc <__aeabi_dcmplt>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d07d      	beq.n	80060da <_dtoa_r+0x4ca>
 8005fde:	f1b8 0f00 	cmp.w	r8, #0
 8005fe2:	d07a      	beq.n	80060da <_dtoa_r+0x4ca>
 8005fe4:	9b04      	ldr	r3, [sp, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dd36      	ble.n	8006058 <_dtoa_r+0x448>
 8005fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4b8c      	ldr	r3, [pc, #560]	; (8006224 <_dtoa_r+0x614>)
 8005ff2:	f7fa fa71 	bl	80004d8 <__aeabi_dmul>
 8005ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ffa:	9e04      	ldr	r6, [sp, #16]
 8005ffc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006000:	3501      	adds	r5, #1
 8006002:	4628      	mov	r0, r5
 8006004:	f7fa f9fe 	bl	8000404 <__aeabi_i2d>
 8006008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800600c:	f7fa fa64 	bl	80004d8 <__aeabi_dmul>
 8006010:	2200      	movs	r2, #0
 8006012:	4b85      	ldr	r3, [pc, #532]	; (8006228 <_dtoa_r+0x618>)
 8006014:	f7fa f8aa 	bl	800016c <__adddf3>
 8006018:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800601c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006020:	950b      	str	r5, [sp, #44]	; 0x2c
 8006022:	2e00      	cmp	r6, #0
 8006024:	d15c      	bne.n	80060e0 <_dtoa_r+0x4d0>
 8006026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602a:	2200      	movs	r2, #0
 800602c:	4b7f      	ldr	r3, [pc, #508]	; (800622c <_dtoa_r+0x61c>)
 800602e:	f7fa f89b 	bl	8000168 <__aeabi_dsub>
 8006032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006034:	462b      	mov	r3, r5
 8006036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800603a:	f7fa fcdd 	bl	80009f8 <__aeabi_dcmpgt>
 800603e:	2800      	cmp	r0, #0
 8006040:	f040 8281 	bne.w	8006546 <_dtoa_r+0x936>
 8006044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800604a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800604e:	f7fa fcb5 	bl	80009bc <__aeabi_dcmplt>
 8006052:	2800      	cmp	r0, #0
 8006054:	f040 8275 	bne.w	8006542 <_dtoa_r+0x932>
 8006058:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800605c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006060:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006062:	2b00      	cmp	r3, #0
 8006064:	f2c0 814b 	blt.w	80062fe <_dtoa_r+0x6ee>
 8006068:	f1ba 0f0e 	cmp.w	sl, #14
 800606c:	f300 8147 	bgt.w	80062fe <_dtoa_r+0x6ee>
 8006070:	4b69      	ldr	r3, [pc, #420]	; (8006218 <_dtoa_r+0x608>)
 8006072:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800607e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006080:	2b00      	cmp	r3, #0
 8006082:	f280 80d7 	bge.w	8006234 <_dtoa_r+0x624>
 8006086:	f1b8 0f00 	cmp.w	r8, #0
 800608a:	f300 80d3 	bgt.w	8006234 <_dtoa_r+0x624>
 800608e:	f040 8257 	bne.w	8006540 <_dtoa_r+0x930>
 8006092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006096:	2200      	movs	r2, #0
 8006098:	4b64      	ldr	r3, [pc, #400]	; (800622c <_dtoa_r+0x61c>)
 800609a:	f7fa fa1d 	bl	80004d8 <__aeabi_dmul>
 800609e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060a2:	f7fa fc9f 	bl	80009e4 <__aeabi_dcmpge>
 80060a6:	4646      	mov	r6, r8
 80060a8:	4647      	mov	r7, r8
 80060aa:	2800      	cmp	r0, #0
 80060ac:	f040 822d 	bne.w	800650a <_dtoa_r+0x8fa>
 80060b0:	9b06      	ldr	r3, [sp, #24]
 80060b2:	9a06      	ldr	r2, [sp, #24]
 80060b4:	1c5d      	adds	r5, r3, #1
 80060b6:	2331      	movs	r3, #49	; 0x31
 80060b8:	f10a 0a01 	add.w	sl, sl, #1
 80060bc:	7013      	strb	r3, [r2, #0]
 80060be:	e228      	b.n	8006512 <_dtoa_r+0x902>
 80060c0:	07f2      	lsls	r2, r6, #31
 80060c2:	d505      	bpl.n	80060d0 <_dtoa_r+0x4c0>
 80060c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c8:	f7fa fa06 	bl	80004d8 <__aeabi_dmul>
 80060cc:	2301      	movs	r3, #1
 80060ce:	3501      	adds	r5, #1
 80060d0:	1076      	asrs	r6, r6, #1
 80060d2:	3708      	adds	r7, #8
 80060d4:	e76e      	b.n	8005fb4 <_dtoa_r+0x3a4>
 80060d6:	2502      	movs	r5, #2
 80060d8:	e771      	b.n	8005fbe <_dtoa_r+0x3ae>
 80060da:	4657      	mov	r7, sl
 80060dc:	4646      	mov	r6, r8
 80060de:	e790      	b.n	8006002 <_dtoa_r+0x3f2>
 80060e0:	4b4d      	ldr	r3, [pc, #308]	; (8006218 <_dtoa_r+0x608>)
 80060e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80060ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d048      	beq.n	8006182 <_dtoa_r+0x572>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	2000      	movs	r0, #0
 80060f6:	494e      	ldr	r1, [pc, #312]	; (8006230 <_dtoa_r+0x620>)
 80060f8:	f7fa fb18 	bl	800072c <__aeabi_ddiv>
 80060fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006100:	f7fa f832 	bl	8000168 <__aeabi_dsub>
 8006104:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006108:	9d06      	ldr	r5, [sp, #24]
 800610a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800610e:	f7fa fc93 	bl	8000a38 <__aeabi_d2iz>
 8006112:	9011      	str	r0, [sp, #68]	; 0x44
 8006114:	f7fa f976 	bl	8000404 <__aeabi_i2d>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006120:	f7fa f822 	bl	8000168 <__aeabi_dsub>
 8006124:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800612a:	3330      	adds	r3, #48	; 0x30
 800612c:	f805 3b01 	strb.w	r3, [r5], #1
 8006130:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006134:	f7fa fc42 	bl	80009bc <__aeabi_dcmplt>
 8006138:	2800      	cmp	r0, #0
 800613a:	d163      	bne.n	8006204 <_dtoa_r+0x5f4>
 800613c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006140:	2000      	movs	r0, #0
 8006142:	4937      	ldr	r1, [pc, #220]	; (8006220 <_dtoa_r+0x610>)
 8006144:	f7fa f810 	bl	8000168 <__aeabi_dsub>
 8006148:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800614c:	f7fa fc36 	bl	80009bc <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	f040 80b5 	bne.w	80062c0 <_dtoa_r+0x6b0>
 8006156:	9b06      	ldr	r3, [sp, #24]
 8006158:	1aeb      	subs	r3, r5, r3
 800615a:	429e      	cmp	r6, r3
 800615c:	f77f af7c 	ble.w	8006058 <_dtoa_r+0x448>
 8006160:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006164:	2200      	movs	r2, #0
 8006166:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <_dtoa_r+0x614>)
 8006168:	f7fa f9b6 	bl	80004d8 <__aeabi_dmul>
 800616c:	2200      	movs	r2, #0
 800616e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006176:	4b2b      	ldr	r3, [pc, #172]	; (8006224 <_dtoa_r+0x614>)
 8006178:	f7fa f9ae 	bl	80004d8 <__aeabi_dmul>
 800617c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006180:	e7c3      	b.n	800610a <_dtoa_r+0x4fa>
 8006182:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006186:	f7fa f9a7 	bl	80004d8 <__aeabi_dmul>
 800618a:	9b06      	ldr	r3, [sp, #24]
 800618c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006190:	199d      	adds	r5, r3, r6
 8006192:	461e      	mov	r6, r3
 8006194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006198:	f7fa fc4e 	bl	8000a38 <__aeabi_d2iz>
 800619c:	9011      	str	r0, [sp, #68]	; 0x44
 800619e:	f7fa f931 	bl	8000404 <__aeabi_i2d>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061aa:	f7f9 ffdd 	bl	8000168 <__aeabi_dsub>
 80061ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b4:	3330      	adds	r3, #48	; 0x30
 80061b6:	f806 3b01 	strb.w	r3, [r6], #1
 80061ba:	42ae      	cmp	r6, r5
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	d124      	bne.n	800620c <_dtoa_r+0x5fc>
 80061c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061c6:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <_dtoa_r+0x620>)
 80061c8:	f7f9 ffd0 	bl	800016c <__adddf3>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d4:	f7fa fc10 	bl	80009f8 <__aeabi_dcmpgt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d171      	bne.n	80062c0 <_dtoa_r+0x6b0>
 80061dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061e0:	2000      	movs	r0, #0
 80061e2:	4913      	ldr	r1, [pc, #76]	; (8006230 <_dtoa_r+0x620>)
 80061e4:	f7f9 ffc0 	bl	8000168 <__aeabi_dsub>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f0:	f7fa fbe4 	bl	80009bc <__aeabi_dcmplt>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f43f af2f 	beq.w	8006058 <_dtoa_r+0x448>
 80061fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061fe:	1e6a      	subs	r2, r5, #1
 8006200:	2b30      	cmp	r3, #48	; 0x30
 8006202:	d001      	beq.n	8006208 <_dtoa_r+0x5f8>
 8006204:	46ba      	mov	sl, r7
 8006206:	e04a      	b.n	800629e <_dtoa_r+0x68e>
 8006208:	4615      	mov	r5, r2
 800620a:	e7f6      	b.n	80061fa <_dtoa_r+0x5ea>
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <_dtoa_r+0x614>)
 800620e:	f7fa f963 	bl	80004d8 <__aeabi_dmul>
 8006212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006216:	e7bd      	b.n	8006194 <_dtoa_r+0x584>
 8006218:	08007a58 	.word	0x08007a58
 800621c:	08007a30 	.word	0x08007a30
 8006220:	3ff00000 	.word	0x3ff00000
 8006224:	40240000 	.word	0x40240000
 8006228:	401c0000 	.word	0x401c0000
 800622c:	40140000 	.word	0x40140000
 8006230:	3fe00000 	.word	0x3fe00000
 8006234:	9d06      	ldr	r5, [sp, #24]
 8006236:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800623a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800623e:	4630      	mov	r0, r6
 8006240:	4639      	mov	r1, r7
 8006242:	f7fa fa73 	bl	800072c <__aeabi_ddiv>
 8006246:	f7fa fbf7 	bl	8000a38 <__aeabi_d2iz>
 800624a:	4681      	mov	r9, r0
 800624c:	f7fa f8da 	bl	8000404 <__aeabi_i2d>
 8006250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006254:	f7fa f940 	bl	80004d8 <__aeabi_dmul>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	f7f9 ff82 	bl	8000168 <__aeabi_dsub>
 8006264:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006268:	f805 6b01 	strb.w	r6, [r5], #1
 800626c:	9e06      	ldr	r6, [sp, #24]
 800626e:	4602      	mov	r2, r0
 8006270:	1bae      	subs	r6, r5, r6
 8006272:	45b0      	cmp	r8, r6
 8006274:	460b      	mov	r3, r1
 8006276:	d135      	bne.n	80062e4 <_dtoa_r+0x6d4>
 8006278:	f7f9 ff78 	bl	800016c <__adddf3>
 800627c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006280:	4606      	mov	r6, r0
 8006282:	460f      	mov	r7, r1
 8006284:	f7fa fbb8 	bl	80009f8 <__aeabi_dcmpgt>
 8006288:	b9c8      	cbnz	r0, 80062be <_dtoa_r+0x6ae>
 800628a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	f7fa fb89 	bl	80009a8 <__aeabi_dcmpeq>
 8006296:	b110      	cbz	r0, 800629e <_dtoa_r+0x68e>
 8006298:	f019 0f01 	tst.w	r9, #1
 800629c:	d10f      	bne.n	80062be <_dtoa_r+0x6ae>
 800629e:	4659      	mov	r1, fp
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fcaa 	bl	8006bfa <_Bfree>
 80062a6:	2300      	movs	r3, #0
 80062a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062aa:	702b      	strb	r3, [r5, #0]
 80062ac:	f10a 0301 	add.w	r3, sl, #1
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f43f acf3 	beq.w	8005ca0 <_dtoa_r+0x90>
 80062ba:	601d      	str	r5, [r3, #0]
 80062bc:	e4f0      	b.n	8005ca0 <_dtoa_r+0x90>
 80062be:	4657      	mov	r7, sl
 80062c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062c4:	1e6b      	subs	r3, r5, #1
 80062c6:	2a39      	cmp	r2, #57	; 0x39
 80062c8:	d106      	bne.n	80062d8 <_dtoa_r+0x6c8>
 80062ca:	9a06      	ldr	r2, [sp, #24]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d107      	bne.n	80062e0 <_dtoa_r+0x6d0>
 80062d0:	2330      	movs	r3, #48	; 0x30
 80062d2:	7013      	strb	r3, [r2, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	3701      	adds	r7, #1
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	3201      	adds	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	e791      	b.n	8006204 <_dtoa_r+0x5f4>
 80062e0:	461d      	mov	r5, r3
 80062e2:	e7ed      	b.n	80062c0 <_dtoa_r+0x6b0>
 80062e4:	2200      	movs	r2, #0
 80062e6:	4b99      	ldr	r3, [pc, #612]	; (800654c <_dtoa_r+0x93c>)
 80062e8:	f7fa f8f6 	bl	80004d8 <__aeabi_dmul>
 80062ec:	2200      	movs	r2, #0
 80062ee:	2300      	movs	r3, #0
 80062f0:	4606      	mov	r6, r0
 80062f2:	460f      	mov	r7, r1
 80062f4:	f7fa fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d09e      	beq.n	800623a <_dtoa_r+0x62a>
 80062fc:	e7cf      	b.n	800629e <_dtoa_r+0x68e>
 80062fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006300:	2a00      	cmp	r2, #0
 8006302:	f000 8088 	beq.w	8006416 <_dtoa_r+0x806>
 8006306:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006308:	2a01      	cmp	r2, #1
 800630a:	dc6d      	bgt.n	80063e8 <_dtoa_r+0x7d8>
 800630c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800630e:	2a00      	cmp	r2, #0
 8006310:	d066      	beq.n	80063e0 <_dtoa_r+0x7d0>
 8006312:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006316:	464d      	mov	r5, r9
 8006318:	9e08      	ldr	r6, [sp, #32]
 800631a:	9a07      	ldr	r2, [sp, #28]
 800631c:	2101      	movs	r1, #1
 800631e:	441a      	add	r2, r3
 8006320:	4620      	mov	r0, r4
 8006322:	4499      	add	r9, r3
 8006324:	9207      	str	r2, [sp, #28]
 8006326:	f000 fd08 	bl	8006d3a <__i2b>
 800632a:	4607      	mov	r7, r0
 800632c:	2d00      	cmp	r5, #0
 800632e:	dd0b      	ble.n	8006348 <_dtoa_r+0x738>
 8006330:	9b07      	ldr	r3, [sp, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	dd08      	ble.n	8006348 <_dtoa_r+0x738>
 8006336:	42ab      	cmp	r3, r5
 8006338:	bfa8      	it	ge
 800633a:	462b      	movge	r3, r5
 800633c:	9a07      	ldr	r2, [sp, #28]
 800633e:	eba9 0903 	sub.w	r9, r9, r3
 8006342:	1aed      	subs	r5, r5, r3
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	9307      	str	r3, [sp, #28]
 8006348:	9b08      	ldr	r3, [sp, #32]
 800634a:	b1eb      	cbz	r3, 8006388 <_dtoa_r+0x778>
 800634c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	d065      	beq.n	800641e <_dtoa_r+0x80e>
 8006352:	b18e      	cbz	r6, 8006378 <_dtoa_r+0x768>
 8006354:	4639      	mov	r1, r7
 8006356:	4632      	mov	r2, r6
 8006358:	4620      	mov	r0, r4
 800635a:	f000 fd8d 	bl	8006e78 <__pow5mult>
 800635e:	465a      	mov	r2, fp
 8006360:	4601      	mov	r1, r0
 8006362:	4607      	mov	r7, r0
 8006364:	4620      	mov	r0, r4
 8006366:	f000 fcf1 	bl	8006d4c <__multiply>
 800636a:	4659      	mov	r1, fp
 800636c:	900a      	str	r0, [sp, #40]	; 0x28
 800636e:	4620      	mov	r0, r4
 8006370:	f000 fc43 	bl	8006bfa <_Bfree>
 8006374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006376:	469b      	mov	fp, r3
 8006378:	9b08      	ldr	r3, [sp, #32]
 800637a:	1b9a      	subs	r2, r3, r6
 800637c:	d004      	beq.n	8006388 <_dtoa_r+0x778>
 800637e:	4659      	mov	r1, fp
 8006380:	4620      	mov	r0, r4
 8006382:	f000 fd79 	bl	8006e78 <__pow5mult>
 8006386:	4683      	mov	fp, r0
 8006388:	2101      	movs	r1, #1
 800638a:	4620      	mov	r0, r4
 800638c:	f000 fcd5 	bl	8006d3a <__i2b>
 8006390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006392:	4606      	mov	r6, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 81c6 	beq.w	8006726 <_dtoa_r+0xb16>
 800639a:	461a      	mov	r2, r3
 800639c:	4601      	mov	r1, r0
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fd6a 	bl	8006e78 <__pow5mult>
 80063a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063a6:	4606      	mov	r6, r0
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	dc3e      	bgt.n	800642a <_dtoa_r+0x81a>
 80063ac:	9b02      	ldr	r3, [sp, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d137      	bne.n	8006422 <_dtoa_r+0x812>
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d134      	bne.n	8006426 <_dtoa_r+0x816>
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063c2:	0d1b      	lsrs	r3, r3, #20
 80063c4:	051b      	lsls	r3, r3, #20
 80063c6:	b12b      	cbz	r3, 80063d4 <_dtoa_r+0x7c4>
 80063c8:	9b07      	ldr	r3, [sp, #28]
 80063ca:	f109 0901 	add.w	r9, r9, #1
 80063ce:	3301      	adds	r3, #1
 80063d0:	9307      	str	r3, [sp, #28]
 80063d2:	2301      	movs	r3, #1
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d128      	bne.n	800642e <_dtoa_r+0x81e>
 80063dc:	2001      	movs	r0, #1
 80063de:	e02e      	b.n	800643e <_dtoa_r+0x82e>
 80063e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063e6:	e796      	b.n	8006316 <_dtoa_r+0x706>
 80063e8:	9b08      	ldr	r3, [sp, #32]
 80063ea:	f108 36ff 	add.w	r6, r8, #4294967295
 80063ee:	42b3      	cmp	r3, r6
 80063f0:	bfb7      	itett	lt
 80063f2:	9b08      	ldrlt	r3, [sp, #32]
 80063f4:	1b9e      	subge	r6, r3, r6
 80063f6:	1af2      	sublt	r2, r6, r3
 80063f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80063fa:	bfbf      	itttt	lt
 80063fc:	9608      	strlt	r6, [sp, #32]
 80063fe:	189b      	addlt	r3, r3, r2
 8006400:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006402:	2600      	movlt	r6, #0
 8006404:	f1b8 0f00 	cmp.w	r8, #0
 8006408:	bfb9      	ittee	lt
 800640a:	eba9 0508 	sublt.w	r5, r9, r8
 800640e:	2300      	movlt	r3, #0
 8006410:	464d      	movge	r5, r9
 8006412:	4643      	movge	r3, r8
 8006414:	e781      	b.n	800631a <_dtoa_r+0x70a>
 8006416:	9e08      	ldr	r6, [sp, #32]
 8006418:	464d      	mov	r5, r9
 800641a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800641c:	e786      	b.n	800632c <_dtoa_r+0x71c>
 800641e:	9a08      	ldr	r2, [sp, #32]
 8006420:	e7ad      	b.n	800637e <_dtoa_r+0x76e>
 8006422:	2300      	movs	r3, #0
 8006424:	e7d6      	b.n	80063d4 <_dtoa_r+0x7c4>
 8006426:	9b02      	ldr	r3, [sp, #8]
 8006428:	e7d4      	b.n	80063d4 <_dtoa_r+0x7c4>
 800642a:	2300      	movs	r3, #0
 800642c:	9308      	str	r3, [sp, #32]
 800642e:	6933      	ldr	r3, [r6, #16]
 8006430:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006434:	6918      	ldr	r0, [r3, #16]
 8006436:	f000 fc32 	bl	8006c9e <__hi0bits>
 800643a:	f1c0 0020 	rsb	r0, r0, #32
 800643e:	9b07      	ldr	r3, [sp, #28]
 8006440:	4418      	add	r0, r3
 8006442:	f010 001f 	ands.w	r0, r0, #31
 8006446:	d047      	beq.n	80064d8 <_dtoa_r+0x8c8>
 8006448:	f1c0 0320 	rsb	r3, r0, #32
 800644c:	2b04      	cmp	r3, #4
 800644e:	dd3b      	ble.n	80064c8 <_dtoa_r+0x8b8>
 8006450:	9b07      	ldr	r3, [sp, #28]
 8006452:	f1c0 001c 	rsb	r0, r0, #28
 8006456:	4481      	add	r9, r0
 8006458:	4405      	add	r5, r0
 800645a:	4403      	add	r3, r0
 800645c:	9307      	str	r3, [sp, #28]
 800645e:	f1b9 0f00 	cmp.w	r9, #0
 8006462:	dd05      	ble.n	8006470 <_dtoa_r+0x860>
 8006464:	4659      	mov	r1, fp
 8006466:	464a      	mov	r2, r9
 8006468:	4620      	mov	r0, r4
 800646a:	f000 fd53 	bl	8006f14 <__lshift>
 800646e:	4683      	mov	fp, r0
 8006470:	9b07      	ldr	r3, [sp, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dd05      	ble.n	8006482 <_dtoa_r+0x872>
 8006476:	4631      	mov	r1, r6
 8006478:	461a      	mov	r2, r3
 800647a:	4620      	mov	r0, r4
 800647c:	f000 fd4a 	bl	8006f14 <__lshift>
 8006480:	4606      	mov	r6, r0
 8006482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006484:	b353      	cbz	r3, 80064dc <_dtoa_r+0x8cc>
 8006486:	4631      	mov	r1, r6
 8006488:	4658      	mov	r0, fp
 800648a:	f000 fd97 	bl	8006fbc <__mcmp>
 800648e:	2800      	cmp	r0, #0
 8006490:	da24      	bge.n	80064dc <_dtoa_r+0x8cc>
 8006492:	2300      	movs	r3, #0
 8006494:	4659      	mov	r1, fp
 8006496:	220a      	movs	r2, #10
 8006498:	4620      	mov	r0, r4
 800649a:	f000 fbc5 	bl	8006c28 <__multadd>
 800649e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064a4:	4683      	mov	fp, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8144 	beq.w	8006734 <_dtoa_r+0xb24>
 80064ac:	2300      	movs	r3, #0
 80064ae:	4639      	mov	r1, r7
 80064b0:	220a      	movs	r2, #10
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fbb8 	bl	8006c28 <__multadd>
 80064b8:	9b04      	ldr	r3, [sp, #16]
 80064ba:	4607      	mov	r7, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc4d      	bgt.n	800655c <_dtoa_r+0x94c>
 80064c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	dd4a      	ble.n	800655c <_dtoa_r+0x94c>
 80064c6:	e011      	b.n	80064ec <_dtoa_r+0x8dc>
 80064c8:	d0c9      	beq.n	800645e <_dtoa_r+0x84e>
 80064ca:	9a07      	ldr	r2, [sp, #28]
 80064cc:	331c      	adds	r3, #28
 80064ce:	441a      	add	r2, r3
 80064d0:	4499      	add	r9, r3
 80064d2:	441d      	add	r5, r3
 80064d4:	4613      	mov	r3, r2
 80064d6:	e7c1      	b.n	800645c <_dtoa_r+0x84c>
 80064d8:	4603      	mov	r3, r0
 80064da:	e7f6      	b.n	80064ca <_dtoa_r+0x8ba>
 80064dc:	f1b8 0f00 	cmp.w	r8, #0
 80064e0:	dc36      	bgt.n	8006550 <_dtoa_r+0x940>
 80064e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	dd33      	ble.n	8006550 <_dtoa_r+0x940>
 80064e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	b963      	cbnz	r3, 800650a <_dtoa_r+0x8fa>
 80064f0:	4631      	mov	r1, r6
 80064f2:	2205      	movs	r2, #5
 80064f4:	4620      	mov	r0, r4
 80064f6:	f000 fb97 	bl	8006c28 <__multadd>
 80064fa:	4601      	mov	r1, r0
 80064fc:	4606      	mov	r6, r0
 80064fe:	4658      	mov	r0, fp
 8006500:	f000 fd5c 	bl	8006fbc <__mcmp>
 8006504:	2800      	cmp	r0, #0
 8006506:	f73f add3 	bgt.w	80060b0 <_dtoa_r+0x4a0>
 800650a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800650c:	9d06      	ldr	r5, [sp, #24]
 800650e:	ea6f 0a03 	mvn.w	sl, r3
 8006512:	f04f 0900 	mov.w	r9, #0
 8006516:	4631      	mov	r1, r6
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fb6e 	bl	8006bfa <_Bfree>
 800651e:	2f00      	cmp	r7, #0
 8006520:	f43f aebd 	beq.w	800629e <_dtoa_r+0x68e>
 8006524:	f1b9 0f00 	cmp.w	r9, #0
 8006528:	d005      	beq.n	8006536 <_dtoa_r+0x926>
 800652a:	45b9      	cmp	r9, r7
 800652c:	d003      	beq.n	8006536 <_dtoa_r+0x926>
 800652e:	4649      	mov	r1, r9
 8006530:	4620      	mov	r0, r4
 8006532:	f000 fb62 	bl	8006bfa <_Bfree>
 8006536:	4639      	mov	r1, r7
 8006538:	4620      	mov	r0, r4
 800653a:	f000 fb5e 	bl	8006bfa <_Bfree>
 800653e:	e6ae      	b.n	800629e <_dtoa_r+0x68e>
 8006540:	2600      	movs	r6, #0
 8006542:	4637      	mov	r7, r6
 8006544:	e7e1      	b.n	800650a <_dtoa_r+0x8fa>
 8006546:	46ba      	mov	sl, r7
 8006548:	4637      	mov	r7, r6
 800654a:	e5b1      	b.n	80060b0 <_dtoa_r+0x4a0>
 800654c:	40240000 	.word	0x40240000
 8006550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006552:	f8cd 8010 	str.w	r8, [sp, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80f3 	beq.w	8006742 <_dtoa_r+0xb32>
 800655c:	2d00      	cmp	r5, #0
 800655e:	dd05      	ble.n	800656c <_dtoa_r+0x95c>
 8006560:	4639      	mov	r1, r7
 8006562:	462a      	mov	r2, r5
 8006564:	4620      	mov	r0, r4
 8006566:	f000 fcd5 	bl	8006f14 <__lshift>
 800656a:	4607      	mov	r7, r0
 800656c:	9b08      	ldr	r3, [sp, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04c      	beq.n	800660c <_dtoa_r+0x9fc>
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4620      	mov	r0, r4
 8006576:	f000 fb0c 	bl	8006b92 <_Balloc>
 800657a:	4605      	mov	r5, r0
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	f107 010c 	add.w	r1, r7, #12
 8006582:	3202      	adds	r2, #2
 8006584:	0092      	lsls	r2, r2, #2
 8006586:	300c      	adds	r0, #12
 8006588:	f000 faf8 	bl	8006b7c <memcpy>
 800658c:	2201      	movs	r2, #1
 800658e:	4629      	mov	r1, r5
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fcbf 	bl	8006f14 <__lshift>
 8006596:	46b9      	mov	r9, r7
 8006598:	4607      	mov	r7, r0
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	9307      	str	r3, [sp, #28]
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	9308      	str	r3, [sp, #32]
 80065a6:	4631      	mov	r1, r6
 80065a8:	4658      	mov	r0, fp
 80065aa:	f7ff faa3 	bl	8005af4 <quorem>
 80065ae:	4649      	mov	r1, r9
 80065b0:	4605      	mov	r5, r0
 80065b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80065b6:	4658      	mov	r0, fp
 80065b8:	f000 fd00 	bl	8006fbc <__mcmp>
 80065bc:	463a      	mov	r2, r7
 80065be:	9002      	str	r0, [sp, #8]
 80065c0:	4631      	mov	r1, r6
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 fd14 	bl	8006ff0 <__mdiff>
 80065c8:	68c3      	ldr	r3, [r0, #12]
 80065ca:	4602      	mov	r2, r0
 80065cc:	bb03      	cbnz	r3, 8006610 <_dtoa_r+0xa00>
 80065ce:	4601      	mov	r1, r0
 80065d0:	9009      	str	r0, [sp, #36]	; 0x24
 80065d2:	4658      	mov	r0, fp
 80065d4:	f000 fcf2 	bl	8006fbc <__mcmp>
 80065d8:	4603      	mov	r3, r0
 80065da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065dc:	4611      	mov	r1, r2
 80065de:	4620      	mov	r0, r4
 80065e0:	9309      	str	r3, [sp, #36]	; 0x24
 80065e2:	f000 fb0a 	bl	8006bfa <_Bfree>
 80065e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e8:	b9a3      	cbnz	r3, 8006614 <_dtoa_r+0xa04>
 80065ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80065ec:	b992      	cbnz	r2, 8006614 <_dtoa_r+0xa04>
 80065ee:	9a08      	ldr	r2, [sp, #32]
 80065f0:	b982      	cbnz	r2, 8006614 <_dtoa_r+0xa04>
 80065f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065f6:	d029      	beq.n	800664c <_dtoa_r+0xa3c>
 80065f8:	9b02      	ldr	r3, [sp, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dd01      	ble.n	8006602 <_dtoa_r+0x9f2>
 80065fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006602:	9b07      	ldr	r3, [sp, #28]
 8006604:	1c5d      	adds	r5, r3, #1
 8006606:	f883 8000 	strb.w	r8, [r3]
 800660a:	e784      	b.n	8006516 <_dtoa_r+0x906>
 800660c:	4638      	mov	r0, r7
 800660e:	e7c2      	b.n	8006596 <_dtoa_r+0x986>
 8006610:	2301      	movs	r3, #1
 8006612:	e7e3      	b.n	80065dc <_dtoa_r+0x9cc>
 8006614:	9a02      	ldr	r2, [sp, #8]
 8006616:	2a00      	cmp	r2, #0
 8006618:	db04      	blt.n	8006624 <_dtoa_r+0xa14>
 800661a:	d123      	bne.n	8006664 <_dtoa_r+0xa54>
 800661c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800661e:	bb0a      	cbnz	r2, 8006664 <_dtoa_r+0xa54>
 8006620:	9a08      	ldr	r2, [sp, #32]
 8006622:	b9fa      	cbnz	r2, 8006664 <_dtoa_r+0xa54>
 8006624:	2b00      	cmp	r3, #0
 8006626:	ddec      	ble.n	8006602 <_dtoa_r+0x9f2>
 8006628:	4659      	mov	r1, fp
 800662a:	2201      	movs	r2, #1
 800662c:	4620      	mov	r0, r4
 800662e:	f000 fc71 	bl	8006f14 <__lshift>
 8006632:	4631      	mov	r1, r6
 8006634:	4683      	mov	fp, r0
 8006636:	f000 fcc1 	bl	8006fbc <__mcmp>
 800663a:	2800      	cmp	r0, #0
 800663c:	dc03      	bgt.n	8006646 <_dtoa_r+0xa36>
 800663e:	d1e0      	bne.n	8006602 <_dtoa_r+0x9f2>
 8006640:	f018 0f01 	tst.w	r8, #1
 8006644:	d0dd      	beq.n	8006602 <_dtoa_r+0x9f2>
 8006646:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800664a:	d1d8      	bne.n	80065fe <_dtoa_r+0x9ee>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	9a07      	ldr	r2, [sp, #28]
 8006650:	1c5d      	adds	r5, r3, #1
 8006652:	2339      	movs	r3, #57	; 0x39
 8006654:	7013      	strb	r3, [r2, #0]
 8006656:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800665a:	1e6a      	subs	r2, r5, #1
 800665c:	2b39      	cmp	r3, #57	; 0x39
 800665e:	d04d      	beq.n	80066fc <_dtoa_r+0xaec>
 8006660:	3301      	adds	r3, #1
 8006662:	e052      	b.n	800670a <_dtoa_r+0xafa>
 8006664:	9a07      	ldr	r2, [sp, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f102 0501 	add.w	r5, r2, #1
 800666c:	dd06      	ble.n	800667c <_dtoa_r+0xa6c>
 800666e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006672:	d0eb      	beq.n	800664c <_dtoa_r+0xa3c>
 8006674:	f108 0801 	add.w	r8, r8, #1
 8006678:	9b07      	ldr	r3, [sp, #28]
 800667a:	e7c4      	b.n	8006606 <_dtoa_r+0x9f6>
 800667c:	9b06      	ldr	r3, [sp, #24]
 800667e:	9a04      	ldr	r2, [sp, #16]
 8006680:	1aeb      	subs	r3, r5, r3
 8006682:	4293      	cmp	r3, r2
 8006684:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006688:	d021      	beq.n	80066ce <_dtoa_r+0xabe>
 800668a:	4659      	mov	r1, fp
 800668c:	2300      	movs	r3, #0
 800668e:	220a      	movs	r2, #10
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fac9 	bl	8006c28 <__multadd>
 8006696:	45b9      	cmp	r9, r7
 8006698:	4683      	mov	fp, r0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	f04f 020a 	mov.w	r2, #10
 80066a2:	4649      	mov	r1, r9
 80066a4:	4620      	mov	r0, r4
 80066a6:	d105      	bne.n	80066b4 <_dtoa_r+0xaa4>
 80066a8:	f000 fabe 	bl	8006c28 <__multadd>
 80066ac:	4681      	mov	r9, r0
 80066ae:	4607      	mov	r7, r0
 80066b0:	9507      	str	r5, [sp, #28]
 80066b2:	e778      	b.n	80065a6 <_dtoa_r+0x996>
 80066b4:	f000 fab8 	bl	8006c28 <__multadd>
 80066b8:	4639      	mov	r1, r7
 80066ba:	4681      	mov	r9, r0
 80066bc:	2300      	movs	r3, #0
 80066be:	220a      	movs	r2, #10
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fab1 	bl	8006c28 <__multadd>
 80066c6:	4607      	mov	r7, r0
 80066c8:	e7f2      	b.n	80066b0 <_dtoa_r+0xaa0>
 80066ca:	f04f 0900 	mov.w	r9, #0
 80066ce:	4659      	mov	r1, fp
 80066d0:	2201      	movs	r2, #1
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fc1e 	bl	8006f14 <__lshift>
 80066d8:	4631      	mov	r1, r6
 80066da:	4683      	mov	fp, r0
 80066dc:	f000 fc6e 	bl	8006fbc <__mcmp>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	dcb8      	bgt.n	8006656 <_dtoa_r+0xa46>
 80066e4:	d102      	bne.n	80066ec <_dtoa_r+0xadc>
 80066e6:	f018 0f01 	tst.w	r8, #1
 80066ea:	d1b4      	bne.n	8006656 <_dtoa_r+0xa46>
 80066ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066f0:	1e6a      	subs	r2, r5, #1
 80066f2:	2b30      	cmp	r3, #48	; 0x30
 80066f4:	f47f af0f 	bne.w	8006516 <_dtoa_r+0x906>
 80066f8:	4615      	mov	r5, r2
 80066fa:	e7f7      	b.n	80066ec <_dtoa_r+0xadc>
 80066fc:	9b06      	ldr	r3, [sp, #24]
 80066fe:	4293      	cmp	r3, r2
 8006700:	d105      	bne.n	800670e <_dtoa_r+0xafe>
 8006702:	2331      	movs	r3, #49	; 0x31
 8006704:	9a06      	ldr	r2, [sp, #24]
 8006706:	f10a 0a01 	add.w	sl, sl, #1
 800670a:	7013      	strb	r3, [r2, #0]
 800670c:	e703      	b.n	8006516 <_dtoa_r+0x906>
 800670e:	4615      	mov	r5, r2
 8006710:	e7a1      	b.n	8006656 <_dtoa_r+0xa46>
 8006712:	4b17      	ldr	r3, [pc, #92]	; (8006770 <_dtoa_r+0xb60>)
 8006714:	f7ff bae1 	b.w	8005cda <_dtoa_r+0xca>
 8006718:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800671a:	2b00      	cmp	r3, #0
 800671c:	f47f aabb 	bne.w	8005c96 <_dtoa_r+0x86>
 8006720:	4b14      	ldr	r3, [pc, #80]	; (8006774 <_dtoa_r+0xb64>)
 8006722:	f7ff bada 	b.w	8005cda <_dtoa_r+0xca>
 8006726:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006728:	2b01      	cmp	r3, #1
 800672a:	f77f ae3f 	ble.w	80063ac <_dtoa_r+0x79c>
 800672e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006730:	9308      	str	r3, [sp, #32]
 8006732:	e653      	b.n	80063dc <_dtoa_r+0x7cc>
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	dc03      	bgt.n	8006742 <_dtoa_r+0xb32>
 800673a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800673c:	2b02      	cmp	r3, #2
 800673e:	f73f aed5 	bgt.w	80064ec <_dtoa_r+0x8dc>
 8006742:	9d06      	ldr	r5, [sp, #24]
 8006744:	4631      	mov	r1, r6
 8006746:	4658      	mov	r0, fp
 8006748:	f7ff f9d4 	bl	8005af4 <quorem>
 800674c:	9b06      	ldr	r3, [sp, #24]
 800674e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006752:	f805 8b01 	strb.w	r8, [r5], #1
 8006756:	9a04      	ldr	r2, [sp, #16]
 8006758:	1aeb      	subs	r3, r5, r3
 800675a:	429a      	cmp	r2, r3
 800675c:	ddb5      	ble.n	80066ca <_dtoa_r+0xaba>
 800675e:	4659      	mov	r1, fp
 8006760:	2300      	movs	r3, #0
 8006762:	220a      	movs	r2, #10
 8006764:	4620      	mov	r0, r4
 8006766:	f000 fa5f 	bl	8006c28 <__multadd>
 800676a:	4683      	mov	fp, r0
 800676c:	e7ea      	b.n	8006744 <_dtoa_r+0xb34>
 800676e:	bf00      	nop
 8006770:	08007978 	.word	0x08007978
 8006774:	080079c1 	.word	0x080079c1

08006778 <__sflush_r>:
 8006778:	898a      	ldrh	r2, [r1, #12]
 800677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677e:	4605      	mov	r5, r0
 8006780:	0710      	lsls	r0, r2, #28
 8006782:	460c      	mov	r4, r1
 8006784:	d458      	bmi.n	8006838 <__sflush_r+0xc0>
 8006786:	684b      	ldr	r3, [r1, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dc05      	bgt.n	8006798 <__sflush_r+0x20>
 800678c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	dc02      	bgt.n	8006798 <__sflush_r+0x20>
 8006792:	2000      	movs	r0, #0
 8006794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679a:	2e00      	cmp	r6, #0
 800679c:	d0f9      	beq.n	8006792 <__sflush_r+0x1a>
 800679e:	2300      	movs	r3, #0
 80067a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067a4:	682f      	ldr	r7, [r5, #0]
 80067a6:	6a21      	ldr	r1, [r4, #32]
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	d032      	beq.n	8006812 <__sflush_r+0x9a>
 80067ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	075a      	lsls	r2, r3, #29
 80067b2:	d505      	bpl.n	80067c0 <__sflush_r+0x48>
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	1ac0      	subs	r0, r0, r3
 80067b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067ba:	b10b      	cbz	r3, 80067c0 <__sflush_r+0x48>
 80067bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067be:	1ac0      	subs	r0, r0, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	4602      	mov	r2, r0
 80067c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067c6:	6a21      	ldr	r1, [r4, #32]
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b0      	blx	r6
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	d106      	bne.n	80067e0 <__sflush_r+0x68>
 80067d2:	6829      	ldr	r1, [r5, #0]
 80067d4:	291d      	cmp	r1, #29
 80067d6:	d848      	bhi.n	800686a <__sflush_r+0xf2>
 80067d8:	4a29      	ldr	r2, [pc, #164]	; (8006880 <__sflush_r+0x108>)
 80067da:	40ca      	lsrs	r2, r1
 80067dc:	07d6      	lsls	r6, r2, #31
 80067de:	d544      	bpl.n	800686a <__sflush_r+0xf2>
 80067e0:	2200      	movs	r2, #0
 80067e2:	6062      	str	r2, [r4, #4]
 80067e4:	6922      	ldr	r2, [r4, #16]
 80067e6:	04d9      	lsls	r1, r3, #19
 80067e8:	6022      	str	r2, [r4, #0]
 80067ea:	d504      	bpl.n	80067f6 <__sflush_r+0x7e>
 80067ec:	1c42      	adds	r2, r0, #1
 80067ee:	d101      	bne.n	80067f4 <__sflush_r+0x7c>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b903      	cbnz	r3, 80067f6 <__sflush_r+0x7e>
 80067f4:	6560      	str	r0, [r4, #84]	; 0x54
 80067f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067f8:	602f      	str	r7, [r5, #0]
 80067fa:	2900      	cmp	r1, #0
 80067fc:	d0c9      	beq.n	8006792 <__sflush_r+0x1a>
 80067fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006802:	4299      	cmp	r1, r3
 8006804:	d002      	beq.n	800680c <__sflush_r+0x94>
 8006806:	4628      	mov	r0, r5
 8006808:	f000 fcae 	bl	8007168 <_free_r>
 800680c:	2000      	movs	r0, #0
 800680e:	6360      	str	r0, [r4, #52]	; 0x34
 8006810:	e7c0      	b.n	8006794 <__sflush_r+0x1c>
 8006812:	2301      	movs	r3, #1
 8006814:	4628      	mov	r0, r5
 8006816:	47b0      	blx	r6
 8006818:	1c41      	adds	r1, r0, #1
 800681a:	d1c8      	bne.n	80067ae <__sflush_r+0x36>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0c5      	beq.n	80067ae <__sflush_r+0x36>
 8006822:	2b1d      	cmp	r3, #29
 8006824:	d001      	beq.n	800682a <__sflush_r+0xb2>
 8006826:	2b16      	cmp	r3, #22
 8006828:	d101      	bne.n	800682e <__sflush_r+0xb6>
 800682a:	602f      	str	r7, [r5, #0]
 800682c:	e7b1      	b.n	8006792 <__sflush_r+0x1a>
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	e7ad      	b.n	8006794 <__sflush_r+0x1c>
 8006838:	690f      	ldr	r7, [r1, #16]
 800683a:	2f00      	cmp	r7, #0
 800683c:	d0a9      	beq.n	8006792 <__sflush_r+0x1a>
 800683e:	0793      	lsls	r3, r2, #30
 8006840:	bf18      	it	ne
 8006842:	2300      	movne	r3, #0
 8006844:	680e      	ldr	r6, [r1, #0]
 8006846:	bf08      	it	eq
 8006848:	694b      	ldreq	r3, [r1, #20]
 800684a:	eba6 0807 	sub.w	r8, r6, r7
 800684e:	600f      	str	r7, [r1, #0]
 8006850:	608b      	str	r3, [r1, #8]
 8006852:	f1b8 0f00 	cmp.w	r8, #0
 8006856:	dd9c      	ble.n	8006792 <__sflush_r+0x1a>
 8006858:	4643      	mov	r3, r8
 800685a:	463a      	mov	r2, r7
 800685c:	6a21      	ldr	r1, [r4, #32]
 800685e:	4628      	mov	r0, r5
 8006860:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006862:	47b0      	blx	r6
 8006864:	2800      	cmp	r0, #0
 8006866:	dc06      	bgt.n	8006876 <__sflush_r+0xfe>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e78e      	b.n	8006794 <__sflush_r+0x1c>
 8006876:	4407      	add	r7, r0
 8006878:	eba8 0800 	sub.w	r8, r8, r0
 800687c:	e7e9      	b.n	8006852 <__sflush_r+0xda>
 800687e:	bf00      	nop
 8006880:	20400001 	.word	0x20400001

08006884 <_fflush_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b1db      	cbz	r3, 80068c6 <_fflush_r+0x42>
 800688e:	b118      	cbz	r0, 8006898 <_fflush_r+0x14>
 8006890:	6983      	ldr	r3, [r0, #24]
 8006892:	b90b      	cbnz	r3, 8006898 <_fflush_r+0x14>
 8006894:	f000 f860 	bl	8006958 <__sinit>
 8006898:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <_fflush_r+0x48>)
 800689a:	429c      	cmp	r4, r3
 800689c:	d109      	bne.n	80068b2 <_fflush_r+0x2e>
 800689e:	686c      	ldr	r4, [r5, #4]
 80068a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a4:	b17b      	cbz	r3, 80068c6 <_fflush_r+0x42>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ae:	f7ff bf63 	b.w	8006778 <__sflush_r>
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <_fflush_r+0x4c>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d101      	bne.n	80068bc <_fflush_r+0x38>
 80068b8:	68ac      	ldr	r4, [r5, #8]
 80068ba:	e7f1      	b.n	80068a0 <_fflush_r+0x1c>
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <_fflush_r+0x50>)
 80068be:	429c      	cmp	r4, r3
 80068c0:	bf08      	it	eq
 80068c2:	68ec      	ldreq	r4, [r5, #12]
 80068c4:	e7ec      	b.n	80068a0 <_fflush_r+0x1c>
 80068c6:	2000      	movs	r0, #0
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	080079f0 	.word	0x080079f0
 80068d0:	08007a10 	.word	0x08007a10
 80068d4:	080079d0 	.word	0x080079d0

080068d8 <std>:
 80068d8:	2300      	movs	r3, #0
 80068da:	b510      	push	{r4, lr}
 80068dc:	4604      	mov	r4, r0
 80068de:	e9c0 3300 	strd	r3, r3, [r0]
 80068e2:	6083      	str	r3, [r0, #8]
 80068e4:	8181      	strh	r1, [r0, #12]
 80068e6:	6643      	str	r3, [r0, #100]	; 0x64
 80068e8:	81c2      	strh	r2, [r0, #14]
 80068ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ee:	6183      	str	r3, [r0, #24]
 80068f0:	4619      	mov	r1, r3
 80068f2:	2208      	movs	r2, #8
 80068f4:	305c      	adds	r0, #92	; 0x5c
 80068f6:	f7fe fba1 	bl	800503c <memset>
 80068fa:	4b05      	ldr	r3, [pc, #20]	; (8006910 <std+0x38>)
 80068fc:	6224      	str	r4, [r4, #32]
 80068fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <std+0x3c>)
 8006902:	62a3      	str	r3, [r4, #40]	; 0x28
 8006904:	4b04      	ldr	r3, [pc, #16]	; (8006918 <std+0x40>)
 8006906:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006908:	4b04      	ldr	r3, [pc, #16]	; (800691c <std+0x44>)
 800690a:	6323      	str	r3, [r4, #48]	; 0x30
 800690c:	bd10      	pop	{r4, pc}
 800690e:	bf00      	nop
 8006910:	08007551 	.word	0x08007551
 8006914:	08007573 	.word	0x08007573
 8006918:	080075ab 	.word	0x080075ab
 800691c:	080075cf 	.word	0x080075cf

08006920 <_cleanup_r>:
 8006920:	4901      	ldr	r1, [pc, #4]	; (8006928 <_cleanup_r+0x8>)
 8006922:	f000 b885 	b.w	8006a30 <_fwalk_reent>
 8006926:	bf00      	nop
 8006928:	08006885 	.word	0x08006885

0800692c <__sfmoreglue>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	2568      	movs	r5, #104	; 0x68
 8006930:	1e4a      	subs	r2, r1, #1
 8006932:	4355      	muls	r5, r2
 8006934:	460e      	mov	r6, r1
 8006936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800693a:	f000 fc61 	bl	8007200 <_malloc_r>
 800693e:	4604      	mov	r4, r0
 8006940:	b140      	cbz	r0, 8006954 <__sfmoreglue+0x28>
 8006942:	2100      	movs	r1, #0
 8006944:	e9c0 1600 	strd	r1, r6, [r0]
 8006948:	300c      	adds	r0, #12
 800694a:	60a0      	str	r0, [r4, #8]
 800694c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006950:	f7fe fb74 	bl	800503c <memset>
 8006954:	4620      	mov	r0, r4
 8006956:	bd70      	pop	{r4, r5, r6, pc}

08006958 <__sinit>:
 8006958:	6983      	ldr	r3, [r0, #24]
 800695a:	b510      	push	{r4, lr}
 800695c:	4604      	mov	r4, r0
 800695e:	bb33      	cbnz	r3, 80069ae <__sinit+0x56>
 8006960:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006964:	6503      	str	r3, [r0, #80]	; 0x50
 8006966:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <__sinit+0x58>)
 8006968:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <__sinit+0x5c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6282      	str	r2, [r0, #40]	; 0x28
 800696e:	4298      	cmp	r0, r3
 8006970:	bf04      	itt	eq
 8006972:	2301      	moveq	r3, #1
 8006974:	6183      	streq	r3, [r0, #24]
 8006976:	f000 f81f 	bl	80069b8 <__sfp>
 800697a:	6060      	str	r0, [r4, #4]
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f81b 	bl	80069b8 <__sfp>
 8006982:	60a0      	str	r0, [r4, #8]
 8006984:	4620      	mov	r0, r4
 8006986:	f000 f817 	bl	80069b8 <__sfp>
 800698a:	2200      	movs	r2, #0
 800698c:	60e0      	str	r0, [r4, #12]
 800698e:	2104      	movs	r1, #4
 8006990:	6860      	ldr	r0, [r4, #4]
 8006992:	f7ff ffa1 	bl	80068d8 <std>
 8006996:	2201      	movs	r2, #1
 8006998:	2109      	movs	r1, #9
 800699a:	68a0      	ldr	r0, [r4, #8]
 800699c:	f7ff ff9c 	bl	80068d8 <std>
 80069a0:	2202      	movs	r2, #2
 80069a2:	2112      	movs	r1, #18
 80069a4:	68e0      	ldr	r0, [r4, #12]
 80069a6:	f7ff ff97 	bl	80068d8 <std>
 80069aa:	2301      	movs	r3, #1
 80069ac:	61a3      	str	r3, [r4, #24]
 80069ae:	bd10      	pop	{r4, pc}
 80069b0:	08007964 	.word	0x08007964
 80069b4:	08006921 	.word	0x08006921

080069b8 <__sfp>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <__sfp+0x70>)
 80069bc:	4607      	mov	r7, r0
 80069be:	681e      	ldr	r6, [r3, #0]
 80069c0:	69b3      	ldr	r3, [r6, #24]
 80069c2:	b913      	cbnz	r3, 80069ca <__sfp+0x12>
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff ffc7 	bl	8006958 <__sinit>
 80069ca:	3648      	adds	r6, #72	; 0x48
 80069cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	d503      	bpl.n	80069dc <__sfp+0x24>
 80069d4:	6833      	ldr	r3, [r6, #0]
 80069d6:	b133      	cbz	r3, 80069e6 <__sfp+0x2e>
 80069d8:	6836      	ldr	r6, [r6, #0]
 80069da:	e7f7      	b.n	80069cc <__sfp+0x14>
 80069dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069e0:	b16d      	cbz	r5, 80069fe <__sfp+0x46>
 80069e2:	3468      	adds	r4, #104	; 0x68
 80069e4:	e7f4      	b.n	80069d0 <__sfp+0x18>
 80069e6:	2104      	movs	r1, #4
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ff9f 	bl	800692c <__sfmoreglue>
 80069ee:	6030      	str	r0, [r6, #0]
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d1f1      	bne.n	80069d8 <__sfp+0x20>
 80069f4:	230c      	movs	r3, #12
 80069f6:	4604      	mov	r4, r0
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	4620      	mov	r0, r4
 80069fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fe:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <__sfp+0x74>)
 8006a00:	6665      	str	r5, [r4, #100]	; 0x64
 8006a02:	e9c4 5500 	strd	r5, r5, [r4]
 8006a06:	60a5      	str	r5, [r4, #8]
 8006a08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006a0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006a10:	2208      	movs	r2, #8
 8006a12:	4629      	mov	r1, r5
 8006a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a18:	f7fe fb10 	bl	800503c <memset>
 8006a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a24:	e7e9      	b.n	80069fa <__sfp+0x42>
 8006a26:	bf00      	nop
 8006a28:	08007964 	.word	0x08007964
 8006a2c:	ffff0001 	.word	0xffff0001

08006a30 <_fwalk_reent>:
 8006a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	2600      	movs	r6, #0
 8006a3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a3e:	b914      	cbnz	r4, 8006a46 <_fwalk_reent+0x16>
 8006a40:	4630      	mov	r0, r6
 8006a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006a4a:	3f01      	subs	r7, #1
 8006a4c:	d501      	bpl.n	8006a52 <_fwalk_reent+0x22>
 8006a4e:	6824      	ldr	r4, [r4, #0]
 8006a50:	e7f5      	b.n	8006a3e <_fwalk_reent+0xe>
 8006a52:	89ab      	ldrh	r3, [r5, #12]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d907      	bls.n	8006a68 <_fwalk_reent+0x38>
 8006a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	d003      	beq.n	8006a68 <_fwalk_reent+0x38>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4640      	mov	r0, r8
 8006a64:	47c8      	blx	r9
 8006a66:	4306      	orrs	r6, r0
 8006a68:	3568      	adds	r5, #104	; 0x68
 8006a6a:	e7ee      	b.n	8006a4a <_fwalk_reent+0x1a>

08006a6c <_localeconv_r>:
 8006a6c:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <_localeconv_r+0x14>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a18      	ldr	r0, [r3, #32]
 8006a72:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <_localeconv_r+0x18>)
 8006a74:	2800      	cmp	r0, #0
 8006a76:	bf08      	it	eq
 8006a78:	4618      	moveq	r0, r3
 8006a7a:	30f0      	adds	r0, #240	; 0xf0
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20000018 	.word	0x20000018
 8006a84:	2000007c 	.word	0x2000007c

08006a88 <__swhatbuf_r>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	460e      	mov	r6, r1
 8006a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a90:	b096      	sub	sp, #88	; 0x58
 8006a92:	2900      	cmp	r1, #0
 8006a94:	4614      	mov	r4, r2
 8006a96:	461d      	mov	r5, r3
 8006a98:	da07      	bge.n	8006aaa <__swhatbuf_r+0x22>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	89b3      	ldrh	r3, [r6, #12]
 8006aa0:	061a      	lsls	r2, r3, #24
 8006aa2:	d410      	bmi.n	8006ac6 <__swhatbuf_r+0x3e>
 8006aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aa8:	e00e      	b.n	8006ac8 <__swhatbuf_r+0x40>
 8006aaa:	466a      	mov	r2, sp
 8006aac:	f000 fe76 	bl	800779c <_fstat_r>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	dbf2      	blt.n	8006a9a <__swhatbuf_r+0x12>
 8006ab4:	9a01      	ldr	r2, [sp, #4]
 8006ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006abe:	425a      	negs	r2, r3
 8006ac0:	415a      	adcs	r2, r3
 8006ac2:	602a      	str	r2, [r5, #0]
 8006ac4:	e7ee      	b.n	8006aa4 <__swhatbuf_r+0x1c>
 8006ac6:	2340      	movs	r3, #64	; 0x40
 8006ac8:	2000      	movs	r0, #0
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	b016      	add	sp, #88	; 0x58
 8006ace:	bd70      	pop	{r4, r5, r6, pc}

08006ad0 <__smakebuf_r>:
 8006ad0:	898b      	ldrh	r3, [r1, #12]
 8006ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ad4:	079d      	lsls	r5, r3, #30
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460c      	mov	r4, r1
 8006ada:	d507      	bpl.n	8006aec <__smakebuf_r+0x1c>
 8006adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	6123      	str	r3, [r4, #16]
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	6163      	str	r3, [r4, #20]
 8006ae8:	b002      	add	sp, #8
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	ab01      	add	r3, sp, #4
 8006aee:	466a      	mov	r2, sp
 8006af0:	f7ff ffca 	bl	8006a88 <__swhatbuf_r>
 8006af4:	9900      	ldr	r1, [sp, #0]
 8006af6:	4605      	mov	r5, r0
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 fb81 	bl	8007200 <_malloc_r>
 8006afe:	b948      	cbnz	r0, 8006b14 <__smakebuf_r+0x44>
 8006b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b04:	059a      	lsls	r2, r3, #22
 8006b06:	d4ef      	bmi.n	8006ae8 <__smakebuf_r+0x18>
 8006b08:	f023 0303 	bic.w	r3, r3, #3
 8006b0c:	f043 0302 	orr.w	r3, r3, #2
 8006b10:	81a3      	strh	r3, [r4, #12]
 8006b12:	e7e3      	b.n	8006adc <__smakebuf_r+0xc>
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <__smakebuf_r+0x7c>)
 8006b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	6020      	str	r0, [r4, #0]
 8006b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	9b00      	ldr	r3, [sp, #0]
 8006b24:	6120      	str	r0, [r4, #16]
 8006b26:	6163      	str	r3, [r4, #20]
 8006b28:	9b01      	ldr	r3, [sp, #4]
 8006b2a:	b15b      	cbz	r3, 8006b44 <__smakebuf_r+0x74>
 8006b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 fe45 	bl	80077c0 <_isatty_r>
 8006b36:	b128      	cbz	r0, 8006b44 <__smakebuf_r+0x74>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	f043 0301 	orr.w	r3, r3, #1
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	431d      	orrs	r5, r3
 8006b48:	81a5      	strh	r5, [r4, #12]
 8006b4a:	e7cd      	b.n	8006ae8 <__smakebuf_r+0x18>
 8006b4c:	08006921 	.word	0x08006921

08006b50 <malloc>:
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <malloc+0xc>)
 8006b52:	4601      	mov	r1, r0
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f000 bb53 	b.w	8007200 <_malloc_r>
 8006b5a:	bf00      	nop
 8006b5c:	20000018 	.word	0x20000018

08006b60 <memchr>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	b2c9      	uxtb	r1, r1
 8006b64:	4402      	add	r2, r0
 8006b66:	4290      	cmp	r0, r2
 8006b68:	4603      	mov	r3, r0
 8006b6a:	d101      	bne.n	8006b70 <memchr+0x10>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	e003      	b.n	8006b78 <memchr+0x18>
 8006b70:	781c      	ldrb	r4, [r3, #0]
 8006b72:	3001      	adds	r0, #1
 8006b74:	428c      	cmp	r4, r1
 8006b76:	d1f6      	bne.n	8006b66 <memchr+0x6>
 8006b78:	4618      	mov	r0, r3
 8006b7a:	bd10      	pop	{r4, pc}

08006b7c <memcpy>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	1e43      	subs	r3, r0, #1
 8006b80:	440a      	add	r2, r1
 8006b82:	4291      	cmp	r1, r2
 8006b84:	d100      	bne.n	8006b88 <memcpy+0xc>
 8006b86:	bd10      	pop	{r4, pc}
 8006b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b90:	e7f7      	b.n	8006b82 <memcpy+0x6>

08006b92 <_Balloc>:
 8006b92:	b570      	push	{r4, r5, r6, lr}
 8006b94:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b96:	4604      	mov	r4, r0
 8006b98:	460e      	mov	r6, r1
 8006b9a:	b93d      	cbnz	r5, 8006bac <_Balloc+0x1a>
 8006b9c:	2010      	movs	r0, #16
 8006b9e:	f7ff ffd7 	bl	8006b50 <malloc>
 8006ba2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ba4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ba8:	6005      	str	r5, [r0, #0]
 8006baa:	60c5      	str	r5, [r0, #12]
 8006bac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006bae:	68eb      	ldr	r3, [r5, #12]
 8006bb0:	b183      	cbz	r3, 8006bd4 <_Balloc+0x42>
 8006bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006bba:	b9b8      	cbnz	r0, 8006bec <_Balloc+0x5a>
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	fa01 f506 	lsl.w	r5, r1, r6
 8006bc2:	1d6a      	adds	r2, r5, #5
 8006bc4:	0092      	lsls	r2, r2, #2
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f000 fabf 	bl	800714a <_calloc_r>
 8006bcc:	b160      	cbz	r0, 8006be8 <_Balloc+0x56>
 8006bce:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006bd2:	e00e      	b.n	8006bf2 <_Balloc+0x60>
 8006bd4:	2221      	movs	r2, #33	; 0x21
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fab6 	bl	800714a <_calloc_r>
 8006bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be0:	60e8      	str	r0, [r5, #12]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e4      	bne.n	8006bb2 <_Balloc+0x20>
 8006be8:	2000      	movs	r0, #0
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	6802      	ldr	r2, [r0, #0]
 8006bee:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bf8:	e7f7      	b.n	8006bea <_Balloc+0x58>

08006bfa <_Bfree>:
 8006bfa:	b570      	push	{r4, r5, r6, lr}
 8006bfc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006bfe:	4606      	mov	r6, r0
 8006c00:	460d      	mov	r5, r1
 8006c02:	b93c      	cbnz	r4, 8006c14 <_Bfree+0x1a>
 8006c04:	2010      	movs	r0, #16
 8006c06:	f7ff ffa3 	bl	8006b50 <malloc>
 8006c0a:	6270      	str	r0, [r6, #36]	; 0x24
 8006c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c10:	6004      	str	r4, [r0, #0]
 8006c12:	60c4      	str	r4, [r0, #12]
 8006c14:	b13d      	cbz	r5, 8006c26 <_Bfree+0x2c>
 8006c16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006c18:	686a      	ldr	r2, [r5, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c20:	6029      	str	r1, [r5, #0]
 8006c22:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006c26:	bd70      	pop	{r4, r5, r6, pc}

08006c28 <__multadd>:
 8006c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2c:	461f      	mov	r7, r3
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460c      	mov	r4, r1
 8006c32:	2300      	movs	r3, #0
 8006c34:	690d      	ldr	r5, [r1, #16]
 8006c36:	f101 0c14 	add.w	ip, r1, #20
 8006c3a:	f8dc 0000 	ldr.w	r0, [ip]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	b281      	uxth	r1, r0
 8006c42:	fb02 7101 	mla	r1, r2, r1, r7
 8006c46:	0c00      	lsrs	r0, r0, #16
 8006c48:	0c0f      	lsrs	r7, r1, #16
 8006c4a:	fb02 7000 	mla	r0, r2, r0, r7
 8006c4e:	b289      	uxth	r1, r1
 8006c50:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006c54:	429d      	cmp	r5, r3
 8006c56:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006c5a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c5e:	dcec      	bgt.n	8006c3a <__multadd+0x12>
 8006c60:	b1d7      	cbz	r7, 8006c98 <__multadd+0x70>
 8006c62:	68a3      	ldr	r3, [r4, #8]
 8006c64:	42ab      	cmp	r3, r5
 8006c66:	dc12      	bgt.n	8006c8e <__multadd+0x66>
 8006c68:	6861      	ldr	r1, [r4, #4]
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	3101      	adds	r1, #1
 8006c6e:	f7ff ff90 	bl	8006b92 <_Balloc>
 8006c72:	4680      	mov	r8, r0
 8006c74:	6922      	ldr	r2, [r4, #16]
 8006c76:	f104 010c 	add.w	r1, r4, #12
 8006c7a:	3202      	adds	r2, #2
 8006c7c:	0092      	lsls	r2, r2, #2
 8006c7e:	300c      	adds	r0, #12
 8006c80:	f7ff ff7c 	bl	8006b7c <memcpy>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7ff ffb7 	bl	8006bfa <_Bfree>
 8006c8c:	4644      	mov	r4, r8
 8006c8e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c92:	3501      	adds	r5, #1
 8006c94:	615f      	str	r7, [r3, #20]
 8006c96:	6125      	str	r5, [r4, #16]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c9e <__hi0bits>:
 8006c9e:	0c02      	lsrs	r2, r0, #16
 8006ca0:	0412      	lsls	r2, r2, #16
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	b9b2      	cbnz	r2, 8006cd4 <__hi0bits+0x36>
 8006ca6:	0403      	lsls	r3, r0, #16
 8006ca8:	2010      	movs	r0, #16
 8006caa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006cae:	bf04      	itt	eq
 8006cb0:	021b      	lsleq	r3, r3, #8
 8006cb2:	3008      	addeq	r0, #8
 8006cb4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006cb8:	bf04      	itt	eq
 8006cba:	011b      	lsleq	r3, r3, #4
 8006cbc:	3004      	addeq	r0, #4
 8006cbe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cc2:	bf04      	itt	eq
 8006cc4:	009b      	lsleq	r3, r3, #2
 8006cc6:	3002      	addeq	r0, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	db06      	blt.n	8006cda <__hi0bits+0x3c>
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	d503      	bpl.n	8006cd8 <__hi0bits+0x3a>
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	4770      	bx	lr
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e7e8      	b.n	8006caa <__hi0bits+0xc>
 8006cd8:	2020      	movs	r0, #32
 8006cda:	4770      	bx	lr

08006cdc <__lo0bits>:
 8006cdc:	6803      	ldr	r3, [r0, #0]
 8006cde:	4601      	mov	r1, r0
 8006ce0:	f013 0207 	ands.w	r2, r3, #7
 8006ce4:	d00b      	beq.n	8006cfe <__lo0bits+0x22>
 8006ce6:	07da      	lsls	r2, r3, #31
 8006ce8:	d423      	bmi.n	8006d32 <__lo0bits+0x56>
 8006cea:	0798      	lsls	r0, r3, #30
 8006cec:	bf49      	itett	mi
 8006cee:	085b      	lsrmi	r3, r3, #1
 8006cf0:	089b      	lsrpl	r3, r3, #2
 8006cf2:	2001      	movmi	r0, #1
 8006cf4:	600b      	strmi	r3, [r1, #0]
 8006cf6:	bf5c      	itt	pl
 8006cf8:	600b      	strpl	r3, [r1, #0]
 8006cfa:	2002      	movpl	r0, #2
 8006cfc:	4770      	bx	lr
 8006cfe:	b298      	uxth	r0, r3
 8006d00:	b9a8      	cbnz	r0, 8006d2e <__lo0bits+0x52>
 8006d02:	2010      	movs	r0, #16
 8006d04:	0c1b      	lsrs	r3, r3, #16
 8006d06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d0a:	bf04      	itt	eq
 8006d0c:	0a1b      	lsreq	r3, r3, #8
 8006d0e:	3008      	addeq	r0, #8
 8006d10:	071a      	lsls	r2, r3, #28
 8006d12:	bf04      	itt	eq
 8006d14:	091b      	lsreq	r3, r3, #4
 8006d16:	3004      	addeq	r0, #4
 8006d18:	079a      	lsls	r2, r3, #30
 8006d1a:	bf04      	itt	eq
 8006d1c:	089b      	lsreq	r3, r3, #2
 8006d1e:	3002      	addeq	r0, #2
 8006d20:	07da      	lsls	r2, r3, #31
 8006d22:	d402      	bmi.n	8006d2a <__lo0bits+0x4e>
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	d006      	beq.n	8006d36 <__lo0bits+0x5a>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	600b      	str	r3, [r1, #0]
 8006d2c:	4770      	bx	lr
 8006d2e:	4610      	mov	r0, r2
 8006d30:	e7e9      	b.n	8006d06 <__lo0bits+0x2a>
 8006d32:	2000      	movs	r0, #0
 8006d34:	4770      	bx	lr
 8006d36:	2020      	movs	r0, #32
 8006d38:	4770      	bx	lr

08006d3a <__i2b>:
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	2101      	movs	r1, #1
 8006d40:	f7ff ff27 	bl	8006b92 <_Balloc>
 8006d44:	2201      	movs	r2, #1
 8006d46:	6144      	str	r4, [r0, #20]
 8006d48:	6102      	str	r2, [r0, #16]
 8006d4a:	bd10      	pop	{r4, pc}

08006d4c <__multiply>:
 8006d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d50:	4614      	mov	r4, r2
 8006d52:	690a      	ldr	r2, [r1, #16]
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	4688      	mov	r8, r1
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	bfbe      	ittt	lt
 8006d5c:	460b      	movlt	r3, r1
 8006d5e:	46a0      	movlt	r8, r4
 8006d60:	461c      	movlt	r4, r3
 8006d62:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d72:	eb07 0609 	add.w	r6, r7, r9
 8006d76:	42b3      	cmp	r3, r6
 8006d78:	bfb8      	it	lt
 8006d7a:	3101      	addlt	r1, #1
 8006d7c:	f7ff ff09 	bl	8006b92 <_Balloc>
 8006d80:	f100 0514 	add.w	r5, r0, #20
 8006d84:	462b      	mov	r3, r5
 8006d86:	2200      	movs	r2, #0
 8006d88:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006d8c:	4573      	cmp	r3, lr
 8006d8e:	d316      	bcc.n	8006dbe <__multiply+0x72>
 8006d90:	f104 0214 	add.w	r2, r4, #20
 8006d94:	f108 0114 	add.w	r1, r8, #20
 8006d98:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006d9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	9b00      	ldr	r3, [sp, #0]
 8006da4:	9201      	str	r2, [sp, #4]
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d80c      	bhi.n	8006dc4 <__multiply+0x78>
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	dd03      	ble.n	8006db6 <__multiply+0x6a>
 8006dae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d05d      	beq.n	8006e72 <__multiply+0x126>
 8006db6:	6106      	str	r6, [r0, #16]
 8006db8:	b003      	add	sp, #12
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbe:	f843 2b04 	str.w	r2, [r3], #4
 8006dc2:	e7e3      	b.n	8006d8c <__multiply+0x40>
 8006dc4:	f8b2 b000 	ldrh.w	fp, [r2]
 8006dc8:	f1bb 0f00 	cmp.w	fp, #0
 8006dcc:	d023      	beq.n	8006e16 <__multiply+0xca>
 8006dce:	4689      	mov	r9, r1
 8006dd0:	46ac      	mov	ip, r5
 8006dd2:	f04f 0800 	mov.w	r8, #0
 8006dd6:	f859 4b04 	ldr.w	r4, [r9], #4
 8006dda:	f8dc a000 	ldr.w	sl, [ip]
 8006dde:	b2a3      	uxth	r3, r4
 8006de0:	fa1f fa8a 	uxth.w	sl, sl
 8006de4:	fb0b a303 	mla	r3, fp, r3, sl
 8006de8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006dec:	f8dc 4000 	ldr.w	r4, [ip]
 8006df0:	4443      	add	r3, r8
 8006df2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006df6:	fb0b 840a 	mla	r4, fp, sl, r8
 8006dfa:	46e2      	mov	sl, ip
 8006dfc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e06:	454f      	cmp	r7, r9
 8006e08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006e0c:	f84a 3b04 	str.w	r3, [sl], #4
 8006e10:	d82b      	bhi.n	8006e6a <__multiply+0x11e>
 8006e12:	f8cc 8004 	str.w	r8, [ip, #4]
 8006e16:	9b01      	ldr	r3, [sp, #4]
 8006e18:	3204      	adds	r2, #4
 8006e1a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006e1e:	f1ba 0f00 	cmp.w	sl, #0
 8006e22:	d020      	beq.n	8006e66 <__multiply+0x11a>
 8006e24:	4689      	mov	r9, r1
 8006e26:	46a8      	mov	r8, r5
 8006e28:	f04f 0b00 	mov.w	fp, #0
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006e32:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	fb0a 440c 	mla	r4, sl, ip, r4
 8006e3c:	46c4      	mov	ip, r8
 8006e3e:	445c      	add	r4, fp
 8006e40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006e44:	f84c 3b04 	str.w	r3, [ip], #4
 8006e48:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e4c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006e50:	0c1b      	lsrs	r3, r3, #16
 8006e52:	fb0a b303 	mla	r3, sl, r3, fp
 8006e56:	454f      	cmp	r7, r9
 8006e58:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006e5c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006e60:	d805      	bhi.n	8006e6e <__multiply+0x122>
 8006e62:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e66:	3504      	adds	r5, #4
 8006e68:	e79b      	b.n	8006da2 <__multiply+0x56>
 8006e6a:	46d4      	mov	ip, sl
 8006e6c:	e7b3      	b.n	8006dd6 <__multiply+0x8a>
 8006e6e:	46e0      	mov	r8, ip
 8006e70:	e7dd      	b.n	8006e2e <__multiply+0xe2>
 8006e72:	3e01      	subs	r6, #1
 8006e74:	e799      	b.n	8006daa <__multiply+0x5e>
	...

08006e78 <__pow5mult>:
 8006e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e7c:	4615      	mov	r5, r2
 8006e7e:	f012 0203 	ands.w	r2, r2, #3
 8006e82:	4606      	mov	r6, r0
 8006e84:	460f      	mov	r7, r1
 8006e86:	d007      	beq.n	8006e98 <__pow5mult+0x20>
 8006e88:	4c21      	ldr	r4, [pc, #132]	; (8006f10 <__pow5mult+0x98>)
 8006e8a:	3a01      	subs	r2, #1
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e92:	f7ff fec9 	bl	8006c28 <__multadd>
 8006e96:	4607      	mov	r7, r0
 8006e98:	10ad      	asrs	r5, r5, #2
 8006e9a:	d035      	beq.n	8006f08 <__pow5mult+0x90>
 8006e9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e9e:	b93c      	cbnz	r4, 8006eb0 <__pow5mult+0x38>
 8006ea0:	2010      	movs	r0, #16
 8006ea2:	f7ff fe55 	bl	8006b50 <malloc>
 8006ea6:	6270      	str	r0, [r6, #36]	; 0x24
 8006ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006eac:	6004      	str	r4, [r0, #0]
 8006eae:	60c4      	str	r4, [r0, #12]
 8006eb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006eb8:	b94c      	cbnz	r4, 8006ece <__pow5mult+0x56>
 8006eba:	f240 2171 	movw	r1, #625	; 0x271
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f7ff ff3b 	bl	8006d3a <__i2b>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ecc:	6003      	str	r3, [r0, #0]
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	07eb      	lsls	r3, r5, #31
 8006ed4:	d50a      	bpl.n	8006eec <__pow5mult+0x74>
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7ff ff36 	bl	8006d4c <__multiply>
 8006ee0:	4681      	mov	r9, r0
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7ff fe88 	bl	8006bfa <_Bfree>
 8006eea:	464f      	mov	r7, r9
 8006eec:	106d      	asrs	r5, r5, #1
 8006eee:	d00b      	beq.n	8006f08 <__pow5mult+0x90>
 8006ef0:	6820      	ldr	r0, [r4, #0]
 8006ef2:	b938      	cbnz	r0, 8006f04 <__pow5mult+0x8c>
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7ff ff27 	bl	8006d4c <__multiply>
 8006efe:	6020      	str	r0, [r4, #0]
 8006f00:	f8c0 8000 	str.w	r8, [r0]
 8006f04:	4604      	mov	r4, r0
 8006f06:	e7e4      	b.n	8006ed2 <__pow5mult+0x5a>
 8006f08:	4638      	mov	r0, r7
 8006f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0e:	bf00      	nop
 8006f10:	08007b20 	.word	0x08007b20

08006f14 <__lshift>:
 8006f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	460c      	mov	r4, r1
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	4616      	mov	r6, r2
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f24:	eb0a 0903 	add.w	r9, sl, r3
 8006f28:	6849      	ldr	r1, [r1, #4]
 8006f2a:	68a3      	ldr	r3, [r4, #8]
 8006f2c:	f109 0501 	add.w	r5, r9, #1
 8006f30:	42ab      	cmp	r3, r5
 8006f32:	db32      	blt.n	8006f9a <__lshift+0x86>
 8006f34:	4638      	mov	r0, r7
 8006f36:	f7ff fe2c 	bl	8006b92 <_Balloc>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f100 0114 	add.w	r1, r0, #20
 8006f44:	4553      	cmp	r3, sl
 8006f46:	db2b      	blt.n	8006fa0 <__lshift+0x8c>
 8006f48:	6920      	ldr	r0, [r4, #16]
 8006f4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f4e:	f104 0314 	add.w	r3, r4, #20
 8006f52:	f016 021f 	ands.w	r2, r6, #31
 8006f56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f5e:	d025      	beq.n	8006fac <__lshift+0x98>
 8006f60:	2000      	movs	r0, #0
 8006f62:	f1c2 0e20 	rsb	lr, r2, #32
 8006f66:	468a      	mov	sl, r1
 8006f68:	681e      	ldr	r6, [r3, #0]
 8006f6a:	4096      	lsls	r6, r2
 8006f6c:	4330      	orrs	r0, r6
 8006f6e:	f84a 0b04 	str.w	r0, [sl], #4
 8006f72:	f853 0b04 	ldr.w	r0, [r3], #4
 8006f76:	459c      	cmp	ip, r3
 8006f78:	fa20 f00e 	lsr.w	r0, r0, lr
 8006f7c:	d814      	bhi.n	8006fa8 <__lshift+0x94>
 8006f7e:	6048      	str	r0, [r1, #4]
 8006f80:	b108      	cbz	r0, 8006f86 <__lshift+0x72>
 8006f82:	f109 0502 	add.w	r5, r9, #2
 8006f86:	3d01      	subs	r5, #1
 8006f88:	4638      	mov	r0, r7
 8006f8a:	f8c8 5010 	str.w	r5, [r8, #16]
 8006f8e:	4621      	mov	r1, r4
 8006f90:	f7ff fe33 	bl	8006bfa <_Bfree>
 8006f94:	4640      	mov	r0, r8
 8006f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9a:	3101      	adds	r1, #1
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	e7c7      	b.n	8006f30 <__lshift+0x1c>
 8006fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	e7cd      	b.n	8006f44 <__lshift+0x30>
 8006fa8:	4651      	mov	r1, sl
 8006faa:	e7dc      	b.n	8006f66 <__lshift+0x52>
 8006fac:	3904      	subs	r1, #4
 8006fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb2:	459c      	cmp	ip, r3
 8006fb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fb8:	d8f9      	bhi.n	8006fae <__lshift+0x9a>
 8006fba:	e7e4      	b.n	8006f86 <__lshift+0x72>

08006fbc <__mcmp>:
 8006fbc:	6903      	ldr	r3, [r0, #16]
 8006fbe:	690a      	ldr	r2, [r1, #16]
 8006fc0:	b530      	push	{r4, r5, lr}
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	d10c      	bne.n	8006fe0 <__mcmp+0x24>
 8006fc6:	0092      	lsls	r2, r2, #2
 8006fc8:	3014      	adds	r0, #20
 8006fca:	3114      	adds	r1, #20
 8006fcc:	1884      	adds	r4, r0, r2
 8006fce:	4411      	add	r1, r2
 8006fd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006fd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006fd8:	4295      	cmp	r5, r2
 8006fda:	d003      	beq.n	8006fe4 <__mcmp+0x28>
 8006fdc:	d305      	bcc.n	8006fea <__mcmp+0x2e>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	bd30      	pop	{r4, r5, pc}
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d3f3      	bcc.n	8006fd0 <__mcmp+0x14>
 8006fe8:	e7fa      	b.n	8006fe0 <__mcmp+0x24>
 8006fea:	f04f 33ff 	mov.w	r3, #4294967295
 8006fee:	e7f7      	b.n	8006fe0 <__mcmp+0x24>

08006ff0 <__mdiff>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	460d      	mov	r5, r1
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	f7ff ffdd 	bl	8006fbc <__mcmp>
 8007002:	1e06      	subs	r6, r0, #0
 8007004:	d108      	bne.n	8007018 <__mdiff+0x28>
 8007006:	4631      	mov	r1, r6
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff fdc2 	bl	8006b92 <_Balloc>
 800700e:	2301      	movs	r3, #1
 8007010:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007018:	bfa4      	itt	ge
 800701a:	4623      	movge	r3, r4
 800701c:	462c      	movge	r4, r5
 800701e:	4638      	mov	r0, r7
 8007020:	6861      	ldr	r1, [r4, #4]
 8007022:	bfa6      	itte	ge
 8007024:	461d      	movge	r5, r3
 8007026:	2600      	movge	r6, #0
 8007028:	2601      	movlt	r6, #1
 800702a:	f7ff fdb2 	bl	8006b92 <_Balloc>
 800702e:	f04f 0e00 	mov.w	lr, #0
 8007032:	60c6      	str	r6, [r0, #12]
 8007034:	692b      	ldr	r3, [r5, #16]
 8007036:	6926      	ldr	r6, [r4, #16]
 8007038:	f104 0214 	add.w	r2, r4, #20
 800703c:	f105 0914 	add.w	r9, r5, #20
 8007040:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007044:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007048:	f100 0114 	add.w	r1, r0, #20
 800704c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007050:	f859 5b04 	ldr.w	r5, [r9], #4
 8007054:	fa1f f38a 	uxth.w	r3, sl
 8007058:	4473      	add	r3, lr
 800705a:	b2ac      	uxth	r4, r5
 800705c:	1b1b      	subs	r3, r3, r4
 800705e:	0c2c      	lsrs	r4, r5, #16
 8007060:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007064:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007068:	b29b      	uxth	r3, r3
 800706a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800706e:	45c8      	cmp	r8, r9
 8007070:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007074:	4694      	mov	ip, r2
 8007076:	f841 4b04 	str.w	r4, [r1], #4
 800707a:	d8e7      	bhi.n	800704c <__mdiff+0x5c>
 800707c:	45bc      	cmp	ip, r7
 800707e:	d304      	bcc.n	800708a <__mdiff+0x9a>
 8007080:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007084:	b183      	cbz	r3, 80070a8 <__mdiff+0xb8>
 8007086:	6106      	str	r6, [r0, #16]
 8007088:	e7c4      	b.n	8007014 <__mdiff+0x24>
 800708a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800708e:	b2a2      	uxth	r2, r4
 8007090:	4472      	add	r2, lr
 8007092:	1413      	asrs	r3, r2, #16
 8007094:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007098:	b292      	uxth	r2, r2
 800709a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800709e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80070a2:	f841 2b04 	str.w	r2, [r1], #4
 80070a6:	e7e9      	b.n	800707c <__mdiff+0x8c>
 80070a8:	3e01      	subs	r6, #1
 80070aa:	e7e9      	b.n	8007080 <__mdiff+0x90>

080070ac <__d2b>:
 80070ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80070b0:	461c      	mov	r4, r3
 80070b2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80070b6:	2101      	movs	r1, #1
 80070b8:	4690      	mov	r8, r2
 80070ba:	f7ff fd6a 	bl	8006b92 <_Balloc>
 80070be:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80070c2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80070c6:	4607      	mov	r7, r0
 80070c8:	bb34      	cbnz	r4, 8007118 <__d2b+0x6c>
 80070ca:	9201      	str	r2, [sp, #4]
 80070cc:	f1b8 0200 	subs.w	r2, r8, #0
 80070d0:	d027      	beq.n	8007122 <__d2b+0x76>
 80070d2:	a802      	add	r0, sp, #8
 80070d4:	f840 2d08 	str.w	r2, [r0, #-8]!
 80070d8:	f7ff fe00 	bl	8006cdc <__lo0bits>
 80070dc:	9900      	ldr	r1, [sp, #0]
 80070de:	b1f0      	cbz	r0, 800711e <__d2b+0x72>
 80070e0:	9a01      	ldr	r2, [sp, #4]
 80070e2:	f1c0 0320 	rsb	r3, r0, #32
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	430b      	orrs	r3, r1
 80070ec:	40c2      	lsrs	r2, r0
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	9201      	str	r2, [sp, #4]
 80070f2:	9b01      	ldr	r3, [sp, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	bf14      	ite	ne
 80070f8:	2102      	movne	r1, #2
 80070fa:	2101      	moveq	r1, #1
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	6139      	str	r1, [r7, #16]
 8007100:	b1c4      	cbz	r4, 8007134 <__d2b+0x88>
 8007102:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007106:	4404      	add	r4, r0
 8007108:	6034      	str	r4, [r6, #0]
 800710a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800710e:	6028      	str	r0, [r5, #0]
 8007110:	4638      	mov	r0, r7
 8007112:	b002      	add	sp, #8
 8007114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007118:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800711c:	e7d5      	b.n	80070ca <__d2b+0x1e>
 800711e:	6179      	str	r1, [r7, #20]
 8007120:	e7e7      	b.n	80070f2 <__d2b+0x46>
 8007122:	a801      	add	r0, sp, #4
 8007124:	f7ff fdda 	bl	8006cdc <__lo0bits>
 8007128:	2101      	movs	r1, #1
 800712a:	9b01      	ldr	r3, [sp, #4]
 800712c:	6139      	str	r1, [r7, #16]
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	3020      	adds	r0, #32
 8007132:	e7e5      	b.n	8007100 <__d2b+0x54>
 8007134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007138:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800713c:	6030      	str	r0, [r6, #0]
 800713e:	6918      	ldr	r0, [r3, #16]
 8007140:	f7ff fdad 	bl	8006c9e <__hi0bits>
 8007144:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007148:	e7e1      	b.n	800710e <__d2b+0x62>

0800714a <_calloc_r>:
 800714a:	b538      	push	{r3, r4, r5, lr}
 800714c:	fb02 f401 	mul.w	r4, r2, r1
 8007150:	4621      	mov	r1, r4
 8007152:	f000 f855 	bl	8007200 <_malloc_r>
 8007156:	4605      	mov	r5, r0
 8007158:	b118      	cbz	r0, 8007162 <_calloc_r+0x18>
 800715a:	4622      	mov	r2, r4
 800715c:	2100      	movs	r1, #0
 800715e:	f7fd ff6d 	bl	800503c <memset>
 8007162:	4628      	mov	r0, r5
 8007164:	bd38      	pop	{r3, r4, r5, pc}
	...

08007168 <_free_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4605      	mov	r5, r0
 800716c:	2900      	cmp	r1, #0
 800716e:	d043      	beq.n	80071f8 <_free_r+0x90>
 8007170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007174:	1f0c      	subs	r4, r1, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfb8      	it	lt
 800717a:	18e4      	addlt	r4, r4, r3
 800717c:	f000 fb54 	bl	8007828 <__malloc_lock>
 8007180:	4a1e      	ldr	r2, [pc, #120]	; (80071fc <_free_r+0x94>)
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	4610      	mov	r0, r2
 8007186:	b933      	cbnz	r3, 8007196 <_free_r+0x2e>
 8007188:	6063      	str	r3, [r4, #4]
 800718a:	6014      	str	r4, [r2, #0]
 800718c:	4628      	mov	r0, r5
 800718e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007192:	f000 bb4a 	b.w	800782a <__malloc_unlock>
 8007196:	42a3      	cmp	r3, r4
 8007198:	d90b      	bls.n	80071b2 <_free_r+0x4a>
 800719a:	6821      	ldr	r1, [r4, #0]
 800719c:	1862      	adds	r2, r4, r1
 800719e:	4293      	cmp	r3, r2
 80071a0:	bf01      	itttt	eq
 80071a2:	681a      	ldreq	r2, [r3, #0]
 80071a4:	685b      	ldreq	r3, [r3, #4]
 80071a6:	1852      	addeq	r2, r2, r1
 80071a8:	6022      	streq	r2, [r4, #0]
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	6004      	str	r4, [r0, #0]
 80071ae:	e7ed      	b.n	800718c <_free_r+0x24>
 80071b0:	4613      	mov	r3, r2
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	b10a      	cbz	r2, 80071ba <_free_r+0x52>
 80071b6:	42a2      	cmp	r2, r4
 80071b8:	d9fa      	bls.n	80071b0 <_free_r+0x48>
 80071ba:	6819      	ldr	r1, [r3, #0]
 80071bc:	1858      	adds	r0, r3, r1
 80071be:	42a0      	cmp	r0, r4
 80071c0:	d10b      	bne.n	80071da <_free_r+0x72>
 80071c2:	6820      	ldr	r0, [r4, #0]
 80071c4:	4401      	add	r1, r0
 80071c6:	1858      	adds	r0, r3, r1
 80071c8:	4282      	cmp	r2, r0
 80071ca:	6019      	str	r1, [r3, #0]
 80071cc:	d1de      	bne.n	800718c <_free_r+0x24>
 80071ce:	6810      	ldr	r0, [r2, #0]
 80071d0:	6852      	ldr	r2, [r2, #4]
 80071d2:	4401      	add	r1, r0
 80071d4:	6019      	str	r1, [r3, #0]
 80071d6:	605a      	str	r2, [r3, #4]
 80071d8:	e7d8      	b.n	800718c <_free_r+0x24>
 80071da:	d902      	bls.n	80071e2 <_free_r+0x7a>
 80071dc:	230c      	movs	r3, #12
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	e7d4      	b.n	800718c <_free_r+0x24>
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	1821      	adds	r1, r4, r0
 80071e6:	428a      	cmp	r2, r1
 80071e8:	bf01      	itttt	eq
 80071ea:	6811      	ldreq	r1, [r2, #0]
 80071ec:	6852      	ldreq	r2, [r2, #4]
 80071ee:	1809      	addeq	r1, r1, r0
 80071f0:	6021      	streq	r1, [r4, #0]
 80071f2:	6062      	str	r2, [r4, #4]
 80071f4:	605c      	str	r4, [r3, #4]
 80071f6:	e7c9      	b.n	800718c <_free_r+0x24>
 80071f8:	bd38      	pop	{r3, r4, r5, pc}
 80071fa:	bf00      	nop
 80071fc:	20000218 	.word	0x20000218

08007200 <_malloc_r>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	1ccd      	adds	r5, r1, #3
 8007204:	f025 0503 	bic.w	r5, r5, #3
 8007208:	3508      	adds	r5, #8
 800720a:	2d0c      	cmp	r5, #12
 800720c:	bf38      	it	cc
 800720e:	250c      	movcc	r5, #12
 8007210:	2d00      	cmp	r5, #0
 8007212:	4606      	mov	r6, r0
 8007214:	db01      	blt.n	800721a <_malloc_r+0x1a>
 8007216:	42a9      	cmp	r1, r5
 8007218:	d903      	bls.n	8007222 <_malloc_r+0x22>
 800721a:	230c      	movs	r3, #12
 800721c:	6033      	str	r3, [r6, #0]
 800721e:	2000      	movs	r0, #0
 8007220:	bd70      	pop	{r4, r5, r6, pc}
 8007222:	f000 fb01 	bl	8007828 <__malloc_lock>
 8007226:	4a21      	ldr	r2, [pc, #132]	; (80072ac <_malloc_r+0xac>)
 8007228:	6814      	ldr	r4, [r2, #0]
 800722a:	4621      	mov	r1, r4
 800722c:	b991      	cbnz	r1, 8007254 <_malloc_r+0x54>
 800722e:	4c20      	ldr	r4, [pc, #128]	; (80072b0 <_malloc_r+0xb0>)
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	b91b      	cbnz	r3, 800723c <_malloc_r+0x3c>
 8007234:	4630      	mov	r0, r6
 8007236:	f000 f97b 	bl	8007530 <_sbrk_r>
 800723a:	6020      	str	r0, [r4, #0]
 800723c:	4629      	mov	r1, r5
 800723e:	4630      	mov	r0, r6
 8007240:	f000 f976 	bl	8007530 <_sbrk_r>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d124      	bne.n	8007292 <_malloc_r+0x92>
 8007248:	230c      	movs	r3, #12
 800724a:	4630      	mov	r0, r6
 800724c:	6033      	str	r3, [r6, #0]
 800724e:	f000 faec 	bl	800782a <__malloc_unlock>
 8007252:	e7e4      	b.n	800721e <_malloc_r+0x1e>
 8007254:	680b      	ldr	r3, [r1, #0]
 8007256:	1b5b      	subs	r3, r3, r5
 8007258:	d418      	bmi.n	800728c <_malloc_r+0x8c>
 800725a:	2b0b      	cmp	r3, #11
 800725c:	d90f      	bls.n	800727e <_malloc_r+0x7e>
 800725e:	600b      	str	r3, [r1, #0]
 8007260:	18cc      	adds	r4, r1, r3
 8007262:	50cd      	str	r5, [r1, r3]
 8007264:	4630      	mov	r0, r6
 8007266:	f000 fae0 	bl	800782a <__malloc_unlock>
 800726a:	f104 000b 	add.w	r0, r4, #11
 800726e:	1d23      	adds	r3, r4, #4
 8007270:	f020 0007 	bic.w	r0, r0, #7
 8007274:	1ac3      	subs	r3, r0, r3
 8007276:	d0d3      	beq.n	8007220 <_malloc_r+0x20>
 8007278:	425a      	negs	r2, r3
 800727a:	50e2      	str	r2, [r4, r3]
 800727c:	e7d0      	b.n	8007220 <_malloc_r+0x20>
 800727e:	684b      	ldr	r3, [r1, #4]
 8007280:	428c      	cmp	r4, r1
 8007282:	bf16      	itet	ne
 8007284:	6063      	strne	r3, [r4, #4]
 8007286:	6013      	streq	r3, [r2, #0]
 8007288:	460c      	movne	r4, r1
 800728a:	e7eb      	b.n	8007264 <_malloc_r+0x64>
 800728c:	460c      	mov	r4, r1
 800728e:	6849      	ldr	r1, [r1, #4]
 8007290:	e7cc      	b.n	800722c <_malloc_r+0x2c>
 8007292:	1cc4      	adds	r4, r0, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	42a0      	cmp	r0, r4
 800729a:	d005      	beq.n	80072a8 <_malloc_r+0xa8>
 800729c:	1a21      	subs	r1, r4, r0
 800729e:	4630      	mov	r0, r6
 80072a0:	f000 f946 	bl	8007530 <_sbrk_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d0cf      	beq.n	8007248 <_malloc_r+0x48>
 80072a8:	6025      	str	r5, [r4, #0]
 80072aa:	e7db      	b.n	8007264 <_malloc_r+0x64>
 80072ac:	20000218 	.word	0x20000218
 80072b0:	2000021c 	.word	0x2000021c

080072b4 <__sfputc_r>:
 80072b4:	6893      	ldr	r3, [r2, #8]
 80072b6:	b410      	push	{r4}
 80072b8:	3b01      	subs	r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	6093      	str	r3, [r2, #8]
 80072be:	da07      	bge.n	80072d0 <__sfputc_r+0x1c>
 80072c0:	6994      	ldr	r4, [r2, #24]
 80072c2:	42a3      	cmp	r3, r4
 80072c4:	db01      	blt.n	80072ca <__sfputc_r+0x16>
 80072c6:	290a      	cmp	r1, #10
 80072c8:	d102      	bne.n	80072d0 <__sfputc_r+0x1c>
 80072ca:	bc10      	pop	{r4}
 80072cc:	f000 b984 	b.w	80075d8 <__swbuf_r>
 80072d0:	6813      	ldr	r3, [r2, #0]
 80072d2:	1c58      	adds	r0, r3, #1
 80072d4:	6010      	str	r0, [r2, #0]
 80072d6:	7019      	strb	r1, [r3, #0]
 80072d8:	4608      	mov	r0, r1
 80072da:	bc10      	pop	{r4}
 80072dc:	4770      	bx	lr

080072de <__sfputs_r>:
 80072de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e0:	4606      	mov	r6, r0
 80072e2:	460f      	mov	r7, r1
 80072e4:	4614      	mov	r4, r2
 80072e6:	18d5      	adds	r5, r2, r3
 80072e8:	42ac      	cmp	r4, r5
 80072ea:	d101      	bne.n	80072f0 <__sfputs_r+0x12>
 80072ec:	2000      	movs	r0, #0
 80072ee:	e007      	b.n	8007300 <__sfputs_r+0x22>
 80072f0:	463a      	mov	r2, r7
 80072f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f6:	4630      	mov	r0, r6
 80072f8:	f7ff ffdc 	bl	80072b4 <__sfputc_r>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d1f3      	bne.n	80072e8 <__sfputs_r+0xa>
 8007300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007304 <_vfiprintf_r>:
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	460c      	mov	r4, r1
 800730a:	b09d      	sub	sp, #116	; 0x74
 800730c:	4617      	mov	r7, r2
 800730e:	461d      	mov	r5, r3
 8007310:	4606      	mov	r6, r0
 8007312:	b118      	cbz	r0, 800731c <_vfiprintf_r+0x18>
 8007314:	6983      	ldr	r3, [r0, #24]
 8007316:	b90b      	cbnz	r3, 800731c <_vfiprintf_r+0x18>
 8007318:	f7ff fb1e 	bl	8006958 <__sinit>
 800731c:	4b7c      	ldr	r3, [pc, #496]	; (8007510 <_vfiprintf_r+0x20c>)
 800731e:	429c      	cmp	r4, r3
 8007320:	d158      	bne.n	80073d4 <_vfiprintf_r+0xd0>
 8007322:	6874      	ldr	r4, [r6, #4]
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	0718      	lsls	r0, r3, #28
 8007328:	d55e      	bpl.n	80073e8 <_vfiprintf_r+0xe4>
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d05b      	beq.n	80073e8 <_vfiprintf_r+0xe4>
 8007330:	2300      	movs	r3, #0
 8007332:	9309      	str	r3, [sp, #36]	; 0x24
 8007334:	2320      	movs	r3, #32
 8007336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800733a:	2330      	movs	r3, #48	; 0x30
 800733c:	f04f 0b01 	mov.w	fp, #1
 8007340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007344:	9503      	str	r5, [sp, #12]
 8007346:	46b8      	mov	r8, r7
 8007348:	4645      	mov	r5, r8
 800734a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800734e:	b10b      	cbz	r3, 8007354 <_vfiprintf_r+0x50>
 8007350:	2b25      	cmp	r3, #37	; 0x25
 8007352:	d154      	bne.n	80073fe <_vfiprintf_r+0xfa>
 8007354:	ebb8 0a07 	subs.w	sl, r8, r7
 8007358:	d00b      	beq.n	8007372 <_vfiprintf_r+0x6e>
 800735a:	4653      	mov	r3, sl
 800735c:	463a      	mov	r2, r7
 800735e:	4621      	mov	r1, r4
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff ffbc 	bl	80072de <__sfputs_r>
 8007366:	3001      	adds	r0, #1
 8007368:	f000 80c2 	beq.w	80074f0 <_vfiprintf_r+0x1ec>
 800736c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736e:	4453      	add	r3, sl
 8007370:	9309      	str	r3, [sp, #36]	; 0x24
 8007372:	f898 3000 	ldrb.w	r3, [r8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80ba 	beq.w	80074f0 <_vfiprintf_r+0x1ec>
 800737c:	2300      	movs	r3, #0
 800737e:	f04f 32ff 	mov.w	r2, #4294967295
 8007382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	9307      	str	r3, [sp, #28]
 800738a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800738e:	931a      	str	r3, [sp, #104]	; 0x68
 8007390:	46a8      	mov	r8, r5
 8007392:	2205      	movs	r2, #5
 8007394:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007398:	485e      	ldr	r0, [pc, #376]	; (8007514 <_vfiprintf_r+0x210>)
 800739a:	f7ff fbe1 	bl	8006b60 <memchr>
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	bb78      	cbnz	r0, 8007402 <_vfiprintf_r+0xfe>
 80073a2:	06d9      	lsls	r1, r3, #27
 80073a4:	bf44      	itt	mi
 80073a6:	2220      	movmi	r2, #32
 80073a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073ac:	071a      	lsls	r2, r3, #28
 80073ae:	bf44      	itt	mi
 80073b0:	222b      	movmi	r2, #43	; 0x2b
 80073b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073b6:	782a      	ldrb	r2, [r5, #0]
 80073b8:	2a2a      	cmp	r2, #42	; 0x2a
 80073ba:	d02a      	beq.n	8007412 <_vfiprintf_r+0x10e>
 80073bc:	46a8      	mov	r8, r5
 80073be:	2000      	movs	r0, #0
 80073c0:	250a      	movs	r5, #10
 80073c2:	9a07      	ldr	r2, [sp, #28]
 80073c4:	4641      	mov	r1, r8
 80073c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ca:	3b30      	subs	r3, #48	; 0x30
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	d969      	bls.n	80074a4 <_vfiprintf_r+0x1a0>
 80073d0:	b360      	cbz	r0, 800742c <_vfiprintf_r+0x128>
 80073d2:	e024      	b.n	800741e <_vfiprintf_r+0x11a>
 80073d4:	4b50      	ldr	r3, [pc, #320]	; (8007518 <_vfiprintf_r+0x214>)
 80073d6:	429c      	cmp	r4, r3
 80073d8:	d101      	bne.n	80073de <_vfiprintf_r+0xda>
 80073da:	68b4      	ldr	r4, [r6, #8]
 80073dc:	e7a2      	b.n	8007324 <_vfiprintf_r+0x20>
 80073de:	4b4f      	ldr	r3, [pc, #316]	; (800751c <_vfiprintf_r+0x218>)
 80073e0:	429c      	cmp	r4, r3
 80073e2:	bf08      	it	eq
 80073e4:	68f4      	ldreq	r4, [r6, #12]
 80073e6:	e79d      	b.n	8007324 <_vfiprintf_r+0x20>
 80073e8:	4621      	mov	r1, r4
 80073ea:	4630      	mov	r0, r6
 80073ec:	f000 f958 	bl	80076a0 <__swsetup_r>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d09d      	beq.n	8007330 <_vfiprintf_r+0x2c>
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	b01d      	add	sp, #116	; 0x74
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fe:	46a8      	mov	r8, r5
 8007400:	e7a2      	b.n	8007348 <_vfiprintf_r+0x44>
 8007402:	4a44      	ldr	r2, [pc, #272]	; (8007514 <_vfiprintf_r+0x210>)
 8007404:	4645      	mov	r5, r8
 8007406:	1a80      	subs	r0, r0, r2
 8007408:	fa0b f000 	lsl.w	r0, fp, r0
 800740c:	4318      	orrs	r0, r3
 800740e:	9004      	str	r0, [sp, #16]
 8007410:	e7be      	b.n	8007390 <_vfiprintf_r+0x8c>
 8007412:	9a03      	ldr	r2, [sp, #12]
 8007414:	1d11      	adds	r1, r2, #4
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	9103      	str	r1, [sp, #12]
 800741a:	2a00      	cmp	r2, #0
 800741c:	db01      	blt.n	8007422 <_vfiprintf_r+0x11e>
 800741e:	9207      	str	r2, [sp, #28]
 8007420:	e004      	b.n	800742c <_vfiprintf_r+0x128>
 8007422:	4252      	negs	r2, r2
 8007424:	f043 0302 	orr.w	r3, r3, #2
 8007428:	9207      	str	r2, [sp, #28]
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	f898 3000 	ldrb.w	r3, [r8]
 8007430:	2b2e      	cmp	r3, #46	; 0x2e
 8007432:	d10e      	bne.n	8007452 <_vfiprintf_r+0x14e>
 8007434:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007438:	2b2a      	cmp	r3, #42	; 0x2a
 800743a:	d138      	bne.n	80074ae <_vfiprintf_r+0x1aa>
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	f108 0802 	add.w	r8, r8, #2
 8007442:	1d1a      	adds	r2, r3, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	9203      	str	r2, [sp, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	bfb8      	it	lt
 800744c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007450:	9305      	str	r3, [sp, #20]
 8007452:	4d33      	ldr	r5, [pc, #204]	; (8007520 <_vfiprintf_r+0x21c>)
 8007454:	2203      	movs	r2, #3
 8007456:	f898 1000 	ldrb.w	r1, [r8]
 800745a:	4628      	mov	r0, r5
 800745c:	f7ff fb80 	bl	8006b60 <memchr>
 8007460:	b140      	cbz	r0, 8007474 <_vfiprintf_r+0x170>
 8007462:	2340      	movs	r3, #64	; 0x40
 8007464:	1b40      	subs	r0, r0, r5
 8007466:	fa03 f000 	lsl.w	r0, r3, r0
 800746a:	9b04      	ldr	r3, [sp, #16]
 800746c:	f108 0801 	add.w	r8, r8, #1
 8007470:	4303      	orrs	r3, r0
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	f898 1000 	ldrb.w	r1, [r8]
 8007478:	2206      	movs	r2, #6
 800747a:	482a      	ldr	r0, [pc, #168]	; (8007524 <_vfiprintf_r+0x220>)
 800747c:	f108 0701 	add.w	r7, r8, #1
 8007480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007484:	f7ff fb6c 	bl	8006b60 <memchr>
 8007488:	2800      	cmp	r0, #0
 800748a:	d037      	beq.n	80074fc <_vfiprintf_r+0x1f8>
 800748c:	4b26      	ldr	r3, [pc, #152]	; (8007528 <_vfiprintf_r+0x224>)
 800748e:	bb1b      	cbnz	r3, 80074d8 <_vfiprintf_r+0x1d4>
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	3307      	adds	r3, #7
 8007494:	f023 0307 	bic.w	r3, r3, #7
 8007498:	3308      	adds	r3, #8
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749e:	444b      	add	r3, r9
 80074a0:	9309      	str	r3, [sp, #36]	; 0x24
 80074a2:	e750      	b.n	8007346 <_vfiprintf_r+0x42>
 80074a4:	fb05 3202 	mla	r2, r5, r2, r3
 80074a8:	2001      	movs	r0, #1
 80074aa:	4688      	mov	r8, r1
 80074ac:	e78a      	b.n	80073c4 <_vfiprintf_r+0xc0>
 80074ae:	2300      	movs	r3, #0
 80074b0:	250a      	movs	r5, #10
 80074b2:	4619      	mov	r1, r3
 80074b4:	f108 0801 	add.w	r8, r8, #1
 80074b8:	9305      	str	r3, [sp, #20]
 80074ba:	4640      	mov	r0, r8
 80074bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c0:	3a30      	subs	r2, #48	; 0x30
 80074c2:	2a09      	cmp	r2, #9
 80074c4:	d903      	bls.n	80074ce <_vfiprintf_r+0x1ca>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0c3      	beq.n	8007452 <_vfiprintf_r+0x14e>
 80074ca:	9105      	str	r1, [sp, #20]
 80074cc:	e7c1      	b.n	8007452 <_vfiprintf_r+0x14e>
 80074ce:	fb05 2101 	mla	r1, r5, r1, r2
 80074d2:	2301      	movs	r3, #1
 80074d4:	4680      	mov	r8, r0
 80074d6:	e7f0      	b.n	80074ba <_vfiprintf_r+0x1b6>
 80074d8:	ab03      	add	r3, sp, #12
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	4622      	mov	r2, r4
 80074de:	4b13      	ldr	r3, [pc, #76]	; (800752c <_vfiprintf_r+0x228>)
 80074e0:	a904      	add	r1, sp, #16
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7fd fe44 	bl	8005170 <_printf_float>
 80074e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074ec:	4681      	mov	r9, r0
 80074ee:	d1d5      	bne.n	800749c <_vfiprintf_r+0x198>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	065b      	lsls	r3, r3, #25
 80074f4:	f53f af7e 	bmi.w	80073f4 <_vfiprintf_r+0xf0>
 80074f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074fa:	e77d      	b.n	80073f8 <_vfiprintf_r+0xf4>
 80074fc:	ab03      	add	r3, sp, #12
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4622      	mov	r2, r4
 8007502:	4b0a      	ldr	r3, [pc, #40]	; (800752c <_vfiprintf_r+0x228>)
 8007504:	a904      	add	r1, sp, #16
 8007506:	4630      	mov	r0, r6
 8007508:	f7fe f8de 	bl	80056c8 <_printf_i>
 800750c:	e7ec      	b.n	80074e8 <_vfiprintf_r+0x1e4>
 800750e:	bf00      	nop
 8007510:	080079f0 	.word	0x080079f0
 8007514:	08007b2c 	.word	0x08007b2c
 8007518:	08007a10 	.word	0x08007a10
 800751c:	080079d0 	.word	0x080079d0
 8007520:	08007b32 	.word	0x08007b32
 8007524:	08007b36 	.word	0x08007b36
 8007528:	08005171 	.word	0x08005171
 800752c:	080072df 	.word	0x080072df

08007530 <_sbrk_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	2300      	movs	r3, #0
 8007534:	4c05      	ldr	r4, [pc, #20]	; (800754c <_sbrk_r+0x1c>)
 8007536:	4605      	mov	r5, r0
 8007538:	4608      	mov	r0, r1
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	f7fc fb98 	bl	8003c70 <_sbrk>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_sbrk_r+0x1a>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	b103      	cbz	r3, 800754a <_sbrk_r+0x1a>
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20000230 	.word	0x20000230

08007550 <__sread>:
 8007550:	b510      	push	{r4, lr}
 8007552:	460c      	mov	r4, r1
 8007554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007558:	f000 f968 	bl	800782c <_read_r>
 800755c:	2800      	cmp	r0, #0
 800755e:	bfab      	itete	ge
 8007560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007562:	89a3      	ldrhlt	r3, [r4, #12]
 8007564:	181b      	addge	r3, r3, r0
 8007566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800756a:	bfac      	ite	ge
 800756c:	6563      	strge	r3, [r4, #84]	; 0x54
 800756e:	81a3      	strhlt	r3, [r4, #12]
 8007570:	bd10      	pop	{r4, pc}

08007572 <__swrite>:
 8007572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007576:	461f      	mov	r7, r3
 8007578:	898b      	ldrh	r3, [r1, #12]
 800757a:	4605      	mov	r5, r0
 800757c:	05db      	lsls	r3, r3, #23
 800757e:	460c      	mov	r4, r1
 8007580:	4616      	mov	r6, r2
 8007582:	d505      	bpl.n	8007590 <__swrite+0x1e>
 8007584:	2302      	movs	r3, #2
 8007586:	2200      	movs	r2, #0
 8007588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758c:	f000 f928 	bl	80077e0 <_lseek_r>
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	4632      	mov	r2, r6
 8007594:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007598:	81a3      	strh	r3, [r4, #12]
 800759a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800759e:	463b      	mov	r3, r7
 80075a0:	4628      	mov	r0, r5
 80075a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075a6:	f000 b869 	b.w	800767c <_write_r>

080075aa <__sseek>:
 80075aa:	b510      	push	{r4, lr}
 80075ac:	460c      	mov	r4, r1
 80075ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b2:	f000 f915 	bl	80077e0 <_lseek_r>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	bf15      	itete	ne
 80075bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80075be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075c6:	81a3      	strheq	r3, [r4, #12]
 80075c8:	bf18      	it	ne
 80075ca:	81a3      	strhne	r3, [r4, #12]
 80075cc:	bd10      	pop	{r4, pc}

080075ce <__sclose>:
 80075ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d2:	f000 b8d3 	b.w	800777c <_close_r>
	...

080075d8 <__swbuf_r>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	460e      	mov	r6, r1
 80075dc:	4614      	mov	r4, r2
 80075de:	4605      	mov	r5, r0
 80075e0:	b118      	cbz	r0, 80075ea <__swbuf_r+0x12>
 80075e2:	6983      	ldr	r3, [r0, #24]
 80075e4:	b90b      	cbnz	r3, 80075ea <__swbuf_r+0x12>
 80075e6:	f7ff f9b7 	bl	8006958 <__sinit>
 80075ea:	4b21      	ldr	r3, [pc, #132]	; (8007670 <__swbuf_r+0x98>)
 80075ec:	429c      	cmp	r4, r3
 80075ee:	d12a      	bne.n	8007646 <__swbuf_r+0x6e>
 80075f0:	686c      	ldr	r4, [r5, #4]
 80075f2:	69a3      	ldr	r3, [r4, #24]
 80075f4:	60a3      	str	r3, [r4, #8]
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	071a      	lsls	r2, r3, #28
 80075fa:	d52e      	bpl.n	800765a <__swbuf_r+0x82>
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	b363      	cbz	r3, 800765a <__swbuf_r+0x82>
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	6820      	ldr	r0, [r4, #0]
 8007604:	b2f6      	uxtb	r6, r6
 8007606:	1ac0      	subs	r0, r0, r3
 8007608:	6963      	ldr	r3, [r4, #20]
 800760a:	4637      	mov	r7, r6
 800760c:	4283      	cmp	r3, r0
 800760e:	dc04      	bgt.n	800761a <__swbuf_r+0x42>
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f7ff f936 	bl	8006884 <_fflush_r>
 8007618:	bb28      	cbnz	r0, 8007666 <__swbuf_r+0x8e>
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	3001      	adds	r0, #1
 800761e:	3b01      	subs	r3, #1
 8007620:	60a3      	str	r3, [r4, #8]
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	6022      	str	r2, [r4, #0]
 8007628:	701e      	strb	r6, [r3, #0]
 800762a:	6963      	ldr	r3, [r4, #20]
 800762c:	4283      	cmp	r3, r0
 800762e:	d004      	beq.n	800763a <__swbuf_r+0x62>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	07db      	lsls	r3, r3, #31
 8007634:	d519      	bpl.n	800766a <__swbuf_r+0x92>
 8007636:	2e0a      	cmp	r6, #10
 8007638:	d117      	bne.n	800766a <__swbuf_r+0x92>
 800763a:	4621      	mov	r1, r4
 800763c:	4628      	mov	r0, r5
 800763e:	f7ff f921 	bl	8006884 <_fflush_r>
 8007642:	b190      	cbz	r0, 800766a <__swbuf_r+0x92>
 8007644:	e00f      	b.n	8007666 <__swbuf_r+0x8e>
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <__swbuf_r+0x9c>)
 8007648:	429c      	cmp	r4, r3
 800764a:	d101      	bne.n	8007650 <__swbuf_r+0x78>
 800764c:	68ac      	ldr	r4, [r5, #8]
 800764e:	e7d0      	b.n	80075f2 <__swbuf_r+0x1a>
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <__swbuf_r+0xa0>)
 8007652:	429c      	cmp	r4, r3
 8007654:	bf08      	it	eq
 8007656:	68ec      	ldreq	r4, [r5, #12]
 8007658:	e7cb      	b.n	80075f2 <__swbuf_r+0x1a>
 800765a:	4621      	mov	r1, r4
 800765c:	4628      	mov	r0, r5
 800765e:	f000 f81f 	bl	80076a0 <__swsetup_r>
 8007662:	2800      	cmp	r0, #0
 8007664:	d0cc      	beq.n	8007600 <__swbuf_r+0x28>
 8007666:	f04f 37ff 	mov.w	r7, #4294967295
 800766a:	4638      	mov	r0, r7
 800766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766e:	bf00      	nop
 8007670:	080079f0 	.word	0x080079f0
 8007674:	08007a10 	.word	0x08007a10
 8007678:	080079d0 	.word	0x080079d0

0800767c <_write_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4605      	mov	r5, r0
 8007680:	4608      	mov	r0, r1
 8007682:	4611      	mov	r1, r2
 8007684:	2200      	movs	r2, #0
 8007686:	4c05      	ldr	r4, [pc, #20]	; (800769c <_write_r+0x20>)
 8007688:	6022      	str	r2, [r4, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f7fc faa3 	bl	8003bd6 <_write>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_write_r+0x1e>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	b103      	cbz	r3, 800769a <_write_r+0x1e>
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	20000230 	.word	0x20000230

080076a0 <__swsetup_r>:
 80076a0:	4b32      	ldr	r3, [pc, #200]	; (800776c <__swsetup_r+0xcc>)
 80076a2:	b570      	push	{r4, r5, r6, lr}
 80076a4:	681d      	ldr	r5, [r3, #0]
 80076a6:	4606      	mov	r6, r0
 80076a8:	460c      	mov	r4, r1
 80076aa:	b125      	cbz	r5, 80076b6 <__swsetup_r+0x16>
 80076ac:	69ab      	ldr	r3, [r5, #24]
 80076ae:	b913      	cbnz	r3, 80076b6 <__swsetup_r+0x16>
 80076b0:	4628      	mov	r0, r5
 80076b2:	f7ff f951 	bl	8006958 <__sinit>
 80076b6:	4b2e      	ldr	r3, [pc, #184]	; (8007770 <__swsetup_r+0xd0>)
 80076b8:	429c      	cmp	r4, r3
 80076ba:	d10f      	bne.n	80076dc <__swsetup_r+0x3c>
 80076bc:	686c      	ldr	r4, [r5, #4]
 80076be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	0715      	lsls	r5, r2, #28
 80076c6:	d42c      	bmi.n	8007722 <__swsetup_r+0x82>
 80076c8:	06d0      	lsls	r0, r2, #27
 80076ca:	d411      	bmi.n	80076f0 <__swsetup_r+0x50>
 80076cc:	2209      	movs	r2, #9
 80076ce:	6032      	str	r2, [r6, #0]
 80076d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076d4:	81a3      	strh	r3, [r4, #12]
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295
 80076da:	e03e      	b.n	800775a <__swsetup_r+0xba>
 80076dc:	4b25      	ldr	r3, [pc, #148]	; (8007774 <__swsetup_r+0xd4>)
 80076de:	429c      	cmp	r4, r3
 80076e0:	d101      	bne.n	80076e6 <__swsetup_r+0x46>
 80076e2:	68ac      	ldr	r4, [r5, #8]
 80076e4:	e7eb      	b.n	80076be <__swsetup_r+0x1e>
 80076e6:	4b24      	ldr	r3, [pc, #144]	; (8007778 <__swsetup_r+0xd8>)
 80076e8:	429c      	cmp	r4, r3
 80076ea:	bf08      	it	eq
 80076ec:	68ec      	ldreq	r4, [r5, #12]
 80076ee:	e7e6      	b.n	80076be <__swsetup_r+0x1e>
 80076f0:	0751      	lsls	r1, r2, #29
 80076f2:	d512      	bpl.n	800771a <__swsetup_r+0x7a>
 80076f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076f6:	b141      	cbz	r1, 800770a <__swsetup_r+0x6a>
 80076f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076fc:	4299      	cmp	r1, r3
 80076fe:	d002      	beq.n	8007706 <__swsetup_r+0x66>
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff fd31 	bl	8007168 <_free_r>
 8007706:	2300      	movs	r3, #0
 8007708:	6363      	str	r3, [r4, #52]	; 0x34
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007710:	81a3      	strh	r3, [r4, #12]
 8007712:	2300      	movs	r3, #0
 8007714:	6063      	str	r3, [r4, #4]
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	f043 0308 	orr.w	r3, r3, #8
 8007720:	81a3      	strh	r3, [r4, #12]
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	b94b      	cbnz	r3, 800773a <__swsetup_r+0x9a>
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800772c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007730:	d003      	beq.n	800773a <__swsetup_r+0x9a>
 8007732:	4621      	mov	r1, r4
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff f9cb 	bl	8006ad0 <__smakebuf_r>
 800773a:	89a2      	ldrh	r2, [r4, #12]
 800773c:	f012 0301 	ands.w	r3, r2, #1
 8007740:	d00c      	beq.n	800775c <__swsetup_r+0xbc>
 8007742:	2300      	movs	r3, #0
 8007744:	60a3      	str	r3, [r4, #8]
 8007746:	6963      	ldr	r3, [r4, #20]
 8007748:	425b      	negs	r3, r3
 800774a:	61a3      	str	r3, [r4, #24]
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	b953      	cbnz	r3, 8007766 <__swsetup_r+0xc6>
 8007750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007754:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007758:	d1ba      	bne.n	80076d0 <__swsetup_r+0x30>
 800775a:	bd70      	pop	{r4, r5, r6, pc}
 800775c:	0792      	lsls	r2, r2, #30
 800775e:	bf58      	it	pl
 8007760:	6963      	ldrpl	r3, [r4, #20]
 8007762:	60a3      	str	r3, [r4, #8]
 8007764:	e7f2      	b.n	800774c <__swsetup_r+0xac>
 8007766:	2000      	movs	r0, #0
 8007768:	e7f7      	b.n	800775a <__swsetup_r+0xba>
 800776a:	bf00      	nop
 800776c:	20000018 	.word	0x20000018
 8007770:	080079f0 	.word	0x080079f0
 8007774:	08007a10 	.word	0x08007a10
 8007778:	080079d0 	.word	0x080079d0

0800777c <_close_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	2300      	movs	r3, #0
 8007780:	4c05      	ldr	r4, [pc, #20]	; (8007798 <_close_r+0x1c>)
 8007782:	4605      	mov	r5, r0
 8007784:	4608      	mov	r0, r1
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	f7fc fa41 	bl	8003c0e <_close>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_close_r+0x1a>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	b103      	cbz	r3, 8007796 <_close_r+0x1a>
 8007794:	602b      	str	r3, [r5, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	20000230 	.word	0x20000230

0800779c <_fstat_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	2300      	movs	r3, #0
 80077a0:	4c06      	ldr	r4, [pc, #24]	; (80077bc <_fstat_r+0x20>)
 80077a2:	4605      	mov	r5, r0
 80077a4:	4608      	mov	r0, r1
 80077a6:	4611      	mov	r1, r2
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	f7fc fa3b 	bl	8003c24 <_fstat>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	d102      	bne.n	80077b8 <_fstat_r+0x1c>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	b103      	cbz	r3, 80077b8 <_fstat_r+0x1c>
 80077b6:	602b      	str	r3, [r5, #0]
 80077b8:	bd38      	pop	{r3, r4, r5, pc}
 80077ba:	bf00      	nop
 80077bc:	20000230 	.word	0x20000230

080077c0 <_isatty_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	2300      	movs	r3, #0
 80077c4:	4c05      	ldr	r4, [pc, #20]	; (80077dc <_isatty_r+0x1c>)
 80077c6:	4605      	mov	r5, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	6023      	str	r3, [r4, #0]
 80077cc:	f7fc fa39 	bl	8003c42 <_isatty>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d102      	bne.n	80077da <_isatty_r+0x1a>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	b103      	cbz	r3, 80077da <_isatty_r+0x1a>
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	bd38      	pop	{r3, r4, r5, pc}
 80077dc:	20000230 	.word	0x20000230

080077e0 <_lseek_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4605      	mov	r5, r0
 80077e4:	4608      	mov	r0, r1
 80077e6:	4611      	mov	r1, r2
 80077e8:	2200      	movs	r2, #0
 80077ea:	4c05      	ldr	r4, [pc, #20]	; (8007800 <_lseek_r+0x20>)
 80077ec:	6022      	str	r2, [r4, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	f7fc fa31 	bl	8003c56 <_lseek>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_lseek_r+0x1e>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_lseek_r+0x1e>
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	20000230 	.word	0x20000230

08007804 <__ascii_mbtowc>:
 8007804:	b082      	sub	sp, #8
 8007806:	b901      	cbnz	r1, 800780a <__ascii_mbtowc+0x6>
 8007808:	a901      	add	r1, sp, #4
 800780a:	b142      	cbz	r2, 800781e <__ascii_mbtowc+0x1a>
 800780c:	b14b      	cbz	r3, 8007822 <__ascii_mbtowc+0x1e>
 800780e:	7813      	ldrb	r3, [r2, #0]
 8007810:	600b      	str	r3, [r1, #0]
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	1c10      	adds	r0, r2, #0
 8007816:	bf18      	it	ne
 8007818:	2001      	movne	r0, #1
 800781a:	b002      	add	sp, #8
 800781c:	4770      	bx	lr
 800781e:	4610      	mov	r0, r2
 8007820:	e7fb      	b.n	800781a <__ascii_mbtowc+0x16>
 8007822:	f06f 0001 	mvn.w	r0, #1
 8007826:	e7f8      	b.n	800781a <__ascii_mbtowc+0x16>

08007828 <__malloc_lock>:
 8007828:	4770      	bx	lr

0800782a <__malloc_unlock>:
 800782a:	4770      	bx	lr

0800782c <_read_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4605      	mov	r5, r0
 8007830:	4608      	mov	r0, r1
 8007832:	4611      	mov	r1, r2
 8007834:	2200      	movs	r2, #0
 8007836:	4c05      	ldr	r4, [pc, #20]	; (800784c <_read_r+0x20>)
 8007838:	6022      	str	r2, [r4, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7fc f9ae 	bl	8003b9c <_read>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_read_r+0x1e>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	b103      	cbz	r3, 800784a <_read_r+0x1e>
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20000230 	.word	0x20000230

08007850 <__ascii_wctomb>:
 8007850:	b149      	cbz	r1, 8007866 <__ascii_wctomb+0x16>
 8007852:	2aff      	cmp	r2, #255	; 0xff
 8007854:	bf8b      	itete	hi
 8007856:	238a      	movhi	r3, #138	; 0x8a
 8007858:	700a      	strbls	r2, [r1, #0]
 800785a:	6003      	strhi	r3, [r0, #0]
 800785c:	2001      	movls	r0, #1
 800785e:	bf88      	it	hi
 8007860:	f04f 30ff 	movhi.w	r0, #4294967295
 8007864:	4770      	bx	lr
 8007866:	4608      	mov	r0, r1
 8007868:	4770      	bx	lr
	...

0800786c <_init>:
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	bf00      	nop
 8007870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007872:	bc08      	pop	{r3}
 8007874:	469e      	mov	lr, r3
 8007876:	4770      	bx	lr

08007878 <_fini>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

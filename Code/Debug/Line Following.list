
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff0  08002ff0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002ff0  08002ff0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ff0  08002ff0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08002ffc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08002ffc  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006115  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000149f  00000000  00000000  00026142  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000918  00000000  00000000  000275e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  00027f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000133f7  00000000  00000000  00028760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005096  00000000  00000000  0003bb57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006829c  00000000  00000000  00040bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8e89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e4  00000000  00000000  000a8f04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f98 	.word	0x08002f98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08002f98 	.word	0x08002f98

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	; 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80002a0:	b490      	push	{r4, r7}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	332c      	adds	r3, #44	; 0x2c
 80002b0:	4619      	mov	r1, r3
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80002b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002bc:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002be:	697a      	ldr	r2, [r7, #20]
 80002c0:	fa92 f2a2 	rbit	r2, r2
 80002c4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	440b      	add	r3, r1
 80002d4:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80002d6:	6822      	ldr	r2, [r4, #0]
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	f003 031f 	and.w	r3, r3, #31
 80002de:	211f      	movs	r1, #31
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	43db      	mvns	r3, r3
 80002e6:	401a      	ands	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f003 011f 	and.w	r1, r3, #31
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	f003 031f 	and.w	r3, r3, #31
 80002f4:	fa01 f303 	lsl.w	r3, r1, r3
 80002f8:	4313      	orrs	r3, r2
 80002fa:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80002fc:	bf00      	nop
 80002fe:	3718      	adds	r7, #24
 8000300:	46bd      	mov	sp, r7
 8000302:	bc90      	pop	{r4, r7}
 8000304:	4770      	bx	lr

08000306 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	431a      	orrs	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	609a      	str	r2, [r3, #8]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800032a:	b490      	push	{r4, r7}
 800032c:	b08a      	sub	sp, #40	; 0x28
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	330c      	adds	r3, #12
 800033a:	4619      	mov	r1, r3
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000348:	697a      	ldr	r2, [r7, #20]
 800034a:	fa92 f2a2 	rbit	r2, r2
 800034e:	613a      	str	r2, [r7, #16]
  return result;
 8000350:	693a      	ldr	r2, [r7, #16]
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b2d2      	uxtb	r2, r2
 8000358:	40d3      	lsrs	r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	440b      	add	r3, r1
 800035e:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000360:	6822      	ldr	r2, [r4, #0]
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000368:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800036c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036e:	69f9      	ldr	r1, [r7, #28]
 8000370:	fa91 f1a1 	rbit	r1, r1
 8000374:	61b9      	str	r1, [r7, #24]
  return result;
 8000376:	69b9      	ldr	r1, [r7, #24]
 8000378:	fab1 f181 	clz	r1, r1
 800037c:	b2c9      	uxtb	r1, r1
 800037e:	40cb      	lsrs	r3, r1
 8000380:	2107      	movs	r1, #7
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	43db      	mvns	r3, r3
 8000388:	401a      	ands	r2, r3
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000390:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000394:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000398:	fa91 f1a1 	rbit	r1, r1
 800039c:	6239      	str	r1, [r7, #32]
  return result;
 800039e:	6a39      	ldr	r1, [r7, #32]
 80003a0:	fab1 f181 	clz	r1, r1
 80003a4:	b2c9      	uxtb	r1, r1
 80003a6:	40cb      	lsrs	r3, r1
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	4313      	orrs	r3, r2
 80003b0:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80003b2:	bf00      	nop
 80003b4:	3728      	adds	r7, #40	; 0x28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc90      	pop	{r4, r7}
 80003ba:	4770      	bx	lr

080003bc <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f043 0201 	orr.w	r2, r3, #1
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	609a      	str	r2, [r3, #8]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr

080003da <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	f043 0204 	orr.w	r2, r3, #4
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	609a      	str	r2, [r3, #8]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	2b04      	cmp	r3, #4
 800040a:	bf0c      	ite	eq
 800040c:	2301      	moveq	r3, #1
 800040e:	2300      	movne	r3, #0
 8000410:	b2db      	uxtb	r3, r3
}
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	609a      	str	r2, [r3, #8]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
	...

0800043c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	3b01      	subs	r3, #1
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LL_DMA_EnableChannel+0x38>)
 800044c:	5cd3      	ldrb	r3, [r2, r3]
 800044e:	461a      	mov	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4413      	add	r3, r2
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	3a01      	subs	r2, #1
 800045a:	4906      	ldr	r1, [pc, #24]	; (8000474 <LL_DMA_EnableChannel+0x38>)
 800045c:	5c8a      	ldrb	r2, [r1, r2]
 800045e:	4611      	mov	r1, r2
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	440a      	add	r2, r1
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6013      	str	r3, [r2, #0]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	08002fb0 	.word	0x08002fb0

08000478 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	3b01      	subs	r3, #1
 8000488:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <LL_DMA_SetDataTransferDirection+0x44>)
 800048a:	5cd3      	ldrb	r3, [r2, r3]
 800048c:	461a      	mov	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000498:	f023 0310 	bic.w	r3, r3, #16
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	3a01      	subs	r2, #1
 80004a0:	4906      	ldr	r1, [pc, #24]	; (80004bc <LL_DMA_SetDataTransferDirection+0x44>)
 80004a2:	5c8a      	ldrb	r2, [r1, r2]
 80004a4:	4611      	mov	r1, r2
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	440a      	add	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	08002fb0 	.word	0x08002fb0

080004c0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <LL_DMA_SetMode+0x40>)
 80004d2:	5cd3      	ldrb	r3, [r2, r3]
 80004d4:	461a      	mov	r2, r3
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	4413      	add	r3, r2
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f023 0220 	bic.w	r2, r3, #32
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	4906      	ldr	r1, [pc, #24]	; (8000500 <LL_DMA_SetMode+0x40>)
 80004e6:	5ccb      	ldrb	r3, [r1, r3]
 80004e8:	4619      	mov	r1, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	440b      	add	r3, r1
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	600b      	str	r3, [r1, #0]
             Mode);
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	08002fb0 	.word	0x08002fb0

08000504 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	3b01      	subs	r3, #1
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <LL_DMA_SetPeriphIncMode+0x40>)
 8000516:	5cd3      	ldrb	r3, [r2, r3]
 8000518:	461a      	mov	r2, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	3b01      	subs	r3, #1
 8000528:	4906      	ldr	r1, [pc, #24]	; (8000544 <LL_DMA_SetPeriphIncMode+0x40>)
 800052a:	5ccb      	ldrb	r3, [r1, r3]
 800052c:	4619      	mov	r1, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	440b      	add	r3, r1
 8000532:	4619      	mov	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4313      	orrs	r3, r2
 8000538:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	08002fb0 	.word	0x08002fb0

08000548 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LL_DMA_SetMemoryIncMode+0x40>)
 800055a:	5cd3      	ldrb	r3, [r2, r3]
 800055c:	461a      	mov	r2, r3
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4413      	add	r3, r2
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	3b01      	subs	r3, #1
 800056c:	4906      	ldr	r1, [pc, #24]	; (8000588 <LL_DMA_SetMemoryIncMode+0x40>)
 800056e:	5ccb      	ldrb	r3, [r1, r3]
 8000570:	4619      	mov	r1, r3
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	440b      	add	r3, r1
 8000576:	4619      	mov	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	08002fb0 	.word	0x08002fb0

0800058c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <LL_DMA_SetPeriphSize+0x40>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <LL_DMA_SetPeriphSize+0x40>)
 80005b2:	5ccb      	ldrb	r3, [r1, r3]
 80005b4:	4619      	mov	r1, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	440b      	add	r3, r1
 80005ba:	4619      	mov	r1, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	08002fb0 	.word	0x08002fb0

080005d0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <LL_DMA_SetMemorySize+0x40>)
 80005e2:	5cd3      	ldrb	r3, [r2, r3]
 80005e4:	461a      	mov	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4906      	ldr	r1, [pc, #24]	; (8000610 <LL_DMA_SetMemorySize+0x40>)
 80005f6:	5ccb      	ldrb	r3, [r1, r3]
 80005f8:	4619      	mov	r1, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	440b      	add	r3, r1
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	08002fb0 	.word	0x08002fb0

08000614 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	3b01      	subs	r3, #1
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800063a:	5ccb      	ldrb	r3, [r1, r3]
 800063c:	4619      	mov	r1, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	440b      	add	r3, r1
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4313      	orrs	r3, r2
 8000648:	600b      	str	r3, [r1, #0]
             Priority);
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	08002fb0 	.word	0x08002fb0

08000658 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <LL_DMA_SetDataLength+0x40>)
 800066a:	5cd3      	ldrb	r3, [r2, r3]
 800066c:	461a      	mov	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	041b      	lsls	r3, r3, #16
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	3a01      	subs	r2, #1
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <LL_DMA_SetDataLength+0x40>)
 800067e:	5c8a      	ldrb	r2, [r1, r2]
 8000680:	4611      	mov	r1, r2
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	440a      	add	r2, r1
 8000686:	4611      	mov	r1, r2
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4313      	orrs	r3, r2
 800068c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	08002fb0 	.word	0x08002fb0

0800069c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <LL_DMA_SetMemoryAddress+0x2c>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	461a      	mov	r2, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4413      	add	r3, r2
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	08002fb0 	.word	0x08002fb0

080006cc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <LL_DMA_SetPeriphAddress+0x2c>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	461a      	mov	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4413      	add	r3, r2
 80006e6:	461a      	mov	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6093      	str	r3, [r2, #8]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	08002fb0 	.word	0x08002fb0

080006fc <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	431a      	orrs	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60da      	str	r2, [r3, #12]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f023 0201 	bic.w	r2, r3, #1
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60da      	str	r2, [r3, #12]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
	...

0800077c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LL_RCC_HSI_Enable+0x18>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <LL_RCC_HSI_Enable+0x18>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000

08000798 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <LL_RCC_HSI_IsReady+0x20>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	bf0c      	ite	eq
 80007a8:	2301      	moveq	r3, #1
 80007aa:	2300      	movne	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4903      	ldr	r1, [pc, #12]	; (80007e0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007d2:	4313      	orrs	r3, r2
 80007d4:	600b      	str	r3, [r1, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40021000 	.word	0x40021000

080007e4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <LL_RCC_SetSysClkSource+0x24>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f023 0203 	bic.w	r2, r3, #3
 80007f4:	4904      	ldr	r1, [pc, #16]	; (8000808 <LL_RCC_SetSysClkSource+0x24>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	604b      	str	r3, [r1, #4]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <LL_RCC_GetSysClkSource+0x14>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 030c 	and.w	r3, r3, #12
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000

08000824 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_RCC_SetAHBPrescaler+0x24>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000834:	4904      	ldr	r1, [pc, #16]	; (8000848 <LL_RCC_SetAHBPrescaler+0x24>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	604b      	str	r3, [r1, #4]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800085c:	4904      	ldr	r1, [pc, #16]	; (8000870 <LL_RCC_SetAPB1Prescaler+0x24>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	604b      	str	r3, [r1, #4]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <LL_RCC_SetAPB2Prescaler+0x24>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000884:	4904      	ldr	r1, [pc, #16]	; (8000898 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	604b      	str	r3, [r1, #4]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <LL_RCC_SetADCClockSource+0x24>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80008ac:	4904      	ldr	r1, [pc, #16]	; (80008c0 <LL_RCC_SetADCClockSource+0x24>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	604b      	str	r3, [r1, #4]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <LL_RCC_PLL_Enable+0x18>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a03      	ldr	r2, [pc, #12]	; (80008dc <LL_RCC_PLL_Enable+0x18>)
 80008ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40021000 	.word	0x40021000

080008e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <LL_RCC_PLL_IsReady+0x20>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000

08000904 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	430b      	orrs	r3, r1
 8000920:	4903      	ldr	r1, [pc, #12]	; (8000930 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000922:	4313      	orrs	r3, r2
 8000924:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	4907      	ldr	r1, [pc, #28]	; (8000960 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4313      	orrs	r3, r2
 8000946:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4013      	ands	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <LL_APB1_GRP1_EnableClock+0x2c>)
 800096e:	69da      	ldr	r2, [r3, #28]
 8000970:	4907      	ldr	r1, [pc, #28]	; (8000990 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <LL_APB1_GRP1_EnableClock+0x2c>)
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4013      	ands	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800099e:	699a      	ldr	r2, [r3, #24]
 80009a0:	4907      	ldr	r1, [pc, #28]	; (80009c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009aa:	699a      	ldr	r2, [r3, #24]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4013      	ands	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000

080009c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <LL_FLASH_SetLatency+0x24>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f023 0207 	bic.w	r2, r3, #7
 80009d4:	4904      	ldr	r1, [pc, #16]	; (80009e8 <LL_FLASH_SetLatency+0x24>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4313      	orrs	r3, r2
 80009da:	600b      	str	r3, [r1, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40022000 	.word	0x40022000

080009ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <LL_FLASH_GetLatency+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 0307 	and.w	r3, r3, #7
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	40022000 	.word	0x40022000

08000a04 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f043 0201 	orr.w	r2, r3, #1
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a1a      	ldr	r2, [r3, #32]
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	621a      	str	r2, [r3, #32]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
	...

08000a80 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a80:	b4b0      	push	{r4, r5, r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d01c      	beq.n	8000aca <LL_TIM_OC_DisableFast+0x4a>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	d017      	beq.n	8000ac6 <LL_TIM_OC_DisableFast+0x46>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b10      	cmp	r3, #16
 8000a9a:	d012      	beq.n	8000ac2 <LL_TIM_OC_DisableFast+0x42>
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b40      	cmp	r3, #64	; 0x40
 8000aa0:	d00d      	beq.n	8000abe <LL_TIM_OC_DisableFast+0x3e>
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa8:	d007      	beq.n	8000aba <LL_TIM_OC_DisableFast+0x3a>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ab0:	d101      	bne.n	8000ab6 <LL_TIM_OC_DisableFast+0x36>
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	e00a      	b.n	8000acc <LL_TIM_OC_DisableFast+0x4c>
 8000ab6:	2306      	movs	r3, #6
 8000ab8:	e008      	b.n	8000acc <LL_TIM_OC_DisableFast+0x4c>
 8000aba:	2304      	movs	r3, #4
 8000abc:	e006      	b.n	8000acc <LL_TIM_OC_DisableFast+0x4c>
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e004      	b.n	8000acc <LL_TIM_OC_DisableFast+0x4c>
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	e002      	b.n	8000acc <LL_TIM_OC_DisableFast+0x4c>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <LL_TIM_OC_DisableFast+0x4c>
 8000aca:	2300      	movs	r3, #0
 8000acc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3318      	adds	r3, #24
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <LL_TIM_OC_DisableFast+0x7c>)
 8000ad8:	5c5b      	ldrb	r3, [r3, r1]
 8000ada:	4413      	add	r3, r2
 8000adc:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ade:	6822      	ldr	r2, [r4, #0]
 8000ae0:	4629      	mov	r1, r5
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <LL_TIM_OC_DisableFast+0x80>)
 8000ae4:	5c5b      	ldrb	r3, [r3, r1]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	2304      	movs	r3, #4
 8000aea:	408b      	lsls	r3, r1
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4013      	ands	r3, r2
 8000af0:	6023      	str	r3, [r4, #0]

}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bcb0      	pop	{r4, r5, r7}
 8000afa:	4770      	bx	lr
 8000afc:	08002fb8 	.word	0x08002fb8
 8000b00:	08002fc0 	.word	0x08002fc0

08000b04 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000b04:	b4b0      	push	{r4, r5, r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d01c      	beq.n	8000b4e <LL_TIM_OC_EnablePreload+0x4a>
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d017      	beq.n	8000b4a <LL_TIM_OC_EnablePreload+0x46>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d012      	beq.n	8000b46 <LL_TIM_OC_EnablePreload+0x42>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b40      	cmp	r3, #64	; 0x40
 8000b24:	d00d      	beq.n	8000b42 <LL_TIM_OC_EnablePreload+0x3e>
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b2c:	d007      	beq.n	8000b3e <LL_TIM_OC_EnablePreload+0x3a>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b34:	d101      	bne.n	8000b3a <LL_TIM_OC_EnablePreload+0x36>
 8000b36:	2305      	movs	r3, #5
 8000b38:	e00a      	b.n	8000b50 <LL_TIM_OC_EnablePreload+0x4c>
 8000b3a:	2306      	movs	r3, #6
 8000b3c:	e008      	b.n	8000b50 <LL_TIM_OC_EnablePreload+0x4c>
 8000b3e:	2304      	movs	r3, #4
 8000b40:	e006      	b.n	8000b50 <LL_TIM_OC_EnablePreload+0x4c>
 8000b42:	2303      	movs	r3, #3
 8000b44:	e004      	b.n	8000b50 <LL_TIM_OC_EnablePreload+0x4c>
 8000b46:	2302      	movs	r3, #2
 8000b48:	e002      	b.n	8000b50 <LL_TIM_OC_EnablePreload+0x4c>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <LL_TIM_OC_EnablePreload+0x4c>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3318      	adds	r3, #24
 8000b56:	461a      	mov	r2, r3
 8000b58:	4629      	mov	r1, r5
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <LL_TIM_OC_EnablePreload+0x7c>)
 8000b5c:	5c5b      	ldrb	r3, [r3, r1]
 8000b5e:	4413      	add	r3, r2
 8000b60:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000b62:	6822      	ldr	r2, [r4, #0]
 8000b64:	4629      	mov	r1, r5
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <LL_TIM_OC_EnablePreload+0x80>)
 8000b68:	5c5b      	ldrb	r3, [r3, r1]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	408b      	lsls	r3, r1
 8000b70:	4313      	orrs	r3, r2
 8000b72:	6023      	str	r3, [r4, #0]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bcb0      	pop	{r4, r5, r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	08002fb8 	.word	0x08002fb8
 8000b84:	08002fc0 	.word	0x08002fc0

08000b88 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000bbc:	b4b0      	push	{r4, r5, r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d01c      	beq.n	8000c08 <LL_TIM_IC_SetActiveInput+0x4c>
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d017      	beq.n	8000c04 <LL_TIM_IC_SetActiveInput+0x48>
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	2b10      	cmp	r3, #16
 8000bd8:	d012      	beq.n	8000c00 <LL_TIM_IC_SetActiveInput+0x44>
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b40      	cmp	r3, #64	; 0x40
 8000bde:	d00d      	beq.n	8000bfc <LL_TIM_IC_SetActiveInput+0x40>
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be6:	d007      	beq.n	8000bf8 <LL_TIM_IC_SetActiveInput+0x3c>
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bee:	d101      	bne.n	8000bf4 <LL_TIM_IC_SetActiveInput+0x38>
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	e00a      	b.n	8000c0a <LL_TIM_IC_SetActiveInput+0x4e>
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	e008      	b.n	8000c0a <LL_TIM_IC_SetActiveInput+0x4e>
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	e006      	b.n	8000c0a <LL_TIM_IC_SetActiveInput+0x4e>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e004      	b.n	8000c0a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e002      	b.n	8000c0a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <LL_TIM_IC_SetActiveInput+0x4e>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	461a      	mov	r2, r3
 8000c12:	4629      	mov	r1, r5
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <LL_TIM_IC_SetActiveInput+0x8c>)
 8000c16:	5c5b      	ldrb	r3, [r3, r1]
 8000c18:	4413      	add	r3, r2
 8000c1a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000c1c:	6822      	ldr	r2, [r4, #0]
 8000c1e:	4629      	mov	r1, r5
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <LL_TIM_IC_SetActiveInput+0x90>)
 8000c22:	5c5b      	ldrb	r3, [r3, r1]
 8000c24:	4619      	mov	r1, r3
 8000c26:	2303      	movs	r3, #3
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	0c1b      	lsrs	r3, r3, #16
 8000c32:	4628      	mov	r0, r5
 8000c34:	4905      	ldr	r1, [pc, #20]	; (8000c4c <LL_TIM_IC_SetActiveInput+0x90>)
 8000c36:	5c09      	ldrb	r1, [r1, r0]
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	6023      	str	r3, [r4, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bcb0      	pop	{r4, r5, r7}
 8000c46:	4770      	bx	lr
 8000c48:	08002fb8 	.word	0x08002fb8
 8000c4c:	08002fc8 	.word	0x08002fc8

08000c50 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000c50:	b4b0      	push	{r4, r5, r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d01c      	beq.n	8000c9c <LL_TIM_IC_SetPrescaler+0x4c>
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d017      	beq.n	8000c98 <LL_TIM_IC_SetPrescaler+0x48>
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b10      	cmp	r3, #16
 8000c6c:	d012      	beq.n	8000c94 <LL_TIM_IC_SetPrescaler+0x44>
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2b40      	cmp	r3, #64	; 0x40
 8000c72:	d00d      	beq.n	8000c90 <LL_TIM_IC_SetPrescaler+0x40>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c7a:	d007      	beq.n	8000c8c <LL_TIM_IC_SetPrescaler+0x3c>
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c82:	d101      	bne.n	8000c88 <LL_TIM_IC_SetPrescaler+0x38>
 8000c84:	2305      	movs	r3, #5
 8000c86:	e00a      	b.n	8000c9e <LL_TIM_IC_SetPrescaler+0x4e>
 8000c88:	2306      	movs	r3, #6
 8000c8a:	e008      	b.n	8000c9e <LL_TIM_IC_SetPrescaler+0x4e>
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	e006      	b.n	8000c9e <LL_TIM_IC_SetPrescaler+0x4e>
 8000c90:	2303      	movs	r3, #3
 8000c92:	e004      	b.n	8000c9e <LL_TIM_IC_SetPrescaler+0x4e>
 8000c94:	2302      	movs	r3, #2
 8000c96:	e002      	b.n	8000c9e <LL_TIM_IC_SetPrescaler+0x4e>
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e000      	b.n	8000c9e <LL_TIM_IC_SetPrescaler+0x4e>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3318      	adds	r3, #24
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <LL_TIM_IC_SetPrescaler+0x8c>)
 8000caa:	5c5b      	ldrb	r3, [r3, r1]
 8000cac:	4413      	add	r3, r2
 8000cae:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	4629      	mov	r1, r5
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <LL_TIM_IC_SetPrescaler+0x90>)
 8000cb6:	5c5b      	ldrb	r3, [r3, r1]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	230c      	movs	r3, #12
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	4905      	ldr	r1, [pc, #20]	; (8000ce0 <LL_TIM_IC_SetPrescaler+0x90>)
 8000cca:	5c09      	ldrb	r1, [r1, r0]
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	6023      	str	r3, [r4, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bcb0      	pop	{r4, r5, r7}
 8000cda:	4770      	bx	lr
 8000cdc:	08002fb8 	.word	0x08002fb8
 8000ce0:	08002fc8 	.word	0x08002fc8

08000ce4 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000ce4:	b4b0      	push	{r4, r5, r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d01c      	beq.n	8000d30 <LL_TIM_IC_SetFilter+0x4c>
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d017      	beq.n	8000d2c <LL_TIM_IC_SetFilter+0x48>
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b10      	cmp	r3, #16
 8000d00:	d012      	beq.n	8000d28 <LL_TIM_IC_SetFilter+0x44>
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b40      	cmp	r3, #64	; 0x40
 8000d06:	d00d      	beq.n	8000d24 <LL_TIM_IC_SetFilter+0x40>
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d0e:	d007      	beq.n	8000d20 <LL_TIM_IC_SetFilter+0x3c>
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d16:	d101      	bne.n	8000d1c <LL_TIM_IC_SetFilter+0x38>
 8000d18:	2305      	movs	r3, #5
 8000d1a:	e00a      	b.n	8000d32 <LL_TIM_IC_SetFilter+0x4e>
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	e008      	b.n	8000d32 <LL_TIM_IC_SetFilter+0x4e>
 8000d20:	2304      	movs	r3, #4
 8000d22:	e006      	b.n	8000d32 <LL_TIM_IC_SetFilter+0x4e>
 8000d24:	2303      	movs	r3, #3
 8000d26:	e004      	b.n	8000d32 <LL_TIM_IC_SetFilter+0x4e>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	e002      	b.n	8000d32 <LL_TIM_IC_SetFilter+0x4e>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <LL_TIM_IC_SetFilter+0x4e>
 8000d30:	2300      	movs	r3, #0
 8000d32:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3318      	adds	r3, #24
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <LL_TIM_IC_SetFilter+0x8c>)
 8000d3e:	5c5b      	ldrb	r3, [r3, r1]
 8000d40:	4413      	add	r3, r2
 8000d42:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000d44:	6822      	ldr	r2, [r4, #0]
 8000d46:	4629      	mov	r1, r5
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <LL_TIM_IC_SetFilter+0x90>)
 8000d4a:	5c5b      	ldrb	r3, [r3, r1]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	23f0      	movs	r3, #240	; 0xf0
 8000d50:	408b      	lsls	r3, r1
 8000d52:	43db      	mvns	r3, r3
 8000d54:	401a      	ands	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0c1b      	lsrs	r3, r3, #16
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	4905      	ldr	r1, [pc, #20]	; (8000d74 <LL_TIM_IC_SetFilter+0x90>)
 8000d5e:	5c09      	ldrb	r1, [r1, r0]
 8000d60:	408b      	lsls	r3, r1
 8000d62:	4313      	orrs	r3, r2
 8000d64:	6023      	str	r3, [r4, #0]
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bcb0      	pop	{r4, r5, r7}
 8000d6e:	4770      	bx	lr
 8000d70:	08002fb8 	.word	0x08002fb8
 8000d74:	08002fc8 	.word	0x08002fc8

08000d78 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000d78:	b490      	push	{r4, r7}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d01c      	beq.n	8000dc4 <LL_TIM_IC_SetPolarity+0x4c>
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d017      	beq.n	8000dc0 <LL_TIM_IC_SetPolarity+0x48>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b10      	cmp	r3, #16
 8000d94:	d012      	beq.n	8000dbc <LL_TIM_IC_SetPolarity+0x44>
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b40      	cmp	r3, #64	; 0x40
 8000d9a:	d00d      	beq.n	8000db8 <LL_TIM_IC_SetPolarity+0x40>
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000da2:	d007      	beq.n	8000db4 <LL_TIM_IC_SetPolarity+0x3c>
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000daa:	d101      	bne.n	8000db0 <LL_TIM_IC_SetPolarity+0x38>
 8000dac:	2305      	movs	r3, #5
 8000dae:	e00a      	b.n	8000dc6 <LL_TIM_IC_SetPolarity+0x4e>
 8000db0:	2306      	movs	r3, #6
 8000db2:	e008      	b.n	8000dc6 <LL_TIM_IC_SetPolarity+0x4e>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e006      	b.n	8000dc6 <LL_TIM_IC_SetPolarity+0x4e>
 8000db8:	2303      	movs	r3, #3
 8000dba:	e004      	b.n	8000dc6 <LL_TIM_IC_SetPolarity+0x4e>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e002      	b.n	8000dc6 <LL_TIM_IC_SetPolarity+0x4e>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <LL_TIM_IC_SetPolarity+0x4e>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6a1a      	ldr	r2, [r3, #32]
 8000dcc:	4621      	mov	r1, r4
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <LL_TIM_IC_SetPolarity+0x80>)
 8000dd0:	5c5b      	ldrb	r3, [r3, r1]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	230a      	movs	r3, #10
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	401a      	ands	r2, r3
 8000ddc:	4621      	mov	r1, r4
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <LL_TIM_IC_SetPolarity+0x80>)
 8000de0:	5c5b      	ldrb	r3, [r3, r1]
 8000de2:	4619      	mov	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	408b      	lsls	r3, r1
 8000de8:	431a      	orrs	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc90      	pop	{r4, r7}
 8000df6:	4770      	bx	lr
 8000df8:	08002fd0 	.word	0x08002fd0

08000dfc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e0e:	f023 0307 	bic.w	r3, r3, #7
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	609a      	str	r2, [r3, #8]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f023 0207 	bic.w	r2, r3, #7
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	605a      	str	r2, [r3, #4]
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	60da      	str	r2, [r3, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	615a      	str	r2, [r3, #20]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ef0:	b490      	push	{r4, r7}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	0e1b      	lsrs	r3, r3, #24
 8000f04:	4413      	add	r3, r2
 8000f06:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000f08:	6822      	ldr	r2, [r4, #0]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	613b      	str	r3, [r7, #16]
  return result;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fab3 f383 	clz	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	210f      	movs	r1, #15
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	401a      	ands	r2, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	61bb      	str	r3, [r7, #24]
  return result;
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	6023      	str	r3, [r4, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc90      	pop	{r4, r7}
 8000f52:	4770      	bx	lr

08000f54 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	615a      	str	r2, [r3, #20]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8000f7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	6053      	str	r3, [r2, #4]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40010000 	.word	0x40010000

08000f94 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8000f9e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6053      	str	r3, [r2, #4]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	40010000 	.word	0x40010000

08000fb4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000fbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc2:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fce:	6053      	str	r3, [r2, #4]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40010000 	.word	0x40010000

08000fdc <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	0c1b      	lsrs	r3, r3, #16
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	ea02 0103 	and.w	r1, r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	60bb      	str	r3, [r7, #8]
  return result;
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	fa03 f202 	lsl.w	r2, r3, r2
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <LL_GPIO_AF_SetEXTISource+0x58>)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	430a      	orrs	r2, r1
 8001022:	3302      	adds	r3, #2
 8001024:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40010000 	.word	0x40010000

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fca9 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001042:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001046:	f7ff fc8d 	bl	8000964 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104a:	2003      	movs	r0, #3
 800104c:	f7ff f87e 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8001050:	f7ff ffb0 	bl	8000fb4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001054:	f000 f830 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001058:	f000 fc6c 	bl	8001934 <MX_GPIO_Init>
  MX_DMA_Init();
 800105c:	f000 fc52 	bl	8001904 <MX_DMA_Init>
  MX_TIM1_Init();
 8001060:	f000 f9da 	bl	8001418 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001064:	f000 f86c 	bl	8001140 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001068:	f000 f980 	bl	800136c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800106c:	f000 fbe2 	bl	8001834 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001070:	f000 faa0 	bl	80015b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001074:	f000 fb2a 	bl	80016cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001078:	f000 fb9a 	bl	80017b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  USR1_Motor1_EnablePWM();
 800107c:	f000 fd14 	bl	8001aa8 <USR1_Motor1_EnablePWM>
  USR1_Motor2_EnablePWM();
 8001080:	f000 fd1c 	bl	8001abc <USR1_Motor2_EnablePWM>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LL_mDelay(5000);
 8001084:	f241 3088 	movw	r0, #5000	; 0x1388
 8001088:	f001 ff28 	bl	8002edc <LL_mDelay>
	  USR1_Motor1_SetPWM(3200-1);
 800108c:	f640 407f 	movw	r0, #3199	; 0xc7f
 8001090:	f000 fd20 	bl	8001ad4 <USR1_Motor1_SetPWM>
	  USR1_Motor2_SetPWM(4800-1);
 8001094:	f241 20bf 	movw	r0, #4799	; 0x12bf
 8001098:	f000 fd2c 	bl	8001af4 <USR1_Motor2_SetPWM>
	  LL_mDelay(5000);
 800109c:	f241 3088 	movw	r0, #5000	; 0x1388
 80010a0:	f001 ff1c 	bl	8002edc <LL_mDelay>
	  USR1_Motor1_SetPWM(4800-1);
 80010a4:	f241 20bf 	movw	r0, #4799	; 0x12bf
 80010a8:	f000 fd14 	bl	8001ad4 <USR1_Motor1_SetPWM>
	  USR1_Motor2_SetPWM(1600-1);
 80010ac:	f240 603f 	movw	r0, #1599	; 0x63f
 80010b0:	f000 fd20 	bl	8001af4 <USR1_Motor2_SetPWM>
	  LL_mDelay(5000);
 80010b4:	e7e6      	b.n	8001084 <main+0x4c>
	...

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff fc81 	bl	80009c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80010c2:	bf00      	nop
 80010c4:	f7ff fc92 	bl	80009ec <LL_FLASH_GetLatency>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d1fa      	bne.n	80010c4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80010ce:	2010      	movs	r0, #16
 80010d0:	f7ff fb74 	bl	80007bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80010d4:	f7ff fb52 	bl	800077c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80010d8:	bf00      	nop
 80010da:	f7ff fb5d 	bl	8000798 <LL_RCC_HSI_IsReady>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d1fa      	bne.n	80010da <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 80010e4:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fc0b 	bl	8000904 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80010ee:	f7ff fbe9 	bl	80008c4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80010f2:	bf00      	nop
 80010f4:	f7ff fbf4 	bl	80008e0 <LL_RCC_PLL_IsReady>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d1fa      	bne.n	80010f4 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fb90 	bl	8000824 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001104:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001108:	f7ff fba0 	bl	800084c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fbb1 	bl	8000874 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001112:	2002      	movs	r0, #2
 8001114:	f7ff fb66 	bl	80007e4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001118:	bf00      	nop
 800111a:	f7ff fb77 	bl	800080c <LL_RCC_GetSysClkSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b08      	cmp	r3, #8
 8001122:	d1fa      	bne.n	800111a <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(64000000);
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <SystemClock_Config+0x84>)
 8001126:	f001 fecb 	bl	8002ec0 <LL_Init1msTick>
  LL_SetSystemCoreClock(64000000);
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <SystemClock_Config+0x84>)
 800112c:	f001 fefa 	bl	8002f24 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_8);
 8001130:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001134:	f7ff fbb2 	bl	800089c <LL_RCC_SetADCClockSource>
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	03d09000 	.word	0x03d09000

08001140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	; 0x38
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001172:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001176:	f7ff fc0d 	bl	8000994 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800117a:	2004      	movs	r0, #4
 800117c:	f7ff fc0a 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001184:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	486b      	ldr	r0, [pc, #428]	; (800133c <MX_ADC1_Init+0x1fc>)
 8001190:	f001 f828 	bl	80021e4 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001194:	2200      	movs	r2, #0
 8001196:	2101      	movs	r1, #1
 8001198:	4869      	ldr	r0, [pc, #420]	; (8001340 <MX_ADC1_Init+0x200>)
 800119a:	f7ff f96d 	bl	8000478 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 800119e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a2:	2101      	movs	r1, #1
 80011a4:	4866      	ldr	r0, [pc, #408]	; (8001340 <MX_ADC1_Init+0x200>)
 80011a6:	f7ff fa35 	bl	8000614 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80011aa:	2220      	movs	r2, #32
 80011ac:	2101      	movs	r1, #1
 80011ae:	4864      	ldr	r0, [pc, #400]	; (8001340 <MX_ADC1_Init+0x200>)
 80011b0:	f7ff f986 	bl	80004c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2101      	movs	r1, #1
 80011b8:	4861      	ldr	r0, [pc, #388]	; (8001340 <MX_ADC1_Init+0x200>)
 80011ba:	f7ff f9a3 	bl	8000504 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	2101      	movs	r1, #1
 80011c2:	485f      	ldr	r0, [pc, #380]	; (8001340 <MX_ADC1_Init+0x200>)
 80011c4:	f7ff f9c0 	bl	8000548 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80011c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011cc:	2101      	movs	r1, #1
 80011ce:	485c      	ldr	r0, [pc, #368]	; (8001340 <MX_ADC1_Init+0x200>)
 80011d0:	f7ff f9dc 	bl	800058c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80011d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d8:	2101      	movs	r1, #1
 80011da:	4859      	ldr	r0, [pc, #356]	; (8001340 <MX_ADC1_Init+0x200>)
 80011dc:	f7ff f9f8 	bl	80005d0 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 80011e0:	2208      	movs	r2, #8
 80011e2:	2101      	movs	r1, #1
 80011e4:	4856      	ldr	r0, [pc, #344]	; (8001340 <MX_ADC1_Init+0x200>)
 80011e6:	f7ff fa37 	bl	8000658 <LL_DMA_SetDataLength>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &ADC_Value);
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <MX_ADC1_Init+0x204>)
 80011ec:	461a      	mov	r2, r3
 80011ee:	2101      	movs	r1, #1
 80011f0:	4853      	ldr	r0, [pc, #332]	; (8001340 <MX_ADC1_Init+0x200>)
 80011f2:	f7ff fa53 	bl	800069c <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 80011f6:	4a54      	ldr	r2, [pc, #336]	; (8001348 <MX_ADC1_Init+0x208>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	4851      	ldr	r0, [pc, #324]	; (8001340 <MX_ADC1_Init+0x200>)
 80011fc:	f7ff fa66 	bl	80006cc <LL_DMA_SetPeriphAddress>

    LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8001200:	2101      	movs	r1, #1
 8001202:	484f      	ldr	r0, [pc, #316]	; (8001340 <MX_ADC1_Init+0x200>)
 8001204:	f7ff f91a 	bl	800043c <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001208:	2300      	movs	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800120c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001216:	4619      	mov	r1, r3
 8001218:	484c      	ldr	r0, [pc, #304]	; (800134c <MX_ADC1_Init+0x20c>)
 800121a:	f000 fdb1 	bl	8001d80 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	4619      	mov	r1, r3
 8001228:	4848      	ldr	r0, [pc, #288]	; (800134c <MX_ADC1_Init+0x20c>)
 800122a:	f000 fd77 	bl	8001d1c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800122e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8001232:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8001234:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001238:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800123e:	2302      	movs	r3, #2
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4619      	mov	r1, r3
 800124e:	483f      	ldr	r0, [pc, #252]	; (800134c <MX_ADC1_Init+0x20c>)
 8001250:	f000 fdbd 	bl	8001dce <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125c:	483b      	ldr	r0, [pc, #236]	; (800134c <MX_ADC1_Init+0x20c>)
 800125e:	f7ff f81f 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001262:	2200      	movs	r2, #0
 8001264:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001268:	4838      	ldr	r0, [pc, #224]	; (800134c <MX_ADC1_Init+0x20c>)
 800126a:	f7ff f85e 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 800126e:	4a38      	ldr	r2, [pc, #224]	; (8001350 <MX_ADC1_Init+0x210>)
 8001270:	f240 2105 	movw	r1, #517	; 0x205
 8001274:	4835      	ldr	r0, [pc, #212]	; (800134c <MX_ADC1_Init+0x20c>)
 8001276:	f7ff f813 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800127a:	2200      	movs	r2, #0
 800127c:	4934      	ldr	r1, [pc, #208]	; (8001350 <MX_ADC1_Init+0x210>)
 800127e:	4833      	ldr	r0, [pc, #204]	; (800134c <MX_ADC1_Init+0x20c>)
 8001280:	f7ff f853 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8001284:	4a33      	ldr	r2, [pc, #204]	; (8001354 <MX_ADC1_Init+0x214>)
 8001286:	f240 210a 	movw	r1, #522	; 0x20a
 800128a:	4830      	ldr	r0, [pc, #192]	; (800134c <MX_ADC1_Init+0x20c>)
 800128c:	f7ff f808 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001290:	2200      	movs	r2, #0
 8001292:	4930      	ldr	r1, [pc, #192]	; (8001354 <MX_ADC1_Init+0x214>)
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <MX_ADC1_Init+0x20c>)
 8001296:	f7ff f848 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <MX_ADC1_Init+0x218>)
 800129c:	f240 210f 	movw	r1, #527	; 0x20f
 80012a0:	482a      	ldr	r0, [pc, #168]	; (800134c <MX_ADC1_Init+0x20c>)
 80012a2:	f7fe fffd 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012a6:	2200      	movs	r2, #0
 80012a8:	492b      	ldr	r1, [pc, #172]	; (8001358 <MX_ADC1_Init+0x218>)
 80012aa:	4828      	ldr	r0, [pc, #160]	; (800134c <MX_ADC1_Init+0x20c>)
 80012ac:	f7ff f83d 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 80012b0:	4a2a      	ldr	r2, [pc, #168]	; (800135c <MX_ADC1_Init+0x21c>)
 80012b2:	f44f 7105 	mov.w	r1, #532	; 0x214
 80012b6:	4825      	ldr	r0, [pc, #148]	; (800134c <MX_ADC1_Init+0x20c>)
 80012b8:	f7fe fff2 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012bc:	2200      	movs	r2, #0
 80012be:	4927      	ldr	r1, [pc, #156]	; (800135c <MX_ADC1_Init+0x21c>)
 80012c0:	4822      	ldr	r0, [pc, #136]	; (800134c <MX_ADC1_Init+0x20c>)
 80012c2:	f7ff f832 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 80012c6:	4a26      	ldr	r2, [pc, #152]	; (8001360 <MX_ADC1_Init+0x220>)
 80012c8:	f240 2119 	movw	r1, #537	; 0x219
 80012cc:	481f      	ldr	r0, [pc, #124]	; (800134c <MX_ADC1_Init+0x20c>)
 80012ce:	f7fe ffe7 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012d2:	2200      	movs	r2, #0
 80012d4:	4922      	ldr	r1, [pc, #136]	; (8001360 <MX_ADC1_Init+0x220>)
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <MX_ADC1_Init+0x20c>)
 80012d8:	f7ff f827 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <MX_ADC1_Init+0x224>)
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	481a      	ldr	r0, [pc, #104]	; (800134c <MX_ADC1_Init+0x20c>)
 80012e4:	f7fe ffdc 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012e8:	2200      	movs	r2, #0
 80012ea:	491e      	ldr	r1, [pc, #120]	; (8001364 <MX_ADC1_Init+0x224>)
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_ADC1_Init+0x20c>)
 80012ee:	f7ff f81c 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <MX_ADC1_Init+0x228>)
 80012f4:	f240 1105 	movw	r1, #261	; 0x105
 80012f8:	4814      	ldr	r0, [pc, #80]	; (800134c <MX_ADC1_Init+0x20c>)
 80012fa:	f7fe ffd1 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80012fe:	2200      	movs	r2, #0
 8001300:	4919      	ldr	r1, [pc, #100]	; (8001368 <MX_ADC1_Init+0x228>)
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_ADC1_Init+0x20c>)
 8001304:	f7ff f811 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8001308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <MX_ADC1_Init+0x20c>)
 800130e:	f7fe fffa 	bl	8000306 <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_ADC1_Init+0x20c>)
 8001314:	f7ff f852 	bl	80003bc <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_ADC1_Init+0x20c>)
 800131a:	f7ff f85e 	bl	80003da <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 800131e:	bf00      	nop
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <MX_ADC1_Init+0x20c>)
 8001322:	f7ff f869 	bl	80003f8 <LL_ADC_IsCalibrationOnGoing>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f9      	bne.n	8001320 <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 800132c:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_ADC1_Init+0x20c>)
 800132e:	f7ff f875 	bl	800041c <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	3738      	adds	r7, #56	; 0x38
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010800 	.word	0x40010800
 8001340:	40020000 	.word	0x40020000
 8001344:	20000020 	.word	0x20000020
 8001348:	4001244c 	.word	0x4001244c
 800134c:	40012400 	.word	0x40012400
 8001350:	02300001 	.word	0x02300001
 8001354:	02600002 	.word	0x02600002
 8001358:	02900003 	.word	0x02900003
 800135c:	02c00004 	.word	0x02c00004
 8001360:	02f00005 	.word	0x02f00005
 8001364:	03200006 	.word	0x03200006
 8001368:	03500007 	.word	0x03500007

0800136c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001392:	2008      	movs	r0, #8
 8001394:	f7ff fafe 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_I2C1_Init+0x9c>)
 800139a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800139c:	2309      	movs	r3, #9
 800139e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80013a4:	2304      	movs	r3, #4
 80013a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <MX_I2C1_Init+0xa0>)
 80013ae:	f000 ff19 	bl	80021e4 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 80013b2:	f7ff fddf 	bl	8000f74 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80013b6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013ba:	f7ff fad3 	bl	8000964 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80013be:	4814      	ldr	r0, [pc, #80]	; (8001410 <MX_I2C1_Init+0xa4>)
 80013c0:	f7ff f9cc 	bl	800075c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80013c4:	4812      	ldr	r0, [pc, #72]	; (8001410 <MX_I2C1_Init+0xa4>)
 80013c6:	f7ff f9a8 	bl	800071a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_I2C1_Init+0xa4>)
 80013cc:	f7ff f996 	bl	80006fc <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C1_Init+0xa8>)
 80013d6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80013e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80013e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_I2C1_Init+0xa4>)
 80013f4:	f001 f842 	bl	800247c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80013f8:	2100      	movs	r1, #0
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_I2C1_Init+0xa4>)
 80013fc:	f7ff f99c 	bl	8000738 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	04030003 	.word	0x04030003
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40005400 	.word	0x40005400
 8001414:	000186a0 	.word	0x000186a0

08001418 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b098      	sub	sp, #96	; 0x60
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800141e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800142e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001432:	2220      	movs	r2, #32
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fda6 	bl	8002f88 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800145c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001460:	f7ff fa98 	bl	8000994 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800146a:	2300      	movs	r3, #0
 800146c:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 6400;
 800146e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001472:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800147e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001482:	4619      	mov	r1, r3
 8001484:	4848      	ldr	r0, [pc, #288]	; (80015a8 <MX_TIM1_Init+0x190>)
 8001486:	f001 f9a1 	bl	80027cc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 800148a:	4847      	ldr	r0, [pc, #284]	; (80015a8 <MX_TIM1_Init+0x190>)
 800148c:	f7ff fac9 	bl	8000a22 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001490:	2101      	movs	r1, #1
 8001492:	4845      	ldr	r0, [pc, #276]	; (80015a8 <MX_TIM1_Init+0x190>)
 8001494:	f7ff fb36 	bl	8000b04 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001498:	2360      	movs	r3, #96	; 0x60
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 3200;
 80014a4:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_HIGH;
 80014b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80014bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c0:	461a      	mov	r2, r3
 80014c2:	2101      	movs	r1, #1
 80014c4:	4838      	ldr	r0, [pc, #224]	; (80015a8 <MX_TIM1_Init+0x190>)
 80014c6:	f001 f9df 	bl	8002888 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80014ca:	2101      	movs	r1, #1
 80014cc:	4836      	ldr	r0, [pc, #216]	; (80015a8 <MX_TIM1_Init+0x190>)
 80014ce:	f7ff fad7 	bl	8000a80 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80014d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d6:	4834      	ldr	r0, [pc, #208]	; (80015a8 <MX_TIM1_Init+0x190>)
 80014d8:	f7ff fb14 	bl	8000b04 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 3199;
 80014e4:	f640 437f 	movw	r3, #3199	; 0xc7f
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80014ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f2:	461a      	mov	r2, r3
 80014f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f8:	482b      	ldr	r0, [pc, #172]	; (80015a8 <MX_TIM1_Init+0x190>)
 80014fa:	f001 f9c5 	bl	8002888 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	4829      	ldr	r0, [pc, #164]	; (80015a8 <MX_TIM1_Init+0x190>)
 8001504:	f7ff fabc 	bl	8000a80 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 8001508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150c:	4826      	ldr	r0, [pc, #152]	; (80015a8 <MX_TIM1_Init+0x190>)
 800150e:	f7ff faf9 	bl	8000b04 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800151e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001522:	461a      	mov	r2, r3
 8001524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001528:	481f      	ldr	r0, [pc, #124]	; (80015a8 <MX_TIM1_Init+0x190>)
 800152a:	f001 f9ad 	bl	8002888 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	481d      	ldr	r0, [pc, #116]	; (80015a8 <MX_TIM1_Init+0x190>)
 8001534:	f7ff faa4 	bl	8000a80 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001538:	2100      	movs	r1, #0
 800153a:	481b      	ldr	r0, [pc, #108]	; (80015a8 <MX_TIM1_Init+0x190>)
 800153c:	f7ff fc84 	bl	8000e48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001540:	4819      	ldr	r0, [pc, #100]	; (80015a8 <MX_TIM1_Init+0x190>)
 8001542:	f7ff fc93 	bl	8000e6c <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <MX_TIM1_Init+0x190>)
 800156e:	f001 f9c3 	bl	80028f8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableAllOutputs(TIM1);
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_TIM1_Init+0x190>)
 8001574:	f7ff fc89 	bl	8000e8a <LL_TIM_EnableAllOutputs>


  LL_TIM_EnableCounter(TIM1);
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <MX_TIM1_Init+0x190>)
 800157a:	f7ff fa43 	bl	8000a04 <LL_TIM_EnableCounter>
  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800157e:	2004      	movs	r0, #4
 8001580:	f7ff fa08 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  PA11   ------> TIM1_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_TIM1_Init+0x194>)
 8001586:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001588:	2309      	movs	r3, #9
 800158a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM1_Init+0x198>)
 800159a:	f000 fe23 	bl	80021e4 <LL_GPIO_Init>

}
 800159e:	bf00      	nop
 80015a0:	3760      	adds	r7, #96	; 0x60
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012c00 	.word	0x40012c00
 80015ac:	040d000d 	.word	0x040d000d
 80015b0:	40010800 	.word	0x40010800

080015b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff f9c3 	bl	8000964 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80015de:	2004      	movs	r0, #4
 80015e0:	f7ff f9d8 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80015e4:	2008      	movs	r0, #8
 80015e6:	f7ff f9d5 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80015ea:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <MX_TIM2_Init+0x10c>)
 80015ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80015ee:	2304      	movs	r3, #4
 80015f0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	4833      	ldr	r0, [pc, #204]	; (80016c4 <MX_TIM2_Init+0x110>)
 80015f8:	f000 fdf4 	bl	80021e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80015fc:	f640 0308 	movw	r3, #2056	; 0x808
 8001600:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001602:	2304      	movs	r3, #4
 8001604:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	463b      	mov	r3, r7
 8001608:	4619      	mov	r1, r3
 800160a:	482f      	ldr	r0, [pc, #188]	; (80016c8 <MX_TIM2_Init+0x114>)
 800160c:	f000 fdea 	bl	80021e4 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X2_TI1);
 8001610:	2101      	movs	r1, #1
 8001612:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001616:	f7ff fc05 	bl	8000e24 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800161a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800161e:	2101      	movs	r1, #1
 8001620:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001624:	f7ff faca 	bl	8000bbc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001628:	2200      	movs	r2, #0
 800162a:	2101      	movs	r1, #1
 800162c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001630:	f7ff fb0e 	bl	8000c50 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001634:	2200      	movs	r2, #0
 8001636:	2101      	movs	r1, #1
 8001638:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800163c:	f7ff fb52 	bl	8000ce4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001640:	2200      	movs	r2, #0
 8001642:	2101      	movs	r1, #1
 8001644:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001648:	f7ff fb96 	bl	8000d78 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800164c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001650:	2110      	movs	r1, #16
 8001652:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001656:	f7ff fab1 	bl	8000bbc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800165a:	2200      	movs	r2, #0
 800165c:	2110      	movs	r1, #16
 800165e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001662:	f7ff faf5 	bl	8000c50 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001666:	2200      	movs	r2, #0
 8001668:	2110      	movs	r1, #16
 800166a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800166e:	f7ff fb39 	bl	8000ce4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001672:	2200      	movs	r2, #0
 8001674:	2110      	movs	r1, #16
 8001676:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800167a:	f7ff fb7d 	bl	8000d78 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8001686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168a:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800169a:	f001 f897 	bl	80027cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800169e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016a2:	f7ff f9cd 	bl	8000a40 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80016a6:	2100      	movs	r1, #0
 80016a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016ac:	f7ff fbcc 	bl	8000e48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80016b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016b4:	f7ff fbda 	bl	8000e6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	04800080 	.word	0x04800080
 80016c4:	40010800 	.word	0x40010800
 80016c8:	40010c00 	.word	0x40010c00

080016cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	463b      	mov	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80016f0:	2002      	movs	r0, #2
 80016f2:	f7ff f937 	bl	8000964 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80016f6:	2008      	movs	r0, #8
 80016f8:	f7ff f94c 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80016fc:	f243 0330 	movw	r3, #12336	; 0x3030
 8001700:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001702:	2304      	movs	r3, #4
 8001704:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	463b      	mov	r3, r7
 8001708:	4619      	mov	r1, r3
 800170a:	4827      	ldr	r0, [pc, #156]	; (80017a8 <MX_TIM3_Init+0xdc>)
 800170c:	f000 fd6a 	bl	80021e4 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 8001710:	2101      	movs	r1, #1
 8001712:	4826      	ldr	r0, [pc, #152]	; (80017ac <MX_TIM3_Init+0xe0>)
 8001714:	f7ff fb86 	bl	8000e24 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001718:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171c:	2101      	movs	r1, #1
 800171e:	4823      	ldr	r0, [pc, #140]	; (80017ac <MX_TIM3_Init+0xe0>)
 8001720:	f7ff fa4c 	bl	8000bbc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001724:	2200      	movs	r2, #0
 8001726:	2101      	movs	r1, #1
 8001728:	4820      	ldr	r0, [pc, #128]	; (80017ac <MX_TIM3_Init+0xe0>)
 800172a:	f7ff fa91 	bl	8000c50 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800172e:	2200      	movs	r2, #0
 8001730:	2101      	movs	r1, #1
 8001732:	481e      	ldr	r0, [pc, #120]	; (80017ac <MX_TIM3_Init+0xe0>)
 8001734:	f7ff fad6 	bl	8000ce4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001738:	2200      	movs	r2, #0
 800173a:	2101      	movs	r1, #1
 800173c:	481b      	ldr	r0, [pc, #108]	; (80017ac <MX_TIM3_Init+0xe0>)
 800173e:	f7ff fb1b 	bl	8000d78 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001742:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001746:	2110      	movs	r1, #16
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <MX_TIM3_Init+0xe0>)
 800174a:	f7ff fa37 	bl	8000bbc <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800174e:	2200      	movs	r2, #0
 8001750:	2110      	movs	r1, #16
 8001752:	4816      	ldr	r0, [pc, #88]	; (80017ac <MX_TIM3_Init+0xe0>)
 8001754:	f7ff fa7c 	bl	8000c50 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001758:	2200      	movs	r2, #0
 800175a:	2110      	movs	r1, #16
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <MX_TIM3_Init+0xe0>)
 800175e:	f7ff fac1 	bl	8000ce4 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001762:	2200      	movs	r2, #0
 8001764:	2110      	movs	r1, #16
 8001766:	4811      	ldr	r0, [pc, #68]	; (80017ac <MX_TIM3_Init+0xe0>)
 8001768:	f7ff fb06 	bl	8000d78 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8001774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001778:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4809      	ldr	r0, [pc, #36]	; (80017ac <MX_TIM3_Init+0xe0>)
 8001786:	f001 f821 	bl	80027cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <MX_TIM3_Init+0xe0>)
 800178c:	f7ff f958 	bl	8000a40 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001790:	2100      	movs	r1, #0
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_TIM3_Init+0xe0>)
 8001794:	f7ff fb58 	bl	8000e48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_TIM3_Init+0xe0>)
 800179a:	f7ff fb67 	bl	8000e6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40010c00 	.word	0x40010c00
 80017ac:	40000400 	.word	0x40000400

080017b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80017c4:	2004      	movs	r0, #4
 80017c6:	f7ff f8cd 	bl	8000964 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017ca:	f7fe fce3 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fd31 	bl	800023c <NVIC_EncodePriority>
 80017da:	4603      	mov	r3, r0
 80017dc:	4619      	mov	r1, r3
 80017de:	201e      	movs	r0, #30
 80017e0:	f7fe fd02 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 80017e4:	201e      	movs	r0, #30
 80017e6:	f7fe fce3 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 9999;
 80017ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80017ee:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 19999;
 80017f4:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80017f8:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV4;
 80017fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fe:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4619      	mov	r1, r3
 8001804:	480a      	ldr	r0, [pc, #40]	; (8001830 <MX_TIM4_Init+0x80>)
 8001806:	f000 ffe1 	bl	80027cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <MX_TIM4_Init+0x80>)
 800180c:	f7ff f918 	bl	8000a40 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001810:	2100      	movs	r1, #0
 8001812:	4807      	ldr	r0, [pc, #28]	; (8001830 <MX_TIM4_Init+0x80>)
 8001814:	f7ff faf2 	bl	8000dfc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001818:	2100      	movs	r1, #0
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_TIM4_Init+0x80>)
 800181c:	f7ff fb14 	bl	8000e48 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <MX_TIM4_Init+0x80>)
 8001822:	f7ff fb23 	bl	8000e6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40000800 	.word	0x40000800

08001834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	463b      	mov	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800185c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001860:	f7ff f898 	bl	8000994 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001864:	2008      	movs	r0, #8
 8001866:	f7ff f895 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800186a:	f244 0340 	movw	r3, #16448	; 0x4040
 800186e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001870:	2309      	movs	r3, #9
 8001872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	481e      	ldr	r0, [pc, #120]	; (80018fc <MX_USART1_UART_Init+0xc8>)
 8001882:	f000 fcaf 	bl	80021e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001886:	f248 0380 	movw	r3, #32896	; 0x8080
 800188a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800188c:	2304      	movs	r3, #4
 800188e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	463b      	mov	r3, r7
 8001892:	4619      	mov	r1, r3
 8001894:	4819      	ldr	r0, [pc, #100]	; (80018fc <MX_USART1_UART_Init+0xc8>)
 8001896:	f000 fca5 	bl	80021e4 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 800189a:	f7ff fb7b 	bl	8000f94 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800189e:	f7fe fc79 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fcc7 	bl	800023c <NVIC_EncodePriority>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	2025      	movs	r0, #37	; 0x25
 80018b4:	f7fe fc98 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80018b8:	2025      	movs	r0, #37	; 0x25
 80018ba:	f7fe fc79 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80018be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018c2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80018d0:	230c      	movs	r3, #12
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4807      	ldr	r0, [pc, #28]	; (8001900 <MX_USART1_UART_Init+0xcc>)
 80018e4:	f001 fa72 	bl	8002dcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_USART1_UART_Init+0xcc>)
 80018ea:	f7ff faec 	bl	8000ec6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80018ee:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_USART1_UART_Init+0xcc>)
 80018f0:	f7ff fada 	bl	8000ea8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3730      	adds	r7, #48	; 0x30
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40010c00 	.word	0x40010c00
 8001900:	40013800 	.word	0x40013800

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff f813 	bl	8000934 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800190e:	f7fe fc41 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8001912:	4603      	mov	r3, r0
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc8f 	bl	800023c <NVIC_EncodePriority>
 800191e:	4603      	mov	r3, r0
 8001920:	4619      	mov	r1, r3
 8001922:	200b      	movs	r0, #11
 8001924:	f7fe fc60 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001928:	200b      	movs	r0, #11
 800192a:	f7fe fc41 	bl	80001b0 <__NVIC_EnableIRQ>

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001952:	2010      	movs	r0, #16
 8001954:	f7ff f81e 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001958:	2004      	movs	r0, #4
 800195a:	f7ff f81b 	bl	8000994 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800195e:	2008      	movs	r0, #8
 8001960:	f7ff f818 	bl	8000994 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15);
 8001964:	4945      	ldr	r1, [pc, #276]	; (8001a7c <MX_GPIO_Init+0x148>)
 8001966:	4846      	ldr	r0, [pc, #280]	; (8001a80 <MX_GPIO_Init+0x14c>)
 8001968:	f7ff faf4 	bl	8000f54 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800196c:	4943      	ldr	r1, [pc, #268]	; (8001a7c <MX_GPIO_Init+0x148>)
 800196e:	4845      	ldr	r0, [pc, #276]	; (8001a84 <MX_GPIO_Init+0x150>)
 8001970:	f7ff faf0 	bl	8000f54 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001974:	4944      	ldr	r1, [pc, #272]	; (8001a88 <MX_GPIO_Init+0x154>)
 8001976:	4845      	ldr	r0, [pc, #276]	; (8001a8c <MX_GPIO_Init+0x158>)
 8001978:	f7ff faec 	bl	8000f54 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE13);
 800197c:	4944      	ldr	r1, [pc, #272]	; (8001a90 <MX_GPIO_Init+0x15c>)
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff fb2c 	bl	8000fdc <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE14);
 8001984:	4943      	ldr	r1, [pc, #268]	; (8001a94 <MX_GPIO_Init+0x160>)
 8001986:	2002      	movs	r0, #2
 8001988:	f7ff fb28 	bl	8000fdc <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 800198c:	4942      	ldr	r1, [pc, #264]	; (8001a98 <MX_GPIO_Init+0x164>)
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff fb24 	bl	8000fdc <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001998:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800199a:	2301      	movs	r3, #1
 800199c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800199e:	2300      	movs	r3, #0
 80019a0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80019a2:	2301      	movs	r3, #1
 80019a4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fae6 	bl	8001f7c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80019b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b4:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80019b6:	2301      	movs	r3, #1
 80019b8:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80019ba:	2300      	movs	r3, #0
 80019bc:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80019be:	2301      	movs	r3, #1
 80019c0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fad8 	bl	8001f7c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80019d2:	2301      	movs	r3, #1
 80019d4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80019da:	2301      	movs	r3, #1
 80019dc:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 faca 	bl	8001f7c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 80019e8:	2204      	movs	r2, #4
 80019ea:	492c      	ldr	r1, [pc, #176]	; (8001a9c <MX_GPIO_Init+0x168>)
 80019ec:	4824      	ldr	r0, [pc, #144]	; (8001a80 <MX_GPIO_Init+0x14c>)
 80019ee:	f7ff fa7f 	bl	8000ef0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 80019f2:	2204      	movs	r2, #4
 80019f4:	492a      	ldr	r1, [pc, #168]	; (8001aa0 <MX_GPIO_Init+0x16c>)
 80019f6:	4822      	ldr	r0, [pc, #136]	; (8001a80 <MX_GPIO_Init+0x14c>)
 80019f8:	f7ff fa7a 	bl	8000ef0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 80019fc:	2204      	movs	r2, #4
 80019fe:	4929      	ldr	r1, [pc, #164]	; (8001aa4 <MX_GPIO_Init+0x170>)
 8001a00:	4820      	ldr	r0, [pc, #128]	; (8001a84 <MX_GPIO_Init+0x150>)
 8001a02:	f7ff fa75 	bl	8000ef0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_GPIO_Init+0x148>)
 8001a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4819      	ldr	r0, [pc, #100]	; (8001a80 <MX_GPIO_Init+0x14c>)
 8001a1c:	f000 fbe2 	bl	80021e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_GPIO_Init+0x148>)
 8001a22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a24:	2301      	movs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <MX_GPIO_Init+0x150>)
 8001a36:	f000 fbd5 	bl	80021e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <MX_GPIO_Init+0x154>)
 8001a3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a42:	2302      	movs	r3, #2
 8001a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480f      	ldr	r0, [pc, #60]	; (8001a8c <MX_GPIO_Init+0x158>)
 8001a50:	f000 fbc8 	bl	80021e4 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a54:	f7fe fb9e 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fbec 	bl	800023c <NVIC_EncodePriority>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4619      	mov	r1, r3
 8001a68:	2028      	movs	r0, #40	; 0x28
 8001a6a:	f7fe fbbd 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a6e:	2028      	movs	r0, #40	; 0x28
 8001a70:	f7fe fb9e 	bl	80001b0 <__NVIC_EnableIRQ>

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	04800080 	.word	0x04800080
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	04020002 	.word	0x04020002
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	00f00003 	.word	0x00f00003
 8001a94:	0f000003 	.word	0x0f000003
 8001a98:	000f0003 	.word	0x000f0003
 8001a9c:	04200020 	.word	0x04200020
 8001aa0:	04400040 	.word	0x04400040
 8001aa4:	04100010 	.word	0x04100010

08001aa8 <USR1_Motor1_EnablePWM>:

/* USER CODE BEGIN 4 */

void USR1_Motor1_EnablePWM(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 8001aac:	2101      	movs	r1, #1
 8001aae:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USR1_Motor1_EnablePWM+0x10>)
 8001ab0:	f7fe ffd5 	bl	8000a5e <LL_TIM_CC_EnableChannel>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40012c00 	.word	0x40012c00

08001abc <USR1_Motor2_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void USR1_Motor2_EnablePWM(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 8001ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <USR1_Motor2_EnablePWM+0x14>)
 8001ac6:	f7fe ffca 	bl	8000a5e <LL_TIM_CC_EnableChannel>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40012c00 	.word	0x40012c00

08001ad4 <USR1_Motor1_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void USR1_Motor1_SetPWM(uint16_t PWMVal) // PWM Val between 0-6399
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH1(TIM1, PWMVal);
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4803      	ldr	r0, [pc, #12]	; (8001af0 <USR1_Motor1_SetPWM+0x1c>)
 8001ae4:	f7ff f850 	bl	8000b88 <LL_TIM_OC_SetCompareCH1>
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40012c00 	.word	0x40012c00

08001af4 <USR1_Motor2_SetPWM>:
void USR1_Motor2_SetPWM(uint16_t PWMVal) // PWM Val between 0-6399
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH3(TIM1,PWMVal);
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4803      	ldr	r0, [pc, #12]	; (8001b10 <USR1_Motor2_SetPWM+0x1c>)
 8001b04:	f7ff f84d 	bl	8000ba2 <LL_TIM_OC_SetCompareCH3>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40012c00 	.word	0x40012c00

08001b14 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40010400 	.word	0x40010400

08001b40 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001b48:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6153      	str	r3, [r2, #20]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	40010400 	.word	0x40010400

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <HardFault_Handler+0x4>

08001b6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <MemManage_Handler+0x4>

08001b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <BusFault_Handler+0x4>

08001b7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <UsageFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8001bd8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bdc:	f7ff ff9a 	bl	8001b14 <LL_EXTI_IsActiveFlag_0_31>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8001be6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bea:	f7ff ffa9 	bl	8001b40 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */

    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001bee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bf2:	f7ff ff8f 	bl	8001b14 <LL_EXTI_IsActiveFlag_0_31>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001bfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c00:	f7ff ff9e 	bl	8001b40 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001c04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c08:	f7ff ff84 	bl	8001b14 <LL_EXTI_IsActiveFlag_0_31>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001c12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c16:	f7ff ff93 	bl	8001b40 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <SystemInit+0x5c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <SystemInit+0x5c>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <SystemInit+0x5c>)
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4911      	ldr	r1, [pc, #68]	; (8001c7c <SystemInit+0x5c>)
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <SystemInit+0x60>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <SystemInit+0x5c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <SystemInit+0x5c>)
 8001c42:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <SystemInit+0x5c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SystemInit+0x5c>)
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c56:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <SystemInit+0x5c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <SystemInit+0x5c>)
 8001c5e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001c62:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SystemInit+0x5c>)
 8001c66:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001c6a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <SystemInit+0x64>)
 8001c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c72:	609a      	str	r2, [r3, #8]
#endif 
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	f8ff0000 	.word	0xf8ff0000
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c8a:	e003      	b.n	8001c94 <LoopCopyDataInit>

08001c8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c92:	3104      	adds	r1, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c94:	480a      	ldr	r0, [pc, #40]	; (8001cc0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c9c:	d3f6      	bcc.n	8001c8c <CopyDataInit>
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ca0:	e002      	b.n	8001ca8 <LoopFillZerobss>

08001ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ca4:	f842 3b04 	str.w	r3, [r2], #4

08001ca8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001caa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001cac:	d3f9      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cae:	f7ff ffb7 	bl	8001c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f001 f945 	bl	8002f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cb6:	f7ff f9bf 	bl	8001038 <main>
  bx lr
 8001cba:	4770      	bx	lr
  ldr r3, =_sidata
 8001cbc:	08002ff8 	.word	0x08002ff8
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001cc4:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001cc8:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001ccc:	20000030 	.word	0x20000030

08001cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC1_2_IRQHandler>

08001cd2 <LL_ADC_REG_SetSequencerLength>:
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_IsEnabled>:
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
	...

08001d1c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001d2a:	4813      	ldr	r0, [pc, #76]	; (8001d78 <LL_ADC_CommonInit+0x5c>)
 8001d2c:	f7ff ffe3 	bl	8001cf6 <LL_ADC_IsEnabled>
 8001d30:	4604      	mov	r4, r0
 8001d32:	4812      	ldr	r0, [pc, #72]	; (8001d7c <LL_ADC_CommonInit+0x60>)
 8001d34:	f7ff ffdf 	bl	8001cf6 <LL_ADC_IsEnabled>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d114      	bne.n	8001d6a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	e008      	b.n	8001d6e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	e001      	b.n	8001d6e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	40012400 	.word	0x40012400
 8001d7c:	40012800 	.word	0x40012800

08001d80 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffb1 	bl	8001cf6 <LL_ADC_IsEnabled>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d112      	bne.n	8001dc0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	e001      	b.n	8001dc4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff8a 	bl	8001cf6 <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d131      	bne.n	8001e4c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00c      	beq.n	8001e0a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	e008      	b.n	8001e1c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8001e24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	6811      	ldr	r1, [r2, #0]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	68d2      	ldr	r2, [r2, #12]
 8001e30:	4311      	orrs	r1, r2
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	6912      	ldr	r2, [r2, #16]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4619      	mov	r1, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff44 	bl	8001cd2 <LL_ADC_REG_SetSequencerLength>
 8001e4a:	e001      	b.n	8001e50 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <LL_EXTI_EnableIT_0_31>:
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <LL_EXTI_EnableIT_0_31+0x20>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4904      	ldr	r1, [pc, #16]	; (8001e7c <LL_EXTI_EnableIT_0_31+0x20>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	600b      	str	r3, [r1, #0]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40010400 	.word	0x40010400

08001e80 <LL_EXTI_DisableIT_0_31>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <LL_EXTI_DisableIT_0_31+0x20>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <LL_EXTI_DisableIT_0_31+0x20>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <LL_EXTI_EnableEvent_0_31>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <LL_EXTI_DisableEvent_0_31>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4903      	ldr	r1, [pc, #12]	; (8001ee8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40010400 	.word	0x40010400

08001eec <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4904      	ldr	r1, [pc, #16]	; (8001f0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40010400 	.word	0x40010400

08001f10 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	4903      	ldr	r1, [pc, #12]	; (8001f30 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40010400 	.word	0x40010400

08001f34 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40010400 	.word	0x40010400

08001f58 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	4903      	ldr	r1, [pc, #12]	; (8001f78 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60cb      	str	r3, [r1, #12]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	40010400 	.word	0x40010400

08001f7c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d060      	beq.n	8002052 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d067      	beq.n	8002068 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	795b      	ldrb	r3, [r3, #5]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d00e      	beq.n	8001fbe <LL_EXTI_Init+0x42>
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d017      	beq.n	8001fd4 <LL_EXTI_Init+0x58>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d120      	bne.n	8001fea <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff8b 	bl	8001ec8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff50 	bl	8001e5c <LL_EXTI_EnableIT_0_31>
          break;
 8001fbc:	e018      	b.n	8001ff0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff5c 	bl	8001e80 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff69 	bl	8001ea4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001fd2:	e00d      	b.n	8001ff0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff3f 	bl	8001e5c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff5e 	bl	8001ea4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001fe8:	e002      	b.n	8001ff0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
          break;
 8001fee:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	799b      	ldrb	r3, [r3, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d037      	beq.n	8002068 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	799b      	ldrb	r3, [r3, #6]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d00e      	beq.n	800201e <LL_EXTI_Init+0xa2>
 8002000:	2b03      	cmp	r3, #3
 8002002:	d017      	beq.n	8002034 <LL_EXTI_Init+0xb8>
 8002004:	2b01      	cmp	r3, #1
 8002006:	d120      	bne.n	800204a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ffa3 	bl	8001f58 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff68 	bl	8001eec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800201c:	e025      	b.n	800206a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff74 	bl	8001f10 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff81 	bl	8001f34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002032:	e01a      	b.n	800206a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff57 	bl	8001eec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff76 	bl	8001f34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002048:	e00f      	b.n	800206a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
            break;
 800204e:	bf00      	nop
 8002050:	e00b      	b.n	800206a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff12 	bl	8001e80 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff31 	bl	8001ec8 <LL_EXTI_DisableEvent_0_31>
 8002066:	e000      	b.n	800206a <LL_EXTI_Init+0xee>
      }
 8002068:	bf00      	nop
  }
  return status;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <LL_GPIO_SetPinMode>:
{
 8002074:	b490      	push	{r4, r7}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	0e1b      	lsrs	r3, r3, #24
 8002088:	4413      	add	r3, r2
 800208a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	613b      	str	r3, [r7, #16]
  return result;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	210f      	movs	r1, #15
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	401a      	ands	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	61bb      	str	r3, [r7, #24]
  return result;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	6023      	str	r3, [r4, #0]
}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc90      	pop	{r4, r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_GPIO_SetPinSpeed>:
{
 80020d8:	b490      	push	{r4, r7}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	0e1b      	lsrs	r3, r3, #24
 80020ec:	4413      	add	r3, r2
 80020ee:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	613b      	str	r3, [r7, #16]
  return result;
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	2103      	movs	r1, #3
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	401a      	ands	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	61bb      	str	r3, [r7, #24]
  return result;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	4313      	orrs	r3, r2
 8002130:	6023      	str	r3, [r4, #0]
}
 8002132:	bf00      	nop
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bc90      	pop	{r4, r7}
 800213a:	4770      	bx	lr

0800213c <LL_GPIO_SetPinOutputType>:
{
 800213c:	b490      	push	{r4, r7}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	0e1b      	lsrs	r3, r3, #24
 8002150:	4413      	add	r3, r2
 8002152:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	613b      	str	r3, [r7, #16]
  return result;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	2104      	movs	r1, #4
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	401a      	ands	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	61bb      	str	r3, [r7, #24]
  return result;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	6023      	str	r3, [r4, #0]
}
 8002196:	bf00      	nop
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bc90      	pop	{r4, r7}
 800219e:	4770      	bx	lr

080021a0 <LL_GPIO_SetPinPull>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	613b      	str	r3, [r7, #16]
  return result;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	4619      	mov	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	408b      	lsls	r3, r1
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	60da      	str	r2, [r3, #12]
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	60fb      	str	r3, [r7, #12]
  return result;
 8002204:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800220e:	e040      	b.n	8002292 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	409a      	lsls	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d036      	beq.n	800228c <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	2b07      	cmp	r3, #7
 8002222:	d806      	bhi.n	8002232 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002224:	f240 1201 	movw	r2, #257	; 0x101
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	e008      	b.n	8002244 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b08      	subs	r3, #8
 8002236:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002242:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	461a      	mov	r2, r3
 800224a:	69b9      	ldr	r1, [r7, #24]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff11 	bl	8002074 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	461a      	mov	r2, r3
 8002258:	69b9      	ldr	r1, [r7, #24]
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ffa0 	bl	80021a0 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d003      	beq.n	8002270 <LL_GPIO_Init+0x8c>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b09      	cmp	r3, #9
 800226e:	d10d      	bne.n	800228c <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	461a      	mov	r2, r3
 8002276:	69b9      	ldr	r1, [r7, #24]
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff2d 	bl	80020d8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	461a      	mov	r2, r3
 8002284:	69b9      	ldr	r1, [r7, #24]
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ff58 	bl	800213c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3301      	adds	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1b8      	bne.n	8002210 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <LL_I2C_Enable>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f043 0201 	orr.w	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	601a      	str	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <LL_I2C_Disable>:
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0201 	bic.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <LL_I2C_SetOwnAddress1>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	430a      	orrs	r2, r1
 8002302:	431a      	orrs	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	609a      	str	r2, [r3, #8]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
	...

08002314 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002314:	b490      	push	{r4, r7}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8002322:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8002324:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4a3f      	ldr	r2, [pc, #252]	; (8002428 <LL_I2C_ConfigSpeed+0x114>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002338:	ea44 0203 	orr.w	r2, r4, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4938      	ldr	r1, [pc, #224]	; (800242c <LL_I2C_ConfigSpeed+0x118>)
 800234c:	428b      	cmp	r3, r1
 800234e:	d801      	bhi.n	8002354 <LL_I2C_ConfigSpeed+0x40>
 8002350:	1c63      	adds	r3, r4, #1
 8002352:	e008      	b.n	8002366 <LL_I2C_ConfigSpeed+0x52>
 8002354:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002358:	fb03 f304 	mul.w	r3, r3, r4
 800235c:	4934      	ldr	r1, [pc, #208]	; (8002430 <LL_I2C_ConfigSpeed+0x11c>)
 800235e:	fba1 1303 	umull	r1, r3, r1, r3
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	3301      	adds	r3, #1
 8002366:	431a      	orrs	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a2f      	ldr	r2, [pc, #188]	; (800242c <LL_I2C_ConfigSpeed+0x118>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d939      	bls.n	80023e8 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d117      	bne.n	80023aa <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800239e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a2:	e01d      	b.n	80023e0 <LL_I2C_ConfigSpeed+0xcc>
 80023a4:	f248 0301 	movw	r3, #32769	; 0x8001
 80023a8:	e01a      	b.n	80023e0 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	009a      	lsls	r2, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009a      	lsls	r2, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80023d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023da:	e001      	b.n	80023e0 <LL_I2C_ConfigSpeed+0xcc>
 80023dc:	f248 0301 	movw	r3, #32769	; 0x8001
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	ea43 0402 	orr.w	r4, r3, r2
 80023e6:	e010      	b.n	800240a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d905      	bls.n	8002406 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	e000      	b.n	8002408 <LL_I2C_ConfigSpeed+0xf4>
 8002406:	2304      	movs	r3, #4
 8002408:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002416:	ea44 0203 	orr.w	r2, r4, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	61da      	str	r2, [r3, #28]
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bc90      	pop	{r4, r7}
 8002426:	4770      	bx	lr
 8002428:	431bde83 	.word	0x431bde83
 800242c:	000186a0 	.word	0x000186a0
 8002430:	10624dd3 	.word	0x10624dd3

08002434 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 021a 	bic.w	r2, r3, #26
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	601a      	str	r2, [r3, #0]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff1d 	bl	80022c6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f87b 	bl	800258c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002496:	6939      	ldr	r1, [r7, #16]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff37 	bl	8002314 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68d9      	ldr	r1, [r3, #12]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	461a      	mov	r2, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff17 	bl	80022e4 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ffb9 	bl	8002434 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fef0 	bl	80022a8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffc2 	bl	8002458 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <LL_RCC_GetSysClkSource>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <LL_RCC_GetSysClkSource+0x14>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000

080024f8 <LL_RCC_GetAHBPrescaler>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <LL_RCC_GetAHBPrescaler+0x14>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	40021000 	.word	0x40021000

08002510 <LL_RCC_GetAPB1Prescaler>:
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40021000 	.word	0x40021000

08002528 <LL_RCC_GetAPB2Prescaler>:
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <LL_RCC_GetAPB2Prescaler+0x14>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000

08002540 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <LL_RCC_PLL_GetMainSource+0x14>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40021000 	.word	0x40021000

08002558 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	40021000 	.word	0x40021000

08002570 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <LL_RCC_PLL_GetPrediv+0x18>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c5b      	lsrs	r3, r3, #17
 800257a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000

0800258c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002594:	f000 f820 	bl	80025d8 <RCC_GetSystemClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f83a 	bl	800261c <RCC_GetHCLKClockFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f848 	bl	8002648 <RCC_GetPCLK1ClockFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f854 	bl	8002670 <RCC_GetPCLK2ClockFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60da      	str	r2, [r3, #12]
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80025e2:	f7ff ff7d 	bl	80024e0 <LL_RCC_GetSysClkSource>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d006      	beq.n	80025fa <RCC_GetSystemClockFreq+0x22>
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d007      	beq.n	8002600 <RCC_GetSystemClockFreq+0x28>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <RCC_GetSystemClockFreq+0x40>)
 80025f6:	607b      	str	r3, [r7, #4]
      break;
 80025f8:	e009      	b.n	800260e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <RCC_GetSystemClockFreq+0x40>)
 80025fc:	607b      	str	r3, [r7, #4]
      break;
 80025fe:	e006      	b.n	800260e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002600:	f000 f84a 	bl	8002698 <RCC_PLL_GetFreqDomain_SYS>
 8002604:	6078      	str	r0, [r7, #4]
      break;
 8002606:	e002      	b.n	800260e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <RCC_GetSystemClockFreq+0x40>)
 800260a:	607b      	str	r3, [r7, #4]
      break;
 800260c:	bf00      	nop
  }

  return frequency;
 800260e:	687b      	ldr	r3, [r7, #4]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	007a1200 	.word	0x007a1200

0800261c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002624:	f7ff ff68 	bl	80024f8 <LL_RCC_GetAHBPrescaler>
 8002628:	4603      	mov	r3, r0
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <RCC_GetHCLKClockFreq+0x28>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	461a      	mov	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	40d3      	lsrs	r3, r2
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	08002fd8 	.word	0x08002fd8

08002648 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002650:	f7ff ff5e 	bl	8002510 <LL_RCC_GetAPB1Prescaler>
 8002654:	4603      	mov	r3, r0
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <RCC_GetPCLK1ClockFreq+0x24>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	40d3      	lsrs	r3, r2
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	08002fe8 	.word	0x08002fe8

08002670 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002678:	f7ff ff56 	bl	8002528 <LL_RCC_GetAPB2Prescaler>
 800267c:	4603      	mov	r3, r0
 800267e:	0adb      	lsrs	r3, r3, #11
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <RCC_GetPCLK2ClockFreq+0x24>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	40d3      	lsrs	r3, r2
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	08002fe8 	.word	0x08002fe8

08002698 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80026a6:	f7ff ff4b 	bl	8002540 <LL_RCC_PLL_GetMainSource>
 80026aa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <RCC_PLL_GetFreqDomain_SYS+0x22>
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b6:	d003      	beq.n	80026c0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80026b8:	e00b      	b.n	80026d2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80026bc:	607b      	str	r3, [r7, #4]
      break;
 80026be:	e00b      	b.n	80026d8 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80026c0:	f7ff ff56 	bl	8002570 <LL_RCC_PLL_GetPrediv>
 80026c4:	4603      	mov	r3, r0
 80026c6:	3301      	adds	r3, #1
 80026c8:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	607b      	str	r3, [r7, #4]
      break;
 80026d0:	e002      	b.n	80026d8 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80026d4:	607b      	str	r3, [r7, #4]
      break;
 80026d6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80026d8:	f7ff ff3e 	bl	8002558 <LL_RCC_PLL_GetMultiplicator>
 80026dc:	4603      	mov	r3, r0
 80026de:	0c9b      	lsrs	r3, r3, #18
 80026e0:	3302      	adds	r3, #2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	003d0900 	.word	0x003d0900
 80026f4:	007a1200 	.word	0x007a1200

080026f8 <LL_TIM_SetPrescaler>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <LL_TIM_SetAutoReload>:
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <LL_TIM_SetRepetitionCounter>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <LL_TIM_OC_SetCompareCH1>:
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <LL_TIM_OC_SetCompareCH2>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <LL_TIM_OC_SetCompareCH3>:
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <LL_TIM_OC_SetCompareCH4>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	615a      	str	r2, [r3, #20]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a27      	ldr	r2, [pc, #156]	; (800287c <LL_TIM_Init+0xb0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00b      	beq.n	80027fc <LL_TIM_Init+0x30>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ea:	d007      	beq.n	80027fc <LL_TIM_Init+0x30>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a24      	ldr	r2, [pc, #144]	; (8002880 <LL_TIM_Init+0xb4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <LL_TIM_Init+0x30>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a23      	ldr	r2, [pc, #140]	; (8002884 <LL_TIM_Init+0xb8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d106      	bne.n	800280a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <LL_TIM_Init+0xb0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00b      	beq.n	800282a <LL_TIM_Init+0x5e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002818:	d007      	beq.n	800282a <LL_TIM_Init+0x5e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <LL_TIM_Init+0xb4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <LL_TIM_Init+0x5e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a17      	ldr	r2, [pc, #92]	; (8002884 <LL_TIM_Init+0xb8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d106      	bne.n	8002838 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff64 	bl	8002712 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff51 	bl	80026f8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a08      	ldr	r2, [pc, #32]	; (800287c <LL_TIM_Init+0xb0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d105      	bne.n	800286a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	7c1b      	ldrb	r3, [r3, #16]
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff61 	bl	800272c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff9f 	bl	80027ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40000400 	.word	0x40000400
 8002884:	40000800 	.word	0x40000800

08002888 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b10      	cmp	r3, #16
 800289c:	d012      	beq.n	80028c4 <LL_TIM_OC_Init+0x3c>
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d802      	bhi.n	80028a8 <LL_TIM_OC_Init+0x20>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d007      	beq.n	80028b6 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80028a6:	e022      	b.n	80028ee <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80028a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ac:	d011      	beq.n	80028d2 <LL_TIM_OC_Init+0x4a>
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b2:	d015      	beq.n	80028e0 <LL_TIM_OC_Init+0x58>
      break;
 80028b4:	e01b      	b.n	80028ee <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f865 	bl	8002988 <OC1Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]
      break;
 80028c2:	e014      	b.n	80028ee <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f8c4 	bl	8002a54 <OC2Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	75fb      	strb	r3, [r7, #23]
      break;
 80028d0:	e00d      	b.n	80028ee <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f927 	bl	8002b28 <OC3Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	75fb      	strb	r3, [r7, #23]
      break;
 80028de:	e006      	b.n	80028ee <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f98a 	bl	8002bfc <OC4Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	75fb      	strb	r3, [r7, #23]
      break;
 80028ec:	bf00      	nop
  }

  return result;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	7b12      	ldrb	r2, [r2, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	89d2      	ldrh	r2, [r2, #14]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f023 0201 	bic.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f023 0202 	bic.w	r2, r3, #2
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <OC1Config+0xc8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d11e      	bne.n	8002a28 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 0208 	bic.w	r2, r3, #8
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 0204 	bic.w	r2, r3, #4
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fe83 	bl	8002746 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40012c00 	.word	0x40012c00

08002a54 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0210 	bic.w	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f023 0220 	bic.w	r2, r3, #32
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0210 	bic.w	r2, r3, #16
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <OC2Config+0xd0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d11f      	bne.n	8002afc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	019b      	lsls	r3, r3, #6
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	019b      	lsls	r3, r3, #6
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fe26 	bl	8002760 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40012c00 	.word	0x40012c00

08002b28 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <OC3Config+0xd0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11f      	bne.n	8002bce <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	029b      	lsls	r3, r3, #10
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	029b      	lsls	r3, r3, #10
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	015b      	lsls	r3, r3, #5
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fdca 	bl	800277a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00

08002bfc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	031b      	lsls	r3, r3, #12
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	031b      	lsls	r3, r3, #12
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <OC4Config+0xa0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d107      	bne.n	8002c74 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	019b      	lsls	r3, r3, #6
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fd84 	bl	8002794 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40012c00 	.word	0x40012c00

08002ca0 <LL_USART_IsEnabled>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <LL_USART_SetStopBitsLength>:
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	611a      	str	r2, [r3, #16]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <LL_USART_SetHWFlowCtrl>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	615a      	str	r2, [r3, #20]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
	...

08002d10 <LL_USART_SetBaudRate>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009a      	lsls	r2, r3, #2
 8002d26:	441a      	add	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <LL_USART_SetBaudRate+0xb8>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	b299      	uxth	r1, r3
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <LL_USART_SetBaudRate+0xb8>)
 8002d54:	fba3 0302 	umull	r0, r3, r3, r2
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	2064      	movs	r0, #100	; 0x64
 8002d5c:	fb00 f303 	mul.w	r3, r0, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	3332      	adds	r3, #50	; 0x32
 8002d66:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <LL_USART_SetBaudRate+0xb8>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	440b      	add	r3, r1
 8002d78:	b299      	uxth	r1, r3
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009a      	lsls	r2, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <LL_USART_SetBaudRate+0xb8>)
 8002d90:	fba3 0302 	umull	r0, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	2064      	movs	r0, #100	; 0x64
 8002d98:	fb00 f303 	mul.w	r3, r0, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	3332      	adds	r3, #50	; 0x32
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <LL_USART_SetBaudRate+0xb8>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	440b      	add	r3, r1
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	51eb851f 	.word	0x51eb851f

08002dcc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff ff5e 	bl	8002ca0 <LL_USART_IsEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d145      	bne.n	8002e76 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002df2:	f023 030c 	bic.w	r3, r3, #12
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	6851      	ldr	r1, [r2, #4]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6912      	ldr	r2, [r2, #16]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ff57 	bl	8002cc6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff63 	bl	8002cea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002e24:	f107 0308 	add.w	r3, r7, #8
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fbaf 	bl	800258c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <LL_USART_Init+0xb4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d102      	bne.n	8002e3c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e00c      	b.n	8002e56 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <LL_USART_Init+0xb8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d102      	bne.n	8002e4a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e005      	b.n	8002e56 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <LL_USART_Init+0xbc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00c      	beq.n	8002e76 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff4d 	bl	8002d10 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40013800 	.word	0x40013800
 8002e84:	40004400 	.word	0x40004400
 8002e88:	40004800 	.word	0x40004800

08002e8c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <LL_InitTick+0x30>)
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <LL_InitTick+0x30>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <LL_InitTick+0x30>)
 8002eac:	2205      	movs	r2, #5
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002ec8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ffdd 	bl	8002e8c <LL_InitTick>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <LL_mDelay+0x44>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002eea:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d00c      	beq.n	8002f0e <LL_mDelay+0x32>
  {
    Delay++;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002efa:	e008      	b.n	8002f0e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <LL_mDelay+0x44>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <LL_mDelay+0x32>
    {
      Delay--;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f3      	bne.n	8002efc <LL_mDelay+0x20>
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002f2c:	4a03      	ldr	r2, [pc, #12]	; (8002f3c <LL_SetSystemCoreClock+0x18>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	20000000 	.word	0x20000000

08002f40 <__libc_init_array>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	2500      	movs	r5, #0
 8002f44:	4e0c      	ldr	r6, [pc, #48]	; (8002f78 <__libc_init_array+0x38>)
 8002f46:	4c0d      	ldr	r4, [pc, #52]	; (8002f7c <__libc_init_array+0x3c>)
 8002f48:	1ba4      	subs	r4, r4, r6
 8002f4a:	10a4      	asrs	r4, r4, #2
 8002f4c:	42a5      	cmp	r5, r4
 8002f4e:	d109      	bne.n	8002f64 <__libc_init_array+0x24>
 8002f50:	f000 f822 	bl	8002f98 <_init>
 8002f54:	2500      	movs	r5, #0
 8002f56:	4e0a      	ldr	r6, [pc, #40]	; (8002f80 <__libc_init_array+0x40>)
 8002f58:	4c0a      	ldr	r4, [pc, #40]	; (8002f84 <__libc_init_array+0x44>)
 8002f5a:	1ba4      	subs	r4, r4, r6
 8002f5c:	10a4      	asrs	r4, r4, #2
 8002f5e:	42a5      	cmp	r5, r4
 8002f60:	d105      	bne.n	8002f6e <__libc_init_array+0x2e>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f68:	4798      	blx	r3
 8002f6a:	3501      	adds	r5, #1
 8002f6c:	e7ee      	b.n	8002f4c <__libc_init_array+0xc>
 8002f6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f72:	4798      	blx	r3
 8002f74:	3501      	adds	r5, #1
 8002f76:	e7f2      	b.n	8002f5e <__libc_init_array+0x1e>
 8002f78:	08002ff0 	.word	0x08002ff0
 8002f7c:	08002ff0 	.word	0x08002ff0
 8002f80:	08002ff0 	.word	0x08002ff0
 8002f84:	08002ff4 	.word	0x08002ff4

08002f88 <memset>:
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4402      	add	r2, r0
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <memset+0xa>
 8002f90:	4770      	bx	lr
 8002f92:	f803 1b01 	strb.w	r1, [r3], #1
 8002f96:	e7f9      	b.n	8002f8c <memset+0x4>

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr

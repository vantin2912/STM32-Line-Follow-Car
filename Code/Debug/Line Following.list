
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a80  08003a80  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003a80  08003a80  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a80  08003a80  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08003af0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08003af0  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000867a  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a66  00000000  00000000  0002870b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002a178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002abb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015464  00000000  00000000  0002b510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000650f  00000000  00000000  00040974  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d92c  00000000  00000000  00046e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b47af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000b482c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080039c4 	.word	0x080039c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080039c4 	.word	0x080039c4

0800014c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	6a1a      	ldr	r2, [r3, #32]
 800015a:	683b      	ldr	r3, [r7, #0]
 800015c:	431a      	orrs	r2, r3
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	621a      	str	r2, [r3, #32]
}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr

0800016c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
 8000174:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	683a      	ldr	r2, [r7, #0]
 800017a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800017c:	bf00      	nop
 800017e:	370c      	adds	r7, #12
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr

08000186 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000186:	b480      	push	{r7}
 8000188:	b083      	sub	sp, #12
 800018a:	af00      	add	r7, sp, #0
 800018c:	6078      	str	r0, [r7, #4]
 800018e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	0a1b      	lsrs	r3, r3, #8
 8000194:	b29a      	uxth	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	611a      	str	r2, [r3, #16]
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	0a1b      	lsrs	r3, r3, #8
 80001b2:	b29a      	uxth	r2, r3
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	615a      	str	r2, [r3, #20]
}
 80001b8:	bf00      	nop
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
	...

080001c4 <USR1_Motor1_EnablePWM>:
 *  Created on: Sep 3, 2020
 *      Author: vanti
 */
#include "MotorControl.h"
void USR1_Motor1_EnablePWM(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 80001c8:	2101      	movs	r1, #1
 80001ca:	4802      	ldr	r0, [pc, #8]	; (80001d4 <USR1_Motor1_EnablePWM+0x10>)
 80001cc:	f7ff ffbe 	bl	800014c <LL_TIM_CC_EnableChannel>
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	40012c00 	.word	0x40012c00

080001d8 <USR1_Motor2_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void USR1_Motor2_EnablePWM(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 80001dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e0:	4802      	ldr	r0, [pc, #8]	; (80001ec <USR1_Motor2_EnablePWM+0x14>)
 80001e2:	f7ff ffb3 	bl	800014c <LL_TIM_CC_EnableChannel>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40012c00 	.word	0x40012c00

080001f0 <USR1_Motor1_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void USR1_Motor1_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 0)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0a      	blt.n	8000214 <USR1_Motor1_SetPWM+0x24>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	b29b      	uxth	r3, r3
 8000202:	4619      	mov	r1, r3
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <USR1_Motor1_SetPWM+0x44>)
 8000206:	f7ff ffb1 	bl	800016c <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <USR1_Motor1_SetPWM+0x48>)
 800020c:	480b      	ldr	r0, [pc, #44]	; (800023c <USR1_Motor1_SetPWM+0x4c>)
 800020e:	f7ff ffc9 	bl	80001a4 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH1(TIM1,(uint16_t) -PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 8000212:	e00b      	b.n	800022c <USR1_Motor1_SetPWM+0x3c>
		LL_TIM_OC_SetCompareCH1(TIM1,(uint16_t) -PWMVal);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	b29b      	uxth	r3, r3
 8000218:	425b      	negs	r3, r3
 800021a:	b29b      	uxth	r3, r3
 800021c:	4619      	mov	r1, r3
 800021e:	4805      	ldr	r0, [pc, #20]	; (8000234 <USR1_Motor1_SetPWM+0x44>)
 8000220:	f7ff ffa4 	bl	800016c <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8000224:	4904      	ldr	r1, [pc, #16]	; (8000238 <USR1_Motor1_SetPWM+0x48>)
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <USR1_Motor1_SetPWM+0x4c>)
 8000228:	f7ff ffad 	bl	8000186 <LL_GPIO_SetOutputPin>
}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012c00 	.word	0x40012c00
 8000238:	04800080 	.word	0x04800080
 800023c:	40010c00 	.word	0x40010c00

08000240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <__NVIC_SetPriorityGrouping+0x44>)
 8000252:	68db      	ldr	r3, [r3, #12]
 8000254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000256:	68ba      	ldr	r2, [r7, #8]
 8000258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800025c:	4013      	ands	r3, r2
 800025e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800026c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000272:	4a04      	ldr	r2, [pc, #16]	; (8000284 <__NVIC_SetPriorityGrouping+0x44>)
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	60d3      	str	r3, [r2, #12]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <__NVIC_GetPriorityGrouping+0x18>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	0a1b      	lsrs	r3, r3, #8
 8000292:	f003 0307 	and.w	r3, r3, #7
}
 8000296:	4618      	mov	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	db0b      	blt.n	80002ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	f003 021f 	and.w	r2, r3, #31
 80002bc:	4906      	ldr	r1, [pc, #24]	; (80002d8 <__NVIC_EnableIRQ+0x34>)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	095b      	lsrs	r3, r3, #5
 80002c4:	2001      	movs	r0, #1
 80002c6:	fa00 f202 	lsl.w	r2, r0, r2
 80002ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	e000e100 	.word	0xe000e100

080002dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	6039      	str	r1, [r7, #0]
 80002e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	db0a      	blt.n	8000306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	490c      	ldr	r1, [pc, #48]	; (8000328 <__NVIC_SetPriority+0x4c>)
 80002f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fa:	0112      	lsls	r2, r2, #4
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	440b      	add	r3, r1
 8000300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000304:	e00a      	b.n	800031c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	b2da      	uxtb	r2, r3
 800030a:	4908      	ldr	r1, [pc, #32]	; (800032c <__NVIC_SetPriority+0x50>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	3b04      	subs	r3, #4
 8000314:	0112      	lsls	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
 8000318:	440b      	add	r3, r1
 800031a:	761a      	strb	r2, [r3, #24]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000e100 	.word	0xe000e100
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000330:	b480      	push	{r7}
 8000332:	b089      	sub	sp, #36	; 0x24
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f003 0307 	and.w	r3, r3, #7
 8000342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000344:	69fb      	ldr	r3, [r7, #28]
 8000346:	f1c3 0307 	rsb	r3, r3, #7
 800034a:	2b04      	cmp	r3, #4
 800034c:	bf28      	it	cs
 800034e:	2304      	movcs	r3, #4
 8000350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	3304      	adds	r3, #4
 8000356:	2b06      	cmp	r3, #6
 8000358:	d902      	bls.n	8000360 <NVIC_EncodePriority+0x30>
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3b03      	subs	r3, #3
 800035e:	e000      	b.n	8000362 <NVIC_EncodePriority+0x32>
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	f04f 32ff 	mov.w	r2, #4294967295
 8000368:	69bb      	ldr	r3, [r7, #24]
 800036a:	fa02 f303 	lsl.w	r3, r2, r3
 800036e:	43da      	mvns	r2, r3
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	401a      	ands	r2, r3
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000378:	f04f 31ff 	mov.w	r1, #4294967295
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	43d9      	mvns	r1, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000388:	4313      	orrs	r3, r2
         );
}
 800038a:	4618      	mov	r0, r3
 800038c:	3724      	adds	r7, #36	; 0x24
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000394:	b490      	push	{r4, r7}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	332c      	adds	r3, #44	; 0x2c
 80003a4:	4619      	mov	r1, r3
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80003ac:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003b0:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003b2:	697a      	ldr	r2, [r7, #20]
 80003b4:	fa92 f2a2 	rbit	r2, r2
 80003b8:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003ba:	693a      	ldr	r2, [r7, #16]
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	40d3      	lsrs	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80003ca:	6822      	ldr	r2, [r4, #0]
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	f003 031f 	and.w	r3, r3, #31
 80003d2:	211f      	movs	r1, #31
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	401a      	ands	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f003 011f 	and.w	r1, r3, #31
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	f003 031f 	and.w	r3, r3, #31
 80003e8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ec:	4313      	orrs	r3, r2
 80003ee:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003f0:	bf00      	nop
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc90      	pop	{r4, r7}
 80003f8:	4770      	bx	lr

080003fa <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80003fa:	b480      	push	{r7}
 80003fc:	b083      	sub	sp, #12
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
 8000402:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	431a      	orrs	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	609a      	str	r2, [r3, #8]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800041e:	b490      	push	{r4, r7}
 8000420:	b08a      	sub	sp, #40	; 0x28
 8000422:	af00      	add	r7, sp, #0
 8000424:	60f8      	str	r0, [r7, #12]
 8000426:	60b9      	str	r1, [r7, #8]
 8000428:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	330c      	adds	r3, #12
 800042e:	4619      	mov	r1, r3
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800043a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	fa92 f2a2 	rbit	r2, r2
 8000442:	613a      	str	r2, [r7, #16]
  return result;
 8000444:	693a      	ldr	r2, [r7, #16]
 8000446:	fab2 f282 	clz	r2, r2
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	40d3      	lsrs	r3, r2
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000454:	6822      	ldr	r2, [r4, #0]
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800045c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000460:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000462:	69f9      	ldr	r1, [r7, #28]
 8000464:	fa91 f1a1 	rbit	r1, r1
 8000468:	61b9      	str	r1, [r7, #24]
  return result;
 800046a:	69b9      	ldr	r1, [r7, #24]
 800046c:	fab1 f181 	clz	r1, r1
 8000470:	b2c9      	uxtb	r1, r1
 8000472:	40cb      	lsrs	r3, r1
 8000474:	2107      	movs	r1, #7
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	43db      	mvns	r3, r3
 800047c:	401a      	ands	r2, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000484:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000488:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800048a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800048c:	fa91 f1a1 	rbit	r1, r1
 8000490:	6239      	str	r1, [r7, #32]
  return result;
 8000492:	6a39      	ldr	r1, [r7, #32]
 8000494:	fab1 f181 	clz	r1, r1
 8000498:	b2c9      	uxtb	r1, r1
 800049a:	40cb      	lsrs	r3, r1
 800049c:	6879      	ldr	r1, [r7, #4]
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	4313      	orrs	r3, r2
 80004a4:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80004a6:	bf00      	nop
 80004a8:	3728      	adds	r7, #40	; 0x28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc90      	pop	{r4, r7}
 80004ae:	4770      	bx	lr

080004b0 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	f043 0201 	orr.w	r2, r3, #1
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	609a      	str	r2, [r3, #8]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr

080004ce <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	f043 0204 	orr.w	r2, r3, #4
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	609a      	str	r2, [r3, #8]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	bf0c      	ite	eq
 8000500:	2301      	moveq	r3, #1
 8000502:	2300      	movne	r3, #0
 8000504:	b2db      	uxtb	r3, r3
}
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	609a      	str	r2, [r3, #8]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	3b01      	subs	r3, #1
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <LL_DMA_EnableChannel+0x38>)
 8000540:	5cd3      	ldrb	r3, [r2, r3]
 8000542:	461a      	mov	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	3a01      	subs	r2, #1
 800054e:	4906      	ldr	r1, [pc, #24]	; (8000568 <LL_DMA_EnableChannel+0x38>)
 8000550:	5c8a      	ldrb	r2, [r1, r2]
 8000552:	4611      	mov	r1, r2
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	440a      	add	r2, r1
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6013      	str	r3, [r2, #0]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	080039dc 	.word	0x080039dc

0800056c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	3b01      	subs	r3, #1
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <LL_DMA_SetDataTransferDirection+0x44>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	461a      	mov	r2, r3
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800058c:	f023 0310 	bic.w	r3, r3, #16
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	3a01      	subs	r2, #1
 8000594:	4906      	ldr	r1, [pc, #24]	; (80005b0 <LL_DMA_SetDataTransferDirection+0x44>)
 8000596:	5c8a      	ldrb	r2, [r1, r2]
 8000598:	4611      	mov	r1, r2
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	440a      	add	r2, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	080039dc 	.word	0x080039dc

080005b4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <LL_DMA_SetMode+0x40>)
 80005c6:	5cd3      	ldrb	r3, [r2, r3]
 80005c8:	461a      	mov	r2, r3
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	4413      	add	r3, r2
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f023 0220 	bic.w	r2, r3, #32
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	4906      	ldr	r1, [pc, #24]	; (80005f4 <LL_DMA_SetMode+0x40>)
 80005da:	5ccb      	ldrb	r3, [r1, r3]
 80005dc:	4619      	mov	r1, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	440b      	add	r3, r1
 80005e2:	4619      	mov	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	080039dc 	.word	0x080039dc

080005f8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	3b01      	subs	r3, #1
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <LL_DMA_SetPeriphIncMode+0x40>)
 800060a:	5cd3      	ldrb	r3, [r2, r3]
 800060c:	461a      	mov	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4413      	add	r3, r2
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3b01      	subs	r3, #1
 800061c:	4906      	ldr	r1, [pc, #24]	; (8000638 <LL_DMA_SetPeriphIncMode+0x40>)
 800061e:	5ccb      	ldrb	r3, [r1, r3]
 8000620:	4619      	mov	r1, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	440b      	add	r3, r1
 8000626:	4619      	mov	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	080039dc 	.word	0x080039dc

0800063c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <LL_DMA_SetMemoryIncMode+0x40>)
 800064e:	5cd3      	ldrb	r3, [r2, r3]
 8000650:	461a      	mov	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4413      	add	r3, r2
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	3b01      	subs	r3, #1
 8000660:	4906      	ldr	r1, [pc, #24]	; (800067c <LL_DMA_SetMemoryIncMode+0x40>)
 8000662:	5ccb      	ldrb	r3, [r1, r3]
 8000664:	4619      	mov	r1, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	440b      	add	r3, r1
 800066a:	4619      	mov	r1, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4313      	orrs	r3, r2
 8000670:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	080039dc 	.word	0x080039dc

08000680 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	3b01      	subs	r3, #1
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <LL_DMA_SetPeriphSize+0x40>)
 8000692:	5cd3      	ldrb	r3, [r2, r3]
 8000694:	461a      	mov	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4413      	add	r3, r2
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <LL_DMA_SetPeriphSize+0x40>)
 80006a6:	5ccb      	ldrb	r3, [r1, r3]
 80006a8:	4619      	mov	r1, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	440b      	add	r3, r1
 80006ae:	4619      	mov	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	080039dc 	.word	0x080039dc

080006c4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <LL_DMA_SetMemorySize+0x40>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	461a      	mov	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4413      	add	r3, r2
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	4906      	ldr	r1, [pc, #24]	; (8000704 <LL_DMA_SetMemorySize+0x40>)
 80006ea:	5ccb      	ldrb	r3, [r1, r3]
 80006ec:	4619      	mov	r1, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	440b      	add	r3, r1
 80006f2:	4619      	mov	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	080039dc 	.word	0x080039dc

08000708 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	3b01      	subs	r3, #1
 8000718:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800071a:	5cd3      	ldrb	r3, [r2, r3]
 800071c:	461a      	mov	r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	3b01      	subs	r3, #1
 800072c:	4906      	ldr	r1, [pc, #24]	; (8000748 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800072e:	5ccb      	ldrb	r3, [r1, r3]
 8000730:	4619      	mov	r1, r3
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	440b      	add	r3, r1
 8000736:	4619      	mov	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4313      	orrs	r3, r2
 800073c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	080039dc 	.word	0x080039dc

0800074c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <LL_DMA_SetDataLength+0x40>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
 8000760:	461a      	mov	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4413      	add	r3, r2
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	0c1b      	lsrs	r3, r3, #16
 800076a:	041b      	lsls	r3, r3, #16
 800076c:	68ba      	ldr	r2, [r7, #8]
 800076e:	3a01      	subs	r2, #1
 8000770:	4906      	ldr	r1, [pc, #24]	; (800078c <LL_DMA_SetDataLength+0x40>)
 8000772:	5c8a      	ldrb	r2, [r1, r2]
 8000774:	4611      	mov	r1, r2
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	440a      	add	r2, r1
 800077a:	4611      	mov	r1, r2
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	080039dc 	.word	0x080039dc

08000790 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	3b01      	subs	r3, #1
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <LL_DMA_SetMemoryAddress+0x2c>)
 80007a2:	5cd3      	ldrb	r3, [r2, r3]
 80007a4:	461a      	mov	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4413      	add	r3, r2
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	60d3      	str	r3, [r2, #12]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	080039dc 	.word	0x080039dc

080007c0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <LL_DMA_SetPeriphAddress+0x2c>)
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6093      	str	r3, [r2, #8]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	080039dc 	.word	0x080039dc

080007f0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr

0800080e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	601a      	str	r2, [r3, #0]
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	431a      	orrs	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60da      	str	r2, [r3, #12]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	f023 0201 	bic.w	r2, r3, #1
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	60da      	str	r2, [r3, #12]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <LL_RCC_HSE_Enable+0x18>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a03      	ldr	r2, [pc, #12]	; (8000888 <LL_RCC_HSE_Enable+0x18>)
 800087a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000

0800088c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <LL_RCC_HSE_IsReady+0x20>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800089c:	bf0c      	ite	eq
 800089e:	2301      	moveq	r3, #1
 80008a0:	2300      	movne	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000

080008b0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <LL_RCC_SetSysClkSource+0x24>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f023 0203 	bic.w	r2, r3, #3
 80008c0:	4904      	ldr	r1, [pc, #16]	; (80008d4 <LL_RCC_SetSysClkSource+0x24>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	604b      	str	r3, [r1, #4]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <LL_RCC_GetSysClkSource+0x14>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 030c 	and.w	r3, r3, #12
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <LL_RCC_SetAHBPrescaler+0x24>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000900:	4904      	ldr	r1, [pc, #16]	; (8000914 <LL_RCC_SetAHBPrescaler+0x24>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	604b      	str	r3, [r1, #4]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000928:	4904      	ldr	r1, [pc, #16]	; (800093c <LL_RCC_SetAPB1Prescaler+0x24>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4313      	orrs	r3, r2
 800092e:	604b      	str	r3, [r1, #4]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <LL_RCC_SetAPB2Prescaler+0x24>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000950:	4904      	ldr	r1, [pc, #16]	; (8000964 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4313      	orrs	r3, r2
 8000956:	604b      	str	r3, [r1, #4]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <LL_RCC_SetADCClockSource+0x24>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000978:	4904      	ldr	r1, [pc, #16]	; (800098c <LL_RCC_SetADCClockSource+0x24>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	604b      	str	r3, [r1, #4]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <LL_RCC_PLL_Enable+0x18>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <LL_RCC_PLL_Enable+0x18>)
 800099a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000

080009ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <LL_RCC_PLL_IsReady+0x20>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80009bc:	bf0c      	ite	eq
 80009be:	2301      	moveq	r3, #1
 80009c0:	2300      	movne	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000

080009d0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	430b      	orrs	r3, r1
 80009ec:	4903      	ldr	r1, [pc, #12]	; (80009fc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80009ee:	4313      	orrs	r3, r2
 80009f0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40021000 	.word	0x40021000

08000a00 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	4907      	ldr	r1, [pc, #28]	; (8000a2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a3a:	69da      	ldr	r2, [r3, #28]
 8000a3c:	4907      	ldr	r1, [pc, #28]	; (8000a5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a46:	69da      	ldr	r2, [r3, #28]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a6a:	699a      	ldr	r2, [r3, #24]
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a76:	699a      	ldr	r2, [r3, #24]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <LL_FLASH_SetLatency+0x24>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f023 0207 	bic.w	r2, r3, #7
 8000aa0:	4904      	ldr	r1, [pc, #16]	; (8000ab4 <LL_FLASH_SetLatency+0x24>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	600b      	str	r3, [r1, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <LL_FLASH_GetLatency+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40022000 	.word	0x40022000

08000ad0 <LL_TIM_EnableCounter>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f043 0201 	orr.w	r2, r3, #1
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	601a      	str	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <LL_TIM_EnableARRPreload>:
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <LL_TIM_DisableARRPreload>:
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <LL_TIM_SetCounter>:
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <LL_TIM_GetCounter>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <LL_TIM_OC_DisableFast>:
{
 8000b5c:	b4b0      	push	{r4, r5, r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d01c      	beq.n	8000ba6 <LL_TIM_OC_DisableFast+0x4a>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d017      	beq.n	8000ba2 <LL_TIM_OC_DisableFast+0x46>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b10      	cmp	r3, #16
 8000b76:	d012      	beq.n	8000b9e <LL_TIM_OC_DisableFast+0x42>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2b40      	cmp	r3, #64	; 0x40
 8000b7c:	d00d      	beq.n	8000b9a <LL_TIM_OC_DisableFast+0x3e>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b84:	d007      	beq.n	8000b96 <LL_TIM_OC_DisableFast+0x3a>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b8c:	d101      	bne.n	8000b92 <LL_TIM_OC_DisableFast+0x36>
 8000b8e:	2305      	movs	r3, #5
 8000b90:	e00a      	b.n	8000ba8 <LL_TIM_OC_DisableFast+0x4c>
 8000b92:	2306      	movs	r3, #6
 8000b94:	e008      	b.n	8000ba8 <LL_TIM_OC_DisableFast+0x4c>
 8000b96:	2304      	movs	r3, #4
 8000b98:	e006      	b.n	8000ba8 <LL_TIM_OC_DisableFast+0x4c>
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e004      	b.n	8000ba8 <LL_TIM_OC_DisableFast+0x4c>
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	e002      	b.n	8000ba8 <LL_TIM_OC_DisableFast+0x4c>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <LL_TIM_OC_DisableFast+0x4c>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3318      	adds	r3, #24
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <LL_TIM_OC_DisableFast+0x7c>)
 8000bb4:	5c5b      	ldrb	r3, [r3, r1]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000bba:	6822      	ldr	r2, [r4, #0]
 8000bbc:	4629      	mov	r1, r5
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <LL_TIM_OC_DisableFast+0x80>)
 8000bc0:	5c5b      	ldrb	r3, [r3, r1]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	408b      	lsls	r3, r1
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	4013      	ands	r3, r2
 8000bcc:	6023      	str	r3, [r4, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bcb0      	pop	{r4, r5, r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	080039e4 	.word	0x080039e4
 8000bdc:	080039ec 	.word	0x080039ec

08000be0 <LL_TIM_OC_EnablePreload>:
{
 8000be0:	b4b0      	push	{r4, r5, r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d01c      	beq.n	8000c2a <LL_TIM_OC_EnablePreload+0x4a>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d017      	beq.n	8000c26 <LL_TIM_OC_EnablePreload+0x46>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b10      	cmp	r3, #16
 8000bfa:	d012      	beq.n	8000c22 <LL_TIM_OC_EnablePreload+0x42>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b40      	cmp	r3, #64	; 0x40
 8000c00:	d00d      	beq.n	8000c1e <LL_TIM_OC_EnablePreload+0x3e>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c08:	d007      	beq.n	8000c1a <LL_TIM_OC_EnablePreload+0x3a>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c10:	d101      	bne.n	8000c16 <LL_TIM_OC_EnablePreload+0x36>
 8000c12:	2305      	movs	r3, #5
 8000c14:	e00a      	b.n	8000c2c <LL_TIM_OC_EnablePreload+0x4c>
 8000c16:	2306      	movs	r3, #6
 8000c18:	e008      	b.n	8000c2c <LL_TIM_OC_EnablePreload+0x4c>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	e006      	b.n	8000c2c <LL_TIM_OC_EnablePreload+0x4c>
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e004      	b.n	8000c2c <LL_TIM_OC_EnablePreload+0x4c>
 8000c22:	2302      	movs	r3, #2
 8000c24:	e002      	b.n	8000c2c <LL_TIM_OC_EnablePreload+0x4c>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <LL_TIM_OC_EnablePreload+0x4c>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3318      	adds	r3, #24
 8000c32:	461a      	mov	r2, r3
 8000c34:	4629      	mov	r1, r5
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <LL_TIM_OC_EnablePreload+0x7c>)
 8000c38:	5c5b      	ldrb	r3, [r3, r1]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000c3e:	6822      	ldr	r2, [r4, #0]
 8000c40:	4629      	mov	r1, r5
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <LL_TIM_OC_EnablePreload+0x80>)
 8000c44:	5c5b      	ldrb	r3, [r3, r1]
 8000c46:	4619      	mov	r1, r3
 8000c48:	2308      	movs	r3, #8
 8000c4a:	408b      	lsls	r3, r1
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	6023      	str	r3, [r4, #0]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bcb0      	pop	{r4, r5, r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	080039e4 	.word	0x080039e4
 8000c60:	080039ec 	.word	0x080039ec

08000c64 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000c64:	b4b0      	push	{r4, r5, r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d01c      	beq.n	8000cb0 <LL_TIM_IC_SetActiveInput+0x4c>
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d017      	beq.n	8000cac <LL_TIM_IC_SetActiveInput+0x48>
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b10      	cmp	r3, #16
 8000c80:	d012      	beq.n	8000ca8 <LL_TIM_IC_SetActiveInput+0x44>
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b40      	cmp	r3, #64	; 0x40
 8000c86:	d00d      	beq.n	8000ca4 <LL_TIM_IC_SetActiveInput+0x40>
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c8e:	d007      	beq.n	8000ca0 <LL_TIM_IC_SetActiveInput+0x3c>
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c96:	d101      	bne.n	8000c9c <LL_TIM_IC_SetActiveInput+0x38>
 8000c98:	2305      	movs	r3, #5
 8000c9a:	e00a      	b.n	8000cb2 <LL_TIM_IC_SetActiveInput+0x4e>
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	e008      	b.n	8000cb2 <LL_TIM_IC_SetActiveInput+0x4e>
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	e006      	b.n	8000cb2 <LL_TIM_IC_SetActiveInput+0x4e>
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e004      	b.n	8000cb2 <LL_TIM_IC_SetActiveInput+0x4e>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e002      	b.n	8000cb2 <LL_TIM_IC_SetActiveInput+0x4e>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <LL_TIM_IC_SetActiveInput+0x4e>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4629      	mov	r1, r5
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <LL_TIM_IC_SetActiveInput+0x8c>)
 8000cbe:	5c5b      	ldrb	r3, [r3, r1]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	4629      	mov	r1, r5
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <LL_TIM_IC_SetActiveInput+0x90>)
 8000cca:	5c5b      	ldrb	r3, [r3, r1]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2303      	movs	r3, #3
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	0c1b      	lsrs	r3, r3, #16
 8000cda:	4628      	mov	r0, r5
 8000cdc:	4905      	ldr	r1, [pc, #20]	; (8000cf4 <LL_TIM_IC_SetActiveInput+0x90>)
 8000cde:	5c09      	ldrb	r1, [r1, r0]
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	6023      	str	r3, [r4, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bcb0      	pop	{r4, r5, r7}
 8000cee:	4770      	bx	lr
 8000cf0:	080039e4 	.word	0x080039e4
 8000cf4:	080039f4 	.word	0x080039f4

08000cf8 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000cf8:	b4b0      	push	{r4, r5, r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d01c      	beq.n	8000d44 <LL_TIM_IC_SetPrescaler+0x4c>
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d017      	beq.n	8000d40 <LL_TIM_IC_SetPrescaler+0x48>
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	2b10      	cmp	r3, #16
 8000d14:	d012      	beq.n	8000d3c <LL_TIM_IC_SetPrescaler+0x44>
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2b40      	cmp	r3, #64	; 0x40
 8000d1a:	d00d      	beq.n	8000d38 <LL_TIM_IC_SetPrescaler+0x40>
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d22:	d007      	beq.n	8000d34 <LL_TIM_IC_SetPrescaler+0x3c>
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d2a:	d101      	bne.n	8000d30 <LL_TIM_IC_SetPrescaler+0x38>
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	e00a      	b.n	8000d46 <LL_TIM_IC_SetPrescaler+0x4e>
 8000d30:	2306      	movs	r3, #6
 8000d32:	e008      	b.n	8000d46 <LL_TIM_IC_SetPrescaler+0x4e>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e006      	b.n	8000d46 <LL_TIM_IC_SetPrescaler+0x4e>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e004      	b.n	8000d46 <LL_TIM_IC_SetPrescaler+0x4e>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e002      	b.n	8000d46 <LL_TIM_IC_SetPrescaler+0x4e>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e000      	b.n	8000d46 <LL_TIM_IC_SetPrescaler+0x4e>
 8000d44:	2300      	movs	r3, #0
 8000d46:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4629      	mov	r1, r5
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <LL_TIM_IC_SetPrescaler+0x8c>)
 8000d52:	5c5b      	ldrb	r3, [r3, r1]
 8000d54:	4413      	add	r3, r2
 8000d56:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000d58:	6822      	ldr	r2, [r4, #0]
 8000d5a:	4629      	mov	r1, r5
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <LL_TIM_IC_SetPrescaler+0x90>)
 8000d5e:	5c5b      	ldrb	r3, [r3, r1]
 8000d60:	4619      	mov	r1, r3
 8000d62:	230c      	movs	r3, #12
 8000d64:	408b      	lsls	r3, r1
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0c1b      	lsrs	r3, r3, #16
 8000d6e:	4628      	mov	r0, r5
 8000d70:	4905      	ldr	r1, [pc, #20]	; (8000d88 <LL_TIM_IC_SetPrescaler+0x90>)
 8000d72:	5c09      	ldrb	r1, [r1, r0]
 8000d74:	408b      	lsls	r3, r1
 8000d76:	4313      	orrs	r3, r2
 8000d78:	6023      	str	r3, [r4, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bcb0      	pop	{r4, r5, r7}
 8000d82:	4770      	bx	lr
 8000d84:	080039e4 	.word	0x080039e4
 8000d88:	080039f4 	.word	0x080039f4

08000d8c <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000d8c:	b4b0      	push	{r4, r5, r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d01c      	beq.n	8000dd8 <LL_TIM_IC_SetFilter+0x4c>
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d017      	beq.n	8000dd4 <LL_TIM_IC_SetFilter+0x48>
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b10      	cmp	r3, #16
 8000da8:	d012      	beq.n	8000dd0 <LL_TIM_IC_SetFilter+0x44>
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	2b40      	cmp	r3, #64	; 0x40
 8000dae:	d00d      	beq.n	8000dcc <LL_TIM_IC_SetFilter+0x40>
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db6:	d007      	beq.n	8000dc8 <LL_TIM_IC_SetFilter+0x3c>
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dbe:	d101      	bne.n	8000dc4 <LL_TIM_IC_SetFilter+0x38>
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	e00a      	b.n	8000dda <LL_TIM_IC_SetFilter+0x4e>
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	e008      	b.n	8000dda <LL_TIM_IC_SetFilter+0x4e>
 8000dc8:	2304      	movs	r3, #4
 8000dca:	e006      	b.n	8000dda <LL_TIM_IC_SetFilter+0x4e>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e004      	b.n	8000dda <LL_TIM_IC_SetFilter+0x4e>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e002      	b.n	8000dda <LL_TIM_IC_SetFilter+0x4e>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <LL_TIM_IC_SetFilter+0x4e>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	3318      	adds	r3, #24
 8000de0:	461a      	mov	r2, r3
 8000de2:	4629      	mov	r1, r5
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <LL_TIM_IC_SetFilter+0x8c>)
 8000de6:	5c5b      	ldrb	r3, [r3, r1]
 8000de8:	4413      	add	r3, r2
 8000dea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000dec:	6822      	ldr	r2, [r4, #0]
 8000dee:	4629      	mov	r1, r5
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <LL_TIM_IC_SetFilter+0x90>)
 8000df2:	5c5b      	ldrb	r3, [r3, r1]
 8000df4:	4619      	mov	r1, r3
 8000df6:	23f0      	movs	r3, #240	; 0xf0
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	4628      	mov	r0, r5
 8000e04:	4905      	ldr	r1, [pc, #20]	; (8000e1c <LL_TIM_IC_SetFilter+0x90>)
 8000e06:	5c09      	ldrb	r1, [r1, r0]
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	6023      	str	r3, [r4, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bcb0      	pop	{r4, r5, r7}
 8000e16:	4770      	bx	lr
 8000e18:	080039e4 	.word	0x080039e4
 8000e1c:	080039f4 	.word	0x080039f4

08000e20 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000e20:	b490      	push	{r4, r7}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d01c      	beq.n	8000e6c <LL_TIM_IC_SetPolarity+0x4c>
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d017      	beq.n	8000e68 <LL_TIM_IC_SetPolarity+0x48>
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d012      	beq.n	8000e64 <LL_TIM_IC_SetPolarity+0x44>
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	2b40      	cmp	r3, #64	; 0x40
 8000e42:	d00d      	beq.n	8000e60 <LL_TIM_IC_SetPolarity+0x40>
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e4a:	d007      	beq.n	8000e5c <LL_TIM_IC_SetPolarity+0x3c>
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e52:	d101      	bne.n	8000e58 <LL_TIM_IC_SetPolarity+0x38>
 8000e54:	2305      	movs	r3, #5
 8000e56:	e00a      	b.n	8000e6e <LL_TIM_IC_SetPolarity+0x4e>
 8000e58:	2306      	movs	r3, #6
 8000e5a:	e008      	b.n	8000e6e <LL_TIM_IC_SetPolarity+0x4e>
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	e006      	b.n	8000e6e <LL_TIM_IC_SetPolarity+0x4e>
 8000e60:	2303      	movs	r3, #3
 8000e62:	e004      	b.n	8000e6e <LL_TIM_IC_SetPolarity+0x4e>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e002      	b.n	8000e6e <LL_TIM_IC_SetPolarity+0x4e>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <LL_TIM_IC_SetPolarity+0x4e>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a1a      	ldr	r2, [r3, #32]
 8000e74:	4621      	mov	r1, r4
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <LL_TIM_IC_SetPolarity+0x80>)
 8000e78:	5c5b      	ldrb	r3, [r3, r1]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	408b      	lsls	r3, r1
 8000e80:	43db      	mvns	r3, r3
 8000e82:	401a      	ands	r2, r3
 8000e84:	4621      	mov	r1, r4
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LL_TIM_IC_SetPolarity+0x80>)
 8000e88:	5c5b      	ldrb	r3, [r3, r1]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	408b      	lsls	r3, r1
 8000e90:	431a      	orrs	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc90      	pop	{r4, r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	080039fc 	.word	0x080039fc

08000ea4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000eb6:	f023 0307 	bic.w	r3, r3, #7
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f023 0207 	bic.w	r2, r3, #7
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	605a      	str	r2, [r3, #4]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f06f 0201 	mvn.w	r2, #1
 8000f5e:	611a      	str	r2, [r3, #16]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f043 0201 	orr.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	60da      	str	r2, [r3, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	615a      	str	r2, [r3, #20]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	2b40      	cmp	r3, #64	; 0x40
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2301      	moveq	r3, #1
 8000fe6:	2300      	movne	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	605a      	str	r2, [r3, #4]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <LL_GPIO_SetPinMode>:
{
 8001010:	b490      	push	{r4, r7}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	461a      	mov	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	0e1b      	lsrs	r3, r3, #24
 8001024:	4413      	add	r3, r2
 8001026:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001028:	6822      	ldr	r2, [r4, #0]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	613b      	str	r3, [r7, #16]
  return result;
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	210f      	movs	r1, #15
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	401a      	ands	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	61bb      	str	r3, [r7, #24]
  return result;
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	6023      	str	r3, [r4, #0]
}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bc90      	pop	{r4, r7}
 8001072:	4770      	bx	lr

08001074 <LL_GPIO_ResetOutputPin>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	615a      	str	r2, [r3, #20]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
	...

08001094 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800109e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	6053      	str	r3, [r2, #4]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40010000 	.word	0x40010000

080010b4 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80010be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6053      	str	r3, [r2, #4]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40010000 	.word	0x40010000

080010d4 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80010de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80010e6:	6053      	str	r3, [r2, #4]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	40010000 	.word	0x40010000

080010f4 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001100:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8001106:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800110a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800110e:	6053      	str	r3, [r2, #4]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40010000 	.word	0x40010000

0800111c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800112a:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001136:	6053      	str	r3, [r2, #4]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40010000 	.word	0x40010000

08001144 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	3302      	adds	r3, #2
 8001156:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	0c1b      	lsrs	r3, r3, #16
 800115e:	43db      	mvns	r3, r3
 8001160:	ea02 0103 	and.w	r1, r2, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	60bb      	str	r3, [r7, #8]
  return result;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	fab3 f383 	clz	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	fa03 f202 	lsl.w	r2, r3, r2
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	430a      	orrs	r2, r1
 800118a:	3302      	adds	r3, #2
 800118c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40010000 	.word	0x40010000

080011a0 <__io_putchar>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

PUTCHAR_PROTOTYPE
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 80011a8:	bf00      	nop
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <__io_putchar+0x2c>)
 80011ac:	f7ff ff10 	bl	8000fd0 <LL_USART_IsActiveFlag_TC>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f9      	beq.n	80011aa <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4619      	mov	r1, r3
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <__io_putchar+0x2c>)
 80011be:	f7ff ff19 	bl	8000ff4 <LL_USART_TransmitData8>

  	return ch;
 80011c2:	687b      	ldr	r3, [r7, #4]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40013800 	.word	0x40013800

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff fc42 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80011dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80011e0:	f7ff fc26 	bl	8000a30 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f7ff f82b 	bl	8000240 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80011ea:	f7ff ff97 	bl	800111c <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <main+0xd0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6858      	ldr	r0, [r3, #4]
 80011f4:	2300      	movs	r3, #0
 80011f6:	2202      	movs	r2, #2
 80011f8:	2100      	movs	r1, #0
 80011fa:	f002 f83b 	bl	8003274 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <main+0xd0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6898      	ldr	r0, [r3, #8]
 8001204:	2300      	movs	r3, #0
 8001206:	2202      	movs	r2, #2
 8001208:	2100      	movs	r1, #0
 800120a:	f002 f833 	bl	8003274 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <main+0xd0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68d8      	ldr	r0, [r3, #12]
 8001214:	2300      	movs	r3, #0
 8001216:	2202      	movs	r2, #2
 8001218:	2100      	movs	r1, #0
 800121a:	f002 f82b 	bl	8003274 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800121e:	f000 f843 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001222:	f000 fc93 	bl	8001b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001226:	f000 fc79 	bl	8001b1c <MX_DMA_Init>
  MX_TIM1_Init();
 800122a:	f000 f9eb 	bl	8001604 <MX_TIM1_Init>
  MX_ADC1_Init();
 800122e:	f000 f87d 	bl	800132c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001232:	f000 f991 	bl	8001558 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001236:	f000 fc07 	bl	8001a48 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800123a:	f000 faaf 	bl	800179c <MX_TIM2_Init>
  MX_TIM3_Init();
 800123e:	f000 fb51 	bl	80018e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001242:	f000 fbcf 	bl	80019e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  USR1_Motor1_EnablePWM();
 8001246:	f7fe ffbd 	bl	80001c4 <USR1_Motor1_EnablePWM>
  USR1_Motor2_EnablePWM();
 800124a:	f7fe ffc5 	bl	80001d8 <USR1_Motor2_EnablePWM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t Count = LL_TIM_GetCounter(TIM2);
 800124e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001252:	f7ff fc77 	bl	8000b44 <LL_TIM_GetCounter>
 8001256:	6078      	str	r0, [r7, #4]
  while (1)
  {
	  for(int i = 7199; i>=-7199;--i)
 8001258:	f641 431f 	movw	r3, #7199	; 0x1c1f
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	e009      	b.n	8001274 <main+0xa4>
	  {
		  USR1_Motor1_SetPWM(i);
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7fe ffc5 	bl	80001f0 <USR1_Motor1_SetPWM>
		  LL_mDelay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126a:	f001 ff9f 	bl	80031ac <LL_mDelay>
	  for(int i = 7199; i>=-7199;--i)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3b01      	subs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800127a:	dcf1      	bgt.n	8001260 <main+0x90>
	  }
	  for(int i = -7199; i<=7199;++i)
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <main+0xd4>)
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	e009      	b.n	8001296 <main+0xc6>
	  {
		  USR1_Motor1_SetPWM(i);
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f7fe ffb4 	bl	80001f0 <USR1_Motor1_SetPWM>
		  LL_mDelay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f001 ff8e 	bl	80031ac <LL_mDelay>
	  for(int i = -7199; i<=7199;++i)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3301      	adds	r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800129c:	dbf1      	blt.n	8001282 <main+0xb2>
	  for(int i = 7199; i>=-7199;--i)
 800129e:	e7db      	b.n	8001258 <main+0x88>
 80012a0:	20000004 	.word	0x20000004
 80012a4:	ffffe3e1 	.word	0xffffe3e1

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80012ac:	2002      	movs	r0, #2
 80012ae:	f7ff fbef 	bl	8000a90 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80012b2:	bf00      	nop
 80012b4:	f7ff fc00 	bl	8000ab8 <LL_FLASH_GetLatency>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d1fa      	bne.n	80012b4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80012be:	f7ff fad7 	bl	8000870 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80012c2:	bf00      	nop
 80012c4:	f7ff fae2 	bl	800088c <LL_RCC_HSE_IsReady>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d1fa      	bne.n	80012c4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80012ce:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80012d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80012d6:	f7ff fb7b 	bl	80009d0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80012da:	f7ff fb59 	bl	8000990 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80012de:	bf00      	nop
 80012e0:	f7ff fb64 	bl	80009ac <LL_RCC_PLL_IsReady>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d1fa      	bne.n	80012e0 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fb00 	bl	80008f0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80012f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012f4:	f7ff fb10 	bl	8000918 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fb21 	bl	8000940 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80012fe:	2002      	movs	r0, #2
 8001300:	f7ff fad6 	bl	80008b0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001304:	bf00      	nop
 8001306:	f7ff fae7 	bl	80008d8 <LL_RCC_GetSysClkSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b08      	cmp	r3, #8
 800130e:	d1fa      	bne.n	8001306 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <SystemClock_Config+0x80>)
 8001312:	f001 ff3d 	bl	8003190 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8001316:	4804      	ldr	r0, [pc, #16]	; (8001328 <SystemClock_Config+0x80>)
 8001318:	f001 ff6c 	bl	80031f4 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 800131c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001320:	f7ff fb22 	bl	8000968 <LL_RCC_SetADCClockSource>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	044aa200 	.word	0x044aa200

0800132c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	; 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001340:	f107 0318 	add.w	r3, r7, #24
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800135e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001362:	f7ff fb7d 	bl	8000a60 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001366:	2004      	movs	r0, #4
 8001368:	f7ff fb7a 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800136c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001370:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4619      	mov	r1, r3
 800137a:	486b      	ldr	r0, [pc, #428]	; (8001528 <MX_ADC1_Init+0x1fc>)
 800137c:	f001 f89a 	bl	80024b4 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	4869      	ldr	r0, [pc, #420]	; (800152c <MX_ADC1_Init+0x200>)
 8001386:	f7ff f8f1 	bl	800056c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 800138a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138e:	2101      	movs	r1, #1
 8001390:	4866      	ldr	r0, [pc, #408]	; (800152c <MX_ADC1_Init+0x200>)
 8001392:	f7ff f9b9 	bl	8000708 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001396:	2220      	movs	r2, #32
 8001398:	2101      	movs	r1, #1
 800139a:	4864      	ldr	r0, [pc, #400]	; (800152c <MX_ADC1_Init+0x200>)
 800139c:	f7ff f90a 	bl	80005b4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	4861      	ldr	r0, [pc, #388]	; (800152c <MX_ADC1_Init+0x200>)
 80013a6:	f7ff f927 	bl	80005f8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	2101      	movs	r1, #1
 80013ae:	485f      	ldr	r0, [pc, #380]	; (800152c <MX_ADC1_Init+0x200>)
 80013b0:	f7ff f944 	bl	800063c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80013b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b8:	2101      	movs	r1, #1
 80013ba:	485c      	ldr	r0, [pc, #368]	; (800152c <MX_ADC1_Init+0x200>)
 80013bc:	f7ff f960 	bl	8000680 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80013c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c4:	2101      	movs	r1, #1
 80013c6:	4859      	ldr	r0, [pc, #356]	; (800152c <MX_ADC1_Init+0x200>)
 80013c8:	f7ff f97c 	bl	80006c4 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 80013cc:	2208      	movs	r2, #8
 80013ce:	2101      	movs	r1, #1
 80013d0:	4856      	ldr	r0, [pc, #344]	; (800152c <MX_ADC1_Init+0x200>)
 80013d2:	f7ff f9bb 	bl	800074c <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &ADC_Value);
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <MX_ADC1_Init+0x204>)
 80013d8:	461a      	mov	r2, r3
 80013da:	2101      	movs	r1, #1
 80013dc:	4853      	ldr	r0, [pc, #332]	; (800152c <MX_ADC1_Init+0x200>)
 80013de:	f7ff f9d7 	bl	8000790 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 80013e2:	4a54      	ldr	r2, [pc, #336]	; (8001534 <MX_ADC1_Init+0x208>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	4851      	ldr	r0, [pc, #324]	; (800152c <MX_ADC1_Init+0x200>)
 80013e8:	f7ff f9ea 	bl	80007c0 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 80013ec:	2101      	movs	r1, #1
 80013ee:	484f      	ldr	r0, [pc, #316]	; (800152c <MX_ADC1_Init+0x200>)
 80013f0:	f7ff f89e 	bl	8000530 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80013fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001402:	4619      	mov	r1, r3
 8001404:	484c      	ldr	r0, [pc, #304]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001406:	f000 fe23 	bl	8002050 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800140e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001412:	4619      	mov	r1, r3
 8001414:	4848      	ldr	r0, [pc, #288]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001416:	f000 fde9 	bl	8001fec <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800141a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800141e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8001420:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001424:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800142a:	2302      	movs	r3, #2
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	4619      	mov	r1, r3
 800143a:	483f      	ldr	r0, [pc, #252]	; (8001538 <MX_ADC1_Init+0x20c>)
 800143c:	f000 fe2f 	bl	800209e <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001448:	483b      	ldr	r0, [pc, #236]	; (8001538 <MX_ADC1_Init+0x20c>)
 800144a:	f7fe ffa3 	bl	8000394 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800144e:	2200      	movs	r2, #0
 8001450:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001454:	4838      	ldr	r0, [pc, #224]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001456:	f7fe ffe2 	bl	800041e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 800145a:	4a38      	ldr	r2, [pc, #224]	; (800153c <MX_ADC1_Init+0x210>)
 800145c:	f240 2105 	movw	r1, #517	; 0x205
 8001460:	4835      	ldr	r0, [pc, #212]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001462:	f7fe ff97 	bl	8000394 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001466:	2200      	movs	r2, #0
 8001468:	4934      	ldr	r1, [pc, #208]	; (800153c <MX_ADC1_Init+0x210>)
 800146a:	4833      	ldr	r0, [pc, #204]	; (8001538 <MX_ADC1_Init+0x20c>)
 800146c:	f7fe ffd7 	bl	800041e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8001470:	4a33      	ldr	r2, [pc, #204]	; (8001540 <MX_ADC1_Init+0x214>)
 8001472:	f240 210a 	movw	r1, #522	; 0x20a
 8001476:	4830      	ldr	r0, [pc, #192]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001478:	f7fe ff8c 	bl	8000394 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800147c:	2200      	movs	r2, #0
 800147e:	4930      	ldr	r1, [pc, #192]	; (8001540 <MX_ADC1_Init+0x214>)
 8001480:	482d      	ldr	r0, [pc, #180]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001482:	f7fe ffcc 	bl	800041e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <MX_ADC1_Init+0x218>)
 8001488:	f240 210f 	movw	r1, #527	; 0x20f
 800148c:	482a      	ldr	r0, [pc, #168]	; (8001538 <MX_ADC1_Init+0x20c>)
 800148e:	f7fe ff81 	bl	8000394 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001492:	2200      	movs	r2, #0
 8001494:	492b      	ldr	r1, [pc, #172]	; (8001544 <MX_ADC1_Init+0x218>)
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001498:	f7fe ffc1 	bl	800041e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 800149c:	4a2a      	ldr	r2, [pc, #168]	; (8001548 <MX_ADC1_Init+0x21c>)
 800149e:	f44f 7105 	mov.w	r1, #532	; 0x214
 80014a2:	4825      	ldr	r0, [pc, #148]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014a4:	f7fe ff76 	bl	8000394 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80014a8:	2200      	movs	r2, #0
 80014aa:	4927      	ldr	r1, [pc, #156]	; (8001548 <MX_ADC1_Init+0x21c>)
 80014ac:	4822      	ldr	r0, [pc, #136]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014ae:	f7fe ffb6 	bl	800041e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 80014b2:	4a26      	ldr	r2, [pc, #152]	; (800154c <MX_ADC1_Init+0x220>)
 80014b4:	f240 2119 	movw	r1, #537	; 0x219
 80014b8:	481f      	ldr	r0, [pc, #124]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014ba:	f7fe ff6b 	bl	8000394 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80014be:	2200      	movs	r2, #0
 80014c0:	4922      	ldr	r1, [pc, #136]	; (800154c <MX_ADC1_Init+0x220>)
 80014c2:	481d      	ldr	r0, [pc, #116]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014c4:	f7fe ffab 	bl	800041e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 80014c8:	4a21      	ldr	r2, [pc, #132]	; (8001550 <MX_ADC1_Init+0x224>)
 80014ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ce:	481a      	ldr	r0, [pc, #104]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014d0:	f7fe ff60 	bl	8000394 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80014d4:	2200      	movs	r2, #0
 80014d6:	491e      	ldr	r1, [pc, #120]	; (8001550 <MX_ADC1_Init+0x224>)
 80014d8:	4817      	ldr	r0, [pc, #92]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014da:	f7fe ffa0 	bl	800041e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <MX_ADC1_Init+0x228>)
 80014e0:	f240 1105 	movw	r1, #261	; 0x105
 80014e4:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014e6:	f7fe ff55 	bl	8000394 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80014ea:	2200      	movs	r2, #0
 80014ec:	4919      	ldr	r1, [pc, #100]	; (8001554 <MX_ADC1_Init+0x228>)
 80014ee:	4812      	ldr	r0, [pc, #72]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014f0:	f7fe ff95 	bl	800041e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 80014f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f8:	480f      	ldr	r0, [pc, #60]	; (8001538 <MX_ADC1_Init+0x20c>)
 80014fa:	f7fe ff7e 	bl	80003fa <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001500:	f7fe ffd6 	bl	80004b0 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_ADC1_Init+0x20c>)
 8001506:	f7fe ffe2 	bl	80004ce <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 800150a:	bf00      	nop
 800150c:	480a      	ldr	r0, [pc, #40]	; (8001538 <MX_ADC1_Init+0x20c>)
 800150e:	f7fe ffed 	bl	80004ec <LL_ADC_IsCalibrationOnGoing>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f9      	bne.n	800150c <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_ADC1_Init+0x20c>)
 800151a:	f7fe fff9 	bl	8000510 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3738      	adds	r7, #56	; 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40010800 	.word	0x40010800
 800152c:	40020000 	.word	0x40020000
 8001530:	20000090 	.word	0x20000090
 8001534:	4001244c 	.word	0x4001244c
 8001538:	40012400 	.word	0x40012400
 800153c:	02300001 	.word	0x02300001
 8001540:	02600002 	.word	0x02600002
 8001544:	02900003 	.word	0x02900003
 8001548:	02c00004 	.word	0x02c00004
 800154c:	02f00005 	.word	0x02f00005
 8001550:	03200006 	.word	0x03200006
 8001554:	03500007 	.word	0x03500007

08001558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800157e:	2008      	movs	r0, #8
 8001580:	f7ff fa6e 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <MX_I2C1_Init+0x9c>)
 8001586:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001588:	2309      	movs	r3, #9
 800158a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001590:	2304      	movs	r3, #4
 8001592:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <MX_I2C1_Init+0xa0>)
 800159a:	f000 ff8b 	bl	80024b4 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 800159e:	f7ff fd79 	bl	8001094 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80015a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80015a6:	f7ff fa43 	bl	8000a30 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <MX_I2C1_Init+0xa4>)
 80015ac:	f7ff f950 	bl	8000850 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80015b0:	4812      	ldr	r0, [pc, #72]	; (80015fc <MX_I2C1_Init+0xa4>)
 80015b2:	f7ff f92c 	bl	800080e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80015b6:	4811      	ldr	r0, [pc, #68]	; (80015fc <MX_I2C1_Init+0xa4>)
 80015b8:	f7ff f91a 	bl	80007f0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_I2C1_Init+0xa8>)
 80015c2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80015c4:	2300      	movs	r3, #0
 80015c6:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80015d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	4619      	mov	r1, r3
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <MX_I2C1_Init+0xa4>)
 80015e0:	f001 f8b4 	bl	800274c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80015e4:	2100      	movs	r1, #0
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_I2C1_Init+0xa4>)
 80015e8:	f7ff f920 	bl	800082c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	3730      	adds	r7, #48	; 0x30
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	04030003 	.word	0x04030003
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40005400 	.word	0x40005400
 8001600:	000186a0 	.word	0x000186a0

08001604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b098      	sub	sp, #96	; 0x60
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800160a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800161a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161e:	2220      	movs	r2, #32
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f001 fe1e 	bl	8003264 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	463b      	mov	r3, r7
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001648:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800164c:	f7ff fa08 	bl	8000a60 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001656:	2300      	movs	r3, #0
 8001658:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 800165a:	f641 431f 	movw	r3, #7199	; 0x1c1f
 800165e:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800166a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800166e:	4619      	mov	r1, r3
 8001670:	4847      	ldr	r0, [pc, #284]	; (8001790 <MX_TIM1_Init+0x18c>)
 8001672:	f001 fa13 	bl	8002a9c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8001676:	4846      	ldr	r0, [pc, #280]	; (8001790 <MX_TIM1_Init+0x18c>)
 8001678:	f7ff fa39 	bl	8000aee <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800167c:	2101      	movs	r1, #1
 800167e:	4844      	ldr	r0, [pc, #272]	; (8001790 <MX_TIM1_Init+0x18c>)
 8001680:	f7ff faae 	bl	8000be0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001684:	2360      	movs	r3, #96	; 0x60
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_HIGH;
 800169c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a0:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80016a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016aa:	461a      	mov	r2, r3
 80016ac:	2101      	movs	r1, #1
 80016ae:	4838      	ldr	r0, [pc, #224]	; (8001790 <MX_TIM1_Init+0x18c>)
 80016b0:	f001 fa52 	bl	8002b58 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80016b4:	2101      	movs	r1, #1
 80016b6:	4836      	ldr	r0, [pc, #216]	; (8001790 <MX_TIM1_Init+0x18c>)
 80016b8:	f7ff fa50 	bl	8000b5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80016bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c0:	4833      	ldr	r0, [pc, #204]	; (8001790 <MX_TIM1_Init+0x18c>)
 80016c2:	f7ff fa8d 	bl	8000be0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 3199;
 80016ce:	f640 437f 	movw	r3, #3199	; 0xc7f
 80016d2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	647b      	str	r3, [r7, #68]	; 0x44
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80016d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016dc:	461a      	mov	r2, r3
 80016de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e2:	482b      	ldr	r0, [pc, #172]	; (8001790 <MX_TIM1_Init+0x18c>)
 80016e4:	f001 fa38 	bl	8002b58 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80016e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ec:	4828      	ldr	r0, [pc, #160]	; (8001790 <MX_TIM1_Init+0x18c>)
 80016ee:	f7ff fa35 	bl	8000b5c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80016f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f6:	4826      	ldr	r0, [pc, #152]	; (8001790 <MX_TIM1_Init+0x18c>)
 80016f8:	f7ff fa72 	bl	8000be0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001708:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170c:	461a      	mov	r2, r3
 800170e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001712:	481f      	ldr	r0, [pc, #124]	; (8001790 <MX_TIM1_Init+0x18c>)
 8001714:	f001 fa20 	bl	8002b58 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 8001718:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171c:	481c      	ldr	r0, [pc, #112]	; (8001790 <MX_TIM1_Init+0x18c>)
 800171e:	f7ff fa1d 	bl	8000b5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001722:	2100      	movs	r1, #0
 8001724:	481a      	ldr	r0, [pc, #104]	; (8001790 <MX_TIM1_Init+0x18c>)
 8001726:	f7ff fbe3 	bl	8000ef0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800172a:	4819      	ldr	r0, [pc, #100]	; (8001790 <MX_TIM1_Init+0x18c>)
 800172c:	f7ff fbf2 	bl	8000f14 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	480e      	ldr	r0, [pc, #56]	; (8001790 <MX_TIM1_Init+0x18c>)
 8001758:	f001 fa36 	bl	8002bc8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  LL_TIM_EnableAllOutputs(TIM1);
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <MX_TIM1_Init+0x18c>)
 800175e:	f7ff fbe8 	bl	8000f32 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8001762:	480b      	ldr	r0, [pc, #44]	; (8001790 <MX_TIM1_Init+0x18c>)
 8001764:	f7ff f9b4 	bl	8000ad0 <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001768:	2004      	movs	r0, #4
 800176a:	f7ff f979 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  PA11   ------> TIM1_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_TIM1_Init+0x190>)
 8001770:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001772:	2309      	movs	r3, #9
 8001774:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	463b      	mov	r3, r7
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM1_Init+0x194>)
 8001784:	f000 fe96 	bl	80024b4 <LL_GPIO_Init>

}
 8001788:	bf00      	nop
 800178a:	3760      	adds	r7, #96	; 0x60
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40012c00 	.word	0x40012c00
 8001794:	040d000d 	.word	0x040d000d
 8001798:	40010800 	.word	0x40010800

0800179c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff f935 	bl	8000a30 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80017c6:	2004      	movs	r0, #4
 80017c8:	f7ff f94a 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80017cc:	2008      	movs	r0, #8
 80017ce:	f7ff f947 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <MX_TIM2_Init+0x13c>)
 80017d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017d6:	2308      	movs	r3, #8
 80017d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017da:	2301      	movs	r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	463b      	mov	r3, r7
 80017e0:	4619      	mov	r1, r3
 80017e2:	483e      	ldr	r0, [pc, #248]	; (80018dc <MX_TIM2_Init+0x140>)
 80017e4:	f000 fe66 	bl	80024b4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80017e8:	f640 0308 	movw	r3, #2056	; 0x808
 80017ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80017ee:	2308      	movs	r3, #8
 80017f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	463b      	mov	r3, r7
 80017f8:	4619      	mov	r1, r3
 80017fa:	4839      	ldr	r0, [pc, #228]	; (80018e0 <MX_TIM2_Init+0x144>)
 80017fc:	f000 fe5a 	bl	80024b4 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8001800:	f7ff fc68 	bl	80010d4 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8001804:	2103      	movs	r1, #3
 8001806:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800180a:	f7ff fb5f 	bl	8000ecc <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800180e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001812:	2101      	movs	r1, #1
 8001814:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001818:	f7ff fa24 	bl	8000c64 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800181c:	2200      	movs	r2, #0
 800181e:	2101      	movs	r1, #1
 8001820:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001824:	f7ff fa68 	bl	8000cf8 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001828:	2200      	movs	r2, #0
 800182a:	2101      	movs	r1, #1
 800182c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001830:	f7ff faac 	bl	8000d8c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001834:	2200      	movs	r2, #0
 8001836:	2101      	movs	r1, #1
 8001838:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800183c:	f7ff faf0 	bl	8000e20 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001840:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001844:	2110      	movs	r1, #16
 8001846:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800184a:	f7ff fa0b 	bl	8000c64 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800184e:	2200      	movs	r2, #0
 8001850:	2110      	movs	r1, #16
 8001852:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001856:	f7ff fa4f 	bl	8000cf8 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 800185a:	2200      	movs	r2, #0
 800185c:	2110      	movs	r1, #16
 800185e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001862:	f7ff fa93 	bl	8000d8c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001866:	2200      	movs	r2, #0
 8001868:	2110      	movs	r1, #16
 800186a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800186e:	f7ff fad7 	bl	8000e20 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 800187a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187e:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800188e:	f001 f905 	bl	8002a9c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001892:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001896:	f7ff f939 	bl	8000b0c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800189a:	2100      	movs	r1, #0
 800189c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018a0:	f7ff fb26 	bl	8000ef0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80018a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018a8:	f7ff fb34 	bl	8000f14 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2,0);
 80018ac:	2100      	movs	r1, #0
 80018ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018b2:	f7ff f93a 	bl	8000b2a <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM2);
 80018b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018ba:	f7ff f909 	bl	8000ad0 <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 80018be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018c2:	f7ff fb45 	bl	8000f50 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 80018c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018ca:	f7ff fb4e 	bl	8000f6a <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	04800080 	.word	0x04800080
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00

080018e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	463b      	mov	r3, r7
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001908:	2002      	movs	r0, #2
 800190a:	f7ff f891 	bl	8000a30 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800190e:	2008      	movs	r0, #8
 8001910:	f7ff f8a6 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001914:	f243 0330 	movw	r3, #12336	; 0x3030
 8001918:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800191a:	2304      	movs	r3, #4
 800191c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	463b      	mov	r3, r7
 8001920:	4619      	mov	r1, r3
 8001922:	482e      	ldr	r0, [pc, #184]	; (80019dc <MX_TIM3_Init+0xf8>)
 8001924:	f000 fdc6 	bl	80024b4 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 8001928:	f7ff fbe4 	bl	80010f4 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 800192c:	2103      	movs	r1, #3
 800192e:	482c      	ldr	r0, [pc, #176]	; (80019e0 <MX_TIM3_Init+0xfc>)
 8001930:	f7ff facc 	bl	8000ecc <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001938:	2101      	movs	r1, #1
 800193a:	4829      	ldr	r0, [pc, #164]	; (80019e0 <MX_TIM3_Init+0xfc>)
 800193c:	f7ff f992 	bl	8000c64 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001940:	2200      	movs	r2, #0
 8001942:	2101      	movs	r1, #1
 8001944:	4826      	ldr	r0, [pc, #152]	; (80019e0 <MX_TIM3_Init+0xfc>)
 8001946:	f7ff f9d7 	bl	8000cf8 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 800194a:	2200      	movs	r2, #0
 800194c:	2101      	movs	r1, #1
 800194e:	4824      	ldr	r0, [pc, #144]	; (80019e0 <MX_TIM3_Init+0xfc>)
 8001950:	f7ff fa1c 	bl	8000d8c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001954:	2200      	movs	r2, #0
 8001956:	2101      	movs	r1, #1
 8001958:	4821      	ldr	r0, [pc, #132]	; (80019e0 <MX_TIM3_Init+0xfc>)
 800195a:	f7ff fa61 	bl	8000e20 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800195e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001962:	2110      	movs	r1, #16
 8001964:	481e      	ldr	r0, [pc, #120]	; (80019e0 <MX_TIM3_Init+0xfc>)
 8001966:	f7ff f97d 	bl	8000c64 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800196a:	2200      	movs	r2, #0
 800196c:	2110      	movs	r1, #16
 800196e:	481c      	ldr	r0, [pc, #112]	; (80019e0 <MX_TIM3_Init+0xfc>)
 8001970:	f7ff f9c2 	bl	8000cf8 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001974:	2200      	movs	r2, #0
 8001976:	2110      	movs	r1, #16
 8001978:	4819      	ldr	r0, [pc, #100]	; (80019e0 <MX_TIM3_Init+0xfc>)
 800197a:	f7ff fa07 	bl	8000d8c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800197e:	2200      	movs	r2, #0
 8001980:	2110      	movs	r1, #16
 8001982:	4817      	ldr	r0, [pc, #92]	; (80019e0 <MX_TIM3_Init+0xfc>)
 8001984:	f7ff fa4c 	bl	8000e20 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8001990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001994:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	480f      	ldr	r0, [pc, #60]	; (80019e0 <MX_TIM3_Init+0xfc>)
 80019a2:	f001 f87b 	bl	8002a9c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80019a6:	480e      	ldr	r0, [pc, #56]	; (80019e0 <MX_TIM3_Init+0xfc>)
 80019a8:	f7ff f8b0 	bl	8000b0c <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80019ac:	2100      	movs	r1, #0
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_TIM3_Init+0xfc>)
 80019b0:	f7ff fa9e 	bl	8000ef0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80019b4:	480a      	ldr	r0, [pc, #40]	; (80019e0 <MX_TIM3_Init+0xfc>)
 80019b6:	f7ff faad 	bl	8000f14 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3,0);
 80019ba:	2100      	movs	r1, #0
 80019bc:	4808      	ldr	r0, [pc, #32]	; (80019e0 <MX_TIM3_Init+0xfc>)
 80019be:	f7ff f8b4 	bl	8000b2a <LL_TIM_SetCounter>
   LL_TIM_EnableCounter(TIM3);
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM3_Init+0xfc>)
 80019c4:	f7ff f884 	bl	8000ad0 <LL_TIM_EnableCounter>
   LL_TIM_ClearFlag_UPDATE(TIM3);
 80019c8:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_TIM3_Init+0xfc>)
 80019ca:	f7ff fac1 	bl	8000f50 <LL_TIM_ClearFlag_UPDATE>
   LL_TIM_EnableIT_UPDATE(TIM3);
 80019ce:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_TIM3_Init+0xfc>)
 80019d0:	f7ff facb 	bl	8000f6a <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40010c00 	.word	0x40010c00
 80019e0:	40000400 	.word	0x40000400

080019e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80019f8:	2004      	movs	r0, #4
 80019fa:	f7ff f819 	bl	8000a30 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 9999;
 80019fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8001a02:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 19999;
 8001a08:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8001a0c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV4;
 8001a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a12:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <MX_TIM4_Init+0x60>)
 8001a1a:	f001 f83f 	bl	8002a9c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <MX_TIM4_Init+0x60>)
 8001a20:	f7ff f874 	bl	8000b0c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001a24:	2100      	movs	r1, #0
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <MX_TIM4_Init+0x60>)
 8001a28:	f7ff fa3c 	bl	8000ea4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_TIM4_Init+0x60>)
 8001a30:	f7ff fa5e 	bl	8000ef0 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001a34:	4803      	ldr	r0, [pc, #12]	; (8001a44 <MX_TIM4_Init+0x60>)
 8001a36:	f7ff fa6d 	bl	8000f14 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40000800 	.word	0x40000800

08001a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	611a      	str	r2, [r3, #16]
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001a70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a74:	f7fe fff4 	bl	8000a60 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001a78:	2008      	movs	r0, #8
 8001a7a:	f7fe fff1 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001a7e:	f244 0340 	movw	r3, #16448	; 0x4040
 8001a82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a84:	2309      	movs	r3, #9
 8001a86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	463b      	mov	r3, r7
 8001a92:	4619      	mov	r1, r3
 8001a94:	481f      	ldr	r0, [pc, #124]	; (8001b14 <MX_USART1_UART_Init+0xcc>)
 8001a96:	f000 fd0d 	bl	80024b4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001a9a:	f248 0380 	movw	r3, #32896	; 0x8080
 8001a9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481a      	ldr	r0, [pc, #104]	; (8001b14 <MX_USART1_UART_Init+0xcc>)
 8001aaa:	f000 fd03 	bl	80024b4 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8001aae:	f7ff fb01 	bl	80010b4 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ab2:	f7fe fbe9 	bl	8000288 <__NVIC_GetPriorityGrouping>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fc37 	bl	8000330 <NVIC_EncodePriority>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	2025      	movs	r0, #37	; 0x25
 8001ac8:	f7fe fc08 	bl	80002dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001acc:	2025      	movs	r0, #37	; 0x25
 8001ace:	f7fe fbe9 	bl	80002a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001ad2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ad6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_USART1_UART_Init+0xd0>)
 8001afa:	f001 facf 	bl	800309c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <MX_USART1_UART_Init+0xd0>)
 8001b00:	f7ff fa51 	bl	8000fa6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_USART1_UART_Init+0xd0>)
 8001b06:	f7ff fa3f 	bl	8000f88 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	3730      	adds	r7, #48	; 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40010c00 	.word	0x40010c00
 8001b18:	40013800 	.word	0x40013800

08001b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7fe ff6d 	bl	8000a00 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b26:	f7fe fbaf 	bl	8000288 <__NVIC_GetPriorityGrouping>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fbfd 	bl	8000330 <NVIC_EncodePriority>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	200b      	movs	r0, #11
 8001b3c:	f7fe fbce 	bl	80002dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b40:	200b      	movs	r0, #11
 8001b42:	f7fe fbaf 	bl	80002a4 <__NVIC_EnableIRQ>

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001b52:	f107 0318 	add.w	r3, r7, #24
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001b6a:	2010      	movs	r0, #16
 8001b6c:	f7fe ff78 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001b70:	2020      	movs	r0, #32
 8001b72:	f7fe ff75 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001b76:	2004      	movs	r0, #4
 8001b78:	f7fe ff72 	bl	8000a60 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001b7c:	2008      	movs	r0, #8
 8001b7e:	f7fe ff6f 	bl	8000a60 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15);
 8001b82:	4946      	ldr	r1, [pc, #280]	; (8001c9c <MX_GPIO_Init+0x150>)
 8001b84:	4846      	ldr	r0, [pc, #280]	; (8001ca0 <MX_GPIO_Init+0x154>)
 8001b86:	f7ff fa75 	bl	8001074 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001b8a:	4944      	ldr	r1, [pc, #272]	; (8001c9c <MX_GPIO_Init+0x150>)
 8001b8c:	4845      	ldr	r0, [pc, #276]	; (8001ca4 <MX_GPIO_Init+0x158>)
 8001b8e:	f7ff fa71 	bl	8001074 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001b92:	4945      	ldr	r1, [pc, #276]	; (8001ca8 <MX_GPIO_Init+0x15c>)
 8001b94:	4845      	ldr	r0, [pc, #276]	; (8001cac <MX_GPIO_Init+0x160>)
 8001b96:	f7ff fa6d 	bl	8001074 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE13);
 8001b9a:	4945      	ldr	r1, [pc, #276]	; (8001cb0 <MX_GPIO_Init+0x164>)
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7ff fad1 	bl	8001144 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE14);
 8001ba2:	4944      	ldr	r1, [pc, #272]	; (8001cb4 <MX_GPIO_Init+0x168>)
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f7ff facd 	bl	8001144 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 8001baa:	4943      	ldr	r1, [pc, #268]	; (8001cb8 <MX_GPIO_Init+0x16c>)
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff fac9 	bl	8001144 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001bc4:	f107 0318 	add.w	r3, r7, #24
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fb3f 	bl	800224c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001be0:	f107 0318 	add.w	r3, r7, #24
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fb31 	bl	800224c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fb23 	bl	800224c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8001c06:	2204      	movs	r2, #4
 8001c08:	492c      	ldr	r1, [pc, #176]	; (8001cbc <MX_GPIO_Init+0x170>)
 8001c0a:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <MX_GPIO_Init+0x154>)
 8001c0c:	f7ff fa00 	bl	8001010 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8001c10:	2204      	movs	r2, #4
 8001c12:	492b      	ldr	r1, [pc, #172]	; (8001cc0 <MX_GPIO_Init+0x174>)
 8001c14:	4822      	ldr	r0, [pc, #136]	; (8001ca0 <MX_GPIO_Init+0x154>)
 8001c16:	f7ff f9fb 	bl	8001010 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4929      	ldr	r1, [pc, #164]	; (8001cc4 <MX_GPIO_Init+0x178>)
 8001c1e:	4821      	ldr	r0, [pc, #132]	; (8001ca4 <MX_GPIO_Init+0x158>)
 8001c20:	f7ff f9f6 	bl	8001010 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <MX_GPIO_Init+0x150>)
 8001c26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <MX_GPIO_Init+0x154>)
 8001c3a:	f000 fc3b 	bl	80024b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <MX_GPIO_Init+0x150>)
 8001c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c42:	2301      	movs	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <MX_GPIO_Init+0x158>)
 8001c54:	f000 fc2e 	bl	80024b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_GPIO_Init+0x15c>)
 8001c5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480f      	ldr	r0, [pc, #60]	; (8001cac <MX_GPIO_Init+0x160>)
 8001c6e:	f000 fc21 	bl	80024b4 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c72:	f7fe fb09 	bl	8000288 <__NVIC_GetPriorityGrouping>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fb57 	bl	8000330 <NVIC_EncodePriority>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4619      	mov	r1, r3
 8001c86:	2028      	movs	r0, #40	; 0x28
 8001c88:	f7fe fb28 	bl	80002dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c8c:	2028      	movs	r0, #40	; 0x28
 8001c8e:	f7fe fb09 	bl	80002a4 <__NVIC_EnableIRQ>

}
 8001c92:	bf00      	nop
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	04800080 	.word	0x04800080
 8001ca0:	40011000 	.word	0x40011000
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	04020002 	.word	0x04020002
 8001cac:	40010800 	.word	0x40010800
 8001cb0:	00f00003 	.word	0x00f00003
 8001cb4:	0f000003 	.word	0x0f000003
 8001cb8:	000f0003 	.word	0x000f0003
 8001cbc:	04200020 	.word	0x04200020
 8001cc0:	04400040 	.word	0x04400040
 8001cc4:	04100010 	.word	0x04100010

08001cc8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001cfc:	4a03      	ldr	r2, [pc, #12]	; (8001d0c <LL_EXTI_ClearFlag_0_31+0x18>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6153      	str	r3, [r2, #20]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	40010400 	.word	0x40010400

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <HardFault_Handler+0x4>

08001d22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <MemManage_Handler+0x4>

08001d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <BusFault_Handler+0x4>

08001d2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <UsageFault_Handler+0x4>

08001d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8001d80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d84:	f7ff ffa0 	bl	8001cc8 <LL_EXTI_IsActiveFlag_0_31>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8001d8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d92:	f7ff ffaf 	bl	8001cf4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */

    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001d96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d9a:	f7ff ff95 	bl	8001cc8 <LL_EXTI_IsActiveFlag_0_31>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001da4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001da8:	f7ff ffa4 	bl	8001cf4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001dac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001db0:	f7ff ff8a 	bl	8001cc8 <LL_EXTI_IsActiveFlag_0_31>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001dba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001dbe:	f7ff ff99 	bl	8001cf4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e00a      	b.n	8001dee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dd8:	f3af 8000 	nop.w
 8001ddc:	4601      	mov	r1, r0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	60ba      	str	r2, [r7, #8]
 8001de4:	b2ca      	uxtb	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dbf0      	blt.n	8001dd8 <_read+0x12>
	}

return len;
 8001df6:	687b      	ldr	r3, [r7, #4]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e009      	b.n	8001e26 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	60ba      	str	r2, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f9c0 	bl	80011a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dbf1      	blt.n	8001e12 <_write+0x12>
	}
	return len;
 8001e2e:	687b      	ldr	r3, [r7, #4]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_close>:

int _close(int file)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
	return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8c:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <_sbrk+0x5c>)
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <_sbrk+0x60>)
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <_sbrk+0x64>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <_sbrk+0x64>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <_sbrk+0x68>)
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d207      	bcs.n	8001ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb4:	f001 f9ac 	bl	8003210 <__errno>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	230c      	movs	r3, #12
 8001ebc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	e009      	b.n	8001ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <_sbrk+0x64>)
 8001ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20005000 	.word	0x20005000
 8001ee4:	00000400 	.word	0x00000400
 8001ee8:	20000084 	.word	0x20000084
 8001eec:	200000a8 	.word	0x200000a8

08001ef0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <SystemInit+0x5c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <SystemInit+0x5c>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <SystemInit+0x5c>)
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4911      	ldr	r1, [pc, #68]	; (8001f4c <SystemInit+0x5c>)
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <SystemInit+0x60>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <SystemInit+0x5c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <SystemInit+0x5c>)
 8001f12:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <SystemInit+0x5c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <SystemInit+0x5c>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <SystemInit+0x5c>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a07      	ldr	r2, [pc, #28]	; (8001f4c <SystemInit+0x5c>)
 8001f2e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <SystemInit+0x5c>)
 8001f36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f3a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SystemInit+0x64>)
 8001f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f42:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	f8ff0000 	.word	0xf8ff0000
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f5a:	e003      	b.n	8001f64 <LoopCopyDataInit>

08001f5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f62:	3104      	adds	r1, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f64:	480a      	ldr	r0, [pc, #40]	; (8001f90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f6c:	d3f6      	bcc.n	8001f5c <CopyDataInit>
  ldr r2, =_sbss
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f70:	e002      	b.n	8001f78 <LoopFillZerobss>

08001f72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f74:	f842 3b04 	str.w	r3, [r2], #4

08001f78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f7c:	d3f9      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f7e:	f7ff ffb7 	bl	8001ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f001 f94b 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f86:	f7ff f923 	bl	80011d0 <main>
  bx lr
 8001f8a:	4770      	bx	lr
  ldr r3, =_sidata
 8001f8c:	08003a88 	.word	0x08003a88
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f94:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8001f98:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8001f9c:	200000a4 	.word	0x200000a4

08001fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC1_2_IRQHandler>

08001fa2 <LL_ADC_REG_SetSequencerLength>:
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_IsEnabled>:
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	bf0c      	ite	eq
 8001fda:	2301      	moveq	r3, #1
 8001fdc:	2300      	movne	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
	...

08001fec <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001ffa:	4813      	ldr	r0, [pc, #76]	; (8002048 <LL_ADC_CommonInit+0x5c>)
 8001ffc:	f7ff ffe3 	bl	8001fc6 <LL_ADC_IsEnabled>
 8002000:	4604      	mov	r4, r0
 8002002:	4812      	ldr	r0, [pc, #72]	; (800204c <LL_ADC_CommonInit+0x60>)
 8002004:	f7ff ffdf 	bl	8001fc6 <LL_ADC_IsEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	4323      	orrs	r3, r4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d114      	bne.n	800203a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e008      	b.n	800203e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	e001      	b.n	800203e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bd90      	pop	{r4, r7, pc}
 8002048:	40012400 	.word	0x40012400
 800204c:	40012800 	.word	0x40012800

08002050 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffb1 	bl	8001fc6 <LL_ADC_IsEnabled>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d112      	bne.n	8002090 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	e001      	b.n	8002094 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff8a 	bl	8001fc6 <LL_ADC_IsEnabled>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d131      	bne.n	800211c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00c      	beq.n	80020da <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	e008      	b.n	80020ec <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80020f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	6811      	ldr	r1, [r2, #0]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	68d2      	ldr	r2, [r2, #12]
 8002100:	4311      	orrs	r1, r2
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	6912      	ldr	r2, [r2, #16]
 8002106:	430a      	orrs	r2, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff44 	bl	8001fa2 <LL_ADC_REG_SetSequencerLength>
 800211a:	e001      	b.n	8002120 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <LL_EXTI_EnableIT_0_31>:
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <LL_EXTI_EnableIT_0_31+0x20>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4904      	ldr	r1, [pc, #16]	; (800214c <LL_EXTI_EnableIT_0_31+0x20>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40010400 	.word	0x40010400

08002150 <LL_EXTI_DisableIT_0_31>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <LL_EXTI_DisableIT_0_31+0x20>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	43db      	mvns	r3, r3
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <LL_EXTI_DisableIT_0_31+0x20>)
 8002162:	4013      	ands	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40010400 	.word	0x40010400

08002174 <LL_EXTI_EnableEvent_0_31>:
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <LL_EXTI_EnableEvent_0_31+0x20>)
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4904      	ldr	r1, [pc, #16]	; (8002194 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40010400 	.word	0x40010400

08002198 <LL_EXTI_DisableEvent_0_31>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4903      	ldr	r1, [pc, #12]	; (80021b8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40010400 	.word	0x40010400

080021bc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	4904      	ldr	r1, [pc, #16]	; (80021dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40010400 	.word	0x40010400

080021e0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40010400 	.word	0x40010400

08002204 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4904      	ldr	r1, [pc, #16]	; (8002224 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4313      	orrs	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40010400 	.word	0x40010400

08002228 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	43db      	mvns	r3, r3
 8002238:	4903      	ldr	r1, [pc, #12]	; (8002248 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800223a:	4013      	ands	r3, r2
 800223c:	60cb      	str	r3, [r1, #12]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	40010400 	.word	0x40010400

0800224c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	791b      	ldrb	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d060      	beq.n	8002322 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d067      	beq.n	8002338 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	795b      	ldrb	r3, [r3, #5]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d00e      	beq.n	800228e <LL_EXTI_Init+0x42>
 8002270:	2b02      	cmp	r3, #2
 8002272:	d017      	beq.n	80022a4 <LL_EXTI_Init+0x58>
 8002274:	2b00      	cmp	r3, #0
 8002276:	d120      	bne.n	80022ba <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff8b 	bl	8002198 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff50 	bl	800212c <LL_EXTI_EnableIT_0_31>
          break;
 800228c:	e018      	b.n	80022c0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff5c 	bl	8002150 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff69 	bl	8002174 <LL_EXTI_EnableEvent_0_31>
          break;
 80022a2:	e00d      	b.n	80022c0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff3f 	bl	800212c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff5e 	bl	8002174 <LL_EXTI_EnableEvent_0_31>
          break;
 80022b8:	e002      	b.n	80022c0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
          break;
 80022be:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	799b      	ldrb	r3, [r3, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d037      	beq.n	8002338 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	799b      	ldrb	r3, [r3, #6]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d00e      	beq.n	80022ee <LL_EXTI_Init+0xa2>
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d017      	beq.n	8002304 <LL_EXTI_Init+0xb8>
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d120      	bne.n	800231a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ffa3 	bl	8002228 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff68 	bl	80021bc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80022ec:	e025      	b.n	800233a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff74 	bl	80021e0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff81 	bl	8002204 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002302:	e01a      	b.n	800233a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff57 	bl	80021bc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff76 	bl	8002204 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002318:	e00f      	b.n	800233a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
            break;
 800231e:	bf00      	nop
 8002320:	e00b      	b.n	800233a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff12 	bl	8002150 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff31 	bl	8002198 <LL_EXTI_DisableEvent_0_31>
 8002336:	e000      	b.n	800233a <LL_EXTI_Init+0xee>
      }
 8002338:	bf00      	nop
  }
  return status;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <LL_GPIO_SetPinMode>:
{
 8002344:	b490      	push	{r4, r7}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	461a      	mov	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	0e1b      	lsrs	r3, r3, #24
 8002358:	4413      	add	r3, r2
 800235a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	613b      	str	r3, [r7, #16]
  return result;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	210f      	movs	r1, #15
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	401a      	ands	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	61bb      	str	r3, [r7, #24]
  return result;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	6023      	str	r3, [r4, #0]
}
 800239e:	bf00      	nop
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc90      	pop	{r4, r7}
 80023a6:	4770      	bx	lr

080023a8 <LL_GPIO_SetPinSpeed>:
{
 80023a8:	b490      	push	{r4, r7}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	0e1b      	lsrs	r3, r3, #24
 80023bc:	4413      	add	r3, r2
 80023be:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80023c0:	6822      	ldr	r2, [r4, #0]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	613b      	str	r3, [r7, #16]
  return result;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	2103      	movs	r1, #3
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	401a      	ands	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	61bb      	str	r3, [r7, #24]
  return result;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	4313      	orrs	r3, r2
 8002400:	6023      	str	r3, [r4, #0]
}
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bc90      	pop	{r4, r7}
 800240a:	4770      	bx	lr

0800240c <LL_GPIO_SetPinOutputType>:
{
 800240c:	b490      	push	{r4, r7}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	0e1b      	lsrs	r3, r3, #24
 8002420:	4413      	add	r3, r2
 8002422:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002424:	6822      	ldr	r2, [r4, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	613b      	str	r3, [r7, #16]
  return result;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	2104      	movs	r1, #4
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	401a      	ands	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	61bb      	str	r3, [r7, #24]
  return result;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	6023      	str	r3, [r4, #0]
}
 8002466:	bf00      	nop
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bc90      	pop	{r4, r7}
 800246e:	4770      	bx	lr

08002470 <LL_GPIO_SetPinPull>:
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	613b      	str	r3, [r7, #16]
  return result;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	408b      	lsls	r3, r1
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	60da      	str	r2, [r3, #12]
}
 80024aa:	bf00      	nop
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	60fb      	str	r3, [r7, #12]
  return result;
 80024d4:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80024de:	e040      	b.n	8002562 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	409a      	lsls	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d036      	beq.n	800255c <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2b07      	cmp	r3, #7
 80024f2:	d806      	bhi.n	8002502 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80024f4:	f240 1201 	movw	r2, #257	; 0x101
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	e008      	b.n	8002514 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b08      	subs	r3, #8
 8002506:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002512:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	461a      	mov	r2, r3
 800251a:	69b9      	ldr	r1, [r7, #24]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff11 	bl	8002344 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	461a      	mov	r2, r3
 8002528:	69b9      	ldr	r1, [r7, #24]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa0 	bl	8002470 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d003      	beq.n	8002540 <LL_GPIO_Init+0x8c>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b09      	cmp	r3, #9
 800253e:	d10d      	bne.n	800255c <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	461a      	mov	r2, r3
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff2d 	bl	80023a8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	69b9      	ldr	r1, [r7, #24]
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ff58 	bl	800240c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	3301      	adds	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1b8      	bne.n	80024e0 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <LL_I2C_Enable>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <LL_I2C_Disable>:
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0201 	bic.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	601a      	str	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <LL_I2C_SetOwnAddress1>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80025e4:	b490      	push	{r4, r7}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 80025f2:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 80025f4:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4a3f      	ldr	r2, [pc, #252]	; (80026f8 <LL_I2C_ConfigSpeed+0x114>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002608:	ea44 0203 	orr.w	r2, r4, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4938      	ldr	r1, [pc, #224]	; (80026fc <LL_I2C_ConfigSpeed+0x118>)
 800261c:	428b      	cmp	r3, r1
 800261e:	d801      	bhi.n	8002624 <LL_I2C_ConfigSpeed+0x40>
 8002620:	1c63      	adds	r3, r4, #1
 8002622:	e008      	b.n	8002636 <LL_I2C_ConfigSpeed+0x52>
 8002624:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002628:	fb03 f304 	mul.w	r3, r3, r4
 800262c:	4934      	ldr	r1, [pc, #208]	; (8002700 <LL_I2C_ConfigSpeed+0x11c>)
 800262e:	fba1 1303 	umull	r1, r3, r1, r3
 8002632:	099b      	lsrs	r3, r3, #6
 8002634:	3301      	adds	r3, #1
 8002636:	431a      	orrs	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a2f      	ldr	r2, [pc, #188]	; (80026fc <LL_I2C_ConfigSpeed+0x118>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d939      	bls.n	80026b8 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d117      	bne.n	800267a <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800266e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002672:	e01d      	b.n	80026b0 <LL_I2C_ConfigSpeed+0xcc>
 8002674:	f248 0301 	movw	r3, #32769	; 0x8001
 8002678:	e01a      	b.n	80026b0 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009a      	lsls	r2, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	e001      	b.n	80026b0 <LL_I2C_ConfigSpeed+0xcc>
 80026ac:	f248 0301 	movw	r3, #32769	; 0x8001
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	ea43 0402 	orr.w	r4, r3, r2
 80026b6:	e010      	b.n	80026da <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d905      	bls.n	80026d6 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	e000      	b.n	80026d8 <LL_I2C_ConfigSpeed+0xf4>
 80026d6:	2304      	movs	r3, #4
 80026d8:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80026e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026e6:	ea44 0203 	orr.w	r2, r4, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	61da      	str	r2, [r3, #28]
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc90      	pop	{r4, r7}
 80026f6:	4770      	bx	lr
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	000186a0 	.word	0x000186a0
 8002700:	10624dd3 	.word	0x10624dd3

08002704 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 021a 	bic.w	r2, r3, #26
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ff1d 	bl	8002596 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f87b 	bl	800285c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002766:	6939      	ldr	r1, [r7, #16]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff37 	bl	80025e4 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68d9      	ldr	r1, [r3, #12]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	461a      	mov	r2, r3
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff17 	bl	80025b4 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4619      	mov	r1, r3
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ffb9 	bl	8002704 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fef0 	bl	8002578 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffc2 	bl	8002728 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <LL_RCC_GetSysClkSource>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <LL_RCC_GetSysClkSource+0x14>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 030c 	and.w	r3, r3, #12
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40021000 	.word	0x40021000

080027c8 <LL_RCC_GetAHBPrescaler>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <LL_RCC_GetAHBPrescaler+0x14>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40021000 	.word	0x40021000

080027e0 <LL_RCC_GetAPB1Prescaler>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40021000 	.word	0x40021000

080027f8 <LL_RCC_GetAPB2Prescaler>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <LL_RCC_GetAPB2Prescaler+0x14>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	40021000 	.word	0x40021000

08002810 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <LL_RCC_PLL_GetMainSource+0x14>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40021000 	.word	0x40021000

08002828 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	40021000 	.word	0x40021000

08002840 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <LL_RCC_PLL_GetPrediv+0x18>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c5b      	lsrs	r3, r3, #17
 800284a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000

0800285c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002864:	f000 f820 	bl	80028a8 <RCC_GetSystemClockFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f83a 	bl	80028ec <RCC_GetHCLKClockFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f848 	bl	8002918 <RCC_GetPCLK1ClockFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f854 	bl	8002940 <RCC_GetPCLK2ClockFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60da      	str	r2, [r3, #12]
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80028b2:	f7ff ff7d 	bl	80027b0 <LL_RCC_GetSysClkSource>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d006      	beq.n	80028ca <RCC_GetSystemClockFreq+0x22>
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d007      	beq.n	80028d0 <RCC_GetSystemClockFreq+0x28>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <RCC_GetSystemClockFreq+0x40>)
 80028c6:	607b      	str	r3, [r7, #4]
      break;
 80028c8:	e009      	b.n	80028de <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <RCC_GetSystemClockFreq+0x40>)
 80028cc:	607b      	str	r3, [r7, #4]
      break;
 80028ce:	e006      	b.n	80028de <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80028d0:	f000 f84a 	bl	8002968 <RCC_PLL_GetFreqDomain_SYS>
 80028d4:	6078      	str	r0, [r7, #4]
      break;
 80028d6:	e002      	b.n	80028de <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <RCC_GetSystemClockFreq+0x40>)
 80028da:	607b      	str	r3, [r7, #4]
      break;
 80028dc:	bf00      	nop
  }

  return frequency;
 80028de:	687b      	ldr	r3, [r7, #4]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	007a1200 	.word	0x007a1200

080028ec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80028f4:	f7ff ff68 	bl	80027c8 <LL_RCC_GetAHBPrescaler>
 80028f8:	4603      	mov	r3, r0
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <RCC_GetHCLKClockFreq+0x28>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	461a      	mov	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	40d3      	lsrs	r3, r2
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	08003a04 	.word	0x08003a04

08002918 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002920:	f7ff ff5e 	bl	80027e0 <LL_RCC_GetAPB1Prescaler>
 8002924:	4603      	mov	r3, r0
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <RCC_GetPCLK1ClockFreq+0x24>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	40d3      	lsrs	r3, r2
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	08003a14 	.word	0x08003a14

08002940 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002948:	f7ff ff56 	bl	80027f8 <LL_RCC_GetAPB2Prescaler>
 800294c:	4603      	mov	r3, r0
 800294e:	0adb      	lsrs	r3, r3, #11
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <RCC_GetPCLK2ClockFreq+0x24>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	461a      	mov	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	40d3      	lsrs	r3, r2
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	08003a14 	.word	0x08003a14

08002968 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	2300      	movs	r3, #0
 8002974:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002976:	f7ff ff4b 	bl	8002810 <LL_RCC_PLL_GetMainSource>
 800297a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8002982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002986:	d003      	beq.n	8002990 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002988:	e00b      	b.n	80029a2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 800298c:	607b      	str	r3, [r7, #4]
      break;
 800298e:	e00b      	b.n	80029a8 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002990:	f7ff ff56 	bl	8002840 <LL_RCC_PLL_GetPrediv>
 8002994:	4603      	mov	r3, r0
 8002996:	3301      	adds	r3, #1
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	607b      	str	r3, [r7, #4]
      break;
 80029a0:	e002      	b.n	80029a8 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80029a4:	607b      	str	r3, [r7, #4]
      break;
 80029a6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80029a8:	f7ff ff3e 	bl	8002828 <LL_RCC_PLL_GetMultiplicator>
 80029ac:	4603      	mov	r3, r0
 80029ae:	0c9b      	lsrs	r3, r3, #18
 80029b0:	3302      	adds	r3, #2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	003d0900 	.word	0x003d0900
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <LL_TIM_SetPrescaler>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <LL_TIM_SetAutoReload>:
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_TIM_SetRepetitionCounter>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <LL_TIM_OC_SetCompareCH1>:
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <LL_TIM_OC_SetCompareCH2>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <LL_TIM_OC_SetCompareCH3>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <LL_TIM_OC_SetCompareCH4>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	615a      	str	r2, [r3, #20]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <LL_TIM_Init+0xb0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <LL_TIM_Init+0x30>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d007      	beq.n	8002acc <LL_TIM_Init+0x30>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <LL_TIM_Init+0xb4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <LL_TIM_Init+0x30>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a23      	ldr	r2, [pc, #140]	; (8002b54 <LL_TIM_Init+0xb8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d106      	bne.n	8002ada <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <LL_TIM_Init+0xb0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <LL_TIM_Init+0x5e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae8:	d007      	beq.n	8002afa <LL_TIM_Init+0x5e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <LL_TIM_Init+0xb4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <LL_TIM_Init+0x5e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <LL_TIM_Init+0xb8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d106      	bne.n	8002b08 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff64 	bl	80029e2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff51 	bl	80029c8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <LL_TIM_Init+0xb0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d105      	bne.n	8002b3a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	7c1b      	ldrb	r3, [r3, #16]
 8002b32:	4619      	mov	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff61 	bl	80029fc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ff9f 	bl	8002a7e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40000800 	.word	0x40000800

08002b58 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b10      	cmp	r3, #16
 8002b6c:	d012      	beq.n	8002b94 <LL_TIM_OC_Init+0x3c>
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d802      	bhi.n	8002b78 <LL_TIM_OC_Init+0x20>
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d007      	beq.n	8002b86 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002b76:	e022      	b.n	8002bbe <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b7c:	d011      	beq.n	8002ba2 <LL_TIM_OC_Init+0x4a>
 8002b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b82:	d015      	beq.n	8002bb0 <LL_TIM_OC_Init+0x58>
      break;
 8002b84:	e01b      	b.n	8002bbe <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f865 	bl	8002c58 <OC1Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	75fb      	strb	r3, [r7, #23]
      break;
 8002b92:	e014      	b.n	8002bbe <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f8c4 	bl	8002d24 <OC2Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba0:	e00d      	b.n	8002bbe <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f927 	bl	8002df8 <OC3Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	75fb      	strb	r3, [r7, #23]
      break;
 8002bae:	e006      	b.n	8002bbe <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f98a 	bl	8002ecc <OC4Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	75fb      	strb	r3, [r7, #23]
      break;
 8002bbc:	bf00      	nop
  }

  return result;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	7b12      	ldrb	r2, [r2, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	89d2      	ldrh	r2, [r2, #14]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f023 0201 	bic.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 0303 	bic.w	r3, r3, #3
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f023 0202 	bic.w	r2, r3, #2
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <OC1Config+0xc8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d11e      	bne.n	8002cf8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f023 0208 	bic.w	r2, r3, #8
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f023 0204 	bic.w	r2, r3, #4
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fe83 	bl	8002a16 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40012c00 	.word	0x40012c00

08002d24 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0210 	bic.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0220 	bic.w	r2, r3, #32
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0210 	bic.w	r2, r3, #16
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <OC2Config+0xd0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11f      	bne.n	8002dcc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	019b      	lsls	r3, r3, #6
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	019b      	lsls	r3, r3, #6
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fe26 	bl	8002a30 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40012c00 	.word	0x40012c00

08002df8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <OC3Config+0xd0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d11f      	bne.n	8002e9e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	029b      	lsls	r3, r3, #10
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	029b      	lsls	r3, r3, #10
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	015b      	lsls	r3, r3, #5
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fdca 	bl	8002a4a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00

08002ecc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	031b      	lsls	r3, r3, #12
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	031b      	lsls	r3, r3, #12
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	; (8002f6c <OC4Config+0xa0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d107      	bne.n	8002f44 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	019b      	lsls	r3, r3, #6
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fd84 	bl	8002a64 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40012c00 	.word	0x40012c00

08002f70 <LL_USART_IsEnabled>:
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <LL_USART_SetStopBitsLength>:
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	611a      	str	r2, [r3, #16]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <LL_USART_SetHWFlowCtrl>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	615a      	str	r2, [r3, #20]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr
	...

08002fe0 <LL_USART_SetBaudRate>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009a      	lsls	r2, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	4a25      	ldr	r2, [pc, #148]	; (8003098 <LL_USART_SetBaudRate+0xb8>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	b29b      	uxth	r3, r3
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	b299      	uxth	r1, r3
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009a      	lsls	r2, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <LL_USART_SetBaudRate+0xb8>)
 8003024:	fba3 0302 	umull	r0, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	2064      	movs	r0, #100	; 0x64
 800302c:	fb00 f303 	mul.w	r3, r0, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	3332      	adds	r3, #50	; 0x32
 8003036:	4a18      	ldr	r2, [pc, #96]	; (8003098 <LL_USART_SetBaudRate+0xb8>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	b29b      	uxth	r3, r3
 8003040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003044:	b29b      	uxth	r3, r3
 8003046:	440b      	add	r3, r1
 8003048:	b299      	uxth	r1, r3
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	fbb2 f2f3 	udiv	r2, r2, r3
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <LL_USART_SetBaudRate+0xb8>)
 8003060:	fba3 0302 	umull	r0, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	2064      	movs	r0, #100	; 0x64
 8003068:	fb00 f303 	mul.w	r3, r0, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	3332      	adds	r3, #50	; 0x32
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <LL_USART_SetBaudRate+0xb8>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	b29b      	uxth	r3, r3
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	b29b      	uxth	r3, r3
 8003082:	440b      	add	r3, r1
 8003084:	b29b      	uxth	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	51eb851f 	.word	0x51eb851f

0800309c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff5e 	bl	8002f70 <LL_USART_IsEnabled>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d145      	bne.n	8003146 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030c2:	f023 030c 	bic.w	r3, r3, #12
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	6851      	ldr	r1, [r2, #4]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	4311      	orrs	r1, r2
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	6912      	ldr	r2, [r2, #16]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff57 	bl	8002f96 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff63 	bl	8002fba <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80030f4:	f107 0308 	add.w	r3, r7, #8
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fbaf 	bl	800285c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <LL_USART_Init+0xb4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d102      	bne.n	800310c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	e00c      	b.n	8003126 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a11      	ldr	r2, [pc, #68]	; (8003154 <LL_USART_Init+0xb8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d102      	bne.n	800311a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	e005      	b.n	8003126 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <LL_USART_Init+0xbc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8003134:	2300      	movs	r3, #0
 8003136:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff4d 	bl	8002fe0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003146:	7ffb      	ldrb	r3, [r7, #31]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40013800 	.word	0x40013800
 8003154:	40004400 	.word	0x40004400
 8003158:	40004800 	.word	0x40004800

0800315c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	4a07      	ldr	r2, [pc, #28]	; (800318c <LL_InitTick+0x30>)
 8003170:	3b01      	subs	r3, #1
 8003172:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <LL_InitTick+0x30>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <LL_InitTick+0x30>)
 800317c:	2205      	movs	r2, #5
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003198:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ffdd 	bl	800315c <LL_InitTick>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <LL_mDelay+0x44>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80031ba:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c2:	d00c      	beq.n	80031de <LL_mDelay+0x32>
  {
    Delay++;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3301      	adds	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80031ca:	e008      	b.n	80031de <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <LL_mDelay+0x44>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <LL_mDelay+0x32>
    {
      Delay--;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f3      	bne.n	80031cc <LL_mDelay+0x20>
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80031fc:	4a03      	ldr	r2, [pc, #12]	; (800320c <LL_SetSystemCoreClock+0x18>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6013      	str	r3, [r2, #0]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	20000000 	.word	0x20000000

08003210 <__errno>:
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <__errno+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000004 	.word	0x20000004

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	2500      	movs	r5, #0
 8003220:	4e0c      	ldr	r6, [pc, #48]	; (8003254 <__libc_init_array+0x38>)
 8003222:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003224:	1ba4      	subs	r4, r4, r6
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	42a5      	cmp	r5, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	f000 fbca 	bl	80039c4 <_init>
 8003230:	2500      	movs	r5, #0
 8003232:	4e0a      	ldr	r6, [pc, #40]	; (800325c <__libc_init_array+0x40>)
 8003234:	4c0a      	ldr	r4, [pc, #40]	; (8003260 <__libc_init_array+0x44>)
 8003236:	1ba4      	subs	r4, r4, r6
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	42a5      	cmp	r5, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003244:	4798      	blx	r3
 8003246:	3501      	adds	r5, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800324e:	4798      	blx	r3
 8003250:	3501      	adds	r5, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08003a80 	.word	0x08003a80
 8003258:	08003a80 	.word	0x08003a80
 800325c:	08003a80 	.word	0x08003a80
 8003260:	08003a84 	.word	0x08003a84

08003264 <memset>:
 8003264:	4603      	mov	r3, r0
 8003266:	4402      	add	r2, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <setvbuf>:
 8003274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003278:	461d      	mov	r5, r3
 800327a:	4b51      	ldr	r3, [pc, #324]	; (80033c0 <setvbuf+0x14c>)
 800327c:	4604      	mov	r4, r0
 800327e:	681e      	ldr	r6, [r3, #0]
 8003280:	460f      	mov	r7, r1
 8003282:	4690      	mov	r8, r2
 8003284:	b126      	cbz	r6, 8003290 <setvbuf+0x1c>
 8003286:	69b3      	ldr	r3, [r6, #24]
 8003288:	b913      	cbnz	r3, 8003290 <setvbuf+0x1c>
 800328a:	4630      	mov	r0, r6
 800328c:	f000 f990 	bl	80035b0 <__sinit>
 8003290:	4b4c      	ldr	r3, [pc, #304]	; (80033c4 <setvbuf+0x150>)
 8003292:	429c      	cmp	r4, r3
 8003294:	d152      	bne.n	800333c <setvbuf+0xc8>
 8003296:	6874      	ldr	r4, [r6, #4]
 8003298:	f1b8 0f02 	cmp.w	r8, #2
 800329c:	d006      	beq.n	80032ac <setvbuf+0x38>
 800329e:	f1b8 0f01 	cmp.w	r8, #1
 80032a2:	f200 8089 	bhi.w	80033b8 <setvbuf+0x144>
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	f2c0 8086 	blt.w	80033b8 <setvbuf+0x144>
 80032ac:	4621      	mov	r1, r4
 80032ae:	4630      	mov	r0, r6
 80032b0:	f000 f914 	bl	80034dc <_fflush_r>
 80032b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032b6:	b141      	cbz	r1, 80032ca <setvbuf+0x56>
 80032b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032bc:	4299      	cmp	r1, r3
 80032be:	d002      	beq.n	80032c6 <setvbuf+0x52>
 80032c0:	4630      	mov	r0, r6
 80032c2:	f000 fa2b 	bl	800371c <_free_r>
 80032c6:	2300      	movs	r3, #0
 80032c8:	6363      	str	r3, [r4, #52]	; 0x34
 80032ca:	2300      	movs	r3, #0
 80032cc:	61a3      	str	r3, [r4, #24]
 80032ce:	6063      	str	r3, [r4, #4]
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	d503      	bpl.n	80032de <setvbuf+0x6a>
 80032d6:	6921      	ldr	r1, [r4, #16]
 80032d8:	4630      	mov	r0, r6
 80032da:	f000 fa1f 	bl	800371c <_free_r>
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f1b8 0f02 	cmp.w	r8, #2
 80032e4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80032e8:	f023 0303 	bic.w	r3, r3, #3
 80032ec:	81a3      	strh	r3, [r4, #12]
 80032ee:	d05d      	beq.n	80033ac <setvbuf+0x138>
 80032f0:	ab01      	add	r3, sp, #4
 80032f2:	466a      	mov	r2, sp
 80032f4:	4621      	mov	r1, r4
 80032f6:	4630      	mov	r0, r6
 80032f8:	f000 f9e4 	bl	80036c4 <__swhatbuf_r>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	4318      	orrs	r0, r3
 8003300:	81a0      	strh	r0, [r4, #12]
 8003302:	bb2d      	cbnz	r5, 8003350 <setvbuf+0xdc>
 8003304:	9d00      	ldr	r5, [sp, #0]
 8003306:	4628      	mov	r0, r5
 8003308:	f000 fa00 	bl	800370c <malloc>
 800330c:	4607      	mov	r7, r0
 800330e:	2800      	cmp	r0, #0
 8003310:	d14e      	bne.n	80033b0 <setvbuf+0x13c>
 8003312:	f8dd 9000 	ldr.w	r9, [sp]
 8003316:	45a9      	cmp	r9, r5
 8003318:	d13c      	bne.n	8003394 <setvbuf+0x120>
 800331a:	f04f 30ff 	mov.w	r0, #4294967295
 800331e:	89a3      	ldrh	r3, [r4, #12]
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	81a3      	strh	r3, [r4, #12]
 8003326:	2300      	movs	r3, #0
 8003328:	60a3      	str	r3, [r4, #8]
 800332a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800332e:	6023      	str	r3, [r4, #0]
 8003330:	6123      	str	r3, [r4, #16]
 8003332:	2301      	movs	r3, #1
 8003334:	6163      	str	r3, [r4, #20]
 8003336:	b003      	add	sp, #12
 8003338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <setvbuf+0x154>)
 800333e:	429c      	cmp	r4, r3
 8003340:	d101      	bne.n	8003346 <setvbuf+0xd2>
 8003342:	68b4      	ldr	r4, [r6, #8]
 8003344:	e7a8      	b.n	8003298 <setvbuf+0x24>
 8003346:	4b21      	ldr	r3, [pc, #132]	; (80033cc <setvbuf+0x158>)
 8003348:	429c      	cmp	r4, r3
 800334a:	bf08      	it	eq
 800334c:	68f4      	ldreq	r4, [r6, #12]
 800334e:	e7a3      	b.n	8003298 <setvbuf+0x24>
 8003350:	2f00      	cmp	r7, #0
 8003352:	d0d8      	beq.n	8003306 <setvbuf+0x92>
 8003354:	69b3      	ldr	r3, [r6, #24]
 8003356:	b913      	cbnz	r3, 800335e <setvbuf+0xea>
 8003358:	4630      	mov	r0, r6
 800335a:	f000 f929 	bl	80035b0 <__sinit>
 800335e:	f1b8 0f01 	cmp.w	r8, #1
 8003362:	bf08      	it	eq
 8003364:	89a3      	ldrheq	r3, [r4, #12]
 8003366:	6027      	str	r7, [r4, #0]
 8003368:	bf04      	itt	eq
 800336a:	f043 0301 	orreq.w	r3, r3, #1
 800336e:	81a3      	strheq	r3, [r4, #12]
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003376:	f013 0008 	ands.w	r0, r3, #8
 800337a:	d01b      	beq.n	80033b4 <setvbuf+0x140>
 800337c:	f013 0001 	ands.w	r0, r3, #1
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	bf1f      	itttt	ne
 8003386:	426d      	negne	r5, r5
 8003388:	60a3      	strne	r3, [r4, #8]
 800338a:	61a5      	strne	r5, [r4, #24]
 800338c:	4618      	movne	r0, r3
 800338e:	bf08      	it	eq
 8003390:	60a5      	streq	r5, [r4, #8]
 8003392:	e7d0      	b.n	8003336 <setvbuf+0xc2>
 8003394:	4648      	mov	r0, r9
 8003396:	f000 f9b9 	bl	800370c <malloc>
 800339a:	4607      	mov	r7, r0
 800339c:	2800      	cmp	r0, #0
 800339e:	d0bc      	beq.n	800331a <setvbuf+0xa6>
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	464d      	mov	r5, r9
 80033a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a8:	81a3      	strh	r3, [r4, #12]
 80033aa:	e7d3      	b.n	8003354 <setvbuf+0xe0>
 80033ac:	2000      	movs	r0, #0
 80033ae:	e7b6      	b.n	800331e <setvbuf+0xaa>
 80033b0:	46a9      	mov	r9, r5
 80033b2:	e7f5      	b.n	80033a0 <setvbuf+0x12c>
 80033b4:	60a0      	str	r0, [r4, #8]
 80033b6:	e7be      	b.n	8003336 <setvbuf+0xc2>
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	e7bb      	b.n	8003336 <setvbuf+0xc2>
 80033be:	bf00      	nop
 80033c0:	20000004 	.word	0x20000004
 80033c4:	08003a40 	.word	0x08003a40
 80033c8:	08003a60 	.word	0x08003a60
 80033cc:	08003a20 	.word	0x08003a20

080033d0 <__sflush_r>:
 80033d0:	898a      	ldrh	r2, [r1, #12]
 80033d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d6:	4605      	mov	r5, r0
 80033d8:	0710      	lsls	r0, r2, #28
 80033da:	460c      	mov	r4, r1
 80033dc:	d458      	bmi.n	8003490 <__sflush_r+0xc0>
 80033de:	684b      	ldr	r3, [r1, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	dc05      	bgt.n	80033f0 <__sflush_r+0x20>
 80033e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	dc02      	bgt.n	80033f0 <__sflush_r+0x20>
 80033ea:	2000      	movs	r0, #0
 80033ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033f2:	2e00      	cmp	r6, #0
 80033f4:	d0f9      	beq.n	80033ea <__sflush_r+0x1a>
 80033f6:	2300      	movs	r3, #0
 80033f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033fc:	682f      	ldr	r7, [r5, #0]
 80033fe:	6a21      	ldr	r1, [r4, #32]
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	d032      	beq.n	800346a <__sflush_r+0x9a>
 8003404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	075a      	lsls	r2, r3, #29
 800340a:	d505      	bpl.n	8003418 <__sflush_r+0x48>
 800340c:	6863      	ldr	r3, [r4, #4]
 800340e:	1ac0      	subs	r0, r0, r3
 8003410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003412:	b10b      	cbz	r3, 8003418 <__sflush_r+0x48>
 8003414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003416:	1ac0      	subs	r0, r0, r3
 8003418:	2300      	movs	r3, #0
 800341a:	4602      	mov	r2, r0
 800341c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800341e:	6a21      	ldr	r1, [r4, #32]
 8003420:	4628      	mov	r0, r5
 8003422:	47b0      	blx	r6
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	d106      	bne.n	8003438 <__sflush_r+0x68>
 800342a:	6829      	ldr	r1, [r5, #0]
 800342c:	291d      	cmp	r1, #29
 800342e:	d848      	bhi.n	80034c2 <__sflush_r+0xf2>
 8003430:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <__sflush_r+0x108>)
 8003432:	40ca      	lsrs	r2, r1
 8003434:	07d6      	lsls	r6, r2, #31
 8003436:	d544      	bpl.n	80034c2 <__sflush_r+0xf2>
 8003438:	2200      	movs	r2, #0
 800343a:	6062      	str	r2, [r4, #4]
 800343c:	6922      	ldr	r2, [r4, #16]
 800343e:	04d9      	lsls	r1, r3, #19
 8003440:	6022      	str	r2, [r4, #0]
 8003442:	d504      	bpl.n	800344e <__sflush_r+0x7e>
 8003444:	1c42      	adds	r2, r0, #1
 8003446:	d101      	bne.n	800344c <__sflush_r+0x7c>
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	b903      	cbnz	r3, 800344e <__sflush_r+0x7e>
 800344c:	6560      	str	r0, [r4, #84]	; 0x54
 800344e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003450:	602f      	str	r7, [r5, #0]
 8003452:	2900      	cmp	r1, #0
 8003454:	d0c9      	beq.n	80033ea <__sflush_r+0x1a>
 8003456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800345a:	4299      	cmp	r1, r3
 800345c:	d002      	beq.n	8003464 <__sflush_r+0x94>
 800345e:	4628      	mov	r0, r5
 8003460:	f000 f95c 	bl	800371c <_free_r>
 8003464:	2000      	movs	r0, #0
 8003466:	6360      	str	r0, [r4, #52]	; 0x34
 8003468:	e7c0      	b.n	80033ec <__sflush_r+0x1c>
 800346a:	2301      	movs	r3, #1
 800346c:	4628      	mov	r0, r5
 800346e:	47b0      	blx	r6
 8003470:	1c41      	adds	r1, r0, #1
 8003472:	d1c8      	bne.n	8003406 <__sflush_r+0x36>
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0c5      	beq.n	8003406 <__sflush_r+0x36>
 800347a:	2b1d      	cmp	r3, #29
 800347c:	d001      	beq.n	8003482 <__sflush_r+0xb2>
 800347e:	2b16      	cmp	r3, #22
 8003480:	d101      	bne.n	8003486 <__sflush_r+0xb6>
 8003482:	602f      	str	r7, [r5, #0]
 8003484:	e7b1      	b.n	80033ea <__sflush_r+0x1a>
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	e7ad      	b.n	80033ec <__sflush_r+0x1c>
 8003490:	690f      	ldr	r7, [r1, #16]
 8003492:	2f00      	cmp	r7, #0
 8003494:	d0a9      	beq.n	80033ea <__sflush_r+0x1a>
 8003496:	0793      	lsls	r3, r2, #30
 8003498:	bf18      	it	ne
 800349a:	2300      	movne	r3, #0
 800349c:	680e      	ldr	r6, [r1, #0]
 800349e:	bf08      	it	eq
 80034a0:	694b      	ldreq	r3, [r1, #20]
 80034a2:	eba6 0807 	sub.w	r8, r6, r7
 80034a6:	600f      	str	r7, [r1, #0]
 80034a8:	608b      	str	r3, [r1, #8]
 80034aa:	f1b8 0f00 	cmp.w	r8, #0
 80034ae:	dd9c      	ble.n	80033ea <__sflush_r+0x1a>
 80034b0:	4643      	mov	r3, r8
 80034b2:	463a      	mov	r2, r7
 80034b4:	6a21      	ldr	r1, [r4, #32]
 80034b6:	4628      	mov	r0, r5
 80034b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034ba:	47b0      	blx	r6
 80034bc:	2800      	cmp	r0, #0
 80034be:	dc06      	bgt.n	80034ce <__sflush_r+0xfe>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	e78e      	b.n	80033ec <__sflush_r+0x1c>
 80034ce:	4407      	add	r7, r0
 80034d0:	eba8 0800 	sub.w	r8, r8, r0
 80034d4:	e7e9      	b.n	80034aa <__sflush_r+0xda>
 80034d6:	bf00      	nop
 80034d8:	20400001 	.word	0x20400001

080034dc <_fflush_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	690b      	ldr	r3, [r1, #16]
 80034e0:	4605      	mov	r5, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	b1db      	cbz	r3, 800351e <_fflush_r+0x42>
 80034e6:	b118      	cbz	r0, 80034f0 <_fflush_r+0x14>
 80034e8:	6983      	ldr	r3, [r0, #24]
 80034ea:	b90b      	cbnz	r3, 80034f0 <_fflush_r+0x14>
 80034ec:	f000 f860 	bl	80035b0 <__sinit>
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <_fflush_r+0x48>)
 80034f2:	429c      	cmp	r4, r3
 80034f4:	d109      	bne.n	800350a <_fflush_r+0x2e>
 80034f6:	686c      	ldr	r4, [r5, #4]
 80034f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034fc:	b17b      	cbz	r3, 800351e <_fflush_r+0x42>
 80034fe:	4621      	mov	r1, r4
 8003500:	4628      	mov	r0, r5
 8003502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003506:	f7ff bf63 	b.w	80033d0 <__sflush_r>
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <_fflush_r+0x4c>)
 800350c:	429c      	cmp	r4, r3
 800350e:	d101      	bne.n	8003514 <_fflush_r+0x38>
 8003510:	68ac      	ldr	r4, [r5, #8]
 8003512:	e7f1      	b.n	80034f8 <_fflush_r+0x1c>
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <_fflush_r+0x50>)
 8003516:	429c      	cmp	r4, r3
 8003518:	bf08      	it	eq
 800351a:	68ec      	ldreq	r4, [r5, #12]
 800351c:	e7ec      	b.n	80034f8 <_fflush_r+0x1c>
 800351e:	2000      	movs	r0, #0
 8003520:	bd38      	pop	{r3, r4, r5, pc}
 8003522:	bf00      	nop
 8003524:	08003a40 	.word	0x08003a40
 8003528:	08003a60 	.word	0x08003a60
 800352c:	08003a20 	.word	0x08003a20

08003530 <std>:
 8003530:	2300      	movs	r3, #0
 8003532:	b510      	push	{r4, lr}
 8003534:	4604      	mov	r4, r0
 8003536:	e9c0 3300 	strd	r3, r3, [r0]
 800353a:	6083      	str	r3, [r0, #8]
 800353c:	8181      	strh	r1, [r0, #12]
 800353e:	6643      	str	r3, [r0, #100]	; 0x64
 8003540:	81c2      	strh	r2, [r0, #14]
 8003542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003546:	6183      	str	r3, [r0, #24]
 8003548:	4619      	mov	r1, r3
 800354a:	2208      	movs	r2, #8
 800354c:	305c      	adds	r0, #92	; 0x5c
 800354e:	f7ff fe89 	bl	8003264 <memset>
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <std+0x38>)
 8003554:	6224      	str	r4, [r4, #32]
 8003556:	6263      	str	r3, [r4, #36]	; 0x24
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <std+0x3c>)
 800355a:	62a3      	str	r3, [r4, #40]	; 0x28
 800355c:	4b04      	ldr	r3, [pc, #16]	; (8003570 <std+0x40>)
 800355e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <std+0x44>)
 8003562:	6323      	str	r3, [r4, #48]	; 0x30
 8003564:	bd10      	pop	{r4, pc}
 8003566:	bf00      	nop
 8003568:	08003889 	.word	0x08003889
 800356c:	080038ab 	.word	0x080038ab
 8003570:	080038e3 	.word	0x080038e3
 8003574:	08003907 	.word	0x08003907

08003578 <_cleanup_r>:
 8003578:	4901      	ldr	r1, [pc, #4]	; (8003580 <_cleanup_r+0x8>)
 800357a:	f000 b885 	b.w	8003688 <_fwalk_reent>
 800357e:	bf00      	nop
 8003580:	080034dd 	.word	0x080034dd

08003584 <__sfmoreglue>:
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	2568      	movs	r5, #104	; 0x68
 8003588:	1e4a      	subs	r2, r1, #1
 800358a:	4355      	muls	r5, r2
 800358c:	460e      	mov	r6, r1
 800358e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003592:	f000 f90f 	bl	80037b4 <_malloc_r>
 8003596:	4604      	mov	r4, r0
 8003598:	b140      	cbz	r0, 80035ac <__sfmoreglue+0x28>
 800359a:	2100      	movs	r1, #0
 800359c:	e9c0 1600 	strd	r1, r6, [r0]
 80035a0:	300c      	adds	r0, #12
 80035a2:	60a0      	str	r0, [r4, #8]
 80035a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035a8:	f7ff fe5c 	bl	8003264 <memset>
 80035ac:	4620      	mov	r0, r4
 80035ae:	bd70      	pop	{r4, r5, r6, pc}

080035b0 <__sinit>:
 80035b0:	6983      	ldr	r3, [r0, #24]
 80035b2:	b510      	push	{r4, lr}
 80035b4:	4604      	mov	r4, r0
 80035b6:	bb33      	cbnz	r3, 8003606 <__sinit+0x56>
 80035b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80035bc:	6503      	str	r3, [r0, #80]	; 0x50
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <__sinit+0x58>)
 80035c0:	4a12      	ldr	r2, [pc, #72]	; (800360c <__sinit+0x5c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6282      	str	r2, [r0, #40]	; 0x28
 80035c6:	4298      	cmp	r0, r3
 80035c8:	bf04      	itt	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	6183      	streq	r3, [r0, #24]
 80035ce:	f000 f81f 	bl	8003610 <__sfp>
 80035d2:	6060      	str	r0, [r4, #4]
 80035d4:	4620      	mov	r0, r4
 80035d6:	f000 f81b 	bl	8003610 <__sfp>
 80035da:	60a0      	str	r0, [r4, #8]
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 f817 	bl	8003610 <__sfp>
 80035e2:	2200      	movs	r2, #0
 80035e4:	60e0      	str	r0, [r4, #12]
 80035e6:	2104      	movs	r1, #4
 80035e8:	6860      	ldr	r0, [r4, #4]
 80035ea:	f7ff ffa1 	bl	8003530 <std>
 80035ee:	2201      	movs	r2, #1
 80035f0:	2109      	movs	r1, #9
 80035f2:	68a0      	ldr	r0, [r4, #8]
 80035f4:	f7ff ff9c 	bl	8003530 <std>
 80035f8:	2202      	movs	r2, #2
 80035fa:	2112      	movs	r1, #18
 80035fc:	68e0      	ldr	r0, [r4, #12]
 80035fe:	f7ff ff97 	bl	8003530 <std>
 8003602:	2301      	movs	r3, #1
 8003604:	61a3      	str	r3, [r4, #24]
 8003606:	bd10      	pop	{r4, pc}
 8003608:	08003a1c 	.word	0x08003a1c
 800360c:	08003579 	.word	0x08003579

08003610 <__sfp>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <__sfp+0x70>)
 8003614:	4607      	mov	r7, r0
 8003616:	681e      	ldr	r6, [r3, #0]
 8003618:	69b3      	ldr	r3, [r6, #24]
 800361a:	b913      	cbnz	r3, 8003622 <__sfp+0x12>
 800361c:	4630      	mov	r0, r6
 800361e:	f7ff ffc7 	bl	80035b0 <__sinit>
 8003622:	3648      	adds	r6, #72	; 0x48
 8003624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003628:	3b01      	subs	r3, #1
 800362a:	d503      	bpl.n	8003634 <__sfp+0x24>
 800362c:	6833      	ldr	r3, [r6, #0]
 800362e:	b133      	cbz	r3, 800363e <__sfp+0x2e>
 8003630:	6836      	ldr	r6, [r6, #0]
 8003632:	e7f7      	b.n	8003624 <__sfp+0x14>
 8003634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003638:	b16d      	cbz	r5, 8003656 <__sfp+0x46>
 800363a:	3468      	adds	r4, #104	; 0x68
 800363c:	e7f4      	b.n	8003628 <__sfp+0x18>
 800363e:	2104      	movs	r1, #4
 8003640:	4638      	mov	r0, r7
 8003642:	f7ff ff9f 	bl	8003584 <__sfmoreglue>
 8003646:	6030      	str	r0, [r6, #0]
 8003648:	2800      	cmp	r0, #0
 800364a:	d1f1      	bne.n	8003630 <__sfp+0x20>
 800364c:	230c      	movs	r3, #12
 800364e:	4604      	mov	r4, r0
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4620      	mov	r0, r4
 8003654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <__sfp+0x74>)
 8003658:	6665      	str	r5, [r4, #100]	; 0x64
 800365a:	e9c4 5500 	strd	r5, r5, [r4]
 800365e:	60a5      	str	r5, [r4, #8]
 8003660:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003664:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003668:	2208      	movs	r2, #8
 800366a:	4629      	mov	r1, r5
 800366c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003670:	f7ff fdf8 	bl	8003264 <memset>
 8003674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800367c:	e7e9      	b.n	8003652 <__sfp+0x42>
 800367e:	bf00      	nop
 8003680:	08003a1c 	.word	0x08003a1c
 8003684:	ffff0001 	.word	0xffff0001

08003688 <_fwalk_reent>:
 8003688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800368c:	4680      	mov	r8, r0
 800368e:	4689      	mov	r9, r1
 8003690:	2600      	movs	r6, #0
 8003692:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003696:	b914      	cbnz	r4, 800369e <_fwalk_reent+0x16>
 8003698:	4630      	mov	r0, r6
 800369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800369e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80036a2:	3f01      	subs	r7, #1
 80036a4:	d501      	bpl.n	80036aa <_fwalk_reent+0x22>
 80036a6:	6824      	ldr	r4, [r4, #0]
 80036a8:	e7f5      	b.n	8003696 <_fwalk_reent+0xe>
 80036aa:	89ab      	ldrh	r3, [r5, #12]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d907      	bls.n	80036c0 <_fwalk_reent+0x38>
 80036b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036b4:	3301      	adds	r3, #1
 80036b6:	d003      	beq.n	80036c0 <_fwalk_reent+0x38>
 80036b8:	4629      	mov	r1, r5
 80036ba:	4640      	mov	r0, r8
 80036bc:	47c8      	blx	r9
 80036be:	4306      	orrs	r6, r0
 80036c0:	3568      	adds	r5, #104	; 0x68
 80036c2:	e7ee      	b.n	80036a2 <_fwalk_reent+0x1a>

080036c4 <__swhatbuf_r>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	460e      	mov	r6, r1
 80036c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036cc:	b096      	sub	sp, #88	; 0x58
 80036ce:	2900      	cmp	r1, #0
 80036d0:	4614      	mov	r4, r2
 80036d2:	461d      	mov	r5, r3
 80036d4:	da07      	bge.n	80036e6 <__swhatbuf_r+0x22>
 80036d6:	2300      	movs	r3, #0
 80036d8:	602b      	str	r3, [r5, #0]
 80036da:	89b3      	ldrh	r3, [r6, #12]
 80036dc:	061a      	lsls	r2, r3, #24
 80036de:	d410      	bmi.n	8003702 <__swhatbuf_r+0x3e>
 80036e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e4:	e00e      	b.n	8003704 <__swhatbuf_r+0x40>
 80036e6:	466a      	mov	r2, sp
 80036e8:	f000 f934 	bl	8003954 <_fstat_r>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	dbf2      	blt.n	80036d6 <__swhatbuf_r+0x12>
 80036f0:	9a01      	ldr	r2, [sp, #4]
 80036f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036fa:	425a      	negs	r2, r3
 80036fc:	415a      	adcs	r2, r3
 80036fe:	602a      	str	r2, [r5, #0]
 8003700:	e7ee      	b.n	80036e0 <__swhatbuf_r+0x1c>
 8003702:	2340      	movs	r3, #64	; 0x40
 8003704:	2000      	movs	r0, #0
 8003706:	6023      	str	r3, [r4, #0]
 8003708:	b016      	add	sp, #88	; 0x58
 800370a:	bd70      	pop	{r4, r5, r6, pc}

0800370c <malloc>:
 800370c:	4b02      	ldr	r3, [pc, #8]	; (8003718 <malloc+0xc>)
 800370e:	4601      	mov	r1, r0
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	f000 b84f 	b.w	80037b4 <_malloc_r>
 8003716:	bf00      	nop
 8003718:	20000004 	.word	0x20000004

0800371c <_free_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4605      	mov	r5, r0
 8003720:	2900      	cmp	r1, #0
 8003722:	d043      	beq.n	80037ac <_free_r+0x90>
 8003724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003728:	1f0c      	subs	r4, r1, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bfb8      	it	lt
 800372e:	18e4      	addlt	r4, r4, r3
 8003730:	f000 f934 	bl	800399c <__malloc_lock>
 8003734:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <_free_r+0x94>)
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	4610      	mov	r0, r2
 800373a:	b933      	cbnz	r3, 800374a <_free_r+0x2e>
 800373c:	6063      	str	r3, [r4, #4]
 800373e:	6014      	str	r4, [r2, #0]
 8003740:	4628      	mov	r0, r5
 8003742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003746:	f000 b92a 	b.w	800399e <__malloc_unlock>
 800374a:	42a3      	cmp	r3, r4
 800374c:	d90b      	bls.n	8003766 <_free_r+0x4a>
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	1862      	adds	r2, r4, r1
 8003752:	4293      	cmp	r3, r2
 8003754:	bf01      	itttt	eq
 8003756:	681a      	ldreq	r2, [r3, #0]
 8003758:	685b      	ldreq	r3, [r3, #4]
 800375a:	1852      	addeq	r2, r2, r1
 800375c:	6022      	streq	r2, [r4, #0]
 800375e:	6063      	str	r3, [r4, #4]
 8003760:	6004      	str	r4, [r0, #0]
 8003762:	e7ed      	b.n	8003740 <_free_r+0x24>
 8003764:	4613      	mov	r3, r2
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	b10a      	cbz	r2, 800376e <_free_r+0x52>
 800376a:	42a2      	cmp	r2, r4
 800376c:	d9fa      	bls.n	8003764 <_free_r+0x48>
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	1858      	adds	r0, r3, r1
 8003772:	42a0      	cmp	r0, r4
 8003774:	d10b      	bne.n	800378e <_free_r+0x72>
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	4401      	add	r1, r0
 800377a:	1858      	adds	r0, r3, r1
 800377c:	4282      	cmp	r2, r0
 800377e:	6019      	str	r1, [r3, #0]
 8003780:	d1de      	bne.n	8003740 <_free_r+0x24>
 8003782:	6810      	ldr	r0, [r2, #0]
 8003784:	6852      	ldr	r2, [r2, #4]
 8003786:	4401      	add	r1, r0
 8003788:	6019      	str	r1, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	e7d8      	b.n	8003740 <_free_r+0x24>
 800378e:	d902      	bls.n	8003796 <_free_r+0x7a>
 8003790:	230c      	movs	r3, #12
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	e7d4      	b.n	8003740 <_free_r+0x24>
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	1821      	adds	r1, r4, r0
 800379a:	428a      	cmp	r2, r1
 800379c:	bf01      	itttt	eq
 800379e:	6811      	ldreq	r1, [r2, #0]
 80037a0:	6852      	ldreq	r2, [r2, #4]
 80037a2:	1809      	addeq	r1, r1, r0
 80037a4:	6021      	streq	r1, [r4, #0]
 80037a6:	6062      	str	r2, [r4, #4]
 80037a8:	605c      	str	r4, [r3, #4]
 80037aa:	e7c9      	b.n	8003740 <_free_r+0x24>
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
 80037ae:	bf00      	nop
 80037b0:	20000088 	.word	0x20000088

080037b4 <_malloc_r>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	1ccd      	adds	r5, r1, #3
 80037b8:	f025 0503 	bic.w	r5, r5, #3
 80037bc:	3508      	adds	r5, #8
 80037be:	2d0c      	cmp	r5, #12
 80037c0:	bf38      	it	cc
 80037c2:	250c      	movcc	r5, #12
 80037c4:	2d00      	cmp	r5, #0
 80037c6:	4606      	mov	r6, r0
 80037c8:	db01      	blt.n	80037ce <_malloc_r+0x1a>
 80037ca:	42a9      	cmp	r1, r5
 80037cc:	d903      	bls.n	80037d6 <_malloc_r+0x22>
 80037ce:	230c      	movs	r3, #12
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	2000      	movs	r0, #0
 80037d4:	bd70      	pop	{r4, r5, r6, pc}
 80037d6:	f000 f8e1 	bl	800399c <__malloc_lock>
 80037da:	4a21      	ldr	r2, [pc, #132]	; (8003860 <_malloc_r+0xac>)
 80037dc:	6814      	ldr	r4, [r2, #0]
 80037de:	4621      	mov	r1, r4
 80037e0:	b991      	cbnz	r1, 8003808 <_malloc_r+0x54>
 80037e2:	4c20      	ldr	r4, [pc, #128]	; (8003864 <_malloc_r+0xb0>)
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	b91b      	cbnz	r3, 80037f0 <_malloc_r+0x3c>
 80037e8:	4630      	mov	r0, r6
 80037ea:	f000 f83d 	bl	8003868 <_sbrk_r>
 80037ee:	6020      	str	r0, [r4, #0]
 80037f0:	4629      	mov	r1, r5
 80037f2:	4630      	mov	r0, r6
 80037f4:	f000 f838 	bl	8003868 <_sbrk_r>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d124      	bne.n	8003846 <_malloc_r+0x92>
 80037fc:	230c      	movs	r3, #12
 80037fe:	4630      	mov	r0, r6
 8003800:	6033      	str	r3, [r6, #0]
 8003802:	f000 f8cc 	bl	800399e <__malloc_unlock>
 8003806:	e7e4      	b.n	80037d2 <_malloc_r+0x1e>
 8003808:	680b      	ldr	r3, [r1, #0]
 800380a:	1b5b      	subs	r3, r3, r5
 800380c:	d418      	bmi.n	8003840 <_malloc_r+0x8c>
 800380e:	2b0b      	cmp	r3, #11
 8003810:	d90f      	bls.n	8003832 <_malloc_r+0x7e>
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	18cc      	adds	r4, r1, r3
 8003816:	50cd      	str	r5, [r1, r3]
 8003818:	4630      	mov	r0, r6
 800381a:	f000 f8c0 	bl	800399e <__malloc_unlock>
 800381e:	f104 000b 	add.w	r0, r4, #11
 8003822:	1d23      	adds	r3, r4, #4
 8003824:	f020 0007 	bic.w	r0, r0, #7
 8003828:	1ac3      	subs	r3, r0, r3
 800382a:	d0d3      	beq.n	80037d4 <_malloc_r+0x20>
 800382c:	425a      	negs	r2, r3
 800382e:	50e2      	str	r2, [r4, r3]
 8003830:	e7d0      	b.n	80037d4 <_malloc_r+0x20>
 8003832:	684b      	ldr	r3, [r1, #4]
 8003834:	428c      	cmp	r4, r1
 8003836:	bf16      	itet	ne
 8003838:	6063      	strne	r3, [r4, #4]
 800383a:	6013      	streq	r3, [r2, #0]
 800383c:	460c      	movne	r4, r1
 800383e:	e7eb      	b.n	8003818 <_malloc_r+0x64>
 8003840:	460c      	mov	r4, r1
 8003842:	6849      	ldr	r1, [r1, #4]
 8003844:	e7cc      	b.n	80037e0 <_malloc_r+0x2c>
 8003846:	1cc4      	adds	r4, r0, #3
 8003848:	f024 0403 	bic.w	r4, r4, #3
 800384c:	42a0      	cmp	r0, r4
 800384e:	d005      	beq.n	800385c <_malloc_r+0xa8>
 8003850:	1a21      	subs	r1, r4, r0
 8003852:	4630      	mov	r0, r6
 8003854:	f000 f808 	bl	8003868 <_sbrk_r>
 8003858:	3001      	adds	r0, #1
 800385a:	d0cf      	beq.n	80037fc <_malloc_r+0x48>
 800385c:	6025      	str	r5, [r4, #0]
 800385e:	e7db      	b.n	8003818 <_malloc_r+0x64>
 8003860:	20000088 	.word	0x20000088
 8003864:	2000008c 	.word	0x2000008c

08003868 <_sbrk_r>:
 8003868:	b538      	push	{r3, r4, r5, lr}
 800386a:	2300      	movs	r3, #0
 800386c:	4c05      	ldr	r4, [pc, #20]	; (8003884 <_sbrk_r+0x1c>)
 800386e:	4605      	mov	r5, r0
 8003870:	4608      	mov	r0, r1
 8003872:	6023      	str	r3, [r4, #0]
 8003874:	f7fe fb06 	bl	8001e84 <_sbrk>
 8003878:	1c43      	adds	r3, r0, #1
 800387a:	d102      	bne.n	8003882 <_sbrk_r+0x1a>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	b103      	cbz	r3, 8003882 <_sbrk_r+0x1a>
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	bd38      	pop	{r3, r4, r5, pc}
 8003884:	200000a0 	.word	0x200000a0

08003888 <__sread>:
 8003888:	b510      	push	{r4, lr}
 800388a:	460c      	mov	r4, r1
 800388c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003890:	f000 f886 	bl	80039a0 <_read_r>
 8003894:	2800      	cmp	r0, #0
 8003896:	bfab      	itete	ge
 8003898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800389a:	89a3      	ldrhlt	r3, [r4, #12]
 800389c:	181b      	addge	r3, r3, r0
 800389e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038a2:	bfac      	ite	ge
 80038a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80038a6:	81a3      	strhlt	r3, [r4, #12]
 80038a8:	bd10      	pop	{r4, pc}

080038aa <__swrite>:
 80038aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ae:	461f      	mov	r7, r3
 80038b0:	898b      	ldrh	r3, [r1, #12]
 80038b2:	4605      	mov	r5, r0
 80038b4:	05db      	lsls	r3, r3, #23
 80038b6:	460c      	mov	r4, r1
 80038b8:	4616      	mov	r6, r2
 80038ba:	d505      	bpl.n	80038c8 <__swrite+0x1e>
 80038bc:	2302      	movs	r3, #2
 80038be:	2200      	movs	r2, #0
 80038c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c4:	f000 f858 	bl	8003978 <_lseek_r>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	4632      	mov	r2, r6
 80038cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038d0:	81a3      	strh	r3, [r4, #12]
 80038d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038d6:	463b      	mov	r3, r7
 80038d8:	4628      	mov	r0, r5
 80038da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038de:	f000 b817 	b.w	8003910 <_write_r>

080038e2 <__sseek>:
 80038e2:	b510      	push	{r4, lr}
 80038e4:	460c      	mov	r4, r1
 80038e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ea:	f000 f845 	bl	8003978 <_lseek_r>
 80038ee:	1c43      	adds	r3, r0, #1
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	bf15      	itete	ne
 80038f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80038f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038fe:	81a3      	strheq	r3, [r4, #12]
 8003900:	bf18      	it	ne
 8003902:	81a3      	strhne	r3, [r4, #12]
 8003904:	bd10      	pop	{r4, pc}

08003906 <__sclose>:
 8003906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800390a:	f000 b813 	b.w	8003934 <_close_r>
	...

08003910 <_write_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4605      	mov	r5, r0
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	2200      	movs	r2, #0
 800391a:	4c05      	ldr	r4, [pc, #20]	; (8003930 <_write_r+0x20>)
 800391c:	6022      	str	r2, [r4, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	f7fe fa6e 	bl	8001e00 <_write>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d102      	bne.n	800392e <_write_r+0x1e>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	b103      	cbz	r3, 800392e <_write_r+0x1e>
 800392c:	602b      	str	r3, [r5, #0]
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	200000a0 	.word	0x200000a0

08003934 <_close_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	2300      	movs	r3, #0
 8003938:	4c05      	ldr	r4, [pc, #20]	; (8003950 <_close_r+0x1c>)
 800393a:	4605      	mov	r5, r0
 800393c:	4608      	mov	r0, r1
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	f7fe fa7a 	bl	8001e38 <_close>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_close_r+0x1a>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	b103      	cbz	r3, 800394e <_close_r+0x1a>
 800394c:	602b      	str	r3, [r5, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	200000a0 	.word	0x200000a0

08003954 <_fstat_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	2300      	movs	r3, #0
 8003958:	4c06      	ldr	r4, [pc, #24]	; (8003974 <_fstat_r+0x20>)
 800395a:	4605      	mov	r5, r0
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	f7fe fa74 	bl	8001e4e <_fstat>
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	d102      	bne.n	8003970 <_fstat_r+0x1c>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	b103      	cbz	r3, 8003970 <_fstat_r+0x1c>
 800396e:	602b      	str	r3, [r5, #0]
 8003970:	bd38      	pop	{r3, r4, r5, pc}
 8003972:	bf00      	nop
 8003974:	200000a0 	.word	0x200000a0

08003978 <_lseek_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4605      	mov	r5, r0
 800397c:	4608      	mov	r0, r1
 800397e:	4611      	mov	r1, r2
 8003980:	2200      	movs	r2, #0
 8003982:	4c05      	ldr	r4, [pc, #20]	; (8003998 <_lseek_r+0x20>)
 8003984:	6022      	str	r2, [r4, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f7fe fa70 	bl	8001e6c <_lseek>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_lseek_r+0x1e>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	b103      	cbz	r3, 8003996 <_lseek_r+0x1e>
 8003994:	602b      	str	r3, [r5, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	200000a0 	.word	0x200000a0

0800399c <__malloc_lock>:
 800399c:	4770      	bx	lr

0800399e <__malloc_unlock>:
 800399e:	4770      	bx	lr

080039a0 <_read_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4605      	mov	r5, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	2200      	movs	r2, #0
 80039aa:	4c05      	ldr	r4, [pc, #20]	; (80039c0 <_read_r+0x20>)
 80039ac:	6022      	str	r2, [r4, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f7fe fa09 	bl	8001dc6 <_read>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_read_r+0x1e>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	b103      	cbz	r3, 80039be <_read_r+0x1e>
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	200000a0 	.word	0x200000a0

080039c4 <_init>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	bf00      	nop
 80039c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ca:	bc08      	pop	{r3}
 80039cc:	469e      	mov	lr, r3
 80039ce:	4770      	bx	lr

080039d0 <_fini>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr

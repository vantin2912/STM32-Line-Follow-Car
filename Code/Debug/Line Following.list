
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004204  08004204  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004204  08004204  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004204  08004204  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800420c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000068  08004274  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08004274  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000820d  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001934  00000000  00000000  0002829e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  00029bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  0002a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001530a  00000000  00000000  0002aef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005edd  00000000  00000000  000401fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d87d  00000000  00000000  000460d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3954  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b4  00000000  00000000  000b39d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800410c 	.word	0x0800410c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800410c 	.word	0x0800410c

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	; 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80002a0:	b490      	push	{r4, r7}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	332c      	adds	r3, #44	; 0x2c
 80002b0:	4619      	mov	r1, r3
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80002b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002bc:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002be:	697a      	ldr	r2, [r7, #20]
 80002c0:	fa92 f2a2 	rbit	r2, r2
 80002c4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	440b      	add	r3, r1
 80002d4:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80002d6:	6822      	ldr	r2, [r4, #0]
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	f003 031f 	and.w	r3, r3, #31
 80002de:	211f      	movs	r1, #31
 80002e0:	fa01 f303 	lsl.w	r3, r1, r3
 80002e4:	43db      	mvns	r3, r3
 80002e6:	401a      	ands	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f003 011f 	and.w	r1, r3, #31
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	f003 031f 	and.w	r3, r3, #31
 80002f4:	fa01 f303 	lsl.w	r3, r1, r3
 80002f8:	4313      	orrs	r3, r2
 80002fa:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80002fc:	bf00      	nop
 80002fe:	3718      	adds	r7, #24
 8000300:	46bd      	mov	sp, r7
 8000302:	bc90      	pop	{r4, r7}
 8000304:	4770      	bx	lr

08000306 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	431a      	orrs	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	609a      	str	r2, [r3, #8]
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr

0800032a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800032a:	b490      	push	{r4, r7}
 800032c:	b08a      	sub	sp, #40	; 0x28
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	330c      	adds	r3, #12
 800033a:	4619      	mov	r1, r3
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000342:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000348:	697a      	ldr	r2, [r7, #20]
 800034a:	fa92 f2a2 	rbit	r2, r2
 800034e:	613a      	str	r2, [r7, #16]
  return result;
 8000350:	693a      	ldr	r2, [r7, #16]
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b2d2      	uxtb	r2, r2
 8000358:	40d3      	lsrs	r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	440b      	add	r3, r1
 800035e:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000360:	6822      	ldr	r2, [r4, #0]
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000368:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800036c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800036e:	69f9      	ldr	r1, [r7, #28]
 8000370:	fa91 f1a1 	rbit	r1, r1
 8000374:	61b9      	str	r1, [r7, #24]
  return result;
 8000376:	69b9      	ldr	r1, [r7, #24]
 8000378:	fab1 f181 	clz	r1, r1
 800037c:	b2c9      	uxtb	r1, r1
 800037e:	40cb      	lsrs	r3, r1
 8000380:	2107      	movs	r1, #7
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	43db      	mvns	r3, r3
 8000388:	401a      	ands	r2, r3
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000390:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000394:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000398:	fa91 f1a1 	rbit	r1, r1
 800039c:	6239      	str	r1, [r7, #32]
  return result;
 800039e:	6a39      	ldr	r1, [r7, #32]
 80003a0:	fab1 f181 	clz	r1, r1
 80003a4:	b2c9      	uxtb	r1, r1
 80003a6:	40cb      	lsrs	r3, r1
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	fa01 f303 	lsl.w	r3, r1, r3
 80003ae:	4313      	orrs	r3, r2
 80003b0:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80003b2:	bf00      	nop
 80003b4:	3728      	adds	r7, #40	; 0x28
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc90      	pop	{r4, r7}
 80003ba:	4770      	bx	lr

080003bc <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f043 0201 	orr.w	r2, r3, #1
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	609a      	str	r2, [r3, #8]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr

080003da <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	f043 0204 	orr.w	r2, r3, #4
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	609a      	str	r2, [r3, #8]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	2b04      	cmp	r3, #4
 800040a:	bf0c      	ite	eq
 800040c:	2301      	moveq	r3, #1
 800040e:	2300      	movne	r3, #0
 8000410:	b2db      	uxtb	r3, r3
}
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	609a      	str	r2, [r3, #8]
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
	...

0800043c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	3b01      	subs	r3, #1
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LL_DMA_EnableChannel+0x38>)
 800044c:	5cd3      	ldrb	r3, [r2, r3]
 800044e:	461a      	mov	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4413      	add	r3, r2
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	3a01      	subs	r2, #1
 800045a:	4906      	ldr	r1, [pc, #24]	; (8000474 <LL_DMA_EnableChannel+0x38>)
 800045c:	5c8a      	ldrb	r2, [r1, r2]
 800045e:	4611      	mov	r1, r2
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	440a      	add	r2, r1
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6013      	str	r3, [r2, #0]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	0800412c 	.word	0x0800412c

08000478 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	3b01      	subs	r3, #1
 8000488:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <LL_DMA_SetDataTransferDirection+0x44>)
 800048a:	5cd3      	ldrb	r3, [r2, r3]
 800048c:	461a      	mov	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000498:	f023 0310 	bic.w	r3, r3, #16
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	3a01      	subs	r2, #1
 80004a0:	4906      	ldr	r1, [pc, #24]	; (80004bc <LL_DMA_SetDataTransferDirection+0x44>)
 80004a2:	5c8a      	ldrb	r2, [r1, r2]
 80004a4:	4611      	mov	r1, r2
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	440a      	add	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	0800412c 	.word	0x0800412c

080004c0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <LL_DMA_SetMode+0x40>)
 80004d2:	5cd3      	ldrb	r3, [r2, r3]
 80004d4:	461a      	mov	r2, r3
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	4413      	add	r3, r2
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f023 0220 	bic.w	r2, r3, #32
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	4906      	ldr	r1, [pc, #24]	; (8000500 <LL_DMA_SetMode+0x40>)
 80004e6:	5ccb      	ldrb	r3, [r1, r3]
 80004e8:	4619      	mov	r1, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	440b      	add	r3, r1
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	600b      	str	r3, [r1, #0]
             Mode);
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	0800412c 	.word	0x0800412c

08000504 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	3b01      	subs	r3, #1
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <LL_DMA_SetPeriphIncMode+0x40>)
 8000516:	5cd3      	ldrb	r3, [r2, r3]
 8000518:	461a      	mov	r2, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	3b01      	subs	r3, #1
 8000528:	4906      	ldr	r1, [pc, #24]	; (8000544 <LL_DMA_SetPeriphIncMode+0x40>)
 800052a:	5ccb      	ldrb	r3, [r1, r3]
 800052c:	4619      	mov	r1, r3
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	440b      	add	r3, r1
 8000532:	4619      	mov	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4313      	orrs	r3, r2
 8000538:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	0800412c 	.word	0x0800412c

08000548 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	3b01      	subs	r3, #1
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LL_DMA_SetMemoryIncMode+0x40>)
 800055a:	5cd3      	ldrb	r3, [r2, r3]
 800055c:	461a      	mov	r2, r3
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4413      	add	r3, r2
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	3b01      	subs	r3, #1
 800056c:	4906      	ldr	r1, [pc, #24]	; (8000588 <LL_DMA_SetMemoryIncMode+0x40>)
 800056e:	5ccb      	ldrb	r3, [r1, r3]
 8000570:	4619      	mov	r1, r3
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	440b      	add	r3, r1
 8000576:	4619      	mov	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	0800412c 	.word	0x0800412c

0800058c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	3b01      	subs	r3, #1
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <LL_DMA_SetPeriphSize+0x40>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	461a      	mov	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	4906      	ldr	r1, [pc, #24]	; (80005cc <LL_DMA_SetPeriphSize+0x40>)
 80005b2:	5ccb      	ldrb	r3, [r1, r3]
 80005b4:	4619      	mov	r1, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	440b      	add	r3, r1
 80005ba:	4619      	mov	r1, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	0800412c 	.word	0x0800412c

080005d0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <LL_DMA_SetMemorySize+0x40>)
 80005e2:	5cd3      	ldrb	r3, [r2, r3]
 80005e4:	461a      	mov	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	4906      	ldr	r1, [pc, #24]	; (8000610 <LL_DMA_SetMemorySize+0x40>)
 80005f6:	5ccb      	ldrb	r3, [r1, r3]
 80005f8:	4619      	mov	r1, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	440b      	add	r3, r1
 80005fe:	4619      	mov	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	0800412c 	.word	0x0800412c

08000614 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3b01      	subs	r3, #1
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	3b01      	subs	r3, #1
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800063a:	5ccb      	ldrb	r3, [r1, r3]
 800063c:	4619      	mov	r1, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	440b      	add	r3, r1
 8000642:	4619      	mov	r1, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4313      	orrs	r3, r2
 8000648:	600b      	str	r3, [r1, #0]
             Priority);
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	0800412c 	.word	0x0800412c

08000658 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <LL_DMA_SetDataLength+0x40>)
 800066a:	5cd3      	ldrb	r3, [r2, r3]
 800066c:	461a      	mov	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	041b      	lsls	r3, r3, #16
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	3a01      	subs	r2, #1
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <LL_DMA_SetDataLength+0x40>)
 800067e:	5c8a      	ldrb	r2, [r1, r2]
 8000680:	4611      	mov	r1, r2
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	440a      	add	r2, r1
 8000686:	4611      	mov	r1, r2
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4313      	orrs	r3, r2
 800068c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	0800412c 	.word	0x0800412c

0800069c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <LL_DMA_SetMemoryAddress+0x2c>)
 80006ae:	5cd3      	ldrb	r3, [r2, r3]
 80006b0:	461a      	mov	r2, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4413      	add	r3, r2
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	0800412c 	.word	0x0800412c

080006cc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <LL_DMA_SetPeriphAddress+0x2c>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	461a      	mov	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4413      	add	r3, r2
 80006e6:	461a      	mov	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6093      	str	r3, [r2, #8]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	0800412c 	.word	0x0800412c

080006fc <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	431a      	orrs	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60da      	str	r2, [r3, #12]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	f023 0201 	bic.w	r2, r3, #1
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	60da      	str	r2, [r3, #12]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
	...

0800077c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <LL_RCC_HSE_Enable+0x18>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <LL_RCC_HSE_Enable+0x18>)
 8000786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000

08000798 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <LL_RCC_HSE_IsReady+0x20>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_RCC_SetSysClkSource+0x24>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f023 0203 	bic.w	r2, r3, #3
 80007cc:	4904      	ldr	r1, [pc, #16]	; (80007e0 <LL_RCC_SetSysClkSource+0x24>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	604b      	str	r3, [r1, #4]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <LL_RCC_GetSysClkSource+0x14>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 030c 	and.w	r3, r3, #12
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	40021000 	.word	0x40021000

080007fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <LL_RCC_SetAHBPrescaler+0x24>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800080c:	4904      	ldr	r1, [pc, #16]	; (8000820 <LL_RCC_SetAHBPrescaler+0x24>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	604b      	str	r3, [r1, #4]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_RCC_SetAPB1Prescaler+0x24>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000834:	4904      	ldr	r1, [pc, #16]	; (8000848 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	604b      	str	r3, [r1, #4]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40021000 	.word	0x40021000

0800084c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800085c:	4904      	ldr	r1, [pc, #16]	; (8000870 <LL_RCC_SetAPB2Prescaler+0x24>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	604b      	str	r3, [r1, #4]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <LL_RCC_SetADCClockSource+0x24>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000884:	4904      	ldr	r1, [pc, #16]	; (8000898 <LL_RCC_SetADCClockSource+0x24>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	604b      	str	r3, [r1, #4]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <LL_RCC_PLL_Enable+0x18>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a03      	ldr	r2, [pc, #12]	; (80008b4 <LL_RCC_PLL_Enable+0x18>)
 80008a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	40021000 	.word	0x40021000

080008b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <LL_RCC_PLL_IsReady+0x20>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	40021000 	.word	0x40021000

080008dc <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	430b      	orrs	r3, r1
 80008f8:	4903      	ldr	r1, [pc, #12]	; (8000908 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80008fa:	4313      	orrs	r3, r2
 80008fc:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000

0800090c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000916:	695a      	ldr	r2, [r3, #20]
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4013      	ands	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000946:	69da      	ldr	r2, [r3, #28]
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4313      	orrs	r3, r2
 800094e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4013      	ands	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000976:	699a      	ldr	r2, [r3, #24]
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000982:	699a      	ldr	r2, [r3, #24]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000

0800099c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <LL_FLASH_SetLatency+0x24>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f023 0207 	bic.w	r2, r3, #7
 80009ac:	4904      	ldr	r1, [pc, #16]	; (80009c0 <LL_FLASH_SetLatency+0x24>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	600b      	str	r3, [r1, #0]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40022000 	.word	0x40022000

080009c4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <LL_FLASH_GetLatency+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0307 	and.w	r3, r3, #7
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	40022000 	.word	0x40022000

080009dc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f043 0201 	orr.w	r2, r3, #1
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	601a      	str	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a1a      	ldr	r2, [r3, #32]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	621a      	str	r2, [r3, #32]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a6c:	b4b0      	push	{r4, r5, r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d01c      	beq.n	8000ab6 <LL_TIM_OC_DisableFast+0x4a>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d017      	beq.n	8000ab2 <LL_TIM_OC_DisableFast+0x46>
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b10      	cmp	r3, #16
 8000a86:	d012      	beq.n	8000aae <LL_TIM_OC_DisableFast+0x42>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b40      	cmp	r3, #64	; 0x40
 8000a8c:	d00d      	beq.n	8000aaa <LL_TIM_OC_DisableFast+0x3e>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a94:	d007      	beq.n	8000aa6 <LL_TIM_OC_DisableFast+0x3a>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a9c:	d101      	bne.n	8000aa2 <LL_TIM_OC_DisableFast+0x36>
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	e00a      	b.n	8000ab8 <LL_TIM_OC_DisableFast+0x4c>
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	e008      	b.n	8000ab8 <LL_TIM_OC_DisableFast+0x4c>
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	e006      	b.n	8000ab8 <LL_TIM_OC_DisableFast+0x4c>
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e004      	b.n	8000ab8 <LL_TIM_OC_DisableFast+0x4c>
 8000aae:	2302      	movs	r3, #2
 8000ab0:	e002      	b.n	8000ab8 <LL_TIM_OC_DisableFast+0x4c>
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e000      	b.n	8000ab8 <LL_TIM_OC_DisableFast+0x4c>
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3318      	adds	r3, #24
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <LL_TIM_OC_DisableFast+0x7c>)
 8000ac4:	5c5b      	ldrb	r3, [r3, r1]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000aca:	6822      	ldr	r2, [r4, #0]
 8000acc:	4629      	mov	r1, r5
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <LL_TIM_OC_DisableFast+0x80>)
 8000ad0:	5c5b      	ldrb	r3, [r3, r1]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	408b      	lsls	r3, r1
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4013      	ands	r3, r2
 8000adc:	6023      	str	r3, [r4, #0]

}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bcb0      	pop	{r4, r5, r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	08004134 	.word	0x08004134
 8000aec:	0800413c 	.word	0x0800413c

08000af0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000af0:	b4b0      	push	{r4, r5, r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d01c      	beq.n	8000b3a <LL_TIM_OC_EnablePreload+0x4a>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	d017      	beq.n	8000b36 <LL_TIM_OC_EnablePreload+0x46>
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	d012      	beq.n	8000b32 <LL_TIM_OC_EnablePreload+0x42>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2b40      	cmp	r3, #64	; 0x40
 8000b10:	d00d      	beq.n	8000b2e <LL_TIM_OC_EnablePreload+0x3e>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b18:	d007      	beq.n	8000b2a <LL_TIM_OC_EnablePreload+0x3a>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b20:	d101      	bne.n	8000b26 <LL_TIM_OC_EnablePreload+0x36>
 8000b22:	2305      	movs	r3, #5
 8000b24:	e00a      	b.n	8000b3c <LL_TIM_OC_EnablePreload+0x4c>
 8000b26:	2306      	movs	r3, #6
 8000b28:	e008      	b.n	8000b3c <LL_TIM_OC_EnablePreload+0x4c>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e006      	b.n	8000b3c <LL_TIM_OC_EnablePreload+0x4c>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e004      	b.n	8000b3c <LL_TIM_OC_EnablePreload+0x4c>
 8000b32:	2302      	movs	r3, #2
 8000b34:	e002      	b.n	8000b3c <LL_TIM_OC_EnablePreload+0x4c>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <LL_TIM_OC_EnablePreload+0x4c>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3318      	adds	r3, #24
 8000b42:	461a      	mov	r2, r3
 8000b44:	4629      	mov	r1, r5
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <LL_TIM_OC_EnablePreload+0x7c>)
 8000b48:	5c5b      	ldrb	r3, [r3, r1]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000b4e:	6822      	ldr	r2, [r4, #0]
 8000b50:	4629      	mov	r1, r5
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <LL_TIM_OC_EnablePreload+0x80>)
 8000b54:	5c5b      	ldrb	r3, [r3, r1]
 8000b56:	4619      	mov	r1, r3
 8000b58:	2308      	movs	r3, #8
 8000b5a:	408b      	lsls	r3, r1
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	6023      	str	r3, [r4, #0]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bcb0      	pop	{r4, r5, r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	08004134 	.word	0x08004134
 8000b70:	0800413c 	.word	0x0800413c

08000b74 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8000ba8:	b4b0      	push	{r4, r5, r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d01c      	beq.n	8000bf4 <LL_TIM_IC_SetActiveInput+0x4c>
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d017      	beq.n	8000bf0 <LL_TIM_IC_SetActiveInput+0x48>
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b10      	cmp	r3, #16
 8000bc4:	d012      	beq.n	8000bec <LL_TIM_IC_SetActiveInput+0x44>
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	2b40      	cmp	r3, #64	; 0x40
 8000bca:	d00d      	beq.n	8000be8 <LL_TIM_IC_SetActiveInput+0x40>
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd2:	d007      	beq.n	8000be4 <LL_TIM_IC_SetActiveInput+0x3c>
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bda:	d101      	bne.n	8000be0 <LL_TIM_IC_SetActiveInput+0x38>
 8000bdc:	2305      	movs	r3, #5
 8000bde:	e00a      	b.n	8000bf6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000be0:	2306      	movs	r3, #6
 8000be2:	e008      	b.n	8000bf6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000be4:	2304      	movs	r3, #4
 8000be6:	e006      	b.n	8000bf6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e004      	b.n	8000bf6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <LL_TIM_IC_SetActiveInput+0x4e>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4629      	mov	r1, r5
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <LL_TIM_IC_SetActiveInput+0x8c>)
 8000c02:	5c5b      	ldrb	r3, [r3, r1]
 8000c04:	4413      	add	r3, r2
 8000c06:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	4629      	mov	r1, r5
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <LL_TIM_IC_SetActiveInput+0x90>)
 8000c0e:	5c5b      	ldrb	r3, [r3, r1]
 8000c10:	4619      	mov	r1, r3
 8000c12:	2303      	movs	r3, #3
 8000c14:	408b      	lsls	r3, r1
 8000c16:	43db      	mvns	r3, r3
 8000c18:	401a      	ands	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	0c1b      	lsrs	r3, r3, #16
 8000c1e:	4628      	mov	r0, r5
 8000c20:	4905      	ldr	r1, [pc, #20]	; (8000c38 <LL_TIM_IC_SetActiveInput+0x90>)
 8000c22:	5c09      	ldrb	r1, [r1, r0]
 8000c24:	408b      	lsls	r3, r1
 8000c26:	4313      	orrs	r3, r2
 8000c28:	6023      	str	r3, [r4, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bcb0      	pop	{r4, r5, r7}
 8000c32:	4770      	bx	lr
 8000c34:	08004134 	.word	0x08004134
 8000c38:	08004144 	.word	0x08004144

08000c3c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8000c3c:	b4b0      	push	{r4, r5, r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d01c      	beq.n	8000c88 <LL_TIM_IC_SetPrescaler+0x4c>
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d017      	beq.n	8000c84 <LL_TIM_IC_SetPrescaler+0x48>
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	2b10      	cmp	r3, #16
 8000c58:	d012      	beq.n	8000c80 <LL_TIM_IC_SetPrescaler+0x44>
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b40      	cmp	r3, #64	; 0x40
 8000c5e:	d00d      	beq.n	8000c7c <LL_TIM_IC_SetPrescaler+0x40>
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c66:	d007      	beq.n	8000c78 <LL_TIM_IC_SetPrescaler+0x3c>
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6e:	d101      	bne.n	8000c74 <LL_TIM_IC_SetPrescaler+0x38>
 8000c70:	2305      	movs	r3, #5
 8000c72:	e00a      	b.n	8000c8a <LL_TIM_IC_SetPrescaler+0x4e>
 8000c74:	2306      	movs	r3, #6
 8000c76:	e008      	b.n	8000c8a <LL_TIM_IC_SetPrescaler+0x4e>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e006      	b.n	8000c8a <LL_TIM_IC_SetPrescaler+0x4e>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e004      	b.n	8000c8a <LL_TIM_IC_SetPrescaler+0x4e>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <LL_TIM_IC_SetPrescaler+0x4e>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <LL_TIM_IC_SetPrescaler+0x4e>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3318      	adds	r3, #24
 8000c90:	461a      	mov	r2, r3
 8000c92:	4629      	mov	r1, r5
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <LL_TIM_IC_SetPrescaler+0x8c>)
 8000c96:	5c5b      	ldrb	r3, [r3, r1]
 8000c98:	4413      	add	r3, r2
 8000c9a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000c9c:	6822      	ldr	r2, [r4, #0]
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <LL_TIM_IC_SetPrescaler+0x90>)
 8000ca2:	5c5b      	ldrb	r3, [r3, r1]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	43db      	mvns	r3, r3
 8000cac:	401a      	ands	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	0c1b      	lsrs	r3, r3, #16
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	4905      	ldr	r1, [pc, #20]	; (8000ccc <LL_TIM_IC_SetPrescaler+0x90>)
 8000cb6:	5c09      	ldrb	r1, [r1, r0]
 8000cb8:	408b      	lsls	r3, r1
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	6023      	str	r3, [r4, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bcb0      	pop	{r4, r5, r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	08004134 	.word	0x08004134
 8000ccc:	08004144 	.word	0x08004144

08000cd0 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8000cd0:	b4b0      	push	{r4, r5, r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d01c      	beq.n	8000d1c <LL_TIM_IC_SetFilter+0x4c>
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d017      	beq.n	8000d18 <LL_TIM_IC_SetFilter+0x48>
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b10      	cmp	r3, #16
 8000cec:	d012      	beq.n	8000d14 <LL_TIM_IC_SetFilter+0x44>
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b40      	cmp	r3, #64	; 0x40
 8000cf2:	d00d      	beq.n	8000d10 <LL_TIM_IC_SetFilter+0x40>
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cfa:	d007      	beq.n	8000d0c <LL_TIM_IC_SetFilter+0x3c>
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d02:	d101      	bne.n	8000d08 <LL_TIM_IC_SetFilter+0x38>
 8000d04:	2305      	movs	r3, #5
 8000d06:	e00a      	b.n	8000d1e <LL_TIM_IC_SetFilter+0x4e>
 8000d08:	2306      	movs	r3, #6
 8000d0a:	e008      	b.n	8000d1e <LL_TIM_IC_SetFilter+0x4e>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e006      	b.n	8000d1e <LL_TIM_IC_SetFilter+0x4e>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e004      	b.n	8000d1e <LL_TIM_IC_SetFilter+0x4e>
 8000d14:	2302      	movs	r3, #2
 8000d16:	e002      	b.n	8000d1e <LL_TIM_IC_SetFilter+0x4e>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <LL_TIM_IC_SetFilter+0x4e>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3318      	adds	r3, #24
 8000d24:	461a      	mov	r2, r3
 8000d26:	4629      	mov	r1, r5
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <LL_TIM_IC_SetFilter+0x8c>)
 8000d2a:	5c5b      	ldrb	r3, [r3, r1]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	4629      	mov	r1, r5
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <LL_TIM_IC_SetFilter+0x90>)
 8000d36:	5c5b      	ldrb	r3, [r3, r1]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	23f0      	movs	r3, #240	; 0xf0
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	401a      	ands	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	0c1b      	lsrs	r3, r3, #16
 8000d46:	4628      	mov	r0, r5
 8000d48:	4905      	ldr	r1, [pc, #20]	; (8000d60 <LL_TIM_IC_SetFilter+0x90>)
 8000d4a:	5c09      	ldrb	r1, [r1, r0]
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	6023      	str	r3, [r4, #0]
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bcb0      	pop	{r4, r5, r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	08004134 	.word	0x08004134
 8000d60:	08004144 	.word	0x08004144

08000d64 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000d64:	b490      	push	{r4, r7}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d01c      	beq.n	8000db0 <LL_TIM_IC_SetPolarity+0x4c>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d017      	beq.n	8000dac <LL_TIM_IC_SetPolarity+0x48>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b10      	cmp	r3, #16
 8000d80:	d012      	beq.n	8000da8 <LL_TIM_IC_SetPolarity+0x44>
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b40      	cmp	r3, #64	; 0x40
 8000d86:	d00d      	beq.n	8000da4 <LL_TIM_IC_SetPolarity+0x40>
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d8e:	d007      	beq.n	8000da0 <LL_TIM_IC_SetPolarity+0x3c>
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d96:	d101      	bne.n	8000d9c <LL_TIM_IC_SetPolarity+0x38>
 8000d98:	2305      	movs	r3, #5
 8000d9a:	e00a      	b.n	8000db2 <LL_TIM_IC_SetPolarity+0x4e>
 8000d9c:	2306      	movs	r3, #6
 8000d9e:	e008      	b.n	8000db2 <LL_TIM_IC_SetPolarity+0x4e>
 8000da0:	2304      	movs	r3, #4
 8000da2:	e006      	b.n	8000db2 <LL_TIM_IC_SetPolarity+0x4e>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e004      	b.n	8000db2 <LL_TIM_IC_SetPolarity+0x4e>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e002      	b.n	8000db2 <LL_TIM_IC_SetPolarity+0x4e>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <LL_TIM_IC_SetPolarity+0x4e>
 8000db0:	2300      	movs	r3, #0
 8000db2:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6a1a      	ldr	r2, [r3, #32]
 8000db8:	4621      	mov	r1, r4
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <LL_TIM_IC_SetPolarity+0x80>)
 8000dbc:	5c5b      	ldrb	r3, [r3, r1]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	408b      	lsls	r3, r1
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	4621      	mov	r1, r4
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <LL_TIM_IC_SetPolarity+0x80>)
 8000dcc:	5c5b      	ldrb	r3, [r3, r1]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	408b      	lsls	r3, r1
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc90      	pop	{r4, r7}
 8000de2:	4770      	bx	lr
 8000de4:	0800414c 	.word	0x0800414c

08000de8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dfa:	f023 0307 	bic.w	r3, r3, #7
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	609a      	str	r2, [r3, #8]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f023 0207 	bic.w	r2, r3, #7
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	609a      	str	r2, [r3, #8]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	605a      	str	r2, [r3, #4]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	60da      	str	r2, [r3, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr

08000eb2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	615a      	str	r2, [r3, #20]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eec:	2b40      	cmp	r3, #64	; 0x40
 8000eee:	bf0c      	ite	eq
 8000ef0:	2301      	moveq	r3, #1
 8000ef2:	2300      	movne	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000f0c:	78fa      	ldrb	r2, [r7, #3]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	605a      	str	r2, [r3, #4]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000f1c:	b490      	push	{r4, r7}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	0e1b      	lsrs	r3, r3, #24
 8000f30:	4413      	add	r3, r2
 8000f32:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000f34:	6822      	ldr	r2, [r4, #0]
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	613b      	str	r3, [r7, #16]
  return result;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	401a      	ands	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	61bb      	str	r3, [r7, #24]
  return result;
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	fab3 f383 	clz	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	6023      	str	r3, [r4, #0]
}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc90      	pop	{r4, r7}
 8000f7e:	4770      	bx	lr

08000f80 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	615a      	str	r2, [r3, #20]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8000faa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6053      	str	r3, [r2, #4]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8000fca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6053      	str	r3, [r2, #4]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fee:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a03      	ldr	r2, [pc, #12]	; (8001004 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffa:	6053      	str	r3, [r2, #4]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40010000 	.word	0x40010000

08001008 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3302      	adds	r3, #2
 800101a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	0c1b      	lsrs	r3, r3, #16
 8001022:	43db      	mvns	r3, r3
 8001024:	ea02 0103 	and.w	r1, r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	60bb      	str	r3, [r7, #8]
  return result;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	fa03 f202 	lsl.w	r2, r3, r2
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	430a      	orrs	r2, r1
 800104e:	3302      	adds	r3, #2
 8001050:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40010000 	.word	0x40010000

08001064 <__io_putchar>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

PUTCHAR_PROTOTYPE
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <__io_putchar+0x2c>)
 8001074:	f7ff ff44 	bl	8000f00 <LL_USART_TransmitData8>
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 8001078:	bf00      	nop
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <__io_putchar+0x2c>)
 800107c:	f7ff ff2e 	bl	8000edc <LL_USART_IsActiveFlag_TC>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f9      	beq.n	800107a <__io_putchar+0x16>
	{}

  	return ch;
 8001086:	687b      	ldr	r3, [r7, #4]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40013800 	.word	0x40013800

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff fc66 	bl	800096c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80010a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80010a4:	f7ff fc4a 	bl	800093c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f7ff f84f 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80010ae:	f7ff ff97 	bl	8000fe0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <main+0xdc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6858      	ldr	r0, [r3, #4]
 80010b8:	2300      	movs	r3, #0
 80010ba:	2202      	movs	r2, #2
 80010bc:	2100      	movs	r1, #0
 80010be:	f002 f899 	bl	80031f4 <setvbuf>
    setvbuf(stdout, NULL, _IONBF, 0);
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <main+0xdc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6898      	ldr	r0, [r3, #8]
 80010c8:	2300      	movs	r3, #0
 80010ca:	2202      	movs	r2, #2
 80010cc:	2100      	movs	r1, #0
 80010ce:	f002 f891 	bl	80031f4 <setvbuf>
    setvbuf(stderr, NULL, _IONBF, 0);
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <main+0xdc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68d8      	ldr	r0, [r3, #12]
 80010d8:	2300      	movs	r3, #0
 80010da:	2202      	movs	r2, #2
 80010dc:	2100      	movs	r1, #0
 80010de:	f002 f889 	bl	80031f4 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f84b 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f000 fc93 	bl	8001a10 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ea:	f000 fc79 	bl	80019e0 <MX_DMA_Init>
  MX_TIM1_Init();
 80010ee:	f000 f9f3 	bl	80014d8 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010f2:	f000 f885 	bl	8001200 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010f6:	f000 f999 	bl	800142c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010fa:	f000 fc07 	bl	800190c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010fe:	f000 fab7 	bl	8001670 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001102:	f000 fb4f 	bl	80017a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001106:	f000 fbbf 	bl	8001888 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  USR1_Motor1_EnablePWM();
 800110a:	f000 fd3f 	bl	8001b8c <USR1_Motor1_EnablePWM>
  USR1_Motor2_EnablePWM();
 800110e:	f000 fd47 	bl	8001ba0 <USR1_Motor2_EnablePWM>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t Count = LL_TIM_GetCounter(TIM2);
 8001112:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001116:	f7ff fc8e 	bl	8000a36 <LL_TIM_GetCounter>
 800111a:	6078      	str	r0, [r7, #4]
  while (1)
  {
	  LL_mDelay(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	f001 ffec 	bl	80030fc <LL_mDelay>
	  Count = LL_TIM_GetCounter(TIM2);
 8001124:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001128:	f7ff fc85 	bl	8000a36 <LL_TIM_GetCounter>
 800112c:	6078      	str	r0, [r7, #4]
	  USR1_Motor1_SetPWM(3200-1);
 800112e:	f640 407f 	movw	r0, #3199	; 0xc7f
 8001132:	f000 fd41 	bl	8001bb8 <USR1_Motor1_SetPWM>
	  USR1_Motor2_SetPWM(3600-1);
 8001136:	f640 600f 	movw	r0, #3599	; 0xe0f
 800113a:	f000 fd4d 	bl	8001bd8 <USR1_Motor2_SetPWM>
	  printf("abc");
 800113e:	480d      	ldr	r0, [pc, #52]	; (8001174 <main+0xe0>)
 8001140:	f002 f840 	bl	80031c4 <iprintf>
//	  LL_USART_TransmitData8(USART1,'a');
//	  	while (LL_USART_IsActiveFlag_TC(USART1)==0)
//	  	{}
	  LL_mDelay(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f001 ffd8 	bl	80030fc <LL_mDelay>
	  Count = LL_TIM_GetCounter(TIM2);
 800114c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001150:	f7ff fc71 	bl	8000a36 <LL_TIM_GetCounter>
 8001154:	6078      	str	r0, [r7, #4]
	  USR1_Motor1_SetPWM(4800-1);
 8001156:	f241 20bf 	movw	r0, #4799	; 0x12bf
 800115a:	f000 fd2d 	bl	8001bb8 <USR1_Motor1_SetPWM>
	  USR1_Motor2_SetPWM(1800-1);
 800115e:	f240 7007 	movw	r0, #1799	; 0x707
 8001162:	f000 fd39 	bl	8001bd8 <USR1_Motor2_SetPWM>
//	  LL_USART_TransmitData8(USART1,'b');
//	  	while (LL_USART_IsActiveFlag_TC(USART1)==0)
//	  	{}
	  printf("cde");
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <main+0xe4>)
 8001168:	f002 f82c 	bl	80031c4 <iprintf>
	  LL_mDelay(1000);
 800116c:	e7d6      	b.n	800111c <main+0x88>
 800116e:	bf00      	nop
 8001170:	20000004 	.word	0x20000004
 8001174:	08004124 	.word	0x08004124
 8001178:	08004128 	.word	0x08004128

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff fc0b 	bl	800099c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001186:	bf00      	nop
 8001188:	f7ff fc1c 	bl	80009c4 <LL_FLASH_GetLatency>
 800118c:	4603      	mov	r3, r0
 800118e:	2b02      	cmp	r3, #2
 8001190:	d1fa      	bne.n	8001188 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8001192:	f7ff faf3 	bl	800077c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001196:	bf00      	nop
 8001198:	f7ff fafe 	bl	8000798 <LL_RCC_HSE_IsReady>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d1fa      	bne.n	8001198 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80011a2:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80011a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80011aa:	f7ff fb97 	bl	80008dc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80011ae:	f7ff fb75 	bl	800089c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80011b2:	bf00      	nop
 80011b4:	f7ff fb80 	bl	80008b8 <LL_RCC_PLL_IsReady>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d1fa      	bne.n	80011b4 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fb1c 	bl	80007fc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80011c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011c8:	f7ff fb2c 	bl	8000824 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fb3d 	bl	800084c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff faf2 	bl	80007bc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80011d8:	bf00      	nop
 80011da:	f7ff fb03 	bl	80007e4 <LL_RCC_GetSysClkSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d1fa      	bne.n	80011da <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <SystemClock_Config+0x80>)
 80011e6:	f001 ff7b 	bl	80030e0 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <SystemClock_Config+0x80>)
 80011ec:	f001 ffaa 	bl	8003144 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 80011f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011f4:	f7ff fb3e 	bl	8000874 <LL_RCC_SetADCClockSource>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	044aa200 	.word	0x044aa200

08001200 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001236:	f7ff fb99 	bl	800096c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800123a:	2004      	movs	r0, #4
 800123c:	f7ff fb96 	bl	800096c <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001244:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	486b      	ldr	r0, [pc, #428]	; (80013fc <MX_ADC1_Init+0x1fc>)
 8001250:	f001 f8d8 	bl	8002404 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4869      	ldr	r0, [pc, #420]	; (8001400 <MX_ADC1_Init+0x200>)
 800125a:	f7ff f90d 	bl	8000478 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 800125e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001262:	2101      	movs	r1, #1
 8001264:	4866      	ldr	r0, [pc, #408]	; (8001400 <MX_ADC1_Init+0x200>)
 8001266:	f7ff f9d5 	bl	8000614 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 800126a:	2220      	movs	r2, #32
 800126c:	2101      	movs	r1, #1
 800126e:	4864      	ldr	r0, [pc, #400]	; (8001400 <MX_ADC1_Init+0x200>)
 8001270:	f7ff f926 	bl	80004c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001274:	2200      	movs	r2, #0
 8001276:	2101      	movs	r1, #1
 8001278:	4861      	ldr	r0, [pc, #388]	; (8001400 <MX_ADC1_Init+0x200>)
 800127a:	f7ff f943 	bl	8000504 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	2101      	movs	r1, #1
 8001282:	485f      	ldr	r0, [pc, #380]	; (8001400 <MX_ADC1_Init+0x200>)
 8001284:	f7ff f960 	bl	8000548 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128c:	2101      	movs	r1, #1
 800128e:	485c      	ldr	r0, [pc, #368]	; (8001400 <MX_ADC1_Init+0x200>)
 8001290:	f7ff f97c 	bl	800058c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001298:	2101      	movs	r1, #1
 800129a:	4859      	ldr	r0, [pc, #356]	; (8001400 <MX_ADC1_Init+0x200>)
 800129c:	f7ff f998 	bl	80005d0 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 80012a0:	2208      	movs	r2, #8
 80012a2:	2101      	movs	r1, #1
 80012a4:	4856      	ldr	r0, [pc, #344]	; (8001400 <MX_ADC1_Init+0x200>)
 80012a6:	f7ff f9d7 	bl	8000658 <LL_DMA_SetDataLength>

    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &ADC_Value);
 80012aa:	4b56      	ldr	r3, [pc, #344]	; (8001404 <MX_ADC1_Init+0x204>)
 80012ac:	461a      	mov	r2, r3
 80012ae:	2101      	movs	r1, #1
 80012b0:	4853      	ldr	r0, [pc, #332]	; (8001400 <MX_ADC1_Init+0x200>)
 80012b2:	f7ff f9f3 	bl	800069c <LL_DMA_SetMemoryAddress>
    LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 80012b6:	4a54      	ldr	r2, [pc, #336]	; (8001408 <MX_ADC1_Init+0x208>)
 80012b8:	2101      	movs	r1, #1
 80012ba:	4851      	ldr	r0, [pc, #324]	; (8001400 <MX_ADC1_Init+0x200>)
 80012bc:	f7ff fa06 	bl	80006cc <LL_DMA_SetPeriphAddress>

    LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 80012c0:	2101      	movs	r1, #1
 80012c2:	484f      	ldr	r0, [pc, #316]	; (8001400 <MX_ADC1_Init+0x200>)
 80012c4:	f7ff f8ba 	bl	800043c <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80012cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80012d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d6:	4619      	mov	r1, r3
 80012d8:	484c      	ldr	r0, [pc, #304]	; (800140c <MX_ADC1_Init+0x20c>)
 80012da:	f000 fe61 	bl	8001fa0 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80012e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e6:	4619      	mov	r1, r3
 80012e8:	4848      	ldr	r0, [pc, #288]	; (800140c <MX_ADC1_Init+0x20c>)
 80012ea:	f000 fe27 	bl	8001f3c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80012ee:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80012f2:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 80012f4:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 80012f8:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80012fe:	2302      	movs	r3, #2
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	4619      	mov	r1, r3
 800130e:	483f      	ldr	r0, [pc, #252]	; (800140c <MX_ADC1_Init+0x20c>)
 8001310:	f000 fe6d 	bl	8001fee <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131c:	483b      	ldr	r0, [pc, #236]	; (800140c <MX_ADC1_Init+0x20c>)
 800131e:	f7fe ffbf 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001322:	2200      	movs	r2, #0
 8001324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001328:	4838      	ldr	r0, [pc, #224]	; (800140c <MX_ADC1_Init+0x20c>)
 800132a:	f7fe fffe 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 800132e:	4a38      	ldr	r2, [pc, #224]	; (8001410 <MX_ADC1_Init+0x210>)
 8001330:	f240 2105 	movw	r1, #517	; 0x205
 8001334:	4835      	ldr	r0, [pc, #212]	; (800140c <MX_ADC1_Init+0x20c>)
 8001336:	f7fe ffb3 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800133a:	2200      	movs	r2, #0
 800133c:	4934      	ldr	r1, [pc, #208]	; (8001410 <MX_ADC1_Init+0x210>)
 800133e:	4833      	ldr	r0, [pc, #204]	; (800140c <MX_ADC1_Init+0x20c>)
 8001340:	f7fe fff3 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8001344:	4a33      	ldr	r2, [pc, #204]	; (8001414 <MX_ADC1_Init+0x214>)
 8001346:	f240 210a 	movw	r1, #522	; 0x20a
 800134a:	4830      	ldr	r0, [pc, #192]	; (800140c <MX_ADC1_Init+0x20c>)
 800134c:	f7fe ffa8 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001350:	2200      	movs	r2, #0
 8001352:	4930      	ldr	r1, [pc, #192]	; (8001414 <MX_ADC1_Init+0x214>)
 8001354:	482d      	ldr	r0, [pc, #180]	; (800140c <MX_ADC1_Init+0x20c>)
 8001356:	f7fe ffe8 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <MX_ADC1_Init+0x218>)
 800135c:	f240 210f 	movw	r1, #527	; 0x20f
 8001360:	482a      	ldr	r0, [pc, #168]	; (800140c <MX_ADC1_Init+0x20c>)
 8001362:	f7fe ff9d 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001366:	2200      	movs	r2, #0
 8001368:	492b      	ldr	r1, [pc, #172]	; (8001418 <MX_ADC1_Init+0x218>)
 800136a:	4828      	ldr	r0, [pc, #160]	; (800140c <MX_ADC1_Init+0x20c>)
 800136c:	f7fe ffdd 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8001370:	4a2a      	ldr	r2, [pc, #168]	; (800141c <MX_ADC1_Init+0x21c>)
 8001372:	f44f 7105 	mov.w	r1, #532	; 0x214
 8001376:	4825      	ldr	r0, [pc, #148]	; (800140c <MX_ADC1_Init+0x20c>)
 8001378:	f7fe ff92 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800137c:	2200      	movs	r2, #0
 800137e:	4927      	ldr	r1, [pc, #156]	; (800141c <MX_ADC1_Init+0x21c>)
 8001380:	4822      	ldr	r0, [pc, #136]	; (800140c <MX_ADC1_Init+0x20c>)
 8001382:	f7fe ffd2 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8001386:	4a26      	ldr	r2, [pc, #152]	; (8001420 <MX_ADC1_Init+0x220>)
 8001388:	f240 2119 	movw	r1, #537	; 0x219
 800138c:	481f      	ldr	r0, [pc, #124]	; (800140c <MX_ADC1_Init+0x20c>)
 800138e:	f7fe ff87 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001392:	2200      	movs	r2, #0
 8001394:	4922      	ldr	r1, [pc, #136]	; (8001420 <MX_ADC1_Init+0x220>)
 8001396:	481d      	ldr	r0, [pc, #116]	; (800140c <MX_ADC1_Init+0x20c>)
 8001398:	f7fe ffc7 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <MX_ADC1_Init+0x224>)
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <MX_ADC1_Init+0x20c>)
 80013a4:	f7fe ff7c 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80013a8:	2200      	movs	r2, #0
 80013aa:	491e      	ldr	r1, [pc, #120]	; (8001424 <MX_ADC1_Init+0x224>)
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <MX_ADC1_Init+0x20c>)
 80013ae:	f7fe ffbc 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <MX_ADC1_Init+0x228>)
 80013b4:	f240 1105 	movw	r1, #261	; 0x105
 80013b8:	4814      	ldr	r0, [pc, #80]	; (800140c <MX_ADC1_Init+0x20c>)
 80013ba:	f7fe ff71 	bl	80002a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80013be:	2200      	movs	r2, #0
 80013c0:	4919      	ldr	r1, [pc, #100]	; (8001428 <MX_ADC1_Init+0x228>)
 80013c2:	4812      	ldr	r0, [pc, #72]	; (800140c <MX_ADC1_Init+0x20c>)
 80013c4:	f7fe ffb1 	bl	800032a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 80013c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013cc:	480f      	ldr	r0, [pc, #60]	; (800140c <MX_ADC1_Init+0x20c>)
 80013ce:	f7fe ff9a 	bl	8000306 <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <MX_ADC1_Init+0x20c>)
 80013d4:	f7fe fff2 	bl	80003bc <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_ADC1_Init+0x20c>)
 80013da:	f7fe fffe 	bl	80003da <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 80013de:	bf00      	nop
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <MX_ADC1_Init+0x20c>)
 80013e2:	f7ff f809 	bl	80003f8 <LL_ADC_IsCalibrationOnGoing>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f9      	bne.n	80013e0 <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_ADC1_Init+0x20c>)
 80013ee:	f7ff f815 	bl	800041c <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3738      	adds	r7, #56	; 0x38
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40010800 	.word	0x40010800
 8001400:	40020000 	.word	0x40020000
 8001404:	20000090 	.word	0x20000090
 8001408:	4001244c 	.word	0x4001244c
 800140c:	40012400 	.word	0x40012400
 8001410:	02300001 	.word	0x02300001
 8001414:	02600002 	.word	0x02600002
 8001418:	02900003 	.word	0x02900003
 800141c:	02c00004 	.word	0x02c00004
 8001420:	02f00005 	.word	0x02f00005
 8001424:	03200006 	.word	0x03200006
 8001428:	03500007 	.word	0x03500007

0800142c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001432:	f107 0318 	add.w	r3, r7, #24
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001452:	2008      	movs	r0, #8
 8001454:	f7ff fa8a 	bl	800096c <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_I2C1_Init+0x9c>)
 800145a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800145c:	2309      	movs	r3, #9
 800145e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001464:	2304      	movs	r3, #4
 8001466:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4817      	ldr	r0, [pc, #92]	; (80014cc <MX_I2C1_Init+0xa0>)
 800146e:	f000 ffc9 	bl	8002404 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 8001472:	f7ff fd95 	bl	8000fa0 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001476:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800147a:	f7ff fa5f 	bl	800093c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_I2C1_Init+0xa4>)
 8001480:	f7ff f96c 	bl	800075c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001484:	4812      	ldr	r0, [pc, #72]	; (80014d0 <MX_I2C1_Init+0xa4>)
 8001486:	f7ff f948 	bl	800071a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800148a:	4811      	ldr	r0, [pc, #68]	; (80014d0 <MX_I2C1_Init+0xa4>)
 800148c:	f7ff f936 	bl	80006fc <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_I2C1_Init+0xa8>)
 8001496:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80014a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80014a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_I2C1_Init+0xa4>)
 80014b4:	f001 f8f2 	bl	800269c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80014b8:	2100      	movs	r1, #0
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_I2C1_Init+0xa4>)
 80014bc:	f7ff f93c 	bl	8000738 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	04030003 	.word	0x04030003
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	40005400 	.word	0x40005400
 80014d4:	000186a0 	.word	0x000186a0

080014d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b098      	sub	sp, #96	; 0x60
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80014de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80014ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f2:	2220      	movs	r2, #32
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 fe5c 	bl	80031b4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800151c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001520:	f7ff fa24 	bl	800096c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800152a:	2300      	movs	r3, #0
 800152c:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 800152e:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001532:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800153e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001542:	4619      	mov	r1, r3
 8001544:	4847      	ldr	r0, [pc, #284]	; (8001664 <MX_TIM1_Init+0x18c>)
 8001546:	f001 fa51 	bl	80029ec <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 800154a:	4846      	ldr	r0, [pc, #280]	; (8001664 <MX_TIM1_Init+0x18c>)
 800154c:	f7ff fa55 	bl	80009fa <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001550:	2101      	movs	r1, #1
 8001552:	4844      	ldr	r0, [pc, #272]	; (8001664 <MX_TIM1_Init+0x18c>)
 8001554:	f7ff facc 	bl	8000af0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001568:	2300      	movs	r3, #0
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800156c:	2300      	movs	r3, #0
 800156e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_HIGH;
 8001570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800157a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157e:	461a      	mov	r2, r3
 8001580:	2101      	movs	r1, #1
 8001582:	4838      	ldr	r0, [pc, #224]	; (8001664 <MX_TIM1_Init+0x18c>)
 8001584:	f001 fa90 	bl	8002aa8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001588:	2101      	movs	r1, #1
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <MX_TIM1_Init+0x18c>)
 800158c:	f7ff fa6e 	bl	8000a6c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4833      	ldr	r0, [pc, #204]	; (8001664 <MX_TIM1_Init+0x18c>)
 8001596:	f7ff faab 	bl	8000af0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 3199;
 80015a2:	f640 437f 	movw	r3, #3199	; 0xc7f
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	647b      	str	r3, [r7, #68]	; 0x44
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80015ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b0:	461a      	mov	r2, r3
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	482b      	ldr	r0, [pc, #172]	; (8001664 <MX_TIM1_Init+0x18c>)
 80015b8:	f001 fa76 	bl	8002aa8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80015bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c0:	4828      	ldr	r0, [pc, #160]	; (8001664 <MX_TIM1_Init+0x18c>)
 80015c2:	f7ff fa53 	bl	8000a6c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH4);
 80015c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ca:	4826      	ldr	r0, [pc, #152]	; (8001664 <MX_TIM1_Init+0x18c>)
 80015cc:	f7ff fa90 	bl	8000af0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80015dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e0:	461a      	mov	r2, r3
 80015e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e6:	481f      	ldr	r0, [pc, #124]	; (8001664 <MX_TIM1_Init+0x18c>)
 80015e8:	f001 fa5e 	bl	8002aa8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH4);
 80015ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f0:	481c      	ldr	r0, [pc, #112]	; (8001664 <MX_TIM1_Init+0x18c>)
 80015f2:	f7ff fa3b 	bl	8000a6c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80015f6:	2100      	movs	r1, #0
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_TIM1_Init+0x18c>)
 80015fa:	f7ff fc1b 	bl	8000e34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80015fe:	4819      	ldr	r0, [pc, #100]	; (8001664 <MX_TIM1_Init+0x18c>)
 8001600:	f7ff fc2a 	bl	8000e58 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <MX_TIM1_Init+0x18c>)
 800162c:	f001 fa74 	bl	8002b18 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  LL_TIM_EnableAllOutputs(TIM1);
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <MX_TIM1_Init+0x18c>)
 8001632:	f7ff fc20 	bl	8000e76 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <MX_TIM1_Init+0x18c>)
 8001638:	f7ff f9d0 	bl	80009dc <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800163c:	2004      	movs	r0, #4
 800163e:	f7ff f995 	bl	800096c <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  PA11   ------> TIM1_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_TIM1_Init+0x190>)
 8001644:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001646:	2309      	movs	r3, #9
 8001648:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	463b      	mov	r3, r7
 8001654:	4619      	mov	r1, r3
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_TIM1_Init+0x194>)
 8001658:	f000 fed4 	bl	8002404 <LL_GPIO_Init>

}
 800165c:	bf00      	nop
 800165e:	3760      	adds	r7, #96	; 0x60
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40012c00 	.word	0x40012c00
 8001668:	040d000d 	.word	0x040d000d
 800166c:	40010800 	.word	0x40010800

08001670 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	463b      	mov	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff f951 	bl	800093c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800169a:	2004      	movs	r0, #4
 800169c:	f7ff f966 	bl	800096c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80016a0:	2008      	movs	r0, #8
 80016a2:	f7ff f963 	bl	800096c <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80016a6:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <MX_TIM2_Init+0x128>)
 80016a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80016aa:	2304      	movs	r3, #4
 80016ac:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	463b      	mov	r3, r7
 80016b0:	4619      	mov	r1, r3
 80016b2:	483a      	ldr	r0, [pc, #232]	; (800179c <MX_TIM2_Init+0x12c>)
 80016b4:	f000 fea6 	bl	8002404 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80016b8:	f640 0308 	movw	r3, #2056	; 0x808
 80016bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80016be:	2304      	movs	r3, #4
 80016c0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	463b      	mov	r3, r7
 80016c4:	4619      	mov	r1, r3
 80016c6:	4836      	ldr	r0, [pc, #216]	; (80017a0 <MX_TIM2_Init+0x130>)
 80016c8:	f000 fe9c 	bl	8002404 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 80016cc:	2103      	movs	r1, #3
 80016ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016d2:	f7ff fb9d 	bl	8000e10 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80016d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016da:	2101      	movs	r1, #1
 80016dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016e0:	f7ff fa62 	bl	8000ba8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2101      	movs	r1, #1
 80016e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016ec:	f7ff faa6 	bl	8000c3c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2101      	movs	r1, #1
 80016f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016f8:	f7ff faea 	bl	8000cd0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2101      	movs	r1, #1
 8001700:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001704:	f7ff fb2e 	bl	8000d64 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800170c:	2110      	movs	r1, #16
 800170e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001712:	f7ff fa49 	bl	8000ba8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001716:	2200      	movs	r2, #0
 8001718:	2110      	movs	r1, #16
 800171a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800171e:	f7ff fa8d 	bl	8000c3c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001722:	2200      	movs	r2, #0
 8001724:	2110      	movs	r1, #16
 8001726:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800172a:	f7ff fad1 	bl	8000cd0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800172e:	2200      	movs	r2, #0
 8001730:	2110      	movs	r1, #16
 8001732:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001736:	f7ff fb15 	bl	8000d64 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8001742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001746:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001756:	f001 f949 	bl	80029ec <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 800175a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800175e:	f7ff f94c 	bl	80009fa <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001762:	2100      	movs	r1, #0
 8001764:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001768:	f7ff fb64 	bl	8000e34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800176c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001770:	f7ff fb72 	bl	8000e58 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
 8001774:	2101      	movs	r1, #1
 8001776:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800177a:	f7ff f967 	bl	8000a4c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
 800177e:	2110      	movs	r1, #16
 8001780:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001784:	f7ff f962 	bl	8000a4c <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8001788:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800178c:	f7ff f926 	bl	80009dc <LL_TIM_EnableCounter>

  /* USER CODE END TIM2_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	04800080 	.word	0x04800080
 800179c:	40010800 	.word	0x40010800
 80017a0:	40010c00 	.word	0x40010c00

080017a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80017c8:	2002      	movs	r0, #2
 80017ca:	f7ff f8b7 	bl	800093c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80017ce:	2008      	movs	r0, #8
 80017d0:	f7ff f8cc 	bl	800096c <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80017d4:	f243 0330 	movw	r3, #12336	; 0x3030
 80017d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80017da:	2304      	movs	r3, #4
 80017dc:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	463b      	mov	r3, r7
 80017e0:	4619      	mov	r1, r3
 80017e2:	4827      	ldr	r0, [pc, #156]	; (8001880 <MX_TIM3_Init+0xdc>)
 80017e4:	f000 fe0e 	bl	8002404 <LL_GPIO_Init>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X2_TI1);
 80017e8:	2101      	movs	r1, #1
 80017ea:	4826      	ldr	r0, [pc, #152]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017ec:	f7ff fb10 	bl	8000e10 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80017f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f4:	2101      	movs	r1, #1
 80017f6:	4823      	ldr	r0, [pc, #140]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017f8:	f7ff f9d6 	bl	8000ba8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2101      	movs	r1, #1
 8001800:	4820      	ldr	r0, [pc, #128]	; (8001884 <MX_TIM3_Init+0xe0>)
 8001802:	f7ff fa1b 	bl	8000c3c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001806:	2200      	movs	r2, #0
 8001808:	2101      	movs	r1, #1
 800180a:	481e      	ldr	r0, [pc, #120]	; (8001884 <MX_TIM3_Init+0xe0>)
 800180c:	f7ff fa60 	bl	8000cd0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001810:	2200      	movs	r2, #0
 8001812:	2101      	movs	r1, #1
 8001814:	481b      	ldr	r0, [pc, #108]	; (8001884 <MX_TIM3_Init+0xe0>)
 8001816:	f7ff faa5 	bl	8000d64 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800181a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800181e:	2110      	movs	r1, #16
 8001820:	4818      	ldr	r0, [pc, #96]	; (8001884 <MX_TIM3_Init+0xe0>)
 8001822:	f7ff f9c1 	bl	8000ba8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001826:	2200      	movs	r2, #0
 8001828:	2110      	movs	r1, #16
 800182a:	4816      	ldr	r0, [pc, #88]	; (8001884 <MX_TIM3_Init+0xe0>)
 800182c:	f7ff fa06 	bl	8000c3c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001830:	2200      	movs	r2, #0
 8001832:	2110      	movs	r1, #16
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <MX_TIM3_Init+0xe0>)
 8001836:	f7ff fa4b 	bl	8000cd0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800183a:	2200      	movs	r2, #0
 800183c:	2110      	movs	r1, #16
 800183e:	4811      	ldr	r0, [pc, #68]	; (8001884 <MX_TIM3_Init+0xe0>)
 8001840:	f7ff fa90 	bl	8000d64 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 800184c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001850:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <MX_TIM3_Init+0xe0>)
 800185e:	f001 f8c5 	bl	80029ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001862:	4808      	ldr	r0, [pc, #32]	; (8001884 <MX_TIM3_Init+0xe0>)
 8001864:	f7ff f8d8 	bl	8000a18 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001868:	2100      	movs	r1, #0
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_TIM3_Init+0xe0>)
 800186c:	f7ff fae2 	bl	8000e34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_TIM3_Init+0xe0>)
 8001872:	f7ff faf1 	bl	8000e58 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40010c00 	.word	0x40010c00
 8001884:	40000400 	.word	0x40000400

08001888 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800189c:	2004      	movs	r0, #4
 800189e:	f7ff f84d 	bl	800093c <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80018a2:	f7fe fc77 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fcc5 	bl	800023c <NVIC_EncodePriority>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4619      	mov	r1, r3
 80018b6:	201e      	movs	r0, #30
 80018b8:	f7fe fc96 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 80018bc:	201e      	movs	r0, #30
 80018be:	f7fe fc77 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 9999;
 80018c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80018c6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 19999;
 80018cc:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80018d0:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV4;
 80018d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	480a      	ldr	r0, [pc, #40]	; (8001908 <MX_TIM4_Init+0x80>)
 80018de:	f001 f885 	bl	80029ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80018e2:	4809      	ldr	r0, [pc, #36]	; (8001908 <MX_TIM4_Init+0x80>)
 80018e4:	f7ff f898 	bl	8000a18 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80018e8:	2100      	movs	r1, #0
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM4_Init+0x80>)
 80018ec:	f7ff fa7c 	bl	8000de8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80018f0:	2100      	movs	r1, #0
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_TIM4_Init+0x80>)
 80018f4:	f7ff fa9e 	bl	8000e34 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM4_Init+0x80>)
 80018fa:	f7ff faad 	bl	8000e58 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40000800 	.word	0x40000800

0800190c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	463b      	mov	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001934:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001938:	f7ff f818 	bl	800096c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800193c:	2008      	movs	r0, #8
 800193e:	f7ff f815 	bl	800096c <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001942:	f244 0340 	movw	r3, #16448	; 0x4040
 8001946:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001948:	2309      	movs	r3, #9
 800194a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	463b      	mov	r3, r7
 8001956:	4619      	mov	r1, r3
 8001958:	481f      	ldr	r0, [pc, #124]	; (80019d8 <MX_USART1_UART_Init+0xcc>)
 800195a:	f000 fd53 	bl	8002404 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800195e:	f248 0380 	movw	r3, #32896	; 0x8080
 8001962:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001964:	2304      	movs	r3, #4
 8001966:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	481a      	ldr	r0, [pc, #104]	; (80019d8 <MX_USART1_UART_Init+0xcc>)
 800196e:	f000 fd49 	bl	8002404 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8001972:	f7ff fb25 	bl	8000fc0 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001976:	f7fe fc0d 	bl	8000194 <__NVIC_GetPriorityGrouping>
 800197a:	4603      	mov	r3, r0
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fc5b 	bl	800023c <NVIC_EncodePriority>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	2025      	movs	r0, #37	; 0x25
 800198c:	f7fe fc2c 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001990:	2025      	movs	r0, #37	; 0x25
 8001992:	f7fe fc0d 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001996:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800199a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80019aa:	230c      	movs	r3, #12
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4807      	ldr	r0, [pc, #28]	; (80019dc <MX_USART1_UART_Init+0xd0>)
 80019be:	f001 fb15 	bl	8002fec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <MX_USART1_UART_Init+0xd0>)
 80019c4:	f7ff fa75 	bl	8000eb2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <MX_USART1_UART_Init+0xd0>)
 80019ca:	f7ff fa63 	bl	8000e94 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	3730      	adds	r7, #48	; 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40010c00 	.word	0x40010c00
 80019dc:	40013800 	.word	0x40013800

080019e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7fe ff91 	bl	800090c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019ea:	f7fe fbd3 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fc21 	bl	800023c <NVIC_EncodePriority>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4619      	mov	r1, r3
 80019fe:	200b      	movs	r0, #11
 8001a00:	f7fe fbf2 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a04:	200b      	movs	r0, #11
 8001a06:	f7fe fbd3 	bl	80001b0 <__NVIC_EnableIRQ>

}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001a16:	f107 0318 	add.w	r3, r7, #24
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8001a2e:	2010      	movs	r0, #16
 8001a30:	f7fe ff9c 	bl	800096c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8001a34:	2020      	movs	r0, #32
 8001a36:	f7fe ff99 	bl	800096c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001a3a:	2004      	movs	r0, #4
 8001a3c:	f7fe ff96 	bl	800096c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001a40:	2008      	movs	r0, #8
 8001a42:	f7fe ff93 	bl	800096c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15);
 8001a46:	4946      	ldr	r1, [pc, #280]	; (8001b60 <MX_GPIO_Init+0x150>)
 8001a48:	4846      	ldr	r0, [pc, #280]	; (8001b64 <MX_GPIO_Init+0x154>)
 8001a4a:	f7ff fa99 	bl	8000f80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001a4e:	4944      	ldr	r1, [pc, #272]	; (8001b60 <MX_GPIO_Init+0x150>)
 8001a50:	4845      	ldr	r0, [pc, #276]	; (8001b68 <MX_GPIO_Init+0x158>)
 8001a52:	f7ff fa95 	bl	8000f80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001a56:	4945      	ldr	r1, [pc, #276]	; (8001b6c <MX_GPIO_Init+0x15c>)
 8001a58:	4845      	ldr	r0, [pc, #276]	; (8001b70 <MX_GPIO_Init+0x160>)
 8001a5a:	f7ff fa91 	bl	8000f80 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE13);
 8001a5e:	4945      	ldr	r1, [pc, #276]	; (8001b74 <MX_GPIO_Init+0x164>)
 8001a60:	2002      	movs	r0, #2
 8001a62:	f7ff fad1 	bl	8001008 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE14);
 8001a66:	4944      	ldr	r1, [pc, #272]	; (8001b78 <MX_GPIO_Init+0x168>)
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f7ff facd 	bl	8001008 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 8001a6e:	4943      	ldr	r1, [pc, #268]	; (8001b7c <MX_GPIO_Init+0x16c>)
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff fac9 	bl	8001008 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001a84:	2301      	movs	r3, #1
 8001a86:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 fb85 	bl	800219c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001a92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a96:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fb77 	bl	800219c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001abc:	2301      	movs	r3, #1
 8001abe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fb69 	bl	800219c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8001aca:	2204      	movs	r2, #4
 8001acc:	492c      	ldr	r1, [pc, #176]	; (8001b80 <MX_GPIO_Init+0x170>)
 8001ace:	4825      	ldr	r0, [pc, #148]	; (8001b64 <MX_GPIO_Init+0x154>)
 8001ad0:	f7ff fa24 	bl	8000f1c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	492b      	ldr	r1, [pc, #172]	; (8001b84 <MX_GPIO_Init+0x174>)
 8001ad8:	4822      	ldr	r0, [pc, #136]	; (8001b64 <MX_GPIO_Init+0x154>)
 8001ada:	f7ff fa1f 	bl	8000f1c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8001ade:	2204      	movs	r2, #4
 8001ae0:	4929      	ldr	r1, [pc, #164]	; (8001b88 <MX_GPIO_Init+0x178>)
 8001ae2:	4821      	ldr	r0, [pc, #132]	; (8001b68 <MX_GPIO_Init+0x158>)
 8001ae4:	f7ff fa1a 	bl	8000f1c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <MX_GPIO_Init+0x150>)
 8001aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001aec:	2301      	movs	r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001af0:	2302      	movs	r3, #2
 8001af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	4819      	ldr	r0, [pc, #100]	; (8001b64 <MX_GPIO_Init+0x154>)
 8001afe:	f000 fc81 	bl	8002404 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <MX_GPIO_Init+0x150>)
 8001b04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b06:	2301      	movs	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <MX_GPIO_Init+0x158>)
 8001b18:	f000 fc74 	bl	8002404 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_GPIO_Init+0x15c>)
 8001b1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b20:	2301      	movs	r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b24:	2302      	movs	r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480f      	ldr	r0, [pc, #60]	; (8001b70 <MX_GPIO_Init+0x160>)
 8001b32:	f000 fc67 	bl	8002404 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b36:	f7fe fb2d 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fb7b 	bl	800023c <NVIC_EncodePriority>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	2028      	movs	r0, #40	; 0x28
 8001b4c:	f7fe fb4c 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b50:	2028      	movs	r0, #40	; 0x28
 8001b52:	f7fe fb2d 	bl	80001b0 <__NVIC_EnableIRQ>

}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	04800080 	.word	0x04800080
 8001b64:	40011000 	.word	0x40011000
 8001b68:	40010c00 	.word	0x40010c00
 8001b6c:	04020002 	.word	0x04020002
 8001b70:	40010800 	.word	0x40010800
 8001b74:	00f00003 	.word	0x00f00003
 8001b78:	0f000003 	.word	0x0f000003
 8001b7c:	000f0003 	.word	0x000f0003
 8001b80:	04200020 	.word	0x04200020
 8001b84:	04400040 	.word	0x04400040
 8001b88:	04100010 	.word	0x04100010

08001b8c <USR1_Motor1_EnablePWM>:

/* USER CODE BEGIN 4 */

void USR1_Motor1_EnablePWM(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 8001b90:	2101      	movs	r1, #1
 8001b92:	4802      	ldr	r0, [pc, #8]	; (8001b9c <USR1_Motor1_EnablePWM+0x10>)
 8001b94:	f7fe ff5a 	bl	8000a4c <LL_TIM_CC_EnableChannel>
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40012c00 	.word	0x40012c00

08001ba0 <USR1_Motor2_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void USR1_Motor2_EnablePWM(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 8001ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <USR1_Motor2_EnablePWM+0x14>)
 8001baa:	f7fe ff4f 	bl	8000a4c <LL_TIM_CC_EnableChannel>
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40012c00 	.word	0x40012c00

08001bb8 <USR1_Motor1_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void USR1_Motor1_SetPWM(uint16_t PWMVal) // PWM Val between 0-7200
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH1(TIM1, PWMVal);
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <USR1_Motor1_SetPWM+0x1c>)
 8001bc8:	f7fe ffd4 	bl	8000b74 <LL_TIM_OC_SetCompareCH1>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012c00 	.word	0x40012c00

08001bd8 <USR1_Motor2_SetPWM>:
void USR1_Motor2_SetPWM(uint16_t PWMVal) // PWM Val between 0-7200
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
	LL_TIM_OC_SetCompareCH3(TIM1,PWMVal);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <USR1_Motor2_SetPWM+0x1c>)
 8001be8:	f7fe ffd1 	bl	8000b8e <LL_TIM_OC_SetCompareCH3>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40012c00 	.word	0x40012c00

08001bf8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010400 	.word	0x40010400

08001c24 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001c2c:	4a03      	ldr	r2, [pc, #12]	; (8001c3c <LL_EXTI_ClearFlag_0_31+0x18>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6153      	str	r3, [r2, #20]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40010400 	.word	0x40010400

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <HardFault_Handler+0x4>

08001c52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <MemManage_Handler+0x4>

08001c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <BusFault_Handler+0x4>

08001c5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <UsageFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8001cbc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cc0:	f7ff ff9a 	bl	8001bf8 <LL_EXTI_IsActiveFlag_0_31>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8001cca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001cce:	f7ff ffa9 	bl	8001c24 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */

    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001cd2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cd6:	f7ff ff8f 	bl	8001bf8 <LL_EXTI_IsActiveFlag_0_31>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001ce0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ce4:	f7ff ff9e 	bl	8001c24 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001ce8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cec:	f7ff ff84 	bl	8001bf8 <LL_EXTI_IsActiveFlag_0_31>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001cf6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cfa:	f7ff ff93 	bl	8001c24 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e00a      	b.n	8001d2a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d14:	f3af 8000 	nop.w
 8001d18:	4601      	mov	r1, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	60ba      	str	r2, [r7, #8]
 8001d20:	b2ca      	uxtb	r2, r1
 8001d22:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3301      	adds	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	dbf0      	blt.n	8001d14 <_read+0x12>
	}

return len;
 8001d32:	687b      	ldr	r3, [r7, #4]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e009      	b.n	8001d62 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	60ba      	str	r2, [r7, #8]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f984 	bl	8001064 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dbf1      	blt.n	8001d4e <_write+0x12>
	}
	return len;
 8001d6a:	687b      	ldr	r3, [r7, #4]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_close>:

int _close(int file)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	return -1;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <_isatty>:

int _isatty(int file)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	return 1;
 8001db0:	2301      	movs	r3, #1
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f001 f9ac 	bl	8003160 <__errno>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20005000 	.word	0x20005000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000084 	.word	0x20000084
 8001e3c:	200000a8 	.word	0x200000a8

08001e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <SystemInit+0x5c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <SystemInit+0x5c>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <SystemInit+0x5c>)
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4911      	ldr	r1, [pc, #68]	; (8001e9c <SystemInit+0x5c>)
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <SystemInit+0x60>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <SystemInit+0x5c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <SystemInit+0x5c>)
 8001e62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <SystemInit+0x5c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SystemInit+0x5c>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <SystemInit+0x5c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <SystemInit+0x5c>)
 8001e7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SystemInit+0x5c>)
 8001e86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SystemInit+0x64>)
 8001e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e92:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	f8ff0000 	.word	0xf8ff0000
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ea8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001eaa:	e003      	b.n	8001eb4 <LoopCopyDataInit>

08001eac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001eae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001eb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001eb2:	3104      	adds	r1, #4

08001eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001eb4:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001eb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001eba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ebc:	d3f6      	bcc.n	8001eac <CopyDataInit>
  ldr r2, =_sbss
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ec0:	e002      	b.n	8001ec8 <LoopFillZerobss>

08001ec2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ec4:	f842 3b04 	str.w	r3, [r2], #4

08001ec8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001eca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ecc:	d3f9      	bcc.n	8001ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ece:	f7ff ffb7 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f001 f94b 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ed6:	f7ff f8dd 	bl	8001094 <main>
  bx lr
 8001eda:	4770      	bx	lr
  ldr r3, =_sidata
 8001edc:	0800420c 	.word	0x0800420c
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ee4:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8001ee8:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8001eec:	200000a4 	.word	0x200000a4

08001ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC1_2_IRQHandler>

08001ef2 <LL_ADC_REG_SetSequencerLength>:
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <LL_ADC_IsEnabled>:
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
	...

08001f3c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8001f4a:	4813      	ldr	r0, [pc, #76]	; (8001f98 <LL_ADC_CommonInit+0x5c>)
 8001f4c:	f7ff ffe3 	bl	8001f16 <LL_ADC_IsEnabled>
 8001f50:	4604      	mov	r4, r0
 8001f52:	4812      	ldr	r0, [pc, #72]	; (8001f9c <LL_ADC_CommonInit+0x60>)
 8001f54:	f7ff ffdf 	bl	8001f16 <LL_ADC_IsEnabled>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4323      	orrs	r3, r4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d114      	bne.n	8001f8a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	e008      	b.n	8001f8e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	e001      	b.n	8001f8e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd90      	pop	{r4, r7, pc}
 8001f98:	40012400 	.word	0x40012400
 8001f9c:	40012800 	.word	0x40012800

08001fa0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffb1 	bl	8001f16 <LL_ADC_IsEnabled>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d112      	bne.n	8001fe0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	e001      	b.n	8001fe4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff8a 	bl	8001f16 <LL_ADC_IsEnabled>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d131      	bne.n	800206c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00c      	beq.n	800202a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	6859      	ldr	r1, [r3, #4]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	430b      	orrs	r3, r1
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	e008      	b.n	800203c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002044:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	6811      	ldr	r1, [r2, #0]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	68d2      	ldr	r2, [r2, #12]
 8002050:	4311      	orrs	r1, r2
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	6912      	ldr	r2, [r2, #16]
 8002056:	430a      	orrs	r2, r1
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff44 	bl	8001ef2 <LL_ADC_REG_SetSequencerLength>
 800206a:	e001      	b.n	8002070 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <LL_EXTI_EnableIT_0_31>:
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <LL_EXTI_EnableIT_0_31+0x20>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4904      	ldr	r1, [pc, #16]	; (800209c <LL_EXTI_EnableIT_0_31+0x20>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010400 	.word	0x40010400

080020a0 <LL_EXTI_DisableIT_0_31>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <LL_EXTI_DisableIT_0_31+0x20>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	4903      	ldr	r1, [pc, #12]	; (80020c0 <LL_EXTI_DisableIT_0_31+0x20>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40010400 	.word	0x40010400

080020c4 <LL_EXTI_EnableEvent_0_31>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4904      	ldr	r1, [pc, #16]	; (80020e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40010400 	.word	0x40010400

080020e8 <LL_EXTI_DisableEvent_0_31>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <LL_EXTI_DisableEvent_0_31+0x20>)
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4903      	ldr	r1, [pc, #12]	; (8002108 <LL_EXTI_DisableEvent_0_31+0x20>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40010400 	.word	0x40010400

0800210c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	4904      	ldr	r1, [pc, #16]	; (800212c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40010400 	.word	0x40010400

08002130 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	43db      	mvns	r3, r3
 8002140:	4903      	ldr	r1, [pc, #12]	; (8002150 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002142:	4013      	ands	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40010400 	.word	0x40010400

08002154 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4904      	ldr	r1, [pc, #16]	; (8002174 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010400 	.word	0x40010400

08002178 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	43db      	mvns	r3, r3
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800218a:	4013      	ands	r3, r2
 800218c:	60cb      	str	r3, [r1, #12]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40010400 	.word	0x40010400

0800219c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	791b      	ldrb	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d060      	beq.n	8002272 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d067      	beq.n	8002288 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	795b      	ldrb	r3, [r3, #5]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d00e      	beq.n	80021de <LL_EXTI_Init+0x42>
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d017      	beq.n	80021f4 <LL_EXTI_Init+0x58>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d120      	bne.n	800220a <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff8b 	bl	80020e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff50 	bl	800207c <LL_EXTI_EnableIT_0_31>
          break;
 80021dc:	e018      	b.n	8002210 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff5c 	bl	80020a0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff69 	bl	80020c4 <LL_EXTI_EnableEvent_0_31>
          break;
 80021f2:	e00d      	b.n	8002210 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff3f 	bl	800207c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff5e 	bl	80020c4 <LL_EXTI_EnableEvent_0_31>
          break;
 8002208:	e002      	b.n	8002210 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
          break;
 800220e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	799b      	ldrb	r3, [r3, #6]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d037      	beq.n	8002288 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	799b      	ldrb	r3, [r3, #6]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d00e      	beq.n	800223e <LL_EXTI_Init+0xa2>
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <LL_EXTI_Init+0xb8>
 8002224:	2b01      	cmp	r3, #1
 8002226:	d120      	bne.n	800226a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ffa3 	bl	8002178 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ff68 	bl	800210c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800223c:	e025      	b.n	800228a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff74 	bl	8002130 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff81 	bl	8002154 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002252:	e01a      	b.n	800228a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff57 	bl	800210c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff76 	bl	8002154 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002268:	e00f      	b.n	800228a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
            break;
 800226e:	bf00      	nop
 8002270:	e00b      	b.n	800228a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff12 	bl	80020a0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff31 	bl	80020e8 <LL_EXTI_DisableEvent_0_31>
 8002286:	e000      	b.n	800228a <LL_EXTI_Init+0xee>
      }
 8002288:	bf00      	nop
  }
  return status;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <LL_GPIO_SetPinMode>:
{
 8002294:	b490      	push	{r4, r7}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	0e1b      	lsrs	r3, r3, #24
 80022a8:	4413      	add	r3, r2
 80022aa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	613b      	str	r3, [r7, #16]
  return result;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	210f      	movs	r1, #15
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	401a      	ands	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	61bb      	str	r3, [r7, #24]
  return result;
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	4313      	orrs	r3, r2
 80022ec:	6023      	str	r3, [r4, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc90      	pop	{r4, r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_GPIO_SetPinSpeed>:
{
 80022f8:	b490      	push	{r4, r7}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	0e1b      	lsrs	r3, r3, #24
 800230c:	4413      	add	r3, r2
 800230e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	613b      	str	r3, [r7, #16]
  return result;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	2103      	movs	r1, #3
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	401a      	ands	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	61bb      	str	r3, [r7, #24]
  return result;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	6023      	str	r3, [r4, #0]
}
 8002352:	bf00      	nop
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bc90      	pop	{r4, r7}
 800235a:	4770      	bx	lr

0800235c <LL_GPIO_SetPinOutputType>:
{
 800235c:	b490      	push	{r4, r7}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0e1b      	lsrs	r3, r3, #24
 8002370:	4413      	add	r3, r2
 8002372:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	613b      	str	r3, [r7, #16]
  return result;
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	2104      	movs	r1, #4
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	401a      	ands	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	61bb      	str	r3, [r7, #24]
  return result;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	6023      	str	r3, [r4, #0]
}
 80023b6:	bf00      	nop
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc90      	pop	{r4, r7}
 80023be:	4770      	bx	lr

080023c0 <LL_GPIO_SetPinPull>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	43db      	mvns	r3, r3
 80023d6:	401a      	ands	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	613b      	str	r3, [r7, #16]
  return result;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	408b      	lsls	r3, r1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	60da      	str	r2, [r3, #12]
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	60fb      	str	r3, [r7, #12]
  return result;
 8002424:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800242e:	e040      	b.n	80024b2 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	409a      	lsls	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d036      	beq.n	80024ac <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	2b07      	cmp	r3, #7
 8002442:	d806      	bhi.n	8002452 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002444:	f240 1201 	movw	r2, #257	; 0x101
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e008      	b.n	8002464 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b08      	subs	r3, #8
 8002456:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002462:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	461a      	mov	r2, r3
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff11 	bl	8002294 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	461a      	mov	r2, r3
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffa0 	bl	80023c0 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d003      	beq.n	8002490 <LL_GPIO_Init+0x8c>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b09      	cmp	r3, #9
 800248e:	d10d      	bne.n	80024ac <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	461a      	mov	r2, r3
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff2d 	bl	80022f8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	461a      	mov	r2, r3
 80024a4:	69b9      	ldr	r1, [r7, #24]
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ff58 	bl	800235c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	3301      	adds	r3, #1
 80024b0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1b8      	bne.n	8002430 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <LL_I2C_Enable>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	601a      	str	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <LL_I2C_Disable>:
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0201 	bic.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <LL_I2C_SetOwnAddress1>:
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002518:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	430a      	orrs	r2, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
	...

08002534 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002534:	b490      	push	{r4, r7}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8002542:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8002544:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <LL_I2C_ConfigSpeed+0x114>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002558:	ea44 0203 	orr.w	r2, r4, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4938      	ldr	r1, [pc, #224]	; (800264c <LL_I2C_ConfigSpeed+0x118>)
 800256c:	428b      	cmp	r3, r1
 800256e:	d801      	bhi.n	8002574 <LL_I2C_ConfigSpeed+0x40>
 8002570:	1c63      	adds	r3, r4, #1
 8002572:	e008      	b.n	8002586 <LL_I2C_ConfigSpeed+0x52>
 8002574:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002578:	fb03 f304 	mul.w	r3, r3, r4
 800257c:	4934      	ldr	r1, [pc, #208]	; (8002650 <LL_I2C_ConfigSpeed+0x11c>)
 800257e:	fba1 1303 	umull	r1, r3, r1, r3
 8002582:	099b      	lsrs	r3, r3, #6
 8002584:	3301      	adds	r3, #1
 8002586:	431a      	orrs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a2f      	ldr	r2, [pc, #188]	; (800264c <LL_I2C_ConfigSpeed+0x118>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d939      	bls.n	8002608 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d117      	bne.n	80025ca <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80025be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c2:	e01d      	b.n	8002600 <LL_I2C_ConfigSpeed+0xcc>
 80025c4:	f248 0301 	movw	r3, #32769	; 0x8001
 80025c8:	e01a      	b.n	8002600 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009a      	lsls	r2, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	009a      	lsls	r2, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80025f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fa:	e001      	b.n	8002600 <LL_I2C_ConfigSpeed+0xcc>
 80025fc:	f248 0301 	movw	r3, #32769	; 0x8001
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	ea43 0402 	orr.w	r4, r3, r2
 8002606:	e010      	b.n	800262a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002616:	2b03      	cmp	r3, #3
 8002618:	d905      	bls.n	8002626 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	e000      	b.n	8002628 <LL_I2C_ConfigSpeed+0xf4>
 8002626:	2304      	movs	r3, #4
 8002628:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002636:	ea44 0203 	orr.w	r2, r4, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	61da      	str	r2, [r3, #28]
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bc90      	pop	{r4, r7}
 8002646:	4770      	bx	lr
 8002648:	431bde83 	.word	0x431bde83
 800264c:	000186a0 	.word	0x000186a0
 8002650:	10624dd3 	.word	0x10624dd3

08002654 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 021a 	bic.w	r2, r3, #26
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	601a      	str	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff1d 	bl	80024e6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f87b 	bl	80027ac <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80026b6:	6939      	ldr	r1, [r7, #16]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff37 	bl	8002534 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff17 	bl	8002504 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ffb9 	bl	8002654 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fef0 	bl	80024c8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffc2 	bl	8002678 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <LL_RCC_GetSysClkSource>:
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <LL_RCC_GetSysClkSource+0x14>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000

08002718 <LL_RCC_GetAHBPrescaler>:
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <LL_RCC_GetAHBPrescaler+0x14>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40021000 	.word	0x40021000

08002730 <LL_RCC_GetAPB1Prescaler>:
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40021000 	.word	0x40021000

08002748 <LL_RCC_GetAPB2Prescaler>:
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <LL_RCC_GetAPB2Prescaler+0x14>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000

08002760 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <LL_RCC_PLL_GetMainSource+0x14>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40021000 	.word	0x40021000

08002778 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40021000 	.word	0x40021000

08002790 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <LL_RCC_PLL_GetPrediv+0x18>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0c5b      	lsrs	r3, r3, #17
 800279a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80027b4:	f000 f820 	bl	80027f8 <RCC_GetSystemClockFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f83a 	bl	800283c <RCC_GetHCLKClockFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f848 	bl	8002868 <RCC_GetPCLK1ClockFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f854 	bl	8002890 <RCC_GetPCLK2ClockFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60da      	str	r2, [r3, #12]
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002802:	f7ff ff7d 	bl	8002700 <LL_RCC_GetSysClkSource>
 8002806:	4603      	mov	r3, r0
 8002808:	2b04      	cmp	r3, #4
 800280a:	d006      	beq.n	800281a <RCC_GetSystemClockFreq+0x22>
 800280c:	2b08      	cmp	r3, #8
 800280e:	d007      	beq.n	8002820 <RCC_GetSystemClockFreq+0x28>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <RCC_GetSystemClockFreq+0x40>)
 8002816:	607b      	str	r3, [r7, #4]
      break;
 8002818:	e009      	b.n	800282e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <RCC_GetSystemClockFreq+0x40>)
 800281c:	607b      	str	r3, [r7, #4]
      break;
 800281e:	e006      	b.n	800282e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002820:	f000 f84a 	bl	80028b8 <RCC_PLL_GetFreqDomain_SYS>
 8002824:	6078      	str	r0, [r7, #4]
      break;
 8002826:	e002      	b.n	800282e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <RCC_GetSystemClockFreq+0x40>)
 800282a:	607b      	str	r3, [r7, #4]
      break;
 800282c:	bf00      	nop
  }

  return frequency;
 800282e:	687b      	ldr	r3, [r7, #4]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	007a1200 	.word	0x007a1200

0800283c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002844:	f7ff ff68 	bl	8002718 <LL_RCC_GetAHBPrescaler>
 8002848:	4603      	mov	r3, r0
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <RCC_GetHCLKClockFreq+0x28>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	40d3      	lsrs	r3, r2
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	08004154 	.word	0x08004154

08002868 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002870:	f7ff ff5e 	bl	8002730 <LL_RCC_GetAPB1Prescaler>
 8002874:	4603      	mov	r3, r0
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <RCC_GetPCLK1ClockFreq+0x24>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	461a      	mov	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	40d3      	lsrs	r3, r2
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	08004164 	.word	0x08004164

08002890 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002898:	f7ff ff56 	bl	8002748 <LL_RCC_GetAPB2Prescaler>
 800289c:	4603      	mov	r3, r0
 800289e:	0adb      	lsrs	r3, r3, #11
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <RCC_GetPCLK2ClockFreq+0x24>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	40d3      	lsrs	r3, r2
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	08004164 	.word	0x08004164

080028b8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	2300      	movs	r3, #0
 80028c4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80028c6:	f7ff ff4b 	bl	8002760 <LL_RCC_PLL_GetMainSource>
 80028ca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <RCC_PLL_GetFreqDomain_SYS+0x22>
 80028d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d6:	d003      	beq.n	80028e0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80028d8:	e00b      	b.n	80028f2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80028dc:	607b      	str	r3, [r7, #4]
      break;
 80028de:	e00b      	b.n	80028f8 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80028e0:	f7ff ff56 	bl	8002790 <LL_RCC_PLL_GetPrediv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	3301      	adds	r3, #1
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	607b      	str	r3, [r7, #4]
      break;
 80028f0:	e002      	b.n	80028f8 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80028f4:	607b      	str	r3, [r7, #4]
      break;
 80028f6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80028f8:	f7ff ff3e 	bl	8002778 <LL_RCC_PLL_GetMultiplicator>
 80028fc:	4603      	mov	r3, r0
 80028fe:	0c9b      	lsrs	r3, r3, #18
 8002900:	3302      	adds	r3, #2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	fb02 f303 	mul.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	003d0900 	.word	0x003d0900
 8002914:	007a1200 	.word	0x007a1200

08002918 <LL_TIM_SetPrescaler>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <LL_TIM_SetAutoReload>:
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <LL_TIM_SetRepetitionCounter>:
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <LL_TIM_OC_SetCompareCH1>:
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <LL_TIM_OC_SetCompareCH2>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <LL_TIM_OC_SetCompareCH3>:
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <LL_TIM_OC_SetCompareCH4>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	615a      	str	r2, [r3, #20]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <LL_TIM_Init+0xb0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <LL_TIM_Init+0x30>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d007      	beq.n	8002a1c <LL_TIM_Init+0x30>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <LL_TIM_Init+0xb4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <LL_TIM_Init+0x30>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <LL_TIM_Init+0xb8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d106      	bne.n	8002a2a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <LL_TIM_Init+0xb0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <LL_TIM_Init+0x5e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d007      	beq.n	8002a4a <LL_TIM_Init+0x5e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <LL_TIM_Init+0xb4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d003      	beq.n	8002a4a <LL_TIM_Init+0x5e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <LL_TIM_Init+0xb8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d106      	bne.n	8002a58 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff64 	bl	8002932 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff51 	bl	8002918 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <LL_TIM_Init+0xb0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d105      	bne.n	8002a8a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	7c1b      	ldrb	r3, [r3, #16]
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff61 	bl	800294c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff9f 	bl	80029ce <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d012      	beq.n	8002ae4 <LL_TIM_OC_Init+0x3c>
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d802      	bhi.n	8002ac8 <LL_TIM_OC_Init+0x20>
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d007      	beq.n	8002ad6 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002ac6:	e022      	b.n	8002b0e <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8002ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002acc:	d011      	beq.n	8002af2 <LL_TIM_OC_Init+0x4a>
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad2:	d015      	beq.n	8002b00 <LL_TIM_OC_Init+0x58>
      break;
 8002ad4:	e01b      	b.n	8002b0e <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f865 	bl	8002ba8 <OC1Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae2:	e014      	b.n	8002b0e <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f8c4 	bl	8002c74 <OC2Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	75fb      	strb	r3, [r7, #23]
      break;
 8002af0:	e00d      	b.n	8002b0e <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f927 	bl	8002d48 <OC3Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	75fb      	strb	r3, [r7, #23]
      break;
 8002afe:	e006      	b.n	8002b0e <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f98a 	bl	8002e1c <OC4Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b0c:	bf00      	nop
  }

  return result;
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	7b12      	ldrb	r2, [r2, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	89d2      	ldrh	r2, [r2, #14]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f023 0201 	bic.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f023 0202 	bic.w	r2, r3, #2
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0201 	bic.w	r2, r3, #1
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <OC1Config+0xc8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d11e      	bne.n	8002c48 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f023 0208 	bic.w	r2, r3, #8
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f023 0204 	bic.w	r2, r3, #4
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fe83 	bl	8002966 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40012c00 	.word	0x40012c00

08002c74 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f023 0210 	bic.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0220 	bic.w	r2, r3, #32
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f023 0210 	bic.w	r2, r3, #16
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <OC2Config+0xd0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d11f      	bne.n	8002d1c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	019b      	lsls	r3, r3, #6
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	019b      	lsls	r3, r3, #6
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fe26 	bl	8002980 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40012c00 	.word	0x40012c00

08002d48 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <OC3Config+0xd0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d11f      	bne.n	8002dee <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	015b      	lsls	r3, r3, #5
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff fdca 	bl	800299a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40012c00 	.word	0x40012c00

08002e1c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	031b      	lsls	r3, r3, #12
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	031b      	lsls	r3, r3, #12
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <OC4Config+0xa0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d107      	bne.n	8002e94 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	019b      	lsls	r3, r3, #6
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fd84 	bl	80029b4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40012c00 	.word	0x40012c00

08002ec0 <LL_USART_IsEnabled>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <LL_USART_SetStopBitsLength>:
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	611a      	str	r2, [r3, #16]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <LL_USART_SetHWFlowCtrl>:
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	615a      	str	r2, [r3, #20]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
	...

08002f30 <LL_USART_SetBaudRate>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009a      	lsls	r2, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <LL_USART_SetBaudRate+0xb8>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	b299      	uxth	r1, r3
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009a      	lsls	r2, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <LL_USART_SetBaudRate+0xb8>)
 8002f74:	fba3 0302 	umull	r0, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	2064      	movs	r0, #100	; 0x64
 8002f7c:	fb00 f303 	mul.w	r3, r0, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	3332      	adds	r3, #50	; 0x32
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <LL_USART_SetBaudRate+0xb8>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	440b      	add	r3, r1
 8002f98:	b299      	uxth	r1, r3
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <LL_USART_SetBaudRate+0xb8>)
 8002fb0:	fba3 0302 	umull	r0, r3, r3, r2
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	2064      	movs	r0, #100	; 0x64
 8002fb8:	fb00 f303 	mul.w	r3, r0, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	3332      	adds	r3, #50	; 0x32
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <LL_USART_SetBaudRate+0xb8>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	51eb851f 	.word	0x51eb851f

08002fec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ff5e 	bl	8002ec0 <LL_USART_IsEnabled>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d145      	bne.n	8003096 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003012:	f023 030c 	bic.w	r3, r3, #12
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	6851      	ldr	r1, [r2, #4]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68d2      	ldr	r2, [r2, #12]
 800301e:	4311      	orrs	r1, r2
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	6912      	ldr	r2, [r2, #16]
 8003024:	430a      	orrs	r2, r1
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff ff57 	bl	8002ee6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ff63 	bl	8002f0a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003044:	f107 0308 	add.w	r3, r7, #8
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fbaf 	bl	80027ac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <LL_USART_Init+0xb4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d102      	bne.n	800305c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	e00c      	b.n	8003076 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <LL_USART_Init+0xb8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d102      	bne.n	800306a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	e005      	b.n	8003076 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <LL_USART_Init+0xbc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00c      	beq.n	8003096 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8003084:	2300      	movs	r3, #0
 8003086:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff4d 	bl	8002f30 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003096:	7ffb      	ldrb	r3, [r7, #31]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40004400 	.word	0x40004400
 80030a8:	40004800 	.word	0x40004800

080030ac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	4a07      	ldr	r2, [pc, #28]	; (80030dc <LL_InitTick+0x30>)
 80030c0:	3b01      	subs	r3, #1
 80030c2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <LL_InitTick+0x30>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <LL_InitTick+0x30>)
 80030cc:	2205      	movs	r2, #5
 80030ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80030e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ffdd 	bl	80030ac <LL_InitTick>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <LL_mDelay+0x44>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800310a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d00c      	beq.n	800312e <LL_mDelay+0x32>
  {
    Delay++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3301      	adds	r3, #1
 8003118:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800311a:	e008      	b.n	800312e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <LL_mDelay+0x44>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <LL_mDelay+0x32>
    {
      Delay--;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f3      	bne.n	800311c <LL_mDelay+0x20>
    }
  }
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010

08003144 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800314c:	4a03      	ldr	r2, [pc, #12]	; (800315c <LL_SetSystemCoreClock+0x18>)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6013      	str	r3, [r2, #0]
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	20000000 	.word	0x20000000

08003160 <__errno>:
 8003160:	4b01      	ldr	r3, [pc, #4]	; (8003168 <__errno+0x8>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000004 	.word	0x20000004

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	2500      	movs	r5, #0
 8003170:	4e0c      	ldr	r6, [pc, #48]	; (80031a4 <__libc_init_array+0x38>)
 8003172:	4c0d      	ldr	r4, [pc, #52]	; (80031a8 <__libc_init_array+0x3c>)
 8003174:	1ba4      	subs	r4, r4, r6
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	42a5      	cmp	r5, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	f000 ffc6 	bl	800410c <_init>
 8003180:	2500      	movs	r5, #0
 8003182:	4e0a      	ldr	r6, [pc, #40]	; (80031ac <__libc_init_array+0x40>)
 8003184:	4c0a      	ldr	r4, [pc, #40]	; (80031b0 <__libc_init_array+0x44>)
 8003186:	1ba4      	subs	r4, r4, r6
 8003188:	10a4      	asrs	r4, r4, #2
 800318a:	42a5      	cmp	r5, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003194:	4798      	blx	r3
 8003196:	3501      	adds	r5, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800319e:	4798      	blx	r3
 80031a0:	3501      	adds	r5, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	08004204 	.word	0x08004204
 80031a8:	08004204 	.word	0x08004204
 80031ac:	08004204 	.word	0x08004204
 80031b0:	08004208 	.word	0x08004208

080031b4 <memset>:
 80031b4:	4603      	mov	r3, r0
 80031b6:	4402      	add	r2, r0
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d100      	bne.n	80031be <memset+0xa>
 80031bc:	4770      	bx	lr
 80031be:	f803 1b01 	strb.w	r1, [r3], #1
 80031c2:	e7f9      	b.n	80031b8 <memset+0x4>

080031c4 <iprintf>:
 80031c4:	b40f      	push	{r0, r1, r2, r3}
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <iprintf+0x2c>)
 80031c8:	b513      	push	{r0, r1, r4, lr}
 80031ca:	681c      	ldr	r4, [r3, #0]
 80031cc:	b124      	cbz	r4, 80031d8 <iprintf+0x14>
 80031ce:	69a3      	ldr	r3, [r4, #24]
 80031d0:	b913      	cbnz	r3, 80031d8 <iprintf+0x14>
 80031d2:	4620      	mov	r0, r4
 80031d4:	f000 f9ac 	bl	8003530 <__sinit>
 80031d8:	ab05      	add	r3, sp, #20
 80031da:	9a04      	ldr	r2, [sp, #16]
 80031dc:	68a1      	ldr	r1, [r4, #8]
 80031de:	4620      	mov	r0, r4
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	f000 fb69 	bl	80038b8 <_vfiprintf_r>
 80031e6:	b002      	add	sp, #8
 80031e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ec:	b004      	add	sp, #16
 80031ee:	4770      	bx	lr
 80031f0:	20000004 	.word	0x20000004

080031f4 <setvbuf>:
 80031f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80031f8:	461d      	mov	r5, r3
 80031fa:	4b51      	ldr	r3, [pc, #324]	; (8003340 <setvbuf+0x14c>)
 80031fc:	4604      	mov	r4, r0
 80031fe:	681e      	ldr	r6, [r3, #0]
 8003200:	460f      	mov	r7, r1
 8003202:	4690      	mov	r8, r2
 8003204:	b126      	cbz	r6, 8003210 <setvbuf+0x1c>
 8003206:	69b3      	ldr	r3, [r6, #24]
 8003208:	b913      	cbnz	r3, 8003210 <setvbuf+0x1c>
 800320a:	4630      	mov	r0, r6
 800320c:	f000 f990 	bl	8003530 <__sinit>
 8003210:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <setvbuf+0x150>)
 8003212:	429c      	cmp	r4, r3
 8003214:	d152      	bne.n	80032bc <setvbuf+0xc8>
 8003216:	6874      	ldr	r4, [r6, #4]
 8003218:	f1b8 0f02 	cmp.w	r8, #2
 800321c:	d006      	beq.n	800322c <setvbuf+0x38>
 800321e:	f1b8 0f01 	cmp.w	r8, #1
 8003222:	f200 8089 	bhi.w	8003338 <setvbuf+0x144>
 8003226:	2d00      	cmp	r5, #0
 8003228:	f2c0 8086 	blt.w	8003338 <setvbuf+0x144>
 800322c:	4621      	mov	r1, r4
 800322e:	4630      	mov	r0, r6
 8003230:	f000 f914 	bl	800345c <_fflush_r>
 8003234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003236:	b141      	cbz	r1, 800324a <setvbuf+0x56>
 8003238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800323c:	4299      	cmp	r1, r3
 800323e:	d002      	beq.n	8003246 <setvbuf+0x52>
 8003240:	4630      	mov	r0, r6
 8003242:	f000 fa6b 	bl	800371c <_free_r>
 8003246:	2300      	movs	r3, #0
 8003248:	6363      	str	r3, [r4, #52]	; 0x34
 800324a:	2300      	movs	r3, #0
 800324c:	61a3      	str	r3, [r4, #24]
 800324e:	6063      	str	r3, [r4, #4]
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	d503      	bpl.n	800325e <setvbuf+0x6a>
 8003256:	6921      	ldr	r1, [r4, #16]
 8003258:	4630      	mov	r0, r6
 800325a:	f000 fa5f 	bl	800371c <_free_r>
 800325e:	89a3      	ldrh	r3, [r4, #12]
 8003260:	f1b8 0f02 	cmp.w	r8, #2
 8003264:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003268:	f023 0303 	bic.w	r3, r3, #3
 800326c:	81a3      	strh	r3, [r4, #12]
 800326e:	d05d      	beq.n	800332c <setvbuf+0x138>
 8003270:	ab01      	add	r3, sp, #4
 8003272:	466a      	mov	r2, sp
 8003274:	4621      	mov	r1, r4
 8003276:	4630      	mov	r0, r6
 8003278:	f000 f9e4 	bl	8003644 <__swhatbuf_r>
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	4318      	orrs	r0, r3
 8003280:	81a0      	strh	r0, [r4, #12]
 8003282:	bb2d      	cbnz	r5, 80032d0 <setvbuf+0xdc>
 8003284:	9d00      	ldr	r5, [sp, #0]
 8003286:	4628      	mov	r0, r5
 8003288:	f000 fa40 	bl	800370c <malloc>
 800328c:	4607      	mov	r7, r0
 800328e:	2800      	cmp	r0, #0
 8003290:	d14e      	bne.n	8003330 <setvbuf+0x13c>
 8003292:	f8dd 9000 	ldr.w	r9, [sp]
 8003296:	45a9      	cmp	r9, r5
 8003298:	d13c      	bne.n	8003314 <setvbuf+0x120>
 800329a:	f04f 30ff 	mov.w	r0, #4294967295
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	81a3      	strh	r3, [r4, #12]
 80032a6:	2300      	movs	r3, #0
 80032a8:	60a3      	str	r3, [r4, #8]
 80032aa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032ae:	6023      	str	r3, [r4, #0]
 80032b0:	6123      	str	r3, [r4, #16]
 80032b2:	2301      	movs	r3, #1
 80032b4:	6163      	str	r3, [r4, #20]
 80032b6:	b003      	add	sp, #12
 80032b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <setvbuf+0x154>)
 80032be:	429c      	cmp	r4, r3
 80032c0:	d101      	bne.n	80032c6 <setvbuf+0xd2>
 80032c2:	68b4      	ldr	r4, [r6, #8]
 80032c4:	e7a8      	b.n	8003218 <setvbuf+0x24>
 80032c6:	4b21      	ldr	r3, [pc, #132]	; (800334c <setvbuf+0x158>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	bf08      	it	eq
 80032cc:	68f4      	ldreq	r4, [r6, #12]
 80032ce:	e7a3      	b.n	8003218 <setvbuf+0x24>
 80032d0:	2f00      	cmp	r7, #0
 80032d2:	d0d8      	beq.n	8003286 <setvbuf+0x92>
 80032d4:	69b3      	ldr	r3, [r6, #24]
 80032d6:	b913      	cbnz	r3, 80032de <setvbuf+0xea>
 80032d8:	4630      	mov	r0, r6
 80032da:	f000 f929 	bl	8003530 <__sinit>
 80032de:	f1b8 0f01 	cmp.w	r8, #1
 80032e2:	bf08      	it	eq
 80032e4:	89a3      	ldrheq	r3, [r4, #12]
 80032e6:	6027      	str	r7, [r4, #0]
 80032e8:	bf04      	itt	eq
 80032ea:	f043 0301 	orreq.w	r3, r3, #1
 80032ee:	81a3      	strheq	r3, [r4, #12]
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80032f6:	f013 0008 	ands.w	r0, r3, #8
 80032fa:	d01b      	beq.n	8003334 <setvbuf+0x140>
 80032fc:	f013 0001 	ands.w	r0, r3, #1
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	bf1f      	itttt	ne
 8003306:	426d      	negne	r5, r5
 8003308:	60a3      	strne	r3, [r4, #8]
 800330a:	61a5      	strne	r5, [r4, #24]
 800330c:	4618      	movne	r0, r3
 800330e:	bf08      	it	eq
 8003310:	60a5      	streq	r5, [r4, #8]
 8003312:	e7d0      	b.n	80032b6 <setvbuf+0xc2>
 8003314:	4648      	mov	r0, r9
 8003316:	f000 f9f9 	bl	800370c <malloc>
 800331a:	4607      	mov	r7, r0
 800331c:	2800      	cmp	r0, #0
 800331e:	d0bc      	beq.n	800329a <setvbuf+0xa6>
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	464d      	mov	r5, r9
 8003324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003328:	81a3      	strh	r3, [r4, #12]
 800332a:	e7d3      	b.n	80032d4 <setvbuf+0xe0>
 800332c:	2000      	movs	r0, #0
 800332e:	e7b6      	b.n	800329e <setvbuf+0xaa>
 8003330:	46a9      	mov	r9, r5
 8003332:	e7f5      	b.n	8003320 <setvbuf+0x12c>
 8003334:	60a0      	str	r0, [r4, #8]
 8003336:	e7be      	b.n	80032b6 <setvbuf+0xc2>
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	e7bb      	b.n	80032b6 <setvbuf+0xc2>
 800333e:	bf00      	nop
 8003340:	20000004 	.word	0x20000004
 8003344:	08004190 	.word	0x08004190
 8003348:	080041b0 	.word	0x080041b0
 800334c:	08004170 	.word	0x08004170

08003350 <__sflush_r>:
 8003350:	898a      	ldrh	r2, [r1, #12]
 8003352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003356:	4605      	mov	r5, r0
 8003358:	0710      	lsls	r0, r2, #28
 800335a:	460c      	mov	r4, r1
 800335c:	d458      	bmi.n	8003410 <__sflush_r+0xc0>
 800335e:	684b      	ldr	r3, [r1, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	dc05      	bgt.n	8003370 <__sflush_r+0x20>
 8003364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	dc02      	bgt.n	8003370 <__sflush_r+0x20>
 800336a:	2000      	movs	r0, #0
 800336c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003372:	2e00      	cmp	r6, #0
 8003374:	d0f9      	beq.n	800336a <__sflush_r+0x1a>
 8003376:	2300      	movs	r3, #0
 8003378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800337c:	682f      	ldr	r7, [r5, #0]
 800337e:	6a21      	ldr	r1, [r4, #32]
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	d032      	beq.n	80033ea <__sflush_r+0x9a>
 8003384:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	075a      	lsls	r2, r3, #29
 800338a:	d505      	bpl.n	8003398 <__sflush_r+0x48>
 800338c:	6863      	ldr	r3, [r4, #4]
 800338e:	1ac0      	subs	r0, r0, r3
 8003390:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003392:	b10b      	cbz	r3, 8003398 <__sflush_r+0x48>
 8003394:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003396:	1ac0      	subs	r0, r0, r3
 8003398:	2300      	movs	r3, #0
 800339a:	4602      	mov	r2, r0
 800339c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800339e:	6a21      	ldr	r1, [r4, #32]
 80033a0:	4628      	mov	r0, r5
 80033a2:	47b0      	blx	r6
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	89a3      	ldrh	r3, [r4, #12]
 80033a8:	d106      	bne.n	80033b8 <__sflush_r+0x68>
 80033aa:	6829      	ldr	r1, [r5, #0]
 80033ac:	291d      	cmp	r1, #29
 80033ae:	d848      	bhi.n	8003442 <__sflush_r+0xf2>
 80033b0:	4a29      	ldr	r2, [pc, #164]	; (8003458 <__sflush_r+0x108>)
 80033b2:	40ca      	lsrs	r2, r1
 80033b4:	07d6      	lsls	r6, r2, #31
 80033b6:	d544      	bpl.n	8003442 <__sflush_r+0xf2>
 80033b8:	2200      	movs	r2, #0
 80033ba:	6062      	str	r2, [r4, #4]
 80033bc:	6922      	ldr	r2, [r4, #16]
 80033be:	04d9      	lsls	r1, r3, #19
 80033c0:	6022      	str	r2, [r4, #0]
 80033c2:	d504      	bpl.n	80033ce <__sflush_r+0x7e>
 80033c4:	1c42      	adds	r2, r0, #1
 80033c6:	d101      	bne.n	80033cc <__sflush_r+0x7c>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b903      	cbnz	r3, 80033ce <__sflush_r+0x7e>
 80033cc:	6560      	str	r0, [r4, #84]	; 0x54
 80033ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033d0:	602f      	str	r7, [r5, #0]
 80033d2:	2900      	cmp	r1, #0
 80033d4:	d0c9      	beq.n	800336a <__sflush_r+0x1a>
 80033d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033da:	4299      	cmp	r1, r3
 80033dc:	d002      	beq.n	80033e4 <__sflush_r+0x94>
 80033de:	4628      	mov	r0, r5
 80033e0:	f000 f99c 	bl	800371c <_free_r>
 80033e4:	2000      	movs	r0, #0
 80033e6:	6360      	str	r0, [r4, #52]	; 0x34
 80033e8:	e7c0      	b.n	800336c <__sflush_r+0x1c>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4628      	mov	r0, r5
 80033ee:	47b0      	blx	r6
 80033f0:	1c41      	adds	r1, r0, #1
 80033f2:	d1c8      	bne.n	8003386 <__sflush_r+0x36>
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0c5      	beq.n	8003386 <__sflush_r+0x36>
 80033fa:	2b1d      	cmp	r3, #29
 80033fc:	d001      	beq.n	8003402 <__sflush_r+0xb2>
 80033fe:	2b16      	cmp	r3, #22
 8003400:	d101      	bne.n	8003406 <__sflush_r+0xb6>
 8003402:	602f      	str	r7, [r5, #0]
 8003404:	e7b1      	b.n	800336a <__sflush_r+0x1a>
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340c:	81a3      	strh	r3, [r4, #12]
 800340e:	e7ad      	b.n	800336c <__sflush_r+0x1c>
 8003410:	690f      	ldr	r7, [r1, #16]
 8003412:	2f00      	cmp	r7, #0
 8003414:	d0a9      	beq.n	800336a <__sflush_r+0x1a>
 8003416:	0793      	lsls	r3, r2, #30
 8003418:	bf18      	it	ne
 800341a:	2300      	movne	r3, #0
 800341c:	680e      	ldr	r6, [r1, #0]
 800341e:	bf08      	it	eq
 8003420:	694b      	ldreq	r3, [r1, #20]
 8003422:	eba6 0807 	sub.w	r8, r6, r7
 8003426:	600f      	str	r7, [r1, #0]
 8003428:	608b      	str	r3, [r1, #8]
 800342a:	f1b8 0f00 	cmp.w	r8, #0
 800342e:	dd9c      	ble.n	800336a <__sflush_r+0x1a>
 8003430:	4643      	mov	r3, r8
 8003432:	463a      	mov	r2, r7
 8003434:	6a21      	ldr	r1, [r4, #32]
 8003436:	4628      	mov	r0, r5
 8003438:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800343a:	47b0      	blx	r6
 800343c:	2800      	cmp	r0, #0
 800343e:	dc06      	bgt.n	800344e <__sflush_r+0xfe>
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003446:	81a3      	strh	r3, [r4, #12]
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	e78e      	b.n	800336c <__sflush_r+0x1c>
 800344e:	4407      	add	r7, r0
 8003450:	eba8 0800 	sub.w	r8, r8, r0
 8003454:	e7e9      	b.n	800342a <__sflush_r+0xda>
 8003456:	bf00      	nop
 8003458:	20400001 	.word	0x20400001

0800345c <_fflush_r>:
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	690b      	ldr	r3, [r1, #16]
 8003460:	4605      	mov	r5, r0
 8003462:	460c      	mov	r4, r1
 8003464:	b1db      	cbz	r3, 800349e <_fflush_r+0x42>
 8003466:	b118      	cbz	r0, 8003470 <_fflush_r+0x14>
 8003468:	6983      	ldr	r3, [r0, #24]
 800346a:	b90b      	cbnz	r3, 8003470 <_fflush_r+0x14>
 800346c:	f000 f860 	bl	8003530 <__sinit>
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <_fflush_r+0x48>)
 8003472:	429c      	cmp	r4, r3
 8003474:	d109      	bne.n	800348a <_fflush_r+0x2e>
 8003476:	686c      	ldr	r4, [r5, #4]
 8003478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800347c:	b17b      	cbz	r3, 800349e <_fflush_r+0x42>
 800347e:	4621      	mov	r1, r4
 8003480:	4628      	mov	r0, r5
 8003482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003486:	f7ff bf63 	b.w	8003350 <__sflush_r>
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <_fflush_r+0x4c>)
 800348c:	429c      	cmp	r4, r3
 800348e:	d101      	bne.n	8003494 <_fflush_r+0x38>
 8003490:	68ac      	ldr	r4, [r5, #8]
 8003492:	e7f1      	b.n	8003478 <_fflush_r+0x1c>
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <_fflush_r+0x50>)
 8003496:	429c      	cmp	r4, r3
 8003498:	bf08      	it	eq
 800349a:	68ec      	ldreq	r4, [r5, #12]
 800349c:	e7ec      	b.n	8003478 <_fflush_r+0x1c>
 800349e:	2000      	movs	r0, #0
 80034a0:	bd38      	pop	{r3, r4, r5, pc}
 80034a2:	bf00      	nop
 80034a4:	08004190 	.word	0x08004190
 80034a8:	080041b0 	.word	0x080041b0
 80034ac:	08004170 	.word	0x08004170

080034b0 <std>:
 80034b0:	2300      	movs	r3, #0
 80034b2:	b510      	push	{r4, lr}
 80034b4:	4604      	mov	r4, r0
 80034b6:	e9c0 3300 	strd	r3, r3, [r0]
 80034ba:	6083      	str	r3, [r0, #8]
 80034bc:	8181      	strh	r1, [r0, #12]
 80034be:	6643      	str	r3, [r0, #100]	; 0x64
 80034c0:	81c2      	strh	r2, [r0, #14]
 80034c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034c6:	6183      	str	r3, [r0, #24]
 80034c8:	4619      	mov	r1, r3
 80034ca:	2208      	movs	r2, #8
 80034cc:	305c      	adds	r0, #92	; 0x5c
 80034ce:	f7ff fe71 	bl	80031b4 <memset>
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <std+0x38>)
 80034d4:	6224      	str	r4, [r4, #32]
 80034d6:	6263      	str	r3, [r4, #36]	; 0x24
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <std+0x3c>)
 80034da:	62a3      	str	r3, [r4, #40]	; 0x28
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <std+0x40>)
 80034de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <std+0x44>)
 80034e2:	6323      	str	r3, [r4, #48]	; 0x30
 80034e4:	bd10      	pop	{r4, pc}
 80034e6:	bf00      	nop
 80034e8:	08003e15 	.word	0x08003e15
 80034ec:	08003e37 	.word	0x08003e37
 80034f0:	08003e6f 	.word	0x08003e6f
 80034f4:	08003e93 	.word	0x08003e93

080034f8 <_cleanup_r>:
 80034f8:	4901      	ldr	r1, [pc, #4]	; (8003500 <_cleanup_r+0x8>)
 80034fa:	f000 b885 	b.w	8003608 <_fwalk_reent>
 80034fe:	bf00      	nop
 8003500:	0800345d 	.word	0x0800345d

08003504 <__sfmoreglue>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	2568      	movs	r5, #104	; 0x68
 8003508:	1e4a      	subs	r2, r1, #1
 800350a:	4355      	muls	r5, r2
 800350c:	460e      	mov	r6, r1
 800350e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003512:	f000 f94f 	bl	80037b4 <_malloc_r>
 8003516:	4604      	mov	r4, r0
 8003518:	b140      	cbz	r0, 800352c <__sfmoreglue+0x28>
 800351a:	2100      	movs	r1, #0
 800351c:	e9c0 1600 	strd	r1, r6, [r0]
 8003520:	300c      	adds	r0, #12
 8003522:	60a0      	str	r0, [r4, #8]
 8003524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003528:	f7ff fe44 	bl	80031b4 <memset>
 800352c:	4620      	mov	r0, r4
 800352e:	bd70      	pop	{r4, r5, r6, pc}

08003530 <__sinit>:
 8003530:	6983      	ldr	r3, [r0, #24]
 8003532:	b510      	push	{r4, lr}
 8003534:	4604      	mov	r4, r0
 8003536:	bb33      	cbnz	r3, 8003586 <__sinit+0x56>
 8003538:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800353c:	6503      	str	r3, [r0, #80]	; 0x50
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <__sinit+0x58>)
 8003540:	4a12      	ldr	r2, [pc, #72]	; (800358c <__sinit+0x5c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6282      	str	r2, [r0, #40]	; 0x28
 8003546:	4298      	cmp	r0, r3
 8003548:	bf04      	itt	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	6183      	streq	r3, [r0, #24]
 800354e:	f000 f81f 	bl	8003590 <__sfp>
 8003552:	6060      	str	r0, [r4, #4]
 8003554:	4620      	mov	r0, r4
 8003556:	f000 f81b 	bl	8003590 <__sfp>
 800355a:	60a0      	str	r0, [r4, #8]
 800355c:	4620      	mov	r0, r4
 800355e:	f000 f817 	bl	8003590 <__sfp>
 8003562:	2200      	movs	r2, #0
 8003564:	60e0      	str	r0, [r4, #12]
 8003566:	2104      	movs	r1, #4
 8003568:	6860      	ldr	r0, [r4, #4]
 800356a:	f7ff ffa1 	bl	80034b0 <std>
 800356e:	2201      	movs	r2, #1
 8003570:	2109      	movs	r1, #9
 8003572:	68a0      	ldr	r0, [r4, #8]
 8003574:	f7ff ff9c 	bl	80034b0 <std>
 8003578:	2202      	movs	r2, #2
 800357a:	2112      	movs	r1, #18
 800357c:	68e0      	ldr	r0, [r4, #12]
 800357e:	f7ff ff97 	bl	80034b0 <std>
 8003582:	2301      	movs	r3, #1
 8003584:	61a3      	str	r3, [r4, #24]
 8003586:	bd10      	pop	{r4, pc}
 8003588:	0800416c 	.word	0x0800416c
 800358c:	080034f9 	.word	0x080034f9

08003590 <__sfp>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <__sfp+0x70>)
 8003594:	4607      	mov	r7, r0
 8003596:	681e      	ldr	r6, [r3, #0]
 8003598:	69b3      	ldr	r3, [r6, #24]
 800359a:	b913      	cbnz	r3, 80035a2 <__sfp+0x12>
 800359c:	4630      	mov	r0, r6
 800359e:	f7ff ffc7 	bl	8003530 <__sinit>
 80035a2:	3648      	adds	r6, #72	; 0x48
 80035a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	d503      	bpl.n	80035b4 <__sfp+0x24>
 80035ac:	6833      	ldr	r3, [r6, #0]
 80035ae:	b133      	cbz	r3, 80035be <__sfp+0x2e>
 80035b0:	6836      	ldr	r6, [r6, #0]
 80035b2:	e7f7      	b.n	80035a4 <__sfp+0x14>
 80035b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035b8:	b16d      	cbz	r5, 80035d6 <__sfp+0x46>
 80035ba:	3468      	adds	r4, #104	; 0x68
 80035bc:	e7f4      	b.n	80035a8 <__sfp+0x18>
 80035be:	2104      	movs	r1, #4
 80035c0:	4638      	mov	r0, r7
 80035c2:	f7ff ff9f 	bl	8003504 <__sfmoreglue>
 80035c6:	6030      	str	r0, [r6, #0]
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d1f1      	bne.n	80035b0 <__sfp+0x20>
 80035cc:	230c      	movs	r3, #12
 80035ce:	4604      	mov	r4, r0
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	4620      	mov	r0, r4
 80035d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <__sfp+0x74>)
 80035d8:	6665      	str	r5, [r4, #100]	; 0x64
 80035da:	e9c4 5500 	strd	r5, r5, [r4]
 80035de:	60a5      	str	r5, [r4, #8]
 80035e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80035e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80035e8:	2208      	movs	r2, #8
 80035ea:	4629      	mov	r1, r5
 80035ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035f0:	f7ff fde0 	bl	80031b4 <memset>
 80035f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035fc:	e7e9      	b.n	80035d2 <__sfp+0x42>
 80035fe:	bf00      	nop
 8003600:	0800416c 	.word	0x0800416c
 8003604:	ffff0001 	.word	0xffff0001

08003608 <_fwalk_reent>:
 8003608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800360c:	4680      	mov	r8, r0
 800360e:	4689      	mov	r9, r1
 8003610:	2600      	movs	r6, #0
 8003612:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003616:	b914      	cbnz	r4, 800361e <_fwalk_reent+0x16>
 8003618:	4630      	mov	r0, r6
 800361a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800361e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003622:	3f01      	subs	r7, #1
 8003624:	d501      	bpl.n	800362a <_fwalk_reent+0x22>
 8003626:	6824      	ldr	r4, [r4, #0]
 8003628:	e7f5      	b.n	8003616 <_fwalk_reent+0xe>
 800362a:	89ab      	ldrh	r3, [r5, #12]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d907      	bls.n	8003640 <_fwalk_reent+0x38>
 8003630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003634:	3301      	adds	r3, #1
 8003636:	d003      	beq.n	8003640 <_fwalk_reent+0x38>
 8003638:	4629      	mov	r1, r5
 800363a:	4640      	mov	r0, r8
 800363c:	47c8      	blx	r9
 800363e:	4306      	orrs	r6, r0
 8003640:	3568      	adds	r5, #104	; 0x68
 8003642:	e7ee      	b.n	8003622 <_fwalk_reent+0x1a>

08003644 <__swhatbuf_r>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	460e      	mov	r6, r1
 8003648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800364c:	b096      	sub	sp, #88	; 0x58
 800364e:	2900      	cmp	r1, #0
 8003650:	4614      	mov	r4, r2
 8003652:	461d      	mov	r5, r3
 8003654:	da07      	bge.n	8003666 <__swhatbuf_r+0x22>
 8003656:	2300      	movs	r3, #0
 8003658:	602b      	str	r3, [r5, #0]
 800365a:	89b3      	ldrh	r3, [r6, #12]
 800365c:	061a      	lsls	r2, r3, #24
 800365e:	d410      	bmi.n	8003682 <__swhatbuf_r+0x3e>
 8003660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003664:	e00e      	b.n	8003684 <__swhatbuf_r+0x40>
 8003666:	466a      	mov	r2, sp
 8003668:	f000 fcfa 	bl	8004060 <_fstat_r>
 800366c:	2800      	cmp	r0, #0
 800366e:	dbf2      	blt.n	8003656 <__swhatbuf_r+0x12>
 8003670:	9a01      	ldr	r2, [sp, #4]
 8003672:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003676:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800367a:	425a      	negs	r2, r3
 800367c:	415a      	adcs	r2, r3
 800367e:	602a      	str	r2, [r5, #0]
 8003680:	e7ee      	b.n	8003660 <__swhatbuf_r+0x1c>
 8003682:	2340      	movs	r3, #64	; 0x40
 8003684:	2000      	movs	r0, #0
 8003686:	6023      	str	r3, [r4, #0]
 8003688:	b016      	add	sp, #88	; 0x58
 800368a:	bd70      	pop	{r4, r5, r6, pc}

0800368c <__smakebuf_r>:
 800368c:	898b      	ldrh	r3, [r1, #12]
 800368e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003690:	079d      	lsls	r5, r3, #30
 8003692:	4606      	mov	r6, r0
 8003694:	460c      	mov	r4, r1
 8003696:	d507      	bpl.n	80036a8 <__smakebuf_r+0x1c>
 8003698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	6123      	str	r3, [r4, #16]
 80036a0:	2301      	movs	r3, #1
 80036a2:	6163      	str	r3, [r4, #20]
 80036a4:	b002      	add	sp, #8
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	ab01      	add	r3, sp, #4
 80036aa:	466a      	mov	r2, sp
 80036ac:	f7ff ffca 	bl	8003644 <__swhatbuf_r>
 80036b0:	9900      	ldr	r1, [sp, #0]
 80036b2:	4605      	mov	r5, r0
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f87d 	bl	80037b4 <_malloc_r>
 80036ba:	b948      	cbnz	r0, 80036d0 <__smakebuf_r+0x44>
 80036bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c0:	059a      	lsls	r2, r3, #22
 80036c2:	d4ef      	bmi.n	80036a4 <__smakebuf_r+0x18>
 80036c4:	f023 0303 	bic.w	r3, r3, #3
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	81a3      	strh	r3, [r4, #12]
 80036ce:	e7e3      	b.n	8003698 <__smakebuf_r+0xc>
 80036d0:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <__smakebuf_r+0x7c>)
 80036d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	6020      	str	r0, [r4, #0]
 80036d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	9b00      	ldr	r3, [sp, #0]
 80036e0:	6120      	str	r0, [r4, #16]
 80036e2:	6163      	str	r3, [r4, #20]
 80036e4:	9b01      	ldr	r3, [sp, #4]
 80036e6:	b15b      	cbz	r3, 8003700 <__smakebuf_r+0x74>
 80036e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036ec:	4630      	mov	r0, r6
 80036ee:	f000 fcc9 	bl	8004084 <_isatty_r>
 80036f2:	b128      	cbz	r0, 8003700 <__smakebuf_r+0x74>
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	f023 0303 	bic.w	r3, r3, #3
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	81a3      	strh	r3, [r4, #12]
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	431d      	orrs	r5, r3
 8003704:	81a5      	strh	r5, [r4, #12]
 8003706:	e7cd      	b.n	80036a4 <__smakebuf_r+0x18>
 8003708:	080034f9 	.word	0x080034f9

0800370c <malloc>:
 800370c:	4b02      	ldr	r3, [pc, #8]	; (8003718 <malloc+0xc>)
 800370e:	4601      	mov	r1, r0
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	f000 b84f 	b.w	80037b4 <_malloc_r>
 8003716:	bf00      	nop
 8003718:	20000004 	.word	0x20000004

0800371c <_free_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4605      	mov	r5, r0
 8003720:	2900      	cmp	r1, #0
 8003722:	d043      	beq.n	80037ac <_free_r+0x90>
 8003724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003728:	1f0c      	subs	r4, r1, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bfb8      	it	lt
 800372e:	18e4      	addlt	r4, r4, r3
 8003730:	f000 fcd8 	bl	80040e4 <__malloc_lock>
 8003734:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <_free_r+0x94>)
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	4610      	mov	r0, r2
 800373a:	b933      	cbnz	r3, 800374a <_free_r+0x2e>
 800373c:	6063      	str	r3, [r4, #4]
 800373e:	6014      	str	r4, [r2, #0]
 8003740:	4628      	mov	r0, r5
 8003742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003746:	f000 bcce 	b.w	80040e6 <__malloc_unlock>
 800374a:	42a3      	cmp	r3, r4
 800374c:	d90b      	bls.n	8003766 <_free_r+0x4a>
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	1862      	adds	r2, r4, r1
 8003752:	4293      	cmp	r3, r2
 8003754:	bf01      	itttt	eq
 8003756:	681a      	ldreq	r2, [r3, #0]
 8003758:	685b      	ldreq	r3, [r3, #4]
 800375a:	1852      	addeq	r2, r2, r1
 800375c:	6022      	streq	r2, [r4, #0]
 800375e:	6063      	str	r3, [r4, #4]
 8003760:	6004      	str	r4, [r0, #0]
 8003762:	e7ed      	b.n	8003740 <_free_r+0x24>
 8003764:	4613      	mov	r3, r2
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	b10a      	cbz	r2, 800376e <_free_r+0x52>
 800376a:	42a2      	cmp	r2, r4
 800376c:	d9fa      	bls.n	8003764 <_free_r+0x48>
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	1858      	adds	r0, r3, r1
 8003772:	42a0      	cmp	r0, r4
 8003774:	d10b      	bne.n	800378e <_free_r+0x72>
 8003776:	6820      	ldr	r0, [r4, #0]
 8003778:	4401      	add	r1, r0
 800377a:	1858      	adds	r0, r3, r1
 800377c:	4282      	cmp	r2, r0
 800377e:	6019      	str	r1, [r3, #0]
 8003780:	d1de      	bne.n	8003740 <_free_r+0x24>
 8003782:	6810      	ldr	r0, [r2, #0]
 8003784:	6852      	ldr	r2, [r2, #4]
 8003786:	4401      	add	r1, r0
 8003788:	6019      	str	r1, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	e7d8      	b.n	8003740 <_free_r+0x24>
 800378e:	d902      	bls.n	8003796 <_free_r+0x7a>
 8003790:	230c      	movs	r3, #12
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	e7d4      	b.n	8003740 <_free_r+0x24>
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	1821      	adds	r1, r4, r0
 800379a:	428a      	cmp	r2, r1
 800379c:	bf01      	itttt	eq
 800379e:	6811      	ldreq	r1, [r2, #0]
 80037a0:	6852      	ldreq	r2, [r2, #4]
 80037a2:	1809      	addeq	r1, r1, r0
 80037a4:	6021      	streq	r1, [r4, #0]
 80037a6:	6062      	str	r2, [r4, #4]
 80037a8:	605c      	str	r4, [r3, #4]
 80037aa:	e7c9      	b.n	8003740 <_free_r+0x24>
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
 80037ae:	bf00      	nop
 80037b0:	20000088 	.word	0x20000088

080037b4 <_malloc_r>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	1ccd      	adds	r5, r1, #3
 80037b8:	f025 0503 	bic.w	r5, r5, #3
 80037bc:	3508      	adds	r5, #8
 80037be:	2d0c      	cmp	r5, #12
 80037c0:	bf38      	it	cc
 80037c2:	250c      	movcc	r5, #12
 80037c4:	2d00      	cmp	r5, #0
 80037c6:	4606      	mov	r6, r0
 80037c8:	db01      	blt.n	80037ce <_malloc_r+0x1a>
 80037ca:	42a9      	cmp	r1, r5
 80037cc:	d903      	bls.n	80037d6 <_malloc_r+0x22>
 80037ce:	230c      	movs	r3, #12
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	2000      	movs	r0, #0
 80037d4:	bd70      	pop	{r4, r5, r6, pc}
 80037d6:	f000 fc85 	bl	80040e4 <__malloc_lock>
 80037da:	4a21      	ldr	r2, [pc, #132]	; (8003860 <_malloc_r+0xac>)
 80037dc:	6814      	ldr	r4, [r2, #0]
 80037de:	4621      	mov	r1, r4
 80037e0:	b991      	cbnz	r1, 8003808 <_malloc_r+0x54>
 80037e2:	4c20      	ldr	r4, [pc, #128]	; (8003864 <_malloc_r+0xb0>)
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	b91b      	cbnz	r3, 80037f0 <_malloc_r+0x3c>
 80037e8:	4630      	mov	r0, r6
 80037ea:	f000 fb03 	bl	8003df4 <_sbrk_r>
 80037ee:	6020      	str	r0, [r4, #0]
 80037f0:	4629      	mov	r1, r5
 80037f2:	4630      	mov	r0, r6
 80037f4:	f000 fafe 	bl	8003df4 <_sbrk_r>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d124      	bne.n	8003846 <_malloc_r+0x92>
 80037fc:	230c      	movs	r3, #12
 80037fe:	4630      	mov	r0, r6
 8003800:	6033      	str	r3, [r6, #0]
 8003802:	f000 fc70 	bl	80040e6 <__malloc_unlock>
 8003806:	e7e4      	b.n	80037d2 <_malloc_r+0x1e>
 8003808:	680b      	ldr	r3, [r1, #0]
 800380a:	1b5b      	subs	r3, r3, r5
 800380c:	d418      	bmi.n	8003840 <_malloc_r+0x8c>
 800380e:	2b0b      	cmp	r3, #11
 8003810:	d90f      	bls.n	8003832 <_malloc_r+0x7e>
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	18cc      	adds	r4, r1, r3
 8003816:	50cd      	str	r5, [r1, r3]
 8003818:	4630      	mov	r0, r6
 800381a:	f000 fc64 	bl	80040e6 <__malloc_unlock>
 800381e:	f104 000b 	add.w	r0, r4, #11
 8003822:	1d23      	adds	r3, r4, #4
 8003824:	f020 0007 	bic.w	r0, r0, #7
 8003828:	1ac3      	subs	r3, r0, r3
 800382a:	d0d3      	beq.n	80037d4 <_malloc_r+0x20>
 800382c:	425a      	negs	r2, r3
 800382e:	50e2      	str	r2, [r4, r3]
 8003830:	e7d0      	b.n	80037d4 <_malloc_r+0x20>
 8003832:	684b      	ldr	r3, [r1, #4]
 8003834:	428c      	cmp	r4, r1
 8003836:	bf16      	itet	ne
 8003838:	6063      	strne	r3, [r4, #4]
 800383a:	6013      	streq	r3, [r2, #0]
 800383c:	460c      	movne	r4, r1
 800383e:	e7eb      	b.n	8003818 <_malloc_r+0x64>
 8003840:	460c      	mov	r4, r1
 8003842:	6849      	ldr	r1, [r1, #4]
 8003844:	e7cc      	b.n	80037e0 <_malloc_r+0x2c>
 8003846:	1cc4      	adds	r4, r0, #3
 8003848:	f024 0403 	bic.w	r4, r4, #3
 800384c:	42a0      	cmp	r0, r4
 800384e:	d005      	beq.n	800385c <_malloc_r+0xa8>
 8003850:	1a21      	subs	r1, r4, r0
 8003852:	4630      	mov	r0, r6
 8003854:	f000 face 	bl	8003df4 <_sbrk_r>
 8003858:	3001      	adds	r0, #1
 800385a:	d0cf      	beq.n	80037fc <_malloc_r+0x48>
 800385c:	6025      	str	r5, [r4, #0]
 800385e:	e7db      	b.n	8003818 <_malloc_r+0x64>
 8003860:	20000088 	.word	0x20000088
 8003864:	2000008c 	.word	0x2000008c

08003868 <__sfputc_r>:
 8003868:	6893      	ldr	r3, [r2, #8]
 800386a:	b410      	push	{r4}
 800386c:	3b01      	subs	r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	6093      	str	r3, [r2, #8]
 8003872:	da07      	bge.n	8003884 <__sfputc_r+0x1c>
 8003874:	6994      	ldr	r4, [r2, #24]
 8003876:	42a3      	cmp	r3, r4
 8003878:	db01      	blt.n	800387e <__sfputc_r+0x16>
 800387a:	290a      	cmp	r1, #10
 800387c:	d102      	bne.n	8003884 <__sfputc_r+0x1c>
 800387e:	bc10      	pop	{r4}
 8003880:	f000 bb0c 	b.w	8003e9c <__swbuf_r>
 8003884:	6813      	ldr	r3, [r2, #0]
 8003886:	1c58      	adds	r0, r3, #1
 8003888:	6010      	str	r0, [r2, #0]
 800388a:	7019      	strb	r1, [r3, #0]
 800388c:	4608      	mov	r0, r1
 800388e:	bc10      	pop	{r4}
 8003890:	4770      	bx	lr

08003892 <__sfputs_r>:
 8003892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003894:	4606      	mov	r6, r0
 8003896:	460f      	mov	r7, r1
 8003898:	4614      	mov	r4, r2
 800389a:	18d5      	adds	r5, r2, r3
 800389c:	42ac      	cmp	r4, r5
 800389e:	d101      	bne.n	80038a4 <__sfputs_r+0x12>
 80038a0:	2000      	movs	r0, #0
 80038a2:	e007      	b.n	80038b4 <__sfputs_r+0x22>
 80038a4:	463a      	mov	r2, r7
 80038a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff ffdc 	bl	8003868 <__sfputc_r>
 80038b0:	1c43      	adds	r3, r0, #1
 80038b2:	d1f3      	bne.n	800389c <__sfputs_r+0xa>
 80038b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038b8 <_vfiprintf_r>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	460c      	mov	r4, r1
 80038be:	b09d      	sub	sp, #116	; 0x74
 80038c0:	4617      	mov	r7, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	4606      	mov	r6, r0
 80038c6:	b118      	cbz	r0, 80038d0 <_vfiprintf_r+0x18>
 80038c8:	6983      	ldr	r3, [r0, #24]
 80038ca:	b90b      	cbnz	r3, 80038d0 <_vfiprintf_r+0x18>
 80038cc:	f7ff fe30 	bl	8003530 <__sinit>
 80038d0:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <_vfiprintf_r+0x20c>)
 80038d2:	429c      	cmp	r4, r3
 80038d4:	d158      	bne.n	8003988 <_vfiprintf_r+0xd0>
 80038d6:	6874      	ldr	r4, [r6, #4]
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	0718      	lsls	r0, r3, #28
 80038dc:	d55e      	bpl.n	800399c <_vfiprintf_r+0xe4>
 80038de:	6923      	ldr	r3, [r4, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d05b      	beq.n	800399c <_vfiprintf_r+0xe4>
 80038e4:	2300      	movs	r3, #0
 80038e6:	9309      	str	r3, [sp, #36]	; 0x24
 80038e8:	2320      	movs	r3, #32
 80038ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038ee:	2330      	movs	r3, #48	; 0x30
 80038f0:	f04f 0b01 	mov.w	fp, #1
 80038f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f8:	9503      	str	r5, [sp, #12]
 80038fa:	46b8      	mov	r8, r7
 80038fc:	4645      	mov	r5, r8
 80038fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003902:	b10b      	cbz	r3, 8003908 <_vfiprintf_r+0x50>
 8003904:	2b25      	cmp	r3, #37	; 0x25
 8003906:	d154      	bne.n	80039b2 <_vfiprintf_r+0xfa>
 8003908:	ebb8 0a07 	subs.w	sl, r8, r7
 800390c:	d00b      	beq.n	8003926 <_vfiprintf_r+0x6e>
 800390e:	4653      	mov	r3, sl
 8003910:	463a      	mov	r2, r7
 8003912:	4621      	mov	r1, r4
 8003914:	4630      	mov	r0, r6
 8003916:	f7ff ffbc 	bl	8003892 <__sfputs_r>
 800391a:	3001      	adds	r0, #1
 800391c:	f000 80c2 	beq.w	8003aa4 <_vfiprintf_r+0x1ec>
 8003920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003922:	4453      	add	r3, sl
 8003924:	9309      	str	r3, [sp, #36]	; 0x24
 8003926:	f898 3000 	ldrb.w	r3, [r8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80ba 	beq.w	8003aa4 <_vfiprintf_r+0x1ec>
 8003930:	2300      	movs	r3, #0
 8003932:	f04f 32ff 	mov.w	r2, #4294967295
 8003936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	9307      	str	r3, [sp, #28]
 800393e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003942:	931a      	str	r3, [sp, #104]	; 0x68
 8003944:	46a8      	mov	r8, r5
 8003946:	2205      	movs	r2, #5
 8003948:	f818 1b01 	ldrb.w	r1, [r8], #1
 800394c:	485e      	ldr	r0, [pc, #376]	; (8003ac8 <_vfiprintf_r+0x210>)
 800394e:	f000 fbbb 	bl	80040c8 <memchr>
 8003952:	9b04      	ldr	r3, [sp, #16]
 8003954:	bb78      	cbnz	r0, 80039b6 <_vfiprintf_r+0xfe>
 8003956:	06d9      	lsls	r1, r3, #27
 8003958:	bf44      	itt	mi
 800395a:	2220      	movmi	r2, #32
 800395c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003960:	071a      	lsls	r2, r3, #28
 8003962:	bf44      	itt	mi
 8003964:	222b      	movmi	r2, #43	; 0x2b
 8003966:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800396a:	782a      	ldrb	r2, [r5, #0]
 800396c:	2a2a      	cmp	r2, #42	; 0x2a
 800396e:	d02a      	beq.n	80039c6 <_vfiprintf_r+0x10e>
 8003970:	46a8      	mov	r8, r5
 8003972:	2000      	movs	r0, #0
 8003974:	250a      	movs	r5, #10
 8003976:	9a07      	ldr	r2, [sp, #28]
 8003978:	4641      	mov	r1, r8
 800397a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800397e:	3b30      	subs	r3, #48	; 0x30
 8003980:	2b09      	cmp	r3, #9
 8003982:	d969      	bls.n	8003a58 <_vfiprintf_r+0x1a0>
 8003984:	b360      	cbz	r0, 80039e0 <_vfiprintf_r+0x128>
 8003986:	e024      	b.n	80039d2 <_vfiprintf_r+0x11a>
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <_vfiprintf_r+0x214>)
 800398a:	429c      	cmp	r4, r3
 800398c:	d101      	bne.n	8003992 <_vfiprintf_r+0xda>
 800398e:	68b4      	ldr	r4, [r6, #8]
 8003990:	e7a2      	b.n	80038d8 <_vfiprintf_r+0x20>
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <_vfiprintf_r+0x218>)
 8003994:	429c      	cmp	r4, r3
 8003996:	bf08      	it	eq
 8003998:	68f4      	ldreq	r4, [r6, #12]
 800399a:	e79d      	b.n	80038d8 <_vfiprintf_r+0x20>
 800399c:	4621      	mov	r1, r4
 800399e:	4630      	mov	r0, r6
 80039a0:	f000 fae0 	bl	8003f64 <__swsetup_r>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d09d      	beq.n	80038e4 <_vfiprintf_r+0x2c>
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	b01d      	add	sp, #116	; 0x74
 80039ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b2:	46a8      	mov	r8, r5
 80039b4:	e7a2      	b.n	80038fc <_vfiprintf_r+0x44>
 80039b6:	4a44      	ldr	r2, [pc, #272]	; (8003ac8 <_vfiprintf_r+0x210>)
 80039b8:	4645      	mov	r5, r8
 80039ba:	1a80      	subs	r0, r0, r2
 80039bc:	fa0b f000 	lsl.w	r0, fp, r0
 80039c0:	4318      	orrs	r0, r3
 80039c2:	9004      	str	r0, [sp, #16]
 80039c4:	e7be      	b.n	8003944 <_vfiprintf_r+0x8c>
 80039c6:	9a03      	ldr	r2, [sp, #12]
 80039c8:	1d11      	adds	r1, r2, #4
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	9103      	str	r1, [sp, #12]
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	db01      	blt.n	80039d6 <_vfiprintf_r+0x11e>
 80039d2:	9207      	str	r2, [sp, #28]
 80039d4:	e004      	b.n	80039e0 <_vfiprintf_r+0x128>
 80039d6:	4252      	negs	r2, r2
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	9207      	str	r2, [sp, #28]
 80039de:	9304      	str	r3, [sp, #16]
 80039e0:	f898 3000 	ldrb.w	r3, [r8]
 80039e4:	2b2e      	cmp	r3, #46	; 0x2e
 80039e6:	d10e      	bne.n	8003a06 <_vfiprintf_r+0x14e>
 80039e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80039ec:	2b2a      	cmp	r3, #42	; 0x2a
 80039ee:	d138      	bne.n	8003a62 <_vfiprintf_r+0x1aa>
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	f108 0802 	add.w	r8, r8, #2
 80039f6:	1d1a      	adds	r2, r3, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	9203      	str	r2, [sp, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bfb8      	it	lt
 8003a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a04:	9305      	str	r3, [sp, #20]
 8003a06:	4d33      	ldr	r5, [pc, #204]	; (8003ad4 <_vfiprintf_r+0x21c>)
 8003a08:	2203      	movs	r2, #3
 8003a0a:	f898 1000 	ldrb.w	r1, [r8]
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f000 fb5a 	bl	80040c8 <memchr>
 8003a14:	b140      	cbz	r0, 8003a28 <_vfiprintf_r+0x170>
 8003a16:	2340      	movs	r3, #64	; 0x40
 8003a18:	1b40      	subs	r0, r0, r5
 8003a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a1e:	9b04      	ldr	r3, [sp, #16]
 8003a20:	f108 0801 	add.w	r8, r8, #1
 8003a24:	4303      	orrs	r3, r0
 8003a26:	9304      	str	r3, [sp, #16]
 8003a28:	f898 1000 	ldrb.w	r1, [r8]
 8003a2c:	2206      	movs	r2, #6
 8003a2e:	482a      	ldr	r0, [pc, #168]	; (8003ad8 <_vfiprintf_r+0x220>)
 8003a30:	f108 0701 	add.w	r7, r8, #1
 8003a34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a38:	f000 fb46 	bl	80040c8 <memchr>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d037      	beq.n	8003ab0 <_vfiprintf_r+0x1f8>
 8003a40:	4b26      	ldr	r3, [pc, #152]	; (8003adc <_vfiprintf_r+0x224>)
 8003a42:	bb1b      	cbnz	r3, 8003a8c <_vfiprintf_r+0x1d4>
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	3307      	adds	r3, #7
 8003a48:	f023 0307 	bic.w	r3, r3, #7
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	9303      	str	r3, [sp, #12]
 8003a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a52:	444b      	add	r3, r9
 8003a54:	9309      	str	r3, [sp, #36]	; 0x24
 8003a56:	e750      	b.n	80038fa <_vfiprintf_r+0x42>
 8003a58:	fb05 3202 	mla	r2, r5, r2, r3
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	4688      	mov	r8, r1
 8003a60:	e78a      	b.n	8003978 <_vfiprintf_r+0xc0>
 8003a62:	2300      	movs	r3, #0
 8003a64:	250a      	movs	r5, #10
 8003a66:	4619      	mov	r1, r3
 8003a68:	f108 0801 	add.w	r8, r8, #1
 8003a6c:	9305      	str	r3, [sp, #20]
 8003a6e:	4640      	mov	r0, r8
 8003a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a74:	3a30      	subs	r2, #48	; 0x30
 8003a76:	2a09      	cmp	r2, #9
 8003a78:	d903      	bls.n	8003a82 <_vfiprintf_r+0x1ca>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0c3      	beq.n	8003a06 <_vfiprintf_r+0x14e>
 8003a7e:	9105      	str	r1, [sp, #20]
 8003a80:	e7c1      	b.n	8003a06 <_vfiprintf_r+0x14e>
 8003a82:	fb05 2101 	mla	r1, r5, r1, r2
 8003a86:	2301      	movs	r3, #1
 8003a88:	4680      	mov	r8, r0
 8003a8a:	e7f0      	b.n	8003a6e <_vfiprintf_r+0x1b6>
 8003a8c:	ab03      	add	r3, sp, #12
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4622      	mov	r2, r4
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <_vfiprintf_r+0x228>)
 8003a94:	a904      	add	r1, sp, #16
 8003a96:	4630      	mov	r0, r6
 8003a98:	f3af 8000 	nop.w
 8003a9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003aa0:	4681      	mov	r9, r0
 8003aa2:	d1d5      	bne.n	8003a50 <_vfiprintf_r+0x198>
 8003aa4:	89a3      	ldrh	r3, [r4, #12]
 8003aa6:	065b      	lsls	r3, r3, #25
 8003aa8:	f53f af7e 	bmi.w	80039a8 <_vfiprintf_r+0xf0>
 8003aac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aae:	e77d      	b.n	80039ac <_vfiprintf_r+0xf4>
 8003ab0:	ab03      	add	r3, sp, #12
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <_vfiprintf_r+0x228>)
 8003ab8:	a904      	add	r1, sp, #16
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 f888 	bl	8003bd0 <_printf_i>
 8003ac0:	e7ec      	b.n	8003a9c <_vfiprintf_r+0x1e4>
 8003ac2:	bf00      	nop
 8003ac4:	08004190 	.word	0x08004190
 8003ac8:	080041d0 	.word	0x080041d0
 8003acc:	080041b0 	.word	0x080041b0
 8003ad0:	08004170 	.word	0x08004170
 8003ad4:	080041d6 	.word	0x080041d6
 8003ad8:	080041da 	.word	0x080041da
 8003adc:	00000000 	.word	0x00000000
 8003ae0:	08003893 	.word	0x08003893

08003ae4 <_printf_common>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	4691      	mov	r9, r2
 8003aea:	461f      	mov	r7, r3
 8003aec:	688a      	ldr	r2, [r1, #8]
 8003aee:	690b      	ldr	r3, [r1, #16]
 8003af0:	4606      	mov	r6, r0
 8003af2:	4293      	cmp	r3, r2
 8003af4:	bfb8      	it	lt
 8003af6:	4613      	movlt	r3, r2
 8003af8:	f8c9 3000 	str.w	r3, [r9]
 8003afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b00:	460c      	mov	r4, r1
 8003b02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b06:	b112      	cbz	r2, 8003b0e <_printf_common+0x2a>
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f8c9 3000 	str.w	r3, [r9]
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0699      	lsls	r1, r3, #26
 8003b12:	bf42      	ittt	mi
 8003b14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b18:	3302      	addmi	r3, #2
 8003b1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	f015 0506 	ands.w	r5, r5, #6
 8003b24:	d107      	bne.n	8003b36 <_printf_common+0x52>
 8003b26:	f104 0a19 	add.w	sl, r4, #25
 8003b2a:	68e3      	ldr	r3, [r4, #12]
 8003b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	42ab      	cmp	r3, r5
 8003b34:	dc29      	bgt.n	8003b8a <_printf_common+0xa6>
 8003b36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	3300      	adds	r3, #0
 8003b3e:	bf18      	it	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	0692      	lsls	r2, r2, #26
 8003b44:	d42e      	bmi.n	8003ba4 <_printf_common+0xc0>
 8003b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b4a:	4639      	mov	r1, r7
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	47c0      	blx	r8
 8003b50:	3001      	adds	r0, #1
 8003b52:	d021      	beq.n	8003b98 <_printf_common+0xb4>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	68e5      	ldr	r5, [r4, #12]
 8003b58:	f003 0306 	and.w	r3, r3, #6
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	bf18      	it	ne
 8003b60:	2500      	movne	r5, #0
 8003b62:	f8d9 2000 	ldr.w	r2, [r9]
 8003b66:	f04f 0900 	mov.w	r9, #0
 8003b6a:	bf08      	it	eq
 8003b6c:	1aad      	subeq	r5, r5, r2
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	6922      	ldr	r2, [r4, #16]
 8003b72:	bf08      	it	eq
 8003b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bfc4      	itt	gt
 8003b7c:	1a9b      	subgt	r3, r3, r2
 8003b7e:	18ed      	addgt	r5, r5, r3
 8003b80:	341a      	adds	r4, #26
 8003b82:	454d      	cmp	r5, r9
 8003b84:	d11a      	bne.n	8003bbc <_printf_common+0xd8>
 8003b86:	2000      	movs	r0, #0
 8003b88:	e008      	b.n	8003b9c <_printf_common+0xb8>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	4652      	mov	r2, sl
 8003b8e:	4639      	mov	r1, r7
 8003b90:	4630      	mov	r0, r6
 8003b92:	47c0      	blx	r8
 8003b94:	3001      	adds	r0, #1
 8003b96:	d103      	bne.n	8003ba0 <_printf_common+0xbc>
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba0:	3501      	adds	r5, #1
 8003ba2:	e7c2      	b.n	8003b2a <_printf_common+0x46>
 8003ba4:	2030      	movs	r0, #48	; 0x30
 8003ba6:	18e1      	adds	r1, r4, r3
 8003ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb2:	4422      	add	r2, r4
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bba:	e7c4      	b.n	8003b46 <_printf_common+0x62>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	4639      	mov	r1, r7
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	47c0      	blx	r8
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d0e6      	beq.n	8003b98 <_printf_common+0xb4>
 8003bca:	f109 0901 	add.w	r9, r9, #1
 8003bce:	e7d8      	b.n	8003b82 <_printf_common+0x9e>

08003bd0 <_printf_i>:
 8003bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003bd8:	460c      	mov	r4, r1
 8003bda:	7e09      	ldrb	r1, [r1, #24]
 8003bdc:	b085      	sub	sp, #20
 8003bde:	296e      	cmp	r1, #110	; 0x6e
 8003be0:	4617      	mov	r7, r2
 8003be2:	4606      	mov	r6, r0
 8003be4:	4698      	mov	r8, r3
 8003be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003be8:	f000 80b3 	beq.w	8003d52 <_printf_i+0x182>
 8003bec:	d822      	bhi.n	8003c34 <_printf_i+0x64>
 8003bee:	2963      	cmp	r1, #99	; 0x63
 8003bf0:	d036      	beq.n	8003c60 <_printf_i+0x90>
 8003bf2:	d80a      	bhi.n	8003c0a <_printf_i+0x3a>
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	f000 80b9 	beq.w	8003d6c <_printf_i+0x19c>
 8003bfa:	2958      	cmp	r1, #88	; 0x58
 8003bfc:	f000 8083 	beq.w	8003d06 <_printf_i+0x136>
 8003c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c08:	e032      	b.n	8003c70 <_printf_i+0xa0>
 8003c0a:	2964      	cmp	r1, #100	; 0x64
 8003c0c:	d001      	beq.n	8003c12 <_printf_i+0x42>
 8003c0e:	2969      	cmp	r1, #105	; 0x69
 8003c10:	d1f6      	bne.n	8003c00 <_printf_i+0x30>
 8003c12:	6820      	ldr	r0, [r4, #0]
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	0605      	lsls	r5, r0, #24
 8003c18:	f103 0104 	add.w	r1, r3, #4
 8003c1c:	d52a      	bpl.n	8003c74 <_printf_i+0xa4>
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6011      	str	r1, [r2, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	da03      	bge.n	8003c2e <_printf_i+0x5e>
 8003c26:	222d      	movs	r2, #45	; 0x2d
 8003c28:	425b      	negs	r3, r3
 8003c2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c2e:	486f      	ldr	r0, [pc, #444]	; (8003dec <_printf_i+0x21c>)
 8003c30:	220a      	movs	r2, #10
 8003c32:	e039      	b.n	8003ca8 <_printf_i+0xd8>
 8003c34:	2973      	cmp	r1, #115	; 0x73
 8003c36:	f000 809d 	beq.w	8003d74 <_printf_i+0x1a4>
 8003c3a:	d808      	bhi.n	8003c4e <_printf_i+0x7e>
 8003c3c:	296f      	cmp	r1, #111	; 0x6f
 8003c3e:	d020      	beq.n	8003c82 <_printf_i+0xb2>
 8003c40:	2970      	cmp	r1, #112	; 0x70
 8003c42:	d1dd      	bne.n	8003c00 <_printf_i+0x30>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f043 0320 	orr.w	r3, r3, #32
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	e003      	b.n	8003c56 <_printf_i+0x86>
 8003c4e:	2975      	cmp	r1, #117	; 0x75
 8003c50:	d017      	beq.n	8003c82 <_printf_i+0xb2>
 8003c52:	2978      	cmp	r1, #120	; 0x78
 8003c54:	d1d4      	bne.n	8003c00 <_printf_i+0x30>
 8003c56:	2378      	movs	r3, #120	; 0x78
 8003c58:	4865      	ldr	r0, [pc, #404]	; (8003df0 <_printf_i+0x220>)
 8003c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c5e:	e055      	b.n	8003d0c <_printf_i+0x13c>
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c66:	1d19      	adds	r1, r3, #4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6011      	str	r1, [r2, #0]
 8003c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c70:	2301      	movs	r3, #1
 8003c72:	e08c      	b.n	8003d8e <_printf_i+0x1be>
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c7a:	6011      	str	r1, [r2, #0]
 8003c7c:	bf18      	it	ne
 8003c7e:	b21b      	sxthne	r3, r3
 8003c80:	e7cf      	b.n	8003c22 <_printf_i+0x52>
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	6825      	ldr	r5, [r4, #0]
 8003c86:	1d18      	adds	r0, r3, #4
 8003c88:	6010      	str	r0, [r2, #0]
 8003c8a:	0628      	lsls	r0, r5, #24
 8003c8c:	d501      	bpl.n	8003c92 <_printf_i+0xc2>
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	e002      	b.n	8003c98 <_printf_i+0xc8>
 8003c92:	0668      	lsls	r0, r5, #25
 8003c94:	d5fb      	bpl.n	8003c8e <_printf_i+0xbe>
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	296f      	cmp	r1, #111	; 0x6f
 8003c9a:	bf14      	ite	ne
 8003c9c:	220a      	movne	r2, #10
 8003c9e:	2208      	moveq	r2, #8
 8003ca0:	4852      	ldr	r0, [pc, #328]	; (8003dec <_printf_i+0x21c>)
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ca8:	6865      	ldr	r5, [r4, #4]
 8003caa:	2d00      	cmp	r5, #0
 8003cac:	60a5      	str	r5, [r4, #8]
 8003cae:	f2c0 8095 	blt.w	8003ddc <_printf_i+0x20c>
 8003cb2:	6821      	ldr	r1, [r4, #0]
 8003cb4:	f021 0104 	bic.w	r1, r1, #4
 8003cb8:	6021      	str	r1, [r4, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d13d      	bne.n	8003d3a <_printf_i+0x16a>
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	f040 808e 	bne.w	8003de0 <_printf_i+0x210>
 8003cc4:	4665      	mov	r5, ip
 8003cc6:	2a08      	cmp	r2, #8
 8003cc8:	d10b      	bne.n	8003ce2 <_printf_i+0x112>
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	07db      	lsls	r3, r3, #31
 8003cce:	d508      	bpl.n	8003ce2 <_printf_i+0x112>
 8003cd0:	6923      	ldr	r3, [r4, #16]
 8003cd2:	6862      	ldr	r2, [r4, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	bfde      	ittt	le
 8003cd8:	2330      	movle	r3, #48	; 0x30
 8003cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ce2:	ebac 0305 	sub.w	r3, ip, r5
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	f8cd 8000 	str.w	r8, [sp]
 8003cec:	463b      	mov	r3, r7
 8003cee:	aa03      	add	r2, sp, #12
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f7ff fef6 	bl	8003ae4 <_printf_common>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d14d      	bne.n	8003d98 <_printf_i+0x1c8>
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	b005      	add	sp, #20
 8003d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d06:	4839      	ldr	r0, [pc, #228]	; (8003dec <_printf_i+0x21c>)
 8003d08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d0c:	6813      	ldr	r3, [r2, #0]
 8003d0e:	6821      	ldr	r1, [r4, #0]
 8003d10:	1d1d      	adds	r5, r3, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6015      	str	r5, [r2, #0]
 8003d16:	060a      	lsls	r2, r1, #24
 8003d18:	d50b      	bpl.n	8003d32 <_printf_i+0x162>
 8003d1a:	07ca      	lsls	r2, r1, #31
 8003d1c:	bf44      	itt	mi
 8003d1e:	f041 0120 	orrmi.w	r1, r1, #32
 8003d22:	6021      	strmi	r1, [r4, #0]
 8003d24:	b91b      	cbnz	r3, 8003d2e <_printf_i+0x15e>
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	f022 0220 	bic.w	r2, r2, #32
 8003d2c:	6022      	str	r2, [r4, #0]
 8003d2e:	2210      	movs	r2, #16
 8003d30:	e7b7      	b.n	8003ca2 <_printf_i+0xd2>
 8003d32:	064d      	lsls	r5, r1, #25
 8003d34:	bf48      	it	mi
 8003d36:	b29b      	uxthmi	r3, r3
 8003d38:	e7ef      	b.n	8003d1a <_printf_i+0x14a>
 8003d3a:	4665      	mov	r5, ip
 8003d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d40:	fb02 3311 	mls	r3, r2, r1, r3
 8003d44:	5cc3      	ldrb	r3, [r0, r3]
 8003d46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	d1f5      	bne.n	8003d3c <_printf_i+0x16c>
 8003d50:	e7b9      	b.n	8003cc6 <_printf_i+0xf6>
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	6825      	ldr	r5, [r4, #0]
 8003d56:	1d18      	adds	r0, r3, #4
 8003d58:	6961      	ldr	r1, [r4, #20]
 8003d5a:	6010      	str	r0, [r2, #0]
 8003d5c:	0628      	lsls	r0, r5, #24
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	d501      	bpl.n	8003d66 <_printf_i+0x196>
 8003d62:	6019      	str	r1, [r3, #0]
 8003d64:	e002      	b.n	8003d6c <_printf_i+0x19c>
 8003d66:	066a      	lsls	r2, r5, #25
 8003d68:	d5fb      	bpl.n	8003d62 <_printf_i+0x192>
 8003d6a:	8019      	strh	r1, [r3, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4665      	mov	r5, ip
 8003d70:	6123      	str	r3, [r4, #16]
 8003d72:	e7b9      	b.n	8003ce8 <_printf_i+0x118>
 8003d74:	6813      	ldr	r3, [r2, #0]
 8003d76:	1d19      	adds	r1, r3, #4
 8003d78:	6011      	str	r1, [r2, #0]
 8003d7a:	681d      	ldr	r5, [r3, #0]
 8003d7c:	6862      	ldr	r2, [r4, #4]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 f9a1 	bl	80040c8 <memchr>
 8003d86:	b108      	cbz	r0, 8003d8c <_printf_i+0x1bc>
 8003d88:	1b40      	subs	r0, r0, r5
 8003d8a:	6060      	str	r0, [r4, #4]
 8003d8c:	6863      	ldr	r3, [r4, #4]
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	2300      	movs	r3, #0
 8003d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d96:	e7a7      	b.n	8003ce8 <_printf_i+0x118>
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	462a      	mov	r2, r5
 8003d9c:	4639      	mov	r1, r7
 8003d9e:	4630      	mov	r0, r6
 8003da0:	47c0      	blx	r8
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0aa      	beq.n	8003cfc <_printf_i+0x12c>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	079b      	lsls	r3, r3, #30
 8003daa:	d413      	bmi.n	8003dd4 <_printf_i+0x204>
 8003dac:	68e0      	ldr	r0, [r4, #12]
 8003dae:	9b03      	ldr	r3, [sp, #12]
 8003db0:	4298      	cmp	r0, r3
 8003db2:	bfb8      	it	lt
 8003db4:	4618      	movlt	r0, r3
 8003db6:	e7a3      	b.n	8003d00 <_printf_i+0x130>
 8003db8:	2301      	movs	r3, #1
 8003dba:	464a      	mov	r2, r9
 8003dbc:	4639      	mov	r1, r7
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	47c0      	blx	r8
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d09a      	beq.n	8003cfc <_printf_i+0x12c>
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	68e3      	ldr	r3, [r4, #12]
 8003dca:	9a03      	ldr	r2, [sp, #12]
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	42ab      	cmp	r3, r5
 8003dd0:	dcf2      	bgt.n	8003db8 <_printf_i+0x1e8>
 8003dd2:	e7eb      	b.n	8003dac <_printf_i+0x1dc>
 8003dd4:	2500      	movs	r5, #0
 8003dd6:	f104 0919 	add.w	r9, r4, #25
 8003dda:	e7f5      	b.n	8003dc8 <_printf_i+0x1f8>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1ac      	bne.n	8003d3a <_printf_i+0x16a>
 8003de0:	7803      	ldrb	r3, [r0, #0]
 8003de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dea:	e76c      	b.n	8003cc6 <_printf_i+0xf6>
 8003dec:	080041e1 	.word	0x080041e1
 8003df0:	080041f2 	.word	0x080041f2

08003df4 <_sbrk_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	2300      	movs	r3, #0
 8003df8:	4c05      	ldr	r4, [pc, #20]	; (8003e10 <_sbrk_r+0x1c>)
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	6023      	str	r3, [r4, #0]
 8003e00:	f7fd ffe8 	bl	8001dd4 <_sbrk>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_sbrk_r+0x1a>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_sbrk_r+0x1a>
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	200000a0 	.word	0x200000a0

08003e14 <__sread>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	460c      	mov	r4, r1
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	f000 f964 	bl	80040e8 <_read_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	bfab      	itete	ge
 8003e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e26:	89a3      	ldrhlt	r3, [r4, #12]
 8003e28:	181b      	addge	r3, r3, r0
 8003e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e2e:	bfac      	ite	ge
 8003e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e32:	81a3      	strhlt	r3, [r4, #12]
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <__swrite>:
 8003e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	461f      	mov	r7, r3
 8003e3c:	898b      	ldrh	r3, [r1, #12]
 8003e3e:	4605      	mov	r5, r0
 8003e40:	05db      	lsls	r3, r3, #23
 8003e42:	460c      	mov	r4, r1
 8003e44:	4616      	mov	r6, r2
 8003e46:	d505      	bpl.n	8003e54 <__swrite+0x1e>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	f000 f928 	bl	80040a4 <_lseek_r>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	4632      	mov	r2, r6
 8003e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e62:	463b      	mov	r3, r7
 8003e64:	4628      	mov	r0, r5
 8003e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6a:	f000 b869 	b.w	8003f40 <_write_r>

08003e6e <__sseek>:
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	460c      	mov	r4, r1
 8003e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e76:	f000 f915 	bl	80040a4 <_lseek_r>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	bf15      	itete	ne
 8003e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e8a:	81a3      	strheq	r3, [r4, #12]
 8003e8c:	bf18      	it	ne
 8003e8e:	81a3      	strhne	r3, [r4, #12]
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <__sclose>:
 8003e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e96:	f000 b8d3 	b.w	8004040 <_close_r>
	...

08003e9c <__swbuf_r>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	460e      	mov	r6, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	b118      	cbz	r0, 8003eae <__swbuf_r+0x12>
 8003ea6:	6983      	ldr	r3, [r0, #24]
 8003ea8:	b90b      	cbnz	r3, 8003eae <__swbuf_r+0x12>
 8003eaa:	f7ff fb41 	bl	8003530 <__sinit>
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <__swbuf_r+0x98>)
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	d12a      	bne.n	8003f0a <__swbuf_r+0x6e>
 8003eb4:	686c      	ldr	r4, [r5, #4]
 8003eb6:	69a3      	ldr	r3, [r4, #24]
 8003eb8:	60a3      	str	r3, [r4, #8]
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	071a      	lsls	r2, r3, #28
 8003ebe:	d52e      	bpl.n	8003f1e <__swbuf_r+0x82>
 8003ec0:	6923      	ldr	r3, [r4, #16]
 8003ec2:	b363      	cbz	r3, 8003f1e <__swbuf_r+0x82>
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	6820      	ldr	r0, [r4, #0]
 8003ec8:	b2f6      	uxtb	r6, r6
 8003eca:	1ac0      	subs	r0, r0, r3
 8003ecc:	6963      	ldr	r3, [r4, #20]
 8003ece:	4637      	mov	r7, r6
 8003ed0:	4283      	cmp	r3, r0
 8003ed2:	dc04      	bgt.n	8003ede <__swbuf_r+0x42>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f7ff fac0 	bl	800345c <_fflush_r>
 8003edc:	bb28      	cbnz	r0, 8003f2a <__swbuf_r+0x8e>
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	60a3      	str	r3, [r4, #8]
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	6022      	str	r2, [r4, #0]
 8003eec:	701e      	strb	r6, [r3, #0]
 8003eee:	6963      	ldr	r3, [r4, #20]
 8003ef0:	4283      	cmp	r3, r0
 8003ef2:	d004      	beq.n	8003efe <__swbuf_r+0x62>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	07db      	lsls	r3, r3, #31
 8003ef8:	d519      	bpl.n	8003f2e <__swbuf_r+0x92>
 8003efa:	2e0a      	cmp	r6, #10
 8003efc:	d117      	bne.n	8003f2e <__swbuf_r+0x92>
 8003efe:	4621      	mov	r1, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f7ff faab 	bl	800345c <_fflush_r>
 8003f06:	b190      	cbz	r0, 8003f2e <__swbuf_r+0x92>
 8003f08:	e00f      	b.n	8003f2a <__swbuf_r+0x8e>
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <__swbuf_r+0x9c>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d101      	bne.n	8003f14 <__swbuf_r+0x78>
 8003f10:	68ac      	ldr	r4, [r5, #8]
 8003f12:	e7d0      	b.n	8003eb6 <__swbuf_r+0x1a>
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <__swbuf_r+0xa0>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	bf08      	it	eq
 8003f1a:	68ec      	ldreq	r4, [r5, #12]
 8003f1c:	e7cb      	b.n	8003eb6 <__swbuf_r+0x1a>
 8003f1e:	4621      	mov	r1, r4
 8003f20:	4628      	mov	r0, r5
 8003f22:	f000 f81f 	bl	8003f64 <__swsetup_r>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d0cc      	beq.n	8003ec4 <__swbuf_r+0x28>
 8003f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8003f2e:	4638      	mov	r0, r7
 8003f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08004190 	.word	0x08004190
 8003f38:	080041b0 	.word	0x080041b0
 8003f3c:	08004170 	.word	0x08004170

08003f40 <_write_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4605      	mov	r5, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4c05      	ldr	r4, [pc, #20]	; (8003f60 <_write_r+0x20>)
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7fd fef4 	bl	8001d3c <_write>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_write_r+0x1e>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_write_r+0x1e>
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	200000a0 	.word	0x200000a0

08003f64 <__swsetup_r>:
 8003f64:	4b32      	ldr	r3, [pc, #200]	; (8004030 <__swsetup_r+0xcc>)
 8003f66:	b570      	push	{r4, r5, r6, lr}
 8003f68:	681d      	ldr	r5, [r3, #0]
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	460c      	mov	r4, r1
 8003f6e:	b125      	cbz	r5, 8003f7a <__swsetup_r+0x16>
 8003f70:	69ab      	ldr	r3, [r5, #24]
 8003f72:	b913      	cbnz	r3, 8003f7a <__swsetup_r+0x16>
 8003f74:	4628      	mov	r0, r5
 8003f76:	f7ff fadb 	bl	8003530 <__sinit>
 8003f7a:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <__swsetup_r+0xd0>)
 8003f7c:	429c      	cmp	r4, r3
 8003f7e:	d10f      	bne.n	8003fa0 <__swsetup_r+0x3c>
 8003f80:	686c      	ldr	r4, [r5, #4]
 8003f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	0715      	lsls	r5, r2, #28
 8003f8a:	d42c      	bmi.n	8003fe6 <__swsetup_r+0x82>
 8003f8c:	06d0      	lsls	r0, r2, #27
 8003f8e:	d411      	bmi.n	8003fb4 <__swsetup_r+0x50>
 8003f90:	2209      	movs	r2, #9
 8003f92:	6032      	str	r2, [r6, #0]
 8003f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9e:	e03e      	b.n	800401e <__swsetup_r+0xba>
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <__swsetup_r+0xd4>)
 8003fa2:	429c      	cmp	r4, r3
 8003fa4:	d101      	bne.n	8003faa <__swsetup_r+0x46>
 8003fa6:	68ac      	ldr	r4, [r5, #8]
 8003fa8:	e7eb      	b.n	8003f82 <__swsetup_r+0x1e>
 8003faa:	4b24      	ldr	r3, [pc, #144]	; (800403c <__swsetup_r+0xd8>)
 8003fac:	429c      	cmp	r4, r3
 8003fae:	bf08      	it	eq
 8003fb0:	68ec      	ldreq	r4, [r5, #12]
 8003fb2:	e7e6      	b.n	8003f82 <__swsetup_r+0x1e>
 8003fb4:	0751      	lsls	r1, r2, #29
 8003fb6:	d512      	bpl.n	8003fde <__swsetup_r+0x7a>
 8003fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fba:	b141      	cbz	r1, 8003fce <__swsetup_r+0x6a>
 8003fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fc0:	4299      	cmp	r1, r3
 8003fc2:	d002      	beq.n	8003fca <__swsetup_r+0x66>
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f7ff fba9 	bl	800371c <_free_r>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6363      	str	r3, [r4, #52]	; 0x34
 8003fce:	89a3      	ldrh	r3, [r4, #12]
 8003fd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fd4:	81a3      	strh	r3, [r4, #12]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6063      	str	r3, [r4, #4]
 8003fda:	6923      	ldr	r3, [r4, #16]
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	89a3      	ldrh	r3, [r4, #12]
 8003fe0:	f043 0308 	orr.w	r3, r3, #8
 8003fe4:	81a3      	strh	r3, [r4, #12]
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	b94b      	cbnz	r3, 8003ffe <__swsetup_r+0x9a>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d003      	beq.n	8003ffe <__swsetup_r+0x9a>
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f7ff fb47 	bl	800368c <__smakebuf_r>
 8003ffe:	89a2      	ldrh	r2, [r4, #12]
 8004000:	f012 0301 	ands.w	r3, r2, #1
 8004004:	d00c      	beq.n	8004020 <__swsetup_r+0xbc>
 8004006:	2300      	movs	r3, #0
 8004008:	60a3      	str	r3, [r4, #8]
 800400a:	6963      	ldr	r3, [r4, #20]
 800400c:	425b      	negs	r3, r3
 800400e:	61a3      	str	r3, [r4, #24]
 8004010:	6923      	ldr	r3, [r4, #16]
 8004012:	b953      	cbnz	r3, 800402a <__swsetup_r+0xc6>
 8004014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004018:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800401c:	d1ba      	bne.n	8003f94 <__swsetup_r+0x30>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	0792      	lsls	r2, r2, #30
 8004022:	bf58      	it	pl
 8004024:	6963      	ldrpl	r3, [r4, #20]
 8004026:	60a3      	str	r3, [r4, #8]
 8004028:	e7f2      	b.n	8004010 <__swsetup_r+0xac>
 800402a:	2000      	movs	r0, #0
 800402c:	e7f7      	b.n	800401e <__swsetup_r+0xba>
 800402e:	bf00      	nop
 8004030:	20000004 	.word	0x20000004
 8004034:	08004190 	.word	0x08004190
 8004038:	080041b0 	.word	0x080041b0
 800403c:	08004170 	.word	0x08004170

08004040 <_close_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	2300      	movs	r3, #0
 8004044:	4c05      	ldr	r4, [pc, #20]	; (800405c <_close_r+0x1c>)
 8004046:	4605      	mov	r5, r0
 8004048:	4608      	mov	r0, r1
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	f7fd fe92 	bl	8001d74 <_close>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_close_r+0x1a>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	b103      	cbz	r3, 800405a <_close_r+0x1a>
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	200000a0 	.word	0x200000a0

08004060 <_fstat_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	2300      	movs	r3, #0
 8004064:	4c06      	ldr	r4, [pc, #24]	; (8004080 <_fstat_r+0x20>)
 8004066:	4605      	mov	r5, r0
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	f7fd fe8c 	bl	8001d8a <_fstat>
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	d102      	bne.n	800407c <_fstat_r+0x1c>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	b103      	cbz	r3, 800407c <_fstat_r+0x1c>
 800407a:	602b      	str	r3, [r5, #0]
 800407c:	bd38      	pop	{r3, r4, r5, pc}
 800407e:	bf00      	nop
 8004080:	200000a0 	.word	0x200000a0

08004084 <_isatty_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	2300      	movs	r3, #0
 8004088:	4c05      	ldr	r4, [pc, #20]	; (80040a0 <_isatty_r+0x1c>)
 800408a:	4605      	mov	r5, r0
 800408c:	4608      	mov	r0, r1
 800408e:	6023      	str	r3, [r4, #0]
 8004090:	f7fd fe8a 	bl	8001da8 <_isatty>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_isatty_r+0x1a>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	b103      	cbz	r3, 800409e <_isatty_r+0x1a>
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	200000a0 	.word	0x200000a0

080040a4 <_lseek_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4605      	mov	r5, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	4c05      	ldr	r4, [pc, #20]	; (80040c4 <_lseek_r+0x20>)
 80040b0:	6022      	str	r2, [r4, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7fd fe82 	bl	8001dbc <_lseek>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_lseek_r+0x1e>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_lseek_r+0x1e>
 80040c0:	602b      	str	r3, [r5, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	200000a0 	.word	0x200000a0

080040c8 <memchr>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	b2c9      	uxtb	r1, r1
 80040cc:	4402      	add	r2, r0
 80040ce:	4290      	cmp	r0, r2
 80040d0:	4603      	mov	r3, r0
 80040d2:	d101      	bne.n	80040d8 <memchr+0x10>
 80040d4:	2300      	movs	r3, #0
 80040d6:	e003      	b.n	80040e0 <memchr+0x18>
 80040d8:	781c      	ldrb	r4, [r3, #0]
 80040da:	3001      	adds	r0, #1
 80040dc:	428c      	cmp	r4, r1
 80040de:	d1f6      	bne.n	80040ce <memchr+0x6>
 80040e0:	4618      	mov	r0, r3
 80040e2:	bd10      	pop	{r4, pc}

080040e4 <__malloc_lock>:
 80040e4:	4770      	bx	lr

080040e6 <__malloc_unlock>:
 80040e6:	4770      	bx	lr

080040e8 <_read_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4605      	mov	r5, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	2200      	movs	r2, #0
 80040f2:	4c05      	ldr	r4, [pc, #20]	; (8004108 <_read_r+0x20>)
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7fd fe03 	bl	8001d02 <_read>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_read_r+0x1e>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	b103      	cbz	r3, 8004106 <_read_r+0x1e>
 8004104:	602b      	str	r3, [r5, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	200000a0 	.word	0x200000a0

0800410c <_init>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr

08004118 <_fini>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr


Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000726c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08007380  08007380  00017380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007650  08007650  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007650  08007650  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007650  08007650  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  200001e8  08007840  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08007840  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009eb9  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d17  00000000  00000000  0002a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002c908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001586b  00000000  00000000  0002d340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e32  00000000  00000000  00042bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ddaa  00000000  00000000  000499dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  000b7804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007364 	.word	0x08007364

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007364 	.word	0x08007364

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	621a      	str	r2, [r3, #32]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	611a      	str	r2, [r3, #16]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	615a      	str	r2, [r3, #20]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <MotorL_EnablePWM>:
 *      Author: vanti
 */
#include "MotorControl.h"

void MotorL_EnablePWM(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8001104:	2101      	movs	r1, #1
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <MotorL_EnablePWM+0x10>)
 8001108:	f7ff ffb2 	bl	8001070 <LL_TIM_CC_EnableChannel>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012c00 	.word	0x40012c00

08001114 <MotorR_EnablePWM>:
{
	LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorR_EnablePWM(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <MotorR_EnablePWM+0x14>)
 800111e:	f7ff ffa7 	bl	8001070 <LL_TIM_CC_EnableChannel>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012c00 	.word	0x40012c00

0800112c <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800113a:	db03      	blt.n	8001144 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 800113c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e005      	b.n	8001150 <MotorL_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800114a:	dc01      	bgt.n	8001150 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MotorL_SetPWM+0x60>)
 800114e:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0a      	blt.n	800116c <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MotorL_SetPWM+0x64>)
 800115e:	f7ff ff97 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <MotorL_SetPWM+0x68>)
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MotorL_SetPWM+0x6c>)
 8001166:	f7ff ffbc 	bl	80010e2 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800116a:	e00a      	b.n	8001182 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001172:	4619      	mov	r1, r3
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <MotorL_SetPWM+0x64>)
 8001176:	f7ff ff8b 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800117a:	4906      	ldr	r1, [pc, #24]	; (8001194 <MotorL_SetPWM+0x68>)
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <MotorL_SetPWM+0x6c>)
 800117e:	f7ff ffa1 	bl	80010c4 <LL_GPIO_SetOutputPin>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	ffffe3e0 	.word	0xffffe3e0
 8001190:	40012c00 	.word	0x40012c00
 8001194:	04800080 	.word	0x04800080
 8001198:	40010c00 	.word	0x40010c00

0800119c <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011aa:	db03      	blt.n	80011b4 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 80011ac:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e005      	b.n	80011c0 <MotorR_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80011ba:	dc01      	bgt.n	80011c0 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MotorR_SetPWM+0x60>)
 80011be:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0a      	blt.n	80011dc <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MotorR_SetPWM+0x64>)
 80011ce:	f7ff ff6c 	bl	80010aa <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80011d2:	490c      	ldr	r1, [pc, #48]	; (8001204 <MotorR_SetPWM+0x68>)
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MotorR_SetPWM+0x6c>)
 80011d6:	f7ff ff84 	bl	80010e2 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 80011da:	e00a      	b.n	80011f2 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <MotorR_SetPWM+0x64>)
 80011e6:	f7ff ff60 	bl	80010aa <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80011ea:	4906      	ldr	r1, [pc, #24]	; (8001204 <MotorR_SetPWM+0x68>)
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <MotorR_SetPWM+0x6c>)
 80011ee:	f7ff ff69 	bl	80010c4 <LL_GPIO_SetOutputPin>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	ffffe3e0 	.word	0xffffe3e0
 8001200:	40012c00 	.word	0x40012c00
 8001204:	04020002 	.word	0x04020002
 8001208:	40010800 	.word	0x40010800

0800120c <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90)
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <Servo_SetAngle+0x64>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff00 	bl	800101c <__aeabi_fcmpgt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <Servo_SetAngle+0x1c>
		ServoAngle = 90;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <Servo_SetAngle+0x64>)
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e008      	b.n	800123a <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90)
 8001228:	4912      	ldr	r1, [pc, #72]	; (8001274 <Servo_SetAngle+0x68>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fed8 	bl	8000fe0 <__aeabi_fcmplt>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <Servo_SetAngle+0x2e>
		ServoAngle = -90;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <Servo_SetAngle+0x68>)
 8001238:	607b      	str	r3, [r7, #4]
	//	uint16_t ServoCPR = 540 + ServoAngle*2;
	LL_TIM_OC_SetCompareCH1(TIM4, 4600 + ServoAngle * 50 / 3);
 800123a:	490f      	ldr	r1, [pc, #60]	; (8001278 <Servo_SetAngle+0x6c>)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fd31 	bl	8000ca4 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	490d      	ldr	r1, [pc, #52]	; (800127c <Servo_SetAngle+0x70>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fde0 	bl	8000e0c <__aeabi_fdiv>
 800124c:	4603      	mov	r3, r0
 800124e:	490c      	ldr	r1, [pc, #48]	; (8001280 <Servo_SetAngle+0x74>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc1f 	bl	8000a94 <__addsf3>
 8001256:	4603      	mov	r3, r0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fee9 	bl	8001030 <__aeabi_f2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	4619      	mov	r1, r3
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <Servo_SetAngle+0x78>)
 8001264:	f7ff ff14 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	42b40000 	.word	0x42b40000
 8001274:	c2b40000 	.word	0xc2b40000
 8001278:	42480000 	.word	0x42480000
 800127c:	40400000 	.word	0x40400000
 8001280:	458fc000 	.word	0x458fc000
 8001284:	40000800 	.word	0x40000800

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <__NVIC_EnableIRQ+0x34>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013dc:	b490      	push	{r4, r7}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	332c      	adds	r3, #44	; 0x2c
 80013ec:	4619      	mov	r1, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013f8:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	fa92 f2a2 	rbit	r2, r2
 8001400:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	fab2 f282 	clz	r2, r2
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	40d3      	lsrs	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	211f      	movs	r1, #31
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 011f 	and.w	r1, r3, #31
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bc90      	pop	{r4, r7}
 8001440:	4770      	bx	lr

08001442 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001466:	b490      	push	{r4, r7}
 8001468:	b08a      	sub	sp, #40	; 0x28
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	330c      	adds	r3, #12
 8001476:	4619      	mov	r1, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	fa92 f2a2 	rbit	r2, r2
 800148a:	613a      	str	r2, [r7, #16]
  return result;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	40d3      	lsrs	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014a4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014a8:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	69f9      	ldr	r1, [r7, #28]
 80014ac:	fa91 f1a1 	rbit	r1, r1
 80014b0:	61b9      	str	r1, [r7, #24]
  return result;
 80014b2:	69b9      	ldr	r1, [r7, #24]
 80014b4:	fab1 f181 	clz	r1, r1
 80014b8:	b2c9      	uxtb	r1, r1
 80014ba:	40cb      	lsrs	r3, r1
 80014bc:	2107      	movs	r1, #7
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	401a      	ands	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014cc:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014d0:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d4:	fa91 f1a1 	rbit	r1, r1
 80014d8:	6239      	str	r1, [r7, #32]
  return result;
 80014da:	6a39      	ldr	r1, [r7, #32]
 80014dc:	fab1 f181 	clz	r1, r1
 80014e0:	b2c9      	uxtb	r1, r1
 80014e2:	40cb      	lsrs	r3, r1
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc90      	pop	{r4, r7}
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f043 0204 	orr.w	r2, r3, #4
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b04      	cmp	r3, #4
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
	...

08001578 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LL_DMA_EnableChannel+0x38>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	3a01      	subs	r2, #1
 8001596:	4906      	ldr	r1, [pc, #24]	; (80015b0 <LL_DMA_EnableChannel+0x38>)
 8001598:	5c8a      	ldrb	r2, [r1, r2]
 800159a:	4611      	mov	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	440a      	add	r2, r1
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	08007380 	.word	0x08007380

080015b4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d4:	f023 0310 	bic.w	r3, r3, #16
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	3a01      	subs	r2, #1
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80015de:	5c8a      	ldrb	r2, [r1, r2]
 80015e0:	4611      	mov	r1, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	440a      	add	r2, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	08007380 	.word	0x08007380

080015fc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LL_DMA_SetMode+0x40>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 0220 	bic.w	r2, r3, #32
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3b01      	subs	r3, #1
 8001620:	4906      	ldr	r1, [pc, #24]	; (800163c <LL_DMA_SetMode+0x40>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	4619      	mov	r1, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	440b      	add	r3, r1
 800162a:	4619      	mov	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	08007380 	.word	0x08007380

08001640 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3b01      	subs	r3, #1
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <LL_DMA_SetPeriphIncMode+0x40>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <LL_DMA_SetPeriphIncMode+0x40>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	4619      	mov	r1, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	440b      	add	r3, r1
 800166e:	4619      	mov	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	08007380 	.word	0x08007380

08001684 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LL_DMA_SetMemoryIncMode+0x40>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	4906      	ldr	r1, [pc, #24]	; (80016c4 <LL_DMA_SetMemoryIncMode+0x40>)
 80016aa:	5ccb      	ldrb	r3, [r1, r3]
 80016ac:	4619      	mov	r1, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	440b      	add	r3, r1
 80016b2:	4619      	mov	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	08007380 	.word	0x08007380

080016c8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LL_DMA_SetPeriphSize+0x40>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4906      	ldr	r1, [pc, #24]	; (8001708 <LL_DMA_SetPeriphSize+0x40>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	4619      	mov	r1, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	440b      	add	r3, r1
 80016f6:	4619      	mov	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	08007380 	.word	0x08007380

0800170c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	3b01      	subs	r3, #1
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <LL_DMA_SetMemorySize+0x40>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3b01      	subs	r3, #1
 8001730:	4906      	ldr	r1, [pc, #24]	; (800174c <LL_DMA_SetMemorySize+0x40>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	4619      	mov	r1, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	440b      	add	r3, r1
 800173a:	4619      	mov	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	08007380 	.word	0x08007380

08001750 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	3b01      	subs	r3, #1
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	461a      	mov	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3b01      	subs	r3, #1
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	4619      	mov	r1, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	440b      	add	r3, r1
 800177e:	4619      	mov	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	08007380 	.word	0x08007380

08001794 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LL_DMA_SetDataLength+0x40>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	461a      	mov	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	3a01      	subs	r2, #1
 80017b8:	4906      	ldr	r1, [pc, #24]	; (80017d4 <LL_DMA_SetDataLength+0x40>)
 80017ba:	5c8a      	ldrb	r2, [r1, r2]
 80017bc:	4611      	mov	r1, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	440a      	add	r2, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	08007380 	.word	0x08007380

080017d8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <LL_DMA_SetMemoryAddress+0x2c>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08007380 	.word	0x08007380

08001808 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3b01      	subs	r3, #1
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <LL_DMA_SetPeriphAddress+0x2c>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6093      	str	r3, [r2, #8]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	08007380 	.word	0x08007380

08001838 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f023 0201 	bic.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60da      	str	r2, [r3, #12]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <LL_RCC_HSE_Enable+0x18>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <LL_RCC_HSE_Enable+0x18>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <LL_RCC_HSE_IsReady+0x20>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000

08001914 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <LL_RCC_SetSysClkSource+0x24>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 0203 	bic.w	r2, r3, #3
 8001924:	4904      	ldr	r1, [pc, #16]	; (8001938 <LL_RCC_SetSysClkSource+0x24>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <LL_RCC_GetSysClkSource+0x14>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <LL_RCC_SetAHBPrescaler+0x24>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <LL_RCC_SetAHBPrescaler+0x24>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b4:	4904      	ldr	r1, [pc, #16]	; (80019c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <LL_RCC_SetADCClockSource+0x24>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <LL_RCC_SetADCClockSource+0x24>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <LL_RCC_PLL_Enable+0x18>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <LL_RCC_PLL_Enable+0x18>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000

08001a10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <LL_RCC_PLL_IsReady+0x20>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000

08001a34 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000

08001a64 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <LL_FLASH_SetLatency+0x24>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4904      	ldr	r1, [pc, #16]	; (8001b18 <LL_FLASH_SetLatency+0x24>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40022000 	.word	0x40022000

08001b1c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <LL_FLASH_GetLatency+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40022000 	.word	0x40022000

08001b34 <LL_TIM_EnableCounter>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <LL_TIM_DisableARRPreload>:
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <LL_TIM_SetCounter>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <LL_TIM_OC_DisableFast>:
{
 8001b8c:	b4b0      	push	{r4, r5, r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d01c      	beq.n	8001bd6 <LL_TIM_OC_DisableFast+0x4a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d017      	beq.n	8001bd2 <LL_TIM_OC_DisableFast+0x46>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d012      	beq.n	8001bce <LL_TIM_OC_DisableFast+0x42>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d00d      	beq.n	8001bca <LL_TIM_OC_DisableFast+0x3e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb4:	d007      	beq.n	8001bc6 <LL_TIM_OC_DisableFast+0x3a>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbc:	d101      	bne.n	8001bc2 <LL_TIM_OC_DisableFast+0x36>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e00a      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e008      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3318      	adds	r3, #24
 8001bde:	461a      	mov	r2, r3
 8001be0:	4629      	mov	r1, r5
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <LL_TIM_OC_DisableFast+0x7c>)
 8001be4:	5c5b      	ldrb	r3, [r3, r1]
 8001be6:	4413      	add	r3, r2
 8001be8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	4629      	mov	r1, r5
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <LL_TIM_OC_DisableFast+0x80>)
 8001bf0:	5c5b      	ldrb	r3, [r3, r1]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	408b      	lsls	r3, r1
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	6023      	str	r3, [r4, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bcb0      	pop	{r4, r5, r7}
 8001c06:	4770      	bx	lr
 8001c08:	08007388 	.word	0x08007388
 8001c0c:	08007390 	.word	0x08007390

08001c10 <LL_TIM_OC_EnablePreload>:
{
 8001c10:	b4b0      	push	{r4, r5, r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d01c      	beq.n	8001c5a <LL_TIM_OC_EnablePreload+0x4a>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d017      	beq.n	8001c56 <LL_TIM_OC_EnablePreload+0x46>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d012      	beq.n	8001c52 <LL_TIM_OC_EnablePreload+0x42>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d00d      	beq.n	8001c4e <LL_TIM_OC_EnablePreload+0x3e>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	d007      	beq.n	8001c4a <LL_TIM_OC_EnablePreload+0x3a>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c40:	d101      	bne.n	8001c46 <LL_TIM_OC_EnablePreload+0x36>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e00a      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e008      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3318      	adds	r3, #24
 8001c62:	461a      	mov	r2, r3
 8001c64:	4629      	mov	r1, r5
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <LL_TIM_OC_EnablePreload+0x7c>)
 8001c68:	5c5b      	ldrb	r3, [r3, r1]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	4629      	mov	r1, r5
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <LL_TIM_OC_EnablePreload+0x80>)
 8001c74:	5c5b      	ldrb	r3, [r3, r1]
 8001c76:	4619      	mov	r1, r3
 8001c78:	2308      	movs	r3, #8
 8001c7a:	408b      	lsls	r3, r1
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	6023      	str	r3, [r4, #0]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bcb0      	pop	{r4, r5, r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	08007388 	.word	0x08007388
 8001c90:	08007390 	.word	0x08007390

08001c94 <LL_TIM_OC_DisablePreload>:
{
 8001c94:	b4b0      	push	{r4, r5, r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d01c      	beq.n	8001cde <LL_TIM_OC_DisablePreload+0x4a>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d017      	beq.n	8001cda <LL_TIM_OC_DisablePreload+0x46>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d012      	beq.n	8001cd6 <LL_TIM_OC_DisablePreload+0x42>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d00d      	beq.n	8001cd2 <LL_TIM_OC_DisablePreload+0x3e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbc:	d007      	beq.n	8001cce <LL_TIM_OC_DisablePreload+0x3a>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc4:	d101      	bne.n	8001cca <LL_TIM_OC_DisablePreload+0x36>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e00a      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e008      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	e006      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e004      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e002      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LL_TIM_OC_DisablePreload+0x7c>)
 8001cec:	5c5b      	ldrb	r3, [r3, r1]
 8001cee:	4413      	add	r3, r2
 8001cf0:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001cf2:	6822      	ldr	r2, [r4, #0]
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <LL_TIM_OC_DisablePreload+0x80>)
 8001cf8:	5c5b      	ldrb	r3, [r3, r1]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	408b      	lsls	r3, r1
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4013      	ands	r3, r2
 8001d04:	6023      	str	r3, [r4, #0]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bcb0      	pop	{r4, r5, r7}
 8001d0e:	4770      	bx	lr
 8001d10:	08007388 	.word	0x08007388
 8001d14:	08007390 	.word	0x08007390

08001d18 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001d18:	b4b0      	push	{r4, r5, r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d01c      	beq.n	8001d64 <LL_TIM_IC_SetActiveInput+0x4c>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d017      	beq.n	8001d60 <LL_TIM_IC_SetActiveInput+0x48>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d012      	beq.n	8001d5c <LL_TIM_IC_SetActiveInput+0x44>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d00d      	beq.n	8001d58 <LL_TIM_IC_SetActiveInput+0x40>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d42:	d007      	beq.n	8001d54 <LL_TIM_IC_SetActiveInput+0x3c>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d101      	bne.n	8001d50 <LL_TIM_IC_SetActiveInput+0x38>
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	e00a      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d50:	2306      	movs	r3, #6
 8001d52:	e008      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e006      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e004      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d64:	2300      	movs	r3, #0
 8001d66:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4629      	mov	r1, r5
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001d72:	5c5b      	ldrb	r3, [r3, r1]
 8001d74:	4413      	add	r3, r2
 8001d76:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d78:	6822      	ldr	r2, [r4, #0]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001d7e:	5c5b      	ldrb	r3, [r3, r1]
 8001d80:	4619      	mov	r1, r3
 8001d82:	2303      	movs	r3, #3
 8001d84:	408b      	lsls	r3, r1
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	4628      	mov	r0, r5
 8001d90:	4905      	ldr	r1, [pc, #20]	; (8001da8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001d92:	5c09      	ldrb	r1, [r1, r0]
 8001d94:	408b      	lsls	r3, r1
 8001d96:	4313      	orrs	r3, r2
 8001d98:	6023      	str	r3, [r4, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bcb0      	pop	{r4, r5, r7}
 8001da2:	4770      	bx	lr
 8001da4:	08007388 	.word	0x08007388
 8001da8:	08007398 	.word	0x08007398

08001dac <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001dac:	b4b0      	push	{r4, r5, r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d01c      	beq.n	8001df8 <LL_TIM_IC_SetPrescaler+0x4c>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d017      	beq.n	8001df4 <LL_TIM_IC_SetPrescaler+0x48>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d012      	beq.n	8001df0 <LL_TIM_IC_SetPrescaler+0x44>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d00d      	beq.n	8001dec <LL_TIM_IC_SetPrescaler+0x40>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd6:	d007      	beq.n	8001de8 <LL_TIM_IC_SetPrescaler+0x3c>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dde:	d101      	bne.n	8001de4 <LL_TIM_IC_SetPrescaler+0x38>
 8001de0:	2305      	movs	r3, #5
 8001de2:	e00a      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001de4:	2306      	movs	r3, #6
 8001de6:	e008      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001de8:	2304      	movs	r3, #4
 8001dea:	e006      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001dec:	2303      	movs	r3, #3
 8001dee:	e004      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3318      	adds	r3, #24
 8001e00:	461a      	mov	r2, r3
 8001e02:	4629      	mov	r1, r5
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001e06:	5c5b      	ldrb	r3, [r3, r1]
 8001e08:	4413      	add	r3, r2
 8001e0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <LL_TIM_IC_SetPrescaler+0x90>)
 8001e12:	5c5b      	ldrb	r3, [r3, r1]
 8001e14:	4619      	mov	r1, r3
 8001e16:	230c      	movs	r3, #12
 8001e18:	408b      	lsls	r3, r1
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	4628      	mov	r0, r5
 8001e24:	4905      	ldr	r1, [pc, #20]	; (8001e3c <LL_TIM_IC_SetPrescaler+0x90>)
 8001e26:	5c09      	ldrb	r1, [r1, r0]
 8001e28:	408b      	lsls	r3, r1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	6023      	str	r3, [r4, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bcb0      	pop	{r4, r5, r7}
 8001e36:	4770      	bx	lr
 8001e38:	08007388 	.word	0x08007388
 8001e3c:	08007398 	.word	0x08007398

08001e40 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001e40:	b4b0      	push	{r4, r5, r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d01c      	beq.n	8001e8c <LL_TIM_IC_SetFilter+0x4c>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d017      	beq.n	8001e88 <LL_TIM_IC_SetFilter+0x48>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d012      	beq.n	8001e84 <LL_TIM_IC_SetFilter+0x44>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d00d      	beq.n	8001e80 <LL_TIM_IC_SetFilter+0x40>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d007      	beq.n	8001e7c <LL_TIM_IC_SetFilter+0x3c>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d101      	bne.n	8001e78 <LL_TIM_IC_SetFilter+0x38>
 8001e74:	2305      	movs	r3, #5
 8001e76:	e00a      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e78:	2306      	movs	r3, #6
 8001e7a:	e008      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e006      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e004      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e002      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3318      	adds	r3, #24
 8001e94:	461a      	mov	r2, r3
 8001e96:	4629      	mov	r1, r5
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <LL_TIM_IC_SetFilter+0x8c>)
 8001e9a:	5c5b      	ldrb	r3, [r3, r1]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <LL_TIM_IC_SetFilter+0x90>)
 8001ea6:	5c5b      	ldrb	r3, [r3, r1]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	23f0      	movs	r3, #240	; 0xf0
 8001eac:	408b      	lsls	r3, r1
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	4905      	ldr	r1, [pc, #20]	; (8001ed0 <LL_TIM_IC_SetFilter+0x90>)
 8001eba:	5c09      	ldrb	r1, [r1, r0]
 8001ebc:	408b      	lsls	r3, r1
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	6023      	str	r3, [r4, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bcb0      	pop	{r4, r5, r7}
 8001eca:	4770      	bx	lr
 8001ecc:	08007388 	.word	0x08007388
 8001ed0:	08007398 	.word	0x08007398

08001ed4 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d01c      	beq.n	8001f20 <LL_TIM_IC_SetPolarity+0x4c>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d017      	beq.n	8001f1c <LL_TIM_IC_SetPolarity+0x48>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d012      	beq.n	8001f18 <LL_TIM_IC_SetPolarity+0x44>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d00d      	beq.n	8001f14 <LL_TIM_IC_SetPolarity+0x40>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efe:	d007      	beq.n	8001f10 <LL_TIM_IC_SetPolarity+0x3c>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d101      	bne.n	8001f0c <LL_TIM_IC_SetPolarity+0x38>
 8001f08:	2305      	movs	r3, #5
 8001f0a:	e00a      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	e008      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e006      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e004      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f20:	2300      	movs	r3, #0
 8001f22:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <LL_TIM_IC_SetPolarity+0x80>)
 8001f2c:	5c5b      	ldrb	r3, [r3, r1]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	230a      	movs	r3, #10
 8001f32:	408b      	lsls	r3, r1
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <LL_TIM_IC_SetPolarity+0x80>)
 8001f3c:	5c5b      	ldrb	r3, [r3, r1]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	408b      	lsls	r3, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc90      	pop	{r4, r7}
 8001f52:	4770      	bx	lr
 8001f54:	080073a0 	.word	0x080073a0

08001f58 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	605a      	str	r2, [r3, #4]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f06f 0201 	mvn.w	r2, #1
 8002012:	611a      	str	r2, [r3, #16]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f06f 0202 	mvn.w	r2, #2
 800202c:	611a      	str	r2, [r3, #16]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f06f 0204 	mvn.w	r2, #4
 8002046:	611a      	str	r2, [r3, #16]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60da      	str	r2, [r3, #12]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f043 0202 	orr.w	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	60da      	str	r2, [r3, #12]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f043 0204 	orr.w	r2, r3, #4
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60da      	str	r2, [r3, #12]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	615a      	str	r2, [r3, #20]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	2b40      	cmp	r3, #64	; 0x40
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	605a      	str	r2, [r3, #4]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <LL_GPIO_SetPinMode>:
{
 8002134:	b490      	push	{r4, r7}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	0e1b      	lsrs	r3, r3, #24
 8002148:	4413      	add	r3, r2
 800214a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800214c:	6822      	ldr	r2, [r4, #0]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	613b      	str	r3, [r7, #16]
  return result;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	210f      	movs	r1, #15
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	61bb      	str	r3, [r7, #24]
  return result;
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	6023      	str	r3, [r4, #0]
}
 800218e:	bf00      	nop
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bc90      	pop	{r4, r7}
 8002196:	4770      	bx	lr

08002198 <LL_GPIO_ResetOutputPin>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	615a      	str	r2, [r3, #20]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
	...

080021b8 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 80021c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021c6:	f043 0302 	orr.w	r3, r3, #2
 80021ca:	6053      	str	r3, [r2, #4]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40010000 	.word	0x40010000

080021d8 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80021e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6053      	str	r3, [r2, #4]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	40010000 	.word	0x40010000

080021f8 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8002202:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002206:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800220a:	6053      	str	r3, [r2, #4]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	40010000 	.word	0x40010000

08002218 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002224:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 800222a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800222e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002232:	6053      	str	r3, [r2, #4]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40010000 	.word	0x40010000

08002240 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800224a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800224e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800225a:	6053      	str	r3, [r2, #4]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40010000 	.word	0x40010000

08002268 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3302      	adds	r3, #2
 800227a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	0c1b      	lsrs	r3, r3, #16
 8002282:	43db      	mvns	r3, r3
 8002284:	ea02 0103 	and.w	r1, r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	60bb      	str	r3, [r7, #8]
  return result;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	fa03 f202 	lsl.w	r2, r3, r2
 80022a6:	4806      	ldr	r0, [pc, #24]	; (80022c0 <LL_GPIO_AF_SetEXTISource+0x58>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	430a      	orrs	r2, r1
 80022ae:	3302      	adds	r3, #2
 80022b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000

080022c4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  while (LL_USART_IsActiveFlag_TC(USART1) == 0)
 80022cc:	bf00      	nop
 80022ce:	4808      	ldr	r0, [pc, #32]	; (80022f0 <__io_putchar+0x2c>)
 80022d0:	f7ff ff10 	bl	80020f4 <LL_USART_IsActiveFlag_TC>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f9      	beq.n	80022ce <__io_putchar+0xa>
  {
  }
  LL_USART_TransmitData8(USART1, (uint8_t)ch);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	4619      	mov	r1, r3
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <__io_putchar+0x2c>)
 80022e2:	f7ff ff19 	bl	8002118 <LL_USART_TransmitData8>

  return ch;
 80022e6:	687b      	ldr	r3, [r7, #4]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40013800 	.word	0x40013800

080022f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f4:	b598      	push	{r3, r4, r7, lr}
 80022f6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7ff fbe3 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80022fe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002302:	f7ff fbc7 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002306:	2003      	movs	r0, #3
 8002308:	f7fe ffbe 	bl	8001288 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 800230c:	f7fe ffe0 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002310:	4603      	mov	r3, r0
 8002312:	2200      	movs	r2, #0
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f82e 	bl	8001378 <NVIC_EncodePriority>
 800231c:	4603      	mov	r3, r0
 800231e:	4619      	mov	r1, r3
 8002320:	f06f 000b 	mvn.w	r0, #11
 8002324:	f7fe fffe 	bl	8001324 <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 8002328:	f7fe ffd2 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800232c:	4603      	mov	r3, r0
 800232e:	2200      	movs	r2, #0
 8002330:	2101      	movs	r1, #1
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f820 	bl	8001378 <NVIC_EncodePriority>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	f06f 000a 	mvn.w	r0, #10
 8002340:	f7fe fff0 	bl	8001324 <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 8002344:	f7fe ffc4 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002348:	4603      	mov	r3, r0
 800234a:	2200      	movs	r2, #0
 800234c:	2101      	movs	r1, #1
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f812 	bl	8001378 <NVIC_EncodePriority>
 8002354:	4603      	mov	r3, r0
 8002356:	4619      	mov	r1, r3
 8002358:	f06f 0009 	mvn.w	r0, #9
 800235c:	f7fe ffe2 	bl	8001324 <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 8002360:	f7fe ffb6 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002364:	4603      	mov	r3, r0
 8002366:	2200      	movs	r2, #0
 8002368:	2101      	movs	r1, #1
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f804 	bl	8001378 <NVIC_EncodePriority>
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	f06f 0004 	mvn.w	r0, #4
 8002378:	f7fe ffd4 	bl	8001324 <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 800237c:	f7fe ffa8 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002380:	4603      	mov	r3, r0
 8002382:	2200      	movs	r2, #0
 8002384:	2101      	movs	r1, #1
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fff6 	bl	8001378 <NVIC_EncodePriority>
 800238c:	4603      	mov	r3, r0
 800238e:	4619      	mov	r1, r3
 8002390:	f06f 0003 	mvn.w	r0, #3
 8002394:	f7fe ffc6 	bl	8001324 <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 8002398:	f7fe ff9a 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800239c:	4603      	mov	r3, r0
 800239e:	2200      	movs	r2, #0
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe ffe8 	bl	8001378 <NVIC_EncodePriority>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4619      	mov	r1, r3
 80023ac:	f06f 0001 	mvn.w	r0, #1
 80023b0:	f7fe ffb8 	bl	8001324 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 80023b4:	f7fe ff8c 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2200      	movs	r2, #0
 80023bc:	2101      	movs	r1, #1
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe ffda 	bl	8001378 <NVIC_EncodePriority>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7fe ffaa 	bl	8001324 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80023d0:	f7ff ff36 	bl	8002240 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 80023d4:	4bab      	ldr	r3, [pc, #684]	; (8002684 <main+0x390>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6858      	ldr	r0, [r3, #4]
 80023da:	2300      	movs	r3, #0
 80023dc:	2202      	movs	r2, #2
 80023de:	2100      	movs	r1, #0
 80023e0:	f003 fab0 	bl	8005944 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80023e4:	4ba7      	ldr	r3, [pc, #668]	; (8002684 <main+0x390>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6898      	ldr	r0, [r3, #8]
 80023ea:	2300      	movs	r3, #0
 80023ec:	2202      	movs	r2, #2
 80023ee:	2100      	movs	r1, #0
 80023f0:	f003 faa8 	bl	8005944 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80023f4:	4ba3      	ldr	r3, [pc, #652]	; (8002684 <main+0x390>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68d8      	ldr	r0, [r3, #12]
 80023fa:	2300      	movs	r3, #0
 80023fc:	2202      	movs	r2, #2
 80023fe:	2100      	movs	r1, #0
 8002400:	f003 faa0 	bl	8005944 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002404:	f000 f954 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002408:	f000 fe0a 	bl	8003020 <MX_GPIO_Init>
  MX_DMA_Init();
 800240c:	f000 fdf0 	bl	8002ff0 <MX_DMA_Init>
  MX_TIM1_Init();
 8002410:	f000 fb00 	bl	8002a14 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002414:	f000 f98e 	bl	8002734 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002418:	f000 faa2 	bl	8002960 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800241c:	f000 fd7e 	bl	8002f1c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002420:	f000 fbae 	bl	8002b80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002424:	f000 fc5c 	bl	8002ce0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002428:	f000 fcea 	bl	8002e00 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 800242c:	f7fe fe68 	bl	8001100 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 8002430:	f7fe fe70 	bl	8001114 <MotorR_EnablePWM>
  MotorL_SetPWM(0);
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe fe79 	bl	800112c <MotorL_SetPWM>
  MotorR_SetPWM(0);
 800243a:	2000      	movs	r0, #0
 800243c:	f7fe feae 	bl	800119c <MotorR_SetPWM>
  Servo_SetAngle(0);
 8002440:	f04f 0000 	mov.w	r0, #0
 8002444:	f7fe fee2 	bl	800120c <Servo_SetAngle>

  //  uint32_t Count = LL_TIM_GetCounter(TIM2);

  while (1)
  {
    LineDetect = 0;
 8002448:	4b8f      	ldr	r3, [pc, #572]	; (8002688 <main+0x394>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
    Sensor_Convert_A2D();
 800244e:	f000 feb5 	bl	80031bc <Sensor_Convert_A2D>
    	  LL_mDelay(200);
    //	  Sensor_Print_LineDetect();
#endif

#ifdef NormalRun
    if (LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000)
 8002452:	4b8d      	ldr	r3, [pc, #564]	; (8002688 <main+0x394>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b18      	cmp	r3, #24
 8002458:	d007      	beq.n	800246a <main+0x176>
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <main+0x394>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b1c      	cmp	r3, #28
 8002460:	d003      	beq.n	800246a <main+0x176>
 8002462:	4b89      	ldr	r3, [pc, #548]	; (8002688 <main+0x394>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b38      	cmp	r3, #56	; 0x38
 8002468:	d114      	bne.n	8002494 <main+0x1a0>
    {
      MatLineFlag = 0;
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <main+0x398>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
      CarState = DiThang;
 8002470:	4b87      	ldr	r3, [pc, #540]	; (8002690 <main+0x39c>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      MotorL_SetPWM(MaxSpeed);
 8002476:	4b87      	ldr	r3, [pc, #540]	; (8002694 <main+0x3a0>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fe56 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed);
 8002480:	4b84      	ldr	r3, [pc, #528]	; (8002694 <main+0x3a0>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fe89 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(0);
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f7fe febd 	bl	800120c <Servo_SetAngle>
      continue;
 8002492:	e0f6      	b.n	8002682 <main+0x38e>
    }

    if (CarState == DiThang)
 8002494:	4b7e      	ldr	r3, [pc, #504]	; (8002690 <main+0x39c>)
 8002496:	f993 3000 	ldrsb.w	r3, [r3]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d136      	bne.n	800250c <main+0x218>
    {
      if (LineDetect == 0b10000000 || LineDetect == 0b11000000 ||
 800249e:	4b7a      	ldr	r3, [pc, #488]	; (8002688 <main+0x394>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d013      	beq.n	80024ce <main+0x1da>
 80024a6:	4b78      	ldr	r3, [pc, #480]	; (8002688 <main+0x394>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2bc0      	cmp	r3, #192	; 0xc0
 80024ac:	d00f      	beq.n	80024ce <main+0x1da>
          LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024ae:	4b76      	ldr	r3, [pc, #472]	; (8002688 <main+0x394>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
      if (LineDetect == 0b10000000 || LineDetect == 0b11000000 ||
 80024b2:	2be0      	cmp	r3, #224	; 0xe0
 80024b4:	d00b      	beq.n	80024ce <main+0x1da>
          LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024b6:	4b74      	ldr	r3, [pc, #464]	; (8002688 <main+0x394>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b70      	cmp	r3, #112	; 0x70
 80024bc:	d007      	beq.n	80024ce <main+0x1da>
          LineDetect == 0b00110000 || LineDetect == 0b00010000)
 80024be:	4b72      	ldr	r3, [pc, #456]	; (8002688 <main+0x394>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
          LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024c2:	2b30      	cmp	r3, #48	; 0x30
 80024c4:	d003      	beq.n	80024ce <main+0x1da>
          LineDetect == 0b00110000 || LineDetect == 0b00010000)
 80024c6:	4b70      	ldr	r3, [pc, #448]	; (8002688 <main+0x394>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d103      	bne.n	80024d6 <main+0x1e2>
      {
        CarState = LechPhai;
 80024ce:	4b70      	ldr	r3, [pc, #448]	; (8002690 <main+0x39c>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e01a      	b.n	800250c <main+0x218>
      }
      else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 80024d6:	4b6c      	ldr	r3, [pc, #432]	; (8002688 <main+0x394>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d013      	beq.n	8002506 <main+0x212>
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <main+0x394>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d00f      	beq.n	8002506 <main+0x212>
               LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80024e6:	4b68      	ldr	r3, [pc, #416]	; (8002688 <main+0x394>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
      else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 80024ea:	2b07      	cmp	r3, #7
 80024ec:	d00b      	beq.n	8002506 <main+0x212>
               LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80024ee:	4b66      	ldr	r3, [pc, #408]	; (8002688 <main+0x394>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b0e      	cmp	r3, #14
 80024f4:	d007      	beq.n	8002506 <main+0x212>
               LineDetect == 0b00001100 || LineDetect == 0b00001000)
 80024f6:	4b64      	ldr	r3, [pc, #400]	; (8002688 <main+0x394>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
               LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d003      	beq.n	8002506 <main+0x212>
               LineDetect == 0b00001100 || LineDetect == 0b00001000)
 80024fe:	4b62      	ldr	r3, [pc, #392]	; (8002688 <main+0x394>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b08      	cmp	r3, #8
 8002504:	d102      	bne.n	800250c <main+0x218>
      {
        CarState = LechTrai;
 8002506:	4b62      	ldr	r3, [pc, #392]	; (8002690 <main+0x39c>)
 8002508:	22ff      	movs	r2, #255	; 0xff
 800250a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111 || LineDetect == 0b00001111)
 800250c:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <main+0x394>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b7f      	cmp	r3, #127	; 0x7f
 8002512:	d00b      	beq.n	800252c <main+0x238>
 8002514:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <main+0x394>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b3f      	cmp	r3, #63	; 0x3f
 800251a:	d007      	beq.n	800252c <main+0x238>
 800251c:	4b5a      	ldr	r3, [pc, #360]	; (8002688 <main+0x394>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b1f      	cmp	r3, #31
 8002522:	d003      	beq.n	800252c <main+0x238>
 8002524:	4b58      	ldr	r3, [pc, #352]	; (8002688 <main+0x394>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d103      	bne.n	8002534 <main+0x240>
    {
      ChuyenLaneFlag = ChuyenLanePhai;
 800252c:	4b5a      	ldr	r3, [pc, #360]	; (8002698 <main+0x3a4>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	e01a      	b.n	800256a <main+0x276>
    }
    else if (LineDetect == 0b11110000 || LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 8002534:	4b54      	ldr	r3, [pc, #336]	; (8002688 <main+0x394>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2bf0      	cmp	r3, #240	; 0xf0
 800253a:	d00b      	beq.n	8002554 <main+0x260>
 800253c:	4b52      	ldr	r3, [pc, #328]	; (8002688 <main+0x394>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2bf8      	cmp	r3, #248	; 0xf8
 8002542:	d007      	beq.n	8002554 <main+0x260>
 8002544:	4b50      	ldr	r3, [pc, #320]	; (8002688 <main+0x394>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2bfc      	cmp	r3, #252	; 0xfc
 800254a:	d003      	beq.n	8002554 <main+0x260>
 800254c:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <main+0x394>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2bfe      	cmp	r3, #254	; 0xfe
 8002552:	d103      	bne.n	800255c <main+0x268>
    {
      ChuyenLaneFlag = ChuyenLaneTrai;
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <main+0x3a4>)
 8002556:	22ff      	movs	r2, #255	; 0xff
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e006      	b.n	800256a <main+0x276>
    }
    else if (LineDetect == 0xFF)
 800255c:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <main+0x394>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2bff      	cmp	r3, #255	; 0xff
 8002562:	d102      	bne.n	800256a <main+0x276>
    {
      FullWhiteFlag = 1;
 8002564:	4b4d      	ldr	r3, [pc, #308]	; (800269c <main+0x3a8>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
    }
    if (LineDetect == 0)
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <main+0x394>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d17e      	bne.n	8002670 <main+0x37c>
    {
      if (ChuyenLaneFlag == ChuyenLaneTrai)
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <main+0x3a4>)
 8002574:	f993 3000 	ldrsb.w	r3, [r3]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d131      	bne.n	80025e2 <main+0x2ee>
      {
        ChuyenLaneFlag = 0;
 800257e:	4b46      	ldr	r3, [pc, #280]	; (8002698 <main+0x3a4>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
        MotorR_SetPWM(MaxSpeed * 0.75);
 8002584:	4b43      	ldr	r3, [pc, #268]	; (8002694 <main+0x3a0>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ff3b 	bl	8000404 <__aeabi_i2d>
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <main+0x3ac>)
 8002594:	f7fd ffa0 	bl	80004d8 <__aeabi_dmul>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	4618      	mov	r0, r3
 800259e:	4621      	mov	r1, r4
 80025a0:	f7fe fa4a 	bl	8000a38 <__aeabi_d2iz>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe fdf8 	bl	800119c <MotorR_SetPWM>
        MotorL_SetPWM(MaxSpeed * 0.5);
 80025ac:	4b39      	ldr	r3, [pc, #228]	; (8002694 <main+0x3a0>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ff27 	bl	8000404 <__aeabi_i2d>
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <main+0x3b0>)
 80025bc:	f7fd ff8c 	bl	80004d8 <__aeabi_dmul>
 80025c0:	4603      	mov	r3, r0
 80025c2:	460c      	mov	r4, r1
 80025c4:	4618      	mov	r0, r3
 80025c6:	4621      	mov	r1, r4
 80025c8:	f7fe fa36 	bl	8000a38 <__aeabi_d2iz>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fdac 	bl	800112c <MotorL_SetPWM>
        Servo_SetAngle(-54);
 80025d4:	4834      	ldr	r0, [pc, #208]	; (80026a8 <main+0x3b4>)
 80025d6:	f7fe fe19 	bl	800120c <Servo_SetAngle>
        CarState = LechPhai;
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <main+0x39c>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
        continue;
 80025e0:	e04f      	b.n	8002682 <main+0x38e>
      }
      else if (ChuyenLaneFlag == ChuyenLanePhai)
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <main+0x3a4>)
 80025e4:	f993 3000 	ldrsb.w	r3, [r3]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d131      	bne.n	8002650 <main+0x35c>
      {
        ChuyenLaneFlag = 0;
 80025ec:	4b2a      	ldr	r3, [pc, #168]	; (8002698 <main+0x3a4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
        MotorL_SetPWM(MaxSpeed * 0.75);
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <main+0x3a0>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff04 	bl	8000404 <__aeabi_i2d>
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <main+0x3ac>)
 8002602:	f7fd ff69 	bl	80004d8 <__aeabi_dmul>
 8002606:	4603      	mov	r3, r0
 8002608:	460c      	mov	r4, r1
 800260a:	4618      	mov	r0, r3
 800260c:	4621      	mov	r1, r4
 800260e:	f7fe fa13 	bl	8000a38 <__aeabi_d2iz>
 8002612:	4603      	mov	r3, r0
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fd89 	bl	800112c <MotorL_SetPWM>
        MotorR_SetPWM(MaxSpeed * 0.5);
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <main+0x3a0>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd fef0 	bl	8000404 <__aeabi_i2d>
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <main+0x3b0>)
 800262a:	f7fd ff55 	bl	80004d8 <__aeabi_dmul>
 800262e:	4603      	mov	r3, r0
 8002630:	460c      	mov	r4, r1
 8002632:	4618      	mov	r0, r3
 8002634:	4621      	mov	r1, r4
 8002636:	f7fe f9ff 	bl	8000a38 <__aeabi_d2iz>
 800263a:	4603      	mov	r3, r0
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fdad 	bl	800119c <MotorR_SetPWM>
        Servo_SetAngle(54);
 8002642:	481a      	ldr	r0, [pc, #104]	; (80026ac <main+0x3b8>)
 8002644:	f7fe fde2 	bl	800120c <Servo_SetAngle>
        CarState = LechTrai;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <main+0x39c>)
 800264a:	22ff      	movs	r2, #255	; 0xff
 800264c:	701a      	strb	r2, [r3, #0]
        continue;
 800264e:	e018      	b.n	8002682 <main+0x38e>
      }
      else if (FullWhiteFlag == 1)
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <main+0x3a8>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d10b      	bne.n	8002670 <main+0x37c>
      {
        FullWhiteFlag = 0;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <main+0x3a8>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
        MatLineFlag = 1;
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <main+0x398>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
        ChuyenLaneFlag = 0;
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <main+0x3a4>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
        CarState = DiThang;
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <main+0x39c>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
      }
    };
    if (MatLineFlag == 1)
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <main+0x398>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d102      	bne.n	800267e <main+0x38a>
    {
      Car_MatLine_Process();
 8002678:	f001 f9ba 	bl	80039f0 <Car_MatLine_Process>
 800267c:	e6e4      	b.n	8002448 <main+0x154>
    }
    else
    {
      Car_BamLine_Process();
 800267e:	f000 fdcf 	bl	8003220 <Car_BamLine_Process>
    LineDetect = 0;
 8002682:	e6e1      	b.n	8002448 <main+0x154>
 8002684:	20000018 	.word	0x20000018
 8002688:	20000205 	.word	0x20000205
 800268c:	20000209 	.word	0x20000209
 8002690:	20000206 	.word	0x20000206
 8002694:	20000010 	.word	0x20000010
 8002698:	20000207 	.word	0x20000207
 800269c:	20000208 	.word	0x20000208
 80026a0:	3fe80000 	.word	0x3fe80000
 80026a4:	3fe00000 	.word	0x3fe00000
 80026a8:	c2580000 	.word	0xc2580000
 80026ac:	42580000 	.word	0x42580000

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80026b4:	2002      	movs	r0, #2
 80026b6:	f7ff fa1d 	bl	8001af4 <LL_FLASH_SetLatency>
  while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80026ba:	bf00      	nop
 80026bc:	f7ff fa2e 	bl	8001b1c <LL_FLASH_GetLatency>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d1fa      	bne.n	80026bc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80026c6:	f7ff f905 	bl	80018d4 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1)
 80026ca:	bf00      	nop
 80026cc:	f7ff f910 	bl	80018f0 <LL_RCC_HSE_IsReady>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d1fa      	bne.n	80026cc <SystemClock_Config+0x1c>
  {
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80026d6:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80026da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80026de:	f7ff f9a9 	bl	8001a34 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80026e2:	f7ff f987 	bl	80019f4 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1)
 80026e6:	bf00      	nop
 80026e8:	f7ff f992 	bl	8001a10 <LL_RCC_PLL_IsReady>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d1fa      	bne.n	80026e8 <SystemClock_Config+0x38>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7ff f92e 	bl	8001954 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80026f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026fc:	f7ff f93e 	bl	800197c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002700:	2000      	movs	r0, #0
 8002702:	f7ff f94f 	bl	80019a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002706:	2002      	movs	r0, #2
 8002708:	f7ff f904 	bl	8001914 <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800270c:	bf00      	nop
 800270e:	f7ff f915 	bl	800193c <LL_RCC_GetSysClkSource>
 8002712:	4603      	mov	r3, r0
 8002714:	2b08      	cmp	r3, #8
 8002716:	d1fa      	bne.n	800270e <SystemClock_Config+0x5e>
  {
  }
  LL_Init1msTick(72000000);
 8002718:	4805      	ldr	r0, [pc, #20]	; (8002730 <SystemClock_Config+0x80>)
 800271a:	f002 fd87 	bl	800522c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 800271e:	4804      	ldr	r0, [pc, #16]	; (8002730 <SystemClock_Config+0x80>)
 8002720:	f002 fd92 	bl	8005248 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8002724:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002728:	f7ff f950 	bl	80019cc <LL_RCC_SetADCClockSource>
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	044aa200 	.word	0x044aa200

08002734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08e      	sub	sp, #56	; 0x38
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800273a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002766:	f44f 7000 	mov.w	r0, #512	; 0x200
 800276a:	f7ff f9ab 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800276e:	2004      	movs	r0, #4
 8002770:	f7ff f9a8 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2 | LL_GPIO_PIN_3 | LL_GPIO_PIN_4 | LL_GPIO_PIN_5 | LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8002774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002778:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	4619      	mov	r1, r3
 8002782:	486b      	ldr	r0, [pc, #428]	; (8002930 <MX_ADC1_Init+0x1fc>)
 8002784:	f001 fee4 	bl	8004550 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002788:	2200      	movs	r2, #0
 800278a:	2101      	movs	r1, #1
 800278c:	4869      	ldr	r0, [pc, #420]	; (8002934 <MX_ADC1_Init+0x200>)
 800278e:	f7fe ff11 	bl	80015b4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8002792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002796:	2101      	movs	r1, #1
 8002798:	4866      	ldr	r0, [pc, #408]	; (8002934 <MX_ADC1_Init+0x200>)
 800279a:	f7fe ffd9 	bl	8001750 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 800279e:	2220      	movs	r2, #32
 80027a0:	2101      	movs	r1, #1
 80027a2:	4864      	ldr	r0, [pc, #400]	; (8002934 <MX_ADC1_Init+0x200>)
 80027a4:	f7fe ff2a 	bl	80015fc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2101      	movs	r1, #1
 80027ac:	4861      	ldr	r0, [pc, #388]	; (8002934 <MX_ADC1_Init+0x200>)
 80027ae:	f7fe ff47 	bl	8001640 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	2101      	movs	r1, #1
 80027b6:	485f      	ldr	r0, [pc, #380]	; (8002934 <MX_ADC1_Init+0x200>)
 80027b8:	f7fe ff64 	bl	8001684 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80027bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c0:	2101      	movs	r1, #1
 80027c2:	485c      	ldr	r0, [pc, #368]	; (8002934 <MX_ADC1_Init+0x200>)
 80027c4:	f7fe ff80 	bl	80016c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80027c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027cc:	2101      	movs	r1, #1
 80027ce:	4859      	ldr	r0, [pc, #356]	; (8002934 <MX_ADC1_Init+0x200>)
 80027d0:	f7fe ff9c 	bl	800170c <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 8);
 80027d4:	2208      	movs	r2, #8
 80027d6:	2101      	movs	r1, #1
 80027d8:	4856      	ldr	r0, [pc, #344]	; (8002934 <MX_ADC1_Init+0x200>)
 80027da:	f7fe ffdb 	bl	8001794 <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&Sensor_ADC_Value);
 80027de:	4b56      	ldr	r3, [pc, #344]	; (8002938 <MX_ADC1_Init+0x204>)
 80027e0:	461a      	mov	r2, r3
 80027e2:	2101      	movs	r1, #1
 80027e4:	4853      	ldr	r0, [pc, #332]	; (8002934 <MX_ADC1_Init+0x200>)
 80027e6:	f7fe fff7 	bl	80017d8 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, ADC1_DR_Address);
 80027ea:	4a54      	ldr	r2, [pc, #336]	; (800293c <MX_ADC1_Init+0x208>)
 80027ec:	2101      	movs	r1, #1
 80027ee:	4851      	ldr	r0, [pc, #324]	; (8002934 <MX_ADC1_Init+0x200>)
 80027f0:	f7ff f80a 	bl	8001808 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 80027f4:	2101      	movs	r1, #1
 80027f6:	484f      	ldr	r0, [pc, #316]	; (8002934 <MX_ADC1_Init+0x200>)
 80027f8:	f7fe febe 	bl	8001578 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80027fc:	2300      	movs	r3, #0
 80027fe:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800280a:	4619      	mov	r1, r3
 800280c:	484c      	ldr	r0, [pc, #304]	; (8002940 <MX_ADC1_Init+0x20c>)
 800280e:	f001 fc6d 	bl	80040ec <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281a:	4619      	mov	r1, r3
 800281c:	4848      	ldr	r0, [pc, #288]	; (8002940 <MX_ADC1_Init+0x20c>)
 800281e:	f001 fc33 	bl	8004088 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002822:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8002826:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8002828:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800282c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002832:	2302      	movs	r3, #2
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800283c:	f107 0318 	add.w	r3, r7, #24
 8002840:	4619      	mov	r1, r3
 8002842:	483f      	ldr	r0, [pc, #252]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002844:	f001 fc79 	bl	800413a <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8002848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800284c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002850:	483b      	ldr	r0, [pc, #236]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002852:	f7fe fdc3 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002856:	2203      	movs	r2, #3
 8002858:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800285c:	4838      	ldr	r0, [pc, #224]	; (8002940 <MX_ADC1_Init+0x20c>)
 800285e:	f7fe fe02 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002862:	4a38      	ldr	r2, [pc, #224]	; (8002944 <MX_ADC1_Init+0x210>)
 8002864:	f240 2105 	movw	r1, #517	; 0x205
 8002868:	4835      	ldr	r0, [pc, #212]	; (8002940 <MX_ADC1_Init+0x20c>)
 800286a:	f7fe fdb7 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 800286e:	2203      	movs	r2, #3
 8002870:	4934      	ldr	r1, [pc, #208]	; (8002944 <MX_ADC1_Init+0x210>)
 8002872:	4833      	ldr	r0, [pc, #204]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002874:	f7fe fdf7 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8002878:	4a33      	ldr	r2, [pc, #204]	; (8002948 <MX_ADC1_Init+0x214>)
 800287a:	f240 210a 	movw	r1, #522	; 0x20a
 800287e:	4830      	ldr	r0, [pc, #192]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002880:	f7fe fdac 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002884:	2203      	movs	r2, #3
 8002886:	4930      	ldr	r1, [pc, #192]	; (8002948 <MX_ADC1_Init+0x214>)
 8002888:	482d      	ldr	r0, [pc, #180]	; (8002940 <MX_ADC1_Init+0x20c>)
 800288a:	f7fe fdec 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 800288e:	4a2f      	ldr	r2, [pc, #188]	; (800294c <MX_ADC1_Init+0x218>)
 8002890:	f240 210f 	movw	r1, #527	; 0x20f
 8002894:	482a      	ldr	r0, [pc, #168]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002896:	f7fe fda1 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 800289a:	2203      	movs	r2, #3
 800289c:	492b      	ldr	r1, [pc, #172]	; (800294c <MX_ADC1_Init+0x218>)
 800289e:	4828      	ldr	r0, [pc, #160]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028a0:	f7fe fde1 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 80028a4:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <MX_ADC1_Init+0x21c>)
 80028a6:	f44f 7105 	mov.w	r1, #532	; 0x214
 80028aa:	4825      	ldr	r0, [pc, #148]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028ac:	f7fe fd96 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80028b0:	2203      	movs	r2, #3
 80028b2:	4927      	ldr	r1, [pc, #156]	; (8002950 <MX_ADC1_Init+0x21c>)
 80028b4:	4822      	ldr	r0, [pc, #136]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028b6:	f7fe fdd6 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 80028ba:	4a26      	ldr	r2, [pc, #152]	; (8002954 <MX_ADC1_Init+0x220>)
 80028bc:	f240 2119 	movw	r1, #537	; 0x219
 80028c0:	481f      	ldr	r0, [pc, #124]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028c2:	f7fe fd8b 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80028c6:	2203      	movs	r2, #3
 80028c8:	4922      	ldr	r1, [pc, #136]	; (8002954 <MX_ADC1_Init+0x220>)
 80028ca:	481d      	ldr	r0, [pc, #116]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028cc:	f7fe fdcb 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 80028d0:	4a21      	ldr	r2, [pc, #132]	; (8002958 <MX_ADC1_Init+0x224>)
 80028d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028d6:	481a      	ldr	r0, [pc, #104]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028d8:	f7fe fd80 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80028dc:	2203      	movs	r2, #3
 80028de:	491e      	ldr	r1, [pc, #120]	; (8002958 <MX_ADC1_Init+0x224>)
 80028e0:	4817      	ldr	r0, [pc, #92]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028e2:	f7fe fdc0 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <MX_ADC1_Init+0x228>)
 80028e8:	f240 1105 	movw	r1, #261	; 0x105
 80028ec:	4814      	ldr	r0, [pc, #80]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028ee:	f7fe fd75 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80028f2:	2203      	movs	r2, #3
 80028f4:	4919      	ldr	r1, [pc, #100]	; (800295c <MX_ADC1_Init+0x228>)
 80028f6:	4812      	ldr	r0, [pc, #72]	; (8002940 <MX_ADC1_Init+0x20c>)
 80028f8:	f7fe fdb5 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 80028fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002900:	480f      	ldr	r0, [pc, #60]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002902:	f7fe fd9e 	bl	8001442 <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 8002906:	480e      	ldr	r0, [pc, #56]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002908:	f7fe fdf6 	bl	80014f8 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <MX_ADC1_Init+0x20c>)
 800290e:	f7fe fe02 	bl	8001516 <LL_ADC_StartCalibration>

  /* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while (LL_ADC_IsCalibrationOnGoing(ADC1))
 8002912:	bf00      	nop
 8002914:	480a      	ldr	r0, [pc, #40]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002916:	f7fe fe0d 	bl	8001534 <LL_ADC_IsCalibrationOnGoing>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f9      	bne.n	8002914 <MX_ADC1_Init+0x1e0>
    ;

  /* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart(ADC1);
 8002920:	4807      	ldr	r0, [pc, #28]	; (8002940 <MX_ADC1_Init+0x20c>)
 8002922:	f7fe fe19 	bl	8001558 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */
}
 8002926:	bf00      	nop
 8002928:	3738      	adds	r7, #56	; 0x38
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40010800 	.word	0x40010800
 8002934:	40020000 	.word	0x40020000
 8002938:	20000220 	.word	0x20000220
 800293c:	4001244c 	.word	0x4001244c
 8002940:	40012400 	.word	0x40012400
 8002944:	02300001 	.word	0x02300001
 8002948:	02600002 	.word	0x02600002
 800294c:	02900003 	.word	0x02900003
 8002950:	02c00004 	.word	0x02c00004
 8002954:	02f00005 	.word	0x02f00005
 8002958:	03200006 	.word	0x03200006
 800295c:	03500007 	.word	0x03500007

08002960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002966:	f107 0318 	add.w	r3, r7, #24
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	611a      	str	r2, [r3, #16]
 8002976:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002986:	2008      	movs	r0, #8
 8002988:	f7ff f89c 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <MX_I2C1_Init+0xa4>)
 800298e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002990:	2309      	movs	r3, #9
 8002992:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002998:	2304      	movs	r3, #4
 800299a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4819      	ldr	r0, [pc, #100]	; (8002a08 <MX_I2C1_Init+0xa8>)
 80029a2:	f001 fdd5 	bl	8004550 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 80029a6:	f7ff fc07 	bl	80021b8 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80029aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80029ae:	f7ff f871 	bl	8001a94 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80029b2:	4816      	ldr	r0, [pc, #88]	; (8002a0c <MX_I2C1_Init+0xac>)
 80029b4:	f7fe ff7f 	bl	80018b6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80029b8:	4814      	ldr	r0, [pc, #80]	; (8002a0c <MX_I2C1_Init+0xac>)
 80029ba:	f7fe ff5b 	bl	8001874 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80029be:	4813      	ldr	r0, [pc, #76]	; (8002a0c <MX_I2C1_Init+0xac>)
 80029c0:	f7fe ff49 	bl	8001856 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <MX_I2C1_Init+0xb0>)
 80029ca:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80029cc:	2300      	movs	r3, #0
 80029ce:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80029d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80029da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80029e0:	f107 0318 	add.w	r3, r7, #24
 80029e4:	4619      	mov	r1, r3
 80029e6:	4809      	ldr	r0, [pc, #36]	; (8002a0c <MX_I2C1_Init+0xac>)
 80029e8:	f001 fefe 	bl	80047e8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80029ec:	2100      	movs	r1, #0
 80029ee:	4807      	ldr	r0, [pc, #28]	; (8002a0c <MX_I2C1_Init+0xac>)
 80029f0:	f7fe ff4f 	bl	8001892 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_I2C1_Init+0xac>)
 80029f6:	f7fe ff1f 	bl	8001838 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */
}
 80029fa:	bf00      	nop
 80029fc:	3730      	adds	r7, #48	; 0x30
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	04030003 	.word	0x04030003
 8002a08:	40010c00 	.word	0x40010c00
 8002a0c:	40005400 	.word	0x40005400
 8002a10:	000186a0 	.word	0x000186a0

08002a14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b098      	sub	sp, #96	; 0x60
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a2e:	2220      	movs	r2, #32
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f002 fc40 	bl	80052b8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
 8002a48:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002a58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a5c:	f7ff f832 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a66:	2300      	movs	r3, #0
 8002a68:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 8002a6a:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002a6e:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002a7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a7e:	4619      	mov	r1, r3
 8002a80:	483c      	ldr	r0, [pc, #240]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002a82:	f002 f859 	bl	8004b38 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002a86:	483b      	ldr	r0, [pc, #236]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002a88:	f7ff f863 	bl	8001b52 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4839      	ldr	r0, [pc, #228]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002a90:	f7ff f8be 	bl	8001c10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002a94:	2360      	movs	r3, #96	; 0x60
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2101      	movs	r1, #1
 8002abc:	482d      	ldr	r0, [pc, #180]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002abe:	f002 f899 	bl	8004bf4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	482b      	ldr	r0, [pc, #172]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002ac6:	f7ff f861 	bl	8001b8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ace:	4829      	ldr	r0, [pc, #164]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002ad0:	f7ff f89e 	bl	8001c10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ae6:	4823      	ldr	r0, [pc, #140]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002ae8:	f002 f884 	bl	8004bf4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002af0:	4820      	ldr	r0, [pc, #128]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002af2:	f7ff f84b 	bl	8001b8c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002af6:	2100      	movs	r1, #0
 8002af8:	481e      	ldr	r0, [pc, #120]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002afa:	f7ff fa53 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002afe:	481d      	ldr	r0, [pc, #116]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002b00:	f7ff fa62 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4812      	ldr	r0, [pc, #72]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002b2c:	f002 f89a 	bl	8004c64 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8002b30:	4810      	ldr	r0, [pc, #64]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002b32:	f7ff fa8e 	bl	8002052 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM1, 0);
 8002b36:	2100      	movs	r1, #0
 8002b38:	480e      	ldr	r0, [pc, #56]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002b3a:	f7ff f819 	bl	8001b70 <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8002b3e:	480d      	ldr	r0, [pc, #52]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002b40:	f7ff fa51 	bl	8001fe6 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8002b44:	480b      	ldr	r0, [pc, #44]	; (8002b74 <MX_TIM1_Init+0x160>)
 8002b46:	f7fe fff5 	bl	8001b34 <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002b4a:	2004      	movs	r0, #4
 8002b4c:	f7fe ffba 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_10;
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <MX_TIM1_Init+0x164>)
 8002b52:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b54:	2309      	movs	r3, #9
 8002b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	463b      	mov	r3, r7
 8002b62:	4619      	mov	r1, r3
 8002b64:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_TIM1_Init+0x168>)
 8002b66:	f001 fcf3 	bl	8004550 <LL_GPIO_Init>
}
 8002b6a:	bf00      	nop
 8002b6c:	3760      	adds	r7, #96	; 0x60
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	04050005 	.word	0x04050005
 8002b7c:	40010800 	.word	0x40010800

08002b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b96:	463b      	mov	r3, r7
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f7fe ff75 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002baa:	2004      	movs	r0, #4
 8002bac:	f7fe ff8a 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002bb0:	2008      	movs	r0, #8
 8002bb2:	f7fe ff87 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <MX_TIM2_Init+0x154>)
 8002bb8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4845      	ldr	r0, [pc, #276]	; (8002cd8 <MX_TIM2_Init+0x158>)
 8002bc4:	f001 fcc4 	bl	8004550 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002bc8:	f640 0308 	movw	r3, #2056	; 0x808
 8002bcc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002bce:	2304      	movs	r3, #4
 8002bd0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4841      	ldr	r0, [pc, #260]	; (8002cdc <MX_TIM2_Init+0x15c>)
 8002bd8:	f001 fcba 	bl	8004550 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 0));
 8002bdc:	f7fe fb78 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2200      	movs	r2, #0
 8002be4:	2102      	movs	r1, #2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fbc6 	bl	8001378 <NVIC_EncodePriority>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	201c      	movs	r0, #28
 8002bf2:	f7fe fb97 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002bf6:	201c      	movs	r0, #28
 8002bf8:	f7fe fb78 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8002bfc:	f7ff fafc 	bl	80021f8 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8002c00:	2103      	movs	r1, #3
 8002c02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c06:	f7ff f9bb 	bl	8001f80 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c14:	f7ff f880 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c20:	f7ff f8c4 	bl	8001dac <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2101      	movs	r1, #1
 8002c28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c2c:	f7ff f908 	bl	8001e40 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2101      	movs	r1, #1
 8002c34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c38:	f7ff f94c 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002c3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c40:	2110      	movs	r1, #16
 8002c42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c46:	f7ff f867 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c52:	f7ff f8ab 	bl	8001dac <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2110      	movs	r1, #16
 8002c5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c5e:	f7ff f8ef 	bl	8001e40 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2110      	movs	r1, #16
 8002c66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c6a:	f7ff f933 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c7a:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c8a:	f001 ff55 	bl	8004b38 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002c8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c92:	f7fe ff5e 	bl	8001b52 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002c96:	2100      	movs	r1, #0
 8002c98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c9c:	f7ff f982 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002ca0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ca4:	f7ff f990 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  //  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
  //  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2, 0);
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cae:	f7fe ff5f 	bl	8001b70 <LL_TIM_SetCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 8002cb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cb6:	f7ff f9a5 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8002cba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cbe:	f7ff f9c8 	bl	8002052 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8002cc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cc6:	f7fe ff35 	bl	8001b34 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */
}
 8002cca:	bf00      	nop
 8002ccc:	3728      	adds	r7, #40	; 0x28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	04800080 	.word	0x04800080
 8002cd8:	40010800 	.word	0x40010800
 8002cdc:	40010c00 	.word	0x40010c00

08002ce0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf6:	463b      	mov	r3, r7
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002d04:	2002      	movs	r0, #2
 8002d06:	f7fe fec5 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002d0a:	2008      	movs	r0, #8
 8002d0c:	f7fe feda 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4 | LL_GPIO_PIN_5;
 8002d10:	f243 0330 	movw	r3, #12336	; 0x3030
 8002d14:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002d16:	2304      	movs	r3, #4
 8002d18:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1a:	463b      	mov	r3, r7
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4836      	ldr	r0, [pc, #216]	; (8002df8 <MX_TIM3_Init+0x118>)
 8002d20:	f001 fc16 	bl	8004550 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 0));
 8002d24:	f7fe fad4 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fb22 	bl	8001378 <NVIC_EncodePriority>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4619      	mov	r1, r3
 8002d38:	201d      	movs	r0, #29
 8002d3a:	f7fe faf3 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002d3e:	201d      	movs	r0, #29
 8002d40:	f7fe fad4 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 8002d44:	f7ff fa68 	bl	8002218 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002d48:	2103      	movs	r1, #3
 8002d4a:	482c      	ldr	r0, [pc, #176]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002d4c:	f7ff f918 	bl	8001f80 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002d50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d54:	2101      	movs	r1, #1
 8002d56:	4829      	ldr	r0, [pc, #164]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002d58:	f7fe ffde 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4826      	ldr	r0, [pc, #152]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002d62:	f7ff f823 	bl	8001dac <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4824      	ldr	r0, [pc, #144]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002d6c:	f7ff f868 	bl	8001e40 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2101      	movs	r1, #1
 8002d74:	4821      	ldr	r0, [pc, #132]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002d76:	f7ff f8ad 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002d7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d7e:	2110      	movs	r1, #16
 8002d80:	481e      	ldr	r0, [pc, #120]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002d82:	f7fe ffc9 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2110      	movs	r1, #16
 8002d8a:	481c      	ldr	r0, [pc, #112]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002d8c:	f7ff f80e 	bl	8001dac <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2110      	movs	r1, #16
 8002d94:	4819      	ldr	r0, [pc, #100]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002d96:	f7ff f853 	bl	8001e40 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	4817      	ldr	r0, [pc, #92]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002da0:	f7ff f898 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002db0:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002db2:	2300      	movs	r3, #0
 8002db4:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480f      	ldr	r0, [pc, #60]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002dbe:	f001 febb 	bl	8004b38 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002dc2:	480e      	ldr	r0, [pc, #56]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002dc4:	f7fe fec5 	bl	8001b52 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	480c      	ldr	r0, [pc, #48]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002dcc:	f7ff f8ea 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002dd0:	480a      	ldr	r0, [pc, #40]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002dd2:	f7ff f8f9 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3, 0);
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002dda:	f7fe fec9 	bl	8001b70 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM3);
 8002dde:	4807      	ldr	r0, [pc, #28]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002de0:	f7fe fea8 	bl	8001b34 <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM3);
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002de6:	f7ff f90d 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM3);
 8002dea:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_TIM3_Init+0x11c>)
 8002dec:	f7ff f931 	bl	8002052 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */
}
 8002df0:	bf00      	nop
 8002df2:	3728      	adds	r7, #40	; 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40010c00 	.word	0x40010c00
 8002dfc:	40000400 	.word	0x40000400

08002e00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	; 0x38
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	2220      	movs	r2, #32
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fa4b 	bl	80052b8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002e22:	2004      	movs	r0, #4
 8002e24:	f7fe fe36 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8002e28:	f7fe fa52 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe faa0 	bl	8001378 <NVIC_EncodePriority>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	201e      	movs	r0, #30
 8002e3e:	f7fe fa71 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002e42:	201e      	movs	r0, #30
 8002e44:	f7fe fa52 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 24;
 8002e48:	2318      	movs	r3, #24
 8002e4a:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 60000;
 8002e50:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e56:	2300      	movs	r3, #0
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e5e:	4619      	mov	r1, r3
 8002e60:	482d      	ldr	r0, [pc, #180]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002e62:	f001 fe69 	bl	8004b38 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002e66:	482c      	ldr	r0, [pc, #176]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002e68:	f7fe fe73 	bl	8001b52 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	482a      	ldr	r0, [pc, #168]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002e70:	f7ff f872 	bl	8001f58 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002e74:	2101      	movs	r1, #1
 8002e76:	4828      	ldr	r0, [pc, #160]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002e78:	f7fe feca 	bl	8001c10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002e7c:	2360      	movs	r3, #96	; 0x60
 8002e7e:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 4500;
 8002e88:	f241 1394 	movw	r3, #4500	; 0x1194
 8002e8c:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	461a      	mov	r2, r3
 8002e96:	2101      	movs	r1, #1
 8002e98:	481f      	ldr	r0, [pc, #124]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002e9a:	f001 feab 	bl	8004bf4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	481d      	ldr	r0, [pc, #116]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002ea2:	f7fe fe73 	bl	8001b8c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	4817      	ldr	r0, [pc, #92]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002eba:	f001 fe9b 	bl	8004bf4 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8002ebe:	2110      	movs	r1, #16
 8002ec0:	4815      	ldr	r0, [pc, #84]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002ec2:	f7fe fe63 	bl	8001b8c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4813      	ldr	r0, [pc, #76]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002eca:	f7ff f86b 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002ece:	4812      	ldr	r0, [pc, #72]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002ed0:	f7ff f87a 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4810      	ldr	r0, [pc, #64]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002ed8:	f7fe fedc 	bl	8001c94 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM4_Init 2 */

  LL_TIM_EnableIT_UPDATE(TIM4);
 8002edc:	480e      	ldr	r0, [pc, #56]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002ede:	f7ff f8b8 	bl	8002052 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM4);
 8002ee2:	480d      	ldr	r0, [pc, #52]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002ee4:	f7ff f88e 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>

  LL_TIM_EnableIT_CC1(TIM4);
 8002ee8:	480b      	ldr	r0, [pc, #44]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002eea:	f7ff f8c1 	bl	8002070 <LL_TIM_EnableIT_CC1>
  LL_TIM_ClearFlag_CC1(TIM4);
 8002eee:	480a      	ldr	r0, [pc, #40]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002ef0:	f7ff f895 	bl	800201e <LL_TIM_ClearFlag_CC1>
  //
  LL_TIM_EnableIT_CC2(TIM4);
 8002ef4:	4808      	ldr	r0, [pc, #32]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002ef6:	f7ff f8ca 	bl	800208e <LL_TIM_EnableIT_CC2>
  LL_TIM_ClearFlag_CC2(TIM4);
 8002efa:	4807      	ldr	r0, [pc, #28]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002efc:	f7ff f89c 	bl	8002038 <LL_TIM_ClearFlag_CC2>

  LL_TIM_SetCounter(TIM4, 0);
 8002f00:	2100      	movs	r1, #0
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002f04:	f7fe fe34 	bl	8001b70 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM4);
 8002f08:	4803      	ldr	r0, [pc, #12]	; (8002f18 <MX_TIM4_Init+0x118>)
 8002f0a:	f7fe fe13 	bl	8001b34 <LL_TIM_EnableCounter>

  /* USER CODE END TIM4_Init 2 */
}
 8002f0e:	bf00      	nop
 8002f10:	3738      	adds	r7, #56	; 0x38
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40000800 	.word	0x40000800

08002f1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
 8002f30:	611a      	str	r2, [r3, #16]
 8002f32:	615a      	str	r2, [r3, #20]
 8002f34:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f36:	463b      	mov	r3, r7
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002f44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f48:	f7fe fdbc 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002f4c:	2008      	movs	r0, #8
 8002f4e:	f7fe fdb9 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002f52:	f244 0340 	movw	r3, #16448	; 0x4040
 8002f56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f58:	2309      	movs	r3, #9
 8002f5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f64:	463b      	mov	r3, r7
 8002f66:	4619      	mov	r1, r3
 8002f68:	481f      	ldr	r0, [pc, #124]	; (8002fe8 <MX_USART1_UART_Init+0xcc>)
 8002f6a:	f001 faf1 	bl	8004550 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002f6e:	f248 0380 	movw	r3, #32896	; 0x8080
 8002f72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002f74:	2304      	movs	r3, #4
 8002f76:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f78:	463b      	mov	r3, r7
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	481a      	ldr	r0, [pc, #104]	; (8002fe8 <MX_USART1_UART_Init+0xcc>)
 8002f7e:	f001 fae7 	bl	8004550 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8002f82:	f7ff f929 	bl	80021d8 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 0));
 8002f86:	f7fe f9a3 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe f9f1 	bl	8001378 <NVIC_EncodePriority>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4619      	mov	r1, r3
 8002f9a:	2025      	movs	r0, #37	; 0x25
 8002f9c:	f7fe f9c2 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002fa0:	2025      	movs	r0, #37	; 0x25
 8002fa2:	f7fe f9a3 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002fa6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002faa:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb0:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002fba:	230c      	movs	r3, #12
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4807      	ldr	r0, [pc, #28]	; (8002fec <MX_USART1_UART_Init+0xd0>)
 8002fce:	f002 f8b3 	bl	8005138 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002fd2:	4806      	ldr	r0, [pc, #24]	; (8002fec <MX_USART1_UART_Init+0xd0>)
 8002fd4:	f7ff f879 	bl	80020ca <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002fd8:	4804      	ldr	r0, [pc, #16]	; (8002fec <MX_USART1_UART_Init+0xd0>)
 8002fda:	f7ff f867 	bl	80020ac <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002fde:	bf00      	nop
 8002fe0:	3730      	adds	r7, #48	; 0x30
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40013800 	.word	0x40013800

08002ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f7fe fd35 	bl	8001a64 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 8002ffa:	f7fe f969 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2200      	movs	r2, #0
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe f9b7 	bl	8001378 <NVIC_EncodePriority>
 800300a:	4603      	mov	r3, r0
 800300c:	4619      	mov	r1, r3
 800300e:	200b      	movs	r0, #11
 8003010:	f7fe f988 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003014:	200b      	movs	r0, #11
 8003016:	f7fe f969 	bl	80012ec <__NVIC_EnableIRQ>
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8003026:	f107 0318 	add.w	r3, r7, #24
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800303e:	2010      	movs	r0, #16
 8003040:	f7fe fd40 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003044:	2020      	movs	r0, #32
 8003046:	f7fe fd3d 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800304a:	2004      	movs	r0, #4
 800304c:	f7fe fd3a 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003050:	2008      	movs	r0, #8
 8003052:	f7fe fd37 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8003056:	494c      	ldr	r1, [pc, #304]	; (8003188 <MX_GPIO_Init+0x168>)
 8003058:	484c      	ldr	r0, [pc, #304]	; (800318c <MX_GPIO_Init+0x16c>)
 800305a:	f7ff f89d 	bl	8002198 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800305e:	494c      	ldr	r1, [pc, #304]	; (8003190 <MX_GPIO_Init+0x170>)
 8003060:	484c      	ldr	r0, [pc, #304]	; (8003194 <MX_GPIO_Init+0x174>)
 8003062:	f7ff f899 	bl	8002198 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9 | LL_GPIO_PIN_11);
 8003066:	494c      	ldr	r1, [pc, #304]	; (8003198 <MX_GPIO_Init+0x178>)
 8003068:	484c      	ldr	r0, [pc, #304]	; (800319c <MX_GPIO_Init+0x17c>)
 800306a:	f7ff f895 	bl	8002198 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800306e:	4b46      	ldr	r3, [pc, #280]	; (8003188 <MX_GPIO_Init+0x168>)
 8003070:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003072:	2301      	movs	r3, #1
 8003074:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003076:	2302      	movs	r3, #2
 8003078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4842      	ldr	r0, [pc, #264]	; (800318c <MX_GPIO_Init+0x16c>)
 8003084:	f001 fa64 	bl	8004550 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003088:	4b41      	ldr	r3, [pc, #260]	; (8003190 <MX_GPIO_Init+0x170>)
 800308a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800308c:	2301      	movs	r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003090:	2303      	movs	r3, #3
 8003092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003098:	1d3b      	adds	r3, r7, #4
 800309a:	4619      	mov	r1, r3
 800309c:	483d      	ldr	r0, [pc, #244]	; (8003194 <MX_GPIO_Init+0x174>)
 800309e:	f001 fa57 	bl	8004550 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <MX_GPIO_Init+0x180>)
 80030a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80030a6:	2301      	movs	r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80030aa:	2302      	movs	r3, #2
 80030ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4839      	ldr	r0, [pc, #228]	; (800319c <MX_GPIO_Init+0x17c>)
 80030b8:	f001 fa4a 	bl	8004550 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80030bc:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <MX_GPIO_Init+0x184>)
 80030be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80030c0:	2301      	movs	r3, #1
 80030c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80030c4:	2303      	movs	r3, #3
 80030c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	4619      	mov	r1, r3
 80030d0:	4832      	ldr	r0, [pc, #200]	; (800319c <MX_GPIO_Init+0x17c>)
 80030d2:	f001 fa3d 	bl	8004550 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 80030d6:	4934      	ldr	r1, [pc, #208]	; (80031a8 <MX_GPIO_Init+0x188>)
 80030d8:	2001      	movs	r0, #1
 80030da:	f7ff f8c5 	bl	8002268 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 80030de:	4933      	ldr	r1, [pc, #204]	; (80031ac <MX_GPIO_Init+0x18c>)
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7ff f8c1 	bl	8002268 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 80030e6:	4932      	ldr	r1, [pc, #200]	; (80031b0 <MX_GPIO_Init+0x190>)
 80030e8:	2001      	movs	r0, #1
 80030ea:	f7ff f8bd 	bl	8002268 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80030ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80030f8:	2300      	movs	r3, #0
 80030fa:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80030fc:	2301      	movs	r3, #1
 80030fe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003100:	f107 0318 	add.w	r3, r7, #24
 8003104:	4618      	mov	r0, r3
 8003106:	f001 f8ef 	bl	80042e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800310a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800310e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003110:	2301      	movs	r3, #1
 8003112:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003114:	2300      	movs	r3, #0
 8003116:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003118:	2301      	movs	r3, #1
 800311a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800311c:	f107 0318 	add.w	r3, r7, #24
 8003120:	4618      	mov	r0, r3
 8003122:	f001 f8e1 	bl	80042e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8003126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800312a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800312c:	2301      	movs	r3, #1
 800312e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003130:	2300      	movs	r3, #0
 8003132:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003134:	2301      	movs	r3, #1
 8003136:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003138:	f107 0318 	add.w	r3, r7, #24
 800313c:	4618      	mov	r0, r3
 800313e:	f001 f8d3 	bl	80042e8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8003142:	2204      	movs	r2, #4
 8003144:	491b      	ldr	r1, [pc, #108]	; (80031b4 <MX_GPIO_Init+0x194>)
 8003146:	4813      	ldr	r0, [pc, #76]	; (8003194 <MX_GPIO_Init+0x174>)
 8003148:	f7fe fff4 	bl	8002134 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 800314c:	2204      	movs	r2, #4
 800314e:	490e      	ldr	r1, [pc, #56]	; (8003188 <MX_GPIO_Init+0x168>)
 8003150:	4810      	ldr	r0, [pc, #64]	; (8003194 <MX_GPIO_Init+0x174>)
 8003152:	f7fe ffef 	bl	8002134 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8003156:	2204      	movs	r2, #4
 8003158:	4917      	ldr	r1, [pc, #92]	; (80031b8 <MX_GPIO_Init+0x198>)
 800315a:	480e      	ldr	r0, [pc, #56]	; (8003194 <MX_GPIO_Init+0x174>)
 800315c:	f7fe ffea 	bl	8002134 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 0));
 8003160:	f7fe f8b6 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8003164:	4603      	mov	r3, r0
 8003166:	2200      	movs	r2, #0
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe f904 	bl	8001378 <NVIC_EncodePriority>
 8003170:	4603      	mov	r3, r0
 8003172:	4619      	mov	r1, r3
 8003174:	2028      	movs	r0, #40	; 0x28
 8003176:	f7fe f8d5 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800317a:	2028      	movs	r0, #40	; 0x28
 800317c:	f7fe f8b6 	bl	80012ec <__NVIC_EnableIRQ>
}
 8003180:	bf00      	nop
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	04200020 	.word	0x04200020
 800318c:	40011000 	.word	0x40011000
 8003190:	04800080 	.word	0x04800080
 8003194:	40010c00 	.word	0x40010c00
 8003198:	040a000a 	.word	0x040a000a
 800319c:	40010800 	.word	0x40010800
 80031a0:	04020002 	.word	0x04020002
 80031a4:	04080008 	.word	0x04080008
 80031a8:	000f0003 	.word	0x000f0003
 80031ac:	00f00003 	.word	0x00f00003
 80031b0:	0f000003 	.word	0x0f000003
 80031b4:	04100010 	.word	0x04100010
 80031b8:	04400040 	.word	0x04400040

080031bc <Sensor_Convert_A2D>:
  {
    Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i]) / 2;
  }
}
void Sensor_Convert_A2D()
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
  for (int i = 0; i < 8; ++i)
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	e01c      	b.n	8003202 <Sensor_Convert_A2D+0x46>
  {
    if (Sensor_ADC_Value[i] < Sensor_Threshold[i])
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <Sensor_Convert_A2D+0x58>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	4911      	ldr	r1, [pc, #68]	; (8003218 <Sensor_Convert_A2D+0x5c>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d20e      	bcs.n	80031fc <Sensor_Convert_A2D+0x40>
    {
      sbi(LineDetect, (7 - i));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f1c3 0307 	rsb	r3, r3, #7
 80031e4:	2201      	movs	r2, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	b25a      	sxtb	r2, r3
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <Sensor_Convert_A2D+0x60>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	b25b      	sxtb	r3, r3
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <Sensor_Convert_A2D+0x60>)
 80031fa:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; ++i)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b07      	cmp	r3, #7
 8003206:	dddf      	ble.n	80031c8 <Sensor_Convert_A2D+0xc>
      //			  printf("0 ");
    }
  };
  //	printf("\n");
  //	LL_mDelay(500);
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000220 	.word	0x20000220
 8003218:	20000000 	.word	0x20000000
 800321c:	20000205 	.word	0x20000205

08003220 <Car_BamLine_Process>:
    Servo_SetAngle(ServoAngle);
    printf("Servo Angle: %g \n", ServoAngle);
  }
}
void Car_BamLine_Process()
{
 8003220:	b598      	push	{r3, r4, r7, lr}
 8003222:	af00      	add	r7, sp, #0
  if (CarState == LechTrai)
 8003224:	4bd2      	ldr	r3, [pc, #840]	; (8003570 <Car_BamLine_Process+0x350>)
 8003226:	f993 3000 	ldrsb.w	r3, [r3]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	f040 81d3 	bne.w	80035d8 <Car_BamLine_Process+0x3b8>
  {
    switch (LineDetect)
 8003232:	4bd0      	ldr	r3, [pc, #832]	; (8003574 <Car_BamLine_Process+0x354>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b08      	cmp	r3, #8
 8003238:	f000 81b0 	beq.w	800359c <Car_BamLine_Process+0x37c>
 800323c:	2b08      	cmp	r3, #8
 800323e:	dc0f      	bgt.n	8003260 <Car_BamLine_Process+0x40>
 8003240:	2b01      	cmp	r3, #1
 8003242:	f000 80cd 	beq.w	80033e0 <Car_BamLine_Process+0x1c0>
 8003246:	2b01      	cmp	r3, #1
 8003248:	dc03      	bgt.n	8003252 <Car_BamLine_Process+0x32>
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 809c 	beq.w	8003388 <Car_BamLine_Process+0x168>
      //			  case 0b00011100:
      //				  MotorR_SetPWM(MaxSpeed * 0.95);
      //				  MotorL_SetPWM(MaxSpeed * 1);
      //				  Servo_SetAngle(4);
    }
    return;
 8003250:	e3b8      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
    switch (LineDetect)
 8003252:	2b03      	cmp	r3, #3
 8003254:	f000 80f0 	beq.w	8003438 <Car_BamLine_Process+0x218>
 8003258:	2b07      	cmp	r3, #7
 800325a:	f000 810a 	beq.w	8003472 <Car_BamLine_Process+0x252>
    return;
 800325e:	e3b1      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
    switch (LineDetect)
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d039      	beq.n	80032d8 <Car_BamLine_Process+0xb8>
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	dc06      	bgt.n	8003276 <Car_BamLine_Process+0x56>
 8003268:	2b0c      	cmp	r3, #12
 800326a:	f000 813c 	beq.w	80034e6 <Car_BamLine_Process+0x2c6>
 800326e:	2b0e      	cmp	r3, #14
 8003270:	f000 811c 	beq.w	80034ac <Car_BamLine_Process+0x28c>
    return;
 8003274:	e3a6      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
    switch (LineDetect)
 8003276:	2b81      	cmp	r3, #129	; 0x81
 8003278:	d05a      	beq.n	8003330 <Car_BamLine_Process+0x110>
 800327a:	2bc0      	cmp	r3, #192	; 0xc0
 800327c:	d000      	beq.n	8003280 <Car_BamLine_Process+0x60>
    return;
 800327e:	e3a1      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
      MotorR_SetPWM(MaxSpeed * 0.6);
 8003280:	4bbd      	ldr	r3, [pc, #756]	; (8003578 <Car_BamLine_Process+0x358>)
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f8bd 	bl	8000404 <__aeabi_i2d>
 800328a:	a3a7      	add	r3, pc, #668	; (adr r3, 8003528 <Car_BamLine_Process+0x308>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f7fd f922 	bl	80004d8 <__aeabi_dmul>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	4618      	mov	r0, r3
 800329a:	4621      	mov	r1, r4
 800329c:	f7fd fbcc 	bl	8000a38 <__aeabi_d2iz>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd ff7a 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 0.8);
 80032a8:	4bb3      	ldr	r3, [pc, #716]	; (8003578 <Car_BamLine_Process+0x358>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd f8a9 	bl	8000404 <__aeabi_i2d>
 80032b2:	a39f      	add	r3, pc, #636	; (adr r3, 8003530 <Car_BamLine_Process+0x310>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f7fd f90e 	bl	80004d8 <__aeabi_dmul>
 80032bc:	4603      	mov	r3, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	4618      	mov	r0, r3
 80032c2:	4621      	mov	r1, r4
 80032c4:	f7fd fbb8 	bl	8000a38 <__aeabi_d2iz>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd ff2e 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(70); // 9
 80032d0:	48aa      	ldr	r0, [pc, #680]	; (800357c <Car_BamLine_Process+0x35c>)
 80032d2:	f7fd ff9b 	bl	800120c <Servo_SetAngle>
      break;
 80032d6:	e17e      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
      MotorR_SetPWM(MaxSpeed * 0.70);
 80032d8:	4ba7      	ldr	r3, [pc, #668]	; (8003578 <Car_BamLine_Process+0x358>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd f891 	bl	8000404 <__aeabi_i2d>
 80032e2:	a395      	add	r3, pc, #596	; (adr r3, 8003538 <Car_BamLine_Process+0x318>)
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f7fd f8f6 	bl	80004d8 <__aeabi_dmul>
 80032ec:	4603      	mov	r3, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	4618      	mov	r0, r3
 80032f2:	4621      	mov	r1, r4
 80032f4:	f7fd fba0 	bl	8000a38 <__aeabi_d2iz>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd ff4e 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 0.85);
 8003300:	4b9d      	ldr	r3, [pc, #628]	; (8003578 <Car_BamLine_Process+0x358>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f87d 	bl	8000404 <__aeabi_i2d>
 800330a:	a38d      	add	r3, pc, #564	; (adr r3, 8003540 <Car_BamLine_Process+0x320>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd f8e2 	bl	80004d8 <__aeabi_dmul>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	4618      	mov	r0, r3
 800331a:	4621      	mov	r1, r4
 800331c:	f7fd fb8c 	bl	8000a38 <__aeabi_d2iz>
 8003320:	4603      	mov	r3, r0
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd ff02 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(67); // 54
 8003328:	4895      	ldr	r0, [pc, #596]	; (8003580 <Car_BamLine_Process+0x360>)
 800332a:	f7fd ff6f 	bl	800120c <Servo_SetAngle>
      break;
 800332e:	e152      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
      MotorR_SetPWM(MaxSpeed * 0.78);
 8003330:	4b91      	ldr	r3, [pc, #580]	; (8003578 <Car_BamLine_Process+0x358>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f865 	bl	8000404 <__aeabi_i2d>
 800333a:	a383      	add	r3, pc, #524	; (adr r3, 8003548 <Car_BamLine_Process+0x328>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fd f8ca 	bl	80004d8 <__aeabi_dmul>
 8003344:	4603      	mov	r3, r0
 8003346:	460c      	mov	r4, r1
 8003348:	4618      	mov	r0, r3
 800334a:	4621      	mov	r1, r4
 800334c:	f7fd fb74 	bl	8000a38 <__aeabi_d2iz>
 8003350:	4603      	mov	r3, r0
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd ff22 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 0.9);
 8003358:	4b87      	ldr	r3, [pc, #540]	; (8003578 <Car_BamLine_Process+0x358>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f851 	bl	8000404 <__aeabi_i2d>
 8003362:	a37b      	add	r3, pc, #492	; (adr r3, 8003550 <Car_BamLine_Process+0x330>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fd f8b6 	bl	80004d8 <__aeabi_dmul>
 800336c:	4603      	mov	r3, r0
 800336e:	460c      	mov	r4, r1
 8003370:	4618      	mov	r0, r3
 8003372:	4621      	mov	r1, r4
 8003374:	f7fd fb60 	bl	8000a38 <__aeabi_d2iz>
 8003378:	4603      	mov	r3, r0
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd fed6 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(57);
 8003380:	4880      	ldr	r0, [pc, #512]	; (8003584 <Car_BamLine_Process+0x364>)
 8003382:	f7fd ff43 	bl	800120c <Servo_SetAngle>
      break;
 8003386:	e126      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
      MotorR_SetPWM(MaxSpeed * 0.85);
 8003388:	4b7b      	ldr	r3, [pc, #492]	; (8003578 <Car_BamLine_Process+0x358>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd f839 	bl	8000404 <__aeabi_i2d>
 8003392:	a36b      	add	r3, pc, #428	; (adr r3, 8003540 <Car_BamLine_Process+0x320>)
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f7fd f89e 	bl	80004d8 <__aeabi_dmul>
 800339c:	4603      	mov	r3, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	4618      	mov	r0, r3
 80033a2:	4621      	mov	r1, r4
 80033a4:	f7fd fb48 	bl	8000a38 <__aeabi_d2iz>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fef6 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 0.95);
 80033b0:	4b71      	ldr	r3, [pc, #452]	; (8003578 <Car_BamLine_Process+0x358>)
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fd f825 	bl	8000404 <__aeabi_i2d>
 80033ba:	a367      	add	r3, pc, #412	; (adr r3, 8003558 <Car_BamLine_Process+0x338>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f7fd f88a 	bl	80004d8 <__aeabi_dmul>
 80033c4:	4603      	mov	r3, r0
 80033c6:	460c      	mov	r4, r1
 80033c8:	4618      	mov	r0, r3
 80033ca:	4621      	mov	r1, r4
 80033cc:	f7fd fb34 	bl	8000a38 <__aeabi_d2iz>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd feaa 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(47); // 43
 80033d8:	486b      	ldr	r0, [pc, #428]	; (8003588 <Car_BamLine_Process+0x368>)
 80033da:	f7fd ff17 	bl	800120c <Servo_SetAngle>
      break;
 80033de:	e0fa      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
      MotorR_SetPWM(MaxSpeed * 0.88);
 80033e0:	4b65      	ldr	r3, [pc, #404]	; (8003578 <Car_BamLine_Process+0x358>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd f80d 	bl	8000404 <__aeabi_i2d>
 80033ea:	a35d      	add	r3, pc, #372	; (adr r3, 8003560 <Car_BamLine_Process+0x340>)
 80033ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f0:	f7fd f872 	bl	80004d8 <__aeabi_dmul>
 80033f4:	4603      	mov	r3, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	4618      	mov	r0, r3
 80033fa:	4621      	mov	r1, r4
 80033fc:	f7fd fb1c 	bl	8000a38 <__aeabi_d2iz>
 8003400:	4603      	mov	r3, r0
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd feca 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 0.95);
 8003408:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <Car_BamLine_Process+0x358>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fc fff9 	bl	8000404 <__aeabi_i2d>
 8003412:	a351      	add	r3, pc, #324	; (adr r3, 8003558 <Car_BamLine_Process+0x338>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fd f85e 	bl	80004d8 <__aeabi_dmul>
 800341c:	4603      	mov	r3, r0
 800341e:	460c      	mov	r4, r1
 8003420:	4618      	mov	r0, r3
 8003422:	4621      	mov	r1, r4
 8003424:	f7fd fb08 	bl	8000a38 <__aeabi_d2iz>
 8003428:	4603      	mov	r3, r0
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fe7e 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(43); // 37
 8003430:	4856      	ldr	r0, [pc, #344]	; (800358c <Car_BamLine_Process+0x36c>)
 8003432:	f7fd feeb 	bl	800120c <Servo_SetAngle>
      break;
 8003436:	e0ce      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
      MotorR_SetPWM(MaxSpeed * 0.85);
 8003438:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <Car_BamLine_Process+0x358>)
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fc ffe1 	bl	8000404 <__aeabi_i2d>
 8003442:	a33f      	add	r3, pc, #252	; (adr r3, 8003540 <Car_BamLine_Process+0x320>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fd f846 	bl	80004d8 <__aeabi_dmul>
 800344c:	4603      	mov	r3, r0
 800344e:	460c      	mov	r4, r1
 8003450:	4618      	mov	r0, r3
 8003452:	4621      	mov	r1, r4
 8003454:	f7fd faf0 	bl	8000a38 <__aeabi_d2iz>
 8003458:	4603      	mov	r3, r0
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fe9e 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 1);
 8003460:	4b45      	ldr	r3, [pc, #276]	; (8003578 <Car_BamLine_Process+0x358>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fe61 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(31); //26
 800346a:	4849      	ldr	r0, [pc, #292]	; (8003590 <Car_BamLine_Process+0x370>)
 800346c:	f7fd fece 	bl	800120c <Servo_SetAngle>
      break;
 8003470:	e0b1      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
      MotorR_SetPWM(MaxSpeed * 0.90);
 8003472:	4b41      	ldr	r3, [pc, #260]	; (8003578 <Car_BamLine_Process+0x358>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fc ffc4 	bl	8000404 <__aeabi_i2d>
 800347c:	a334      	add	r3, pc, #208	; (adr r3, 8003550 <Car_BamLine_Process+0x330>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fd f829 	bl	80004d8 <__aeabi_dmul>
 8003486:	4603      	mov	r3, r0
 8003488:	460c      	mov	r4, r1
 800348a:	4618      	mov	r0, r3
 800348c:	4621      	mov	r1, r4
 800348e:	f7fd fad3 	bl	8000a38 <__aeabi_d2iz>
 8003492:	4603      	mov	r3, r0
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd fe81 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 1);
 800349a:	4b37      	ldr	r3, [pc, #220]	; (8003578 <Car_BamLine_Process+0x358>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fe44 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(23); // 18
 80034a4:	483b      	ldr	r0, [pc, #236]	; (8003594 <Car_BamLine_Process+0x374>)
 80034a6:	f7fd feb1 	bl	800120c <Servo_SetAngle>
      break;
 80034aa:	e094      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
      MotorR_SetPWM(MaxSpeed * 0.93);
 80034ac:	4b32      	ldr	r3, [pc, #200]	; (8003578 <Car_BamLine_Process+0x358>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fc ffa7 	bl	8000404 <__aeabi_i2d>
 80034b6:	a32c      	add	r3, pc, #176	; (adr r3, 8003568 <Car_BamLine_Process+0x348>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fd f80c 	bl	80004d8 <__aeabi_dmul>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	4618      	mov	r0, r3
 80034c6:	4621      	mov	r1, r4
 80034c8:	f7fd fab6 	bl	8000a38 <__aeabi_d2iz>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd fe64 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 1);
 80034d4:	4b28      	ldr	r3, [pc, #160]	; (8003578 <Car_BamLine_Process+0x358>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd fe27 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(13); //11
 80034de:	482e      	ldr	r0, [pc, #184]	; (8003598 <Car_BamLine_Process+0x378>)
 80034e0:	f7fd fe94 	bl	800120c <Servo_SetAngle>
      break;
 80034e4:	e077      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
      MotorR_SetPWM(MaxSpeed * 0.95);
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <Car_BamLine_Process+0x358>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fc ff8a 	bl	8000404 <__aeabi_i2d>
 80034f0:	a319      	add	r3, pc, #100	; (adr r3, 8003558 <Car_BamLine_Process+0x338>)
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	f7fc ffef 	bl	80004d8 <__aeabi_dmul>
 80034fa:	4603      	mov	r3, r0
 80034fc:	460c      	mov	r4, r1
 80034fe:	4618      	mov	r0, r3
 8003500:	4621      	mov	r1, r4
 8003502:	f7fd fa99 	bl	8000a38 <__aeabi_d2iz>
 8003506:	4603      	mov	r3, r0
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fe47 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 1);
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <Car_BamLine_Process+0x358>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fe0a 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(8);
 8003518:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
 800351c:	f7fd fe76 	bl	800120c <Servo_SetAngle>
      break;
 8003520:	e059      	b.n	80035d6 <Car_BamLine_Process+0x3b6>
 8003522:	bf00      	nop
 8003524:	f3af 8000 	nop.w
 8003528:	33333333 	.word	0x33333333
 800352c:	3fe33333 	.word	0x3fe33333
 8003530:	9999999a 	.word	0x9999999a
 8003534:	3fe99999 	.word	0x3fe99999
 8003538:	66666666 	.word	0x66666666
 800353c:	3fe66666 	.word	0x3fe66666
 8003540:	33333333 	.word	0x33333333
 8003544:	3feb3333 	.word	0x3feb3333
 8003548:	8f5c28f6 	.word	0x8f5c28f6
 800354c:	3fe8f5c2 	.word	0x3fe8f5c2
 8003550:	cccccccd 	.word	0xcccccccd
 8003554:	3feccccc 	.word	0x3feccccc
 8003558:	66666666 	.word	0x66666666
 800355c:	3fee6666 	.word	0x3fee6666
 8003560:	c28f5c29 	.word	0xc28f5c29
 8003564:	3fec28f5 	.word	0x3fec28f5
 8003568:	5c28f5c3 	.word	0x5c28f5c3
 800356c:	3fedc28f 	.word	0x3fedc28f
 8003570:	20000206 	.word	0x20000206
 8003574:	20000205 	.word	0x20000205
 8003578:	20000010 	.word	0x20000010
 800357c:	428c0000 	.word	0x428c0000
 8003580:	42860000 	.word	0x42860000
 8003584:	42640000 	.word	0x42640000
 8003588:	423c0000 	.word	0x423c0000
 800358c:	422c0000 	.word	0x422c0000
 8003590:	41f80000 	.word	0x41f80000
 8003594:	41b80000 	.word	0x41b80000
 8003598:	41500000 	.word	0x41500000
      MotorL_SetPWM(MaxSpeed * 0.98);
 800359c:	4bd2      	ldr	r3, [pc, #840]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ff2f 	bl	8000404 <__aeabi_i2d>
 80035a6:	a3be      	add	r3, pc, #760	; (adr r3, 80038a0 <Car_BamLine_Process+0x680>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fc ff94 	bl	80004d8 <__aeabi_dmul>
 80035b0:	4603      	mov	r3, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	4618      	mov	r0, r3
 80035b6:	4621      	mov	r1, r4
 80035b8:	f7fd fa3e 	bl	8000a38 <__aeabi_d2iz>
 80035bc:	4603      	mov	r3, r0
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fdb4 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 1);
 80035c4:	4bc8      	ldr	r3, [pc, #800]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd fde7 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(3);
 80035ce:	48c7      	ldr	r0, [pc, #796]	; (80038ec <Car_BamLine_Process+0x6cc>)
 80035d0:	f7fd fe1c 	bl	800120c <Servo_SetAngle>
      break;
 80035d4:	bf00      	nop
    return;
 80035d6:	e1f5      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
  };
  if (CarState == LechPhai)
 80035d8:	4bc5      	ldr	r3, [pc, #788]	; (80038f0 <Car_BamLine_Process+0x6d0>)
 80035da:	f993 3000 	ldrsb.w	r3, [r3]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	f040 81f0 	bne.w	80039c4 <Car_BamLine_Process+0x7a4>
  {
    switch (LineDetect)
 80035e4:	4bc3      	ldr	r3, [pc, #780]	; (80038f4 <Car_BamLine_Process+0x6d4>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b30      	cmp	r3, #48	; 0x30
 80035ea:	f000 81b0 	beq.w	800394e <Car_BamLine_Process+0x72e>
 80035ee:	2b30      	cmp	r3, #48	; 0x30
 80035f0:	dc0d      	bgt.n	800360e <Car_BamLine_Process+0x3ee>
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d049      	beq.n	800368a <Car_BamLine_Process+0x46a>
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	dc03      	bgt.n	8003602 <Car_BamLine_Process+0x3e2>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 809d 	beq.w	800373a <Car_BamLine_Process+0x51a>
      //			  case 0b00111000:
      //				  MotorL_SetPWM(MaxSpeed * 0.95);
      //				  MotorR_SetPWM(MaxSpeed * 1);
      //				  Servo_SetAngle(-0);
    }
    return;
 8003600:	e1e0      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
    switch (LineDetect)
 8003602:	2b03      	cmp	r3, #3
 8003604:	d015      	beq.n	8003632 <Car_BamLine_Process+0x412>
 8003606:	2b10      	cmp	r3, #16
 8003608:	f000 81be 	beq.w	8003988 <Car_BamLine_Process+0x768>
    return;
 800360c:	e1da      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
    switch (LineDetect)
 800360e:	2b81      	cmp	r3, #129	; 0x81
 8003610:	d067      	beq.n	80036e2 <Car_BamLine_Process+0x4c2>
 8003612:	2b81      	cmp	r3, #129	; 0x81
 8003614:	dc06      	bgt.n	8003624 <Car_BamLine_Process+0x404>
 8003616:	2b70      	cmp	r3, #112	; 0x70
 8003618:	f000 817c 	beq.w	8003914 <Car_BamLine_Process+0x6f4>
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	f000 80b8 	beq.w	8003792 <Car_BamLine_Process+0x572>
    return;
 8003622:	e1cf      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
    switch (LineDetect)
 8003624:	2bc0      	cmp	r3, #192	; 0xc0
 8003626:	f000 80e0 	beq.w	80037ea <Car_BamLine_Process+0x5ca>
 800362a:	2be0      	cmp	r3, #224	; 0xe0
 800362c:	f000 8109 	beq.w	8003842 <Car_BamLine_Process+0x622>
    return;
 8003630:	e1c8      	b.n	80039c4 <Car_BamLine_Process+0x7a4>
      MotorR_SetPWM(MaxSpeed * 0.6);
 8003632:	4bad      	ldr	r3, [pc, #692]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc fee4 	bl	8000404 <__aeabi_i2d>
 800363c:	a39a      	add	r3, pc, #616	; (adr r3, 80038a8 <Car_BamLine_Process+0x688>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fc ff49 	bl	80004d8 <__aeabi_dmul>
 8003646:	4603      	mov	r3, r0
 8003648:	460c      	mov	r4, r1
 800364a:	4618      	mov	r0, r3
 800364c:	4621      	mov	r1, r4
 800364e:	f7fd f9f3 	bl	8000a38 <__aeabi_d2iz>
 8003652:	4603      	mov	r3, r0
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fda1 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 0.8);
 800365a:	4ba3      	ldr	r3, [pc, #652]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc fed0 	bl	8000404 <__aeabi_i2d>
 8003664:	a392      	add	r3, pc, #584	; (adr r3, 80038b0 <Car_BamLine_Process+0x690>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f7fc ff35 	bl	80004d8 <__aeabi_dmul>
 800366e:	4603      	mov	r3, r0
 8003670:	460c      	mov	r4, r1
 8003672:	4618      	mov	r0, r3
 8003674:	4621      	mov	r1, r4
 8003676:	f7fd f9df 	bl	8000a38 <__aeabi_d2iz>
 800367a:	4603      	mov	r3, r0
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd fd55 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(-70); // 9
 8003682:	489d      	ldr	r0, [pc, #628]	; (80038f8 <Car_BamLine_Process+0x6d8>)
 8003684:	f7fd fdc2 	bl	800120c <Servo_SetAngle>
      break;
 8003688:	e19b      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
      MotorL_SetPWM(MaxSpeed * 0.70);
 800368a:	4b97      	ldr	r3, [pc, #604]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc feb8 	bl	8000404 <__aeabi_i2d>
 8003694:	a388      	add	r3, pc, #544	; (adr r3, 80038b8 <Car_BamLine_Process+0x698>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fc ff1d 	bl	80004d8 <__aeabi_dmul>
 800369e:	4603      	mov	r3, r0
 80036a0:	460c      	mov	r4, r1
 80036a2:	4618      	mov	r0, r3
 80036a4:	4621      	mov	r1, r4
 80036a6:	f7fd f9c7 	bl	8000a38 <__aeabi_d2iz>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fd3d 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 0.85);
 80036b2:	4b8d      	ldr	r3, [pc, #564]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fc fea4 	bl	8000404 <__aeabi_i2d>
 80036bc:	a380      	add	r3, pc, #512	; (adr r3, 80038c0 <Car_BamLine_Process+0x6a0>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f7fc ff09 	bl	80004d8 <__aeabi_dmul>
 80036c6:	4603      	mov	r3, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	4618      	mov	r0, r3
 80036cc:	4621      	mov	r1, r4
 80036ce:	f7fd f9b3 	bl	8000a38 <__aeabi_d2iz>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fd61 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(-67); // -54
 80036da:	4888      	ldr	r0, [pc, #544]	; (80038fc <Car_BamLine_Process+0x6dc>)
 80036dc:	f7fd fd96 	bl	800120c <Servo_SetAngle>
      break;
 80036e0:	e16f      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
      MotorR_SetPWM(MaxSpeed * 0.80);
 80036e2:	4b81      	ldr	r3, [pc, #516]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc fe8c 	bl	8000404 <__aeabi_i2d>
 80036ec:	a370      	add	r3, pc, #448	; (adr r3, 80038b0 <Car_BamLine_Process+0x690>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f7fc fef1 	bl	80004d8 <__aeabi_dmul>
 80036f6:	4603      	mov	r3, r0
 80036f8:	460c      	mov	r4, r1
 80036fa:	4618      	mov	r0, r3
 80036fc:	4621      	mov	r1, r4
 80036fe:	f7fd f99b 	bl	8000a38 <__aeabi_d2iz>
 8003702:	4603      	mov	r3, r0
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fd49 	bl	800119c <MotorR_SetPWM>
      MotorL_SetPWM(MaxSpeed * 0.90);
 800370a:	4b77      	ldr	r3, [pc, #476]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc fe78 	bl	8000404 <__aeabi_i2d>
 8003714:	a36c      	add	r3, pc, #432	; (adr r3, 80038c8 <Car_BamLine_Process+0x6a8>)
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f7fc fedd 	bl	80004d8 <__aeabi_dmul>
 800371e:	4603      	mov	r3, r0
 8003720:	460c      	mov	r4, r1
 8003722:	4618      	mov	r0, r3
 8003724:	4621      	mov	r1, r4
 8003726:	f7fd f987 	bl	8000a38 <__aeabi_d2iz>
 800372a:	4603      	mov	r3, r0
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fcfd 	bl	800112c <MotorL_SetPWM>
      Servo_SetAngle(-57); // 54
 8003732:	4873      	ldr	r0, [pc, #460]	; (8003900 <Car_BamLine_Process+0x6e0>)
 8003734:	f7fd fd6a 	bl	800120c <Servo_SetAngle>
      break;
 8003738:	e143      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
      MotorL_SetPWM(MaxSpeed * 0.85);
 800373a:	4b6b      	ldr	r3, [pc, #428]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7fc fe60 	bl	8000404 <__aeabi_i2d>
 8003744:	a35e      	add	r3, pc, #376	; (adr r3, 80038c0 <Car_BamLine_Process+0x6a0>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f7fc fec5 	bl	80004d8 <__aeabi_dmul>
 800374e:	4603      	mov	r3, r0
 8003750:	460c      	mov	r4, r1
 8003752:	4618      	mov	r0, r3
 8003754:	4621      	mov	r1, r4
 8003756:	f7fd f96f 	bl	8000a38 <__aeabi_d2iz>
 800375a:	4603      	mov	r3, r0
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd fce5 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 0.90);
 8003762:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc fe4c 	bl	8000404 <__aeabi_i2d>
 800376c:	a356      	add	r3, pc, #344	; (adr r3, 80038c8 <Car_BamLine_Process+0x6a8>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc feb1 	bl	80004d8 <__aeabi_dmul>
 8003776:	4603      	mov	r3, r0
 8003778:	460c      	mov	r4, r1
 800377a:	4618      	mov	r0, r3
 800377c:	4621      	mov	r1, r4
 800377e:	f7fd f95b 	bl	8000a38 <__aeabi_d2iz>
 8003782:	4603      	mov	r3, r0
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd fd09 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(-50); // -44.4
 800378a:	485e      	ldr	r0, [pc, #376]	; (8003904 <Car_BamLine_Process+0x6e4>)
 800378c:	f7fd fd3e 	bl	800120c <Servo_SetAngle>
      break;
 8003790:	e117      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
      MotorL_SetPWM(MaxSpeed * 0.83);
 8003792:	4b55      	ldr	r3, [pc, #340]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fc fe34 	bl	8000404 <__aeabi_i2d>
 800379c:	a34c      	add	r3, pc, #304	; (adr r3, 80038d0 <Car_BamLine_Process+0x6b0>)
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	f7fc fe99 	bl	80004d8 <__aeabi_dmul>
 80037a6:	4603      	mov	r3, r0
 80037a8:	460c      	mov	r4, r1
 80037aa:	4618      	mov	r0, r3
 80037ac:	4621      	mov	r1, r4
 80037ae:	f7fd f943 	bl	8000a38 <__aeabi_d2iz>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd fcb9 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 0.95);
 80037ba:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fe20 	bl	8000404 <__aeabi_i2d>
 80037c4:	a344      	add	r3, pc, #272	; (adr r3, 80038d8 <Car_BamLine_Process+0x6b8>)
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f7fc fe85 	bl	80004d8 <__aeabi_dmul>
 80037ce:	4603      	mov	r3, r0
 80037d0:	460c      	mov	r4, r1
 80037d2:	4618      	mov	r0, r3
 80037d4:	4621      	mov	r1, r4
 80037d6:	f7fd f92f 	bl	8000a38 <__aeabi_d2iz>
 80037da:	4603      	mov	r3, r0
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fcdd 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(-41); //-24
 80037e2:	4849      	ldr	r0, [pc, #292]	; (8003908 <Car_BamLine_Process+0x6e8>)
 80037e4:	f7fd fd12 	bl	800120c <Servo_SetAngle>
      break;
 80037e8:	e0eb      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
      MotorL_SetPWM(MaxSpeed * 0.87);
 80037ea:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fc fe08 	bl	8000404 <__aeabi_i2d>
 80037f4:	a33a      	add	r3, pc, #232	; (adr r3, 80038e0 <Car_BamLine_Process+0x6c0>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f7fc fe6d 	bl	80004d8 <__aeabi_dmul>
 80037fe:	4603      	mov	r3, r0
 8003800:	460c      	mov	r4, r1
 8003802:	4618      	mov	r0, r3
 8003804:	4621      	mov	r1, r4
 8003806:	f7fd f917 	bl	8000a38 <__aeabi_d2iz>
 800380a:	4603      	mov	r3, r0
 800380c:	4618      	mov	r0, r3
 800380e:	f7fd fc8d 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 0.95);
 8003812:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fdf4 	bl	8000404 <__aeabi_i2d>
 800381c:	a32e      	add	r3, pc, #184	; (adr r3, 80038d8 <Car_BamLine_Process+0x6b8>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc fe59 	bl	80004d8 <__aeabi_dmul>
 8003826:	4603      	mov	r3, r0
 8003828:	460c      	mov	r4, r1
 800382a:	4618      	mov	r0, r3
 800382c:	4621      	mov	r1, r4
 800382e:	f7fd f903 	bl	8000a38 <__aeabi_d2iz>
 8003832:	4603      	mov	r3, r0
 8003834:	4618      	mov	r0, r3
 8003836:	f7fd fcb1 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(-31); //-24
 800383a:	4834      	ldr	r0, [pc, #208]	; (800390c <Car_BamLine_Process+0x6ec>)
 800383c:	f7fd fce6 	bl	800120c <Servo_SetAngle>
      break;
 8003840:	e0bf      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
      MotorL_SetPWM(MaxSpeed * 0.90);
 8003842:	4b29      	ldr	r3, [pc, #164]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fddc 	bl	8000404 <__aeabi_i2d>
 800384c:	a31e      	add	r3, pc, #120	; (adr r3, 80038c8 <Car_BamLine_Process+0x6a8>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f7fc fe41 	bl	80004d8 <__aeabi_dmul>
 8003856:	4603      	mov	r3, r0
 8003858:	460c      	mov	r4, r1
 800385a:	4618      	mov	r0, r3
 800385c:	4621      	mov	r1, r4
 800385e:	f7fd f8eb 	bl	8000a38 <__aeabi_d2iz>
 8003862:	4603      	mov	r3, r0
 8003864:	4618      	mov	r0, r3
 8003866:	f7fd fc61 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 0.95);
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <Car_BamLine_Process+0x6c8>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fdc8 	bl	8000404 <__aeabi_i2d>
 8003874:	a318      	add	r3, pc, #96	; (adr r3, 80038d8 <Car_BamLine_Process+0x6b8>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	f7fc fe2d 	bl	80004d8 <__aeabi_dmul>
 800387e:	4603      	mov	r3, r0
 8003880:	460c      	mov	r4, r1
 8003882:	4618      	mov	r0, r3
 8003884:	4621      	mov	r1, r4
 8003886:	f7fd f8d7 	bl	8000a38 <__aeabi_d2iz>
 800388a:	4603      	mov	r3, r0
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fc85 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(-25); // -21
 8003892:	481f      	ldr	r0, [pc, #124]	; (8003910 <Car_BamLine_Process+0x6f0>)
 8003894:	f7fd fcba 	bl	800120c <Servo_SetAngle>
      break;
 8003898:	e093      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
 800389a:	bf00      	nop
 800389c:	f3af 8000 	nop.w
 80038a0:	f5c28f5c 	.word	0xf5c28f5c
 80038a4:	3fef5c28 	.word	0x3fef5c28
 80038a8:	33333333 	.word	0x33333333
 80038ac:	3fe33333 	.word	0x3fe33333
 80038b0:	9999999a 	.word	0x9999999a
 80038b4:	3fe99999 	.word	0x3fe99999
 80038b8:	66666666 	.word	0x66666666
 80038bc:	3fe66666 	.word	0x3fe66666
 80038c0:	33333333 	.word	0x33333333
 80038c4:	3feb3333 	.word	0x3feb3333
 80038c8:	cccccccd 	.word	0xcccccccd
 80038cc:	3feccccc 	.word	0x3feccccc
 80038d0:	28f5c28f 	.word	0x28f5c28f
 80038d4:	3fea8f5c 	.word	0x3fea8f5c
 80038d8:	66666666 	.word	0x66666666
 80038dc:	3fee6666 	.word	0x3fee6666
 80038e0:	3d70a3d7 	.word	0x3d70a3d7
 80038e4:	3febd70a 	.word	0x3febd70a
 80038e8:	20000010 	.word	0x20000010
 80038ec:	40400000 	.word	0x40400000
 80038f0:	20000206 	.word	0x20000206
 80038f4:	20000205 	.word	0x20000205
 80038f8:	c28c0000 	.word	0xc28c0000
 80038fc:	c2860000 	.word	0xc2860000
 8003900:	c2640000 	.word	0xc2640000
 8003904:	c2480000 	.word	0xc2480000
 8003908:	c2240000 	.word	0xc2240000
 800390c:	c1f80000 	.word	0xc1f80000
 8003910:	c1c80000 	.word	0xc1c80000
      MotorL_SetPWM(MaxSpeed * 0.87);
 8003914:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <Car_BamLine_Process+0x7c0>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fd73 	bl	8000404 <__aeabi_i2d>
 800391e:	a32a      	add	r3, pc, #168	; (adr r3, 80039c8 <Car_BamLine_Process+0x7a8>)
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	f7fc fdd8 	bl	80004d8 <__aeabi_dmul>
 8003928:	4603      	mov	r3, r0
 800392a:	460c      	mov	r4, r1
 800392c:	4618      	mov	r0, r3
 800392e:	4621      	mov	r1, r4
 8003930:	f7fd f882 	bl	8000a38 <__aeabi_d2iz>
 8003934:	4603      	mov	r3, r0
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd fbf8 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 1);
 800393c:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <Car_BamLine_Process+0x7c0>)
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fc2b 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(-15); // -11
 8003946:	4827      	ldr	r0, [pc, #156]	; (80039e4 <Car_BamLine_Process+0x7c4>)
 8003948:	f7fd fc60 	bl	800120c <Servo_SetAngle>
      break;
 800394c:	e039      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
      MotorL_SetPWM(MaxSpeed * 0.90);
 800394e:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <Car_BamLine_Process+0x7c0>)
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fd56 	bl	8000404 <__aeabi_i2d>
 8003958:	a31d      	add	r3, pc, #116	; (adr r3, 80039d0 <Car_BamLine_Process+0x7b0>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f7fc fdbb 	bl	80004d8 <__aeabi_dmul>
 8003962:	4603      	mov	r3, r0
 8003964:	460c      	mov	r4, r1
 8003966:	4618      	mov	r0, r3
 8003968:	4621      	mov	r1, r4
 800396a:	f7fd f865 	bl	8000a38 <__aeabi_d2iz>
 800396e:	4603      	mov	r3, r0
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd fbdb 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 1);
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <Car_BamLine_Process+0x7c0>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fc0e 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(-13); // -9
 8003980:	4819      	ldr	r0, [pc, #100]	; (80039e8 <Car_BamLine_Process+0x7c8>)
 8003982:	f7fd fc43 	bl	800120c <Servo_SetAngle>
      break;
 8003986:	e01c      	b.n	80039c2 <Car_BamLine_Process+0x7a2>
      MotorL_SetPWM(MaxSpeed * 0.98);
 8003988:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <Car_BamLine_Process+0x7c0>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fd39 	bl	8000404 <__aeabi_i2d>
 8003992:	a311      	add	r3, pc, #68	; (adr r3, 80039d8 <Car_BamLine_Process+0x7b8>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	f7fc fd9e 	bl	80004d8 <__aeabi_dmul>
 800399c:	4603      	mov	r3, r0
 800399e:	460c      	mov	r4, r1
 80039a0:	4618      	mov	r0, r3
 80039a2:	4621      	mov	r1, r4
 80039a4:	f7fd f848 	bl	8000a38 <__aeabi_d2iz>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd fbbe 	bl	800112c <MotorL_SetPWM>
      MotorR_SetPWM(MaxSpeed * 1);
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <Car_BamLine_Process+0x7c0>)
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fbf1 	bl	800119c <MotorR_SetPWM>
      Servo_SetAngle(-3);
 80039ba:	480c      	ldr	r0, [pc, #48]	; (80039ec <Car_BamLine_Process+0x7cc>)
 80039bc:	f7fd fc26 	bl	800120c <Servo_SetAngle>
      break;
 80039c0:	bf00      	nop
    return;
 80039c2:	bf00      	nop
  }
}
 80039c4:	bd98      	pop	{r3, r4, r7, pc}
 80039c6:	bf00      	nop
 80039c8:	3d70a3d7 	.word	0x3d70a3d7
 80039cc:	3febd70a 	.word	0x3febd70a
 80039d0:	cccccccd 	.word	0xcccccccd
 80039d4:	3feccccc 	.word	0x3feccccc
 80039d8:	f5c28f5c 	.word	0xf5c28f5c
 80039dc:	3fef5c28 	.word	0x3fef5c28
 80039e0:	20000010 	.word	0x20000010
 80039e4:	c1700000 	.word	0xc1700000
 80039e8:	c1500000 	.word	0xc1500000
 80039ec:	c0400000 	.word	0xc0400000

080039f0 <Car_MatLine_Process>:

void Car_MatLine_Process()
{
 80039f0:	b598      	push	{r3, r4, r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  switch (LineDetect)
 80039f4:	4b62      	ldr	r3, [pc, #392]	; (8003b80 <Car_MatLine_Process+0x190>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d036      	beq.n	8003a6a <Car_MatLine_Process+0x7a>
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	dc02      	bgt.n	8003a06 <Car_MatLine_Process+0x16>
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d006      	beq.n	8003a12 <Car_MatLine_Process+0x22>
    MotorR_SetPWM(MaxSpeed * 0.5);
    MotorL_SetPWM(MaxSpeed * 0.6);
    Servo_SetAngle(35);
    break;
  }
}
 8003a04:	e0b5      	b.n	8003b72 <Car_MatLine_Process+0x182>
  switch (LineDetect)
 8003a06:	2b80      	cmp	r3, #128	; 0x80
 8003a08:	d05b      	beq.n	8003ac2 <Car_MatLine_Process+0xd2>
 8003a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a0c:	f000 8085 	beq.w	8003b1a <Car_MatLine_Process+0x12a>
}
 8003a10:	e0af      	b.n	8003b72 <Car_MatLine_Process+0x182>
	  MotorL_SetPWM(MaxSpeed * 0.5);
 8003a12:	4b5c      	ldr	r3, [pc, #368]	; (8003b84 <Car_MatLine_Process+0x194>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fcf4 	bl	8000404 <__aeabi_i2d>
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	4b59      	ldr	r3, [pc, #356]	; (8003b88 <Car_MatLine_Process+0x198>)
 8003a22:	f7fc fd59 	bl	80004d8 <__aeabi_dmul>
 8003a26:	4603      	mov	r3, r0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	f7fd f803 	bl	8000a38 <__aeabi_d2iz>
 8003a32:	4603      	mov	r3, r0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fb79 	bl	800112c <MotorL_SetPWM>
	  MotorR_SetPWM(MaxSpeed * 0.6);
 8003a3a:	4b52      	ldr	r3, [pc, #328]	; (8003b84 <Car_MatLine_Process+0x194>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fc fce0 	bl	8000404 <__aeabi_i2d>
 8003a44:	a34c      	add	r3, pc, #304	; (adr r3, 8003b78 <Car_MatLine_Process+0x188>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f7fc fd45 	bl	80004d8 <__aeabi_dmul>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460c      	mov	r4, r1
 8003a52:	4618      	mov	r0, r3
 8003a54:	4621      	mov	r1, r4
 8003a56:	f7fc ffef 	bl	8000a38 <__aeabi_d2iz>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd fb9d 	bl	800119c <MotorR_SetPWM>
	  Servo_SetAngle(-42);
 8003a62:	484a      	ldr	r0, [pc, #296]	; (8003b8c <Car_MatLine_Process+0x19c>)
 8003a64:	f7fd fbd2 	bl	800120c <Servo_SetAngle>
	  break;
 8003a68:	e083      	b.n	8003b72 <Car_MatLine_Process+0x182>
    MotorL_SetPWM(MaxSpeed * 0.5);
 8003a6a:	4b46      	ldr	r3, [pc, #280]	; (8003b84 <Car_MatLine_Process+0x194>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fcc8 	bl	8000404 <__aeabi_i2d>
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <Car_MatLine_Process+0x198>)
 8003a7a:	f7fc fd2d 	bl	80004d8 <__aeabi_dmul>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	460c      	mov	r4, r1
 8003a82:	4618      	mov	r0, r3
 8003a84:	4621      	mov	r1, r4
 8003a86:	f7fc ffd7 	bl	8000a38 <__aeabi_d2iz>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fd fb4d 	bl	800112c <MotorL_SetPWM>
    MotorR_SetPWM(MaxSpeed * 0.6);
 8003a92:	4b3c      	ldr	r3, [pc, #240]	; (8003b84 <Car_MatLine_Process+0x194>)
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fcb4 	bl	8000404 <__aeabi_i2d>
 8003a9c:	a336      	add	r3, pc, #216	; (adr r3, 8003b78 <Car_MatLine_Process+0x188>)
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f7fc fd19 	bl	80004d8 <__aeabi_dmul>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	4621      	mov	r1, r4
 8003aae:	f7fc ffc3 	bl	8000a38 <__aeabi_d2iz>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd fb71 	bl	800119c <MotorR_SetPWM>
    Servo_SetAngle(-35);
 8003aba:	4835      	ldr	r0, [pc, #212]	; (8003b90 <Car_MatLine_Process+0x1a0>)
 8003abc:	f7fd fba6 	bl	800120c <Servo_SetAngle>
    break;
 8003ac0:	e057      	b.n	8003b72 <Car_MatLine_Process+0x182>
	  MotorR_SetPWM(MaxSpeed * 0.5);
 8003ac2:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <Car_MatLine_Process+0x194>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc fc9c 	bl	8000404 <__aeabi_i2d>
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <Car_MatLine_Process+0x198>)
 8003ad2:	f7fc fd01 	bl	80004d8 <__aeabi_dmul>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	4618      	mov	r0, r3
 8003adc:	4621      	mov	r1, r4
 8003ade:	f7fc ffab 	bl	8000a38 <__aeabi_d2iz>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd fb59 	bl	800119c <MotorR_SetPWM>
	  MotorL_SetPWM(MaxSpeed * 0.6);
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <Car_MatLine_Process+0x194>)
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fc88 	bl	8000404 <__aeabi_i2d>
 8003af4:	a320      	add	r3, pc, #128	; (adr r3, 8003b78 <Car_MatLine_Process+0x188>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f7fc fced 	bl	80004d8 <__aeabi_dmul>
 8003afe:	4603      	mov	r3, r0
 8003b00:	460c      	mov	r4, r1
 8003b02:	4618      	mov	r0, r3
 8003b04:	4621      	mov	r1, r4
 8003b06:	f7fc ff97 	bl	8000a38 <__aeabi_d2iz>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fb0d 	bl	800112c <MotorL_SetPWM>
	  Servo_SetAngle(42);
 8003b12:	4820      	ldr	r0, [pc, #128]	; (8003b94 <Car_MatLine_Process+0x1a4>)
 8003b14:	f7fd fb7a 	bl	800120c <Servo_SetAngle>
	  break;
 8003b18:	e02b      	b.n	8003b72 <Car_MatLine_Process+0x182>
    MotorR_SetPWM(MaxSpeed * 0.5);
 8003b1a:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <Car_MatLine_Process+0x194>)
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fc70 	bl	8000404 <__aeabi_i2d>
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <Car_MatLine_Process+0x198>)
 8003b2a:	f7fc fcd5 	bl	80004d8 <__aeabi_dmul>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	4618      	mov	r0, r3
 8003b34:	4621      	mov	r1, r4
 8003b36:	f7fc ff7f 	bl	8000a38 <__aeabi_d2iz>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd fb2d 	bl	800119c <MotorR_SetPWM>
    MotorL_SetPWM(MaxSpeed * 0.6);
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <Car_MatLine_Process+0x194>)
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc fc5c 	bl	8000404 <__aeabi_i2d>
 8003b4c:	a30a      	add	r3, pc, #40	; (adr r3, 8003b78 <Car_MatLine_Process+0x188>)
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	f7fc fcc1 	bl	80004d8 <__aeabi_dmul>
 8003b56:	4603      	mov	r3, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	f7fc ff6b 	bl	8000a38 <__aeabi_d2iz>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd fae1 	bl	800112c <MotorL_SetPWM>
    Servo_SetAngle(35);
 8003b6a:	480b      	ldr	r0, [pc, #44]	; (8003b98 <Car_MatLine_Process+0x1a8>)
 8003b6c:	f7fd fb4e 	bl	800120c <Servo_SetAngle>
    break;
 8003b70:	bf00      	nop
}
 8003b72:	bf00      	nop
 8003b74:	bd98      	pop	{r3, r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	33333333 	.word	0x33333333
 8003b7c:	3fe33333 	.word	0x3fe33333
 8003b80:	20000205 	.word	0x20000205
 8003b84:	20000010 	.word	0x20000010
 8003b88:	3fe00000 	.word	0x3fe00000
 8003b8c:	c2280000 	.word	0xc2280000
 8003b90:	c20c0000 	.word	0xc20c0000
 8003b94:	42280000 	.word	0x42280000
 8003b98:	420c0000 	.word	0x420c0000

08003b9c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4013      	ands	r3, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40010400 	.word	0x40010400

08003bc8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003bd0:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <LL_EXTI_ClearFlag_0_31+0x18>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6153      	str	r3, [r2, #20]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	40010400 	.word	0x40010400

08003be4 <LL_TIM_ClearFlag_UPDATE>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f06f 0201 	mvn.w	r2, #1
 8003bf2:	611a      	str	r2, [r3, #16]
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <LL_TIM_ClearFlag_CC1>:
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f06f 0202 	mvn.w	r2, #2
 8003c30:	611a      	str	r2, [r3, #16]
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <LL_TIM_IsActiveFlag_CC1>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d101      	bne.n	8003c54 <LL_TIM_IsActiveFlag_CC1+0x18>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <LL_TIM_ClearFlag_CC2>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f06f 0204 	mvn.w	r2, #4
 8003c6e:	611a      	str	r2, [r3, #16]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <LL_TIM_IsActiveFlag_CC2>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d101      	bne.n	8003c92 <LL_TIM_IsActiveFlag_CC2+0x18>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <LL_GPIO_SetOutputPin>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	611a      	str	r2, [r3, #16]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <LL_GPIO_ResetOutputPin>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	615a      	str	r2, [r3, #20]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cea:	e7fe      	b.n	8003cea <HardFault_Handler+0x4>

08003cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cf0:	e7fe      	b.n	8003cf0 <MemManage_Handler+0x4>

08003cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cf6:	e7fe      	b.n	8003cf6 <BusFault_Handler+0x4>

08003cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cfc:	e7fe      	b.n	8003cfc <UsageFault_Handler+0x4>

08003cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr

08003d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
	...

08003d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <SysTick_Handler+0x18>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	4a03      	ldr	r2, [pc, #12]	; (8003d3c <SysTick_Handler+0x18>)
 8003d30:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	2000020c 	.word	0x2000020c

08003d40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8003d50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d54:	f7ff ff46 	bl	8003be4 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8003d60:	4802      	ldr	r0, [pc, #8]	; (8003d6c <TIM3_IRQHandler+0x10>)
 8003d62:	f7ff ff3f 	bl	8003be4 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40000400 	.word	0x40000400

08003d70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 8003d76:	4819      	ldr	r0, [pc, #100]	; (8003ddc <TIM4_IRQHandler+0x6c>)
 8003d78:	f7ff ff60 	bl	8003c3c <LL_TIM_IsActiveFlag_CC1>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d006      	beq.n	8003d90 <TIM4_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 8003d82:	4816      	ldr	r0, [pc, #88]	; (8003ddc <TIM4_IRQHandler+0x6c>)
 8003d84:	f7ff ff4d 	bl	8003c22 <LL_TIM_ClearFlag_CC1>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003d88:	4915      	ldr	r1, [pc, #84]	; (8003de0 <TIM4_IRQHandler+0x70>)
 8003d8a:	4816      	ldr	r0, [pc, #88]	; (8003de4 <TIM4_IRQHandler+0x74>)
 8003d8c:	f7ff ff96 	bl	8003cbc <LL_GPIO_ResetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 8003d90:	4812      	ldr	r0, [pc, #72]	; (8003ddc <TIM4_IRQHandler+0x6c>)
 8003d92:	f7ff ff34 	bl	8003bfe <LL_TIM_IsActiveFlag_UPDATE>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <TIM4_IRQHandler+0x3a>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8003d9c:	480f      	ldr	r0, [pc, #60]	; (8003ddc <TIM4_IRQHandler+0x6c>)
 8003d9e:	f7ff ff21 	bl	8003be4 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003da2:	490f      	ldr	r1, [pc, #60]	; (8003de0 <TIM4_IRQHandler+0x70>)
 8003da4:	480f      	ldr	r0, [pc, #60]	; (8003de4 <TIM4_IRQHandler+0x74>)
 8003da6:	f7ff ff7a 	bl	8003c9e <LL_GPIO_SetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_CC2(TIM4))
 8003daa:	480c      	ldr	r0, [pc, #48]	; (8003ddc <TIM4_IRQHandler+0x6c>)
 8003dac:	f7ff ff65 	bl	8003c7a <LL_TIM_IsActiveFlag_CC2>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00e      	beq.n	8003dd4 <TIM4_IRQHandler+0x64>
	{
//		LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
		uint16_t newCPR = TIM4->CNT + AddCPRTime - 1;
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <TIM4_IRQHandler+0x6c>)
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <TIM4_IRQHandler+0x78>)
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	80fb      	strh	r3, [r7, #6]
		TIM4->CCR2 = newCPR;
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <TIM4_IRQHandler+0x6c>)
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	6393      	str	r3, [r2, #56]	; 0x38
		LL_TIM_ClearFlag_CC2(TIM4);
 8003dce:	4803      	ldr	r0, [pc, #12]	; (8003ddc <TIM4_IRQHandler+0x6c>)
 8003dd0:	f7ff ff46 	bl	8003c60 <LL_TIM_ClearFlag_CC2>
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	04080008 	.word	0x04080008
 8003de4:	40010800 	.word	0x40010800
 8003de8:	20000210 	.word	0x20000210

08003dec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8003dfc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e00:	f7ff fecc 	bl	8003b9c <LL_EXTI_IsActiveFlag_0_31>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8003e0a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e0e:	f7ff fedb 	bl	8003bc8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <EXTI15_10_IRQHandler+0x5c>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8003e18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e1c:	f7ff febe 	bl	8003b9c <LL_EXTI_IsActiveFlag_0_31>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8003e26:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e2a:	f7ff fecd 	bl	8003bc8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BTN2_Flag = 1;
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <EXTI15_10_IRQHandler+0x60>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003e34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e38:	f7ff feb0 	bl	8003b9c <LL_EXTI_IsActiveFlag_0_31>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <EXTI15_10_IRQHandler+0x58>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8003e42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e46:	f7ff febf 	bl	8003bc8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    BTN3_Flag = 1;
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <EXTI15_10_IRQHandler+0x64>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000204 	.word	0x20000204
 8003e58:	20000212 	.word	0x20000212
 8003e5c:	20000213 	.word	0x20000213

08003e60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e00a      	b.n	8003e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e72:	f3af 8000 	nop.w
 8003e76:	4601      	mov	r1, r0
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	60ba      	str	r2, [r7, #8]
 8003e7e:	b2ca      	uxtb	r2, r1
 8003e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3301      	adds	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	dbf0      	blt.n	8003e72 <_read+0x12>
	}

return len;
 8003e90:	687b      	ldr	r3, [r7, #4]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e009      	b.n	8003ec0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	60ba      	str	r2, [r7, #8]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fa05 	bl	80022c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	dbf1      	blt.n	8003eac <_write+0x12>
	}
	return len;
 8003ec8:	687b      	ldr	r3, [r7, #4]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <_close>:

int _close(int file)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ef8:	605a      	str	r2, [r3, #4]
	return 0;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr

08003f06 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
	return 0;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr
	...

08003f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f28:	4a14      	ldr	r2, [pc, #80]	; (8003f7c <_sbrk+0x5c>)
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <_sbrk+0x60>)
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <_sbrk+0x64>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <_sbrk+0x64>)
 8003f3e:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <_sbrk+0x68>)
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <_sbrk+0x64>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d207      	bcs.n	8003f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f50:	f001 f988 	bl	8005264 <__errno>
 8003f54:	4602      	mov	r2, r0
 8003f56:	230c      	movs	r3, #12
 8003f58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	e009      	b.n	8003f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <_sbrk+0x64>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <_sbrk+0x64>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <_sbrk+0x64>)
 8003f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20005000 	.word	0x20005000
 8003f80:	00000400 	.word	0x00000400
 8003f84:	20000214 	.word	0x20000214
 8003f88:	20000238 	.word	0x20000238

08003f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003f90:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <SystemInit+0x5c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a14      	ldr	r2, [pc, #80]	; (8003fe8 <SystemInit+0x5c>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <SystemInit+0x5c>)
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4911      	ldr	r1, [pc, #68]	; (8003fe8 <SystemInit+0x5c>)
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <SystemInit+0x60>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <SystemInit+0x5c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <SystemInit+0x5c>)
 8003fae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <SystemInit+0x5c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <SystemInit+0x5c>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <SystemInit+0x5c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <SystemInit+0x5c>)
 8003fca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003fce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <SystemInit+0x5c>)
 8003fd2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003fd6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <SystemInit+0x64>)
 8003fda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fde:	609a      	str	r2, [r3, #8]
#endif 
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	f8ff0000 	.word	0xf8ff0000
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003ff4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003ff6:	e003      	b.n	8004000 <LoopCopyDataInit>

08003ff8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003ffa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003ffc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003ffe:	3104      	adds	r1, #4

08004000 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004000:	480a      	ldr	r0, [pc, #40]	; (800402c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004004:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004006:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004008:	d3f6      	bcc.n	8003ff8 <CopyDataInit>
  ldr r2, =_sbss
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800400c:	e002      	b.n	8004014 <LoopFillZerobss>

0800400e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800400e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004010:	f842 3b04 	str.w	r3, [r2], #4

08004014 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004016:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004018:	d3f9      	bcc.n	800400e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800401a:	f7ff ffb7 	bl	8003f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800401e:	f001 f927 	bl	8005270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004022:	f7fe f967 	bl	80022f4 <main>
  bx lr
 8004026:	4770      	bx	lr
  ldr r3, =_sidata
 8004028:	08007658 	.word	0x08007658
  ldr r0, =_sdata
 800402c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004030:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8004034:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8004038:	20000234 	.word	0x20000234

0800403c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800403c:	e7fe      	b.n	800403c <ADC1_2_IRQHandler>

0800403e <LL_ADC_REG_SetSequencerLength>:
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <LL_ADC_IsEnabled>:
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b01      	cmp	r3, #1
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
	...

08004088 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8004096:	4813      	ldr	r0, [pc, #76]	; (80040e4 <LL_ADC_CommonInit+0x5c>)
 8004098:	f7ff ffe3 	bl	8004062 <LL_ADC_IsEnabled>
 800409c:	4604      	mov	r4, r0
 800409e:	4812      	ldr	r0, [pc, #72]	; (80040e8 <LL_ADC_CommonInit+0x60>)
 80040a0:	f7ff ffdf 	bl	8004062 <LL_ADC_IsEnabled>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4323      	orrs	r3, r4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d114      	bne.n	80040d6 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	e008      	b.n	80040da <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	605a      	str	r2, [r3, #4]
 80040d4:	e001      	b.n	80040da <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd90      	pop	{r4, r7, pc}
 80040e4:	40012400 	.word	0x40012400
 80040e8:	40012800 	.word	0x40012800

080040ec <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ffb1 	bl	8004062 <LL_ADC_IsEnabled>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d112      	bne.n	800412c <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
 800412a:	e001      	b.n	8004130 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ff8a 	bl	8004062 <LL_ADC_IsEnabled>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d131      	bne.n	80041b8 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00c      	beq.n	8004176 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	430b      	orrs	r3, r1
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	605a      	str	r2, [r3, #4]
 8004174:	e008      	b.n	8004188 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8004190:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	6811      	ldr	r1, [r2, #0]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	68d2      	ldr	r2, [r2, #12]
 800419c:	4311      	orrs	r1, r2
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	6912      	ldr	r2, [r2, #16]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4619      	mov	r1, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff44 	bl	800403e <LL_ADC_REG_SetSequencerLength>
 80041b6:	e001      	b.n	80041bc <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <LL_EXTI_EnableIT_0_31>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	4904      	ldr	r1, [pc, #16]	; (80041e8 <LL_EXTI_EnableIT_0_31+0x20>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010400 	.word	0x40010400

080041ec <LL_EXTI_DisableIT_0_31>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <LL_EXTI_DisableIT_0_31+0x20>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	4903      	ldr	r1, [pc, #12]	; (800420c <LL_EXTI_DisableIT_0_31+0x20>)
 80041fe:	4013      	ands	r3, r2
 8004200:	600b      	str	r3, [r1, #0]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	40010400 	.word	0x40010400

08004210 <LL_EXTI_EnableEvent_0_31>:
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <LL_EXTI_EnableEvent_0_31+0x20>)
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	4904      	ldr	r1, [pc, #16]	; (8004230 <LL_EXTI_EnableEvent_0_31+0x20>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40010400 	.word	0x40010400

08004234 <LL_EXTI_DisableEvent_0_31>:
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <LL_EXTI_DisableEvent_0_31+0x20>)
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	43db      	mvns	r3, r3
 8004244:	4903      	ldr	r1, [pc, #12]	; (8004254 <LL_EXTI_DisableEvent_0_31+0x20>)
 8004246:	4013      	ands	r3, r2
 8004248:	604b      	str	r3, [r1, #4]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	40010400 	.word	0x40010400

08004258 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	4904      	ldr	r1, [pc, #16]	; (8004278 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4313      	orrs	r3, r2
 800426a:	608b      	str	r3, [r1, #8]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010400 	.word	0x40010400

0800427c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	43db      	mvns	r3, r3
 800428c:	4903      	ldr	r1, [pc, #12]	; (800429c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800428e:	4013      	ands	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40010400 	.word	0x40010400

080042a0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	4904      	ldr	r1, [pc, #16]	; (80042c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60cb      	str	r3, [r1, #12]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010400 	.word	0x40010400

080042c4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	4903      	ldr	r1, [pc, #12]	; (80042e4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	60cb      	str	r3, [r1, #12]
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40010400 	.word	0x40010400

080042e8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d060      	beq.n	80043be <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d067      	beq.n	80043d4 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	795b      	ldrb	r3, [r3, #5]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d00e      	beq.n	800432a <LL_EXTI_Init+0x42>
 800430c:	2b02      	cmp	r3, #2
 800430e:	d017      	beq.n	8004340 <LL_EXTI_Init+0x58>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d120      	bne.n	8004356 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff8b 	bl	8004234 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff50 	bl	80041c8 <LL_EXTI_EnableIT_0_31>
          break;
 8004328:	e018      	b.n	800435c <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff5c 	bl	80041ec <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff69 	bl	8004210 <LL_EXTI_EnableEvent_0_31>
          break;
 800433e:	e00d      	b.n	800435c <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff3f 	bl	80041c8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff5e 	bl	8004210 <LL_EXTI_EnableEvent_0_31>
          break;
 8004354:	e002      	b.n	800435c <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
          break;
 800435a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	799b      	ldrb	r3, [r3, #6]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d037      	beq.n	80043d4 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	799b      	ldrb	r3, [r3, #6]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d00e      	beq.n	800438a <LL_EXTI_Init+0xa2>
 800436c:	2b03      	cmp	r3, #3
 800436e:	d017      	beq.n	80043a0 <LL_EXTI_Init+0xb8>
 8004370:	2b01      	cmp	r3, #1
 8004372:	d120      	bne.n	80043b6 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ffa3 	bl	80042c4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff68 	bl	8004258 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004388:	e025      	b.n	80043d6 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff ff74 	bl	800427c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ff81 	bl	80042a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800439e:	e01a      	b.n	80043d6 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff57 	bl	8004258 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff76 	bl	80042a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80043b4:	e00f      	b.n	80043d6 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
            break;
 80043ba:	bf00      	nop
 80043bc:	e00b      	b.n	80043d6 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff ff12 	bl	80041ec <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff31 	bl	8004234 <LL_EXTI_DisableEvent_0_31>
 80043d2:	e000      	b.n	80043d6 <LL_EXTI_Init+0xee>
      }
 80043d4:	bf00      	nop
  }
  return status;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <LL_GPIO_SetPinMode>:
{
 80043e0:	b490      	push	{r4, r7}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	461a      	mov	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	0e1b      	lsrs	r3, r3, #24
 80043f4:	4413      	add	r3, r2
 80043f6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	613b      	str	r3, [r7, #16]
  return result;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	fab3 f383 	clz	r3, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	210f      	movs	r1, #15
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	401a      	ands	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	61bb      	str	r3, [r7, #24]
  return result;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	fab3 f383 	clz	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	6023      	str	r3, [r4, #0]
}
 800443a:	bf00      	nop
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bc90      	pop	{r4, r7}
 8004442:	4770      	bx	lr

08004444 <LL_GPIO_SetPinSpeed>:
{
 8004444:	b490      	push	{r4, r7}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	461a      	mov	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	0e1b      	lsrs	r3, r3, #24
 8004458:	4413      	add	r3, r2
 800445a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	613b      	str	r3, [r7, #16]
  return result;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	fab3 f383 	clz	r3, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	2103      	movs	r1, #3
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	401a      	ands	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	61bb      	str	r3, [r7, #24]
  return result;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	fa01 f303 	lsl.w	r3, r1, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	6023      	str	r3, [r4, #0]
}
 800449e:	bf00      	nop
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc90      	pop	{r4, r7}
 80044a6:	4770      	bx	lr

080044a8 <LL_GPIO_SetPinOutputType>:
{
 80044a8:	b490      	push	{r4, r7}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	461a      	mov	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	0e1b      	lsrs	r3, r3, #24
 80044bc:	4413      	add	r3, r2
 80044be:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80044c0:	6822      	ldr	r2, [r4, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	fa93 f3a3 	rbit	r3, r3
 80044cc:	613b      	str	r3, [r7, #16]
  return result;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	fab3 f383 	clz	r3, r3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	2104      	movs	r1, #4
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	401a      	ands	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa93 f3a3 	rbit	r3, r3
 80044ec:	61bb      	str	r3, [r7, #24]
  return result;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	fab3 f383 	clz	r3, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	6023      	str	r3, [r4, #0]
}
 8004502:	bf00      	nop
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bc90      	pop	{r4, r7}
 800450a:	4770      	bx	lr

0800450c <LL_GPIO_SetPinPull>:
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	0a1b      	lsrs	r3, r3, #8
 8004520:	43db      	mvns	r3, r3
 8004522:	401a      	ands	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	fa93 f3a3 	rbit	r3, r3
 8004530:	613b      	str	r3, [r7, #16]
  return result;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4619      	mov	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	408b      	lsls	r3, r1
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	60da      	str	r2, [r3, #12]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	60fb      	str	r3, [r7, #12]
  return result;
 8004570:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004572:	fab3 f383 	clz	r3, r3
 8004576:	b2db      	uxtb	r3, r3
 8004578:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800457a:	e040      	b.n	80045fe <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800457c:	2201      	movs	r2, #1
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	409a      	lsls	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	4013      	ands	r3, r2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d036      	beq.n	80045f8 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2b07      	cmp	r3, #7
 800458e:	d806      	bhi.n	800459e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8004590:	f240 1201 	movw	r2, #257	; 0x101
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	e008      	b.n	80045b0 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3b08      	subs	r3, #8
 80045a2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ae:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	461a      	mov	r2, r3
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff11 	bl	80043e0 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	461a      	mov	r2, r3
 80045c4:	69b9      	ldr	r1, [r7, #24]
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ffa0 	bl	800450c <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d003      	beq.n	80045dc <LL_GPIO_Init+0x8c>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b09      	cmp	r3, #9
 80045da:	d10d      	bne.n	80045f8 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	461a      	mov	r2, r3
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff2d 	bl	8004444 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	461a      	mov	r2, r3
 80045f0:	69b9      	ldr	r1, [r7, #24]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff ff58 	bl	80044a8 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1b8      	bne.n	800457c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <LL_I2C_Enable>:
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f043 0201 	orr.w	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	601a      	str	r2, [r3, #0]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <LL_I2C_Disable>:
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 0201 	bic.w	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	601a      	str	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <LL_I2C_SetOwnAddress1>:
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004664:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	430a      	orrs	r2, r1
 800466e:	431a      	orrs	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
	...

08004680 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8004680:	b490      	push	{r4, r7}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 800468e:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8004690:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4a3f      	ldr	r2, [pc, #252]	; (8004794 <LL_I2C_ConfigSpeed+0x114>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046a4:	ea44 0203 	orr.w	r2, r4, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4938      	ldr	r1, [pc, #224]	; (8004798 <LL_I2C_ConfigSpeed+0x118>)
 80046b8:	428b      	cmp	r3, r1
 80046ba:	d801      	bhi.n	80046c0 <LL_I2C_ConfigSpeed+0x40>
 80046bc:	1c63      	adds	r3, r4, #1
 80046be:	e008      	b.n	80046d2 <LL_I2C_ConfigSpeed+0x52>
 80046c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80046c4:	fb03 f304 	mul.w	r3, r3, r4
 80046c8:	4934      	ldr	r1, [pc, #208]	; (800479c <LL_I2C_ConfigSpeed+0x11c>)
 80046ca:	fba1 1303 	umull	r1, r3, r1, r3
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	3301      	adds	r3, #1
 80046d2:	431a      	orrs	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <LL_I2C_ConfigSpeed+0x118>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d939      	bls.n	8004754 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d117      	bne.n	8004716 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800470a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470e:	e01d      	b.n	800474c <LL_I2C_ConfigSpeed+0xcc>
 8004710:	f248 0301 	movw	r3, #32769	; 0x8001
 8004714:	e01a      	b.n	800474c <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009a      	lsls	r2, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004746:	e001      	b.n	800474c <LL_I2C_ConfigSpeed+0xcc>
 8004748:	f248 0301 	movw	r3, #32769	; 0x8001
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	ea43 0402 	orr.w	r4, r3, r2
 8004752:	e010      	b.n	8004776 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	fbb2 f3f3 	udiv	r3, r2, r3
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004762:	2b03      	cmp	r3, #3
 8004764:	d905      	bls.n	8004772 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	e000      	b.n	8004774 <LL_I2C_ConfigSpeed+0xf4>
 8004772:	2304      	movs	r3, #4
 8004774:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800477e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004782:	ea44 0203 	orr.w	r2, r4, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	61da      	str	r2, [r3, #28]
}
 800478a:	bf00      	nop
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bc90      	pop	{r4, r7}
 8004792:	4770      	bx	lr
 8004794:	431bde83 	.word	0x431bde83
 8004798:	000186a0 	.word	0x000186a0
 800479c:	10624dd3 	.word	0x10624dd3

080047a0 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 021a 	bic.w	r2, r3, #26
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	601a      	str	r2, [r3, #0]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff ff1d 	bl	8004632 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80047f8:	f107 0308 	add.w	r3, r7, #8
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f87b 	bl	80048f8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004802:	6939      	ldr	r1, [r7, #16]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff37 	bl	8004680 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68d9      	ldr	r1, [r3, #12]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	461a      	mov	r2, r3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff ff17 	bl	8004650 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ffb9 	bl	80047a0 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fef0 	bl	8004614 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff ffc2 	bl	80047c4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <LL_RCC_GetSysClkSource>:
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <LL_RCC_GetSysClkSource+0x14>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 030c 	and.w	r3, r3, #12
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40021000 	.word	0x40021000

08004864 <LL_RCC_GetAHBPrescaler>:
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <LL_RCC_GetAHBPrescaler+0x14>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	40021000 	.word	0x40021000

0800487c <LL_RCC_GetAPB1Prescaler>:
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	40021000 	.word	0x40021000

08004894 <LL_RCC_GetAPB2Prescaler>:
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004898:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <LL_RCC_GetAPB2Prescaler+0x14>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40021000 	.word	0x40021000

080048ac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <LL_RCC_PLL_GetMainSource+0x14>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	40021000 	.word	0x40021000

080048c4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr
 80048d8:	40021000 	.word	0x40021000

080048dc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <LL_RCC_PLL_GetPrediv+0x18>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	0c5b      	lsrs	r3, r3, #17
 80048e6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000

080048f8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004900:	f000 f820 	bl	8004944 <RCC_GetSystemClockFreq>
 8004904:	4602      	mov	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f83a 	bl	8004988 <RCC_GetHCLKClockFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f848 	bl	80049b4 <RCC_GetPCLK1ClockFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f854 	bl	80049dc <RCC_GetPCLK2ClockFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60da      	str	r2, [r3, #12]
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800494e:	f7ff ff7d 	bl	800484c <LL_RCC_GetSysClkSource>
 8004952:	4603      	mov	r3, r0
 8004954:	2b04      	cmp	r3, #4
 8004956:	d006      	beq.n	8004966 <RCC_GetSystemClockFreq+0x22>
 8004958:	2b08      	cmp	r3, #8
 800495a:	d007      	beq.n	800496c <RCC_GetSystemClockFreq+0x28>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <RCC_GetSystemClockFreq+0x40>)
 8004962:	607b      	str	r3, [r7, #4]
      break;
 8004964:	e009      	b.n	800497a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004966:	4b07      	ldr	r3, [pc, #28]	; (8004984 <RCC_GetSystemClockFreq+0x40>)
 8004968:	607b      	str	r3, [r7, #4]
      break;
 800496a:	e006      	b.n	800497a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800496c:	f000 f84a 	bl	8004a04 <RCC_PLL_GetFreqDomain_SYS>
 8004970:	6078      	str	r0, [r7, #4]
      break;
 8004972:	e002      	b.n	800497a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <RCC_GetSystemClockFreq+0x40>)
 8004976:	607b      	str	r3, [r7, #4]
      break;
 8004978:	bf00      	nop
  }

  return frequency;
 800497a:	687b      	ldr	r3, [r7, #4]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	007a1200 	.word	0x007a1200

08004988 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004990:	f7ff ff68 	bl	8004864 <LL_RCC_GetAHBPrescaler>
 8004994:	4603      	mov	r3, r0
 8004996:	091b      	lsrs	r3, r3, #4
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <RCC_GetHCLKClockFreq+0x28>)
 800499e:	5cd3      	ldrb	r3, [r2, r3]
 80049a0:	461a      	mov	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	40d3      	lsrs	r3, r2
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	080073a8 	.word	0x080073a8

080049b4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80049bc:	f7ff ff5e 	bl	800487c <LL_RCC_GetAPB1Prescaler>
 80049c0:	4603      	mov	r3, r0
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <RCC_GetPCLK1ClockFreq+0x24>)
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	461a      	mov	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	40d3      	lsrs	r3, r2
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	080073b8 	.word	0x080073b8

080049dc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80049e4:	f7ff ff56 	bl	8004894 <LL_RCC_GetAPB2Prescaler>
 80049e8:	4603      	mov	r3, r0
 80049ea:	0adb      	lsrs	r3, r3, #11
 80049ec:	4a04      	ldr	r2, [pc, #16]	; (8004a00 <RCC_GetPCLK2ClockFreq+0x24>)
 80049ee:	5cd3      	ldrb	r3, [r2, r3]
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	40d3      	lsrs	r3, r2
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	080073b8 	.word	0x080073b8

08004a04 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004a12:	f7ff ff4b 	bl	80048ac <LL_RCC_PLL_GetMainSource>
 8004a16:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a22:	d003      	beq.n	8004a2c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8004a24:	e00b      	b.n	8004a3e <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004a28:	607b      	str	r3, [r7, #4]
      break;
 8004a2a:	e00b      	b.n	8004a44 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004a2c:	f7ff ff56 	bl	80048dc <LL_RCC_PLL_GetPrediv>
 8004a30:	4603      	mov	r3, r0
 8004a32:	3301      	adds	r3, #1
 8004a34:	4a0a      	ldr	r2, [pc, #40]	; (8004a60 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3a:	607b      	str	r3, [r7, #4]
      break;
 8004a3c:	e002      	b.n	8004a44 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004a40:	607b      	str	r3, [r7, #4]
      break;
 8004a42:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004a44:	f7ff ff3e 	bl	80048c4 <LL_RCC_PLL_GetMultiplicator>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	0c9b      	lsrs	r3, r3, #18
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	003d0900 	.word	0x003d0900
 8004a60:	007a1200 	.word	0x007a1200

08004a64 <LL_TIM_SetPrescaler>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <LL_TIM_SetAutoReload>:
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <LL_TIM_SetRepetitionCounter>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <LL_TIM_OC_SetCompareCH1>:
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <LL_TIM_OC_SetCompareCH2>:
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <LL_TIM_OC_SetCompareCH3>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <LL_TIM_OC_SetCompareCH4>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f043 0201 	orr.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	615a      	str	r2, [r3, #20]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr

08004b38 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a27      	ldr	r2, [pc, #156]	; (8004be8 <LL_TIM_Init+0xb0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <LL_TIM_Init+0x30>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d007      	beq.n	8004b68 <LL_TIM_Init+0x30>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a24      	ldr	r2, [pc, #144]	; (8004bec <LL_TIM_Init+0xb4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <LL_TIM_Init+0x30>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <LL_TIM_Init+0xb8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d106      	bne.n	8004b76 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <LL_TIM_Init+0xb0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <LL_TIM_Init+0x5e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b84:	d007      	beq.n	8004b96 <LL_TIM_Init+0x5e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a18      	ldr	r2, [pc, #96]	; (8004bec <LL_TIM_Init+0xb4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d003      	beq.n	8004b96 <LL_TIM_Init+0x5e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a17      	ldr	r2, [pc, #92]	; (8004bf0 <LL_TIM_Init+0xb8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d106      	bne.n	8004ba4 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff64 	bl	8004a7e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff51 	bl	8004a64 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <LL_TIM_Init+0xb0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d105      	bne.n	8004bd6 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	7c1b      	ldrb	r3, [r3, #16]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ff61 	bl	8004a98 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff ff9f 	bl	8004b1a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40012c00 	.word	0x40012c00
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800

08004bf4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d012      	beq.n	8004c30 <LL_TIM_OC_Init+0x3c>
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d802      	bhi.n	8004c14 <LL_TIM_OC_Init+0x20>
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d007      	beq.n	8004c22 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004c12:	e022      	b.n	8004c5a <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c18:	d011      	beq.n	8004c3e <LL_TIM_OC_Init+0x4a>
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1e:	d015      	beq.n	8004c4c <LL_TIM_OC_Init+0x58>
      break;
 8004c20:	e01b      	b.n	8004c5a <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f865 	bl	8004cf4 <OC1Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2e:	e014      	b.n	8004c5a <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f8c4 	bl	8004dc0 <OC2Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	e00d      	b.n	8004c5a <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f927 	bl	8004e94 <OC3Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4a:	e006      	b.n	8004c5a <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f98a 	bl	8004f68 <OC4Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	75fb      	strb	r3, [r7, #23]
      break;
 8004c58:	bf00      	nop
  }

  return result;
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	7b12      	ldrb	r2, [r2, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	89d2      	ldrh	r2, [r2, #14]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0201 	bic.w	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 0202 	bic.w	r2, r3, #2
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <OC1Config+0xc8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d11e      	bne.n	8004d94 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f023 0208 	bic.w	r2, r3, #8
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f023 0204 	bic.w	r2, r3, #4
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff fe83 	bl	8004ab2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40012c00 	.word	0x40012c00

08004dc0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f023 0210 	bic.w	r2, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0220 	bic.w	r2, r3, #32
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0210 	bic.w	r2, r3, #16
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <OC2Config+0xd0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d11f      	bne.n	8004e68 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	019b      	lsls	r3, r3, #6
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	019b      	lsls	r3, r3, #6
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fe26 	bl	8004acc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40012c00 	.word	0x40012c00

08004e94 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <OC3Config+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d11f      	bne.n	8004f3a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	029b      	lsls	r3, r3, #10
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	015b      	lsls	r3, r3, #5
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff fdca 	bl	8004ae6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40012c00 	.word	0x40012c00

08004f68 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	031b      	lsls	r3, r3, #12
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	031b      	lsls	r3, r3, #12
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0f      	ldr	r2, [pc, #60]	; (8005008 <OC4Config+0xa0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d107      	bne.n	8004fe0 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	019b      	lsls	r3, r3, #6
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fd84 	bl	8004b00 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40012c00 	.word	0x40012c00

0800500c <LL_USART_IsEnabled>:
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005020:	bf0c      	ite	eq
 8005022:	2301      	moveq	r3, #1
 8005024:	2300      	movne	r3, #0
 8005026:	b2db      	uxtb	r3, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <LL_USART_SetStopBitsLength>:
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	611a      	str	r2, [r3, #16]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <LL_USART_SetHWFlowCtrl>:
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	615a      	str	r2, [r3, #20]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr
	...

0800507c <LL_USART_SetBaudRate>:
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	009a      	lsls	r2, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	4a25      	ldr	r2, [pc, #148]	; (8005134 <LL_USART_SetBaudRate+0xb8>)
 800509e:	fba2 2303 	umull	r2, r3, r2, r3
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	b299      	uxth	r1, r3
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	009a      	lsls	r2, r3, #2
 80050b4:	441a      	add	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80050be:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <LL_USART_SetBaudRate+0xb8>)
 80050c0:	fba3 0302 	umull	r0, r3, r3, r2
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	2064      	movs	r0, #100	; 0x64
 80050c8:	fb00 f303 	mul.w	r3, r0, r3
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	3332      	adds	r3, #50	; 0x32
 80050d2:	4a18      	ldr	r2, [pc, #96]	; (8005134 <LL_USART_SetBaudRate+0xb8>)
 80050d4:	fba2 2303 	umull	r2, r3, r2, r3
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	440b      	add	r3, r1
 80050e4:	b299      	uxth	r1, r3
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009a      	lsls	r2, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <LL_USART_SetBaudRate+0xb8>)
 80050fc:	fba3 0302 	umull	r0, r3, r3, r2
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	2064      	movs	r0, #100	; 0x64
 8005104:	fb00 f303 	mul.w	r3, r0, r3
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	3332      	adds	r3, #50	; 0x32
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <LL_USART_SetBaudRate+0xb8>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	b29b      	uxth	r3, r3
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	b29b      	uxth	r3, r3
 800511e:	440b      	add	r3, r1
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	609a      	str	r2, [r3, #8]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	51eb851f 	.word	0x51eb851f

08005138 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005146:	2300      	movs	r3, #0
 8005148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ff5e 	bl	800500c <LL_USART_IsEnabled>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d145      	bne.n	80051e2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800515e:	f023 030c 	bic.w	r3, r3, #12
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	6851      	ldr	r1, [r2, #4]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	68d2      	ldr	r2, [r2, #12]
 800516a:	4311      	orrs	r1, r2
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	6912      	ldr	r2, [r2, #16]
 8005170:	430a      	orrs	r2, r1
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff ff57 	bl	8005032 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff ff63 	bl	8005056 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005190:	f107 0308 	add.w	r3, r7, #8
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff fbaf 	bl	80048f8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <LL_USART_Init+0xb4>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d102      	bne.n	80051a8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e00c      	b.n	80051c2 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a11      	ldr	r2, [pc, #68]	; (80051f0 <LL_USART_Init+0xb8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d102      	bne.n	80051b6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e005      	b.n	80051c2 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <LL_USART_Init+0xbc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80051d0:	2300      	movs	r3, #0
 80051d2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	69b9      	ldr	r1, [r7, #24]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff4d 	bl	800507c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40013800 	.word	0x40013800
 80051f0:	40004400 	.word	0x40004400
 80051f4:	40004800 	.word	0x40004800

080051f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	4a07      	ldr	r2, [pc, #28]	; (8005228 <LL_InitTick+0x30>)
 800520c:	3b01      	subs	r3, #1
 800520e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <LL_InitTick+0x30>)
 8005212:	2200      	movs	r2, #0
 8005214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005216:	4b04      	ldr	r3, [pc, #16]	; (8005228 <LL_InitTick+0x30>)
 8005218:	2205      	movs	r2, #5
 800521a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	e000e010 	.word	0xe000e010

0800522c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005234:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff ffdd 	bl	80051f8 <LL_InitTick>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005250:	4a03      	ldr	r2, [pc, #12]	; (8005260 <LL_SetSystemCoreClock+0x18>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6013      	str	r3, [r2, #0]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr
 8005260:	20000014 	.word	0x20000014

08005264 <__errno>:
 8005264:	4b01      	ldr	r3, [pc, #4]	; (800526c <__errno+0x8>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000018 	.word	0x20000018

08005270 <__libc_init_array>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	2500      	movs	r5, #0
 8005274:	4e0c      	ldr	r6, [pc, #48]	; (80052a8 <__libc_init_array+0x38>)
 8005276:	4c0d      	ldr	r4, [pc, #52]	; (80052ac <__libc_init_array+0x3c>)
 8005278:	1ba4      	subs	r4, r4, r6
 800527a:	10a4      	asrs	r4, r4, #2
 800527c:	42a5      	cmp	r5, r4
 800527e:	d109      	bne.n	8005294 <__libc_init_array+0x24>
 8005280:	f002 f870 	bl	8007364 <_init>
 8005284:	2500      	movs	r5, #0
 8005286:	4e0a      	ldr	r6, [pc, #40]	; (80052b0 <__libc_init_array+0x40>)
 8005288:	4c0a      	ldr	r4, [pc, #40]	; (80052b4 <__libc_init_array+0x44>)
 800528a:	1ba4      	subs	r4, r4, r6
 800528c:	10a4      	asrs	r4, r4, #2
 800528e:	42a5      	cmp	r5, r4
 8005290:	d105      	bne.n	800529e <__libc_init_array+0x2e>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005298:	4798      	blx	r3
 800529a:	3501      	adds	r5, #1
 800529c:	e7ee      	b.n	800527c <__libc_init_array+0xc>
 800529e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052a2:	4798      	blx	r3
 80052a4:	3501      	adds	r5, #1
 80052a6:	e7f2      	b.n	800528e <__libc_init_array+0x1e>
 80052a8:	08007650 	.word	0x08007650
 80052ac:	08007650 	.word	0x08007650
 80052b0:	08007650 	.word	0x08007650
 80052b4:	08007654 	.word	0x08007654

080052b8 <memset>:
 80052b8:	4603      	mov	r3, r0
 80052ba:	4402      	add	r2, r0
 80052bc:	4293      	cmp	r3, r2
 80052be:	d100      	bne.n	80052c2 <memset+0xa>
 80052c0:	4770      	bx	lr
 80052c2:	f803 1b01 	strb.w	r1, [r3], #1
 80052c6:	e7f9      	b.n	80052bc <memset+0x4>

080052c8 <__cvt>:
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ce:	461e      	mov	r6, r3
 80052d0:	bfbb      	ittet	lt
 80052d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80052d6:	461e      	movlt	r6, r3
 80052d8:	2300      	movge	r3, #0
 80052da:	232d      	movlt	r3, #45	; 0x2d
 80052dc:	b088      	sub	sp, #32
 80052de:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052e0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80052e4:	f027 0720 	bic.w	r7, r7, #32
 80052e8:	2f46      	cmp	r7, #70	; 0x46
 80052ea:	4614      	mov	r4, r2
 80052ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80052ee:	700b      	strb	r3, [r1, #0]
 80052f0:	d004      	beq.n	80052fc <__cvt+0x34>
 80052f2:	2f45      	cmp	r7, #69	; 0x45
 80052f4:	d100      	bne.n	80052f8 <__cvt+0x30>
 80052f6:	3501      	adds	r5, #1
 80052f8:	2302      	movs	r3, #2
 80052fa:	e000      	b.n	80052fe <__cvt+0x36>
 80052fc:	2303      	movs	r3, #3
 80052fe:	aa07      	add	r2, sp, #28
 8005300:	9204      	str	r2, [sp, #16]
 8005302:	aa06      	add	r2, sp, #24
 8005304:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005308:	e9cd 3500 	strd	r3, r5, [sp]
 800530c:	4622      	mov	r2, r4
 800530e:	4633      	mov	r3, r6
 8005310:	f000 fc56 	bl	8005bc0 <_dtoa_r>
 8005314:	2f47      	cmp	r7, #71	; 0x47
 8005316:	4680      	mov	r8, r0
 8005318:	d102      	bne.n	8005320 <__cvt+0x58>
 800531a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800531c:	07db      	lsls	r3, r3, #31
 800531e:	d526      	bpl.n	800536e <__cvt+0xa6>
 8005320:	2f46      	cmp	r7, #70	; 0x46
 8005322:	eb08 0905 	add.w	r9, r8, r5
 8005326:	d111      	bne.n	800534c <__cvt+0x84>
 8005328:	f898 3000 	ldrb.w	r3, [r8]
 800532c:	2b30      	cmp	r3, #48	; 0x30
 800532e:	d10a      	bne.n	8005346 <__cvt+0x7e>
 8005330:	2200      	movs	r2, #0
 8005332:	2300      	movs	r3, #0
 8005334:	4620      	mov	r0, r4
 8005336:	4631      	mov	r1, r6
 8005338:	f7fb fb36 	bl	80009a8 <__aeabi_dcmpeq>
 800533c:	b918      	cbnz	r0, 8005346 <__cvt+0x7e>
 800533e:	f1c5 0501 	rsb	r5, r5, #1
 8005342:	f8ca 5000 	str.w	r5, [sl]
 8005346:	f8da 3000 	ldr.w	r3, [sl]
 800534a:	4499      	add	r9, r3
 800534c:	2200      	movs	r2, #0
 800534e:	2300      	movs	r3, #0
 8005350:	4620      	mov	r0, r4
 8005352:	4631      	mov	r1, r6
 8005354:	f7fb fb28 	bl	80009a8 <__aeabi_dcmpeq>
 8005358:	b938      	cbnz	r0, 800536a <__cvt+0xa2>
 800535a:	2230      	movs	r2, #48	; 0x30
 800535c:	9b07      	ldr	r3, [sp, #28]
 800535e:	454b      	cmp	r3, r9
 8005360:	d205      	bcs.n	800536e <__cvt+0xa6>
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	9107      	str	r1, [sp, #28]
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e7f8      	b.n	800535c <__cvt+0x94>
 800536a:	f8cd 901c 	str.w	r9, [sp, #28]
 800536e:	4640      	mov	r0, r8
 8005370:	9b07      	ldr	r3, [sp, #28]
 8005372:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005374:	eba3 0308 	sub.w	r3, r3, r8
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	b008      	add	sp, #32
 800537c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005380 <__exponent>:
 8005380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	bfb4      	ite	lt
 8005386:	232d      	movlt	r3, #45	; 0x2d
 8005388:	232b      	movge	r3, #43	; 0x2b
 800538a:	4604      	mov	r4, r0
 800538c:	bfb8      	it	lt
 800538e:	4249      	neglt	r1, r1
 8005390:	2909      	cmp	r1, #9
 8005392:	f804 2b02 	strb.w	r2, [r4], #2
 8005396:	7043      	strb	r3, [r0, #1]
 8005398:	dd21      	ble.n	80053de <__exponent+0x5e>
 800539a:	f10d 0307 	add.w	r3, sp, #7
 800539e:	461f      	mov	r7, r3
 80053a0:	260a      	movs	r6, #10
 80053a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80053a6:	fb06 1115 	mls	r1, r6, r5, r1
 80053aa:	2d09      	cmp	r5, #9
 80053ac:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80053b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053b4:	f103 32ff 	add.w	r2, r3, #4294967295
 80053b8:	4629      	mov	r1, r5
 80053ba:	dc09      	bgt.n	80053d0 <__exponent+0x50>
 80053bc:	3130      	adds	r1, #48	; 0x30
 80053be:	3b02      	subs	r3, #2
 80053c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80053c4:	42bb      	cmp	r3, r7
 80053c6:	4622      	mov	r2, r4
 80053c8:	d304      	bcc.n	80053d4 <__exponent+0x54>
 80053ca:	1a10      	subs	r0, r2, r0
 80053cc:	b003      	add	sp, #12
 80053ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d0:	4613      	mov	r3, r2
 80053d2:	e7e6      	b.n	80053a2 <__exponent+0x22>
 80053d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053d8:	f804 2b01 	strb.w	r2, [r4], #1
 80053dc:	e7f2      	b.n	80053c4 <__exponent+0x44>
 80053de:	2330      	movs	r3, #48	; 0x30
 80053e0:	4419      	add	r1, r3
 80053e2:	7083      	strb	r3, [r0, #2]
 80053e4:	1d02      	adds	r2, r0, #4
 80053e6:	70c1      	strb	r1, [r0, #3]
 80053e8:	e7ef      	b.n	80053ca <__exponent+0x4a>
	...

080053ec <_printf_float>:
 80053ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f0:	b091      	sub	sp, #68	; 0x44
 80053f2:	460c      	mov	r4, r1
 80053f4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80053f6:	4693      	mov	fp, r2
 80053f8:	461e      	mov	r6, r3
 80053fa:	4605      	mov	r5, r0
 80053fc:	f001 fb0e 	bl	8006a1c <_localeconv_r>
 8005400:	6803      	ldr	r3, [r0, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	9309      	str	r3, [sp, #36]	; 0x24
 8005406:	f7fa fea3 	bl	8000150 <strlen>
 800540a:	2300      	movs	r3, #0
 800540c:	930e      	str	r3, [sp, #56]	; 0x38
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	900a      	str	r0, [sp, #40]	; 0x28
 8005412:	3307      	adds	r3, #7
 8005414:	f023 0307 	bic.w	r3, r3, #7
 8005418:	f103 0208 	add.w	r2, r3, #8
 800541c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005420:	f8d4 a000 	ldr.w	sl, [r4]
 8005424:	603a      	str	r2, [r7, #0]
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800542e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005432:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005436:	930b      	str	r3, [sp, #44]	; 0x2c
 8005438:	f04f 32ff 	mov.w	r2, #4294967295
 800543c:	4ba6      	ldr	r3, [pc, #664]	; (80056d8 <_printf_float+0x2ec>)
 800543e:	4638      	mov	r0, r7
 8005440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005442:	f7fb fae3 	bl	8000a0c <__aeabi_dcmpun>
 8005446:	bb68      	cbnz	r0, 80054a4 <_printf_float+0xb8>
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	4ba2      	ldr	r3, [pc, #648]	; (80056d8 <_printf_float+0x2ec>)
 800544e:	4638      	mov	r0, r7
 8005450:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005452:	f7fb fabd 	bl	80009d0 <__aeabi_dcmple>
 8005456:	bb28      	cbnz	r0, 80054a4 <_printf_float+0xb8>
 8005458:	2200      	movs	r2, #0
 800545a:	2300      	movs	r3, #0
 800545c:	4638      	mov	r0, r7
 800545e:	4649      	mov	r1, r9
 8005460:	f7fb faac 	bl	80009bc <__aeabi_dcmplt>
 8005464:	b110      	cbz	r0, 800546c <_printf_float+0x80>
 8005466:	232d      	movs	r3, #45	; 0x2d
 8005468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800546c:	4f9b      	ldr	r7, [pc, #620]	; (80056dc <_printf_float+0x2f0>)
 800546e:	4b9c      	ldr	r3, [pc, #624]	; (80056e0 <_printf_float+0x2f4>)
 8005470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005474:	bf98      	it	ls
 8005476:	461f      	movls	r7, r3
 8005478:	2303      	movs	r3, #3
 800547a:	f04f 0900 	mov.w	r9, #0
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	f02a 0304 	bic.w	r3, sl, #4
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	9600      	str	r6, [sp, #0]
 8005488:	465b      	mov	r3, fp
 800548a:	aa0f      	add	r2, sp, #60	; 0x3c
 800548c:	4621      	mov	r1, r4
 800548e:	4628      	mov	r0, r5
 8005490:	f000 f9e2 	bl	8005858 <_printf_common>
 8005494:	3001      	adds	r0, #1
 8005496:	f040 8090 	bne.w	80055ba <_printf_float+0x1ce>
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	b011      	add	sp, #68	; 0x44
 80054a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a4:	463a      	mov	r2, r7
 80054a6:	464b      	mov	r3, r9
 80054a8:	4638      	mov	r0, r7
 80054aa:	4649      	mov	r1, r9
 80054ac:	f7fb faae 	bl	8000a0c <__aeabi_dcmpun>
 80054b0:	b110      	cbz	r0, 80054b8 <_printf_float+0xcc>
 80054b2:	4f8c      	ldr	r7, [pc, #560]	; (80056e4 <_printf_float+0x2f8>)
 80054b4:	4b8c      	ldr	r3, [pc, #560]	; (80056e8 <_printf_float+0x2fc>)
 80054b6:	e7db      	b.n	8005470 <_printf_float+0x84>
 80054b8:	6863      	ldr	r3, [r4, #4]
 80054ba:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	a80d      	add	r0, sp, #52	; 0x34
 80054c2:	a90e      	add	r1, sp, #56	; 0x38
 80054c4:	d140      	bne.n	8005548 <_printf_float+0x15c>
 80054c6:	2306      	movs	r3, #6
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	f04f 0c00 	mov.w	ip, #0
 80054ce:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80054d2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80054d6:	6863      	ldr	r3, [r4, #4]
 80054d8:	6022      	str	r2, [r4, #0]
 80054da:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	463a      	mov	r2, r7
 80054e2:	464b      	mov	r3, r9
 80054e4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80054e8:	4628      	mov	r0, r5
 80054ea:	f7ff feed 	bl	80052c8 <__cvt>
 80054ee:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80054f2:	2b47      	cmp	r3, #71	; 0x47
 80054f4:	4607      	mov	r7, r0
 80054f6:	d109      	bne.n	800550c <_printf_float+0x120>
 80054f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054fa:	1cd8      	adds	r0, r3, #3
 80054fc:	db02      	blt.n	8005504 <_printf_float+0x118>
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	4293      	cmp	r3, r2
 8005502:	dd47      	ble.n	8005594 <_printf_float+0x1a8>
 8005504:	f1a8 0802 	sub.w	r8, r8, #2
 8005508:	fa5f f888 	uxtb.w	r8, r8
 800550c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005510:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005512:	d824      	bhi.n	800555e <_printf_float+0x172>
 8005514:	3901      	subs	r1, #1
 8005516:	4642      	mov	r2, r8
 8005518:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800551c:	910d      	str	r1, [sp, #52]	; 0x34
 800551e:	f7ff ff2f 	bl	8005380 <__exponent>
 8005522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005524:	4681      	mov	r9, r0
 8005526:	1813      	adds	r3, r2, r0
 8005528:	2a01      	cmp	r2, #1
 800552a:	6123      	str	r3, [r4, #16]
 800552c:	dc02      	bgt.n	8005534 <_printf_float+0x148>
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	07d1      	lsls	r1, r2, #31
 8005532:	d501      	bpl.n	8005538 <_printf_float+0x14c>
 8005534:	3301      	adds	r3, #1
 8005536:	6123      	str	r3, [r4, #16]
 8005538:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0a2      	beq.n	8005486 <_printf_float+0x9a>
 8005540:	232d      	movs	r3, #45	; 0x2d
 8005542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005546:	e79e      	b.n	8005486 <_printf_float+0x9a>
 8005548:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800554c:	f000 816e 	beq.w	800582c <_printf_float+0x440>
 8005550:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005554:	d1b9      	bne.n	80054ca <_printf_float+0xde>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1b7      	bne.n	80054ca <_printf_float+0xde>
 800555a:	2301      	movs	r3, #1
 800555c:	e7b4      	b.n	80054c8 <_printf_float+0xdc>
 800555e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005562:	d119      	bne.n	8005598 <_printf_float+0x1ac>
 8005564:	2900      	cmp	r1, #0
 8005566:	6863      	ldr	r3, [r4, #4]
 8005568:	dd0c      	ble.n	8005584 <_printf_float+0x198>
 800556a:	6121      	str	r1, [r4, #16]
 800556c:	b913      	cbnz	r3, 8005574 <_printf_float+0x188>
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	07d2      	lsls	r2, r2, #31
 8005572:	d502      	bpl.n	800557a <_printf_float+0x18e>
 8005574:	3301      	adds	r3, #1
 8005576:	440b      	add	r3, r1
 8005578:	6123      	str	r3, [r4, #16]
 800557a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800557c:	f04f 0900 	mov.w	r9, #0
 8005580:	65a3      	str	r3, [r4, #88]	; 0x58
 8005582:	e7d9      	b.n	8005538 <_printf_float+0x14c>
 8005584:	b913      	cbnz	r3, 800558c <_printf_float+0x1a0>
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	07d0      	lsls	r0, r2, #31
 800558a:	d501      	bpl.n	8005590 <_printf_float+0x1a4>
 800558c:	3302      	adds	r3, #2
 800558e:	e7f3      	b.n	8005578 <_printf_float+0x18c>
 8005590:	2301      	movs	r3, #1
 8005592:	e7f1      	b.n	8005578 <_printf_float+0x18c>
 8005594:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005598:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800559c:	4293      	cmp	r3, r2
 800559e:	db05      	blt.n	80055ac <_printf_float+0x1c0>
 80055a0:	6822      	ldr	r2, [r4, #0]
 80055a2:	6123      	str	r3, [r4, #16]
 80055a4:	07d1      	lsls	r1, r2, #31
 80055a6:	d5e8      	bpl.n	800557a <_printf_float+0x18e>
 80055a8:	3301      	adds	r3, #1
 80055aa:	e7e5      	b.n	8005578 <_printf_float+0x18c>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bfcc      	ite	gt
 80055b0:	2301      	movgt	r3, #1
 80055b2:	f1c3 0302 	rsble	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	e7de      	b.n	8005578 <_printf_float+0x18c>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	055a      	lsls	r2, r3, #21
 80055be:	d407      	bmi.n	80055d0 <_printf_float+0x1e4>
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	463a      	mov	r2, r7
 80055c4:	4659      	mov	r1, fp
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b0      	blx	r6
 80055ca:	3001      	adds	r0, #1
 80055cc:	d129      	bne.n	8005622 <_printf_float+0x236>
 80055ce:	e764      	b.n	800549a <_printf_float+0xae>
 80055d0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80055d4:	f240 80d7 	bls.w	8005786 <_printf_float+0x39a>
 80055d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055dc:	2200      	movs	r2, #0
 80055de:	2300      	movs	r3, #0
 80055e0:	f7fb f9e2 	bl	80009a8 <__aeabi_dcmpeq>
 80055e4:	b388      	cbz	r0, 800564a <_printf_float+0x25e>
 80055e6:	2301      	movs	r3, #1
 80055e8:	4a40      	ldr	r2, [pc, #256]	; (80056ec <_printf_float+0x300>)
 80055ea:	4659      	mov	r1, fp
 80055ec:	4628      	mov	r0, r5
 80055ee:	47b0      	blx	r6
 80055f0:	3001      	adds	r0, #1
 80055f2:	f43f af52 	beq.w	800549a <_printf_float+0xae>
 80055f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055fa:	429a      	cmp	r2, r3
 80055fc:	db02      	blt.n	8005604 <_printf_float+0x218>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	07d8      	lsls	r0, r3, #31
 8005602:	d50e      	bpl.n	8005622 <_printf_float+0x236>
 8005604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005608:	4659      	mov	r1, fp
 800560a:	4628      	mov	r0, r5
 800560c:	47b0      	blx	r6
 800560e:	3001      	adds	r0, #1
 8005610:	f43f af43 	beq.w	800549a <_printf_float+0xae>
 8005614:	2700      	movs	r7, #0
 8005616:	f104 081a 	add.w	r8, r4, #26
 800561a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800561c:	3b01      	subs	r3, #1
 800561e:	42bb      	cmp	r3, r7
 8005620:	dc09      	bgt.n	8005636 <_printf_float+0x24a>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	079f      	lsls	r7, r3, #30
 8005626:	f100 80fd 	bmi.w	8005824 <_printf_float+0x438>
 800562a:	68e0      	ldr	r0, [r4, #12]
 800562c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800562e:	4298      	cmp	r0, r3
 8005630:	bfb8      	it	lt
 8005632:	4618      	movlt	r0, r3
 8005634:	e733      	b.n	800549e <_printf_float+0xb2>
 8005636:	2301      	movs	r3, #1
 8005638:	4642      	mov	r2, r8
 800563a:	4659      	mov	r1, fp
 800563c:	4628      	mov	r0, r5
 800563e:	47b0      	blx	r6
 8005640:	3001      	adds	r0, #1
 8005642:	f43f af2a 	beq.w	800549a <_printf_float+0xae>
 8005646:	3701      	adds	r7, #1
 8005648:	e7e7      	b.n	800561a <_printf_float+0x22e>
 800564a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc2b      	bgt.n	80056a8 <_printf_float+0x2bc>
 8005650:	2301      	movs	r3, #1
 8005652:	4a26      	ldr	r2, [pc, #152]	; (80056ec <_printf_float+0x300>)
 8005654:	4659      	mov	r1, fp
 8005656:	4628      	mov	r0, r5
 8005658:	47b0      	blx	r6
 800565a:	3001      	adds	r0, #1
 800565c:	f43f af1d 	beq.w	800549a <_printf_float+0xae>
 8005660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005662:	b923      	cbnz	r3, 800566e <_printf_float+0x282>
 8005664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005666:	b913      	cbnz	r3, 800566e <_printf_float+0x282>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	07d9      	lsls	r1, r3, #31
 800566c:	d5d9      	bpl.n	8005622 <_printf_float+0x236>
 800566e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005672:	4659      	mov	r1, fp
 8005674:	4628      	mov	r0, r5
 8005676:	47b0      	blx	r6
 8005678:	3001      	adds	r0, #1
 800567a:	f43f af0e 	beq.w	800549a <_printf_float+0xae>
 800567e:	f04f 0800 	mov.w	r8, #0
 8005682:	f104 091a 	add.w	r9, r4, #26
 8005686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005688:	425b      	negs	r3, r3
 800568a:	4543      	cmp	r3, r8
 800568c:	dc01      	bgt.n	8005692 <_printf_float+0x2a6>
 800568e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005690:	e797      	b.n	80055c2 <_printf_float+0x1d6>
 8005692:	2301      	movs	r3, #1
 8005694:	464a      	mov	r2, r9
 8005696:	4659      	mov	r1, fp
 8005698:	4628      	mov	r0, r5
 800569a:	47b0      	blx	r6
 800569c:	3001      	adds	r0, #1
 800569e:	f43f aefc 	beq.w	800549a <_printf_float+0xae>
 80056a2:	f108 0801 	add.w	r8, r8, #1
 80056a6:	e7ee      	b.n	8005686 <_printf_float+0x29a>
 80056a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056ac:	429a      	cmp	r2, r3
 80056ae:	bfa8      	it	ge
 80056b0:	461a      	movge	r2, r3
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	4690      	mov	r8, r2
 80056b6:	dd07      	ble.n	80056c8 <_printf_float+0x2dc>
 80056b8:	4613      	mov	r3, r2
 80056ba:	4659      	mov	r1, fp
 80056bc:	463a      	mov	r2, r7
 80056be:	4628      	mov	r0, r5
 80056c0:	47b0      	blx	r6
 80056c2:	3001      	adds	r0, #1
 80056c4:	f43f aee9 	beq.w	800549a <_printf_float+0xae>
 80056c8:	f104 031a 	add.w	r3, r4, #26
 80056cc:	f04f 0a00 	mov.w	sl, #0
 80056d0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80056d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80056d6:	e015      	b.n	8005704 <_printf_float+0x318>
 80056d8:	7fefffff 	.word	0x7fefffff
 80056dc:	080073c8 	.word	0x080073c8
 80056e0:	080073c4 	.word	0x080073c4
 80056e4:	080073d0 	.word	0x080073d0
 80056e8:	080073cc 	.word	0x080073cc
 80056ec:	080073d4 	.word	0x080073d4
 80056f0:	2301      	movs	r3, #1
 80056f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056f4:	4659      	mov	r1, fp
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b0      	blx	r6
 80056fa:	3001      	adds	r0, #1
 80056fc:	f43f aecd 	beq.w	800549a <_printf_float+0xae>
 8005700:	f10a 0a01 	add.w	sl, sl, #1
 8005704:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005708:	eba9 0308 	sub.w	r3, r9, r8
 800570c:	4553      	cmp	r3, sl
 800570e:	dcef      	bgt.n	80056f0 <_printf_float+0x304>
 8005710:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005714:	429a      	cmp	r2, r3
 8005716:	444f      	add	r7, r9
 8005718:	db14      	blt.n	8005744 <_printf_float+0x358>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	07da      	lsls	r2, r3, #31
 800571e:	d411      	bmi.n	8005744 <_printf_float+0x358>
 8005720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005722:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005724:	eba3 0209 	sub.w	r2, r3, r9
 8005728:	eba3 0901 	sub.w	r9, r3, r1
 800572c:	4591      	cmp	r9, r2
 800572e:	bfa8      	it	ge
 8005730:	4691      	movge	r9, r2
 8005732:	f1b9 0f00 	cmp.w	r9, #0
 8005736:	dc0d      	bgt.n	8005754 <_printf_float+0x368>
 8005738:	2700      	movs	r7, #0
 800573a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800573e:	f104 081a 	add.w	r8, r4, #26
 8005742:	e018      	b.n	8005776 <_printf_float+0x38a>
 8005744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005748:	4659      	mov	r1, fp
 800574a:	4628      	mov	r0, r5
 800574c:	47b0      	blx	r6
 800574e:	3001      	adds	r0, #1
 8005750:	d1e6      	bne.n	8005720 <_printf_float+0x334>
 8005752:	e6a2      	b.n	800549a <_printf_float+0xae>
 8005754:	464b      	mov	r3, r9
 8005756:	463a      	mov	r2, r7
 8005758:	4659      	mov	r1, fp
 800575a:	4628      	mov	r0, r5
 800575c:	47b0      	blx	r6
 800575e:	3001      	adds	r0, #1
 8005760:	d1ea      	bne.n	8005738 <_printf_float+0x34c>
 8005762:	e69a      	b.n	800549a <_printf_float+0xae>
 8005764:	2301      	movs	r3, #1
 8005766:	4642      	mov	r2, r8
 8005768:	4659      	mov	r1, fp
 800576a:	4628      	mov	r0, r5
 800576c:	47b0      	blx	r6
 800576e:	3001      	adds	r0, #1
 8005770:	f43f ae93 	beq.w	800549a <_printf_float+0xae>
 8005774:	3701      	adds	r7, #1
 8005776:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	eba3 0309 	sub.w	r3, r3, r9
 8005780:	42bb      	cmp	r3, r7
 8005782:	dcef      	bgt.n	8005764 <_printf_float+0x378>
 8005784:	e74d      	b.n	8005622 <_printf_float+0x236>
 8005786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005788:	2a01      	cmp	r2, #1
 800578a:	dc01      	bgt.n	8005790 <_printf_float+0x3a4>
 800578c:	07db      	lsls	r3, r3, #31
 800578e:	d538      	bpl.n	8005802 <_printf_float+0x416>
 8005790:	2301      	movs	r3, #1
 8005792:	463a      	mov	r2, r7
 8005794:	4659      	mov	r1, fp
 8005796:	4628      	mov	r0, r5
 8005798:	47b0      	blx	r6
 800579a:	3001      	adds	r0, #1
 800579c:	f43f ae7d 	beq.w	800549a <_printf_float+0xae>
 80057a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a4:	4659      	mov	r1, fp
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b0      	blx	r6
 80057aa:	3001      	adds	r0, #1
 80057ac:	f107 0701 	add.w	r7, r7, #1
 80057b0:	f43f ae73 	beq.w	800549a <_printf_float+0xae>
 80057b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ba:	2200      	movs	r2, #0
 80057bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80057c0:	2300      	movs	r3, #0
 80057c2:	f7fb f8f1 	bl	80009a8 <__aeabi_dcmpeq>
 80057c6:	b9c0      	cbnz	r0, 80057fa <_printf_float+0x40e>
 80057c8:	4643      	mov	r3, r8
 80057ca:	463a      	mov	r2, r7
 80057cc:	4659      	mov	r1, fp
 80057ce:	4628      	mov	r0, r5
 80057d0:	47b0      	blx	r6
 80057d2:	3001      	adds	r0, #1
 80057d4:	d10d      	bne.n	80057f2 <_printf_float+0x406>
 80057d6:	e660      	b.n	800549a <_printf_float+0xae>
 80057d8:	2301      	movs	r3, #1
 80057da:	4642      	mov	r2, r8
 80057dc:	4659      	mov	r1, fp
 80057de:	4628      	mov	r0, r5
 80057e0:	47b0      	blx	r6
 80057e2:	3001      	adds	r0, #1
 80057e4:	f43f ae59 	beq.w	800549a <_printf_float+0xae>
 80057e8:	3701      	adds	r7, #1
 80057ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ec:	3b01      	subs	r3, #1
 80057ee:	42bb      	cmp	r3, r7
 80057f0:	dcf2      	bgt.n	80057d8 <_printf_float+0x3ec>
 80057f2:	464b      	mov	r3, r9
 80057f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057f8:	e6e4      	b.n	80055c4 <_printf_float+0x1d8>
 80057fa:	2700      	movs	r7, #0
 80057fc:	f104 081a 	add.w	r8, r4, #26
 8005800:	e7f3      	b.n	80057ea <_printf_float+0x3fe>
 8005802:	2301      	movs	r3, #1
 8005804:	e7e1      	b.n	80057ca <_printf_float+0x3de>
 8005806:	2301      	movs	r3, #1
 8005808:	4642      	mov	r2, r8
 800580a:	4659      	mov	r1, fp
 800580c:	4628      	mov	r0, r5
 800580e:	47b0      	blx	r6
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae42 	beq.w	800549a <_printf_float+0xae>
 8005816:	3701      	adds	r7, #1
 8005818:	68e3      	ldr	r3, [r4, #12]
 800581a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	42bb      	cmp	r3, r7
 8005820:	dcf1      	bgt.n	8005806 <_printf_float+0x41a>
 8005822:	e702      	b.n	800562a <_printf_float+0x23e>
 8005824:	2700      	movs	r7, #0
 8005826:	f104 0819 	add.w	r8, r4, #25
 800582a:	e7f5      	b.n	8005818 <_printf_float+0x42c>
 800582c:	2b00      	cmp	r3, #0
 800582e:	f43f ae94 	beq.w	800555a <_printf_float+0x16e>
 8005832:	f04f 0c00 	mov.w	ip, #0
 8005836:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800583a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800583e:	6022      	str	r2, [r4, #0]
 8005840:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005844:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	463a      	mov	r2, r7
 800584c:	464b      	mov	r3, r9
 800584e:	4628      	mov	r0, r5
 8005850:	f7ff fd3a 	bl	80052c8 <__cvt>
 8005854:	4607      	mov	r7, r0
 8005856:	e64f      	b.n	80054f8 <_printf_float+0x10c>

08005858 <_printf_common>:
 8005858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800585c:	4691      	mov	r9, r2
 800585e:	461f      	mov	r7, r3
 8005860:	688a      	ldr	r2, [r1, #8]
 8005862:	690b      	ldr	r3, [r1, #16]
 8005864:	4606      	mov	r6, r0
 8005866:	4293      	cmp	r3, r2
 8005868:	bfb8      	it	lt
 800586a:	4613      	movlt	r3, r2
 800586c:	f8c9 3000 	str.w	r3, [r9]
 8005870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005874:	460c      	mov	r4, r1
 8005876:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800587a:	b112      	cbz	r2, 8005882 <_printf_common+0x2a>
 800587c:	3301      	adds	r3, #1
 800587e:	f8c9 3000 	str.w	r3, [r9]
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	0699      	lsls	r1, r3, #26
 8005886:	bf42      	ittt	mi
 8005888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800588c:	3302      	addmi	r3, #2
 800588e:	f8c9 3000 	strmi.w	r3, [r9]
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	f015 0506 	ands.w	r5, r5, #6
 8005898:	d107      	bne.n	80058aa <_printf_common+0x52>
 800589a:	f104 0a19 	add.w	sl, r4, #25
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	f8d9 2000 	ldr.w	r2, [r9]
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	42ab      	cmp	r3, r5
 80058a8:	dc29      	bgt.n	80058fe <_printf_common+0xa6>
 80058aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	3300      	adds	r3, #0
 80058b2:	bf18      	it	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	0692      	lsls	r2, r2, #26
 80058b8:	d42e      	bmi.n	8005918 <_printf_common+0xc0>
 80058ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058be:	4639      	mov	r1, r7
 80058c0:	4630      	mov	r0, r6
 80058c2:	47c0      	blx	r8
 80058c4:	3001      	adds	r0, #1
 80058c6:	d021      	beq.n	800590c <_printf_common+0xb4>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	68e5      	ldr	r5, [r4, #12]
 80058cc:	f003 0306 	and.w	r3, r3, #6
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	bf18      	it	ne
 80058d4:	2500      	movne	r5, #0
 80058d6:	f8d9 2000 	ldr.w	r2, [r9]
 80058da:	f04f 0900 	mov.w	r9, #0
 80058de:	bf08      	it	eq
 80058e0:	1aad      	subeq	r5, r5, r2
 80058e2:	68a3      	ldr	r3, [r4, #8]
 80058e4:	6922      	ldr	r2, [r4, #16]
 80058e6:	bf08      	it	eq
 80058e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bfc4      	itt	gt
 80058f0:	1a9b      	subgt	r3, r3, r2
 80058f2:	18ed      	addgt	r5, r5, r3
 80058f4:	341a      	adds	r4, #26
 80058f6:	454d      	cmp	r5, r9
 80058f8:	d11a      	bne.n	8005930 <_printf_common+0xd8>
 80058fa:	2000      	movs	r0, #0
 80058fc:	e008      	b.n	8005910 <_printf_common+0xb8>
 80058fe:	2301      	movs	r3, #1
 8005900:	4652      	mov	r2, sl
 8005902:	4639      	mov	r1, r7
 8005904:	4630      	mov	r0, r6
 8005906:	47c0      	blx	r8
 8005908:	3001      	adds	r0, #1
 800590a:	d103      	bne.n	8005914 <_printf_common+0xbc>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	3501      	adds	r5, #1
 8005916:	e7c2      	b.n	800589e <_printf_common+0x46>
 8005918:	2030      	movs	r0, #48	; 0x30
 800591a:	18e1      	adds	r1, r4, r3
 800591c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005926:	4422      	add	r2, r4
 8005928:	3302      	adds	r3, #2
 800592a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800592e:	e7c4      	b.n	80058ba <_printf_common+0x62>
 8005930:	2301      	movs	r3, #1
 8005932:	4622      	mov	r2, r4
 8005934:	4639      	mov	r1, r7
 8005936:	4630      	mov	r0, r6
 8005938:	47c0      	blx	r8
 800593a:	3001      	adds	r0, #1
 800593c:	d0e6      	beq.n	800590c <_printf_common+0xb4>
 800593e:	f109 0901 	add.w	r9, r9, #1
 8005942:	e7d8      	b.n	80058f6 <_printf_common+0x9e>

08005944 <setvbuf>:
 8005944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005948:	461d      	mov	r5, r3
 800594a:	4b51      	ldr	r3, [pc, #324]	; (8005a90 <setvbuf+0x14c>)
 800594c:	4604      	mov	r4, r0
 800594e:	681e      	ldr	r6, [r3, #0]
 8005950:	460f      	mov	r7, r1
 8005952:	4690      	mov	r8, r2
 8005954:	b126      	cbz	r6, 8005960 <setvbuf+0x1c>
 8005956:	69b3      	ldr	r3, [r6, #24]
 8005958:	b913      	cbnz	r3, 8005960 <setvbuf+0x1c>
 800595a:	4630      	mov	r0, r6
 800595c:	f000 ffd4 	bl	8006908 <__sinit>
 8005960:	4b4c      	ldr	r3, [pc, #304]	; (8005a94 <setvbuf+0x150>)
 8005962:	429c      	cmp	r4, r3
 8005964:	d152      	bne.n	8005a0c <setvbuf+0xc8>
 8005966:	6874      	ldr	r4, [r6, #4]
 8005968:	f1b8 0f02 	cmp.w	r8, #2
 800596c:	d006      	beq.n	800597c <setvbuf+0x38>
 800596e:	f1b8 0f01 	cmp.w	r8, #1
 8005972:	f200 8089 	bhi.w	8005a88 <setvbuf+0x144>
 8005976:	2d00      	cmp	r5, #0
 8005978:	f2c0 8086 	blt.w	8005a88 <setvbuf+0x144>
 800597c:	4621      	mov	r1, r4
 800597e:	4630      	mov	r0, r6
 8005980:	f000 ff58 	bl	8006834 <_fflush_r>
 8005984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005986:	b141      	cbz	r1, 800599a <setvbuf+0x56>
 8005988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800598c:	4299      	cmp	r1, r3
 800598e:	d002      	beq.n	8005996 <setvbuf+0x52>
 8005990:	4630      	mov	r0, r6
 8005992:	f001 fb73 	bl	800707c <_free_r>
 8005996:	2300      	movs	r3, #0
 8005998:	6363      	str	r3, [r4, #52]	; 0x34
 800599a:	2300      	movs	r3, #0
 800599c:	61a3      	str	r3, [r4, #24]
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	061b      	lsls	r3, r3, #24
 80059a4:	d503      	bpl.n	80059ae <setvbuf+0x6a>
 80059a6:	6921      	ldr	r1, [r4, #16]
 80059a8:	4630      	mov	r0, r6
 80059aa:	f001 fb67 	bl	800707c <_free_r>
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	f1b8 0f02 	cmp.w	r8, #2
 80059b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80059b8:	f023 0303 	bic.w	r3, r3, #3
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	d05d      	beq.n	8005a7c <setvbuf+0x138>
 80059c0:	ab01      	add	r3, sp, #4
 80059c2:	466a      	mov	r2, sp
 80059c4:	4621      	mov	r1, r4
 80059c6:	4630      	mov	r0, r6
 80059c8:	f001 f836 	bl	8006a38 <__swhatbuf_r>
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	4318      	orrs	r0, r3
 80059d0:	81a0      	strh	r0, [r4, #12]
 80059d2:	bb2d      	cbnz	r5, 8005a20 <setvbuf+0xdc>
 80059d4:	9d00      	ldr	r5, [sp, #0]
 80059d6:	4628      	mov	r0, r5
 80059d8:	f001 f852 	bl	8006a80 <malloc>
 80059dc:	4607      	mov	r7, r0
 80059de:	2800      	cmp	r0, #0
 80059e0:	d14e      	bne.n	8005a80 <setvbuf+0x13c>
 80059e2:	f8dd 9000 	ldr.w	r9, [sp]
 80059e6:	45a9      	cmp	r9, r5
 80059e8:	d13c      	bne.n	8005a64 <setvbuf+0x120>
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	f043 0302 	orr.w	r3, r3, #2
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	2300      	movs	r3, #0
 80059f8:	60a3      	str	r3, [r4, #8]
 80059fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	6123      	str	r3, [r4, #16]
 8005a02:	2301      	movs	r3, #1
 8005a04:	6163      	str	r3, [r4, #20]
 8005a06:	b003      	add	sp, #12
 8005a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a0c:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <setvbuf+0x154>)
 8005a0e:	429c      	cmp	r4, r3
 8005a10:	d101      	bne.n	8005a16 <setvbuf+0xd2>
 8005a12:	68b4      	ldr	r4, [r6, #8]
 8005a14:	e7a8      	b.n	8005968 <setvbuf+0x24>
 8005a16:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <setvbuf+0x158>)
 8005a18:	429c      	cmp	r4, r3
 8005a1a:	bf08      	it	eq
 8005a1c:	68f4      	ldreq	r4, [r6, #12]
 8005a1e:	e7a3      	b.n	8005968 <setvbuf+0x24>
 8005a20:	2f00      	cmp	r7, #0
 8005a22:	d0d8      	beq.n	80059d6 <setvbuf+0x92>
 8005a24:	69b3      	ldr	r3, [r6, #24]
 8005a26:	b913      	cbnz	r3, 8005a2e <setvbuf+0xea>
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f000 ff6d 	bl	8006908 <__sinit>
 8005a2e:	f1b8 0f01 	cmp.w	r8, #1
 8005a32:	bf08      	it	eq
 8005a34:	89a3      	ldrheq	r3, [r4, #12]
 8005a36:	6027      	str	r7, [r4, #0]
 8005a38:	bf04      	itt	eq
 8005a3a:	f043 0301 	orreq.w	r3, r3, #1
 8005a3e:	81a3      	strheq	r3, [r4, #12]
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005a46:	f013 0008 	ands.w	r0, r3, #8
 8005a4a:	d01b      	beq.n	8005a84 <setvbuf+0x140>
 8005a4c:	f013 0001 	ands.w	r0, r3, #1
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	bf1f      	itttt	ne
 8005a56:	426d      	negne	r5, r5
 8005a58:	60a3      	strne	r3, [r4, #8]
 8005a5a:	61a5      	strne	r5, [r4, #24]
 8005a5c:	4618      	movne	r0, r3
 8005a5e:	bf08      	it	eq
 8005a60:	60a5      	streq	r5, [r4, #8]
 8005a62:	e7d0      	b.n	8005a06 <setvbuf+0xc2>
 8005a64:	4648      	mov	r0, r9
 8005a66:	f001 f80b 	bl	8006a80 <malloc>
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d0bc      	beq.n	80059ea <setvbuf+0xa6>
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	464d      	mov	r5, r9
 8005a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	e7d3      	b.n	8005a24 <setvbuf+0xe0>
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	e7b6      	b.n	80059ee <setvbuf+0xaa>
 8005a80:	46a9      	mov	r9, r5
 8005a82:	e7f5      	b.n	8005a70 <setvbuf+0x12c>
 8005a84:	60a0      	str	r0, [r4, #8]
 8005a86:	e7be      	b.n	8005a06 <setvbuf+0xc2>
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	e7bb      	b.n	8005a06 <setvbuf+0xc2>
 8005a8e:	bf00      	nop
 8005a90:	20000018 	.word	0x20000018
 8005a94:	08007404 	.word	0x08007404
 8005a98:	08007424 	.word	0x08007424
 8005a9c:	080073e4 	.word	0x080073e4

08005aa0 <quorem>:
 8005aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	6903      	ldr	r3, [r0, #16]
 8005aa6:	690c      	ldr	r4, [r1, #16]
 8005aa8:	4680      	mov	r8, r0
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	f2c0 8084 	blt.w	8005bb8 <quorem+0x118>
 8005ab0:	3c01      	subs	r4, #1
 8005ab2:	f101 0714 	add.w	r7, r1, #20
 8005ab6:	f100 0614 	add.w	r6, r0, #20
 8005aba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005abe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005ac2:	3501      	adds	r5, #1
 8005ac4:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ac8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005acc:	eb06 030c 	add.w	r3, r6, ip
 8005ad0:	eb07 090c 	add.w	r9, r7, ip
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	b39d      	cbz	r5, 8005b40 <quorem+0xa0>
 8005ad8:	f04f 0a00 	mov.w	sl, #0
 8005adc:	4638      	mov	r0, r7
 8005ade:	46b6      	mov	lr, r6
 8005ae0:	46d3      	mov	fp, sl
 8005ae2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ae6:	b293      	uxth	r3, r2
 8005ae8:	fb05 a303 	mla	r3, r5, r3, sl
 8005aec:	0c12      	lsrs	r2, r2, #16
 8005aee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005af2:	fb05 a202 	mla	r2, r5, r2, sl
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	ebab 0303 	sub.w	r3, fp, r3
 8005afc:	f8de b000 	ldr.w	fp, [lr]
 8005b00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b04:	fa1f fb8b 	uxth.w	fp, fp
 8005b08:	445b      	add	r3, fp
 8005b0a:	fa1f fb82 	uxth.w	fp, r2
 8005b0e:	f8de 2000 	ldr.w	r2, [lr]
 8005b12:	4581      	cmp	r9, r0
 8005b14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b22:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b26:	f84e 3b04 	str.w	r3, [lr], #4
 8005b2a:	d2da      	bcs.n	8005ae2 <quorem+0x42>
 8005b2c:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b30:	b933      	cbnz	r3, 8005b40 <quorem+0xa0>
 8005b32:	9b01      	ldr	r3, [sp, #4]
 8005b34:	3b04      	subs	r3, #4
 8005b36:	429e      	cmp	r6, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	d331      	bcc.n	8005ba0 <quorem+0x100>
 8005b3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b40:	4640      	mov	r0, r8
 8005b42:	f001 f9c5 	bl	8006ed0 <__mcmp>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	db26      	blt.n	8005b98 <quorem+0xf8>
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f04f 0c00 	mov.w	ip, #0
 8005b50:	3501      	adds	r5, #1
 8005b52:	f857 1b04 	ldr.w	r1, [r7], #4
 8005b56:	f8d0 e000 	ldr.w	lr, [r0]
 8005b5a:	b28b      	uxth	r3, r1
 8005b5c:	ebac 0303 	sub.w	r3, ip, r3
 8005b60:	fa1f f28e 	uxth.w	r2, lr
 8005b64:	4413      	add	r3, r2
 8005b66:	0c0a      	lsrs	r2, r1, #16
 8005b68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b76:	45b9      	cmp	r9, r7
 8005b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b7c:	f840 3b04 	str.w	r3, [r0], #4
 8005b80:	d2e7      	bcs.n	8005b52 <quorem+0xb2>
 8005b82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005b86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005b8a:	b92a      	cbnz	r2, 8005b98 <quorem+0xf8>
 8005b8c:	3b04      	subs	r3, #4
 8005b8e:	429e      	cmp	r6, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	d30b      	bcc.n	8005bac <quorem+0x10c>
 8005b94:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b98:	4628      	mov	r0, r5
 8005b9a:	b003      	add	sp, #12
 8005b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	3b04      	subs	r3, #4
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	d1c9      	bne.n	8005b3c <quorem+0x9c>
 8005ba8:	3c01      	subs	r4, #1
 8005baa:	e7c4      	b.n	8005b36 <quorem+0x96>
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	3b04      	subs	r3, #4
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d1ef      	bne.n	8005b94 <quorem+0xf4>
 8005bb4:	3c01      	subs	r4, #1
 8005bb6:	e7ea      	b.n	8005b8e <quorem+0xee>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e7ee      	b.n	8005b9a <quorem+0xfa>
 8005bbc:	0000      	movs	r0, r0
	...

08005bc0 <_dtoa_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4616      	mov	r6, r2
 8005bc6:	461f      	mov	r7, r3
 8005bc8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bca:	b095      	sub	sp, #84	; 0x54
 8005bcc:	4604      	mov	r4, r0
 8005bce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005bd2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005bd6:	b93d      	cbnz	r5, 8005be8 <_dtoa_r+0x28>
 8005bd8:	2010      	movs	r0, #16
 8005bda:	f000 ff51 	bl	8006a80 <malloc>
 8005bde:	6260      	str	r0, [r4, #36]	; 0x24
 8005be0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005be4:	6005      	str	r5, [r0, #0]
 8005be6:	60c5      	str	r5, [r0, #12]
 8005be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bea:	6819      	ldr	r1, [r3, #0]
 8005bec:	b151      	cbz	r1, 8005c04 <_dtoa_r+0x44>
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4093      	lsls	r3, r2
 8005bf4:	604a      	str	r2, [r1, #4]
 8005bf6:	608b      	str	r3, [r1, #8]
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 ff88 	bl	8006b0e <_Bfree>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	1e3b      	subs	r3, r7, #0
 8005c06:	bfaf      	iteee	ge
 8005c08:	2300      	movge	r3, #0
 8005c0a:	2201      	movlt	r2, #1
 8005c0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c10:	9303      	strlt	r3, [sp, #12]
 8005c12:	bfac      	ite	ge
 8005c14:	f8c8 3000 	strge.w	r3, [r8]
 8005c18:	f8c8 2000 	strlt.w	r2, [r8]
 8005c1c:	4bae      	ldr	r3, [pc, #696]	; (8005ed8 <_dtoa_r+0x318>)
 8005c1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c22:	ea33 0308 	bics.w	r3, r3, r8
 8005c26:	d11b      	bne.n	8005c60 <_dtoa_r+0xa0>
 8005c28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	9b02      	ldr	r3, [sp, #8]
 8005c32:	b923      	cbnz	r3, 8005c3e <_dtoa_r+0x7e>
 8005c34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f000 8545 	beq.w	80066c8 <_dtoa_r+0xb08>
 8005c3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c40:	b953      	cbnz	r3, 8005c58 <_dtoa_r+0x98>
 8005c42:	4ba6      	ldr	r3, [pc, #664]	; (8005edc <_dtoa_r+0x31c>)
 8005c44:	e021      	b.n	8005c8a <_dtoa_r+0xca>
 8005c46:	4ba6      	ldr	r3, [pc, #664]	; (8005ee0 <_dtoa_r+0x320>)
 8005c48:	9306      	str	r3, [sp, #24]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	9806      	ldr	r0, [sp, #24]
 8005c52:	b015      	add	sp, #84	; 0x54
 8005c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c58:	4ba0      	ldr	r3, [pc, #640]	; (8005edc <_dtoa_r+0x31c>)
 8005c5a:	9306      	str	r3, [sp, #24]
 8005c5c:	3303      	adds	r3, #3
 8005c5e:	e7f5      	b.n	8005c4c <_dtoa_r+0x8c>
 8005c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c64:	2200      	movs	r2, #0
 8005c66:	2300      	movs	r3, #0
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005c70:	4682      	mov	sl, r0
 8005c72:	b160      	cbz	r0, 8005c8e <_dtoa_r+0xce>
 8005c74:	2301      	movs	r3, #1
 8005c76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8520 	beq.w	80066c2 <_dtoa_r+0xb02>
 8005c82:	4b98      	ldr	r3, [pc, #608]	; (8005ee4 <_dtoa_r+0x324>)
 8005c84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	9306      	str	r3, [sp, #24]
 8005c8c:	e7e0      	b.n	8005c50 <_dtoa_r+0x90>
 8005c8e:	ab12      	add	r3, sp, #72	; 0x48
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	ab13      	add	r3, sp, #76	; 0x4c
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4632      	mov	r2, r6
 8005c98:	463b      	mov	r3, r7
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f001 f990 	bl	8006fc0 <__d2b>
 8005ca0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ca4:	4683      	mov	fp, r0
 8005ca6:	2d00      	cmp	r5, #0
 8005ca8:	d07d      	beq.n	8005da6 <_dtoa_r+0x1e6>
 8005caa:	46b0      	mov	r8, r6
 8005cac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cb0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005cb4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005cb8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cbc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	4b89      	ldr	r3, [pc, #548]	; (8005ee8 <_dtoa_r+0x328>)
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	f7fa fa4e 	bl	8000168 <__aeabi_dsub>
 8005ccc:	a37c      	add	r3, pc, #496	; (adr r3, 8005ec0 <_dtoa_r+0x300>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fc01 	bl	80004d8 <__aeabi_dmul>
 8005cd6:	a37c      	add	r3, pc, #496	; (adr r3, 8005ec8 <_dtoa_r+0x308>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa fa46 	bl	800016c <__adddf3>
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	460f      	mov	r7, r1
 8005ce6:	f7fa fb8d 	bl	8000404 <__aeabi_i2d>
 8005cea:	a379      	add	r3, pc, #484	; (adr r3, 8005ed0 <_dtoa_r+0x310>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fbf2 	bl	80004d8 <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	f7fa fa36 	bl	800016c <__adddf3>
 8005d00:	4606      	mov	r6, r0
 8005d02:	460f      	mov	r7, r1
 8005d04:	f7fa fe98 	bl	8000a38 <__aeabi_d2iz>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4682      	mov	sl, r0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4630      	mov	r0, r6
 8005d10:	4639      	mov	r1, r7
 8005d12:	f7fa fe53 	bl	80009bc <__aeabi_dcmplt>
 8005d16:	b148      	cbz	r0, 8005d2c <_dtoa_r+0x16c>
 8005d18:	4650      	mov	r0, sl
 8005d1a:	f7fa fb73 	bl	8000404 <__aeabi_i2d>
 8005d1e:	4632      	mov	r2, r6
 8005d20:	463b      	mov	r3, r7
 8005d22:	f7fa fe41 	bl	80009a8 <__aeabi_dcmpeq>
 8005d26:	b908      	cbnz	r0, 8005d2c <_dtoa_r+0x16c>
 8005d28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d2c:	f1ba 0f16 	cmp.w	sl, #22
 8005d30:	d85a      	bhi.n	8005de8 <_dtoa_r+0x228>
 8005d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d36:	496d      	ldr	r1, [pc, #436]	; (8005eec <_dtoa_r+0x32c>)
 8005d38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d40:	f7fa fe5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d051      	beq.n	8005dec <_dtoa_r+0x22c>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8005d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d52:	1b5d      	subs	r5, r3, r5
 8005d54:	1e6b      	subs	r3, r5, #1
 8005d56:	9307      	str	r3, [sp, #28]
 8005d58:	bf43      	ittte	mi
 8005d5a:	2300      	movmi	r3, #0
 8005d5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005d60:	9307      	strmi	r3, [sp, #28]
 8005d62:	f04f 0900 	movpl.w	r9, #0
 8005d66:	f1ba 0f00 	cmp.w	sl, #0
 8005d6a:	db41      	blt.n	8005df0 <_dtoa_r+0x230>
 8005d6c:	9b07      	ldr	r3, [sp, #28]
 8005d6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005d72:	4453      	add	r3, sl
 8005d74:	9307      	str	r3, [sp, #28]
 8005d76:	2300      	movs	r3, #0
 8005d78:	9308      	str	r3, [sp, #32]
 8005d7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d7c:	2b09      	cmp	r3, #9
 8005d7e:	f200 808f 	bhi.w	8005ea0 <_dtoa_r+0x2e0>
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	bfc4      	itt	gt
 8005d86:	3b04      	subgt	r3, #4
 8005d88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005d8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d8c:	bfc8      	it	gt
 8005d8e:	2500      	movgt	r5, #0
 8005d90:	f1a3 0302 	sub.w	r3, r3, #2
 8005d94:	bfd8      	it	le
 8005d96:	2501      	movle	r5, #1
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	f200 808d 	bhi.w	8005eb8 <_dtoa_r+0x2f8>
 8005d9e:	e8df f003 	tbb	[pc, r3]
 8005da2:	7d7b      	.short	0x7d7b
 8005da4:	6f2f      	.short	0x6f2f
 8005da6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005daa:	441d      	add	r5, r3
 8005dac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005db0:	2820      	cmp	r0, #32
 8005db2:	dd13      	ble.n	8005ddc <_dtoa_r+0x21c>
 8005db4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005db8:	9b02      	ldr	r3, [sp, #8]
 8005dba:	fa08 f800 	lsl.w	r8, r8, r0
 8005dbe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005dc2:	fa23 f000 	lsr.w	r0, r3, r0
 8005dc6:	ea48 0000 	orr.w	r0, r8, r0
 8005dca:	f7fa fb0b 	bl	80003e4 <__aeabi_ui2d>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005dd6:	3d01      	subs	r5, #1
 8005dd8:	9310      	str	r3, [sp, #64]	; 0x40
 8005dda:	e771      	b.n	8005cc0 <_dtoa_r+0x100>
 8005ddc:	9b02      	ldr	r3, [sp, #8]
 8005dde:	f1c0 0020 	rsb	r0, r0, #32
 8005de2:	fa03 f000 	lsl.w	r0, r3, r0
 8005de6:	e7f0      	b.n	8005dca <_dtoa_r+0x20a>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e7b0      	b.n	8005d4e <_dtoa_r+0x18e>
 8005dec:	900d      	str	r0, [sp, #52]	; 0x34
 8005dee:	e7af      	b.n	8005d50 <_dtoa_r+0x190>
 8005df0:	f1ca 0300 	rsb	r3, sl, #0
 8005df4:	9308      	str	r3, [sp, #32]
 8005df6:	2300      	movs	r3, #0
 8005df8:	eba9 090a 	sub.w	r9, r9, sl
 8005dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8005dfe:	e7bc      	b.n	8005d7a <_dtoa_r+0x1ba>
 8005e00:	2301      	movs	r3, #1
 8005e02:	9309      	str	r3, [sp, #36]	; 0x24
 8005e04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dd74      	ble.n	8005ef4 <_dtoa_r+0x334>
 8005e0a:	4698      	mov	r8, r3
 8005e0c:	9304      	str	r3, [sp, #16]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e12:	6072      	str	r2, [r6, #4]
 8005e14:	2204      	movs	r2, #4
 8005e16:	f102 0014 	add.w	r0, r2, #20
 8005e1a:	4298      	cmp	r0, r3
 8005e1c:	6871      	ldr	r1, [r6, #4]
 8005e1e:	d96e      	bls.n	8005efe <_dtoa_r+0x33e>
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 fe40 	bl	8006aa6 <_Balloc>
 8005e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e28:	6030      	str	r0, [r6, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f1b8 0f0e 	cmp.w	r8, #14
 8005e30:	9306      	str	r3, [sp, #24]
 8005e32:	f200 80ed 	bhi.w	8006010 <_dtoa_r+0x450>
 8005e36:	2d00      	cmp	r5, #0
 8005e38:	f000 80ea 	beq.w	8006010 <_dtoa_r+0x450>
 8005e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e40:	f1ba 0f00 	cmp.w	sl, #0
 8005e44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005e48:	dd77      	ble.n	8005f3a <_dtoa_r+0x37a>
 8005e4a:	4a28      	ldr	r2, [pc, #160]	; (8005eec <_dtoa_r+0x32c>)
 8005e4c:	f00a 030f 	and.w	r3, sl, #15
 8005e50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005e54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e58:	06f0      	lsls	r0, r6, #27
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005e62:	d568      	bpl.n	8005f36 <_dtoa_r+0x376>
 8005e64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005e68:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <_dtoa_r+0x330>)
 8005e6a:	2503      	movs	r5, #3
 8005e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e70:	f7fa fc5c 	bl	800072c <__aeabi_ddiv>
 8005e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e78:	f006 060f 	and.w	r6, r6, #15
 8005e7c:	4f1c      	ldr	r7, [pc, #112]	; (8005ef0 <_dtoa_r+0x330>)
 8005e7e:	e04f      	b.n	8005f20 <_dtoa_r+0x360>
 8005e80:	2301      	movs	r3, #1
 8005e82:	9309      	str	r3, [sp, #36]	; 0x24
 8005e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e86:	4453      	add	r3, sl
 8005e88:	f103 0801 	add.w	r8, r3, #1
 8005e8c:	9304      	str	r3, [sp, #16]
 8005e8e:	4643      	mov	r3, r8
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bfb8      	it	lt
 8005e94:	2301      	movlt	r3, #1
 8005e96:	e7ba      	b.n	8005e0e <_dtoa_r+0x24e>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e7b2      	b.n	8005e02 <_dtoa_r+0x242>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e7f0      	b.n	8005e82 <_dtoa_r+0x2c2>
 8005ea0:	2501      	movs	r5, #1
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9509      	str	r5, [sp, #36]	; 0x24
 8005ea6:	931e      	str	r3, [sp, #120]	; 0x78
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eac:	2200      	movs	r2, #0
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	4698      	mov	r8, r3
 8005eb2:	2312      	movs	r3, #18
 8005eb4:	921f      	str	r2, [sp, #124]	; 0x7c
 8005eb6:	e7aa      	b.n	8005e0e <_dtoa_r+0x24e>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	9309      	str	r3, [sp, #36]	; 0x24
 8005ebc:	e7f4      	b.n	8005ea8 <_dtoa_r+0x2e8>
 8005ebe:	bf00      	nop
 8005ec0:	636f4361 	.word	0x636f4361
 8005ec4:	3fd287a7 	.word	0x3fd287a7
 8005ec8:	8b60c8b3 	.word	0x8b60c8b3
 8005ecc:	3fc68a28 	.word	0x3fc68a28
 8005ed0:	509f79fb 	.word	0x509f79fb
 8005ed4:	3fd34413 	.word	0x3fd34413
 8005ed8:	7ff00000 	.word	0x7ff00000
 8005edc:	080073df 	.word	0x080073df
 8005ee0:	080073d6 	.word	0x080073d6
 8005ee4:	080073d5 	.word	0x080073d5
 8005ee8:	3ff80000 	.word	0x3ff80000
 8005eec:	08007470 	.word	0x08007470
 8005ef0:	08007448 	.word	0x08007448
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	9304      	str	r3, [sp, #16]
 8005ef8:	4698      	mov	r8, r3
 8005efa:	461a      	mov	r2, r3
 8005efc:	e7da      	b.n	8005eb4 <_dtoa_r+0x2f4>
 8005efe:	3101      	adds	r1, #1
 8005f00:	6071      	str	r1, [r6, #4]
 8005f02:	0052      	lsls	r2, r2, #1
 8005f04:	e787      	b.n	8005e16 <_dtoa_r+0x256>
 8005f06:	07f1      	lsls	r1, r6, #31
 8005f08:	d508      	bpl.n	8005f1c <_dtoa_r+0x35c>
 8005f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f12:	f7fa fae1 	bl	80004d8 <__aeabi_dmul>
 8005f16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f1a:	3501      	adds	r5, #1
 8005f1c:	1076      	asrs	r6, r6, #1
 8005f1e:	3708      	adds	r7, #8
 8005f20:	2e00      	cmp	r6, #0
 8005f22:	d1f0      	bne.n	8005f06 <_dtoa_r+0x346>
 8005f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f2c:	f7fa fbfe 	bl	800072c <__aeabi_ddiv>
 8005f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f34:	e01b      	b.n	8005f6e <_dtoa_r+0x3ae>
 8005f36:	2502      	movs	r5, #2
 8005f38:	e7a0      	b.n	8005e7c <_dtoa_r+0x2bc>
 8005f3a:	f000 80a4 	beq.w	8006086 <_dtoa_r+0x4c6>
 8005f3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005f42:	f1ca 0600 	rsb	r6, sl, #0
 8005f46:	4ba0      	ldr	r3, [pc, #640]	; (80061c8 <_dtoa_r+0x608>)
 8005f48:	f006 020f 	and.w	r2, r6, #15
 8005f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f7fa fac0 	bl	80004d8 <__aeabi_dmul>
 8005f58:	2502      	movs	r5, #2
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f60:	4f9a      	ldr	r7, [pc, #616]	; (80061cc <_dtoa_r+0x60c>)
 8005f62:	1136      	asrs	r6, r6, #4
 8005f64:	2e00      	cmp	r6, #0
 8005f66:	f040 8083 	bne.w	8006070 <_dtoa_r+0x4b0>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e0      	bne.n	8005f30 <_dtoa_r+0x370>
 8005f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 808a 	beq.w	800608a <_dtoa_r+0x4ca>
 8005f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005f7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f82:	2200      	movs	r2, #0
 8005f84:	4b92      	ldr	r3, [pc, #584]	; (80061d0 <_dtoa_r+0x610>)
 8005f86:	f7fa fd19 	bl	80009bc <__aeabi_dcmplt>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d07d      	beq.n	800608a <_dtoa_r+0x4ca>
 8005f8e:	f1b8 0f00 	cmp.w	r8, #0
 8005f92:	d07a      	beq.n	800608a <_dtoa_r+0x4ca>
 8005f94:	9b04      	ldr	r3, [sp, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	dd36      	ble.n	8006008 <_dtoa_r+0x448>
 8005f9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4b8c      	ldr	r3, [pc, #560]	; (80061d4 <_dtoa_r+0x614>)
 8005fa2:	f7fa fa99 	bl	80004d8 <__aeabi_dmul>
 8005fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005faa:	9e04      	ldr	r6, [sp, #16]
 8005fac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f7fa fa26 	bl	8000404 <__aeabi_i2d>
 8005fb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fbc:	f7fa fa8c 	bl	80004d8 <__aeabi_dmul>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4b85      	ldr	r3, [pc, #532]	; (80061d8 <_dtoa_r+0x618>)
 8005fc4:	f7fa f8d2 	bl	800016c <__adddf3>
 8005fc8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005fcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fd0:	950b      	str	r5, [sp, #44]	; 0x2c
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	d15c      	bne.n	8006090 <_dtoa_r+0x4d0>
 8005fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4b7f      	ldr	r3, [pc, #508]	; (80061dc <_dtoa_r+0x61c>)
 8005fde:	f7fa f8c3 	bl	8000168 <__aeabi_dsub>
 8005fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fea:	f7fa fd05 	bl	80009f8 <__aeabi_dcmpgt>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	f040 8281 	bne.w	80064f6 <_dtoa_r+0x936>
 8005ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ffa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005ffe:	f7fa fcdd 	bl	80009bc <__aeabi_dcmplt>
 8006002:	2800      	cmp	r0, #0
 8006004:	f040 8275 	bne.w	80064f2 <_dtoa_r+0x932>
 8006008:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800600c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006010:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006012:	2b00      	cmp	r3, #0
 8006014:	f2c0 814b 	blt.w	80062ae <_dtoa_r+0x6ee>
 8006018:	f1ba 0f0e 	cmp.w	sl, #14
 800601c:	f300 8147 	bgt.w	80062ae <_dtoa_r+0x6ee>
 8006020:	4b69      	ldr	r3, [pc, #420]	; (80061c8 <_dtoa_r+0x608>)
 8006022:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800602e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006030:	2b00      	cmp	r3, #0
 8006032:	f280 80d7 	bge.w	80061e4 <_dtoa_r+0x624>
 8006036:	f1b8 0f00 	cmp.w	r8, #0
 800603a:	f300 80d3 	bgt.w	80061e4 <_dtoa_r+0x624>
 800603e:	f040 8257 	bne.w	80064f0 <_dtoa_r+0x930>
 8006042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006046:	2200      	movs	r2, #0
 8006048:	4b64      	ldr	r3, [pc, #400]	; (80061dc <_dtoa_r+0x61c>)
 800604a:	f7fa fa45 	bl	80004d8 <__aeabi_dmul>
 800604e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006052:	f7fa fcc7 	bl	80009e4 <__aeabi_dcmpge>
 8006056:	4646      	mov	r6, r8
 8006058:	4647      	mov	r7, r8
 800605a:	2800      	cmp	r0, #0
 800605c:	f040 822d 	bne.w	80064ba <_dtoa_r+0x8fa>
 8006060:	9b06      	ldr	r3, [sp, #24]
 8006062:	9a06      	ldr	r2, [sp, #24]
 8006064:	1c5d      	adds	r5, r3, #1
 8006066:	2331      	movs	r3, #49	; 0x31
 8006068:	f10a 0a01 	add.w	sl, sl, #1
 800606c:	7013      	strb	r3, [r2, #0]
 800606e:	e228      	b.n	80064c2 <_dtoa_r+0x902>
 8006070:	07f2      	lsls	r2, r6, #31
 8006072:	d505      	bpl.n	8006080 <_dtoa_r+0x4c0>
 8006074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006078:	f7fa fa2e 	bl	80004d8 <__aeabi_dmul>
 800607c:	2301      	movs	r3, #1
 800607e:	3501      	adds	r5, #1
 8006080:	1076      	asrs	r6, r6, #1
 8006082:	3708      	adds	r7, #8
 8006084:	e76e      	b.n	8005f64 <_dtoa_r+0x3a4>
 8006086:	2502      	movs	r5, #2
 8006088:	e771      	b.n	8005f6e <_dtoa_r+0x3ae>
 800608a:	4657      	mov	r7, sl
 800608c:	4646      	mov	r6, r8
 800608e:	e790      	b.n	8005fb2 <_dtoa_r+0x3f2>
 8006090:	4b4d      	ldr	r3, [pc, #308]	; (80061c8 <_dtoa_r+0x608>)
 8006092:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006096:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800609a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	d048      	beq.n	8006132 <_dtoa_r+0x572>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	2000      	movs	r0, #0
 80060a6:	494e      	ldr	r1, [pc, #312]	; (80061e0 <_dtoa_r+0x620>)
 80060a8:	f7fa fb40 	bl	800072c <__aeabi_ddiv>
 80060ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060b0:	f7fa f85a 	bl	8000168 <__aeabi_dsub>
 80060b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80060b8:	9d06      	ldr	r5, [sp, #24]
 80060ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060be:	f7fa fcbb 	bl	8000a38 <__aeabi_d2iz>
 80060c2:	9011      	str	r0, [sp, #68]	; 0x44
 80060c4:	f7fa f99e 	bl	8000404 <__aeabi_i2d>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d0:	f7fa f84a 	bl	8000168 <__aeabi_dsub>
 80060d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060da:	3330      	adds	r3, #48	; 0x30
 80060dc:	f805 3b01 	strb.w	r3, [r5], #1
 80060e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060e4:	f7fa fc6a 	bl	80009bc <__aeabi_dcmplt>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d163      	bne.n	80061b4 <_dtoa_r+0x5f4>
 80060ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060f0:	2000      	movs	r0, #0
 80060f2:	4937      	ldr	r1, [pc, #220]	; (80061d0 <_dtoa_r+0x610>)
 80060f4:	f7fa f838 	bl	8000168 <__aeabi_dsub>
 80060f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060fc:	f7fa fc5e 	bl	80009bc <__aeabi_dcmplt>
 8006100:	2800      	cmp	r0, #0
 8006102:	f040 80b5 	bne.w	8006270 <_dtoa_r+0x6b0>
 8006106:	9b06      	ldr	r3, [sp, #24]
 8006108:	1aeb      	subs	r3, r5, r3
 800610a:	429e      	cmp	r6, r3
 800610c:	f77f af7c 	ble.w	8006008 <_dtoa_r+0x448>
 8006110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006114:	2200      	movs	r2, #0
 8006116:	4b2f      	ldr	r3, [pc, #188]	; (80061d4 <_dtoa_r+0x614>)
 8006118:	f7fa f9de 	bl	80004d8 <__aeabi_dmul>
 800611c:	2200      	movs	r2, #0
 800611e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006126:	4b2b      	ldr	r3, [pc, #172]	; (80061d4 <_dtoa_r+0x614>)
 8006128:	f7fa f9d6 	bl	80004d8 <__aeabi_dmul>
 800612c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006130:	e7c3      	b.n	80060ba <_dtoa_r+0x4fa>
 8006132:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006136:	f7fa f9cf 	bl	80004d8 <__aeabi_dmul>
 800613a:	9b06      	ldr	r3, [sp, #24]
 800613c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006140:	199d      	adds	r5, r3, r6
 8006142:	461e      	mov	r6, r3
 8006144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006148:	f7fa fc76 	bl	8000a38 <__aeabi_d2iz>
 800614c:	9011      	str	r0, [sp, #68]	; 0x44
 800614e:	f7fa f959 	bl	8000404 <__aeabi_i2d>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800615a:	f7fa f805 	bl	8000168 <__aeabi_dsub>
 800615e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006164:	3330      	adds	r3, #48	; 0x30
 8006166:	f806 3b01 	strb.w	r3, [r6], #1
 800616a:	42ae      	cmp	r6, r5
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	d124      	bne.n	80061bc <_dtoa_r+0x5fc>
 8006172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006176:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <_dtoa_r+0x620>)
 8006178:	f7f9 fff8 	bl	800016c <__adddf3>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006184:	f7fa fc38 	bl	80009f8 <__aeabi_dcmpgt>
 8006188:	2800      	cmp	r0, #0
 800618a:	d171      	bne.n	8006270 <_dtoa_r+0x6b0>
 800618c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006190:	2000      	movs	r0, #0
 8006192:	4913      	ldr	r1, [pc, #76]	; (80061e0 <_dtoa_r+0x620>)
 8006194:	f7f9 ffe8 	bl	8000168 <__aeabi_dsub>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a0:	f7fa fc0c 	bl	80009bc <__aeabi_dcmplt>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f43f af2f 	beq.w	8006008 <_dtoa_r+0x448>
 80061aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061ae:	1e6a      	subs	r2, r5, #1
 80061b0:	2b30      	cmp	r3, #48	; 0x30
 80061b2:	d001      	beq.n	80061b8 <_dtoa_r+0x5f8>
 80061b4:	46ba      	mov	sl, r7
 80061b6:	e04a      	b.n	800624e <_dtoa_r+0x68e>
 80061b8:	4615      	mov	r5, r2
 80061ba:	e7f6      	b.n	80061aa <_dtoa_r+0x5ea>
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <_dtoa_r+0x614>)
 80061be:	f7fa f98b 	bl	80004d8 <__aeabi_dmul>
 80061c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c6:	e7bd      	b.n	8006144 <_dtoa_r+0x584>
 80061c8:	08007470 	.word	0x08007470
 80061cc:	08007448 	.word	0x08007448
 80061d0:	3ff00000 	.word	0x3ff00000
 80061d4:	40240000 	.word	0x40240000
 80061d8:	401c0000 	.word	0x401c0000
 80061dc:	40140000 	.word	0x40140000
 80061e0:	3fe00000 	.word	0x3fe00000
 80061e4:	9d06      	ldr	r5, [sp, #24]
 80061e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ee:	4630      	mov	r0, r6
 80061f0:	4639      	mov	r1, r7
 80061f2:	f7fa fa9b 	bl	800072c <__aeabi_ddiv>
 80061f6:	f7fa fc1f 	bl	8000a38 <__aeabi_d2iz>
 80061fa:	4681      	mov	r9, r0
 80061fc:	f7fa f902 	bl	8000404 <__aeabi_i2d>
 8006200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006204:	f7fa f968 	bl	80004d8 <__aeabi_dmul>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4630      	mov	r0, r6
 800620e:	4639      	mov	r1, r7
 8006210:	f7f9 ffaa 	bl	8000168 <__aeabi_dsub>
 8006214:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006218:	f805 6b01 	strb.w	r6, [r5], #1
 800621c:	9e06      	ldr	r6, [sp, #24]
 800621e:	4602      	mov	r2, r0
 8006220:	1bae      	subs	r6, r5, r6
 8006222:	45b0      	cmp	r8, r6
 8006224:	460b      	mov	r3, r1
 8006226:	d135      	bne.n	8006294 <_dtoa_r+0x6d4>
 8006228:	f7f9 ffa0 	bl	800016c <__adddf3>
 800622c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006230:	4606      	mov	r6, r0
 8006232:	460f      	mov	r7, r1
 8006234:	f7fa fbe0 	bl	80009f8 <__aeabi_dcmpgt>
 8006238:	b9c8      	cbnz	r0, 800626e <_dtoa_r+0x6ae>
 800623a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800623e:	4630      	mov	r0, r6
 8006240:	4639      	mov	r1, r7
 8006242:	f7fa fbb1 	bl	80009a8 <__aeabi_dcmpeq>
 8006246:	b110      	cbz	r0, 800624e <_dtoa_r+0x68e>
 8006248:	f019 0f01 	tst.w	r9, #1
 800624c:	d10f      	bne.n	800626e <_dtoa_r+0x6ae>
 800624e:	4659      	mov	r1, fp
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fc5c 	bl	8006b0e <_Bfree>
 8006256:	2300      	movs	r3, #0
 8006258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800625a:	702b      	strb	r3, [r5, #0]
 800625c:	f10a 0301 	add.w	r3, sl, #1
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006264:	2b00      	cmp	r3, #0
 8006266:	f43f acf3 	beq.w	8005c50 <_dtoa_r+0x90>
 800626a:	601d      	str	r5, [r3, #0]
 800626c:	e4f0      	b.n	8005c50 <_dtoa_r+0x90>
 800626e:	4657      	mov	r7, sl
 8006270:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006274:	1e6b      	subs	r3, r5, #1
 8006276:	2a39      	cmp	r2, #57	; 0x39
 8006278:	d106      	bne.n	8006288 <_dtoa_r+0x6c8>
 800627a:	9a06      	ldr	r2, [sp, #24]
 800627c:	429a      	cmp	r2, r3
 800627e:	d107      	bne.n	8006290 <_dtoa_r+0x6d0>
 8006280:	2330      	movs	r3, #48	; 0x30
 8006282:	7013      	strb	r3, [r2, #0]
 8006284:	4613      	mov	r3, r2
 8006286:	3701      	adds	r7, #1
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	3201      	adds	r2, #1
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	e791      	b.n	80061b4 <_dtoa_r+0x5f4>
 8006290:	461d      	mov	r5, r3
 8006292:	e7ed      	b.n	8006270 <_dtoa_r+0x6b0>
 8006294:	2200      	movs	r2, #0
 8006296:	4b99      	ldr	r3, [pc, #612]	; (80064fc <_dtoa_r+0x93c>)
 8006298:	f7fa f91e 	bl	80004d8 <__aeabi_dmul>
 800629c:	2200      	movs	r2, #0
 800629e:	2300      	movs	r3, #0
 80062a0:	4606      	mov	r6, r0
 80062a2:	460f      	mov	r7, r1
 80062a4:	f7fa fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d09e      	beq.n	80061ea <_dtoa_r+0x62a>
 80062ac:	e7cf      	b.n	800624e <_dtoa_r+0x68e>
 80062ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	f000 8088 	beq.w	80063c6 <_dtoa_r+0x806>
 80062b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80062b8:	2a01      	cmp	r2, #1
 80062ba:	dc6d      	bgt.n	8006398 <_dtoa_r+0x7d8>
 80062bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062be:	2a00      	cmp	r2, #0
 80062c0:	d066      	beq.n	8006390 <_dtoa_r+0x7d0>
 80062c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062c6:	464d      	mov	r5, r9
 80062c8:	9e08      	ldr	r6, [sp, #32]
 80062ca:	9a07      	ldr	r2, [sp, #28]
 80062cc:	2101      	movs	r1, #1
 80062ce:	441a      	add	r2, r3
 80062d0:	4620      	mov	r0, r4
 80062d2:	4499      	add	r9, r3
 80062d4:	9207      	str	r2, [sp, #28]
 80062d6:	f000 fcba 	bl	8006c4e <__i2b>
 80062da:	4607      	mov	r7, r0
 80062dc:	2d00      	cmp	r5, #0
 80062de:	dd0b      	ble.n	80062f8 <_dtoa_r+0x738>
 80062e0:	9b07      	ldr	r3, [sp, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	dd08      	ble.n	80062f8 <_dtoa_r+0x738>
 80062e6:	42ab      	cmp	r3, r5
 80062e8:	bfa8      	it	ge
 80062ea:	462b      	movge	r3, r5
 80062ec:	9a07      	ldr	r2, [sp, #28]
 80062ee:	eba9 0903 	sub.w	r9, r9, r3
 80062f2:	1aed      	subs	r5, r5, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	9b08      	ldr	r3, [sp, #32]
 80062fa:	b1eb      	cbz	r3, 8006338 <_dtoa_r+0x778>
 80062fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d065      	beq.n	80063ce <_dtoa_r+0x80e>
 8006302:	b18e      	cbz	r6, 8006328 <_dtoa_r+0x768>
 8006304:	4639      	mov	r1, r7
 8006306:	4632      	mov	r2, r6
 8006308:	4620      	mov	r0, r4
 800630a:	f000 fd3f 	bl	8006d8c <__pow5mult>
 800630e:	465a      	mov	r2, fp
 8006310:	4601      	mov	r1, r0
 8006312:	4607      	mov	r7, r0
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fca3 	bl	8006c60 <__multiply>
 800631a:	4659      	mov	r1, fp
 800631c:	900a      	str	r0, [sp, #40]	; 0x28
 800631e:	4620      	mov	r0, r4
 8006320:	f000 fbf5 	bl	8006b0e <_Bfree>
 8006324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006326:	469b      	mov	fp, r3
 8006328:	9b08      	ldr	r3, [sp, #32]
 800632a:	1b9a      	subs	r2, r3, r6
 800632c:	d004      	beq.n	8006338 <_dtoa_r+0x778>
 800632e:	4659      	mov	r1, fp
 8006330:	4620      	mov	r0, r4
 8006332:	f000 fd2b 	bl	8006d8c <__pow5mult>
 8006336:	4683      	mov	fp, r0
 8006338:	2101      	movs	r1, #1
 800633a:	4620      	mov	r0, r4
 800633c:	f000 fc87 	bl	8006c4e <__i2b>
 8006340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006342:	4606      	mov	r6, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 81c6 	beq.w	80066d6 <_dtoa_r+0xb16>
 800634a:	461a      	mov	r2, r3
 800634c:	4601      	mov	r1, r0
 800634e:	4620      	mov	r0, r4
 8006350:	f000 fd1c 	bl	8006d8c <__pow5mult>
 8006354:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006356:	4606      	mov	r6, r0
 8006358:	2b01      	cmp	r3, #1
 800635a:	dc3e      	bgt.n	80063da <_dtoa_r+0x81a>
 800635c:	9b02      	ldr	r3, [sp, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d137      	bne.n	80063d2 <_dtoa_r+0x812>
 8006362:	9b03      	ldr	r3, [sp, #12]
 8006364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006368:	2b00      	cmp	r3, #0
 800636a:	d134      	bne.n	80063d6 <_dtoa_r+0x816>
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006372:	0d1b      	lsrs	r3, r3, #20
 8006374:	051b      	lsls	r3, r3, #20
 8006376:	b12b      	cbz	r3, 8006384 <_dtoa_r+0x7c4>
 8006378:	9b07      	ldr	r3, [sp, #28]
 800637a:	f109 0901 	add.w	r9, r9, #1
 800637e:	3301      	adds	r3, #1
 8006380:	9307      	str	r3, [sp, #28]
 8006382:	2301      	movs	r3, #1
 8006384:	9308      	str	r3, [sp, #32]
 8006386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006388:	2b00      	cmp	r3, #0
 800638a:	d128      	bne.n	80063de <_dtoa_r+0x81e>
 800638c:	2001      	movs	r0, #1
 800638e:	e02e      	b.n	80063ee <_dtoa_r+0x82e>
 8006390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006392:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006396:	e796      	b.n	80062c6 <_dtoa_r+0x706>
 8006398:	9b08      	ldr	r3, [sp, #32]
 800639a:	f108 36ff 	add.w	r6, r8, #4294967295
 800639e:	42b3      	cmp	r3, r6
 80063a0:	bfb7      	itett	lt
 80063a2:	9b08      	ldrlt	r3, [sp, #32]
 80063a4:	1b9e      	subge	r6, r3, r6
 80063a6:	1af2      	sublt	r2, r6, r3
 80063a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80063aa:	bfbf      	itttt	lt
 80063ac:	9608      	strlt	r6, [sp, #32]
 80063ae:	189b      	addlt	r3, r3, r2
 80063b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80063b2:	2600      	movlt	r6, #0
 80063b4:	f1b8 0f00 	cmp.w	r8, #0
 80063b8:	bfb9      	ittee	lt
 80063ba:	eba9 0508 	sublt.w	r5, r9, r8
 80063be:	2300      	movlt	r3, #0
 80063c0:	464d      	movge	r5, r9
 80063c2:	4643      	movge	r3, r8
 80063c4:	e781      	b.n	80062ca <_dtoa_r+0x70a>
 80063c6:	9e08      	ldr	r6, [sp, #32]
 80063c8:	464d      	mov	r5, r9
 80063ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80063cc:	e786      	b.n	80062dc <_dtoa_r+0x71c>
 80063ce:	9a08      	ldr	r2, [sp, #32]
 80063d0:	e7ad      	b.n	800632e <_dtoa_r+0x76e>
 80063d2:	2300      	movs	r3, #0
 80063d4:	e7d6      	b.n	8006384 <_dtoa_r+0x7c4>
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	e7d4      	b.n	8006384 <_dtoa_r+0x7c4>
 80063da:	2300      	movs	r3, #0
 80063dc:	9308      	str	r3, [sp, #32]
 80063de:	6933      	ldr	r3, [r6, #16]
 80063e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80063e4:	6918      	ldr	r0, [r3, #16]
 80063e6:	f000 fbe4 	bl	8006bb2 <__hi0bits>
 80063ea:	f1c0 0020 	rsb	r0, r0, #32
 80063ee:	9b07      	ldr	r3, [sp, #28]
 80063f0:	4418      	add	r0, r3
 80063f2:	f010 001f 	ands.w	r0, r0, #31
 80063f6:	d047      	beq.n	8006488 <_dtoa_r+0x8c8>
 80063f8:	f1c0 0320 	rsb	r3, r0, #32
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	dd3b      	ble.n	8006478 <_dtoa_r+0x8b8>
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	f1c0 001c 	rsb	r0, r0, #28
 8006406:	4481      	add	r9, r0
 8006408:	4405      	add	r5, r0
 800640a:	4403      	add	r3, r0
 800640c:	9307      	str	r3, [sp, #28]
 800640e:	f1b9 0f00 	cmp.w	r9, #0
 8006412:	dd05      	ble.n	8006420 <_dtoa_r+0x860>
 8006414:	4659      	mov	r1, fp
 8006416:	464a      	mov	r2, r9
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fd05 	bl	8006e28 <__lshift>
 800641e:	4683      	mov	fp, r0
 8006420:	9b07      	ldr	r3, [sp, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	dd05      	ble.n	8006432 <_dtoa_r+0x872>
 8006426:	4631      	mov	r1, r6
 8006428:	461a      	mov	r2, r3
 800642a:	4620      	mov	r0, r4
 800642c:	f000 fcfc 	bl	8006e28 <__lshift>
 8006430:	4606      	mov	r6, r0
 8006432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006434:	b353      	cbz	r3, 800648c <_dtoa_r+0x8cc>
 8006436:	4631      	mov	r1, r6
 8006438:	4658      	mov	r0, fp
 800643a:	f000 fd49 	bl	8006ed0 <__mcmp>
 800643e:	2800      	cmp	r0, #0
 8006440:	da24      	bge.n	800648c <_dtoa_r+0x8cc>
 8006442:	2300      	movs	r3, #0
 8006444:	4659      	mov	r1, fp
 8006446:	220a      	movs	r2, #10
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fb77 	bl	8006b3c <__multadd>
 800644e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006450:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006454:	4683      	mov	fp, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 8144 	beq.w	80066e4 <_dtoa_r+0xb24>
 800645c:	2300      	movs	r3, #0
 800645e:	4639      	mov	r1, r7
 8006460:	220a      	movs	r2, #10
 8006462:	4620      	mov	r0, r4
 8006464:	f000 fb6a 	bl	8006b3c <__multadd>
 8006468:	9b04      	ldr	r3, [sp, #16]
 800646a:	4607      	mov	r7, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	dc4d      	bgt.n	800650c <_dtoa_r+0x94c>
 8006470:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006472:	2b02      	cmp	r3, #2
 8006474:	dd4a      	ble.n	800650c <_dtoa_r+0x94c>
 8006476:	e011      	b.n	800649c <_dtoa_r+0x8dc>
 8006478:	d0c9      	beq.n	800640e <_dtoa_r+0x84e>
 800647a:	9a07      	ldr	r2, [sp, #28]
 800647c:	331c      	adds	r3, #28
 800647e:	441a      	add	r2, r3
 8006480:	4499      	add	r9, r3
 8006482:	441d      	add	r5, r3
 8006484:	4613      	mov	r3, r2
 8006486:	e7c1      	b.n	800640c <_dtoa_r+0x84c>
 8006488:	4603      	mov	r3, r0
 800648a:	e7f6      	b.n	800647a <_dtoa_r+0x8ba>
 800648c:	f1b8 0f00 	cmp.w	r8, #0
 8006490:	dc36      	bgt.n	8006500 <_dtoa_r+0x940>
 8006492:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006494:	2b02      	cmp	r3, #2
 8006496:	dd33      	ble.n	8006500 <_dtoa_r+0x940>
 8006498:	f8cd 8010 	str.w	r8, [sp, #16]
 800649c:	9b04      	ldr	r3, [sp, #16]
 800649e:	b963      	cbnz	r3, 80064ba <_dtoa_r+0x8fa>
 80064a0:	4631      	mov	r1, r6
 80064a2:	2205      	movs	r2, #5
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fb49 	bl	8006b3c <__multadd>
 80064aa:	4601      	mov	r1, r0
 80064ac:	4606      	mov	r6, r0
 80064ae:	4658      	mov	r0, fp
 80064b0:	f000 fd0e 	bl	8006ed0 <__mcmp>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	f73f add3 	bgt.w	8006060 <_dtoa_r+0x4a0>
 80064ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064bc:	9d06      	ldr	r5, [sp, #24]
 80064be:	ea6f 0a03 	mvn.w	sl, r3
 80064c2:	f04f 0900 	mov.w	r9, #0
 80064c6:	4631      	mov	r1, r6
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fb20 	bl	8006b0e <_Bfree>
 80064ce:	2f00      	cmp	r7, #0
 80064d0:	f43f aebd 	beq.w	800624e <_dtoa_r+0x68e>
 80064d4:	f1b9 0f00 	cmp.w	r9, #0
 80064d8:	d005      	beq.n	80064e6 <_dtoa_r+0x926>
 80064da:	45b9      	cmp	r9, r7
 80064dc:	d003      	beq.n	80064e6 <_dtoa_r+0x926>
 80064de:	4649      	mov	r1, r9
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fb14 	bl	8006b0e <_Bfree>
 80064e6:	4639      	mov	r1, r7
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 fb10 	bl	8006b0e <_Bfree>
 80064ee:	e6ae      	b.n	800624e <_dtoa_r+0x68e>
 80064f0:	2600      	movs	r6, #0
 80064f2:	4637      	mov	r7, r6
 80064f4:	e7e1      	b.n	80064ba <_dtoa_r+0x8fa>
 80064f6:	46ba      	mov	sl, r7
 80064f8:	4637      	mov	r7, r6
 80064fa:	e5b1      	b.n	8006060 <_dtoa_r+0x4a0>
 80064fc:	40240000 	.word	0x40240000
 8006500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006502:	f8cd 8010 	str.w	r8, [sp, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80f3 	beq.w	80066f2 <_dtoa_r+0xb32>
 800650c:	2d00      	cmp	r5, #0
 800650e:	dd05      	ble.n	800651c <_dtoa_r+0x95c>
 8006510:	4639      	mov	r1, r7
 8006512:	462a      	mov	r2, r5
 8006514:	4620      	mov	r0, r4
 8006516:	f000 fc87 	bl	8006e28 <__lshift>
 800651a:	4607      	mov	r7, r0
 800651c:	9b08      	ldr	r3, [sp, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d04c      	beq.n	80065bc <_dtoa_r+0x9fc>
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	4620      	mov	r0, r4
 8006526:	f000 fabe 	bl	8006aa6 <_Balloc>
 800652a:	4605      	mov	r5, r0
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	f107 010c 	add.w	r1, r7, #12
 8006532:	3202      	adds	r2, #2
 8006534:	0092      	lsls	r2, r2, #2
 8006536:	300c      	adds	r0, #12
 8006538:	f000 faaa 	bl	8006a90 <memcpy>
 800653c:	2201      	movs	r2, #1
 800653e:	4629      	mov	r1, r5
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fc71 	bl	8006e28 <__lshift>
 8006546:	46b9      	mov	r9, r7
 8006548:	4607      	mov	r7, r0
 800654a:	9b06      	ldr	r3, [sp, #24]
 800654c:	9307      	str	r3, [sp, #28]
 800654e:	9b02      	ldr	r3, [sp, #8]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	9308      	str	r3, [sp, #32]
 8006556:	4631      	mov	r1, r6
 8006558:	4658      	mov	r0, fp
 800655a:	f7ff faa1 	bl	8005aa0 <quorem>
 800655e:	4649      	mov	r1, r9
 8006560:	4605      	mov	r5, r0
 8006562:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006566:	4658      	mov	r0, fp
 8006568:	f000 fcb2 	bl	8006ed0 <__mcmp>
 800656c:	463a      	mov	r2, r7
 800656e:	9002      	str	r0, [sp, #8]
 8006570:	4631      	mov	r1, r6
 8006572:	4620      	mov	r0, r4
 8006574:	f000 fcc6 	bl	8006f04 <__mdiff>
 8006578:	68c3      	ldr	r3, [r0, #12]
 800657a:	4602      	mov	r2, r0
 800657c:	bb03      	cbnz	r3, 80065c0 <_dtoa_r+0xa00>
 800657e:	4601      	mov	r1, r0
 8006580:	9009      	str	r0, [sp, #36]	; 0x24
 8006582:	4658      	mov	r0, fp
 8006584:	f000 fca4 	bl	8006ed0 <__mcmp>
 8006588:	4603      	mov	r3, r0
 800658a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800658c:	4611      	mov	r1, r2
 800658e:	4620      	mov	r0, r4
 8006590:	9309      	str	r3, [sp, #36]	; 0x24
 8006592:	f000 fabc 	bl	8006b0e <_Bfree>
 8006596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006598:	b9a3      	cbnz	r3, 80065c4 <_dtoa_r+0xa04>
 800659a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800659c:	b992      	cbnz	r2, 80065c4 <_dtoa_r+0xa04>
 800659e:	9a08      	ldr	r2, [sp, #32]
 80065a0:	b982      	cbnz	r2, 80065c4 <_dtoa_r+0xa04>
 80065a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065a6:	d029      	beq.n	80065fc <_dtoa_r+0xa3c>
 80065a8:	9b02      	ldr	r3, [sp, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	dd01      	ble.n	80065b2 <_dtoa_r+0x9f2>
 80065ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80065b2:	9b07      	ldr	r3, [sp, #28]
 80065b4:	1c5d      	adds	r5, r3, #1
 80065b6:	f883 8000 	strb.w	r8, [r3]
 80065ba:	e784      	b.n	80064c6 <_dtoa_r+0x906>
 80065bc:	4638      	mov	r0, r7
 80065be:	e7c2      	b.n	8006546 <_dtoa_r+0x986>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e7e3      	b.n	800658c <_dtoa_r+0x9cc>
 80065c4:	9a02      	ldr	r2, [sp, #8]
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	db04      	blt.n	80065d4 <_dtoa_r+0xa14>
 80065ca:	d123      	bne.n	8006614 <_dtoa_r+0xa54>
 80065cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80065ce:	bb0a      	cbnz	r2, 8006614 <_dtoa_r+0xa54>
 80065d0:	9a08      	ldr	r2, [sp, #32]
 80065d2:	b9fa      	cbnz	r2, 8006614 <_dtoa_r+0xa54>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	ddec      	ble.n	80065b2 <_dtoa_r+0x9f2>
 80065d8:	4659      	mov	r1, fp
 80065da:	2201      	movs	r2, #1
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 fc23 	bl	8006e28 <__lshift>
 80065e2:	4631      	mov	r1, r6
 80065e4:	4683      	mov	fp, r0
 80065e6:	f000 fc73 	bl	8006ed0 <__mcmp>
 80065ea:	2800      	cmp	r0, #0
 80065ec:	dc03      	bgt.n	80065f6 <_dtoa_r+0xa36>
 80065ee:	d1e0      	bne.n	80065b2 <_dtoa_r+0x9f2>
 80065f0:	f018 0f01 	tst.w	r8, #1
 80065f4:	d0dd      	beq.n	80065b2 <_dtoa_r+0x9f2>
 80065f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065fa:	d1d8      	bne.n	80065ae <_dtoa_r+0x9ee>
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	9a07      	ldr	r2, [sp, #28]
 8006600:	1c5d      	adds	r5, r3, #1
 8006602:	2339      	movs	r3, #57	; 0x39
 8006604:	7013      	strb	r3, [r2, #0]
 8006606:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800660a:	1e6a      	subs	r2, r5, #1
 800660c:	2b39      	cmp	r3, #57	; 0x39
 800660e:	d04d      	beq.n	80066ac <_dtoa_r+0xaec>
 8006610:	3301      	adds	r3, #1
 8006612:	e052      	b.n	80066ba <_dtoa_r+0xafa>
 8006614:	9a07      	ldr	r2, [sp, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f102 0501 	add.w	r5, r2, #1
 800661c:	dd06      	ble.n	800662c <_dtoa_r+0xa6c>
 800661e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006622:	d0eb      	beq.n	80065fc <_dtoa_r+0xa3c>
 8006624:	f108 0801 	add.w	r8, r8, #1
 8006628:	9b07      	ldr	r3, [sp, #28]
 800662a:	e7c4      	b.n	80065b6 <_dtoa_r+0x9f6>
 800662c:	9b06      	ldr	r3, [sp, #24]
 800662e:	9a04      	ldr	r2, [sp, #16]
 8006630:	1aeb      	subs	r3, r5, r3
 8006632:	4293      	cmp	r3, r2
 8006634:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006638:	d021      	beq.n	800667e <_dtoa_r+0xabe>
 800663a:	4659      	mov	r1, fp
 800663c:	2300      	movs	r3, #0
 800663e:	220a      	movs	r2, #10
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fa7b 	bl	8006b3c <__multadd>
 8006646:	45b9      	cmp	r9, r7
 8006648:	4683      	mov	fp, r0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	f04f 020a 	mov.w	r2, #10
 8006652:	4649      	mov	r1, r9
 8006654:	4620      	mov	r0, r4
 8006656:	d105      	bne.n	8006664 <_dtoa_r+0xaa4>
 8006658:	f000 fa70 	bl	8006b3c <__multadd>
 800665c:	4681      	mov	r9, r0
 800665e:	4607      	mov	r7, r0
 8006660:	9507      	str	r5, [sp, #28]
 8006662:	e778      	b.n	8006556 <_dtoa_r+0x996>
 8006664:	f000 fa6a 	bl	8006b3c <__multadd>
 8006668:	4639      	mov	r1, r7
 800666a:	4681      	mov	r9, r0
 800666c:	2300      	movs	r3, #0
 800666e:	220a      	movs	r2, #10
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fa63 	bl	8006b3c <__multadd>
 8006676:	4607      	mov	r7, r0
 8006678:	e7f2      	b.n	8006660 <_dtoa_r+0xaa0>
 800667a:	f04f 0900 	mov.w	r9, #0
 800667e:	4659      	mov	r1, fp
 8006680:	2201      	movs	r2, #1
 8006682:	4620      	mov	r0, r4
 8006684:	f000 fbd0 	bl	8006e28 <__lshift>
 8006688:	4631      	mov	r1, r6
 800668a:	4683      	mov	fp, r0
 800668c:	f000 fc20 	bl	8006ed0 <__mcmp>
 8006690:	2800      	cmp	r0, #0
 8006692:	dcb8      	bgt.n	8006606 <_dtoa_r+0xa46>
 8006694:	d102      	bne.n	800669c <_dtoa_r+0xadc>
 8006696:	f018 0f01 	tst.w	r8, #1
 800669a:	d1b4      	bne.n	8006606 <_dtoa_r+0xa46>
 800669c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066a0:	1e6a      	subs	r2, r5, #1
 80066a2:	2b30      	cmp	r3, #48	; 0x30
 80066a4:	f47f af0f 	bne.w	80064c6 <_dtoa_r+0x906>
 80066a8:	4615      	mov	r5, r2
 80066aa:	e7f7      	b.n	800669c <_dtoa_r+0xadc>
 80066ac:	9b06      	ldr	r3, [sp, #24]
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d105      	bne.n	80066be <_dtoa_r+0xafe>
 80066b2:	2331      	movs	r3, #49	; 0x31
 80066b4:	9a06      	ldr	r2, [sp, #24]
 80066b6:	f10a 0a01 	add.w	sl, sl, #1
 80066ba:	7013      	strb	r3, [r2, #0]
 80066bc:	e703      	b.n	80064c6 <_dtoa_r+0x906>
 80066be:	4615      	mov	r5, r2
 80066c0:	e7a1      	b.n	8006606 <_dtoa_r+0xa46>
 80066c2:	4b17      	ldr	r3, [pc, #92]	; (8006720 <_dtoa_r+0xb60>)
 80066c4:	f7ff bae1 	b.w	8005c8a <_dtoa_r+0xca>
 80066c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f47f aabb 	bne.w	8005c46 <_dtoa_r+0x86>
 80066d0:	4b14      	ldr	r3, [pc, #80]	; (8006724 <_dtoa_r+0xb64>)
 80066d2:	f7ff bada 	b.w	8005c8a <_dtoa_r+0xca>
 80066d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066d8:	2b01      	cmp	r3, #1
 80066da:	f77f ae3f 	ble.w	800635c <_dtoa_r+0x79c>
 80066de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066e0:	9308      	str	r3, [sp, #32]
 80066e2:	e653      	b.n	800638c <_dtoa_r+0x7cc>
 80066e4:	9b04      	ldr	r3, [sp, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dc03      	bgt.n	80066f2 <_dtoa_r+0xb32>
 80066ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	f73f aed5 	bgt.w	800649c <_dtoa_r+0x8dc>
 80066f2:	9d06      	ldr	r5, [sp, #24]
 80066f4:	4631      	mov	r1, r6
 80066f6:	4658      	mov	r0, fp
 80066f8:	f7ff f9d2 	bl	8005aa0 <quorem>
 80066fc:	9b06      	ldr	r3, [sp, #24]
 80066fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006702:	f805 8b01 	strb.w	r8, [r5], #1
 8006706:	9a04      	ldr	r2, [sp, #16]
 8006708:	1aeb      	subs	r3, r5, r3
 800670a:	429a      	cmp	r2, r3
 800670c:	ddb5      	ble.n	800667a <_dtoa_r+0xaba>
 800670e:	4659      	mov	r1, fp
 8006710:	2300      	movs	r3, #0
 8006712:	220a      	movs	r2, #10
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fa11 	bl	8006b3c <__multadd>
 800671a:	4683      	mov	fp, r0
 800671c:	e7ea      	b.n	80066f4 <_dtoa_r+0xb34>
 800671e:	bf00      	nop
 8006720:	080073d4 	.word	0x080073d4
 8006724:	080073d6 	.word	0x080073d6

08006728 <__sflush_r>:
 8006728:	898a      	ldrh	r2, [r1, #12]
 800672a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672e:	4605      	mov	r5, r0
 8006730:	0710      	lsls	r0, r2, #28
 8006732:	460c      	mov	r4, r1
 8006734:	d458      	bmi.n	80067e8 <__sflush_r+0xc0>
 8006736:	684b      	ldr	r3, [r1, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	dc05      	bgt.n	8006748 <__sflush_r+0x20>
 800673c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	dc02      	bgt.n	8006748 <__sflush_r+0x20>
 8006742:	2000      	movs	r0, #0
 8006744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800674a:	2e00      	cmp	r6, #0
 800674c:	d0f9      	beq.n	8006742 <__sflush_r+0x1a>
 800674e:	2300      	movs	r3, #0
 8006750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006754:	682f      	ldr	r7, [r5, #0]
 8006756:	6a21      	ldr	r1, [r4, #32]
 8006758:	602b      	str	r3, [r5, #0]
 800675a:	d032      	beq.n	80067c2 <__sflush_r+0x9a>
 800675c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	075a      	lsls	r2, r3, #29
 8006762:	d505      	bpl.n	8006770 <__sflush_r+0x48>
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	1ac0      	subs	r0, r0, r3
 8006768:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800676a:	b10b      	cbz	r3, 8006770 <__sflush_r+0x48>
 800676c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800676e:	1ac0      	subs	r0, r0, r3
 8006770:	2300      	movs	r3, #0
 8006772:	4602      	mov	r2, r0
 8006774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006776:	6a21      	ldr	r1, [r4, #32]
 8006778:	4628      	mov	r0, r5
 800677a:	47b0      	blx	r6
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	d106      	bne.n	8006790 <__sflush_r+0x68>
 8006782:	6829      	ldr	r1, [r5, #0]
 8006784:	291d      	cmp	r1, #29
 8006786:	d848      	bhi.n	800681a <__sflush_r+0xf2>
 8006788:	4a29      	ldr	r2, [pc, #164]	; (8006830 <__sflush_r+0x108>)
 800678a:	40ca      	lsrs	r2, r1
 800678c:	07d6      	lsls	r6, r2, #31
 800678e:	d544      	bpl.n	800681a <__sflush_r+0xf2>
 8006790:	2200      	movs	r2, #0
 8006792:	6062      	str	r2, [r4, #4]
 8006794:	6922      	ldr	r2, [r4, #16]
 8006796:	04d9      	lsls	r1, r3, #19
 8006798:	6022      	str	r2, [r4, #0]
 800679a:	d504      	bpl.n	80067a6 <__sflush_r+0x7e>
 800679c:	1c42      	adds	r2, r0, #1
 800679e:	d101      	bne.n	80067a4 <__sflush_r+0x7c>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b903      	cbnz	r3, 80067a6 <__sflush_r+0x7e>
 80067a4:	6560      	str	r0, [r4, #84]	; 0x54
 80067a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067a8:	602f      	str	r7, [r5, #0]
 80067aa:	2900      	cmp	r1, #0
 80067ac:	d0c9      	beq.n	8006742 <__sflush_r+0x1a>
 80067ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067b2:	4299      	cmp	r1, r3
 80067b4:	d002      	beq.n	80067bc <__sflush_r+0x94>
 80067b6:	4628      	mov	r0, r5
 80067b8:	f000 fc60 	bl	800707c <_free_r>
 80067bc:	2000      	movs	r0, #0
 80067be:	6360      	str	r0, [r4, #52]	; 0x34
 80067c0:	e7c0      	b.n	8006744 <__sflush_r+0x1c>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b0      	blx	r6
 80067c8:	1c41      	adds	r1, r0, #1
 80067ca:	d1c8      	bne.n	800675e <__sflush_r+0x36>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0c5      	beq.n	800675e <__sflush_r+0x36>
 80067d2:	2b1d      	cmp	r3, #29
 80067d4:	d001      	beq.n	80067da <__sflush_r+0xb2>
 80067d6:	2b16      	cmp	r3, #22
 80067d8:	d101      	bne.n	80067de <__sflush_r+0xb6>
 80067da:	602f      	str	r7, [r5, #0]
 80067dc:	e7b1      	b.n	8006742 <__sflush_r+0x1a>
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	e7ad      	b.n	8006744 <__sflush_r+0x1c>
 80067e8:	690f      	ldr	r7, [r1, #16]
 80067ea:	2f00      	cmp	r7, #0
 80067ec:	d0a9      	beq.n	8006742 <__sflush_r+0x1a>
 80067ee:	0793      	lsls	r3, r2, #30
 80067f0:	bf18      	it	ne
 80067f2:	2300      	movne	r3, #0
 80067f4:	680e      	ldr	r6, [r1, #0]
 80067f6:	bf08      	it	eq
 80067f8:	694b      	ldreq	r3, [r1, #20]
 80067fa:	eba6 0807 	sub.w	r8, r6, r7
 80067fe:	600f      	str	r7, [r1, #0]
 8006800:	608b      	str	r3, [r1, #8]
 8006802:	f1b8 0f00 	cmp.w	r8, #0
 8006806:	dd9c      	ble.n	8006742 <__sflush_r+0x1a>
 8006808:	4643      	mov	r3, r8
 800680a:	463a      	mov	r2, r7
 800680c:	6a21      	ldr	r1, [r4, #32]
 800680e:	4628      	mov	r0, r5
 8006810:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006812:	47b0      	blx	r6
 8006814:	2800      	cmp	r0, #0
 8006816:	dc06      	bgt.n	8006826 <__sflush_r+0xfe>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800681e:	81a3      	strh	r3, [r4, #12]
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
 8006824:	e78e      	b.n	8006744 <__sflush_r+0x1c>
 8006826:	4407      	add	r7, r0
 8006828:	eba8 0800 	sub.w	r8, r8, r0
 800682c:	e7e9      	b.n	8006802 <__sflush_r+0xda>
 800682e:	bf00      	nop
 8006830:	20400001 	.word	0x20400001

08006834 <_fflush_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	690b      	ldr	r3, [r1, #16]
 8006838:	4605      	mov	r5, r0
 800683a:	460c      	mov	r4, r1
 800683c:	b1db      	cbz	r3, 8006876 <_fflush_r+0x42>
 800683e:	b118      	cbz	r0, 8006848 <_fflush_r+0x14>
 8006840:	6983      	ldr	r3, [r0, #24]
 8006842:	b90b      	cbnz	r3, 8006848 <_fflush_r+0x14>
 8006844:	f000 f860 	bl	8006908 <__sinit>
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <_fflush_r+0x48>)
 800684a:	429c      	cmp	r4, r3
 800684c:	d109      	bne.n	8006862 <_fflush_r+0x2e>
 800684e:	686c      	ldr	r4, [r5, #4]
 8006850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006854:	b17b      	cbz	r3, 8006876 <_fflush_r+0x42>
 8006856:	4621      	mov	r1, r4
 8006858:	4628      	mov	r0, r5
 800685a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800685e:	f7ff bf63 	b.w	8006728 <__sflush_r>
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <_fflush_r+0x4c>)
 8006864:	429c      	cmp	r4, r3
 8006866:	d101      	bne.n	800686c <_fflush_r+0x38>
 8006868:	68ac      	ldr	r4, [r5, #8]
 800686a:	e7f1      	b.n	8006850 <_fflush_r+0x1c>
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <_fflush_r+0x50>)
 800686e:	429c      	cmp	r4, r3
 8006870:	bf08      	it	eq
 8006872:	68ec      	ldreq	r4, [r5, #12]
 8006874:	e7ec      	b.n	8006850 <_fflush_r+0x1c>
 8006876:	2000      	movs	r0, #0
 8006878:	bd38      	pop	{r3, r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	08007404 	.word	0x08007404
 8006880:	08007424 	.word	0x08007424
 8006884:	080073e4 	.word	0x080073e4

08006888 <std>:
 8006888:	2300      	movs	r3, #0
 800688a:	b510      	push	{r4, lr}
 800688c:	4604      	mov	r4, r0
 800688e:	e9c0 3300 	strd	r3, r3, [r0]
 8006892:	6083      	str	r3, [r0, #8]
 8006894:	8181      	strh	r1, [r0, #12]
 8006896:	6643      	str	r3, [r0, #100]	; 0x64
 8006898:	81c2      	strh	r2, [r0, #14]
 800689a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800689e:	6183      	str	r3, [r0, #24]
 80068a0:	4619      	mov	r1, r3
 80068a2:	2208      	movs	r2, #8
 80068a4:	305c      	adds	r0, #92	; 0x5c
 80068a6:	f7fe fd07 	bl	80052b8 <memset>
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <std+0x38>)
 80068ac:	6224      	str	r4, [r4, #32]
 80068ae:	6263      	str	r3, [r4, #36]	; 0x24
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <std+0x3c>)
 80068b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <std+0x40>)
 80068b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068b8:	4b04      	ldr	r3, [pc, #16]	; (80068cc <std+0x44>)
 80068ba:	6323      	str	r3, [r4, #48]	; 0x30
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	bf00      	nop
 80068c0:	080071e9 	.word	0x080071e9
 80068c4:	0800720b 	.word	0x0800720b
 80068c8:	08007243 	.word	0x08007243
 80068cc:	08007267 	.word	0x08007267

080068d0 <_cleanup_r>:
 80068d0:	4901      	ldr	r1, [pc, #4]	; (80068d8 <_cleanup_r+0x8>)
 80068d2:	f000 b885 	b.w	80069e0 <_fwalk_reent>
 80068d6:	bf00      	nop
 80068d8:	08006835 	.word	0x08006835

080068dc <__sfmoreglue>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	2568      	movs	r5, #104	; 0x68
 80068e0:	1e4a      	subs	r2, r1, #1
 80068e2:	4355      	muls	r5, r2
 80068e4:	460e      	mov	r6, r1
 80068e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068ea:	f000 fc13 	bl	8007114 <_malloc_r>
 80068ee:	4604      	mov	r4, r0
 80068f0:	b140      	cbz	r0, 8006904 <__sfmoreglue+0x28>
 80068f2:	2100      	movs	r1, #0
 80068f4:	e9c0 1600 	strd	r1, r6, [r0]
 80068f8:	300c      	adds	r0, #12
 80068fa:	60a0      	str	r0, [r4, #8]
 80068fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006900:	f7fe fcda 	bl	80052b8 <memset>
 8006904:	4620      	mov	r0, r4
 8006906:	bd70      	pop	{r4, r5, r6, pc}

08006908 <__sinit>:
 8006908:	6983      	ldr	r3, [r0, #24]
 800690a:	b510      	push	{r4, lr}
 800690c:	4604      	mov	r4, r0
 800690e:	bb33      	cbnz	r3, 800695e <__sinit+0x56>
 8006910:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006914:	6503      	str	r3, [r0, #80]	; 0x50
 8006916:	4b12      	ldr	r3, [pc, #72]	; (8006960 <__sinit+0x58>)
 8006918:	4a12      	ldr	r2, [pc, #72]	; (8006964 <__sinit+0x5c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6282      	str	r2, [r0, #40]	; 0x28
 800691e:	4298      	cmp	r0, r3
 8006920:	bf04      	itt	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	6183      	streq	r3, [r0, #24]
 8006926:	f000 f81f 	bl	8006968 <__sfp>
 800692a:	6060      	str	r0, [r4, #4]
 800692c:	4620      	mov	r0, r4
 800692e:	f000 f81b 	bl	8006968 <__sfp>
 8006932:	60a0      	str	r0, [r4, #8]
 8006934:	4620      	mov	r0, r4
 8006936:	f000 f817 	bl	8006968 <__sfp>
 800693a:	2200      	movs	r2, #0
 800693c:	60e0      	str	r0, [r4, #12]
 800693e:	2104      	movs	r1, #4
 8006940:	6860      	ldr	r0, [r4, #4]
 8006942:	f7ff ffa1 	bl	8006888 <std>
 8006946:	2201      	movs	r2, #1
 8006948:	2109      	movs	r1, #9
 800694a:	68a0      	ldr	r0, [r4, #8]
 800694c:	f7ff ff9c 	bl	8006888 <std>
 8006950:	2202      	movs	r2, #2
 8006952:	2112      	movs	r1, #18
 8006954:	68e0      	ldr	r0, [r4, #12]
 8006956:	f7ff ff97 	bl	8006888 <std>
 800695a:	2301      	movs	r3, #1
 800695c:	61a3      	str	r3, [r4, #24]
 800695e:	bd10      	pop	{r4, pc}
 8006960:	080073c0 	.word	0x080073c0
 8006964:	080068d1 	.word	0x080068d1

08006968 <__sfp>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <__sfp+0x70>)
 800696c:	4607      	mov	r7, r0
 800696e:	681e      	ldr	r6, [r3, #0]
 8006970:	69b3      	ldr	r3, [r6, #24]
 8006972:	b913      	cbnz	r3, 800697a <__sfp+0x12>
 8006974:	4630      	mov	r0, r6
 8006976:	f7ff ffc7 	bl	8006908 <__sinit>
 800697a:	3648      	adds	r6, #72	; 0x48
 800697c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006980:	3b01      	subs	r3, #1
 8006982:	d503      	bpl.n	800698c <__sfp+0x24>
 8006984:	6833      	ldr	r3, [r6, #0]
 8006986:	b133      	cbz	r3, 8006996 <__sfp+0x2e>
 8006988:	6836      	ldr	r6, [r6, #0]
 800698a:	e7f7      	b.n	800697c <__sfp+0x14>
 800698c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006990:	b16d      	cbz	r5, 80069ae <__sfp+0x46>
 8006992:	3468      	adds	r4, #104	; 0x68
 8006994:	e7f4      	b.n	8006980 <__sfp+0x18>
 8006996:	2104      	movs	r1, #4
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff ff9f 	bl	80068dc <__sfmoreglue>
 800699e:	6030      	str	r0, [r6, #0]
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d1f1      	bne.n	8006988 <__sfp+0x20>
 80069a4:	230c      	movs	r3, #12
 80069a6:	4604      	mov	r4, r0
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	4620      	mov	r0, r4
 80069ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <__sfp+0x74>)
 80069b0:	6665      	str	r5, [r4, #100]	; 0x64
 80069b2:	e9c4 5500 	strd	r5, r5, [r4]
 80069b6:	60a5      	str	r5, [r4, #8]
 80069b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80069bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80069c0:	2208      	movs	r2, #8
 80069c2:	4629      	mov	r1, r5
 80069c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069c8:	f7fe fc76 	bl	80052b8 <memset>
 80069cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069d4:	e7e9      	b.n	80069aa <__sfp+0x42>
 80069d6:	bf00      	nop
 80069d8:	080073c0 	.word	0x080073c0
 80069dc:	ffff0001 	.word	0xffff0001

080069e0 <_fwalk_reent>:
 80069e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e4:	4680      	mov	r8, r0
 80069e6:	4689      	mov	r9, r1
 80069e8:	2600      	movs	r6, #0
 80069ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069ee:	b914      	cbnz	r4, 80069f6 <_fwalk_reent+0x16>
 80069f0:	4630      	mov	r0, r6
 80069f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80069fa:	3f01      	subs	r7, #1
 80069fc:	d501      	bpl.n	8006a02 <_fwalk_reent+0x22>
 80069fe:	6824      	ldr	r4, [r4, #0]
 8006a00:	e7f5      	b.n	80069ee <_fwalk_reent+0xe>
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d907      	bls.n	8006a18 <_fwalk_reent+0x38>
 8006a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	d003      	beq.n	8006a18 <_fwalk_reent+0x38>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4640      	mov	r0, r8
 8006a14:	47c8      	blx	r9
 8006a16:	4306      	orrs	r6, r0
 8006a18:	3568      	adds	r5, #104	; 0x68
 8006a1a:	e7ee      	b.n	80069fa <_fwalk_reent+0x1a>

08006a1c <_localeconv_r>:
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <_localeconv_r+0x14>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6a18      	ldr	r0, [r3, #32]
 8006a22:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <_localeconv_r+0x18>)
 8006a24:	2800      	cmp	r0, #0
 8006a26:	bf08      	it	eq
 8006a28:	4618      	moveq	r0, r3
 8006a2a:	30f0      	adds	r0, #240	; 0xf0
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	20000018 	.word	0x20000018
 8006a34:	2000007c 	.word	0x2000007c

08006a38 <__swhatbuf_r>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	460e      	mov	r6, r1
 8006a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a40:	b096      	sub	sp, #88	; 0x58
 8006a42:	2900      	cmp	r1, #0
 8006a44:	4614      	mov	r4, r2
 8006a46:	461d      	mov	r5, r3
 8006a48:	da07      	bge.n	8006a5a <__swhatbuf_r+0x22>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	89b3      	ldrh	r3, [r6, #12]
 8006a50:	061a      	lsls	r2, r3, #24
 8006a52:	d410      	bmi.n	8006a76 <__swhatbuf_r+0x3e>
 8006a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a58:	e00e      	b.n	8006a78 <__swhatbuf_r+0x40>
 8006a5a:	466a      	mov	r2, sp
 8006a5c:	f000 fc2a 	bl	80072b4 <_fstat_r>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	dbf2      	blt.n	8006a4a <__swhatbuf_r+0x12>
 8006a64:	9a01      	ldr	r2, [sp, #4]
 8006a66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a6e:	425a      	negs	r2, r3
 8006a70:	415a      	adcs	r2, r3
 8006a72:	602a      	str	r2, [r5, #0]
 8006a74:	e7ee      	b.n	8006a54 <__swhatbuf_r+0x1c>
 8006a76:	2340      	movs	r3, #64	; 0x40
 8006a78:	2000      	movs	r0, #0
 8006a7a:	6023      	str	r3, [r4, #0]
 8006a7c:	b016      	add	sp, #88	; 0x58
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}

08006a80 <malloc>:
 8006a80:	4b02      	ldr	r3, [pc, #8]	; (8006a8c <malloc+0xc>)
 8006a82:	4601      	mov	r1, r0
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	f000 bb45 	b.w	8007114 <_malloc_r>
 8006a8a:	bf00      	nop
 8006a8c:	20000018 	.word	0x20000018

08006a90 <memcpy>:
 8006a90:	b510      	push	{r4, lr}
 8006a92:	1e43      	subs	r3, r0, #1
 8006a94:	440a      	add	r2, r1
 8006a96:	4291      	cmp	r1, r2
 8006a98:	d100      	bne.n	8006a9c <memcpy+0xc>
 8006a9a:	bd10      	pop	{r4, pc}
 8006a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa4:	e7f7      	b.n	8006a96 <memcpy+0x6>

08006aa6 <_Balloc>:
 8006aa6:	b570      	push	{r4, r5, r6, lr}
 8006aa8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006aaa:	4604      	mov	r4, r0
 8006aac:	460e      	mov	r6, r1
 8006aae:	b93d      	cbnz	r5, 8006ac0 <_Balloc+0x1a>
 8006ab0:	2010      	movs	r0, #16
 8006ab2:	f7ff ffe5 	bl	8006a80 <malloc>
 8006ab6:	6260      	str	r0, [r4, #36]	; 0x24
 8006ab8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006abc:	6005      	str	r5, [r0, #0]
 8006abe:	60c5      	str	r5, [r0, #12]
 8006ac0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006ac2:	68eb      	ldr	r3, [r5, #12]
 8006ac4:	b183      	cbz	r3, 8006ae8 <_Balloc+0x42>
 8006ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006ace:	b9b8      	cbnz	r0, 8006b00 <_Balloc+0x5a>
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	fa01 f506 	lsl.w	r5, r1, r6
 8006ad6:	1d6a      	adds	r2, r5, #5
 8006ad8:	0092      	lsls	r2, r2, #2
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 fabf 	bl	800705e <_calloc_r>
 8006ae0:	b160      	cbz	r0, 8006afc <_Balloc+0x56>
 8006ae2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006ae6:	e00e      	b.n	8006b06 <_Balloc+0x60>
 8006ae8:	2221      	movs	r2, #33	; 0x21
 8006aea:	2104      	movs	r1, #4
 8006aec:	4620      	mov	r0, r4
 8006aee:	f000 fab6 	bl	800705e <_calloc_r>
 8006af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af4:	60e8      	str	r0, [r5, #12]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e4      	bne.n	8006ac6 <_Balloc+0x20>
 8006afc:	2000      	movs	r0, #0
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	6802      	ldr	r2, [r0, #0]
 8006b02:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006b06:	2300      	movs	r3, #0
 8006b08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b0c:	e7f7      	b.n	8006afe <_Balloc+0x58>

08006b0e <_Bfree>:
 8006b0e:	b570      	push	{r4, r5, r6, lr}
 8006b10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006b12:	4606      	mov	r6, r0
 8006b14:	460d      	mov	r5, r1
 8006b16:	b93c      	cbnz	r4, 8006b28 <_Bfree+0x1a>
 8006b18:	2010      	movs	r0, #16
 8006b1a:	f7ff ffb1 	bl	8006a80 <malloc>
 8006b1e:	6270      	str	r0, [r6, #36]	; 0x24
 8006b20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b24:	6004      	str	r4, [r0, #0]
 8006b26:	60c4      	str	r4, [r0, #12]
 8006b28:	b13d      	cbz	r5, 8006b3a <_Bfree+0x2c>
 8006b2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b2c:	686a      	ldr	r2, [r5, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b34:	6029      	str	r1, [r5, #0]
 8006b36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}

08006b3c <__multadd>:
 8006b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b40:	461f      	mov	r7, r3
 8006b42:	4606      	mov	r6, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	2300      	movs	r3, #0
 8006b48:	690d      	ldr	r5, [r1, #16]
 8006b4a:	f101 0c14 	add.w	ip, r1, #20
 8006b4e:	f8dc 0000 	ldr.w	r0, [ip]
 8006b52:	3301      	adds	r3, #1
 8006b54:	b281      	uxth	r1, r0
 8006b56:	fb02 7101 	mla	r1, r2, r1, r7
 8006b5a:	0c00      	lsrs	r0, r0, #16
 8006b5c:	0c0f      	lsrs	r7, r1, #16
 8006b5e:	fb02 7000 	mla	r0, r2, r0, r7
 8006b62:	b289      	uxth	r1, r1
 8006b64:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006b68:	429d      	cmp	r5, r3
 8006b6a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006b6e:	f84c 1b04 	str.w	r1, [ip], #4
 8006b72:	dcec      	bgt.n	8006b4e <__multadd+0x12>
 8006b74:	b1d7      	cbz	r7, 8006bac <__multadd+0x70>
 8006b76:	68a3      	ldr	r3, [r4, #8]
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	dc12      	bgt.n	8006ba2 <__multadd+0x66>
 8006b7c:	6861      	ldr	r1, [r4, #4]
 8006b7e:	4630      	mov	r0, r6
 8006b80:	3101      	adds	r1, #1
 8006b82:	f7ff ff90 	bl	8006aa6 <_Balloc>
 8006b86:	4680      	mov	r8, r0
 8006b88:	6922      	ldr	r2, [r4, #16]
 8006b8a:	f104 010c 	add.w	r1, r4, #12
 8006b8e:	3202      	adds	r2, #2
 8006b90:	0092      	lsls	r2, r2, #2
 8006b92:	300c      	adds	r0, #12
 8006b94:	f7ff ff7c 	bl	8006a90 <memcpy>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f7ff ffb7 	bl	8006b0e <_Bfree>
 8006ba0:	4644      	mov	r4, r8
 8006ba2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ba6:	3501      	adds	r5, #1
 8006ba8:	615f      	str	r7, [r3, #20]
 8006baa:	6125      	str	r5, [r4, #16]
 8006bac:	4620      	mov	r0, r4
 8006bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006bb2 <__hi0bits>:
 8006bb2:	0c02      	lsrs	r2, r0, #16
 8006bb4:	0412      	lsls	r2, r2, #16
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	b9b2      	cbnz	r2, 8006be8 <__hi0bits+0x36>
 8006bba:	0403      	lsls	r3, r0, #16
 8006bbc:	2010      	movs	r0, #16
 8006bbe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006bc2:	bf04      	itt	eq
 8006bc4:	021b      	lsleq	r3, r3, #8
 8006bc6:	3008      	addeq	r0, #8
 8006bc8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006bcc:	bf04      	itt	eq
 8006bce:	011b      	lsleq	r3, r3, #4
 8006bd0:	3004      	addeq	r0, #4
 8006bd2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006bd6:	bf04      	itt	eq
 8006bd8:	009b      	lsleq	r3, r3, #2
 8006bda:	3002      	addeq	r0, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	db06      	blt.n	8006bee <__hi0bits+0x3c>
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	d503      	bpl.n	8006bec <__hi0bits+0x3a>
 8006be4:	3001      	adds	r0, #1
 8006be6:	4770      	bx	lr
 8006be8:	2000      	movs	r0, #0
 8006bea:	e7e8      	b.n	8006bbe <__hi0bits+0xc>
 8006bec:	2020      	movs	r0, #32
 8006bee:	4770      	bx	lr

08006bf0 <__lo0bits>:
 8006bf0:	6803      	ldr	r3, [r0, #0]
 8006bf2:	4601      	mov	r1, r0
 8006bf4:	f013 0207 	ands.w	r2, r3, #7
 8006bf8:	d00b      	beq.n	8006c12 <__lo0bits+0x22>
 8006bfa:	07da      	lsls	r2, r3, #31
 8006bfc:	d423      	bmi.n	8006c46 <__lo0bits+0x56>
 8006bfe:	0798      	lsls	r0, r3, #30
 8006c00:	bf49      	itett	mi
 8006c02:	085b      	lsrmi	r3, r3, #1
 8006c04:	089b      	lsrpl	r3, r3, #2
 8006c06:	2001      	movmi	r0, #1
 8006c08:	600b      	strmi	r3, [r1, #0]
 8006c0a:	bf5c      	itt	pl
 8006c0c:	600b      	strpl	r3, [r1, #0]
 8006c0e:	2002      	movpl	r0, #2
 8006c10:	4770      	bx	lr
 8006c12:	b298      	uxth	r0, r3
 8006c14:	b9a8      	cbnz	r0, 8006c42 <__lo0bits+0x52>
 8006c16:	2010      	movs	r0, #16
 8006c18:	0c1b      	lsrs	r3, r3, #16
 8006c1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c1e:	bf04      	itt	eq
 8006c20:	0a1b      	lsreq	r3, r3, #8
 8006c22:	3008      	addeq	r0, #8
 8006c24:	071a      	lsls	r2, r3, #28
 8006c26:	bf04      	itt	eq
 8006c28:	091b      	lsreq	r3, r3, #4
 8006c2a:	3004      	addeq	r0, #4
 8006c2c:	079a      	lsls	r2, r3, #30
 8006c2e:	bf04      	itt	eq
 8006c30:	089b      	lsreq	r3, r3, #2
 8006c32:	3002      	addeq	r0, #2
 8006c34:	07da      	lsls	r2, r3, #31
 8006c36:	d402      	bmi.n	8006c3e <__lo0bits+0x4e>
 8006c38:	085b      	lsrs	r3, r3, #1
 8006c3a:	d006      	beq.n	8006c4a <__lo0bits+0x5a>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	600b      	str	r3, [r1, #0]
 8006c40:	4770      	bx	lr
 8006c42:	4610      	mov	r0, r2
 8006c44:	e7e9      	b.n	8006c1a <__lo0bits+0x2a>
 8006c46:	2000      	movs	r0, #0
 8006c48:	4770      	bx	lr
 8006c4a:	2020      	movs	r0, #32
 8006c4c:	4770      	bx	lr

08006c4e <__i2b>:
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	460c      	mov	r4, r1
 8006c52:	2101      	movs	r1, #1
 8006c54:	f7ff ff27 	bl	8006aa6 <_Balloc>
 8006c58:	2201      	movs	r2, #1
 8006c5a:	6144      	str	r4, [r0, #20]
 8006c5c:	6102      	str	r2, [r0, #16]
 8006c5e:	bd10      	pop	{r4, pc}

08006c60 <__multiply>:
 8006c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	4614      	mov	r4, r2
 8006c66:	690a      	ldr	r2, [r1, #16]
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	bfbe      	ittt	lt
 8006c70:	460b      	movlt	r3, r1
 8006c72:	46a0      	movlt	r8, r4
 8006c74:	461c      	movlt	r4, r3
 8006c76:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c7a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006c7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c82:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c86:	eb07 0609 	add.w	r6, r7, r9
 8006c8a:	42b3      	cmp	r3, r6
 8006c8c:	bfb8      	it	lt
 8006c8e:	3101      	addlt	r1, #1
 8006c90:	f7ff ff09 	bl	8006aa6 <_Balloc>
 8006c94:	f100 0514 	add.w	r5, r0, #20
 8006c98:	462b      	mov	r3, r5
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006ca0:	4573      	cmp	r3, lr
 8006ca2:	d316      	bcc.n	8006cd2 <__multiply+0x72>
 8006ca4:	f104 0214 	add.w	r2, r4, #20
 8006ca8:	f108 0114 	add.w	r1, r8, #20
 8006cac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006cb0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d80c      	bhi.n	8006cd8 <__multiply+0x78>
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	dd03      	ble.n	8006cca <__multiply+0x6a>
 8006cc2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d05d      	beq.n	8006d86 <__multiply+0x126>
 8006cca:	6106      	str	r6, [r0, #16]
 8006ccc:	b003      	add	sp, #12
 8006cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd2:	f843 2b04 	str.w	r2, [r3], #4
 8006cd6:	e7e3      	b.n	8006ca0 <__multiply+0x40>
 8006cd8:	f8b2 b000 	ldrh.w	fp, [r2]
 8006cdc:	f1bb 0f00 	cmp.w	fp, #0
 8006ce0:	d023      	beq.n	8006d2a <__multiply+0xca>
 8006ce2:	4689      	mov	r9, r1
 8006ce4:	46ac      	mov	ip, r5
 8006ce6:	f04f 0800 	mov.w	r8, #0
 8006cea:	f859 4b04 	ldr.w	r4, [r9], #4
 8006cee:	f8dc a000 	ldr.w	sl, [ip]
 8006cf2:	b2a3      	uxth	r3, r4
 8006cf4:	fa1f fa8a 	uxth.w	sl, sl
 8006cf8:	fb0b a303 	mla	r3, fp, r3, sl
 8006cfc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006d00:	f8dc 4000 	ldr.w	r4, [ip]
 8006d04:	4443      	add	r3, r8
 8006d06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d0a:	fb0b 840a 	mla	r4, fp, sl, r8
 8006d0e:	46e2      	mov	sl, ip
 8006d10:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d1a:	454f      	cmp	r7, r9
 8006d1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d20:	f84a 3b04 	str.w	r3, [sl], #4
 8006d24:	d82b      	bhi.n	8006d7e <__multiply+0x11e>
 8006d26:	f8cc 8004 	str.w	r8, [ip, #4]
 8006d2a:	9b01      	ldr	r3, [sp, #4]
 8006d2c:	3204      	adds	r2, #4
 8006d2e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006d32:	f1ba 0f00 	cmp.w	sl, #0
 8006d36:	d020      	beq.n	8006d7a <__multiply+0x11a>
 8006d38:	4689      	mov	r9, r1
 8006d3a:	46a8      	mov	r8, r5
 8006d3c:	f04f 0b00 	mov.w	fp, #0
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	f8b9 c000 	ldrh.w	ip, [r9]
 8006d46:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006d50:	46c4      	mov	ip, r8
 8006d52:	445c      	add	r4, fp
 8006d54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d58:	f84c 3b04 	str.w	r3, [ip], #4
 8006d5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d60:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006d64:	0c1b      	lsrs	r3, r3, #16
 8006d66:	fb0a b303 	mla	r3, sl, r3, fp
 8006d6a:	454f      	cmp	r7, r9
 8006d6c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006d70:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006d74:	d805      	bhi.n	8006d82 <__multiply+0x122>
 8006d76:	f8c8 3004 	str.w	r3, [r8, #4]
 8006d7a:	3504      	adds	r5, #4
 8006d7c:	e79b      	b.n	8006cb6 <__multiply+0x56>
 8006d7e:	46d4      	mov	ip, sl
 8006d80:	e7b3      	b.n	8006cea <__multiply+0x8a>
 8006d82:	46e0      	mov	r8, ip
 8006d84:	e7dd      	b.n	8006d42 <__multiply+0xe2>
 8006d86:	3e01      	subs	r6, #1
 8006d88:	e799      	b.n	8006cbe <__multiply+0x5e>
	...

08006d8c <__pow5mult>:
 8006d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d90:	4615      	mov	r5, r2
 8006d92:	f012 0203 	ands.w	r2, r2, #3
 8006d96:	4606      	mov	r6, r0
 8006d98:	460f      	mov	r7, r1
 8006d9a:	d007      	beq.n	8006dac <__pow5mult+0x20>
 8006d9c:	4c21      	ldr	r4, [pc, #132]	; (8006e24 <__pow5mult+0x98>)
 8006d9e:	3a01      	subs	r2, #1
 8006da0:	2300      	movs	r3, #0
 8006da2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006da6:	f7ff fec9 	bl	8006b3c <__multadd>
 8006daa:	4607      	mov	r7, r0
 8006dac:	10ad      	asrs	r5, r5, #2
 8006dae:	d035      	beq.n	8006e1c <__pow5mult+0x90>
 8006db0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006db2:	b93c      	cbnz	r4, 8006dc4 <__pow5mult+0x38>
 8006db4:	2010      	movs	r0, #16
 8006db6:	f7ff fe63 	bl	8006a80 <malloc>
 8006dba:	6270      	str	r0, [r6, #36]	; 0x24
 8006dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dc0:	6004      	str	r4, [r0, #0]
 8006dc2:	60c4      	str	r4, [r0, #12]
 8006dc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dcc:	b94c      	cbnz	r4, 8006de2 <__pow5mult+0x56>
 8006dce:	f240 2171 	movw	r1, #625	; 0x271
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ff3b 	bl	8006c4e <__i2b>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4604      	mov	r4, r0
 8006ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	07eb      	lsls	r3, r5, #31
 8006de8:	d50a      	bpl.n	8006e00 <__pow5mult+0x74>
 8006dea:	4639      	mov	r1, r7
 8006dec:	4622      	mov	r2, r4
 8006dee:	4630      	mov	r0, r6
 8006df0:	f7ff ff36 	bl	8006c60 <__multiply>
 8006df4:	4681      	mov	r9, r0
 8006df6:	4639      	mov	r1, r7
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f7ff fe88 	bl	8006b0e <_Bfree>
 8006dfe:	464f      	mov	r7, r9
 8006e00:	106d      	asrs	r5, r5, #1
 8006e02:	d00b      	beq.n	8006e1c <__pow5mult+0x90>
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	b938      	cbnz	r0, 8006e18 <__pow5mult+0x8c>
 8006e08:	4622      	mov	r2, r4
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7ff ff27 	bl	8006c60 <__multiply>
 8006e12:	6020      	str	r0, [r4, #0]
 8006e14:	f8c0 8000 	str.w	r8, [r0]
 8006e18:	4604      	mov	r4, r0
 8006e1a:	e7e4      	b.n	8006de6 <__pow5mult+0x5a>
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e22:	bf00      	nop
 8006e24:	08007538 	.word	0x08007538

08006e28 <__lshift>:
 8006e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	4607      	mov	r7, r0
 8006e30:	4616      	mov	r6, r2
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e38:	eb0a 0903 	add.w	r9, sl, r3
 8006e3c:	6849      	ldr	r1, [r1, #4]
 8006e3e:	68a3      	ldr	r3, [r4, #8]
 8006e40:	f109 0501 	add.w	r5, r9, #1
 8006e44:	42ab      	cmp	r3, r5
 8006e46:	db32      	blt.n	8006eae <__lshift+0x86>
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f7ff fe2c 	bl	8006aa6 <_Balloc>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4680      	mov	r8, r0
 8006e52:	461a      	mov	r2, r3
 8006e54:	f100 0114 	add.w	r1, r0, #20
 8006e58:	4553      	cmp	r3, sl
 8006e5a:	db2b      	blt.n	8006eb4 <__lshift+0x8c>
 8006e5c:	6920      	ldr	r0, [r4, #16]
 8006e5e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e62:	f104 0314 	add.w	r3, r4, #20
 8006e66:	f016 021f 	ands.w	r2, r6, #31
 8006e6a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e72:	d025      	beq.n	8006ec0 <__lshift+0x98>
 8006e74:	2000      	movs	r0, #0
 8006e76:	f1c2 0e20 	rsb	lr, r2, #32
 8006e7a:	468a      	mov	sl, r1
 8006e7c:	681e      	ldr	r6, [r3, #0]
 8006e7e:	4096      	lsls	r6, r2
 8006e80:	4330      	orrs	r0, r6
 8006e82:	f84a 0b04 	str.w	r0, [sl], #4
 8006e86:	f853 0b04 	ldr.w	r0, [r3], #4
 8006e8a:	459c      	cmp	ip, r3
 8006e8c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006e90:	d814      	bhi.n	8006ebc <__lshift+0x94>
 8006e92:	6048      	str	r0, [r1, #4]
 8006e94:	b108      	cbz	r0, 8006e9a <__lshift+0x72>
 8006e96:	f109 0502 	add.w	r5, r9, #2
 8006e9a:	3d01      	subs	r5, #1
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	f7ff fe33 	bl	8006b0e <_Bfree>
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eae:	3101      	adds	r1, #1
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	e7c7      	b.n	8006e44 <__lshift+0x1c>
 8006eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	e7cd      	b.n	8006e58 <__lshift+0x30>
 8006ebc:	4651      	mov	r1, sl
 8006ebe:	e7dc      	b.n	8006e7a <__lshift+0x52>
 8006ec0:	3904      	subs	r1, #4
 8006ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec6:	459c      	cmp	ip, r3
 8006ec8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ecc:	d8f9      	bhi.n	8006ec2 <__lshift+0x9a>
 8006ece:	e7e4      	b.n	8006e9a <__lshift+0x72>

08006ed0 <__mcmp>:
 8006ed0:	6903      	ldr	r3, [r0, #16]
 8006ed2:	690a      	ldr	r2, [r1, #16]
 8006ed4:	b530      	push	{r4, r5, lr}
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	d10c      	bne.n	8006ef4 <__mcmp+0x24>
 8006eda:	0092      	lsls	r2, r2, #2
 8006edc:	3014      	adds	r0, #20
 8006ede:	3114      	adds	r1, #20
 8006ee0:	1884      	adds	r4, r0, r2
 8006ee2:	4411      	add	r1, r2
 8006ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006eec:	4295      	cmp	r5, r2
 8006eee:	d003      	beq.n	8006ef8 <__mcmp+0x28>
 8006ef0:	d305      	bcc.n	8006efe <__mcmp+0x2e>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	bd30      	pop	{r4, r5, pc}
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d3f3      	bcc.n	8006ee4 <__mcmp+0x14>
 8006efc:	e7fa      	b.n	8006ef4 <__mcmp+0x24>
 8006efe:	f04f 33ff 	mov.w	r3, #4294967295
 8006f02:	e7f7      	b.n	8006ef4 <__mcmp+0x24>

08006f04 <__mdiff>:
 8006f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	460d      	mov	r5, r1
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	4628      	mov	r0, r5
 8006f10:	4614      	mov	r4, r2
 8006f12:	f7ff ffdd 	bl	8006ed0 <__mcmp>
 8006f16:	1e06      	subs	r6, r0, #0
 8006f18:	d108      	bne.n	8006f2c <__mdiff+0x28>
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff fdc2 	bl	8006aa6 <_Balloc>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2c:	bfa4      	itt	ge
 8006f2e:	4623      	movge	r3, r4
 8006f30:	462c      	movge	r4, r5
 8006f32:	4638      	mov	r0, r7
 8006f34:	6861      	ldr	r1, [r4, #4]
 8006f36:	bfa6      	itte	ge
 8006f38:	461d      	movge	r5, r3
 8006f3a:	2600      	movge	r6, #0
 8006f3c:	2601      	movlt	r6, #1
 8006f3e:	f7ff fdb2 	bl	8006aa6 <_Balloc>
 8006f42:	f04f 0e00 	mov.w	lr, #0
 8006f46:	60c6      	str	r6, [r0, #12]
 8006f48:	692b      	ldr	r3, [r5, #16]
 8006f4a:	6926      	ldr	r6, [r4, #16]
 8006f4c:	f104 0214 	add.w	r2, r4, #20
 8006f50:	f105 0914 	add.w	r9, r5, #20
 8006f54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006f58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006f5c:	f100 0114 	add.w	r1, r0, #20
 8006f60:	f852 ab04 	ldr.w	sl, [r2], #4
 8006f64:	f859 5b04 	ldr.w	r5, [r9], #4
 8006f68:	fa1f f38a 	uxth.w	r3, sl
 8006f6c:	4473      	add	r3, lr
 8006f6e:	b2ac      	uxth	r4, r5
 8006f70:	1b1b      	subs	r3, r3, r4
 8006f72:	0c2c      	lsrs	r4, r5, #16
 8006f74:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006f78:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006f82:	45c8      	cmp	r8, r9
 8006f84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006f88:	4694      	mov	ip, r2
 8006f8a:	f841 4b04 	str.w	r4, [r1], #4
 8006f8e:	d8e7      	bhi.n	8006f60 <__mdiff+0x5c>
 8006f90:	45bc      	cmp	ip, r7
 8006f92:	d304      	bcc.n	8006f9e <__mdiff+0x9a>
 8006f94:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f98:	b183      	cbz	r3, 8006fbc <__mdiff+0xb8>
 8006f9a:	6106      	str	r6, [r0, #16]
 8006f9c:	e7c4      	b.n	8006f28 <__mdiff+0x24>
 8006f9e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006fa2:	b2a2      	uxth	r2, r4
 8006fa4:	4472      	add	r2, lr
 8006fa6:	1413      	asrs	r3, r2, #16
 8006fa8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006fac:	b292      	uxth	r2, r2
 8006fae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fb2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006fb6:	f841 2b04 	str.w	r2, [r1], #4
 8006fba:	e7e9      	b.n	8006f90 <__mdiff+0x8c>
 8006fbc:	3e01      	subs	r6, #1
 8006fbe:	e7e9      	b.n	8006f94 <__mdiff+0x90>

08006fc0 <__d2b>:
 8006fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006fc4:	461c      	mov	r4, r3
 8006fc6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006fca:	2101      	movs	r1, #1
 8006fcc:	4690      	mov	r8, r2
 8006fce:	f7ff fd6a 	bl	8006aa6 <_Balloc>
 8006fd2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006fd6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006fda:	4607      	mov	r7, r0
 8006fdc:	bb34      	cbnz	r4, 800702c <__d2b+0x6c>
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	f1b8 0200 	subs.w	r2, r8, #0
 8006fe4:	d027      	beq.n	8007036 <__d2b+0x76>
 8006fe6:	a802      	add	r0, sp, #8
 8006fe8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006fec:	f7ff fe00 	bl	8006bf0 <__lo0bits>
 8006ff0:	9900      	ldr	r1, [sp, #0]
 8006ff2:	b1f0      	cbz	r0, 8007032 <__d2b+0x72>
 8006ff4:	9a01      	ldr	r2, [sp, #4]
 8006ff6:	f1c0 0320 	rsb	r3, r0, #32
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	430b      	orrs	r3, r1
 8007000:	40c2      	lsrs	r2, r0
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	9201      	str	r2, [sp, #4]
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	bf14      	ite	ne
 800700c:	2102      	movne	r1, #2
 800700e:	2101      	moveq	r1, #1
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	6139      	str	r1, [r7, #16]
 8007014:	b1c4      	cbz	r4, 8007048 <__d2b+0x88>
 8007016:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800701a:	4404      	add	r4, r0
 800701c:	6034      	str	r4, [r6, #0]
 800701e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007022:	6028      	str	r0, [r5, #0]
 8007024:	4638      	mov	r0, r7
 8007026:	b002      	add	sp, #8
 8007028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007030:	e7d5      	b.n	8006fde <__d2b+0x1e>
 8007032:	6179      	str	r1, [r7, #20]
 8007034:	e7e7      	b.n	8007006 <__d2b+0x46>
 8007036:	a801      	add	r0, sp, #4
 8007038:	f7ff fdda 	bl	8006bf0 <__lo0bits>
 800703c:	2101      	movs	r1, #1
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	6139      	str	r1, [r7, #16]
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	3020      	adds	r0, #32
 8007046:	e7e5      	b.n	8007014 <__d2b+0x54>
 8007048:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800704c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007050:	6030      	str	r0, [r6, #0]
 8007052:	6918      	ldr	r0, [r3, #16]
 8007054:	f7ff fdad 	bl	8006bb2 <__hi0bits>
 8007058:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800705c:	e7e1      	b.n	8007022 <__d2b+0x62>

0800705e <_calloc_r>:
 800705e:	b538      	push	{r3, r4, r5, lr}
 8007060:	fb02 f401 	mul.w	r4, r2, r1
 8007064:	4621      	mov	r1, r4
 8007066:	f000 f855 	bl	8007114 <_malloc_r>
 800706a:	4605      	mov	r5, r0
 800706c:	b118      	cbz	r0, 8007076 <_calloc_r+0x18>
 800706e:	4622      	mov	r2, r4
 8007070:	2100      	movs	r1, #0
 8007072:	f7fe f921 	bl	80052b8 <memset>
 8007076:	4628      	mov	r0, r5
 8007078:	bd38      	pop	{r3, r4, r5, pc}
	...

0800707c <_free_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4605      	mov	r5, r0
 8007080:	2900      	cmp	r1, #0
 8007082:	d043      	beq.n	800710c <_free_r+0x90>
 8007084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007088:	1f0c      	subs	r4, r1, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	bfb8      	it	lt
 800708e:	18e4      	addlt	r4, r4, r3
 8007090:	f000 f946 	bl	8007320 <__malloc_lock>
 8007094:	4a1e      	ldr	r2, [pc, #120]	; (8007110 <_free_r+0x94>)
 8007096:	6813      	ldr	r3, [r2, #0]
 8007098:	4610      	mov	r0, r2
 800709a:	b933      	cbnz	r3, 80070aa <_free_r+0x2e>
 800709c:	6063      	str	r3, [r4, #4]
 800709e:	6014      	str	r4, [r2, #0]
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a6:	f000 b93c 	b.w	8007322 <__malloc_unlock>
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	d90b      	bls.n	80070c6 <_free_r+0x4a>
 80070ae:	6821      	ldr	r1, [r4, #0]
 80070b0:	1862      	adds	r2, r4, r1
 80070b2:	4293      	cmp	r3, r2
 80070b4:	bf01      	itttt	eq
 80070b6:	681a      	ldreq	r2, [r3, #0]
 80070b8:	685b      	ldreq	r3, [r3, #4]
 80070ba:	1852      	addeq	r2, r2, r1
 80070bc:	6022      	streq	r2, [r4, #0]
 80070be:	6063      	str	r3, [r4, #4]
 80070c0:	6004      	str	r4, [r0, #0]
 80070c2:	e7ed      	b.n	80070a0 <_free_r+0x24>
 80070c4:	4613      	mov	r3, r2
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	b10a      	cbz	r2, 80070ce <_free_r+0x52>
 80070ca:	42a2      	cmp	r2, r4
 80070cc:	d9fa      	bls.n	80070c4 <_free_r+0x48>
 80070ce:	6819      	ldr	r1, [r3, #0]
 80070d0:	1858      	adds	r0, r3, r1
 80070d2:	42a0      	cmp	r0, r4
 80070d4:	d10b      	bne.n	80070ee <_free_r+0x72>
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	4401      	add	r1, r0
 80070da:	1858      	adds	r0, r3, r1
 80070dc:	4282      	cmp	r2, r0
 80070de:	6019      	str	r1, [r3, #0]
 80070e0:	d1de      	bne.n	80070a0 <_free_r+0x24>
 80070e2:	6810      	ldr	r0, [r2, #0]
 80070e4:	6852      	ldr	r2, [r2, #4]
 80070e6:	4401      	add	r1, r0
 80070e8:	6019      	str	r1, [r3, #0]
 80070ea:	605a      	str	r2, [r3, #4]
 80070ec:	e7d8      	b.n	80070a0 <_free_r+0x24>
 80070ee:	d902      	bls.n	80070f6 <_free_r+0x7a>
 80070f0:	230c      	movs	r3, #12
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	e7d4      	b.n	80070a0 <_free_r+0x24>
 80070f6:	6820      	ldr	r0, [r4, #0]
 80070f8:	1821      	adds	r1, r4, r0
 80070fa:	428a      	cmp	r2, r1
 80070fc:	bf01      	itttt	eq
 80070fe:	6811      	ldreq	r1, [r2, #0]
 8007100:	6852      	ldreq	r2, [r2, #4]
 8007102:	1809      	addeq	r1, r1, r0
 8007104:	6021      	streq	r1, [r4, #0]
 8007106:	6062      	str	r2, [r4, #4]
 8007108:	605c      	str	r4, [r3, #4]
 800710a:	e7c9      	b.n	80070a0 <_free_r+0x24>
 800710c:	bd38      	pop	{r3, r4, r5, pc}
 800710e:	bf00      	nop
 8007110:	20000218 	.word	0x20000218

08007114 <_malloc_r>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	1ccd      	adds	r5, r1, #3
 8007118:	f025 0503 	bic.w	r5, r5, #3
 800711c:	3508      	adds	r5, #8
 800711e:	2d0c      	cmp	r5, #12
 8007120:	bf38      	it	cc
 8007122:	250c      	movcc	r5, #12
 8007124:	2d00      	cmp	r5, #0
 8007126:	4606      	mov	r6, r0
 8007128:	db01      	blt.n	800712e <_malloc_r+0x1a>
 800712a:	42a9      	cmp	r1, r5
 800712c:	d903      	bls.n	8007136 <_malloc_r+0x22>
 800712e:	230c      	movs	r3, #12
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	2000      	movs	r0, #0
 8007134:	bd70      	pop	{r4, r5, r6, pc}
 8007136:	f000 f8f3 	bl	8007320 <__malloc_lock>
 800713a:	4a21      	ldr	r2, [pc, #132]	; (80071c0 <_malloc_r+0xac>)
 800713c:	6814      	ldr	r4, [r2, #0]
 800713e:	4621      	mov	r1, r4
 8007140:	b991      	cbnz	r1, 8007168 <_malloc_r+0x54>
 8007142:	4c20      	ldr	r4, [pc, #128]	; (80071c4 <_malloc_r+0xb0>)
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	b91b      	cbnz	r3, 8007150 <_malloc_r+0x3c>
 8007148:	4630      	mov	r0, r6
 800714a:	f000 f83d 	bl	80071c8 <_sbrk_r>
 800714e:	6020      	str	r0, [r4, #0]
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f000 f838 	bl	80071c8 <_sbrk_r>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d124      	bne.n	80071a6 <_malloc_r+0x92>
 800715c:	230c      	movs	r3, #12
 800715e:	4630      	mov	r0, r6
 8007160:	6033      	str	r3, [r6, #0]
 8007162:	f000 f8de 	bl	8007322 <__malloc_unlock>
 8007166:	e7e4      	b.n	8007132 <_malloc_r+0x1e>
 8007168:	680b      	ldr	r3, [r1, #0]
 800716a:	1b5b      	subs	r3, r3, r5
 800716c:	d418      	bmi.n	80071a0 <_malloc_r+0x8c>
 800716e:	2b0b      	cmp	r3, #11
 8007170:	d90f      	bls.n	8007192 <_malloc_r+0x7e>
 8007172:	600b      	str	r3, [r1, #0]
 8007174:	18cc      	adds	r4, r1, r3
 8007176:	50cd      	str	r5, [r1, r3]
 8007178:	4630      	mov	r0, r6
 800717a:	f000 f8d2 	bl	8007322 <__malloc_unlock>
 800717e:	f104 000b 	add.w	r0, r4, #11
 8007182:	1d23      	adds	r3, r4, #4
 8007184:	f020 0007 	bic.w	r0, r0, #7
 8007188:	1ac3      	subs	r3, r0, r3
 800718a:	d0d3      	beq.n	8007134 <_malloc_r+0x20>
 800718c:	425a      	negs	r2, r3
 800718e:	50e2      	str	r2, [r4, r3]
 8007190:	e7d0      	b.n	8007134 <_malloc_r+0x20>
 8007192:	684b      	ldr	r3, [r1, #4]
 8007194:	428c      	cmp	r4, r1
 8007196:	bf16      	itet	ne
 8007198:	6063      	strne	r3, [r4, #4]
 800719a:	6013      	streq	r3, [r2, #0]
 800719c:	460c      	movne	r4, r1
 800719e:	e7eb      	b.n	8007178 <_malloc_r+0x64>
 80071a0:	460c      	mov	r4, r1
 80071a2:	6849      	ldr	r1, [r1, #4]
 80071a4:	e7cc      	b.n	8007140 <_malloc_r+0x2c>
 80071a6:	1cc4      	adds	r4, r0, #3
 80071a8:	f024 0403 	bic.w	r4, r4, #3
 80071ac:	42a0      	cmp	r0, r4
 80071ae:	d005      	beq.n	80071bc <_malloc_r+0xa8>
 80071b0:	1a21      	subs	r1, r4, r0
 80071b2:	4630      	mov	r0, r6
 80071b4:	f000 f808 	bl	80071c8 <_sbrk_r>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d0cf      	beq.n	800715c <_malloc_r+0x48>
 80071bc:	6025      	str	r5, [r4, #0]
 80071be:	e7db      	b.n	8007178 <_malloc_r+0x64>
 80071c0:	20000218 	.word	0x20000218
 80071c4:	2000021c 	.word	0x2000021c

080071c8 <_sbrk_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	2300      	movs	r3, #0
 80071cc:	4c05      	ldr	r4, [pc, #20]	; (80071e4 <_sbrk_r+0x1c>)
 80071ce:	4605      	mov	r5, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	6023      	str	r3, [r4, #0]
 80071d4:	f7fc fea4 	bl	8003f20 <_sbrk>
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	d102      	bne.n	80071e2 <_sbrk_r+0x1a>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	b103      	cbz	r3, 80071e2 <_sbrk_r+0x1a>
 80071e0:	602b      	str	r3, [r5, #0]
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	20000230 	.word	0x20000230

080071e8 <__sread>:
 80071e8:	b510      	push	{r4, lr}
 80071ea:	460c      	mov	r4, r1
 80071ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f0:	f000 f898 	bl	8007324 <_read_r>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	bfab      	itete	ge
 80071f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071fa:	89a3      	ldrhlt	r3, [r4, #12]
 80071fc:	181b      	addge	r3, r3, r0
 80071fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007202:	bfac      	ite	ge
 8007204:	6563      	strge	r3, [r4, #84]	; 0x54
 8007206:	81a3      	strhlt	r3, [r4, #12]
 8007208:	bd10      	pop	{r4, pc}

0800720a <__swrite>:
 800720a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720e:	461f      	mov	r7, r3
 8007210:	898b      	ldrh	r3, [r1, #12]
 8007212:	4605      	mov	r5, r0
 8007214:	05db      	lsls	r3, r3, #23
 8007216:	460c      	mov	r4, r1
 8007218:	4616      	mov	r6, r2
 800721a:	d505      	bpl.n	8007228 <__swrite+0x1e>
 800721c:	2302      	movs	r3, #2
 800721e:	2200      	movs	r2, #0
 8007220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007224:	f000 f858 	bl	80072d8 <_lseek_r>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	4632      	mov	r2, r6
 800722c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007236:	463b      	mov	r3, r7
 8007238:	4628      	mov	r0, r5
 800723a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	f000 b817 	b.w	8007270 <_write_r>

08007242 <__sseek>:
 8007242:	b510      	push	{r4, lr}
 8007244:	460c      	mov	r4, r1
 8007246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724a:	f000 f845 	bl	80072d8 <_lseek_r>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	bf15      	itete	ne
 8007254:	6560      	strne	r0, [r4, #84]	; 0x54
 8007256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800725a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800725e:	81a3      	strheq	r3, [r4, #12]
 8007260:	bf18      	it	ne
 8007262:	81a3      	strhne	r3, [r4, #12]
 8007264:	bd10      	pop	{r4, pc}

08007266 <__sclose>:
 8007266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726a:	f000 b813 	b.w	8007294 <_close_r>
	...

08007270 <_write_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4605      	mov	r5, r0
 8007274:	4608      	mov	r0, r1
 8007276:	4611      	mov	r1, r2
 8007278:	2200      	movs	r2, #0
 800727a:	4c05      	ldr	r4, [pc, #20]	; (8007290 <_write_r+0x20>)
 800727c:	6022      	str	r2, [r4, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	f7fc fe0b 	bl	8003e9a <_write>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_write_r+0x1e>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	b103      	cbz	r3, 800728e <_write_r+0x1e>
 800728c:	602b      	str	r3, [r5, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	20000230 	.word	0x20000230

08007294 <_close_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	2300      	movs	r3, #0
 8007298:	4c05      	ldr	r4, [pc, #20]	; (80072b0 <_close_r+0x1c>)
 800729a:	4605      	mov	r5, r0
 800729c:	4608      	mov	r0, r1
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	f7fc fe17 	bl	8003ed2 <_close>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_close_r+0x1a>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_close_r+0x1a>
 80072ac:	602b      	str	r3, [r5, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	20000230 	.word	0x20000230

080072b4 <_fstat_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	2300      	movs	r3, #0
 80072b8:	4c06      	ldr	r4, [pc, #24]	; (80072d4 <_fstat_r+0x20>)
 80072ba:	4605      	mov	r5, r0
 80072bc:	4608      	mov	r0, r1
 80072be:	4611      	mov	r1, r2
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	f7fc fe11 	bl	8003ee8 <_fstat>
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	d102      	bne.n	80072d0 <_fstat_r+0x1c>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	b103      	cbz	r3, 80072d0 <_fstat_r+0x1c>
 80072ce:	602b      	str	r3, [r5, #0]
 80072d0:	bd38      	pop	{r3, r4, r5, pc}
 80072d2:	bf00      	nop
 80072d4:	20000230 	.word	0x20000230

080072d8 <_lseek_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4605      	mov	r5, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	2200      	movs	r2, #0
 80072e2:	4c05      	ldr	r4, [pc, #20]	; (80072f8 <_lseek_r+0x20>)
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f7fc fe0d 	bl	8003f06 <_lseek>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_lseek_r+0x1e>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_lseek_r+0x1e>
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000230 	.word	0x20000230

080072fc <__ascii_mbtowc>:
 80072fc:	b082      	sub	sp, #8
 80072fe:	b901      	cbnz	r1, 8007302 <__ascii_mbtowc+0x6>
 8007300:	a901      	add	r1, sp, #4
 8007302:	b142      	cbz	r2, 8007316 <__ascii_mbtowc+0x1a>
 8007304:	b14b      	cbz	r3, 800731a <__ascii_mbtowc+0x1e>
 8007306:	7813      	ldrb	r3, [r2, #0]
 8007308:	600b      	str	r3, [r1, #0]
 800730a:	7812      	ldrb	r2, [r2, #0]
 800730c:	1c10      	adds	r0, r2, #0
 800730e:	bf18      	it	ne
 8007310:	2001      	movne	r0, #1
 8007312:	b002      	add	sp, #8
 8007314:	4770      	bx	lr
 8007316:	4610      	mov	r0, r2
 8007318:	e7fb      	b.n	8007312 <__ascii_mbtowc+0x16>
 800731a:	f06f 0001 	mvn.w	r0, #1
 800731e:	e7f8      	b.n	8007312 <__ascii_mbtowc+0x16>

08007320 <__malloc_lock>:
 8007320:	4770      	bx	lr

08007322 <__malloc_unlock>:
 8007322:	4770      	bx	lr

08007324 <_read_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	4605      	mov	r5, r0
 8007328:	4608      	mov	r0, r1
 800732a:	4611      	mov	r1, r2
 800732c:	2200      	movs	r2, #0
 800732e:	4c05      	ldr	r4, [pc, #20]	; (8007344 <_read_r+0x20>)
 8007330:	6022      	str	r2, [r4, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	f7fc fd94 	bl	8003e60 <_read>
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d102      	bne.n	8007342 <_read_r+0x1e>
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	b103      	cbz	r3, 8007342 <_read_r+0x1e>
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	bd38      	pop	{r3, r4, r5, pc}
 8007344:	20000230 	.word	0x20000230

08007348 <__ascii_wctomb>:
 8007348:	b149      	cbz	r1, 800735e <__ascii_wctomb+0x16>
 800734a:	2aff      	cmp	r2, #255	; 0xff
 800734c:	bf8b      	itete	hi
 800734e:	238a      	movhi	r3, #138	; 0x8a
 8007350:	700a      	strbls	r2, [r1, #0]
 8007352:	6003      	strhi	r3, [r0, #0]
 8007354:	2001      	movls	r0, #1
 8007356:	bf88      	it	hi
 8007358:	f04f 30ff 	movhi.w	r0, #4294967295
 800735c:	4770      	bx	lr
 800735e:	4608      	mov	r0, r1
 8007360:	4770      	bx	lr
	...

08007364 <_init>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	bf00      	nop
 8007368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736a:	bc08      	pop	{r3}
 800736c:	469e      	mov	lr, r3
 800736e:	4770      	bx	lr

08007370 <_fini>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr

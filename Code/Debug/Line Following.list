
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000417c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800432c  0800432c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800432c  0800432c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800432c  0800432c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000006c  080043a0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080043a0  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c5e  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001caa  00000000  00000000  00029cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001583b  00000000  00000000  0002ce28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b32  00000000  00000000  00042663  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006db6f  00000000  00000000  00049195  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  000b6d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004270 	.word	0x08004270

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08004270 	.word	0x08004270

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6a1a      	ldr	r2, [r3, #32]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	431a      	orrs	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	621a      	str	r2, [r3, #32]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	b29a      	uxth	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	611a      	str	r2, [r3, #16]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b083      	sub	sp, #12
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	0a1b      	lsrs	r3, r3, #8
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	615a      	str	r2, [r3, #20]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <MotorL_EnablePWM>:
 */
#include "MotorControl.h"


void MotorL_EnablePWM(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 80007c8:	2101      	movs	r1, #1
 80007ca:	4802      	ldr	r0, [pc, #8]	; (80007d4 <MotorL_EnablePWM+0x10>)
 80007cc:	f7ff ffb2 	bl	8000734 <LL_TIM_CC_EnableChannel>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <MotorR_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void MotorR_EnablePWM(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 80007dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e0:	4802      	ldr	r0, [pc, #8]	; (80007ec <MotorR_EnablePWM+0x14>)
 80007e2:	f7ff ffa7 	bl	8000734 <LL_TIM_CC_EnableChannel>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40012c00 	.word	0x40012c00

080007f0 <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80007fe:	db03      	blt.n	8000808 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 8000800:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	e005      	b.n	8000814 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800080e:	dc01      	bgt.n	8000814 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MotorL_SetPWM+0x60>)
 8000812:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	db0a      	blt.n	8000830 <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	b29b      	uxth	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <MotorL_SetPWM+0x64>)
 8000822:	f7ff ff97 	bl	8000754 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <MotorL_SetPWM+0x68>)
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MotorL_SetPWM+0x6c>)
 800082a:	f7ff ffbc 	bl	80007a6 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800082e:	e00a      	b.n	8000846 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8000836:	4619      	mov	r1, r3
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <MotorL_SetPWM+0x64>)
 800083a:	f7ff ff8b 	bl	8000754 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800083e:	4906      	ldr	r1, [pc, #24]	; (8000858 <MotorL_SetPWM+0x68>)
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <MotorL_SetPWM+0x6c>)
 8000842:	f7ff ffa1 	bl	8000788 <LL_GPIO_SetOutputPin>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	ffffe3e0 	.word	0xffffe3e0
 8000854:	40012c00 	.word	0x40012c00
 8000858:	04800080 	.word	0x04800080
 800085c:	40010c00 	.word	0x40010c00

08000860 <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800086e:	db03      	blt.n	8000878 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 8000870:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e005      	b.n	8000884 <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800087e:	dc01      	bgt.n	8000884 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MotorR_SetPWM+0x60>)
 8000882:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	db0a      	blt.n	80008a0 <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	b29b      	uxth	r3, r3
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MotorR_SetPWM+0x64>)
 8000892:	f7ff ff6c 	bl	800076e <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8000896:	490c      	ldr	r1, [pc, #48]	; (80008c8 <MotorR_SetPWM+0x68>)
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MotorR_SetPWM+0x6c>)
 800089a:	f7ff ff84 	bl	80007a6 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 800089e:	e00a      	b.n	80008b6 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <MotorR_SetPWM+0x64>)
 80008aa:	f7ff ff60 	bl	800076e <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80008ae:	4906      	ldr	r1, [pc, #24]	; (80008c8 <MotorR_SetPWM+0x68>)
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <MotorR_SetPWM+0x6c>)
 80008b2:	f7ff ff69 	bl	8000788 <LL_GPIO_SetOutputPin>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	ffffe3e0 	.word	0xffffe3e0
 80008c4:	40012c00 	.word	0x40012c00
 80008c8:	04020002 	.word	0x04020002
 80008cc:	40010800 	.word	0x40010800

080008d0 <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90) ServoAngle = 90;
 80008d8:	4914      	ldr	r1, [pc, #80]	; (800092c <Servo_SetAngle+0x5c>)
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff00 	bl	80006e0 <__aeabi_fcmpgt>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <Servo_SetAngle+0x1c>
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <Servo_SetAngle+0x5c>)
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	e008      	b.n	80008fe <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90) ServoAngle = -90;
 80008ec:	4910      	ldr	r1, [pc, #64]	; (8000930 <Servo_SetAngle+0x60>)
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fed8 	bl	80006a4 <__aeabi_fcmplt>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <Servo_SetAngle+0x2e>
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <Servo_SetAngle+0x60>)
 80008fc:	607b      	str	r3, [r7, #4]
	SetServoCompare(750 + ServoAngle*250/90);
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <Servo_SetAngle+0x64>)
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fd31 	bl	8000368 <__aeabi_fmul>
 8000906:	4603      	mov	r3, r0
 8000908:	4908      	ldr	r1, [pc, #32]	; (800092c <Servo_SetAngle+0x5c>)
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fde0 	bl	80004d0 <__aeabi_fdiv>
 8000910:	4603      	mov	r3, r0
 8000912:	4909      	ldr	r1, [pc, #36]	; (8000938 <Servo_SetAngle+0x68>)
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc1f 	bl	8000158 <__addsf3>
 800091a:	4603      	mov	r3, r0
 800091c:	4618      	mov	r0, r3
 800091e:	f001 feb9 	bl	8002694 <SetServoCompare>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	42b40000 	.word	0x42b40000
 8000930:	c2b40000 	.word	0xc2b40000
 8000934:	437a0000 	.word	0x437a0000
 8000938:	443b8000 	.word	0x443b8000

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	db0b      	blt.n	80009ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	f003 021f 	and.w	r2, r3, #31
 80009b8:	4906      	ldr	r1, [pc, #24]	; (80009d4 <__NVIC_EnableIRQ+0x34>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	095b      	lsrs	r3, r3, #5
 80009c0:	2001      	movs	r0, #1
 80009c2:	fa00 f202 	lsl.w	r2, r0, r2
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	db0a      	blt.n	8000a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <__NVIC_SetPriority+0x4c>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	0112      	lsls	r2, r2, #4
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	440b      	add	r3, r1
 80009fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a00:	e00a      	b.n	8000a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4908      	ldr	r1, [pc, #32]	; (8000a28 <__NVIC_SetPriority+0x50>)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	f003 030f 	and.w	r3, r3, #15
 8000a0e:	3b04      	subs	r3, #4
 8000a10:	0112      	lsls	r2, r2, #4
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	440b      	add	r3, r1
 8000a16:	761a      	strb	r2, [r3, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f1c3 0307 	rsb	r3, r3, #7
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	bf28      	it	cs
 8000a4a:	2304      	movcs	r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3304      	adds	r3, #4
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d902      	bls.n	8000a5c <NVIC_EncodePriority+0x30>
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b03      	subs	r3, #3
 8000a5a:	e000      	b.n	8000a5e <NVIC_EncodePriority+0x32>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	43d9      	mvns	r1, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	4313      	orrs	r3, r2
         );
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3724      	adds	r7, #36	; 0x24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a90:	b490      	push	{r4, r7}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	332c      	adds	r3, #44	; 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000aa8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000aac:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	fa92 f2a2 	rbit	r2, r2
 8000ab4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	fab2 f282 	clz	r2, r2
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	40d3      	lsrs	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000ac6:	6822      	ldr	r2, [r4, #0]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	f003 031f 	and.w	r3, r3, #31
 8000ace:	211f      	movs	r1, #31
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 011f 	and.w	r1, r3, #31
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f003 031f 	and.w	r3, r3, #31
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000aec:	bf00      	nop
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc90      	pop	{r4, r7}
 8000af4:	4770      	bx	lr

08000af6 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b1a:	b490      	push	{r4, r7}
 8000b1c:	b08a      	sub	sp, #40	; 0x28
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	330c      	adds	r3, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	fa92 f2a2 	rbit	r2, r2
 8000b3e:	613a      	str	r2, [r7, #16]
  return result;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	40d3      	lsrs	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8000b50:	6822      	ldr	r2, [r4, #0]
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000b58:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000b5c:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5e:	69f9      	ldr	r1, [r7, #28]
 8000b60:	fa91 f1a1 	rbit	r1, r1
 8000b64:	61b9      	str	r1, [r7, #24]
  return result;
 8000b66:	69b9      	ldr	r1, [r7, #24]
 8000b68:	fab1 f181 	clz	r1, r1
 8000b6c:	b2c9      	uxtb	r1, r1
 8000b6e:	40cb      	lsrs	r3, r1
 8000b70:	2107      	movs	r1, #7
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	401a      	ands	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000b80:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000b84:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b88:	fa91 f1a1 	rbit	r1, r1
 8000b8c:	6239      	str	r1, [r7, #32]
  return result;
 8000b8e:	6a39      	ldr	r1, [r7, #32]
 8000b90:	fab1 f181 	clz	r1, r1
 8000b94:	b2c9      	uxtb	r1, r1
 8000b96:	40cb      	lsrs	r3, r1
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc90      	pop	{r4, r7}
 8000baa:	4770      	bx	lr

08000bac <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f043 0201 	orr.w	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f043 0204 	orr.w	r2, r3, #4
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	bf0c      	ite	eq
 8000bfc:	2301      	moveq	r3, #1
 8000bfe:	2300      	movne	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <LL_DMA_EnableChannel+0x38>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	4906      	ldr	r1, [pc, #24]	; (8000c64 <LL_DMA_EnableChannel+0x38>)
 8000c4c:	5c8a      	ldrb	r2, [r1, r2]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	440a      	add	r2, r1
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	08004288 	.word	0x08004288

08000c68 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <LL_DMA_SetDataTransferDirection+0x44>)
 8000c7a:	5cd3      	ldrb	r3, [r2, r3]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4413      	add	r3, r2
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c88:	f023 0310 	bic.w	r3, r3, #16
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	4906      	ldr	r1, [pc, #24]	; (8000cac <LL_DMA_SetDataTransferDirection+0x44>)
 8000c92:	5c8a      	ldrb	r2, [r1, r2]
 8000c94:	4611      	mov	r1, r2
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	440a      	add	r2, r1
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	08004288 	.word	0x08004288

08000cb0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LL_DMA_SetMode+0x40>)
 8000cc2:	5cd3      	ldrb	r3, [r2, r3]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f023 0220 	bic.w	r2, r3, #32
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4906      	ldr	r1, [pc, #24]	; (8000cf0 <LL_DMA_SetMode+0x40>)
 8000cd6:	5ccb      	ldrb	r3, [r1, r3]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	440b      	add	r3, r1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	08004288 	.word	0x08004288

08000cf4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LL_DMA_SetPeriphIncMode+0x40>)
 8000d06:	5cd3      	ldrb	r3, [r2, r3]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	4906      	ldr	r1, [pc, #24]	; (8000d34 <LL_DMA_SetPeriphIncMode+0x40>)
 8000d1a:	5ccb      	ldrb	r3, [r1, r3]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	440b      	add	r3, r1
 8000d22:	4619      	mov	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	08004288 	.word	0x08004288

08000d38 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LL_DMA_SetMemoryIncMode+0x40>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4906      	ldr	r1, [pc, #24]	; (8000d78 <LL_DMA_SetMemoryIncMode+0x40>)
 8000d5e:	5ccb      	ldrb	r3, [r1, r3]
 8000d60:	4619      	mov	r1, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	440b      	add	r3, r1
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	08004288 	.word	0x08004288

08000d7c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LL_DMA_SetPeriphSize+0x40>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	4906      	ldr	r1, [pc, #24]	; (8000dbc <LL_DMA_SetPeriphSize+0x40>)
 8000da2:	5ccb      	ldrb	r3, [r1, r3]
 8000da4:	4619      	mov	r1, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	440b      	add	r3, r1
 8000daa:	4619      	mov	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	08004288 	.word	0x08004288

08000dc0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LL_DMA_SetMemorySize+0x40>)
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	4906      	ldr	r1, [pc, #24]	; (8000e00 <LL_DMA_SetMemorySize+0x40>)
 8000de6:	5ccb      	ldrb	r3, [r1, r3]
 8000de8:	4619      	mov	r1, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	440b      	add	r3, r1
 8000dee:	4619      	mov	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	08004288 	.word	0x08004288

08000e04 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	4906      	ldr	r1, [pc, #24]	; (8000e44 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000e2a:	5ccb      	ldrb	r3, [r1, r3]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	440b      	add	r3, r1
 8000e32:	4619      	mov	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	08004288 	.word	0x08004288

08000e48 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LL_DMA_SetDataLength+0x40>)
 8000e5a:	5cd3      	ldrb	r3, [r2, r3]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4413      	add	r3, r2
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	0c1b      	lsrs	r3, r3, #16
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	3a01      	subs	r2, #1
 8000e6c:	4906      	ldr	r1, [pc, #24]	; (8000e88 <LL_DMA_SetDataLength+0x40>)
 8000e6e:	5c8a      	ldrb	r2, [r1, r2]
 8000e70:	4611      	mov	r1, r2
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	440a      	add	r2, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	08004288 	.word	0x08004288

08000e8c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <LL_DMA_SetMemoryAddress+0x2c>)
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	08004288 	.word	0x08004288

08000ebc <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <LL_DMA_SetPeriphAddress+0x2c>)
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6093      	str	r3, [r2, #8]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	08004288 	.word	0x08004288

08000eec <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f023 0201 	bic.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <LL_RCC_HSE_Enable+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <LL_RCC_HSE_Enable+0x18>)
 8000f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <LL_RCC_HSE_IsReady+0x20>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <LL_RCC_SetSysClkSource+0x24>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f023 0203 	bic.w	r2, r3, #3
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <LL_RCC_SetSysClkSource+0x24>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <LL_RCC_GetSysClkSource+0x14>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000

08001008 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <LL_RCC_SetAHBPrescaler+0x24>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <LL_RCC_SetAHBPrescaler+0x24>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <LL_RCC_SetAPB1Prescaler+0x24>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001068:	4904      	ldr	r1, [pc, #16]	; (800107c <LL_RCC_SetAPB2Prescaler+0x24>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <LL_RCC_SetADCClockSource+0x24>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001090:	4904      	ldr	r1, [pc, #16]	; (80010a4 <LL_RCC_SetADCClockSource+0x24>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <LL_RCC_PLL_Enable+0x18>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a03      	ldr	r2, [pc, #12]	; (80010c0 <LL_RCC_PLL_Enable+0x18>)
 80010b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40021000 	.word	0x40021000

080010c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <LL_RCC_PLL_IsReady+0x20>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010d4:	bf0c      	ite	eq
 80010d6:	2301      	moveq	r3, #1
 80010d8:	2300      	movne	r3, #0
 80010da:	b2db      	uxtb	r3, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000

080010e8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	430b      	orrs	r3, r1
 8001104:	4903      	ldr	r1, [pc, #12]	; (8001114 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000

08001118 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000

08001148 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001152:	69da      	ldr	r2, [r3, #28]
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4313      	orrs	r3, r2
 800115a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <LL_APB1_GRP1_EnableClock+0x2c>)
 800115e:	69da      	ldr	r2, [r3, #28]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4013      	ands	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	4907      	ldr	r1, [pc, #28]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4313      	orrs	r3, r2
 800118a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800118e:	699a      	ldr	r2, [r3, #24]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4013      	ands	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000

080011a8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <LL_FLASH_SetLatency+0x24>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 0207 	bic.w	r2, r3, #7
 80011b8:	4904      	ldr	r1, [pc, #16]	; (80011cc <LL_FLASH_SetLatency+0x24>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40022000 	.word	0x40022000

080011d0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <LL_FLASH_GetLatency+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0307 	and.w	r3, r3, #7
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40022000 	.word	0x40022000

080011e8 <LL_TIM_EnableCounter>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <LL_TIM_DisableARRPreload>:
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <LL_TIM_SetCounter>:
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
	...

08001240 <LL_TIM_OC_DisableFast>:
{
 8001240:	b4b0      	push	{r4, r5, r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d01c      	beq.n	800128a <LL_TIM_OC_DisableFast+0x4a>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b04      	cmp	r3, #4
 8001254:	d017      	beq.n	8001286 <LL_TIM_OC_DisableFast+0x46>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b10      	cmp	r3, #16
 800125a:	d012      	beq.n	8001282 <LL_TIM_OC_DisableFast+0x42>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b40      	cmp	r3, #64	; 0x40
 8001260:	d00d      	beq.n	800127e <LL_TIM_OC_DisableFast+0x3e>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001268:	d007      	beq.n	800127a <LL_TIM_OC_DisableFast+0x3a>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001270:	d101      	bne.n	8001276 <LL_TIM_OC_DisableFast+0x36>
 8001272:	2305      	movs	r3, #5
 8001274:	e00a      	b.n	800128c <LL_TIM_OC_DisableFast+0x4c>
 8001276:	2306      	movs	r3, #6
 8001278:	e008      	b.n	800128c <LL_TIM_OC_DisableFast+0x4c>
 800127a:	2304      	movs	r3, #4
 800127c:	e006      	b.n	800128c <LL_TIM_OC_DisableFast+0x4c>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <LL_TIM_OC_DisableFast+0x4c>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <LL_TIM_OC_DisableFast+0x4c>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_TIM_OC_DisableFast+0x4c>
 800128a:	2300      	movs	r3, #0
 800128c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3318      	adds	r3, #24
 8001292:	461a      	mov	r2, r3
 8001294:	4629      	mov	r1, r5
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <LL_TIM_OC_DisableFast+0x7c>)
 8001298:	5c5b      	ldrb	r3, [r3, r1]
 800129a:	4413      	add	r3, r2
 800129c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	4629      	mov	r1, r5
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <LL_TIM_OC_DisableFast+0x80>)
 80012a4:	5c5b      	ldrb	r3, [r3, r1]
 80012a6:	4619      	mov	r1, r3
 80012a8:	2304      	movs	r3, #4
 80012aa:	408b      	lsls	r3, r1
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4013      	ands	r3, r2
 80012b0:	6023      	str	r3, [r4, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bcb0      	pop	{r4, r5, r7}
 80012ba:	4770      	bx	lr
 80012bc:	08004290 	.word	0x08004290
 80012c0:	08004298 	.word	0x08004298

080012c4 <LL_TIM_OC_EnablePreload>:
{
 80012c4:	b4b0      	push	{r4, r5, r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d01c      	beq.n	800130e <LL_TIM_OC_EnablePreload+0x4a>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d017      	beq.n	800130a <LL_TIM_OC_EnablePreload+0x46>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	2b10      	cmp	r3, #16
 80012de:	d012      	beq.n	8001306 <LL_TIM_OC_EnablePreload+0x42>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2b40      	cmp	r3, #64	; 0x40
 80012e4:	d00d      	beq.n	8001302 <LL_TIM_OC_EnablePreload+0x3e>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ec:	d007      	beq.n	80012fe <LL_TIM_OC_EnablePreload+0x3a>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f4:	d101      	bne.n	80012fa <LL_TIM_OC_EnablePreload+0x36>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e00a      	b.n	8001310 <LL_TIM_OC_EnablePreload+0x4c>
 80012fa:	2306      	movs	r3, #6
 80012fc:	e008      	b.n	8001310 <LL_TIM_OC_EnablePreload+0x4c>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <LL_TIM_OC_EnablePreload+0x4c>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <LL_TIM_OC_EnablePreload+0x4c>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <LL_TIM_OC_EnablePreload+0x4c>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <LL_TIM_OC_EnablePreload+0x4c>
 800130e:	2300      	movs	r3, #0
 8001310:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3318      	adds	r3, #24
 8001316:	461a      	mov	r2, r3
 8001318:	4629      	mov	r1, r5
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <LL_TIM_OC_EnablePreload+0x7c>)
 800131c:	5c5b      	ldrb	r3, [r3, r1]
 800131e:	4413      	add	r3, r2
 8001320:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001322:	6822      	ldr	r2, [r4, #0]
 8001324:	4629      	mov	r1, r5
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <LL_TIM_OC_EnablePreload+0x80>)
 8001328:	5c5b      	ldrb	r3, [r3, r1]
 800132a:	4619      	mov	r1, r3
 800132c:	2308      	movs	r3, #8
 800132e:	408b      	lsls	r3, r1
 8001330:	4313      	orrs	r3, r2
 8001332:	6023      	str	r3, [r4, #0]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bcb0      	pop	{r4, r5, r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	08004290 	.word	0x08004290
 8001344:	08004298 	.word	0x08004298

08001348 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001348:	b4b0      	push	{r4, r5, r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d01c      	beq.n	8001394 <LL_TIM_IC_SetActiveInput+0x4c>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b04      	cmp	r3, #4
 800135e:	d017      	beq.n	8001390 <LL_TIM_IC_SetActiveInput+0x48>
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b10      	cmp	r3, #16
 8001364:	d012      	beq.n	800138c <LL_TIM_IC_SetActiveInput+0x44>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b40      	cmp	r3, #64	; 0x40
 800136a:	d00d      	beq.n	8001388 <LL_TIM_IC_SetActiveInput+0x40>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001372:	d007      	beq.n	8001384 <LL_TIM_IC_SetActiveInput+0x3c>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137a:	d101      	bne.n	8001380 <LL_TIM_IC_SetActiveInput+0x38>
 800137c:	2305      	movs	r3, #5
 800137e:	e00a      	b.n	8001396 <LL_TIM_IC_SetActiveInput+0x4e>
 8001380:	2306      	movs	r3, #6
 8001382:	e008      	b.n	8001396 <LL_TIM_IC_SetActiveInput+0x4e>
 8001384:	2304      	movs	r3, #4
 8001386:	e006      	b.n	8001396 <LL_TIM_IC_SetActiveInput+0x4e>
 8001388:	2303      	movs	r3, #3
 800138a:	e004      	b.n	8001396 <LL_TIM_IC_SetActiveInput+0x4e>
 800138c:	2302      	movs	r3, #2
 800138e:	e002      	b.n	8001396 <LL_TIM_IC_SetActiveInput+0x4e>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <LL_TIM_IC_SetActiveInput+0x4e>
 8001394:	2300      	movs	r3, #0
 8001396:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3318      	adds	r3, #24
 800139c:	461a      	mov	r2, r3
 800139e:	4629      	mov	r1, r5
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <LL_TIM_IC_SetActiveInput+0x8c>)
 80013a2:	5c5b      	ldrb	r3, [r3, r1]
 80013a4:	4413      	add	r3, r2
 80013a6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80013a8:	6822      	ldr	r2, [r4, #0]
 80013aa:	4629      	mov	r1, r5
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <LL_TIM_IC_SetActiveInput+0x90>)
 80013ae:	5c5b      	ldrb	r3, [r3, r1]
 80013b0:	4619      	mov	r1, r3
 80013b2:	2303      	movs	r3, #3
 80013b4:	408b      	lsls	r3, r1
 80013b6:	43db      	mvns	r3, r3
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	4628      	mov	r0, r5
 80013c0:	4905      	ldr	r1, [pc, #20]	; (80013d8 <LL_TIM_IC_SetActiveInput+0x90>)
 80013c2:	5c09      	ldrb	r1, [r1, r0]
 80013c4:	408b      	lsls	r3, r1
 80013c6:	4313      	orrs	r3, r2
 80013c8:	6023      	str	r3, [r4, #0]
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bcb0      	pop	{r4, r5, r7}
 80013d2:	4770      	bx	lr
 80013d4:	08004290 	.word	0x08004290
 80013d8:	080042a0 	.word	0x080042a0

080013dc <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 80013dc:	b4b0      	push	{r4, r5, r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d01c      	beq.n	8001428 <LL_TIM_IC_SetPrescaler+0x4c>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d017      	beq.n	8001424 <LL_TIM_IC_SetPrescaler+0x48>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d012      	beq.n	8001420 <LL_TIM_IC_SetPrescaler+0x44>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b40      	cmp	r3, #64	; 0x40
 80013fe:	d00d      	beq.n	800141c <LL_TIM_IC_SetPrescaler+0x40>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001406:	d007      	beq.n	8001418 <LL_TIM_IC_SetPrescaler+0x3c>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140e:	d101      	bne.n	8001414 <LL_TIM_IC_SetPrescaler+0x38>
 8001410:	2305      	movs	r3, #5
 8001412:	e00a      	b.n	800142a <LL_TIM_IC_SetPrescaler+0x4e>
 8001414:	2306      	movs	r3, #6
 8001416:	e008      	b.n	800142a <LL_TIM_IC_SetPrescaler+0x4e>
 8001418:	2304      	movs	r3, #4
 800141a:	e006      	b.n	800142a <LL_TIM_IC_SetPrescaler+0x4e>
 800141c:	2303      	movs	r3, #3
 800141e:	e004      	b.n	800142a <LL_TIM_IC_SetPrescaler+0x4e>
 8001420:	2302      	movs	r3, #2
 8001422:	e002      	b.n	800142a <LL_TIM_IC_SetPrescaler+0x4e>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_TIM_IC_SetPrescaler+0x4e>
 8001428:	2300      	movs	r3, #0
 800142a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3318      	adds	r3, #24
 8001430:	461a      	mov	r2, r3
 8001432:	4629      	mov	r1, r5
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001436:	5c5b      	ldrb	r3, [r3, r1]
 8001438:	4413      	add	r3, r2
 800143a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800143c:	6822      	ldr	r2, [r4, #0]
 800143e:	4629      	mov	r1, r5
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <LL_TIM_IC_SetPrescaler+0x90>)
 8001442:	5c5b      	ldrb	r3, [r3, r1]
 8001444:	4619      	mov	r1, r3
 8001446:	230c      	movs	r3, #12
 8001448:	408b      	lsls	r3, r1
 800144a:	43db      	mvns	r3, r3
 800144c:	401a      	ands	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	4628      	mov	r0, r5
 8001454:	4905      	ldr	r1, [pc, #20]	; (800146c <LL_TIM_IC_SetPrescaler+0x90>)
 8001456:	5c09      	ldrb	r1, [r1, r0]
 8001458:	408b      	lsls	r3, r1
 800145a:	4313      	orrs	r3, r2
 800145c:	6023      	str	r3, [r4, #0]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bcb0      	pop	{r4, r5, r7}
 8001466:	4770      	bx	lr
 8001468:	08004290 	.word	0x08004290
 800146c:	080042a0 	.word	0x080042a0

08001470 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001470:	b4b0      	push	{r4, r5, r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d01c      	beq.n	80014bc <LL_TIM_IC_SetFilter+0x4c>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2b04      	cmp	r3, #4
 8001486:	d017      	beq.n	80014b8 <LL_TIM_IC_SetFilter+0x48>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2b10      	cmp	r3, #16
 800148c:	d012      	beq.n	80014b4 <LL_TIM_IC_SetFilter+0x44>
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b40      	cmp	r3, #64	; 0x40
 8001492:	d00d      	beq.n	80014b0 <LL_TIM_IC_SetFilter+0x40>
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800149a:	d007      	beq.n	80014ac <LL_TIM_IC_SetFilter+0x3c>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d101      	bne.n	80014a8 <LL_TIM_IC_SetFilter+0x38>
 80014a4:	2305      	movs	r3, #5
 80014a6:	e00a      	b.n	80014be <LL_TIM_IC_SetFilter+0x4e>
 80014a8:	2306      	movs	r3, #6
 80014aa:	e008      	b.n	80014be <LL_TIM_IC_SetFilter+0x4e>
 80014ac:	2304      	movs	r3, #4
 80014ae:	e006      	b.n	80014be <LL_TIM_IC_SetFilter+0x4e>
 80014b0:	2303      	movs	r3, #3
 80014b2:	e004      	b.n	80014be <LL_TIM_IC_SetFilter+0x4e>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <LL_TIM_IC_SetFilter+0x4e>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_TIM_IC_SetFilter+0x4e>
 80014bc:	2300      	movs	r3, #0
 80014be:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3318      	adds	r3, #24
 80014c4:	461a      	mov	r2, r3
 80014c6:	4629      	mov	r1, r5
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LL_TIM_IC_SetFilter+0x8c>)
 80014ca:	5c5b      	ldrb	r3, [r3, r1]
 80014cc:	4413      	add	r3, r2
 80014ce:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80014d0:	6822      	ldr	r2, [r4, #0]
 80014d2:	4629      	mov	r1, r5
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <LL_TIM_IC_SetFilter+0x90>)
 80014d6:	5c5b      	ldrb	r3, [r3, r1]
 80014d8:	4619      	mov	r1, r3
 80014da:	23f0      	movs	r3, #240	; 0xf0
 80014dc:	408b      	lsls	r3, r1
 80014de:	43db      	mvns	r3, r3
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0c1b      	lsrs	r3, r3, #16
 80014e6:	4628      	mov	r0, r5
 80014e8:	4905      	ldr	r1, [pc, #20]	; (8001500 <LL_TIM_IC_SetFilter+0x90>)
 80014ea:	5c09      	ldrb	r1, [r1, r0]
 80014ec:	408b      	lsls	r3, r1
 80014ee:	4313      	orrs	r3, r2
 80014f0:	6023      	str	r3, [r4, #0]
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bcb0      	pop	{r4, r5, r7}
 80014fa:	4770      	bx	lr
 80014fc:	08004290 	.word	0x08004290
 8001500:	080042a0 	.word	0x080042a0

08001504 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001504:	b490      	push	{r4, r7}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d01c      	beq.n	8001550 <LL_TIM_IC_SetPolarity+0x4c>
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d017      	beq.n	800154c <LL_TIM_IC_SetPolarity+0x48>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b10      	cmp	r3, #16
 8001520:	d012      	beq.n	8001548 <LL_TIM_IC_SetPolarity+0x44>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b40      	cmp	r3, #64	; 0x40
 8001526:	d00d      	beq.n	8001544 <LL_TIM_IC_SetPolarity+0x40>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800152e:	d007      	beq.n	8001540 <LL_TIM_IC_SetPolarity+0x3c>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001536:	d101      	bne.n	800153c <LL_TIM_IC_SetPolarity+0x38>
 8001538:	2305      	movs	r3, #5
 800153a:	e00a      	b.n	8001552 <LL_TIM_IC_SetPolarity+0x4e>
 800153c:	2306      	movs	r3, #6
 800153e:	e008      	b.n	8001552 <LL_TIM_IC_SetPolarity+0x4e>
 8001540:	2304      	movs	r3, #4
 8001542:	e006      	b.n	8001552 <LL_TIM_IC_SetPolarity+0x4e>
 8001544:	2303      	movs	r3, #3
 8001546:	e004      	b.n	8001552 <LL_TIM_IC_SetPolarity+0x4e>
 8001548:	2302      	movs	r3, #2
 800154a:	e002      	b.n	8001552 <LL_TIM_IC_SetPolarity+0x4e>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LL_TIM_IC_SetPolarity+0x4e>
 8001550:	2300      	movs	r3, #0
 8001552:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a1a      	ldr	r2, [r3, #32]
 8001558:	4621      	mov	r1, r4
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <LL_TIM_IC_SetPolarity+0x80>)
 800155c:	5c5b      	ldrb	r3, [r3, r1]
 800155e:	4619      	mov	r1, r3
 8001560:	230a      	movs	r3, #10
 8001562:	408b      	lsls	r3, r1
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	4621      	mov	r1, r4
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <LL_TIM_IC_SetPolarity+0x80>)
 800156c:	5c5b      	ldrb	r3, [r3, r1]
 800156e:	4619      	mov	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	408b      	lsls	r3, r1
 8001574:	431a      	orrs	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bc90      	pop	{r4, r7}
 8001582:	4770      	bx	lr
 8001584:	080042a8 	.word	0x080042a8

08001588 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800159a:	f023 0307 	bic.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 0207 	bic.w	r2, r3, #7
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	605a      	str	r2, [r3, #4]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f06f 0201 	mvn.w	r2, #1
 8001642:	611a      	str	r2, [r3, #16]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60da      	str	r2, [r3, #12]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60da      	str	r2, [r3, #12]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	615a      	str	r2, [r3, #20]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c4:	2b40      	cmp	r3, #64	; 0x40
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <LL_GPIO_SetPinMode>:
{
 80016f4:	b490      	push	{r4, r7}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	461a      	mov	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	0e1b      	lsrs	r3, r3, #24
 8001708:	4413      	add	r3, r2
 800170a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	613b      	str	r3, [r7, #16]
  return result;
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	210f      	movs	r1, #15
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	401a      	ands	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	61bb      	str	r3, [r7, #24]
  return result;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	6023      	str	r3, [r4, #0]
}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bc90      	pop	{r4, r7}
 8001756:	4770      	bx	lr

08001758 <LL_GPIO_ResetOutputPin>:
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	b29a      	uxth	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	615a      	str	r2, [r3, #20]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
	...

08001778 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8001782:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	6053      	str	r3, [r2, #4]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40010000 	.word	0x40010000

08001798 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80017a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6053      	str	r3, [r2, #4]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40010000 	.word	0x40010000

080017b8 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80017c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017ca:	6053      	str	r3, [r2, #4]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40010000 	.word	0x40010000

080017d8 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80017ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017f2:	6053      	str	r3, [r2, #4]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40010000 	.word	0x40010000

08001800 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800180a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800180e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8001816:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800181a:	6053      	str	r3, [r2, #4]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40010000 	.word	0x40010000

08001828 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3302      	adds	r3, #2
 800183a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	43db      	mvns	r3, r3
 8001844:	ea02 0103 	and.w	r1, r2, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	60bb      	str	r3, [r7, #8]
  return result;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	fa03 f202 	lsl.w	r2, r3, r2
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <LL_GPIO_AF_SetEXTISource+0x58>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	430a      	orrs	r2, r1
 800186e:	3302      	adds	r3, #2
 8001870:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40010000 	.word	0x40010000

08001884 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 800188c:	bf00      	nop
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <__io_putchar+0x2c>)
 8001890:	f7ff ff10 	bl	80016b4 <LL_USART_IsActiveFlag_TC>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f9      	beq.n	800188e <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	4619      	mov	r1, r3
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <__io_putchar+0x2c>)
 80018a2:	f7ff ff19 	bl	80016d8 <LL_USART_TransmitData8>

  	return ch;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40013800 	.word	0x40013800

080018b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff fc5d 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80018be:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80018c2:	f7ff fc41 	bl	8001148 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c6:	2003      	movs	r0, #3
 80018c8:	f7ff f838 	bl	800093c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80018cc:	f7ff f85a 	bl	8000984 <__NVIC_GetPriorityGrouping>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f8a8 	bl	8000a2c <NVIC_EncodePriority>
 80018dc:	4603      	mov	r3, r0
 80018de:	4619      	mov	r1, r3
 80018e0:	f06f 000b 	mvn.w	r0, #11
 80018e4:	f7ff f878 	bl	80009d8 <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80018e8:	f7ff f84c 	bl	8000984 <__NVIC_GetPriorityGrouping>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2200      	movs	r2, #0
 80018f0:	2101      	movs	r1, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f89a 	bl	8000a2c <NVIC_EncodePriority>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4619      	mov	r1, r3
 80018fc:	f06f 000a 	mvn.w	r0, #10
 8001900:	f7ff f86a 	bl	80009d8 <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001904:	f7ff f83e 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8001908:	4603      	mov	r3, r0
 800190a:	2200      	movs	r2, #0
 800190c:	2101      	movs	r1, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f88c 	bl	8000a2c <NVIC_EncodePriority>
 8001914:	4603      	mov	r3, r0
 8001916:	4619      	mov	r1, r3
 8001918:	f06f 0009 	mvn.w	r0, #9
 800191c:	f7ff f85c 	bl	80009d8 <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001920:	f7ff f830 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8001924:	4603      	mov	r3, r0
 8001926:	2200      	movs	r2, #0
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f87e 	bl	8000a2c <NVIC_EncodePriority>
 8001930:	4603      	mov	r3, r0
 8001932:	4619      	mov	r1, r3
 8001934:	f06f 0004 	mvn.w	r0, #4
 8001938:	f7ff f84e 	bl	80009d8 <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800193c:	f7ff f822 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8001940:	4603      	mov	r3, r0
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f870 	bl	8000a2c <NVIC_EncodePriority>
 800194c:	4603      	mov	r3, r0
 800194e:	4619      	mov	r1, r3
 8001950:	f06f 0003 	mvn.w	r0, #3
 8001954:	f7ff f840 	bl	80009d8 <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001958:	f7ff f814 	bl	8000984 <__NVIC_GetPriorityGrouping>
 800195c:	4603      	mov	r3, r0
 800195e:	2200      	movs	r2, #0
 8001960:	2101      	movs	r1, #1
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f862 	bl	8000a2c <NVIC_EncodePriority>
 8001968:	4603      	mov	r3, r0
 800196a:	4619      	mov	r1, r3
 800196c:	f06f 0001 	mvn.w	r0, #1
 8001970:	f7ff f832 	bl	80009d8 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001974:	f7ff f806 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8001978:	4603      	mov	r3, r0
 800197a:	2200      	movs	r2, #0
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f854 	bl	8000a2c <NVIC_EncodePriority>
 8001984:	4603      	mov	r3, r0
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f7ff f824 	bl	80009d8 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8001990:	f7ff ff36 	bl	8001800 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <main+0x15c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6858      	ldr	r0, [r3, #4]
 800199a:	2300      	movs	r3, #0
 800199c:	2202      	movs	r2, #2
 800199e:	2100      	movs	r1, #0
 80019a0:	f002 f8be 	bl	8003b20 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <main+0x15c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6898      	ldr	r0, [r3, #8]
 80019aa:	2300      	movs	r3, #0
 80019ac:	2202      	movs	r2, #2
 80019ae:	2100      	movs	r1, #0
 80019b0:	f002 f8b6 	bl	8003b20 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <main+0x15c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68d8      	ldr	r0, [r3, #12]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2202      	movs	r2, #2
 80019be:	2100      	movs	r1, #0
 80019c0:	f002 f8ae 	bl	8003b20 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f828 	bl	8001a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f000 fc9c 	bl	8002304 <MX_GPIO_Init>
  MX_DMA_Init();
 80019cc:	f000 fc82 	bl	80022d4 <MX_DMA_Init>
  MX_TIM1_Init();
 80019d0:	f000 f9d4 	bl	8001d7c <MX_TIM1_Init>
  MX_ADC1_Init();
 80019d4:	f000 f862 	bl	8001a9c <MX_ADC1_Init>
  MX_I2C1_Init();
 80019d8:	f000 f976 	bl	8001cc8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80019dc:	f000 fc10 	bl	8002200 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80019e0:	f000 fa82 	bl	8001ee8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019e4:	f000 fb30 	bl	8002048 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019e8:	f000 fbbe 	bl	8002168 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 80019ec:	f7fe feea 	bl	80007c4 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 80019f0:	f7fe fef2 	bl	80007d8 <MotorR_EnablePWM>
  MotorL_SetPWM(0);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7fe fefb 	bl	80007f0 <MotorL_SetPWM>
  MotorR_SetPWM(0);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7fe ff30 	bl	8000860 <MotorR_SetPWM>
  Servo_SetAngle(0);
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	f7fe ff64 	bl	80008d0 <Servo_SetAngle>
//	  Sensor_PrintValue();
//	  Sensor_Print_LineDetect();

//	  LL_mDelay(2);

	  Servo_SetAngle(20);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <main+0x160>)
 8001a0a:	f7fe ff61 	bl	80008d0 <Servo_SetAngle>
 8001a0e:	e7fb      	b.n	8001a08 <main+0x154>
 8001a10:	20000008 	.word	0x20000008
 8001a14:	41a00000 	.word	0x41a00000

08001a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f7ff fbc3 	bl	80011a8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001a22:	bf00      	nop
 8001a24:	f7ff fbd4 	bl	80011d0 <LL_FLASH_GetLatency>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d1fa      	bne.n	8001a24 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8001a2e:	f7ff faab 	bl	8000f88 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001a32:	bf00      	nop
 8001a34:	f7ff fab6 	bl	8000fa4 <LL_RCC_HSE_IsReady>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d1fa      	bne.n	8001a34 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8001a3e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8001a42:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a46:	f7ff fb4f 	bl	80010e8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001a4a:	f7ff fb2d 	bl	80010a8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001a4e:	bf00      	nop
 8001a50:	f7ff fb38 	bl	80010c4 <LL_RCC_PLL_IsReady>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d1fa      	bne.n	8001a50 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fad4 	bl	8001008 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001a60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a64:	f7ff fae4 	bl	8001030 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff faf5 	bl	8001058 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7ff faaa 	bl	8000fc8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a74:	bf00      	nop
 8001a76:	f7ff fabb 	bl	8000ff0 <LL_RCC_GetSysClkSource>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d1fa      	bne.n	8001a76 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <SystemClock_Config+0x80>)
 8001a82:	f001 ffff 	bl	8003a84 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 8001a86:	4804      	ldr	r0, [pc, #16]	; (8001a98 <SystemClock_Config+0x80>)
 8001a88:	f002 f80a 	bl	8003aa0 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8001a8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a90:	f7ff faf6 	bl	8001080 <LL_RCC_SetADCClockSource>
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	044aa200 	.word	0x044aa200

08001a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001ace:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ad2:	f7ff fb51 	bl	8001178 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001ad6:	2004      	movs	r0, #4
 8001ad8:	f7ff fb4e 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	486b      	ldr	r0, [pc, #428]	; (8001c98 <MX_ADC1_Init+0x1fc>)
 8001aec:	f001 f95c 	bl	8002da8 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2101      	movs	r1, #1
 8001af4:	4869      	ldr	r0, [pc, #420]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001af6:	f7ff f8b7 	bl	8000c68 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8001afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afe:	2101      	movs	r1, #1
 8001b00:	4866      	ldr	r0, [pc, #408]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b02:	f7ff f97f 	bl	8000e04 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001b06:	2220      	movs	r2, #32
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4864      	ldr	r0, [pc, #400]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b0c:	f7ff f8d0 	bl	8000cb0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	4861      	ldr	r0, [pc, #388]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b16:	f7ff f8ed 	bl	8000cf4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	485f      	ldr	r0, [pc, #380]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b20:	f7ff f90a 	bl	8000d38 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	2101      	movs	r1, #1
 8001b2a:	485c      	ldr	r0, [pc, #368]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b2c:	f7ff f926 	bl	8000d7c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b34:	2101      	movs	r1, #1
 8001b36:	4859      	ldr	r0, [pc, #356]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b38:	f7ff f942 	bl	8000dc0 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4856      	ldr	r0, [pc, #344]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b42:	f7ff f981 	bl	8000e48 <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &Sensor_ADC_Value);
 8001b46:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <MX_ADC1_Init+0x204>)
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4853      	ldr	r0, [pc, #332]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b4e:	f7ff f99d 	bl	8000e8c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 8001b52:	4a54      	ldr	r2, [pc, #336]	; (8001ca4 <MX_ADC1_Init+0x208>)
 8001b54:	2101      	movs	r1, #1
 8001b56:	4851      	ldr	r0, [pc, #324]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b58:	f7ff f9b0 	bl	8000ebc <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	484f      	ldr	r0, [pc, #316]	; (8001c9c <MX_ADC1_Init+0x200>)
 8001b60:	f7ff f864 	bl	8000c2c <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b72:	4619      	mov	r1, r3
 8001b74:	484c      	ldr	r0, [pc, #304]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001b76:	f000 fee5 	bl	8002944 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4848      	ldr	r0, [pc, #288]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001b86:	f000 feab 	bl	80028e0 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001b8a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8001b8e:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8001b90:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001b94:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	4619      	mov	r1, r3
 8001baa:	483f      	ldr	r0, [pc, #252]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001bac:	f000 fef1 	bl	8002992 <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb8:	483b      	ldr	r0, [pc, #236]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001bba:	f7fe ff69 	bl	8000a90 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bc4:	4838      	ldr	r0, [pc, #224]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001bc6:	f7fe ffa8 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8001bca:	4a38      	ldr	r2, [pc, #224]	; (8001cac <MX_ADC1_Init+0x210>)
 8001bcc:	f240 2105 	movw	r1, #517	; 0x205
 8001bd0:	4835      	ldr	r0, [pc, #212]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001bd2:	f7fe ff5d 	bl	8000a90 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	4934      	ldr	r1, [pc, #208]	; (8001cac <MX_ADC1_Init+0x210>)
 8001bda:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001bdc:	f7fe ff9d 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8001be0:	4a33      	ldr	r2, [pc, #204]	; (8001cb0 <MX_ADC1_Init+0x214>)
 8001be2:	f240 210a 	movw	r1, #522	; 0x20a
 8001be6:	4830      	ldr	r0, [pc, #192]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001be8:	f7fe ff52 	bl	8000a90 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8001bec:	2203      	movs	r2, #3
 8001bee:	4930      	ldr	r1, [pc, #192]	; (8001cb0 <MX_ADC1_Init+0x214>)
 8001bf0:	482d      	ldr	r0, [pc, #180]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001bf2:	f7fe ff92 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8001bf6:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <MX_ADC1_Init+0x218>)
 8001bf8:	f240 210f 	movw	r1, #527	; 0x20f
 8001bfc:	482a      	ldr	r0, [pc, #168]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001bfe:	f7fe ff47 	bl	8000a90 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8001c02:	2203      	movs	r2, #3
 8001c04:	492b      	ldr	r1, [pc, #172]	; (8001cb4 <MX_ADC1_Init+0x218>)
 8001c06:	4828      	ldr	r0, [pc, #160]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c08:	f7fe ff87 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8001c0c:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <MX_ADC1_Init+0x21c>)
 8001c0e:	f44f 7105 	mov.w	r1, #532	; 0x214
 8001c12:	4825      	ldr	r0, [pc, #148]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c14:	f7fe ff3c 	bl	8000a90 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8001c18:	2203      	movs	r2, #3
 8001c1a:	4927      	ldr	r1, [pc, #156]	; (8001cb8 <MX_ADC1_Init+0x21c>)
 8001c1c:	4822      	ldr	r0, [pc, #136]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c1e:	f7fe ff7c 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8001c22:	4a26      	ldr	r2, [pc, #152]	; (8001cbc <MX_ADC1_Init+0x220>)
 8001c24:	f240 2119 	movw	r1, #537	; 0x219
 8001c28:	481f      	ldr	r0, [pc, #124]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c2a:	f7fe ff31 	bl	8000a90 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8001c2e:	2203      	movs	r2, #3
 8001c30:	4922      	ldr	r1, [pc, #136]	; (8001cbc <MX_ADC1_Init+0x220>)
 8001c32:	481d      	ldr	r0, [pc, #116]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c34:	f7fe ff71 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8001c38:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <MX_ADC1_Init+0x224>)
 8001c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c3e:	481a      	ldr	r0, [pc, #104]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c40:	f7fe ff26 	bl	8000a90 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8001c44:	2203      	movs	r2, #3
 8001c46:	491e      	ldr	r1, [pc, #120]	; (8001cc0 <MX_ADC1_Init+0x224>)
 8001c48:	4817      	ldr	r0, [pc, #92]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c4a:	f7fe ff66 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <MX_ADC1_Init+0x228>)
 8001c50:	f240 1105 	movw	r1, #261	; 0x105
 8001c54:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c56:	f7fe ff1b 	bl	8000a90 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	4919      	ldr	r1, [pc, #100]	; (8001cc4 <MX_ADC1_Init+0x228>)
 8001c5e:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c60:	f7fe ff5b 	bl	8000b1a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8001c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c68:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c6a:	f7fe ff44 	bl	8000af6 <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 8001c6e:	480e      	ldr	r0, [pc, #56]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c70:	f7fe ff9c 	bl	8000bac <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c76:	f7fe ffa8 	bl	8000bca <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8001c7a:	bf00      	nop
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c7e:	f7fe ffb3 	bl	8000be8 <LL_ADC_IsCalibrationOnGoing>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <MX_ADC1_Init+0x20c>)
 8001c8a:	f7fe ffbf 	bl	8000c0c <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3738      	adds	r7, #56	; 0x38
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40010800 	.word	0x40010800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	2000009c 	.word	0x2000009c
 8001ca4:	4001244c 	.word	0x4001244c
 8001ca8:	40012400 	.word	0x40012400
 8001cac:	02300001 	.word	0x02300001
 8001cb0:	02600002 	.word	0x02600002
 8001cb4:	02900003 	.word	0x02900003
 8001cb8:	02c00004 	.word	0x02c00004
 8001cbc:	02f00005 	.word	0x02f00005
 8001cc0:	03200006 	.word	0x03200006
 8001cc4:	03500007 	.word	0x03500007

08001cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001cce:	f107 0318 	add.w	r3, r7, #24
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
 8001cde:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001cee:	2008      	movs	r0, #8
 8001cf0:	f7ff fa42 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <MX_I2C1_Init+0xa4>)
 8001cf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cf8:	2309      	movs	r3, #9
 8001cfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001d00:	2304      	movs	r3, #4
 8001d02:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4819      	ldr	r0, [pc, #100]	; (8001d70 <MX_I2C1_Init+0xa8>)
 8001d0a:	f001 f84d 	bl	8002da8 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 8001d0e:	f7ff fd33 	bl	8001778 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001d12:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d16:	f7ff fa17 	bl	8001148 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001d1a:	4816      	ldr	r0, [pc, #88]	; (8001d74 <MX_I2C1_Init+0xac>)
 8001d1c:	f7ff f925 	bl	8000f6a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001d20:	4814      	ldr	r0, [pc, #80]	; (8001d74 <MX_I2C1_Init+0xac>)
 8001d22:	f7ff f901 	bl	8000f28 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001d26:	4813      	ldr	r0, [pc, #76]	; (8001d74 <MX_I2C1_Init+0xac>)
 8001d28:	f7ff f8ef 	bl	8000f0a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_I2C1_Init+0xb0>)
 8001d32:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001d48:	f107 0318 	add.w	r3, r7, #24
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4809      	ldr	r0, [pc, #36]	; (8001d74 <MX_I2C1_Init+0xac>)
 8001d50:	f001 f976 	bl	8003040 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8001d54:	2100      	movs	r1, #0
 8001d56:	4807      	ldr	r0, [pc, #28]	; (8001d74 <MX_I2C1_Init+0xac>)
 8001d58:	f7ff f8f5 	bl	8000f46 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_I2C1_Init+0xac>)
 8001d5e:	f7ff f8c5 	bl	8000eec <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	3730      	adds	r7, #48	; 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	04030003 	.word	0x04030003
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40005400 	.word	0x40005400
 8001d78:	000186a0 	.word	0x000186a0

08001d7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b098      	sub	sp, #96	; 0x60
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d96:	2220      	movs	r2, #32
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 feb8 	bl	8003b10 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	463b      	mov	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001dc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001dc4:	f7ff f9d8 	bl	8001178 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 8001dd2:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001dd6:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001de2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001de6:	4619      	mov	r1, r3
 8001de8:	483c      	ldr	r0, [pc, #240]	; (8001edc <MX_TIM1_Init+0x160>)
 8001dea:	f001 fad1 	bl	8003390 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001dee:	483b      	ldr	r0, [pc, #236]	; (8001edc <MX_TIM1_Init+0x160>)
 8001df0:	f7ff fa09 	bl	8001206 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001df4:	2101      	movs	r1, #1
 8001df6:	4839      	ldr	r0, [pc, #228]	; (8001edc <MX_TIM1_Init+0x160>)
 8001df8:	f7ff fa64 	bl	80012c4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001dfc:	2360      	movs	r3, #96	; 0x60
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001e10:	2300      	movs	r3, #0
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e20:	461a      	mov	r2, r3
 8001e22:	2101      	movs	r1, #1
 8001e24:	482d      	ldr	r0, [pc, #180]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e26:	f001 fb11 	bl	800344c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	482b      	ldr	r0, [pc, #172]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e2e:	f7ff fa07 	bl	8001240 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8001e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e36:	4829      	ldr	r0, [pc, #164]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e38:	f7ff fa44 	bl	80012c4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e4e:	4823      	ldr	r0, [pc, #140]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e50:	f001 fafc 	bl	800344c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8001e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e58:	4820      	ldr	r0, [pc, #128]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e5a:	f7ff f9f1 	bl	8001240 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	481e      	ldr	r0, [pc, #120]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e62:	f7ff fbb7 	bl	80015d4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001e66:	481d      	ldr	r0, [pc, #116]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e68:	f7ff fbc6 	bl	80015f8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4812      	ldr	r0, [pc, #72]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e94:	f001 fb12 	bl	80034bc <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8001e98:	4810      	ldr	r0, [pc, #64]	; (8001edc <MX_TIM1_Init+0x160>)
 8001e9a:	f7ff fbd8 	bl	800164e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM1,0);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	480e      	ldr	r0, [pc, #56]	; (8001edc <MX_TIM1_Init+0x160>)
 8001ea2:	f7ff f9bf 	bl	8001224 <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8001ea6:	480d      	ldr	r0, [pc, #52]	; (8001edc <MX_TIM1_Init+0x160>)
 8001ea8:	f7ff fbb5 	bl	8001616 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8001eac:	480b      	ldr	r0, [pc, #44]	; (8001edc <MX_TIM1_Init+0x160>)
 8001eae:	f7ff f99b 	bl	80011e8 <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001eb2:	2004      	movs	r0, #4
 8001eb4:	f7ff f960 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <MX_TIM1_Init+0x164>)
 8001eba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ebc:	2309      	movs	r3, #9
 8001ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001ece:	f000 ff6b 	bl	8002da8 <LL_GPIO_Init>

}
 8001ed2:	bf00      	nop
 8001ed4:	3760      	adds	r7, #96	; 0x60
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40012c00 	.word	0x40012c00
 8001ee0:	04050005 	.word	0x04050005
 8001ee4:	40010800 	.word	0x40010800

08001ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efe:	463b      	mov	r3, r7
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff f91b 	bl	8001148 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001f12:	2004      	movs	r0, #4
 8001f14:	f7ff f930 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001f18:	2008      	movs	r0, #8
 8001f1a:	f7ff f92d 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <MX_TIM2_Init+0x154>)
 8001f20:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001f22:	2304      	movs	r3, #4
 8001f24:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	463b      	mov	r3, r7
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4845      	ldr	r0, [pc, #276]	; (8002040 <MX_TIM2_Init+0x158>)
 8001f2c:	f000 ff3c 	bl	8002da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001f30:	f640 0308 	movw	r3, #2056	; 0x808
 8001f34:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001f36:	2304      	movs	r3, #4
 8001f38:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4841      	ldr	r0, [pc, #260]	; (8002044 <MX_TIM2_Init+0x15c>)
 8001f40:	f000 ff32 	bl	8002da8 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8001f44:	f7fe fd1e 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fd6c 	bl	8000a2c <NVIC_EncodePriority>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4619      	mov	r1, r3
 8001f58:	201c      	movs	r0, #28
 8001f5a:	f7fe fd3d 	bl	80009d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001f5e:	201c      	movs	r0, #28
 8001f60:	f7fe fd1e 	bl	80009a0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8001f64:	f7ff fc28 	bl	80017b8 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8001f68:	2103      	movs	r1, #3
 8001f6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f6e:	f7ff fb1f 	bl	80015b0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f76:	2101      	movs	r1, #1
 8001f78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f7c:	f7ff f9e4 	bl	8001348 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2101      	movs	r1, #1
 8001f84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f88:	f7ff fa28 	bl	80013dc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f94:	f7ff fa6c 	bl	8001470 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fa0:	f7ff fab0 	bl	8001504 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001fa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fa8:	2110      	movs	r1, #16
 8001faa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fae:	f7ff f9cb 	bl	8001348 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fba:	f7ff fa0f 	bl	80013dc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fc6:	f7ff fa53 	bl	8001470 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2110      	movs	r1, #16
 8001fce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fd2:	f7ff fa97 	bl	8001504 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8001fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe2:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	4619      	mov	r1, r3
 8001fee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ff2:	f001 f9cd 	bl	8003390 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001ff6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ffa:	f7ff f904 	bl	8001206 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001ffe:	2100      	movs	r1, #0
 8002000:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002004:	f7ff fae6 	bl	80015d4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002008:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800200c:	f7ff faf4 	bl	80015f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2,0);
 8002010:	2100      	movs	r1, #0
 8002012:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002016:	f7ff f905 	bl	8001224 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM2);
 800201a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800201e:	f7ff f8e3 	bl	80011e8 <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 8002022:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002026:	f7ff fb05 	bl	8001634 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 800202a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800202e:	f7ff fb0e 	bl	800164e <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM2_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	04800080 	.word	0x04800080
 8002040:	40010800 	.word	0x40010800
 8002044:	40010c00 	.word	0x40010c00

08002048 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	463b      	mov	r3, r7
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800206c:	2002      	movs	r0, #2
 800206e:	f7ff f86b 	bl	8001148 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002072:	2008      	movs	r0, #8
 8002074:	f7ff f880 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002078:	f243 0330 	movw	r3, #12336	; 0x3030
 800207c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800207e:	2304      	movs	r3, #4
 8002080:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	463b      	mov	r3, r7
 8002084:	4619      	mov	r1, r3
 8002086:	4836      	ldr	r0, [pc, #216]	; (8002160 <MX_TIM3_Init+0x118>)
 8002088:	f000 fe8e 	bl	8002da8 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800208c:	f7fe fc7a 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8002090:	4603      	mov	r3, r0
 8002092:	2200      	movs	r2, #0
 8002094:	2101      	movs	r1, #1
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fcc8 	bl	8000a2c <NVIC_EncodePriority>
 800209c:	4603      	mov	r3, r0
 800209e:	4619      	mov	r1, r3
 80020a0:	201d      	movs	r0, #29
 80020a2:	f7fe fc99 	bl	80009d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80020a6:	201d      	movs	r0, #29
 80020a8:	f7fe fc7a 	bl	80009a0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 80020ac:	f7ff fb94 	bl	80017d8 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 80020b0:	2103      	movs	r1, #3
 80020b2:	482c      	ldr	r0, [pc, #176]	; (8002164 <MX_TIM3_Init+0x11c>)
 80020b4:	f7ff fa7c 	bl	80015b0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80020b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020bc:	2101      	movs	r1, #1
 80020be:	4829      	ldr	r0, [pc, #164]	; (8002164 <MX_TIM3_Init+0x11c>)
 80020c0:	f7ff f942 	bl	8001348 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2101      	movs	r1, #1
 80020c8:	4826      	ldr	r0, [pc, #152]	; (8002164 <MX_TIM3_Init+0x11c>)
 80020ca:	f7ff f987 	bl	80013dc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2101      	movs	r1, #1
 80020d2:	4824      	ldr	r0, [pc, #144]	; (8002164 <MX_TIM3_Init+0x11c>)
 80020d4:	f7ff f9cc 	bl	8001470 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80020d8:	2200      	movs	r2, #0
 80020da:	2101      	movs	r1, #1
 80020dc:	4821      	ldr	r0, [pc, #132]	; (8002164 <MX_TIM3_Init+0x11c>)
 80020de:	f7ff fa11 	bl	8001504 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80020e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020e6:	2110      	movs	r1, #16
 80020e8:	481e      	ldr	r0, [pc, #120]	; (8002164 <MX_TIM3_Init+0x11c>)
 80020ea:	f7ff f92d 	bl	8001348 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2110      	movs	r1, #16
 80020f2:	481c      	ldr	r0, [pc, #112]	; (8002164 <MX_TIM3_Init+0x11c>)
 80020f4:	f7ff f972 	bl	80013dc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2110      	movs	r1, #16
 80020fc:	4819      	ldr	r0, [pc, #100]	; (8002164 <MX_TIM3_Init+0x11c>)
 80020fe:	f7ff f9b7 	bl	8001470 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002102:	2200      	movs	r2, #0
 8002104:	2110      	movs	r1, #16
 8002106:	4817      	ldr	r0, [pc, #92]	; (8002164 <MX_TIM3_Init+0x11c>)
 8002108:	f7ff f9fc 	bl	8001504 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002118:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	480f      	ldr	r0, [pc, #60]	; (8002164 <MX_TIM3_Init+0x11c>)
 8002126:	f001 f933 	bl	8003390 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <MX_TIM3_Init+0x11c>)
 800212c:	f7ff f86b 	bl	8001206 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002130:	2100      	movs	r1, #0
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <MX_TIM3_Init+0x11c>)
 8002134:	f7ff fa4e 	bl	80015d4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002138:	480a      	ldr	r0, [pc, #40]	; (8002164 <MX_TIM3_Init+0x11c>)
 800213a:	f7ff fa5d 	bl	80015f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3,0);
 800213e:	2100      	movs	r1, #0
 8002140:	4808      	ldr	r0, [pc, #32]	; (8002164 <MX_TIM3_Init+0x11c>)
 8002142:	f7ff f86f 	bl	8001224 <LL_TIM_SetCounter>
   LL_TIM_EnableCounter(TIM3);
 8002146:	4807      	ldr	r0, [pc, #28]	; (8002164 <MX_TIM3_Init+0x11c>)
 8002148:	f7ff f84e 	bl	80011e8 <LL_TIM_EnableCounter>
   LL_TIM_ClearFlag_UPDATE(TIM3);
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_TIM3_Init+0x11c>)
 800214e:	f7ff fa71 	bl	8001634 <LL_TIM_ClearFlag_UPDATE>
   LL_TIM_EnableIT_UPDATE(TIM3);
 8002152:	4804      	ldr	r0, [pc, #16]	; (8002164 <MX_TIM3_Init+0x11c>)
 8002154:	f7ff fa7b 	bl	800164e <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40010c00 	.word	0x40010c00
 8002164:	40000400 	.word	0x40000400

08002168 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 800217c:	2004      	movs	r0, #4
 800217e:	f7fe ffe3 	bl	8001148 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002182:	f7fe fbff 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8002186:	4603      	mov	r3, r0
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fc4d 	bl	8000a2c <NVIC_EncodePriority>
 8002192:	4603      	mov	r3, r0
 8002194:	4619      	mov	r1, r3
 8002196:	201e      	movs	r0, #30
 8002198:	f7fe fc1e 	bl	80009d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 800219c:	201e      	movs	r0, #30
 800219e:	f7fe fbff 	bl	80009a0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 36;
 80021aa:	2324      	movs	r3, #36	; 0x24
 80021ac:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4811      	ldr	r0, [pc, #68]	; (80021fc <MX_TIM4_Init+0x94>)
 80021b8:	f001 f8ea 	bl	8003390 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80021bc:	480f      	ldr	r0, [pc, #60]	; (80021fc <MX_TIM4_Init+0x94>)
 80021be:	f7ff f822 	bl	8001206 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80021c2:	2100      	movs	r1, #0
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_TIM4_Init+0x94>)
 80021c6:	f7ff f9df 	bl	8001588 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80021ca:	2100      	movs	r1, #0
 80021cc:	480b      	ldr	r0, [pc, #44]	; (80021fc <MX_TIM4_Init+0x94>)
 80021ce:	f7ff fa01 	bl	80015d4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80021d2:	480a      	ldr	r0, [pc, #40]	; (80021fc <MX_TIM4_Init+0x94>)
 80021d4:	f7ff fa10 	bl	80015f8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM4);
 80021d8:	4808      	ldr	r0, [pc, #32]	; (80021fc <MX_TIM4_Init+0x94>)
 80021da:	f7ff fa38 	bl	800164e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM4,0);
 80021de:	2100      	movs	r1, #0
 80021e0:	4806      	ldr	r0, [pc, #24]	; (80021fc <MX_TIM4_Init+0x94>)
 80021e2:	f7ff f81f 	bl	8001224 <LL_TIM_SetCounter>
    LL_TIM_EnableCounter(TIM4);
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_TIM4_Init+0x94>)
 80021e8:	f7fe fffe 	bl	80011e8 <LL_TIM_EnableCounter>
    LL_TIM_ClearFlag_UPDATE(TIM4);
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <MX_TIM4_Init+0x94>)
 80021ee:	f7ff fa21 	bl	8001634 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM4_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40000800 	.word	0x40000800

08002200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
 8002216:	615a      	str	r2, [r3, #20]
 8002218:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221a:	463b      	mov	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002228:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800222c:	f7fe ffa4 	bl	8001178 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002230:	2008      	movs	r0, #8
 8002232:	f7fe ffa1 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002236:	f244 0340 	movw	r3, #16448	; 0x4040
 800223a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800223c:	2309      	movs	r3, #9
 800223e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	463b      	mov	r3, r7
 800224a:	4619      	mov	r1, r3
 800224c:	481f      	ldr	r0, [pc, #124]	; (80022cc <MX_USART1_UART_Init+0xcc>)
 800224e:	f000 fdab 	bl	8002da8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002252:	f248 0380 	movw	r3, #32896	; 0x8080
 8002256:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002258:	2304      	movs	r3, #4
 800225a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	481a      	ldr	r0, [pc, #104]	; (80022cc <MX_USART1_UART_Init+0xcc>)
 8002262:	f000 fda1 	bl	8002da8 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8002266:	f7ff fa97 	bl	8001798 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800226a:	f7fe fb8b 	bl	8000984 <__NVIC_GetPriorityGrouping>
 800226e:	4603      	mov	r3, r0
 8002270:	2200      	movs	r2, #0
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fbd9 	bl	8000a2c <NVIC_EncodePriority>
 800227a:	4603      	mov	r3, r0
 800227c:	4619      	mov	r1, r3
 800227e:	2025      	movs	r0, #37	; 0x25
 8002280:	f7fe fbaa 	bl	80009d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002284:	2025      	movs	r0, #37	; 0x25
 8002286:	f7fe fb8b 	bl	80009a0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800228a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800228e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002294:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800229e:	230c      	movs	r3, #12
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4807      	ldr	r0, [pc, #28]	; (80022d0 <MX_USART1_UART_Init+0xd0>)
 80022b2:	f001 fb6d 	bl	8003990 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <MX_USART1_UART_Init+0xd0>)
 80022b8:	f7ff f9e7 	bl	800168a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80022bc:	4804      	ldr	r0, [pc, #16]	; (80022d0 <MX_USART1_UART_Init+0xd0>)
 80022be:	f7ff f9d5 	bl	800166c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	3730      	adds	r7, #48	; 0x30
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40010c00 	.word	0x40010c00
 80022d0:	40013800 	.word	0x40013800

080022d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80022d8:	2001      	movs	r0, #1
 80022da:	f7fe ff1d 	bl	8001118 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80022de:	f7fe fb51 	bl	8000984 <__NVIC_GetPriorityGrouping>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2200      	movs	r2, #0
 80022e6:	2101      	movs	r1, #1
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fb9f 	bl	8000a2c <NVIC_EncodePriority>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4619      	mov	r1, r3
 80022f2:	200b      	movs	r0, #11
 80022f4:	f7fe fb70 	bl	80009d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022f8:	200b      	movs	r0, #11
 80022fa:	f7fe fb51 	bl	80009a0 <__NVIC_EnableIRQ>

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
 8002320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8002322:	2010      	movs	r0, #16
 8002324:	f7fe ff28 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8002328:	2020      	movs	r0, #32
 800232a:	f7fe ff25 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800232e:	2004      	movs	r0, #4
 8002330:	f7fe ff22 	bl	8001178 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002334:	2008      	movs	r0, #8
 8002336:	f7fe ff1f 	bl	8001178 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800233a:	494c      	ldr	r1, [pc, #304]	; (800246c <MX_GPIO_Init+0x168>)
 800233c:	484c      	ldr	r0, [pc, #304]	; (8002470 <MX_GPIO_Init+0x16c>)
 800233e:	f7ff fa0b 	bl	8001758 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8002342:	494c      	ldr	r1, [pc, #304]	; (8002474 <MX_GPIO_Init+0x170>)
 8002344:	484c      	ldr	r0, [pc, #304]	; (8002478 <MX_GPIO_Init+0x174>)
 8002346:	f7ff fa07 	bl	8001758 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 800234a:	494c      	ldr	r1, [pc, #304]	; (800247c <MX_GPIO_Init+0x178>)
 800234c:	484c      	ldr	r0, [pc, #304]	; (8002480 <MX_GPIO_Init+0x17c>)
 800234e:	f7ff fa03 	bl	8001758 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <MX_GPIO_Init+0x168>)
 8002354:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002356:	2301      	movs	r3, #1
 8002358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800235a:	2302      	movs	r3, #2
 800235c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	4619      	mov	r1, r3
 8002366:	4842      	ldr	r0, [pc, #264]	; (8002470 <MX_GPIO_Init+0x16c>)
 8002368:	f000 fd1e 	bl	8002da8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <MX_GPIO_Init+0x170>)
 800236e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002370:	2301      	movs	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4619      	mov	r1, r3
 8002380:	483d      	ldr	r0, [pc, #244]	; (8002478 <MX_GPIO_Init+0x174>)
 8002382:	f000 fd11 	bl	8002da8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <MX_GPIO_Init+0x180>)
 8002388:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800238a:	2301      	movs	r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800238e:	2302      	movs	r3, #2
 8002390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4839      	ldr	r0, [pc, #228]	; (8002480 <MX_GPIO_Init+0x17c>)
 800239c:	f000 fd04 	bl	8002da8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <MX_GPIO_Init+0x184>)
 80023a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023a4:	2301      	movs	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	4619      	mov	r1, r3
 80023b4:	4832      	ldr	r0, [pc, #200]	; (8002480 <MX_GPIO_Init+0x17c>)
 80023b6:	f000 fcf7 	bl	8002da8 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 80023ba:	4934      	ldr	r1, [pc, #208]	; (800248c <MX_GPIO_Init+0x188>)
 80023bc:	2001      	movs	r0, #1
 80023be:	f7ff fa33 	bl	8001828 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 80023c2:	4933      	ldr	r1, [pc, #204]	; (8002490 <MX_GPIO_Init+0x18c>)
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff fa2f 	bl	8001828 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 80023ca:	4932      	ldr	r1, [pc, #200]	; (8002494 <MX_GPIO_Init+0x190>)
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7ff fa2b 	bl	8001828 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80023d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80023d8:	2301      	movs	r3, #1
 80023da:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80023dc:	2300      	movs	r3, #0
 80023de:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80023e0:	2301      	movs	r3, #1
 80023e2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80023e4:	f107 0318 	add.w	r3, r7, #24
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fba9 	bl	8002b40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80023ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80023f4:	2301      	movs	r3, #1
 80023f6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80023f8:	2300      	movs	r3, #0
 80023fa:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80023fc:	2301      	movs	r3, #1
 80023fe:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002400:	f107 0318 	add.w	r3, r7, #24
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fb9b 	bl	8002b40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800240a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800240e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002410:	2301      	movs	r3, #1
 8002412:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002414:	2300      	movs	r3, #0
 8002416:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002418:	2301      	movs	r3, #1
 800241a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800241c:	f107 0318 	add.w	r3, r7, #24
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fb8d 	bl	8002b40 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8002426:	2204      	movs	r2, #4
 8002428:	491b      	ldr	r1, [pc, #108]	; (8002498 <MX_GPIO_Init+0x194>)
 800242a:	4813      	ldr	r0, [pc, #76]	; (8002478 <MX_GPIO_Init+0x174>)
 800242c:	f7ff f962 	bl	80016f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8002430:	2204      	movs	r2, #4
 8002432:	490e      	ldr	r1, [pc, #56]	; (800246c <MX_GPIO_Init+0x168>)
 8002434:	4810      	ldr	r0, [pc, #64]	; (8002478 <MX_GPIO_Init+0x174>)
 8002436:	f7ff f95d 	bl	80016f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 800243a:	2204      	movs	r2, #4
 800243c:	4917      	ldr	r1, [pc, #92]	; (800249c <MX_GPIO_Init+0x198>)
 800243e:	480e      	ldr	r0, [pc, #56]	; (8002478 <MX_GPIO_Init+0x174>)
 8002440:	f7ff f958 	bl	80016f4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002444:	f7fe fa9e 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8002448:	4603      	mov	r3, r0
 800244a:	2200      	movs	r2, #0
 800244c:	2101      	movs	r1, #1
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe faec 	bl	8000a2c <NVIC_EncodePriority>
 8002454:	4603      	mov	r3, r0
 8002456:	4619      	mov	r1, r3
 8002458:	2028      	movs	r0, #40	; 0x28
 800245a:	f7fe fabd 	bl	80009d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800245e:	2028      	movs	r0, #40	; 0x28
 8002460:	f7fe fa9e 	bl	80009a0 <__NVIC_EnableIRQ>

}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	04200020 	.word	0x04200020
 8002470:	40011000 	.word	0x40011000
 8002474:	04800080 	.word	0x04800080
 8002478:	40010c00 	.word	0x40010c00
 800247c:	040a000a 	.word	0x040a000a
 8002480:	40010800 	.word	0x40010800
 8002484:	04020002 	.word	0x04020002
 8002488:	04080008 	.word	0x04080008
 800248c:	000f0003 	.word	0x000f0003
 8002490:	00f00003 	.word	0x00f00003
 8002494:	0f000003 	.word	0x0f000003
 8002498:	04100010 	.word	0x04100010
 800249c:	04400040 	.word	0x04400040

080024a0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	bf0c      	ite	eq
 80024b6:	2301      	moveq	r3, #1
 80024b8:	2300      	movne	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40010400 	.word	0x40010400

080024cc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80024d4:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <LL_EXTI_ClearFlag_0_31+0x18>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6153      	str	r3, [r2, #20]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40010400 	.word	0x40010400

080024e8 <LL_TIM_ClearFlag_UPDATE>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f06f 0201 	mvn.w	r2, #1
 80024f6:	611a      	str	r2, [r3, #16]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <LL_GPIO_SetOutputPin>:
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	b29a      	uxth	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	611a      	str	r2, [r3, #16]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <LL_GPIO_ResetOutputPin>:
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	615a      	str	r2, [r3, #20]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SysTick_Handler+0x18>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <SysTick_Handler+0x18>)
 8002594:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000008c 	.word	0x2000008c

080025a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 80025b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80025b8:	f7ff ff96 	bl	80024e8 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <TIM3_IRQHandler+0x10>)
 80025c6:	f7ff ff8f 	bl	80024e8 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40000400 	.word	0x40000400

080025d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_11);
	ServoCountValue +=1;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <TIM4_IRQHandler+0x4c>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	3301      	adds	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <TIM4_IRQHandler+0x4c>)
 80025e2:	801a      	strh	r2, [r3, #0]
	if(ServoCountValue < ServoCompareValue)
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <TIM4_IRQHandler+0x4c>)
 80025e6:	881a      	ldrh	r2, [r3, #0]
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <TIM4_IRQHandler+0x50>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d204      	bcs.n	80025fa <TIM4_IRQHandler+0x26>
	{
		LL_GPIO_SetOutputPin(GPIOA,LL_GPIO_PIN_11);
 80025f0:	490d      	ldr	r1, [pc, #52]	; (8002628 <TIM4_IRQHandler+0x54>)
 80025f2:	480e      	ldr	r0, [pc, #56]	; (800262c <TIM4_IRQHandler+0x58>)
 80025f4:	f7ff ff85 	bl	8002502 <LL_GPIO_SetOutputPin>
 80025f8:	e003      	b.n	8002602 <TIM4_IRQHandler+0x2e>
	}
	else
	{
		LL_GPIO_ResetOutputPin(GPIOA,LL_GPIO_PIN_11);
 80025fa:	490b      	ldr	r1, [pc, #44]	; (8002628 <TIM4_IRQHandler+0x54>)
 80025fc:	480b      	ldr	r0, [pc, #44]	; (800262c <TIM4_IRQHandler+0x58>)
 80025fe:	f7ff ff8f 	bl	8002520 <LL_GPIO_ResetOutputPin>
	}
	if(ServoCountValue >= ServoReloadValue) ServoCountValue = 0;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <TIM4_IRQHandler+0x4c>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	f242 720f 	movw	r2, #9999	; 0x270f
 800260a:	4293      	cmp	r3, r2
 800260c:	d902      	bls.n	8002614 <TIM4_IRQHandler+0x40>
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <TIM4_IRQHandler+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	801a      	strh	r2, [r3, #0]
//	printf("ServoCountValue %d", ServoCountValue);
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */
	LL_TIM_ClearFlag_UPDATE(TIM4);
 8002614:	4806      	ldr	r0, [pc, #24]	; (8002630 <TIM4_IRQHandler+0x5c>)
 8002616:	f7ff ff67 	bl	80024e8 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM4_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000000 	.word	0x20000000
 8002624:	20000002 	.word	0x20000002
 8002628:	04080008 	.word	0x04080008
 800262c:	40010800 	.word	0x40010800
 8002630:	40000800 	.word	0x40000800

08002634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8002644:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002648:	f7ff ff2a 	bl	80024a0 <LL_EXTI_IsActiveFlag_0_31>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8002652:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002656:	f7ff ff39 	bl	80024cc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <EXTI15_10_IRQHandler+0x50>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8002660:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002664:	f7ff ff1c 	bl	80024a0 <LL_EXTI_IsActiveFlag_0_31>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <EXTI15_10_IRQHandler+0x36>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 800266e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002672:	f7ff ff2b 	bl	80024cc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8002676:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800267a:	f7ff ff11 	bl	80024a0 <LL_EXTI_IsActiveFlag_0_31>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <EXTI15_10_IRQHandler+0x4c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8002684:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002688:	f7ff ff20 	bl	80024cc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000088 	.word	0x20000088

08002694 <SetServoCompare>:

/* USER CODE BEGIN 1 */
void SetServoCompare(float ServoNewVal)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

		ServoCompareValue = ServoNewVal;
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7fe f829 	bl	80006f4 <__aeabi_f2uiz>
 80026a2:	4603      	mov	r3, r0
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <SetServoCompare+0x20>)
 80026a8:	801a      	strh	r2, [r3, #0]
//		ServoCountValue = 0;


}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000002 	.word	0x20000002

080026b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	e00a      	b.n	80026e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026ca:	f3af 8000 	nop.w
 80026ce:	4601      	mov	r1, r0
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	60ba      	str	r2, [r7, #8]
 80026d6:	b2ca      	uxtb	r2, r1
 80026d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dbf0      	blt.n	80026ca <_read+0x12>
	}

return len;
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e009      	b.n	8002718 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	60ba      	str	r2, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f8b9 	bl	8001884 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf1      	blt.n	8002704 <_write+0x12>
	}
	return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_close>:

int _close(int file)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
	return -1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002750:	605a      	str	r2, [r3, #4]
	return 0;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
	return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
	...

08002778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <_sbrk+0x5c>)
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <_sbrk+0x60>)
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800278c:	4b13      	ldr	r3, [pc, #76]	; (80027dc <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <_sbrk+0x64>)
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <_sbrk+0x68>)
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <_sbrk+0x64>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d207      	bcs.n	80027b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a8:	f001 f988 	bl	8003abc <__errno>
 80027ac:	4602      	mov	r2, r0
 80027ae:	230c      	movs	r3, #12
 80027b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
 80027b6:	e009      	b.n	80027cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <_sbrk+0x64>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a05      	ldr	r2, [pc, #20]	; (80027dc <_sbrk+0x64>)
 80027c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20005000 	.word	0x20005000
 80027d8:	00000400 	.word	0x00000400
 80027dc:	20000090 	.word	0x20000090
 80027e0:	200000b0 	.word	0x200000b0

080027e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <SystemInit+0x5c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <SystemInit+0x5c>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <SystemInit+0x5c>)
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	4911      	ldr	r1, [pc, #68]	; (8002840 <SystemInit+0x5c>)
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <SystemInit+0x60>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <SystemInit+0x5c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <SystemInit+0x5c>)
 8002806:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <SystemInit+0x5c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <SystemInit+0x5c>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <SystemInit+0x5c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a07      	ldr	r2, [pc, #28]	; (8002840 <SystemInit+0x5c>)
 8002822:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002826:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SystemInit+0x5c>)
 800282a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800282e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <SystemInit+0x64>)
 8002832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002836:	609a      	str	r2, [r3, #8]
#endif 
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40021000 	.word	0x40021000
 8002844:	f8ff0000 	.word	0xf8ff0000
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800284c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800284e:	e003      	b.n	8002858 <LoopCopyDataInit>

08002850 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002852:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002854:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002856:	3104      	adds	r1, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002858:	480a      	ldr	r0, [pc, #40]	; (8002884 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800285c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800285e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002860:	d3f6      	bcc.n	8002850 <CopyDataInit>
  ldr r2, =_sbss
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002864:	e002      	b.n	800286c <LoopFillZerobss>

08002866 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002868:	f842 3b04 	str.w	r3, [r2], #4

0800286c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800286c:	4b08      	ldr	r3, [pc, #32]	; (8002890 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800286e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002870:	d3f9      	bcc.n	8002866 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002872:	f7ff ffb7 	bl	80027e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002876:	f001 f927 	bl	8003ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800287a:	f7ff f81b 	bl	80018b4 <main>
  bx lr
 800287e:	4770      	bx	lr
  ldr r3, =_sidata
 8002880:	08004334 	.word	0x08004334
  ldr r0, =_sdata
 8002884:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002888:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 800288c:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8002890:	200000b0 	.word	0x200000b0

08002894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC1_2_IRQHandler>

08002896 <LL_ADC_REG_SetSequencerLength>:
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_IsEnabled>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	bf0c      	ite	eq
 80028ce:	2301      	moveq	r3, #1
 80028d0:	2300      	movne	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
	...

080028e0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80028ee:	4813      	ldr	r0, [pc, #76]	; (800293c <LL_ADC_CommonInit+0x5c>)
 80028f0:	f7ff ffe3 	bl	80028ba <LL_ADC_IsEnabled>
 80028f4:	4604      	mov	r4, r0
 80028f6:	4812      	ldr	r0, [pc, #72]	; (8002940 <LL_ADC_CommonInit+0x60>)
 80028f8:	f7ff ffdf 	bl	80028ba <LL_ADC_IsEnabled>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4323      	orrs	r3, r4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d114      	bne.n	800292e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e008      	b.n	8002932 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	e001      	b.n	8002932 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002932:	7bfb      	ldrb	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}
 800293c:	40012400 	.word	0x40012400
 8002940:	40012800 	.word	0x40012800

08002944 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffb1 	bl	80028ba <LL_ADC_IsEnabled>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d112      	bne.n	8002984 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	e001      	b.n	8002988 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff8a 	bl	80028ba <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d131      	bne.n	8002a10 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00c      	beq.n	80029ce <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	e008      	b.n	80029e0 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80029e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	6811      	ldr	r1, [r2, #0]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	68d2      	ldr	r2, [r2, #12]
 80029f4:	4311      	orrs	r1, r2
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6912      	ldr	r2, [r2, #16]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4619      	mov	r1, r3
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff44 	bl	8002896 <LL_ADC_REG_SetSequencerLength>
 8002a0e:	e001      	b.n	8002a14 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <LL_EXTI_EnableIT_0_31>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4904      	ldr	r1, [pc, #16]	; (8002a40 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40010400 	.word	0x40010400

08002a44 <LL_EXTI_DisableIT_0_31>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <LL_EXTI_DisableIT_0_31+0x20>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	4903      	ldr	r1, [pc, #12]	; (8002a64 <LL_EXTI_DisableIT_0_31+0x20>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40010400 	.word	0x40010400

08002a68 <LL_EXTI_EnableEvent_0_31>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4904      	ldr	r1, [pc, #16]	; (8002a88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010400 	.word	0x40010400

08002a8c <LL_EXTI_DisableEvent_0_31>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <LL_EXTI_DisableEvent_0_31+0x20>)
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	4903      	ldr	r1, [pc, #12]	; (8002aac <LL_EXTI_DisableEvent_0_31+0x20>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40010400 	.word	0x40010400

08002ab0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40010400 	.word	0x40010400

08002af8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	4904      	ldr	r1, [pc, #16]	; (8002b18 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60cb      	str	r3, [r1, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40010400 	.word	0x40010400

08002b1c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002b24:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	4903      	ldr	r1, [pc, #12]	; (8002b3c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	60cb      	str	r3, [r1, #12]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	40010400 	.word	0x40010400

08002b40 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	791b      	ldrb	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d060      	beq.n	8002c16 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d067      	beq.n	8002c2c <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	795b      	ldrb	r3, [r3, #5]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d00e      	beq.n	8002b82 <LL_EXTI_Init+0x42>
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d017      	beq.n	8002b98 <LL_EXTI_Init+0x58>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d120      	bne.n	8002bae <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff8b 	bl	8002a8c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff50 	bl	8002a20 <LL_EXTI_EnableIT_0_31>
          break;
 8002b80:	e018      	b.n	8002bb4 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff5c 	bl	8002a44 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff69 	bl	8002a68 <LL_EXTI_EnableEvent_0_31>
          break;
 8002b96:	e00d      	b.n	8002bb4 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff3f 	bl	8002a20 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff5e 	bl	8002a68 <LL_EXTI_EnableEvent_0_31>
          break;
 8002bac:	e002      	b.n	8002bb4 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002bb2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	799b      	ldrb	r3, [r3, #6]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d037      	beq.n	8002c2c <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	799b      	ldrb	r3, [r3, #6]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d00e      	beq.n	8002be2 <LL_EXTI_Init+0xa2>
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d017      	beq.n	8002bf8 <LL_EXTI_Init+0xb8>
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d120      	bne.n	8002c0e <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ffa3 	bl	8002b1c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff68 	bl	8002ab0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002be0:	e025      	b.n	8002c2e <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff74 	bl	8002ad4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff81 	bl	8002af8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002bf6:	e01a      	b.n	8002c2e <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff57 	bl	8002ab0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ff76 	bl	8002af8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002c0c:	e00f      	b.n	8002c2e <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
            break;
 8002c12:	bf00      	nop
 8002c14:	e00b      	b.n	8002c2e <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff12 	bl	8002a44 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff31 	bl	8002a8c <LL_EXTI_DisableEvent_0_31>
 8002c2a:	e000      	b.n	8002c2e <LL_EXTI_Init+0xee>
      }
 8002c2c:	bf00      	nop
  }
  return status;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <LL_GPIO_SetPinMode>:
{
 8002c38:	b490      	push	{r4, r7}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	0e1b      	lsrs	r3, r3, #24
 8002c4c:	4413      	add	r3, r2
 8002c4e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002c50:	6822      	ldr	r2, [r4, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	fa93 f3a3 	rbit	r3, r3
 8002c5c:	613b      	str	r3, [r7, #16]
  return result;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	fab3 f383 	clz	r3, r3
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	210f      	movs	r1, #15
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	401a      	ands	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	61bb      	str	r3, [r7, #24]
  return result;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	6023      	str	r3, [r4, #0]
}
 8002c92:	bf00      	nop
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc90      	pop	{r4, r7}
 8002c9a:	4770      	bx	lr

08002c9c <LL_GPIO_SetPinSpeed>:
{
 8002c9c:	b490      	push	{r4, r7}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0e1b      	lsrs	r3, r3, #24
 8002cb0:	4413      	add	r3, r2
 8002cb2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	613b      	str	r3, [r7, #16]
  return result;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	2103      	movs	r1, #3
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	6023      	str	r3, [r4, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc90      	pop	{r4, r7}
 8002cfe:	4770      	bx	lr

08002d00 <LL_GPIO_SetPinOutputType>:
{
 8002d00:	b490      	push	{r4, r7}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	0e1b      	lsrs	r3, r3, #24
 8002d14:	4413      	add	r3, r2
 8002d16:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	613b      	str	r3, [r7, #16]
  return result;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	2104      	movs	r1, #4
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	61bb      	str	r3, [r7, #24]
  return result;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	6023      	str	r3, [r4, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc90      	pop	{r4, r7}
 8002d62:	4770      	bx	lr

08002d64 <LL_GPIO_SetPinPull>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	613b      	str	r3, [r7, #16]
  return result;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4619      	mov	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	408b      	lsls	r3, r1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	60da      	str	r2, [r3, #12]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr

08002da8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	021b      	lsls	r3, r3, #8
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	60fb      	str	r3, [r7, #12]
  return result;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002dd2:	e040      	b.n	8002e56 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d036      	beq.n	8002e50 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	2b07      	cmp	r3, #7
 8002de6:	d806      	bhi.n	8002df6 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002de8:	f240 1201 	movw	r2, #257	; 0x101
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	e008      	b.n	8002e08 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3b08      	subs	r3, #8
 8002dfa:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e06:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	69b9      	ldr	r1, [r7, #24]
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff11 	bl	8002c38 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	69b9      	ldr	r1, [r7, #24]
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffa0 	bl	8002d64 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d003      	beq.n	8002e34 <LL_GPIO_Init+0x8c>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d10d      	bne.n	8002e50 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff2d 	bl	8002c9c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	461a      	mov	r2, r3
 8002e48:	69b9      	ldr	r1, [r7, #24]
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff58 	bl	8002d00 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3301      	adds	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1b8      	bne.n	8002dd4 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <LL_I2C_Enable>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	601a      	str	r2, [r3, #0]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <LL_I2C_Disable>:
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 0201 	bic.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <LL_I2C_SetOwnAddress1>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ebc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002ed8:	b490      	push	{r4, r7}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8002ee6:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8002ee8:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4a3f      	ldr	r2, [pc, #252]	; (8002fec <LL_I2C_ConfigSpeed+0x114>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002efc:	ea44 0203 	orr.w	r2, r4, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4938      	ldr	r1, [pc, #224]	; (8002ff0 <LL_I2C_ConfigSpeed+0x118>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d801      	bhi.n	8002f18 <LL_I2C_ConfigSpeed+0x40>
 8002f14:	1c63      	adds	r3, r4, #1
 8002f16:	e008      	b.n	8002f2a <LL_I2C_ConfigSpeed+0x52>
 8002f18:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002f1c:	fb03 f304 	mul.w	r3, r3, r4
 8002f20:	4934      	ldr	r1, [pc, #208]	; (8002ff4 <LL_I2C_ConfigSpeed+0x11c>)
 8002f22:	fba1 1303 	umull	r1, r3, r1, r3
 8002f26:	099b      	lsrs	r3, r3, #6
 8002f28:	3301      	adds	r3, #1
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <LL_I2C_ConfigSpeed+0x118>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d939      	bls.n	8002fac <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d117      	bne.n	8002f6e <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f66:	e01d      	b.n	8002fa4 <LL_I2C_ConfigSpeed+0xcc>
 8002f68:	f248 0301 	movw	r3, #32769	; 0x8001
 8002f6c:	e01a      	b.n	8002fa4 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	009a      	lsls	r2, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009a      	lsls	r2, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9e:	e001      	b.n	8002fa4 <LL_I2C_ConfigSpeed+0xcc>
 8002fa0:	f248 0301 	movw	r3, #32769	; 0x8001
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	ea43 0402 	orr.w	r4, r3, r2
 8002faa:	e010      	b.n	8002fce <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d905      	bls.n	8002fca <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	e000      	b.n	8002fcc <LL_I2C_ConfigSpeed+0xf4>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002fd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fda:	ea44 0203 	orr.w	r2, r4, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	61da      	str	r2, [r3, #28]
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc90      	pop	{r4, r7}
 8002fea:	4770      	bx	lr
 8002fec:	431bde83 	.word	0x431bde83
 8002ff0:	000186a0 	.word	0x000186a0
 8002ff4:	10624dd3 	.word	0x10624dd3

08002ff8 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 021a 	bic.w	r2, r3, #26
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff1d 	bl	8002e8a <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f87b 	bl	8003150 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800305a:	6939      	ldr	r1, [r7, #16]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff37 	bl	8002ed8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68d9      	ldr	r1, [r3, #12]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	461a      	mov	r2, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ff17 	bl	8002ea8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ffb9 	bl	8002ff8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff fef0 	bl	8002e6c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffc2 	bl	800301c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <LL_RCC_GetSysClkSource>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <LL_RCC_GetSysClkSource+0x14>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 030c 	and.w	r3, r3, #12
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40021000 	.word	0x40021000

080030bc <LL_RCC_GetAHBPrescaler>:
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <LL_RCC_GetAHBPrescaler+0x14>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	40021000 	.word	0x40021000

080030d4 <LL_RCC_GetAPB1Prescaler>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	40021000 	.word	0x40021000

080030ec <LL_RCC_GetAPB2Prescaler>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <LL_RCC_GetAPB2Prescaler+0x14>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	40021000 	.word	0x40021000

08003104 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <LL_RCC_PLL_GetMainSource+0x14>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	40021000 	.word	0x40021000

0800311c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40021000 	.word	0x40021000

08003134 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <LL_RCC_PLL_GetPrediv+0x18>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c5b      	lsrs	r3, r3, #17
 800313e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003158:	f000 f820 	bl	800319c <RCC_GetSystemClockFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f83a 	bl	80031e0 <RCC_GetHCLKClockFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f848 	bl	800320c <RCC_GetPCLK1ClockFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f854 	bl	8003234 <RCC_GetPCLK2ClockFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60da      	str	r2, [r3, #12]
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80031a6:	f7ff ff7d 	bl	80030a4 <LL_RCC_GetSysClkSource>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d006      	beq.n	80031be <RCC_GetSystemClockFreq+0x22>
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d007      	beq.n	80031c4 <RCC_GetSystemClockFreq+0x28>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <RCC_GetSystemClockFreq+0x40>)
 80031ba:	607b      	str	r3, [r7, #4]
      break;
 80031bc:	e009      	b.n	80031d2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <RCC_GetSystemClockFreq+0x40>)
 80031c0:	607b      	str	r3, [r7, #4]
      break;
 80031c2:	e006      	b.n	80031d2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80031c4:	f000 f84a 	bl	800325c <RCC_PLL_GetFreqDomain_SYS>
 80031c8:	6078      	str	r0, [r7, #4]
      break;
 80031ca:	e002      	b.n	80031d2 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <RCC_GetSystemClockFreq+0x40>)
 80031ce:	607b      	str	r3, [r7, #4]
      break;
 80031d0:	bf00      	nop
  }

  return frequency;
 80031d2:	687b      	ldr	r3, [r7, #4]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	007a1200 	.word	0x007a1200

080031e0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80031e8:	f7ff ff68 	bl	80030bc <LL_RCC_GetAHBPrescaler>
 80031ec:	4603      	mov	r3, r0
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <RCC_GetHCLKClockFreq+0x28>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	461a      	mov	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	40d3      	lsrs	r3, r2
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	080042b0 	.word	0x080042b0

0800320c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003214:	f7ff ff5e 	bl	80030d4 <LL_RCC_GetAPB1Prescaler>
 8003218:	4603      	mov	r3, r0
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <RCC_GetPCLK1ClockFreq+0x24>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	40d3      	lsrs	r3, r2
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	080042c0 	.word	0x080042c0

08003234 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800323c:	f7ff ff56 	bl	80030ec <LL_RCC_GetAPB2Prescaler>
 8003240:	4603      	mov	r3, r0
 8003242:	0adb      	lsrs	r3, r3, #11
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <RCC_GetPCLK2ClockFreq+0x24>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	40d3      	lsrs	r3, r2
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	080042c0 	.word	0x080042c0

0800325c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	2300      	movs	r3, #0
 8003268:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800326a:	f7ff ff4b 	bl	8003104 <LL_RCC_PLL_GetMainSource>
 800326e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d003      	beq.n	8003284 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800327c:	e00b      	b.n	8003296 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003280:	607b      	str	r3, [r7, #4]
      break;
 8003282:	e00b      	b.n	800329c <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003284:	f7ff ff56 	bl	8003134 <LL_RCC_PLL_GetPrediv>
 8003288:	4603      	mov	r3, r0
 800328a:	3301      	adds	r3, #1
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003292:	607b      	str	r3, [r7, #4]
      break;
 8003294:	e002      	b.n	800329c <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003298:	607b      	str	r3, [r7, #4]
      break;
 800329a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800329c:	f7ff ff3e 	bl	800311c <LL_RCC_PLL_GetMultiplicator>
 80032a0:	4603      	mov	r3, r0
 80032a2:	0c9b      	lsrs	r3, r3, #18
 80032a4:	3302      	adds	r3, #2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	003d0900 	.word	0x003d0900
 80032b8:	007a1200 	.word	0x007a1200

080032bc <LL_TIM_SetPrescaler>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <LL_TIM_SetAutoReload>:
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <LL_TIM_SetRepetitionCounter>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <LL_TIM_OC_SetCompareCH1>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	635a      	str	r2, [r3, #52]	; 0x34
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <LL_TIM_OC_SetCompareCH2>:
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <LL_TIM_OC_SetCompareCH3>:
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <LL_TIM_OC_SetCompareCH4>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	615a      	str	r2, [r3, #20]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a27      	ldr	r2, [pc, #156]	; (8003440 <LL_TIM_Init+0xb0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <LL_TIM_Init+0x30>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ae:	d007      	beq.n	80033c0 <LL_TIM_Init+0x30>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a24      	ldr	r2, [pc, #144]	; (8003444 <LL_TIM_Init+0xb4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <LL_TIM_Init+0x30>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a23      	ldr	r2, [pc, #140]	; (8003448 <LL_TIM_Init+0xb8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d106      	bne.n	80033ce <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <LL_TIM_Init+0xb0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00b      	beq.n	80033ee <LL_TIM_Init+0x5e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d007      	beq.n	80033ee <LL_TIM_Init+0x5e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <LL_TIM_Init+0xb4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <LL_TIM_Init+0x5e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a17      	ldr	r2, [pc, #92]	; (8003448 <LL_TIM_Init+0xb8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d106      	bne.n	80033fc <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4619      	mov	r1, r3
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff64 	bl	80032d6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ff51 	bl	80032bc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a08      	ldr	r2, [pc, #32]	; (8003440 <LL_TIM_Init+0xb0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d105      	bne.n	800342e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	7c1b      	ldrb	r3, [r3, #16]
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff61 	bl	80032f0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ff9f 	bl	8003372 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800

0800344c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b10      	cmp	r3, #16
 8003460:	d012      	beq.n	8003488 <LL_TIM_OC_Init+0x3c>
 8003462:	2b10      	cmp	r3, #16
 8003464:	d802      	bhi.n	800346c <LL_TIM_OC_Init+0x20>
 8003466:	2b01      	cmp	r3, #1
 8003468:	d007      	beq.n	800347a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800346a:	e022      	b.n	80034b2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800346c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003470:	d011      	beq.n	8003496 <LL_TIM_OC_Init+0x4a>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003476:	d015      	beq.n	80034a4 <LL_TIM_OC_Init+0x58>
      break;
 8003478:	e01b      	b.n	80034b2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f865 	bl	800354c <OC1Config>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]
      break;
 8003486:	e014      	b.n	80034b2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f8c4 	bl	8003618 <OC2Config>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]
      break;
 8003494:	e00d      	b.n	80034b2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f927 	bl	80036ec <OC3Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]
      break;
 80034a2:	e006      	b.n	80034b2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f98a 	bl	80037c0 <OC4Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	75fb      	strb	r3, [r7, #23]
      break;
 80034b0:	bf00      	nop
  }

  return result;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	7b12      	ldrb	r2, [r2, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	89d2      	ldrh	r2, [r2, #14]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f023 0201 	bic.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f023 0202 	bic.w	r2, r3, #2
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <OC1Config+0xc8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d11e      	bne.n	80035ec <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 0208 	bic.w	r2, r3, #8
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0204 	bic.w	r2, r3, #4
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fe83 	bl	800330a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40012c00 	.word	0x40012c00

08003618 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0210 	bic.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0220 	bic.w	r2, r3, #32
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0210 	bic.w	r2, r3, #16
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <OC2Config+0xd0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d11f      	bne.n	80036c0 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	019b      	lsls	r3, r3, #6
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	019b      	lsls	r3, r3, #6
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fe26 	bl	8003324 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40012c00 	.word	0x40012c00

080036ec <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1b      	ldr	r2, [pc, #108]	; (80037bc <OC3Config+0xd0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d11f      	bne.n	8003792 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	029b      	lsls	r3, r3, #10
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	015b      	lsls	r3, r3, #5
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fdca 	bl	800333e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40012c00 	.word	0x40012c00

080037c0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	031b      	lsls	r3, r3, #12
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	031b      	lsls	r3, r3, #12
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0f      	ldr	r2, [pc, #60]	; (8003860 <OC4Config+0xa0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d107      	bne.n	8003838 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	019b      	lsls	r3, r3, #6
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fd84 	bl	8003358 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40012c00 	.word	0x40012c00

08003864 <LL_USART_IsEnabled>:
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <LL_USART_SetStopBitsLength>:
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	611a      	str	r2, [r3, #16]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <LL_USART_SetHWFlowCtrl>:
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	615a      	str	r2, [r3, #20]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
	...

080038d4 <LL_USART_SetBaudRate>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009a      	lsls	r2, r3, #2
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	4a25      	ldr	r2, [pc, #148]	; (800398c <LL_USART_SetBaudRate+0xb8>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	b299      	uxth	r1, r3
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009a      	lsls	r2, r3, #2
 800390c:	441a      	add	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	fbb2 f2f3 	udiv	r2, r2, r3
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <LL_USART_SetBaudRate+0xb8>)
 8003918:	fba3 0302 	umull	r0, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2064      	movs	r0, #100	; 0x64
 8003920:	fb00 f303 	mul.w	r3, r0, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <LL_USART_SetBaudRate+0xb8>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	b29b      	uxth	r3, r3
 8003934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003938:	b29b      	uxth	r3, r3
 800393a:	440b      	add	r3, r1
 800393c:	b299      	uxth	r1, r3
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	009a      	lsls	r2, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <LL_USART_SetBaudRate+0xb8>)
 8003954:	fba3 0302 	umull	r0, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	2064      	movs	r0, #100	; 0x64
 800395c:	fb00 f303 	mul.w	r3, r0, r3
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	3332      	adds	r3, #50	; 0x32
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <LL_USART_SetBaudRate+0xb8>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	b29b      	uxth	r3, r3
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	b29b      	uxth	r3, r3
 8003976:	440b      	add	r3, r1
 8003978:	b29b      	uxth	r3, r3
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	51eb851f 	.word	0x51eb851f

08003990 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ff5e 	bl	8003864 <LL_USART_IsEnabled>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d145      	bne.n	8003a3a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039b6:	f023 030c 	bic.w	r3, r3, #12
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	6851      	ldr	r1, [r2, #4]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	68d2      	ldr	r2, [r2, #12]
 80039c2:	4311      	orrs	r1, r2
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	6912      	ldr	r2, [r2, #16]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ff57 	bl	800388a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ff63 	bl	80038ae <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fbaf 	bl	8003150 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a13      	ldr	r2, [pc, #76]	; (8003a44 <LL_USART_Init+0xb4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d102      	bne.n	8003a00 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	e00c      	b.n	8003a1a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <LL_USART_Init+0xb8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d102      	bne.n	8003a0e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	e005      	b.n	8003a1a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <LL_USART_Init+0xbc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00c      	beq.n	8003a3a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	69b9      	ldr	r1, [r7, #24]
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff4d 	bl	80038d4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40013800 	.word	0x40013800
 8003a48:	40004400 	.word	0x40004400
 8003a4c:	40004800 	.word	0x40004800

08003a50 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <LL_InitTick+0x30>)
 8003a64:	3b01      	subs	r3, #1
 8003a66:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <LL_InitTick+0x30>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6e:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <LL_InitTick+0x30>)
 8003a70:	2205      	movs	r2, #5
 8003a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	e000e010 	.word	0xe000e010

08003a84 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003a8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ffdd 	bl	8003a50 <LL_InitTick>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003aa8:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <LL_SetSystemCoreClock+0x18>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000004 	.word	0x20000004

08003abc <__errno>:
 8003abc:	4b01      	ldr	r3, [pc, #4]	; (8003ac4 <__errno+0x8>)
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000008 	.word	0x20000008

08003ac8 <__libc_init_array>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	2500      	movs	r5, #0
 8003acc:	4e0c      	ldr	r6, [pc, #48]	; (8003b00 <__libc_init_array+0x38>)
 8003ace:	4c0d      	ldr	r4, [pc, #52]	; (8003b04 <__libc_init_array+0x3c>)
 8003ad0:	1ba4      	subs	r4, r4, r6
 8003ad2:	10a4      	asrs	r4, r4, #2
 8003ad4:	42a5      	cmp	r5, r4
 8003ad6:	d109      	bne.n	8003aec <__libc_init_array+0x24>
 8003ad8:	f000 fbca 	bl	8004270 <_init>
 8003adc:	2500      	movs	r5, #0
 8003ade:	4e0a      	ldr	r6, [pc, #40]	; (8003b08 <__libc_init_array+0x40>)
 8003ae0:	4c0a      	ldr	r4, [pc, #40]	; (8003b0c <__libc_init_array+0x44>)
 8003ae2:	1ba4      	subs	r4, r4, r6
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	42a5      	cmp	r5, r4
 8003ae8:	d105      	bne.n	8003af6 <__libc_init_array+0x2e>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af0:	4798      	blx	r3
 8003af2:	3501      	adds	r5, #1
 8003af4:	e7ee      	b.n	8003ad4 <__libc_init_array+0xc>
 8003af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afa:	4798      	blx	r3
 8003afc:	3501      	adds	r5, #1
 8003afe:	e7f2      	b.n	8003ae6 <__libc_init_array+0x1e>
 8003b00:	0800432c 	.word	0x0800432c
 8003b04:	0800432c 	.word	0x0800432c
 8003b08:	0800432c 	.word	0x0800432c
 8003b0c:	08004330 	.word	0x08004330

08003b10 <memset>:
 8003b10:	4603      	mov	r3, r0
 8003b12:	4402      	add	r2, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d100      	bne.n	8003b1a <memset+0xa>
 8003b18:	4770      	bx	lr
 8003b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1e:	e7f9      	b.n	8003b14 <memset+0x4>

08003b20 <setvbuf>:
 8003b20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b24:	461d      	mov	r5, r3
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <setvbuf+0x14c>)
 8003b28:	4604      	mov	r4, r0
 8003b2a:	681e      	ldr	r6, [r3, #0]
 8003b2c:	460f      	mov	r7, r1
 8003b2e:	4690      	mov	r8, r2
 8003b30:	b126      	cbz	r6, 8003b3c <setvbuf+0x1c>
 8003b32:	69b3      	ldr	r3, [r6, #24]
 8003b34:	b913      	cbnz	r3, 8003b3c <setvbuf+0x1c>
 8003b36:	4630      	mov	r0, r6
 8003b38:	f000 f990 	bl	8003e5c <__sinit>
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <setvbuf+0x150>)
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d152      	bne.n	8003be8 <setvbuf+0xc8>
 8003b42:	6874      	ldr	r4, [r6, #4]
 8003b44:	f1b8 0f02 	cmp.w	r8, #2
 8003b48:	d006      	beq.n	8003b58 <setvbuf+0x38>
 8003b4a:	f1b8 0f01 	cmp.w	r8, #1
 8003b4e:	f200 8089 	bhi.w	8003c64 <setvbuf+0x144>
 8003b52:	2d00      	cmp	r5, #0
 8003b54:	f2c0 8086 	blt.w	8003c64 <setvbuf+0x144>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f000 f914 	bl	8003d88 <_fflush_r>
 8003b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b62:	b141      	cbz	r1, 8003b76 <setvbuf+0x56>
 8003b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b68:	4299      	cmp	r1, r3
 8003b6a:	d002      	beq.n	8003b72 <setvbuf+0x52>
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f000 fa2b 	bl	8003fc8 <_free_r>
 8003b72:	2300      	movs	r3, #0
 8003b74:	6363      	str	r3, [r4, #52]	; 0x34
 8003b76:	2300      	movs	r3, #0
 8003b78:	61a3      	str	r3, [r4, #24]
 8003b7a:	6063      	str	r3, [r4, #4]
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	d503      	bpl.n	8003b8a <setvbuf+0x6a>
 8003b82:	6921      	ldr	r1, [r4, #16]
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 fa1f 	bl	8003fc8 <_free_r>
 8003b8a:	89a3      	ldrh	r3, [r4, #12]
 8003b8c:	f1b8 0f02 	cmp.w	r8, #2
 8003b90:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003b94:	f023 0303 	bic.w	r3, r3, #3
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	d05d      	beq.n	8003c58 <setvbuf+0x138>
 8003b9c:	ab01      	add	r3, sp, #4
 8003b9e:	466a      	mov	r2, sp
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	f000 f9e4 	bl	8003f70 <__swhatbuf_r>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	4318      	orrs	r0, r3
 8003bac:	81a0      	strh	r0, [r4, #12]
 8003bae:	bb2d      	cbnz	r5, 8003bfc <setvbuf+0xdc>
 8003bb0:	9d00      	ldr	r5, [sp, #0]
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f000 fa00 	bl	8003fb8 <malloc>
 8003bb8:	4607      	mov	r7, r0
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d14e      	bne.n	8003c5c <setvbuf+0x13c>
 8003bbe:	f8dd 9000 	ldr.w	r9, [sp]
 8003bc2:	45a9      	cmp	r9, r5
 8003bc4:	d13c      	bne.n	8003c40 <setvbuf+0x120>
 8003bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	81a3      	strh	r3, [r4, #12]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60a3      	str	r3, [r4, #8]
 8003bd6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	6123      	str	r3, [r4, #16]
 8003bde:	2301      	movs	r3, #1
 8003be0:	6163      	str	r3, [r4, #20]
 8003be2:	b003      	add	sp, #12
 8003be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003be8:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <setvbuf+0x154>)
 8003bea:	429c      	cmp	r4, r3
 8003bec:	d101      	bne.n	8003bf2 <setvbuf+0xd2>
 8003bee:	68b4      	ldr	r4, [r6, #8]
 8003bf0:	e7a8      	b.n	8003b44 <setvbuf+0x24>
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <setvbuf+0x158>)
 8003bf4:	429c      	cmp	r4, r3
 8003bf6:	bf08      	it	eq
 8003bf8:	68f4      	ldreq	r4, [r6, #12]
 8003bfa:	e7a3      	b.n	8003b44 <setvbuf+0x24>
 8003bfc:	2f00      	cmp	r7, #0
 8003bfe:	d0d8      	beq.n	8003bb2 <setvbuf+0x92>
 8003c00:	69b3      	ldr	r3, [r6, #24]
 8003c02:	b913      	cbnz	r3, 8003c0a <setvbuf+0xea>
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f929 	bl	8003e5c <__sinit>
 8003c0a:	f1b8 0f01 	cmp.w	r8, #1
 8003c0e:	bf08      	it	eq
 8003c10:	89a3      	ldrheq	r3, [r4, #12]
 8003c12:	6027      	str	r7, [r4, #0]
 8003c14:	bf04      	itt	eq
 8003c16:	f043 0301 	orreq.w	r3, r3, #1
 8003c1a:	81a3      	strheq	r3, [r4, #12]
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003c22:	f013 0008 	ands.w	r0, r3, #8
 8003c26:	d01b      	beq.n	8003c60 <setvbuf+0x140>
 8003c28:	f013 0001 	ands.w	r0, r3, #1
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	bf1f      	itttt	ne
 8003c32:	426d      	negne	r5, r5
 8003c34:	60a3      	strne	r3, [r4, #8]
 8003c36:	61a5      	strne	r5, [r4, #24]
 8003c38:	4618      	movne	r0, r3
 8003c3a:	bf08      	it	eq
 8003c3c:	60a5      	streq	r5, [r4, #8]
 8003c3e:	e7d0      	b.n	8003be2 <setvbuf+0xc2>
 8003c40:	4648      	mov	r0, r9
 8003c42:	f000 f9b9 	bl	8003fb8 <malloc>
 8003c46:	4607      	mov	r7, r0
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d0bc      	beq.n	8003bc6 <setvbuf+0xa6>
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	464d      	mov	r5, r9
 8003c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	e7d3      	b.n	8003c00 <setvbuf+0xe0>
 8003c58:	2000      	movs	r0, #0
 8003c5a:	e7b6      	b.n	8003bca <setvbuf+0xaa>
 8003c5c:	46a9      	mov	r9, r5
 8003c5e:	e7f5      	b.n	8003c4c <setvbuf+0x12c>
 8003c60:	60a0      	str	r0, [r4, #8]
 8003c62:	e7be      	b.n	8003be2 <setvbuf+0xc2>
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
 8003c68:	e7bb      	b.n	8003be2 <setvbuf+0xc2>
 8003c6a:	bf00      	nop
 8003c6c:	20000008 	.word	0x20000008
 8003c70:	080042ec 	.word	0x080042ec
 8003c74:	0800430c 	.word	0x0800430c
 8003c78:	080042cc 	.word	0x080042cc

08003c7c <__sflush_r>:
 8003c7c:	898a      	ldrh	r2, [r1, #12]
 8003c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c82:	4605      	mov	r5, r0
 8003c84:	0710      	lsls	r0, r2, #28
 8003c86:	460c      	mov	r4, r1
 8003c88:	d458      	bmi.n	8003d3c <__sflush_r+0xc0>
 8003c8a:	684b      	ldr	r3, [r1, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	dc05      	bgt.n	8003c9c <__sflush_r+0x20>
 8003c90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dc02      	bgt.n	8003c9c <__sflush_r+0x20>
 8003c96:	2000      	movs	r0, #0
 8003c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c9e:	2e00      	cmp	r6, #0
 8003ca0:	d0f9      	beq.n	8003c96 <__sflush_r+0x1a>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ca8:	682f      	ldr	r7, [r5, #0]
 8003caa:	6a21      	ldr	r1, [r4, #32]
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	d032      	beq.n	8003d16 <__sflush_r+0x9a>
 8003cb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	075a      	lsls	r2, r3, #29
 8003cb6:	d505      	bpl.n	8003cc4 <__sflush_r+0x48>
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	1ac0      	subs	r0, r0, r3
 8003cbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cbe:	b10b      	cbz	r3, 8003cc4 <__sflush_r+0x48>
 8003cc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cc2:	1ac0      	subs	r0, r0, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cca:	6a21      	ldr	r1, [r4, #32]
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b0      	blx	r6
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	d106      	bne.n	8003ce4 <__sflush_r+0x68>
 8003cd6:	6829      	ldr	r1, [r5, #0]
 8003cd8:	291d      	cmp	r1, #29
 8003cda:	d848      	bhi.n	8003d6e <__sflush_r+0xf2>
 8003cdc:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <__sflush_r+0x108>)
 8003cde:	40ca      	lsrs	r2, r1
 8003ce0:	07d6      	lsls	r6, r2, #31
 8003ce2:	d544      	bpl.n	8003d6e <__sflush_r+0xf2>
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	6062      	str	r2, [r4, #4]
 8003ce8:	6922      	ldr	r2, [r4, #16]
 8003cea:	04d9      	lsls	r1, r3, #19
 8003cec:	6022      	str	r2, [r4, #0]
 8003cee:	d504      	bpl.n	8003cfa <__sflush_r+0x7e>
 8003cf0:	1c42      	adds	r2, r0, #1
 8003cf2:	d101      	bne.n	8003cf8 <__sflush_r+0x7c>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	b903      	cbnz	r3, 8003cfa <__sflush_r+0x7e>
 8003cf8:	6560      	str	r0, [r4, #84]	; 0x54
 8003cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cfc:	602f      	str	r7, [r5, #0]
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d0c9      	beq.n	8003c96 <__sflush_r+0x1a>
 8003d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d06:	4299      	cmp	r1, r3
 8003d08:	d002      	beq.n	8003d10 <__sflush_r+0x94>
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f000 f95c 	bl	8003fc8 <_free_r>
 8003d10:	2000      	movs	r0, #0
 8003d12:	6360      	str	r0, [r4, #52]	; 0x34
 8003d14:	e7c0      	b.n	8003c98 <__sflush_r+0x1c>
 8003d16:	2301      	movs	r3, #1
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b0      	blx	r6
 8003d1c:	1c41      	adds	r1, r0, #1
 8003d1e:	d1c8      	bne.n	8003cb2 <__sflush_r+0x36>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0c5      	beq.n	8003cb2 <__sflush_r+0x36>
 8003d26:	2b1d      	cmp	r3, #29
 8003d28:	d001      	beq.n	8003d2e <__sflush_r+0xb2>
 8003d2a:	2b16      	cmp	r3, #22
 8003d2c:	d101      	bne.n	8003d32 <__sflush_r+0xb6>
 8003d2e:	602f      	str	r7, [r5, #0]
 8003d30:	e7b1      	b.n	8003c96 <__sflush_r+0x1a>
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	e7ad      	b.n	8003c98 <__sflush_r+0x1c>
 8003d3c:	690f      	ldr	r7, [r1, #16]
 8003d3e:	2f00      	cmp	r7, #0
 8003d40:	d0a9      	beq.n	8003c96 <__sflush_r+0x1a>
 8003d42:	0793      	lsls	r3, r2, #30
 8003d44:	bf18      	it	ne
 8003d46:	2300      	movne	r3, #0
 8003d48:	680e      	ldr	r6, [r1, #0]
 8003d4a:	bf08      	it	eq
 8003d4c:	694b      	ldreq	r3, [r1, #20]
 8003d4e:	eba6 0807 	sub.w	r8, r6, r7
 8003d52:	600f      	str	r7, [r1, #0]
 8003d54:	608b      	str	r3, [r1, #8]
 8003d56:	f1b8 0f00 	cmp.w	r8, #0
 8003d5a:	dd9c      	ble.n	8003c96 <__sflush_r+0x1a>
 8003d5c:	4643      	mov	r3, r8
 8003d5e:	463a      	mov	r2, r7
 8003d60:	6a21      	ldr	r1, [r4, #32]
 8003d62:	4628      	mov	r0, r5
 8003d64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d66:	47b0      	blx	r6
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	dc06      	bgt.n	8003d7a <__sflush_r+0xfe>
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d72:	81a3      	strh	r3, [r4, #12]
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e78e      	b.n	8003c98 <__sflush_r+0x1c>
 8003d7a:	4407      	add	r7, r0
 8003d7c:	eba8 0800 	sub.w	r8, r8, r0
 8003d80:	e7e9      	b.n	8003d56 <__sflush_r+0xda>
 8003d82:	bf00      	nop
 8003d84:	20400001 	.word	0x20400001

08003d88 <_fflush_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	690b      	ldr	r3, [r1, #16]
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	460c      	mov	r4, r1
 8003d90:	b1db      	cbz	r3, 8003dca <_fflush_r+0x42>
 8003d92:	b118      	cbz	r0, 8003d9c <_fflush_r+0x14>
 8003d94:	6983      	ldr	r3, [r0, #24]
 8003d96:	b90b      	cbnz	r3, 8003d9c <_fflush_r+0x14>
 8003d98:	f000 f860 	bl	8003e5c <__sinit>
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <_fflush_r+0x48>)
 8003d9e:	429c      	cmp	r4, r3
 8003da0:	d109      	bne.n	8003db6 <_fflush_r+0x2e>
 8003da2:	686c      	ldr	r4, [r5, #4]
 8003da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da8:	b17b      	cbz	r3, 8003dca <_fflush_r+0x42>
 8003daa:	4621      	mov	r1, r4
 8003dac:	4628      	mov	r0, r5
 8003dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003db2:	f7ff bf63 	b.w	8003c7c <__sflush_r>
 8003db6:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <_fflush_r+0x4c>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	d101      	bne.n	8003dc0 <_fflush_r+0x38>
 8003dbc:	68ac      	ldr	r4, [r5, #8]
 8003dbe:	e7f1      	b.n	8003da4 <_fflush_r+0x1c>
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <_fflush_r+0x50>)
 8003dc2:	429c      	cmp	r4, r3
 8003dc4:	bf08      	it	eq
 8003dc6:	68ec      	ldreq	r4, [r5, #12]
 8003dc8:	e7ec      	b.n	8003da4 <_fflush_r+0x1c>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	080042ec 	.word	0x080042ec
 8003dd4:	0800430c 	.word	0x0800430c
 8003dd8:	080042cc 	.word	0x080042cc

08003ddc <std>:
 8003ddc:	2300      	movs	r3, #0
 8003dde:	b510      	push	{r4, lr}
 8003de0:	4604      	mov	r4, r0
 8003de2:	e9c0 3300 	strd	r3, r3, [r0]
 8003de6:	6083      	str	r3, [r0, #8]
 8003de8:	8181      	strh	r1, [r0, #12]
 8003dea:	6643      	str	r3, [r0, #100]	; 0x64
 8003dec:	81c2      	strh	r2, [r0, #14]
 8003dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003df2:	6183      	str	r3, [r0, #24]
 8003df4:	4619      	mov	r1, r3
 8003df6:	2208      	movs	r2, #8
 8003df8:	305c      	adds	r0, #92	; 0x5c
 8003dfa:	f7ff fe89 	bl	8003b10 <memset>
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <std+0x38>)
 8003e00:	6224      	str	r4, [r4, #32]
 8003e02:	6263      	str	r3, [r4, #36]	; 0x24
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <std+0x3c>)
 8003e06:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <std+0x40>)
 8003e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <std+0x44>)
 8003e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	bf00      	nop
 8003e14:	08004135 	.word	0x08004135
 8003e18:	08004157 	.word	0x08004157
 8003e1c:	0800418f 	.word	0x0800418f
 8003e20:	080041b3 	.word	0x080041b3

08003e24 <_cleanup_r>:
 8003e24:	4901      	ldr	r1, [pc, #4]	; (8003e2c <_cleanup_r+0x8>)
 8003e26:	f000 b885 	b.w	8003f34 <_fwalk_reent>
 8003e2a:	bf00      	nop
 8003e2c:	08003d89 	.word	0x08003d89

08003e30 <__sfmoreglue>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	2568      	movs	r5, #104	; 0x68
 8003e34:	1e4a      	subs	r2, r1, #1
 8003e36:	4355      	muls	r5, r2
 8003e38:	460e      	mov	r6, r1
 8003e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e3e:	f000 f90f 	bl	8004060 <_malloc_r>
 8003e42:	4604      	mov	r4, r0
 8003e44:	b140      	cbz	r0, 8003e58 <__sfmoreglue+0x28>
 8003e46:	2100      	movs	r1, #0
 8003e48:	e9c0 1600 	strd	r1, r6, [r0]
 8003e4c:	300c      	adds	r0, #12
 8003e4e:	60a0      	str	r0, [r4, #8]
 8003e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e54:	f7ff fe5c 	bl	8003b10 <memset>
 8003e58:	4620      	mov	r0, r4
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}

08003e5c <__sinit>:
 8003e5c:	6983      	ldr	r3, [r0, #24]
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	4604      	mov	r4, r0
 8003e62:	bb33      	cbnz	r3, 8003eb2 <__sinit+0x56>
 8003e64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003e68:	6503      	str	r3, [r0, #80]	; 0x50
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <__sinit+0x58>)
 8003e6c:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <__sinit+0x5c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6282      	str	r2, [r0, #40]	; 0x28
 8003e72:	4298      	cmp	r0, r3
 8003e74:	bf04      	itt	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	6183      	streq	r3, [r0, #24]
 8003e7a:	f000 f81f 	bl	8003ebc <__sfp>
 8003e7e:	6060      	str	r0, [r4, #4]
 8003e80:	4620      	mov	r0, r4
 8003e82:	f000 f81b 	bl	8003ebc <__sfp>
 8003e86:	60a0      	str	r0, [r4, #8]
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f000 f817 	bl	8003ebc <__sfp>
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60e0      	str	r0, [r4, #12]
 8003e92:	2104      	movs	r1, #4
 8003e94:	6860      	ldr	r0, [r4, #4]
 8003e96:	f7ff ffa1 	bl	8003ddc <std>
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	2109      	movs	r1, #9
 8003e9e:	68a0      	ldr	r0, [r4, #8]
 8003ea0:	f7ff ff9c 	bl	8003ddc <std>
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	2112      	movs	r1, #18
 8003ea8:	68e0      	ldr	r0, [r4, #12]
 8003eaa:	f7ff ff97 	bl	8003ddc <std>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	61a3      	str	r3, [r4, #24]
 8003eb2:	bd10      	pop	{r4, pc}
 8003eb4:	080042c8 	.word	0x080042c8
 8003eb8:	08003e25 	.word	0x08003e25

08003ebc <__sfp>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <__sfp+0x70>)
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	681e      	ldr	r6, [r3, #0]
 8003ec4:	69b3      	ldr	r3, [r6, #24]
 8003ec6:	b913      	cbnz	r3, 8003ece <__sfp+0x12>
 8003ec8:	4630      	mov	r0, r6
 8003eca:	f7ff ffc7 	bl	8003e5c <__sinit>
 8003ece:	3648      	adds	r6, #72	; 0x48
 8003ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	d503      	bpl.n	8003ee0 <__sfp+0x24>
 8003ed8:	6833      	ldr	r3, [r6, #0]
 8003eda:	b133      	cbz	r3, 8003eea <__sfp+0x2e>
 8003edc:	6836      	ldr	r6, [r6, #0]
 8003ede:	e7f7      	b.n	8003ed0 <__sfp+0x14>
 8003ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ee4:	b16d      	cbz	r5, 8003f02 <__sfp+0x46>
 8003ee6:	3468      	adds	r4, #104	; 0x68
 8003ee8:	e7f4      	b.n	8003ed4 <__sfp+0x18>
 8003eea:	2104      	movs	r1, #4
 8003eec:	4638      	mov	r0, r7
 8003eee:	f7ff ff9f 	bl	8003e30 <__sfmoreglue>
 8003ef2:	6030      	str	r0, [r6, #0]
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d1f1      	bne.n	8003edc <__sfp+0x20>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	4604      	mov	r4, r0
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	4620      	mov	r0, r4
 8003f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <__sfp+0x74>)
 8003f04:	6665      	str	r5, [r4, #100]	; 0x64
 8003f06:	e9c4 5500 	strd	r5, r5, [r4]
 8003f0a:	60a5      	str	r5, [r4, #8]
 8003f0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003f10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003f14:	2208      	movs	r2, #8
 8003f16:	4629      	mov	r1, r5
 8003f18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f1c:	f7ff fdf8 	bl	8003b10 <memset>
 8003f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f28:	e7e9      	b.n	8003efe <__sfp+0x42>
 8003f2a:	bf00      	nop
 8003f2c:	080042c8 	.word	0x080042c8
 8003f30:	ffff0001 	.word	0xffff0001

08003f34 <_fwalk_reent>:
 8003f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f38:	4680      	mov	r8, r0
 8003f3a:	4689      	mov	r9, r1
 8003f3c:	2600      	movs	r6, #0
 8003f3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f42:	b914      	cbnz	r4, 8003f4a <_fwalk_reent+0x16>
 8003f44:	4630      	mov	r0, r6
 8003f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003f4e:	3f01      	subs	r7, #1
 8003f50:	d501      	bpl.n	8003f56 <_fwalk_reent+0x22>
 8003f52:	6824      	ldr	r4, [r4, #0]
 8003f54:	e7f5      	b.n	8003f42 <_fwalk_reent+0xe>
 8003f56:	89ab      	ldrh	r3, [r5, #12]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d907      	bls.n	8003f6c <_fwalk_reent+0x38>
 8003f5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f60:	3301      	adds	r3, #1
 8003f62:	d003      	beq.n	8003f6c <_fwalk_reent+0x38>
 8003f64:	4629      	mov	r1, r5
 8003f66:	4640      	mov	r0, r8
 8003f68:	47c8      	blx	r9
 8003f6a:	4306      	orrs	r6, r0
 8003f6c:	3568      	adds	r5, #104	; 0x68
 8003f6e:	e7ee      	b.n	8003f4e <_fwalk_reent+0x1a>

08003f70 <__swhatbuf_r>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	460e      	mov	r6, r1
 8003f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f78:	b096      	sub	sp, #88	; 0x58
 8003f7a:	2900      	cmp	r1, #0
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	461d      	mov	r5, r3
 8003f80:	da07      	bge.n	8003f92 <__swhatbuf_r+0x22>
 8003f82:	2300      	movs	r3, #0
 8003f84:	602b      	str	r3, [r5, #0]
 8003f86:	89b3      	ldrh	r3, [r6, #12]
 8003f88:	061a      	lsls	r2, r3, #24
 8003f8a:	d410      	bmi.n	8003fae <__swhatbuf_r+0x3e>
 8003f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f90:	e00e      	b.n	8003fb0 <__swhatbuf_r+0x40>
 8003f92:	466a      	mov	r2, sp
 8003f94:	f000 f934 	bl	8004200 <_fstat_r>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	dbf2      	blt.n	8003f82 <__swhatbuf_r+0x12>
 8003f9c:	9a01      	ldr	r2, [sp, #4]
 8003f9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fa6:	425a      	negs	r2, r3
 8003fa8:	415a      	adcs	r2, r3
 8003faa:	602a      	str	r2, [r5, #0]
 8003fac:	e7ee      	b.n	8003f8c <__swhatbuf_r+0x1c>
 8003fae:	2340      	movs	r3, #64	; 0x40
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	b016      	add	sp, #88	; 0x58
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}

08003fb8 <malloc>:
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <malloc+0xc>)
 8003fba:	4601      	mov	r1, r0
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	f000 b84f 	b.w	8004060 <_malloc_r>
 8003fc2:	bf00      	nop
 8003fc4:	20000008 	.word	0x20000008

08003fc8 <_free_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4605      	mov	r5, r0
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	d043      	beq.n	8004058 <_free_r+0x90>
 8003fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fd4:	1f0c      	subs	r4, r1, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bfb8      	it	lt
 8003fda:	18e4      	addlt	r4, r4, r3
 8003fdc:	f000 f934 	bl	8004248 <__malloc_lock>
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	; (800405c <_free_r+0x94>)
 8003fe2:	6813      	ldr	r3, [r2, #0]
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	b933      	cbnz	r3, 8003ff6 <_free_r+0x2e>
 8003fe8:	6063      	str	r3, [r4, #4]
 8003fea:	6014      	str	r4, [r2, #0]
 8003fec:	4628      	mov	r0, r5
 8003fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ff2:	f000 b92a 	b.w	800424a <__malloc_unlock>
 8003ff6:	42a3      	cmp	r3, r4
 8003ff8:	d90b      	bls.n	8004012 <_free_r+0x4a>
 8003ffa:	6821      	ldr	r1, [r4, #0]
 8003ffc:	1862      	adds	r2, r4, r1
 8003ffe:	4293      	cmp	r3, r2
 8004000:	bf01      	itttt	eq
 8004002:	681a      	ldreq	r2, [r3, #0]
 8004004:	685b      	ldreq	r3, [r3, #4]
 8004006:	1852      	addeq	r2, r2, r1
 8004008:	6022      	streq	r2, [r4, #0]
 800400a:	6063      	str	r3, [r4, #4]
 800400c:	6004      	str	r4, [r0, #0]
 800400e:	e7ed      	b.n	8003fec <_free_r+0x24>
 8004010:	4613      	mov	r3, r2
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	b10a      	cbz	r2, 800401a <_free_r+0x52>
 8004016:	42a2      	cmp	r2, r4
 8004018:	d9fa      	bls.n	8004010 <_free_r+0x48>
 800401a:	6819      	ldr	r1, [r3, #0]
 800401c:	1858      	adds	r0, r3, r1
 800401e:	42a0      	cmp	r0, r4
 8004020:	d10b      	bne.n	800403a <_free_r+0x72>
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	4401      	add	r1, r0
 8004026:	1858      	adds	r0, r3, r1
 8004028:	4282      	cmp	r2, r0
 800402a:	6019      	str	r1, [r3, #0]
 800402c:	d1de      	bne.n	8003fec <_free_r+0x24>
 800402e:	6810      	ldr	r0, [r2, #0]
 8004030:	6852      	ldr	r2, [r2, #4]
 8004032:	4401      	add	r1, r0
 8004034:	6019      	str	r1, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	e7d8      	b.n	8003fec <_free_r+0x24>
 800403a:	d902      	bls.n	8004042 <_free_r+0x7a>
 800403c:	230c      	movs	r3, #12
 800403e:	602b      	str	r3, [r5, #0]
 8004040:	e7d4      	b.n	8003fec <_free_r+0x24>
 8004042:	6820      	ldr	r0, [r4, #0]
 8004044:	1821      	adds	r1, r4, r0
 8004046:	428a      	cmp	r2, r1
 8004048:	bf01      	itttt	eq
 800404a:	6811      	ldreq	r1, [r2, #0]
 800404c:	6852      	ldreq	r2, [r2, #4]
 800404e:	1809      	addeq	r1, r1, r0
 8004050:	6021      	streq	r1, [r4, #0]
 8004052:	6062      	str	r2, [r4, #4]
 8004054:	605c      	str	r4, [r3, #4]
 8004056:	e7c9      	b.n	8003fec <_free_r+0x24>
 8004058:	bd38      	pop	{r3, r4, r5, pc}
 800405a:	bf00      	nop
 800405c:	20000094 	.word	0x20000094

08004060 <_malloc_r>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	1ccd      	adds	r5, r1, #3
 8004064:	f025 0503 	bic.w	r5, r5, #3
 8004068:	3508      	adds	r5, #8
 800406a:	2d0c      	cmp	r5, #12
 800406c:	bf38      	it	cc
 800406e:	250c      	movcc	r5, #12
 8004070:	2d00      	cmp	r5, #0
 8004072:	4606      	mov	r6, r0
 8004074:	db01      	blt.n	800407a <_malloc_r+0x1a>
 8004076:	42a9      	cmp	r1, r5
 8004078:	d903      	bls.n	8004082 <_malloc_r+0x22>
 800407a:	230c      	movs	r3, #12
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	2000      	movs	r0, #0
 8004080:	bd70      	pop	{r4, r5, r6, pc}
 8004082:	f000 f8e1 	bl	8004248 <__malloc_lock>
 8004086:	4a21      	ldr	r2, [pc, #132]	; (800410c <_malloc_r+0xac>)
 8004088:	6814      	ldr	r4, [r2, #0]
 800408a:	4621      	mov	r1, r4
 800408c:	b991      	cbnz	r1, 80040b4 <_malloc_r+0x54>
 800408e:	4c20      	ldr	r4, [pc, #128]	; (8004110 <_malloc_r+0xb0>)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	b91b      	cbnz	r3, 800409c <_malloc_r+0x3c>
 8004094:	4630      	mov	r0, r6
 8004096:	f000 f83d 	bl	8004114 <_sbrk_r>
 800409a:	6020      	str	r0, [r4, #0]
 800409c:	4629      	mov	r1, r5
 800409e:	4630      	mov	r0, r6
 80040a0:	f000 f838 	bl	8004114 <_sbrk_r>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d124      	bne.n	80040f2 <_malloc_r+0x92>
 80040a8:	230c      	movs	r3, #12
 80040aa:	4630      	mov	r0, r6
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	f000 f8cc 	bl	800424a <__malloc_unlock>
 80040b2:	e7e4      	b.n	800407e <_malloc_r+0x1e>
 80040b4:	680b      	ldr	r3, [r1, #0]
 80040b6:	1b5b      	subs	r3, r3, r5
 80040b8:	d418      	bmi.n	80040ec <_malloc_r+0x8c>
 80040ba:	2b0b      	cmp	r3, #11
 80040bc:	d90f      	bls.n	80040de <_malloc_r+0x7e>
 80040be:	600b      	str	r3, [r1, #0]
 80040c0:	18cc      	adds	r4, r1, r3
 80040c2:	50cd      	str	r5, [r1, r3]
 80040c4:	4630      	mov	r0, r6
 80040c6:	f000 f8c0 	bl	800424a <__malloc_unlock>
 80040ca:	f104 000b 	add.w	r0, r4, #11
 80040ce:	1d23      	adds	r3, r4, #4
 80040d0:	f020 0007 	bic.w	r0, r0, #7
 80040d4:	1ac3      	subs	r3, r0, r3
 80040d6:	d0d3      	beq.n	8004080 <_malloc_r+0x20>
 80040d8:	425a      	negs	r2, r3
 80040da:	50e2      	str	r2, [r4, r3]
 80040dc:	e7d0      	b.n	8004080 <_malloc_r+0x20>
 80040de:	684b      	ldr	r3, [r1, #4]
 80040e0:	428c      	cmp	r4, r1
 80040e2:	bf16      	itet	ne
 80040e4:	6063      	strne	r3, [r4, #4]
 80040e6:	6013      	streq	r3, [r2, #0]
 80040e8:	460c      	movne	r4, r1
 80040ea:	e7eb      	b.n	80040c4 <_malloc_r+0x64>
 80040ec:	460c      	mov	r4, r1
 80040ee:	6849      	ldr	r1, [r1, #4]
 80040f0:	e7cc      	b.n	800408c <_malloc_r+0x2c>
 80040f2:	1cc4      	adds	r4, r0, #3
 80040f4:	f024 0403 	bic.w	r4, r4, #3
 80040f8:	42a0      	cmp	r0, r4
 80040fa:	d005      	beq.n	8004108 <_malloc_r+0xa8>
 80040fc:	1a21      	subs	r1, r4, r0
 80040fe:	4630      	mov	r0, r6
 8004100:	f000 f808 	bl	8004114 <_sbrk_r>
 8004104:	3001      	adds	r0, #1
 8004106:	d0cf      	beq.n	80040a8 <_malloc_r+0x48>
 8004108:	6025      	str	r5, [r4, #0]
 800410a:	e7db      	b.n	80040c4 <_malloc_r+0x64>
 800410c:	20000094 	.word	0x20000094
 8004110:	20000098 	.word	0x20000098

08004114 <_sbrk_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	2300      	movs	r3, #0
 8004118:	4c05      	ldr	r4, [pc, #20]	; (8004130 <_sbrk_r+0x1c>)
 800411a:	4605      	mov	r5, r0
 800411c:	4608      	mov	r0, r1
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	f7fe fb2a 	bl	8002778 <_sbrk>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_sbrk_r+0x1a>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	b103      	cbz	r3, 800412e <_sbrk_r+0x1a>
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	200000ac 	.word	0x200000ac

08004134 <__sread>:
 8004134:	b510      	push	{r4, lr}
 8004136:	460c      	mov	r4, r1
 8004138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413c:	f000 f886 	bl	800424c <_read_r>
 8004140:	2800      	cmp	r0, #0
 8004142:	bfab      	itete	ge
 8004144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004146:	89a3      	ldrhlt	r3, [r4, #12]
 8004148:	181b      	addge	r3, r3, r0
 800414a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800414e:	bfac      	ite	ge
 8004150:	6563      	strge	r3, [r4, #84]	; 0x54
 8004152:	81a3      	strhlt	r3, [r4, #12]
 8004154:	bd10      	pop	{r4, pc}

08004156 <__swrite>:
 8004156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	461f      	mov	r7, r3
 800415c:	898b      	ldrh	r3, [r1, #12]
 800415e:	4605      	mov	r5, r0
 8004160:	05db      	lsls	r3, r3, #23
 8004162:	460c      	mov	r4, r1
 8004164:	4616      	mov	r6, r2
 8004166:	d505      	bpl.n	8004174 <__swrite+0x1e>
 8004168:	2302      	movs	r3, #2
 800416a:	2200      	movs	r2, #0
 800416c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004170:	f000 f858 	bl	8004224 <_lseek_r>
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	4632      	mov	r2, r6
 8004178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800417c:	81a3      	strh	r3, [r4, #12]
 800417e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004182:	463b      	mov	r3, r7
 8004184:	4628      	mov	r0, r5
 8004186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418a:	f000 b817 	b.w	80041bc <_write_r>

0800418e <__sseek>:
 800418e:	b510      	push	{r4, lr}
 8004190:	460c      	mov	r4, r1
 8004192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004196:	f000 f845 	bl	8004224 <_lseek_r>
 800419a:	1c43      	adds	r3, r0, #1
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	bf15      	itete	ne
 80041a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80041a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041aa:	81a3      	strheq	r3, [r4, #12]
 80041ac:	bf18      	it	ne
 80041ae:	81a3      	strhne	r3, [r4, #12]
 80041b0:	bd10      	pop	{r4, pc}

080041b2 <__sclose>:
 80041b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b6:	f000 b813 	b.w	80041e0 <_close_r>
	...

080041bc <_write_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	4605      	mov	r5, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	4611      	mov	r1, r2
 80041c4:	2200      	movs	r2, #0
 80041c6:	4c05      	ldr	r4, [pc, #20]	; (80041dc <_write_r+0x20>)
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f7fe fa91 	bl	80026f2 <_write>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d102      	bne.n	80041da <_write_r+0x1e>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	b103      	cbz	r3, 80041da <_write_r+0x1e>
 80041d8:	602b      	str	r3, [r5, #0]
 80041da:	bd38      	pop	{r3, r4, r5, pc}
 80041dc:	200000ac 	.word	0x200000ac

080041e0 <_close_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	2300      	movs	r3, #0
 80041e4:	4c05      	ldr	r4, [pc, #20]	; (80041fc <_close_r+0x1c>)
 80041e6:	4605      	mov	r5, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	f7fe fa9d 	bl	800272a <_close>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_close_r+0x1a>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_close_r+0x1a>
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	200000ac 	.word	0x200000ac

08004200 <_fstat_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	2300      	movs	r3, #0
 8004204:	4c06      	ldr	r4, [pc, #24]	; (8004220 <_fstat_r+0x20>)
 8004206:	4605      	mov	r5, r0
 8004208:	4608      	mov	r0, r1
 800420a:	4611      	mov	r1, r2
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	f7fe fa97 	bl	8002740 <_fstat>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	d102      	bne.n	800421c <_fstat_r+0x1c>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	b103      	cbz	r3, 800421c <_fstat_r+0x1c>
 800421a:	602b      	str	r3, [r5, #0]
 800421c:	bd38      	pop	{r3, r4, r5, pc}
 800421e:	bf00      	nop
 8004220:	200000ac 	.word	0x200000ac

08004224 <_lseek_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4605      	mov	r5, r0
 8004228:	4608      	mov	r0, r1
 800422a:	4611      	mov	r1, r2
 800422c:	2200      	movs	r2, #0
 800422e:	4c05      	ldr	r4, [pc, #20]	; (8004244 <_lseek_r+0x20>)
 8004230:	6022      	str	r2, [r4, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	f7fe fa93 	bl	800275e <_lseek>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_lseek_r+0x1e>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	b103      	cbz	r3, 8004242 <_lseek_r+0x1e>
 8004240:	602b      	str	r3, [r5, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	200000ac 	.word	0x200000ac

08004248 <__malloc_lock>:
 8004248:	4770      	bx	lr

0800424a <__malloc_unlock>:
 800424a:	4770      	bx	lr

0800424c <_read_r>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	4605      	mov	r5, r0
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	2200      	movs	r2, #0
 8004256:	4c05      	ldr	r4, [pc, #20]	; (800426c <_read_r+0x20>)
 8004258:	6022      	str	r2, [r4, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f7fe fa2c 	bl	80026b8 <_read>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_read_r+0x1e>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	b103      	cbz	r3, 800426a <_read_r+0x1e>
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	200000ac 	.word	0x200000ac

08004270 <_init>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr

0800427c <_fini>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr

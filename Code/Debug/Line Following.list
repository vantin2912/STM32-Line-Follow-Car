
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008724  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008838  08008838  00018838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d24  08008d24  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008d24  08008d24  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d24  08008d24  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200001e8  08008f14  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08008f14  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8c6  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3c  00000000  00000000  0002aad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  0002ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002d550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159cd  00000000  00000000  0002dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008539  00000000  00000000  0004396d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e8b2  00000000  00000000  0004bea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ba758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b8  00000000  00000000  000ba7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800881c 	.word	0x0800881c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800881c 	.word	0x0800881c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	621a      	str	r2, [r3, #32]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	611a      	str	r2, [r3, #16]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	615a      	str	r2, [r3, #20]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <MotorL_EnablePWM>:
 *      Author: vanti
 */
#include "MotorControl.h"

void MotorL_EnablePWM(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8001104:	2101      	movs	r1, #1
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <MotorL_EnablePWM+0x10>)
 8001108:	f7ff ffb2 	bl	8001070 <LL_TIM_CC_EnableChannel>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012c00 	.word	0x40012c00

08001114 <MotorR_EnablePWM>:
{
	LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorR_EnablePWM(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <MotorR_EnablePWM+0x14>)
 800111e:	f7ff ffa7 	bl	8001070 <LL_TIM_CC_EnableChannel>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012c00 	.word	0x40012c00

0800112c <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800113a:	db03      	blt.n	8001144 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 800113c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e005      	b.n	8001150 <MotorL_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800114a:	dc01      	bgt.n	8001150 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MotorL_SetPWM+0x60>)
 800114e:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0a      	blt.n	800116c <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MotorL_SetPWM+0x64>)
 800115e:	f7ff ff97 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <MotorL_SetPWM+0x68>)
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MotorL_SetPWM+0x6c>)
 8001166:	f7ff ffbc 	bl	80010e2 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800116a:	e00a      	b.n	8001182 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001172:	4619      	mov	r1, r3
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <MotorL_SetPWM+0x64>)
 8001176:	f7ff ff8b 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800117a:	4906      	ldr	r1, [pc, #24]	; (8001194 <MotorL_SetPWM+0x68>)
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <MotorL_SetPWM+0x6c>)
 800117e:	f7ff ffa1 	bl	80010c4 <LL_GPIO_SetOutputPin>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	ffffe3e0 	.word	0xffffe3e0
 8001190:	40012c00 	.word	0x40012c00
 8001194:	04800080 	.word	0x04800080
 8001198:	40010c00 	.word	0x40010c00

0800119c <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011aa:	db03      	blt.n	80011b4 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 80011ac:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e005      	b.n	80011c0 <MotorR_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80011ba:	dc01      	bgt.n	80011c0 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MotorR_SetPWM+0x60>)
 80011be:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0a      	blt.n	80011dc <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MotorR_SetPWM+0x64>)
 80011ce:	f7ff ff6c 	bl	80010aa <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80011d2:	490c      	ldr	r1, [pc, #48]	; (8001204 <MotorR_SetPWM+0x68>)
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MotorR_SetPWM+0x6c>)
 80011d6:	f7ff ff84 	bl	80010e2 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 80011da:	e00a      	b.n	80011f2 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <MotorR_SetPWM+0x64>)
 80011e6:	f7ff ff60 	bl	80010aa <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80011ea:	4906      	ldr	r1, [pc, #24]	; (8001204 <MotorR_SetPWM+0x68>)
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <MotorR_SetPWM+0x6c>)
 80011ee:	f7ff ff69 	bl	80010c4 <LL_GPIO_SetOutputPin>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	ffffe3e0 	.word	0xffffe3e0
 8001200:	40012c00 	.word	0x40012c00
 8001204:	04020002 	.word	0x04020002
 8001208:	40010800 	.word	0x40010800

0800120c <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90)
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <Servo_SetAngle+0x64>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff00 	bl	800101c <__aeabi_fcmpgt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <Servo_SetAngle+0x1c>
		ServoAngle = 90;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <Servo_SetAngle+0x64>)
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e008      	b.n	800123a <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90)
 8001228:	4912      	ldr	r1, [pc, #72]	; (8001274 <Servo_SetAngle+0x68>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fed8 	bl	8000fe0 <__aeabi_fcmplt>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <Servo_SetAngle+0x2e>
		ServoAngle = -90;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <Servo_SetAngle+0x68>)
 8001238:	607b      	str	r3, [r7, #4]
	//	uint16_t ServoCPR = 540 + ServoAngle*2;
	LL_TIM_OC_SetCompareCH1(TIM4, 4550 + ServoAngle * 50 / 3);
 800123a:	490f      	ldr	r1, [pc, #60]	; (8001278 <Servo_SetAngle+0x6c>)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fd31 	bl	8000ca4 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	490d      	ldr	r1, [pc, #52]	; (800127c <Servo_SetAngle+0x70>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fde0 	bl	8000e0c <__aeabi_fdiv>
 800124c:	4603      	mov	r3, r0
 800124e:	490c      	ldr	r1, [pc, #48]	; (8001280 <Servo_SetAngle+0x74>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc1f 	bl	8000a94 <__addsf3>
 8001256:	4603      	mov	r3, r0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fee9 	bl	8001030 <__aeabi_f2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	4619      	mov	r1, r3
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <Servo_SetAngle+0x78>)
 8001264:	f7ff ff14 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	42b40000 	.word	0x42b40000
 8001274:	c2b40000 	.word	0xc2b40000
 8001278:	42480000 	.word	0x42480000
 800127c:	40400000 	.word	0x40400000
 8001280:	458e3000 	.word	0x458e3000
 8001284:	40000800 	.word	0x40000800

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <__NVIC_EnableIRQ+0x34>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	332c      	adds	r3, #44	; 0x2c
 80013ec:	4619      	mov	r1, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013f8:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	fa92 f2a2 	rbit	r2, r2
 8001400:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	fab2 f282 	clz	r2, r2
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	40d3      	lsrs	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	211f      	movs	r1, #31
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	401a      	ands	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f003 011f 	and.w	r1, r3, #31
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	431a      	orrs	r2, r3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800143c:	bf00      	nop
 800143e:	3724      	adds	r7, #36	; 0x24
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800146a:	b480      	push	{r7}
 800146c:	b08d      	sub	sp, #52	; 0x34
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	330c      	adds	r3, #12
 800147a:	4619      	mov	r1, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001482:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	fa92 f2a2 	rbit	r2, r2
 800148e:	617a      	str	r2, [r7, #20]
  return result;
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	fab2 f282 	clz	r2, r2
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	40d3      	lsrs	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 80014a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014aa:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014ae:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b0:	6a39      	ldr	r1, [r7, #32]
 80014b2:	fa91 f1a1 	rbit	r1, r1
 80014b6:	61f9      	str	r1, [r7, #28]
  return result;
 80014b8:	69f9      	ldr	r1, [r7, #28]
 80014ba:	fab1 f181 	clz	r1, r1
 80014be:	b2c9      	uxtb	r1, r1
 80014c0:	40cb      	lsrs	r3, r1
 80014c2:	2107      	movs	r1, #7
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	401a      	ands	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014d2:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014d6:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014da:	fa91 f1a1 	rbit	r1, r1
 80014de:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 80014e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e2:	fab1 f181 	clz	r1, r1
 80014e6:	b2c9      	uxtb	r1, r1
 80014e8:	40cb      	lsrs	r3, r1
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	431a      	orrs	r2, r3
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80014f6:	bf00      	nop
 80014f8:	3734      	adds	r7, #52	; 0x34
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f043 0204 	orr.w	r2, r3, #4
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	609a      	str	r2, [r3, #8]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b04      	cmp	r3, #4
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <LL_DMA_EnableChannel+0x38>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	461a      	mov	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	3a01      	subs	r2, #1
 800159e:	4906      	ldr	r1, [pc, #24]	; (80015b8 <LL_DMA_EnableChannel+0x38>)
 80015a0:	5c8a      	ldrb	r2, [r1, r2]
 80015a2:	4611      	mov	r1, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	440a      	add	r2, r1
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6013      	str	r3, [r2, #0]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	08008900 	.word	0x08008900

080015bc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <LL_DMA_SetDataTransferDirection+0x44>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	461a      	mov	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015dc:	f023 0310 	bic.w	r3, r3, #16
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	3a01      	subs	r2, #1
 80015e4:	4906      	ldr	r1, [pc, #24]	; (8001600 <LL_DMA_SetDataTransferDirection+0x44>)
 80015e6:	5c8a      	ldrb	r2, [r1, r2]
 80015e8:	4611      	mov	r1, r2
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	440a      	add	r2, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	08008900 	.word	0x08008900

08001604 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	3b01      	subs	r3, #1
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <LL_DMA_SetMode+0x40>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	461a      	mov	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 0220 	bic.w	r2, r3, #32
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	3b01      	subs	r3, #1
 8001628:	4906      	ldr	r1, [pc, #24]	; (8001644 <LL_DMA_SetMode+0x40>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	4619      	mov	r1, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	440b      	add	r3, r1
 8001632:	4619      	mov	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
             Mode);
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	08008900 	.word	0x08008900

08001648 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	3b01      	subs	r3, #1
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <LL_DMA_SetPeriphIncMode+0x40>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	461a      	mov	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	3b01      	subs	r3, #1
 800166c:	4906      	ldr	r1, [pc, #24]	; (8001688 <LL_DMA_SetPeriphIncMode+0x40>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	4619      	mov	r1, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	440b      	add	r3, r1
 8001676:	4619      	mov	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	08008900 	.word	0x08008900

0800168c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	3b01      	subs	r3, #1
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LL_DMA_SetMemoryIncMode+0x40>)
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	461a      	mov	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4413      	add	r3, r2
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4906      	ldr	r1, [pc, #24]	; (80016cc <LL_DMA_SetMemoryIncMode+0x40>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	4619      	mov	r1, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	440b      	add	r3, r1
 80016ba:	4619      	mov	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	08008900 	.word	0x08008900

080016d0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LL_DMA_SetPeriphSize+0x40>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	461a      	mov	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	4906      	ldr	r1, [pc, #24]	; (8001710 <LL_DMA_SetPeriphSize+0x40>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	4619      	mov	r1, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	440b      	add	r3, r1
 80016fe:	4619      	mov	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	08008900 	.word	0x08008900

08001714 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	3b01      	subs	r3, #1
 8001724:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <LL_DMA_SetMemorySize+0x40>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	461a      	mov	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4413      	add	r3, r2
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3b01      	subs	r3, #1
 8001738:	4906      	ldr	r1, [pc, #24]	; (8001754 <LL_DMA_SetMemorySize+0x40>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	4619      	mov	r1, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	440b      	add	r3, r1
 8001742:	4619      	mov	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	08008900 	.word	0x08008900

08001758 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	3b01      	subs	r3, #1
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	461a      	mov	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	3b01      	subs	r3, #1
 800177c:	4906      	ldr	r1, [pc, #24]	; (8001798 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	4619      	mov	r1, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	440b      	add	r3, r1
 8001786:	4619      	mov	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	08008900 	.word	0x08008900

0800179c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <LL_DMA_SetDataLength+0x40>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	461a      	mov	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	3a01      	subs	r2, #1
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <LL_DMA_SetDataLength+0x40>)
 80017c2:	5c8a      	ldrb	r2, [r1, r2]
 80017c4:	4611      	mov	r1, r2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	440a      	add	r2, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	08008900 	.word	0x08008900

080017e0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <LL_DMA_SetMemoryAddress+0x2c>)
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	461a      	mov	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4413      	add	r3, r2
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	08008900 	.word	0x08008900

08001810 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3b01      	subs	r3, #1
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <LL_DMA_SetPeriphAddress+0x2c>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	461a      	mov	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4413      	add	r3, r2
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6093      	str	r3, [r2, #8]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	08008900 	.word	0x08008900

08001840 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f023 0201 	bic.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60da      	str	r2, [r3, #12]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <LL_RCC_HSE_Enable+0x18>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a03      	ldr	r2, [pc, #12]	; (80018f4 <LL_RCC_HSE_Enable+0x18>)
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <LL_RCC_HSE_IsReady+0x20>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001908:	bf0c      	ite	eq
 800190a:	2301      	moveq	r3, #1
 800190c:	2300      	movne	r3, #0
 800190e:	b2db      	uxtb	r3, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000

0800191c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <LL_RCC_SetSysClkSource+0x24>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 0203 	bic.w	r2, r3, #3
 800192c:	4904      	ldr	r1, [pc, #16]	; (8001940 <LL_RCC_SetSysClkSource+0x24>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000

08001944 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <LL_RCC_GetSysClkSource+0x14>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000

0800195c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <LL_RCC_SetAHBPrescaler+0x24>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	4904      	ldr	r1, [pc, #16]	; (8001980 <LL_RCC_SetAHBPrescaler+0x24>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001994:	4904      	ldr	r1, [pc, #16]	; (80019a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019bc:	4904      	ldr	r1, [pc, #16]	; (80019d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000

080019d4 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <LL_RCC_SetADCClockSource+0x24>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019e4:	4904      	ldr	r1, [pc, #16]	; (80019f8 <LL_RCC_SetADCClockSource+0x24>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <LL_RCC_PLL_Enable+0x18>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <LL_RCC_PLL_Enable+0x18>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	40021000 	.word	0x40021000

08001a18 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <LL_RCC_PLL_IsReady+0x20>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000

08001a3c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	430b      	orrs	r3, r1
 8001a58:	4903      	ldr	r1, [pc, #12]	; (8001a68 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40021000 	.word	0x40021000

08001a6c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	4907      	ldr	r1, [pc, #28]	; (8001a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000

08001acc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <LL_FLASH_SetLatency+0x24>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 0207 	bic.w	r2, r3, #7
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <LL_FLASH_SetLatency+0x24>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000

08001b24 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <LL_FLASH_GetLatency+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40022000 	.word	0x40022000

08001b3c <LL_TIM_EnableCounter>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f043 0201 	orr.w	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <LL_TIM_DisableARRPreload>:
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <LL_TIM_SetCounter>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <LL_TIM_OC_DisableFast>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d01c      	beq.n	8001bde <LL_TIM_OC_DisableFast+0x4a>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d017      	beq.n	8001bda <LL_TIM_OC_DisableFast+0x46>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d012      	beq.n	8001bd6 <LL_TIM_OC_DisableFast+0x42>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b40      	cmp	r3, #64	; 0x40
 8001bb4:	d00d      	beq.n	8001bd2 <LL_TIM_OC_DisableFast+0x3e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bbc:	d007      	beq.n	8001bce <LL_TIM_OC_DisableFast+0x3a>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d101      	bne.n	8001bca <LL_TIM_OC_DisableFast+0x36>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e00a      	b.n	8001be0 <LL_TIM_OC_DisableFast+0x4c>
 8001bca:	2306      	movs	r3, #6
 8001bcc:	e008      	b.n	8001be0 <LL_TIM_OC_DisableFast+0x4c>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e006      	b.n	8001be0 <LL_TIM_OC_DisableFast+0x4c>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <LL_TIM_OC_DisableFast+0x4c>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <LL_TIM_OC_DisableFast+0x4c>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_TIM_OC_DisableFast+0x4c>
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3318      	adds	r3, #24
 8001be6:	4619      	mov	r1, r3
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <LL_TIM_OC_DisableFast+0x80>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	440b      	add	r3, r1
 8001bf0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <LL_TIM_OC_DisableFast+0x84>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	2304      	movs	r3, #4
 8001c00:	408b      	lsls	r3, r1
 8001c02:	43db      	mvns	r3, r3
 8001c04:	401a      	ands	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	601a      	str	r2, [r3, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	08008908 	.word	0x08008908
 8001c18:	08008910 	.word	0x08008910

08001c1c <LL_TIM_OC_EnablePreload>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d01c      	beq.n	8001c66 <LL_TIM_OC_EnablePreload+0x4a>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d017      	beq.n	8001c62 <LL_TIM_OC_EnablePreload+0x46>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d012      	beq.n	8001c5e <LL_TIM_OC_EnablePreload+0x42>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b40      	cmp	r3, #64	; 0x40
 8001c3c:	d00d      	beq.n	8001c5a <LL_TIM_OC_EnablePreload+0x3e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c44:	d007      	beq.n	8001c56 <LL_TIM_OC_EnablePreload+0x3a>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4c:	d101      	bne.n	8001c52 <LL_TIM_OC_EnablePreload+0x36>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e00a      	b.n	8001c68 <LL_TIM_OC_EnablePreload+0x4c>
 8001c52:	2306      	movs	r3, #6
 8001c54:	e008      	b.n	8001c68 <LL_TIM_OC_EnablePreload+0x4c>
 8001c56:	2304      	movs	r3, #4
 8001c58:	e006      	b.n	8001c68 <LL_TIM_OC_EnablePreload+0x4c>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e004      	b.n	8001c68 <LL_TIM_OC_EnablePreload+0x4c>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e002      	b.n	8001c68 <LL_TIM_OC_EnablePreload+0x4c>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_TIM_OC_EnablePreload+0x4c>
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3318      	adds	r3, #24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <LL_TIM_OC_EnablePreload+0x80>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	440b      	add	r3, r1
 8001c78:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <LL_TIM_OC_EnablePreload+0x84>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	4619      	mov	r1, r3
 8001c86:	2308      	movs	r3, #8
 8001c88:	408b      	lsls	r3, r1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	08008908 	.word	0x08008908
 8001ca0:	08008910 	.word	0x08008910

08001ca4 <LL_TIM_OC_DisablePreload>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d01c      	beq.n	8001cee <LL_TIM_OC_DisablePreload+0x4a>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d017      	beq.n	8001cea <LL_TIM_OC_DisablePreload+0x46>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d012      	beq.n	8001ce6 <LL_TIM_OC_DisablePreload+0x42>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d00d      	beq.n	8001ce2 <LL_TIM_OC_DisablePreload+0x3e>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ccc:	d007      	beq.n	8001cde <LL_TIM_OC_DisablePreload+0x3a>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd4:	d101      	bne.n	8001cda <LL_TIM_OC_DisablePreload+0x36>
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	e00a      	b.n	8001cf0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	e008      	b.n	8001cf0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e006      	b.n	8001cf0 <LL_TIM_OC_DisablePreload+0x4c>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <LL_TIM_OC_DisablePreload+0x4c>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3318      	adds	r3, #24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <LL_TIM_OC_DisablePreload+0x80>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	440b      	add	r3, r1
 8001d00:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <LL_TIM_OC_DisablePreload+0x84>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	2308      	movs	r3, #8
 8001d10:	408b      	lsls	r3, r1
 8001d12:	43db      	mvns	r3, r3
 8001d14:	401a      	ands	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	08008908 	.word	0x08008908
 8001d28:	08008910 	.word	0x08008910

08001d2c <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d01c      	beq.n	8001d78 <LL_TIM_IC_SetActiveInput+0x4c>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d017      	beq.n	8001d74 <LL_TIM_IC_SetActiveInput+0x48>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d012      	beq.n	8001d70 <LL_TIM_IC_SetActiveInput+0x44>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b40      	cmp	r3, #64	; 0x40
 8001d4e:	d00d      	beq.n	8001d6c <LL_TIM_IC_SetActiveInput+0x40>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d56:	d007      	beq.n	8001d68 <LL_TIM_IC_SetActiveInput+0x3c>
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5e:	d101      	bne.n	8001d64 <LL_TIM_IC_SetActiveInput+0x38>
 8001d60:	2305      	movs	r3, #5
 8001d62:	e00a      	b.n	8001d7a <LL_TIM_IC_SetActiveInput+0x4e>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e008      	b.n	8001d7a <LL_TIM_IC_SetActiveInput+0x4e>
 8001d68:	2304      	movs	r3, #4
 8001d6a:	e006      	b.n	8001d7a <LL_TIM_IC_SetActiveInput+0x4e>
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e004      	b.n	8001d7a <LL_TIM_IC_SetActiveInput+0x4e>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e002      	b.n	8001d7a <LL_TIM_IC_SetActiveInput+0x4e>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_TIM_IC_SetActiveInput+0x4e>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3318      	adds	r3, #24
 8001d80:	4619      	mov	r1, r3
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <LL_TIM_IC_SetActiveInput+0x90>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	440b      	add	r3, r1
 8001d8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	490b      	ldr	r1, [pc, #44]	; (8001dc0 <LL_TIM_IC_SetActiveInput+0x94>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	4619      	mov	r1, r3
 8001d98:	2303      	movs	r3, #3
 8001d9a:	408b      	lsls	r3, r1
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	401a      	ands	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0c1b      	lsrs	r3, r3, #16
 8001da4:	7df9      	ldrb	r1, [r7, #23]
 8001da6:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <LL_TIM_IC_SetActiveInput+0x94>)
 8001da8:	5c41      	ldrb	r1, [r0, r1]
 8001daa:	408b      	lsls	r3, r1
 8001dac:	431a      	orrs	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	08008908 	.word	0x08008908
 8001dc0:	08008918 	.word	0x08008918

08001dc4 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d01c      	beq.n	8001e10 <LL_TIM_IC_SetPrescaler+0x4c>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d017      	beq.n	8001e0c <LL_TIM_IC_SetPrescaler+0x48>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	2b10      	cmp	r3, #16
 8001de0:	d012      	beq.n	8001e08 <LL_TIM_IC_SetPrescaler+0x44>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d00d      	beq.n	8001e04 <LL_TIM_IC_SetPrescaler+0x40>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dee:	d007      	beq.n	8001e00 <LL_TIM_IC_SetPrescaler+0x3c>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df6:	d101      	bne.n	8001dfc <LL_TIM_IC_SetPrescaler+0x38>
 8001df8:	2305      	movs	r3, #5
 8001dfa:	e00a      	b.n	8001e12 <LL_TIM_IC_SetPrescaler+0x4e>
 8001dfc:	2306      	movs	r3, #6
 8001dfe:	e008      	b.n	8001e12 <LL_TIM_IC_SetPrescaler+0x4e>
 8001e00:	2304      	movs	r3, #4
 8001e02:	e006      	b.n	8001e12 <LL_TIM_IC_SetPrescaler+0x4e>
 8001e04:	2303      	movs	r3, #3
 8001e06:	e004      	b.n	8001e12 <LL_TIM_IC_SetPrescaler+0x4e>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e002      	b.n	8001e12 <LL_TIM_IC_SetPrescaler+0x4e>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <LL_TIM_IC_SetPrescaler+0x4e>
 8001e10:	2300      	movs	r3, #0
 8001e12:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3318      	adds	r3, #24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	7dfb      	ldrb	r3, [r7, #23]
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <LL_TIM_IC_SetPrescaler+0x90>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	440b      	add	r3, r1
 8001e22:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	490b      	ldr	r1, [pc, #44]	; (8001e58 <LL_TIM_IC_SetPrescaler+0x94>)
 8001e2c:	5ccb      	ldrb	r3, [r1, r3]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	230c      	movs	r3, #12
 8001e32:	408b      	lsls	r3, r1
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	7df9      	ldrb	r1, [r7, #23]
 8001e3e:	4806      	ldr	r0, [pc, #24]	; (8001e58 <LL_TIM_IC_SetPrescaler+0x94>)
 8001e40:	5c41      	ldrb	r1, [r0, r1]
 8001e42:	408b      	lsls	r3, r1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	601a      	str	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	08008908 	.word	0x08008908
 8001e58:	08008918 	.word	0x08008918

08001e5c <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d01c      	beq.n	8001ea8 <LL_TIM_IC_SetFilter+0x4c>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d017      	beq.n	8001ea4 <LL_TIM_IC_SetFilter+0x48>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d012      	beq.n	8001ea0 <LL_TIM_IC_SetFilter+0x44>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b40      	cmp	r3, #64	; 0x40
 8001e7e:	d00d      	beq.n	8001e9c <LL_TIM_IC_SetFilter+0x40>
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e86:	d007      	beq.n	8001e98 <LL_TIM_IC_SetFilter+0x3c>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8e:	d101      	bne.n	8001e94 <LL_TIM_IC_SetFilter+0x38>
 8001e90:	2305      	movs	r3, #5
 8001e92:	e00a      	b.n	8001eaa <LL_TIM_IC_SetFilter+0x4e>
 8001e94:	2306      	movs	r3, #6
 8001e96:	e008      	b.n	8001eaa <LL_TIM_IC_SetFilter+0x4e>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e006      	b.n	8001eaa <LL_TIM_IC_SetFilter+0x4e>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e004      	b.n	8001eaa <LL_TIM_IC_SetFilter+0x4e>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e002      	b.n	8001eaa <LL_TIM_IC_SetFilter+0x4e>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <LL_TIM_IC_SetFilter+0x4e>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3318      	adds	r3, #24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <LL_TIM_IC_SetFilter+0x90>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	440b      	add	r3, r1
 8001eba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	490b      	ldr	r1, [pc, #44]	; (8001ef0 <LL_TIM_IC_SetFilter+0x94>)
 8001ec4:	5ccb      	ldrb	r3, [r1, r3]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	23f0      	movs	r3, #240	; 0xf0
 8001eca:	408b      	lsls	r3, r1
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	0c1b      	lsrs	r3, r3, #16
 8001ed4:	7df9      	ldrb	r1, [r7, #23]
 8001ed6:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <LL_TIM_IC_SetFilter+0x94>)
 8001ed8:	5c41      	ldrb	r1, [r0, r1]
 8001eda:	408b      	lsls	r3, r1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	08008908 	.word	0x08008908
 8001ef0:	08008918 	.word	0x08008918

08001ef4 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d01c      	beq.n	8001f40 <LL_TIM_IC_SetPolarity+0x4c>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d017      	beq.n	8001f3c <LL_TIM_IC_SetPolarity+0x48>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d012      	beq.n	8001f38 <LL_TIM_IC_SetPolarity+0x44>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d00d      	beq.n	8001f34 <LL_TIM_IC_SetPolarity+0x40>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1e:	d007      	beq.n	8001f30 <LL_TIM_IC_SetPolarity+0x3c>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f26:	d101      	bne.n	8001f2c <LL_TIM_IC_SetPolarity+0x38>
 8001f28:	2305      	movs	r3, #5
 8001f2a:	e00a      	b.n	8001f42 <LL_TIM_IC_SetPolarity+0x4e>
 8001f2c:	2306      	movs	r3, #6
 8001f2e:	e008      	b.n	8001f42 <LL_TIM_IC_SetPolarity+0x4e>
 8001f30:	2304      	movs	r3, #4
 8001f32:	e006      	b.n	8001f42 <LL_TIM_IC_SetPolarity+0x4e>
 8001f34:	2303      	movs	r3, #3
 8001f36:	e004      	b.n	8001f42 <LL_TIM_IC_SetPolarity+0x4e>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e002      	b.n	8001f42 <LL_TIM_IC_SetPolarity+0x4e>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <LL_TIM_IC_SetPolarity+0x4e>
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	490a      	ldr	r1, [pc, #40]	; (8001f74 <LL_TIM_IC_SetPolarity+0x80>)
 8001f4c:	5ccb      	ldrb	r3, [r1, r3]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	230a      	movs	r3, #10
 8001f52:	408b      	lsls	r3, r1
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	4906      	ldr	r1, [pc, #24]	; (8001f74 <LL_TIM_IC_SetPolarity+0x80>)
 8001f5c:	5ccb      	ldrb	r3, [r1, r3]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	408b      	lsls	r3, r1
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	08008920 	.word	0x08008920

08001f78 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f8a:	f023 0307 	bic.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	609a      	str	r2, [r3, #8]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	605a      	str	r2, [r3, #4]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f06f 0201 	mvn.w	r2, #1
 8002032:	611a      	str	r2, [r3, #16]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f06f 0202 	mvn.w	r2, #2
 800204c:	611a      	str	r2, [r3, #16]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f043 0202 	orr.w	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60da      	str	r2, [r3, #12]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	60da      	str	r2, [r3, #12]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	615a      	str	r2, [r3, #20]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	2b40      	cmp	r3, #64	; 0x40
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	605a      	str	r2, [r3, #4]
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <LL_GPIO_SetPinMode>:
{
 800211c:	b490      	push	{r4, r7}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	0e1b      	lsrs	r3, r3, #24
 8002130:	4413      	add	r3, r2
 8002132:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002134:	6822      	ldr	r2, [r4, #0]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	613b      	str	r3, [r7, #16]
  return result;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	210f      	movs	r1, #15
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	401a      	ands	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	61bb      	str	r3, [r7, #24]
  return result;
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	6023      	str	r3, [r4, #0]
}
 8002176:	bf00      	nop
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bc90      	pop	{r4, r7}
 800217e:	4770      	bx	lr

08002180 <LL_GPIO_IsInputPinSet>:
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	43da      	mvns	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	4013      	ands	r3, r2
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <LL_GPIO_ResetOutputPin>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	615a      	str	r2, [r3, #20]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 80021d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	6053      	str	r3, [r2, #4]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40010000 	.word	0x40010000

080021ec <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80021f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6053      	str	r3, [r2, #4]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40010000 	.word	0x40010000

0800220c <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8002216:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800221a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800221e:	6053      	str	r3, [r2, #4]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40010000 	.word	0x40010000

0800222c <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002238:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 800223e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002246:	6053      	str	r3, [r2, #4]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40010000 	.word	0x40010000

08002254 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a06      	ldr	r2, [pc, #24]	; (8002278 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800225e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002262:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a03      	ldr	r2, [pc, #12]	; (8002278 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800226a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226e:	6053      	str	r3, [r2, #4]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40010000 	.word	0x40010000

0800227c <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3302      	adds	r3, #2
 800228e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	43db      	mvns	r3, r3
 8002298:	ea02 0103 	and.w	r1, r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	60bb      	str	r3, [r7, #8]
  return result;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	fa03 f202 	lsl.w	r2, r3, r2
 80022ba:	4806      	ldr	r0, [pc, #24]	; (80022d4 <LL_GPIO_AF_SetEXTISource+0x58>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	430a      	orrs	r2, r1
 80022c2:	3302      	adds	r3, #2
 80022c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40010000 	.word	0x40010000

080022d8 <__io_putchar>:
void Car_Avoid_Process();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1) == 0) {
 80022e0:	bf00      	nop
 80022e2:	4808      	ldr	r0, [pc, #32]	; (8002304 <__io_putchar+0x2c>)
 80022e4:	f7ff fefa 	bl	80020dc <LL_USART_IsActiveFlag_TC>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f9      	beq.n	80022e2 <__io_putchar+0xa>
	}
	LL_USART_TransmitData8(USART1, (uint8_t) ch);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <__io_putchar+0x2c>)
 80022f6:	f7ff ff03 	bl	8002100 <LL_USART_TransmitData8>

	return ch;
 80022fa:	687b      	ldr	r3, [r7, #4]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40013800 	.word	0x40013800

08002308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800230e:	2001      	movs	r0, #1
 8002310:	f7ff fbdc 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002314:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002318:	f7ff fbc0 	bl	8001a9c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800231c:	2003      	movs	r0, #3
 800231e:	f7fe ffb3 	bl	8001288 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002322:	f7fe ffd5 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002326:	4603      	mov	r3, r0
 8002328:	2200      	movs	r2, #0
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f823 	bl	8001378 <NVIC_EncodePriority>
 8002332:	4603      	mov	r3, r0
 8002334:	4619      	mov	r1, r3
 8002336:	f06f 000b 	mvn.w	r0, #11
 800233a:	f7fe fff3 	bl	8001324 <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800233e:	f7fe ffc7 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002342:	4603      	mov	r3, r0
 8002344:	2200      	movs	r2, #0
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f815 	bl	8001378 <NVIC_EncodePriority>
 800234e:	4603      	mov	r3, r0
 8002350:	4619      	mov	r1, r3
 8002352:	f06f 000a 	mvn.w	r0, #10
 8002356:	f7fe ffe5 	bl	8001324 <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800235a:	f7fe ffb9 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800235e:	4603      	mov	r3, r0
 8002360:	2200      	movs	r2, #0
 8002362:	2101      	movs	r1, #1
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff f807 	bl	8001378 <NVIC_EncodePriority>
 800236a:	4603      	mov	r3, r0
 800236c:	4619      	mov	r1, r3
 800236e:	f06f 0009 	mvn.w	r0, #9
 8002372:	f7fe ffd7 	bl	8001324 <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002376:	f7fe ffab 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800237a:	4603      	mov	r3, r0
 800237c:	2200      	movs	r2, #0
 800237e:	2101      	movs	r1, #1
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fff9 	bl	8001378 <NVIC_EncodePriority>
 8002386:	4603      	mov	r3, r0
 8002388:	4619      	mov	r1, r3
 800238a:	f06f 0004 	mvn.w	r0, #4
 800238e:	f7fe ffc9 	bl	8001324 <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002392:	f7fe ff9d 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002396:	4603      	mov	r3, r0
 8002398:	2200      	movs	r2, #0
 800239a:	2101      	movs	r1, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe ffeb 	bl	8001378 <NVIC_EncodePriority>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4619      	mov	r1, r3
 80023a6:	f06f 0003 	mvn.w	r0, #3
 80023aa:	f7fe ffbb 	bl	8001324 <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023ae:	f7fe ff8f 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2200      	movs	r2, #0
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe ffdd 	bl	8001378 <NVIC_EncodePriority>
 80023be:	4603      	mov	r3, r0
 80023c0:	4619      	mov	r1, r3
 80023c2:	f06f 0001 	mvn.w	r0, #1
 80023c6:	f7fe ffad 	bl	8001324 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023ca:	f7fe ff81 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2200      	movs	r2, #0
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe ffcf 	bl	8001378 <NVIC_EncodePriority>
 80023da:	4603      	mov	r3, r0
 80023dc:	4619      	mov	r1, r3
 80023de:	f04f 30ff 	mov.w	r0, #4294967295
 80023e2:	f7fe ff9f 	bl	8001324 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80023e6:	f7ff ff35 	bl	8002254 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
	setvbuf(stdin, NULL, _IONBF, 0);
 80023ea:	4ba6      	ldr	r3, [pc, #664]	; (8002684 <main+0x37c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6858      	ldr	r0, [r3, #4]
 80023f0:	2300      	movs	r3, #0
 80023f2:	2202      	movs	r2, #2
 80023f4:	2100      	movs	r1, #0
 80023f6:	f004 f8d5 	bl	80065a4 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 80023fa:	4ba2      	ldr	r3, [pc, #648]	; (8002684 <main+0x37c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6898      	ldr	r0, [r3, #8]
 8002400:	2300      	movs	r3, #0
 8002402:	2202      	movs	r2, #2
 8002404:	2100      	movs	r1, #0
 8002406:	f004 f8cd 	bl	80065a4 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 800240a:	4b9e      	ldr	r3, [pc, #632]	; (8002684 <main+0x37c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68d8      	ldr	r0, [r3, #12]
 8002410:	2300      	movs	r3, #0
 8002412:	2202      	movs	r2, #2
 8002414:	2100      	movs	r1, #0
 8002416:	f004 f8c5 	bl	80065a4 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800241a:	f000 fa7f 	bl	800291c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800241e:	f000 ff13 	bl	8003248 <MX_GPIO_Init>
  MX_DMA_Init();
 8002422:	f000 fef9 	bl	8003218 <MX_DMA_Init>
  MX_TIM1_Init();
 8002426:	f000 fc2b 	bl	8002c80 <MX_TIM1_Init>
  MX_ADC1_Init();
 800242a:	f000 fab9 	bl	80029a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800242e:	f000 fbcd 	bl	8002bcc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002432:	f000 fe99 	bl	8003168 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002436:	f000 fcd3 	bl	8002de0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800243a:	f000 fd81 	bl	8002f40 <MX_TIM3_Init>
  MX_TIM4_Init();
 800243e:	f000 fe0f 	bl	8003060 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	MotorL_EnablePWM();
 8002442:	f7fe fe5d 	bl	8001100 <MotorL_EnablePWM>
	MotorR_EnablePWM();
 8002446:	f7fe fe65 	bl	8001114 <MotorR_EnablePWM>
	MotorL_SetPWM(0);
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe fe6e 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fea3 	bl	800119c <MotorR_SetPWM>
	Servo_SetAngle(0);
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	f7fe fed7 	bl	800120c <Servo_SetAngle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//  uint32_t Count = LL_TIM_GetCounter(TIM2);
	uint8_t DistanceState = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	71fb      	strb	r3, [r7, #7]
	while (1) {
//		LL_mDelay(1);
	Sensor_Convert_A2D();
 8002462:	f001 f8f9 	bl	8003658 <Sensor_Convert_A2D>
//	  Sensor_Print_LineDetect();
#endif

#if NormalRun == 1

    DistanceState = LL_GPIO_IsInputPinSet(Distance_GPIO_Port, Distance_Pin);
 8002466:	f240 1101 	movw	r1, #257	; 0x101
 800246a:	4887      	ldr	r0, [pc, #540]	; (8002688 <main+0x380>)
 800246c:	f7ff fe88 	bl	8002180 <LL_GPIO_IsInputPinSet>
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]

    if(GetThreshold_Flag == 1)
 8002474:	4b85      	ldr	r3, [pc, #532]	; (800268c <main+0x384>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10c      	bne.n	8002496 <main+0x18e>
    {
    	while(LL_GPIO_IsInputPinSet(BTN1_GPIO_Port,BTN1_Pin) == 0);
 800247c:	bf00      	nop
 800247e:	4984      	ldr	r1, [pc, #528]	; (8002690 <main+0x388>)
 8002480:	4881      	ldr	r0, [pc, #516]	; (8002688 <main+0x380>)
 8002482:	f7ff fe7d 	bl	8002180 <LL_GPIO_IsInputPinSet>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f8      	beq.n	800247e <main+0x176>
    	GetThreshold_Flag = 0;
 800248c:	4b7f      	ldr	r3, [pc, #508]	; (800268c <main+0x384>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
    	GetThreshold();
 8002492:	f000 ffc3 	bl	800341c <GetThreshold>
    }
    if(BTN3_Flag == 0){
 8002496:	4b7f      	ldr	r3, [pc, #508]	; (8002694 <main+0x38c>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d11f      	bne.n	80024de <main+0x1d6>
    	MotorL_SetPWM(0);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe fe44 	bl	800112c <MotorL_SetPWM>
    	MotorR_SetPWM(0);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fe79 	bl	800119c <MotorR_SetPWM>
    	Servo_SetAngle(0);
 80024aa:	f04f 0000 	mov.w	r0, #0
 80024ae:	f7fe fead 	bl	800120c <Servo_SetAngle>
    	CarState = 0;
 80024b2:	4b79      	ldr	r3, [pc, #484]	; (8002698 <main+0x390>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    	FullWhiteFlag = 0;
 80024b8:	4b78      	ldr	r3, [pc, #480]	; (800269c <main+0x394>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
    	HalfWhiteFlag = 0;
 80024be:	4b78      	ldr	r3, [pc, #480]	; (80026a0 <main+0x398>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
    	HalfWhiteFlag_Raw = 0;
 80024c4:	4b77      	ldr	r3, [pc, #476]	; (80026a4 <main+0x39c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    	MatLineFlag = 0;
 80024ca:	4b77      	ldr	r3, [pc, #476]	; (80026a8 <main+0x3a0>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
    	CuaFlag = 0;
 80024d0:	4b76      	ldr	r3, [pc, #472]	; (80026ac <main+0x3a4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
    	LineDetect = 0;
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <main+0x3a8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
    	continue;
 80024dc:	e208      	b.n	80028f0 <main+0x5e8>
    }
    if (HalfWhiteFlag != 0 || FullWhiteFlag != 0 ||
 80024de:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <main+0x398>)
 80024e0:	f993 3000 	ldrsb.w	r3, [r3]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <main+0x1fc>
 80024e8:	4b6c      	ldr	r3, [pc, #432]	; (800269c <main+0x394>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <main+0x1fc>
    	HalfWhiteFlag_Raw != 0 || ChuyenLaneFlag != 0)
 80024f0:	4b6c      	ldr	r3, [pc, #432]	; (80026a4 <main+0x39c>)
 80024f2:	f993 3000 	ldrsb.w	r3, [r3]
    if (HalfWhiteFlag != 0 || FullWhiteFlag != 0 ||
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d104      	bne.n	8002504 <main+0x1fc>
    	HalfWhiteFlag_Raw != 0 || ChuyenLaneFlag != 0)
 80024fa:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <main+0x3ac>)
 80024fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <main+0x206>
    {
      MaxSpeed = SignalSpeed;
 8002504:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <main+0x3b0>)
 8002506:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800250a:	801a      	strh	r2, [r3, #0]
 800250c:	e003      	b.n	8002516 <main+0x20e>
    }
    else
    {
      MaxSpeed = MaximumSpeed;
 800250e:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <main+0x3b0>)
 8002510:	f641 22f4 	movw	r2, #6900	; 0x1af4
 8002514:	801a      	strh	r2, [r3, #0]
    }
    if (CarState == DiThang)
 8002516:	4b60      	ldr	r3, [pc, #384]	; (8002698 <main+0x390>)
 8002518:	f993 3000 	ldrsb.w	r3, [r3]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d136      	bne.n	800258e <main+0x286>
        {
          if (LineDetect == 0b10000000 || LineDetect == 0b11000000 ||
 8002520:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <main+0x3a8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b80      	cmp	r3, #128	; 0x80
 8002526:	d013      	beq.n	8002550 <main+0x248>
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <main+0x3a8>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2bc0      	cmp	r3, #192	; 0xc0
 800252e:	d00f      	beq.n	8002550 <main+0x248>
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 8002530:	4b5f      	ldr	r3, [pc, #380]	; (80026b0 <main+0x3a8>)
 8002532:	781b      	ldrb	r3, [r3, #0]
          if (LineDetect == 0b10000000 || LineDetect == 0b11000000 ||
 8002534:	2be0      	cmp	r3, #224	; 0xe0
 8002536:	d00b      	beq.n	8002550 <main+0x248>
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 8002538:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <main+0x3a8>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d007      	beq.n	8002550 <main+0x248>
              LineDetect == 0b00110000 || LineDetect == 0b00010000)
 8002540:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <main+0x3a8>)
 8002542:	781b      	ldrb	r3, [r3, #0]
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 8002544:	2b30      	cmp	r3, #48	; 0x30
 8002546:	d003      	beq.n	8002550 <main+0x248>
              LineDetect == 0b00110000 || LineDetect == 0b00010000)
 8002548:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <main+0x3a8>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b10      	cmp	r3, #16
 800254e:	d103      	bne.n	8002558 <main+0x250>
          {
            CarState = LechPhai;// 25-30us
 8002550:	4b51      	ldr	r3, [pc, #324]	; (8002698 <main+0x390>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e01a      	b.n	800258e <main+0x286>
          }
          else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 8002558:	4b55      	ldr	r3, [pc, #340]	; (80026b0 <main+0x3a8>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d013      	beq.n	8002588 <main+0x280>
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <main+0x3a8>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d00f      	beq.n	8002588 <main+0x280>
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 8002568:	4b51      	ldr	r3, [pc, #324]	; (80026b0 <main+0x3a8>)
 800256a:	781b      	ldrb	r3, [r3, #0]
          else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 800256c:	2b07      	cmp	r3, #7
 800256e:	d00b      	beq.n	8002588 <main+0x280>
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <main+0x3a8>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b0e      	cmp	r3, #14
 8002576:	d007      	beq.n	8002588 <main+0x280>
                   LineDetect == 0b00001100 || LineDetect == 0b00001000)
 8002578:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <main+0x3a8>)
 800257a:	781b      	ldrb	r3, [r3, #0]
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d003      	beq.n	8002588 <main+0x280>
                   LineDetect == 0b00001100 || LineDetect == 0b00001000)
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <main+0x3a8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d102      	bne.n	800258e <main+0x286>
          {
            CarState = LechTrai;// 25-30us
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <main+0x390>)
 800258a:	22ff      	movs	r2, #255	; 0xff
 800258c:	701a      	strb	r2, [r3, #0]
          }
        }
    if(FullWhiteFlag == 1 && DistanceState == 0)
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <main+0x394>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d108      	bne.n	80025a8 <main+0x2a0>
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <main+0x2a0>
    {
    	Car_Avoid_Process();
 800259c:	f001 fe88 	bl	80042b0 <Car_Avoid_Process>
    	FullWhiteFlag = 0;
 80025a0:	4b3e      	ldr	r3, [pc, #248]	; (800269c <main+0x394>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

		continue;
 80025a6:	e1a3      	b.n	80028f0 <main+0x5e8>
    }
    if (LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000) // 18.8 us
 80025a8:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <main+0x3a8>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b18      	cmp	r3, #24
 80025ae:	d007      	beq.n	80025c0 <main+0x2b8>
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <main+0x3a8>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b1c      	cmp	r3, #28
 80025b6:	d003      	beq.n	80025c0 <main+0x2b8>
 80025b8:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <main+0x3a8>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b38      	cmp	r3, #56	; 0x38
 80025be:	d123      	bne.n	8002608 <main+0x300>
    {
      if (HalfWhiteFlag_Raw == HalfLeft)
 80025c0:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <main+0x39c>)
 80025c2:	f993 3000 	ldrsb.w	r3, [r3]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d106      	bne.n	80025da <main+0x2d2>
      {
        HalfWhiteFlag_Raw = 0;
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <main+0x39c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
        HalfWhiteFlag = HalfLeft;
 80025d2:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <main+0x398>)
 80025d4:	22ff      	movs	r2, #255	; 0xff
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e00a      	b.n	80025f0 <main+0x2e8>
      }
      else if (HalfWhiteFlag_Raw == HalfRight)
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <main+0x39c>)
 80025dc:	f993 3000 	ldrsb.w	r3, [r3]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <main+0x2e8>
      {
        HalfWhiteFlag_Raw = 0;
 80025e4:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <main+0x39c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
        HalfWhiteFlag = HalfRight;
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <main+0x398>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
      }

      MatLineFlag = 0;
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <main+0x3a0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
      ChuyenLaneFlag = 0;
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <main+0x3ac>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
      CarState = DiThang;
 80025fc:	4b26      	ldr	r3, [pc, #152]	; (8002698 <main+0x390>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]

      Car_DiThang_Process();
 8002602:	f001 f861 	bl	80036c8 <Car_DiThang_Process>
      continue;
 8002606:	e173      	b.n	80028f0 <main+0x5e8>
    }
    else if (LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <main+0x3a8>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b7f      	cmp	r3, #127	; 0x7f
 800260e:	d007      	beq.n	8002620 <main+0x318>
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <main+0x3a8>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b3f      	cmp	r3, #63	; 0x3f
 8002616:	d003      	beq.n	8002620 <main+0x318>
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <main+0x3a8>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b1f      	cmp	r3, #31
 800261e:	d14d      	bne.n	80026bc <main+0x3b4>
    {
    	if(FullWhiteFlag == 1)
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <main+0x394>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10f      	bne.n	8002648 <main+0x340>
    	{
    		FullWhiteFlag = 0;
 8002628:	4b1c      	ldr	r3, [pc, #112]	; (800269c <main+0x394>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
    		while(LineDetect != 0)
 800262e:	e001      	b.n	8002634 <main+0x32c>
    			Sensor_Convert_A2D();
 8002630:	f001 f812 	bl	8003658 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <main+0x3a8>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f9      	bne.n	8002630 <main+0x328>
    		Car_CuaPhai_Process();
 800263c:	f001 fd78 	bl	8004130 <Car_CuaPhai_Process>
    		HalfWhiteFlag = 0;
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <main+0x398>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
    		continue;
 8002646:	e153      	b.n	80028f0 <main+0x5e8>
    	} else if(ChuyenLaneFlag == 0)
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <main+0x3ac>)
 800264a:	f993 3000 	ldrsb.w	r3, [r3]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8147 	bne.w	80028e2 <main+0x5da>
    	{
    		HalfWhiteFlag_Raw = HalfRight;
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <main+0x39c>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
        	while(LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111 || LineDetect == 0b00001111)
 800265a:	e001      	b.n	8002660 <main+0x358>
        	{
        		Sensor_Convert_A2D();
 800265c:	f000 fffc 	bl	8003658 <Sensor_Convert_A2D>
        	while(LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111 || LineDetect == 0b00001111)
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <main+0x3a8>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b7f      	cmp	r3, #127	; 0x7f
 8002666:	d0f9      	beq.n	800265c <main+0x354>
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <main+0x3a8>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b3f      	cmp	r3, #63	; 0x3f
 800266e:	d0f5      	beq.n	800265c <main+0x354>
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <main+0x3a8>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b1f      	cmp	r3, #31
 8002676:	d0f1      	beq.n	800265c <main+0x354>
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <main+0x3a8>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b0f      	cmp	r3, #15
 800267e:	d0ed      	beq.n	800265c <main+0x354>
    	if(FullWhiteFlag == 1)
 8002680:	e12f      	b.n	80028e2 <main+0x5da>
 8002682:	bf00      	nop
 8002684:	20000018 	.word	0x20000018
 8002688:	40010c00 	.word	0x40010c00
 800268c:	20000204 	.word	0x20000204
 8002690:	04100010 	.word	0x04100010
 8002694:	20000215 	.word	0x20000215
 8002698:	20000206 	.word	0x20000206
 800269c:	2000020b 	.word	0x2000020b
 80026a0:	20000208 	.word	0x20000208
 80026a4:	20000209 	.word	0x20000209
 80026a8:	2000020c 	.word	0x2000020c
 80026ac:	2000020a 	.word	0x2000020a
 80026b0:	20000205 	.word	0x20000205
 80026b4:	20000207 	.word	0x20000207
 80026b8:	20000010 	.word	0x20000010
        	}
    	};

    }
    else if (LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 80026bc:	4b8d      	ldr	r3, [pc, #564]	; (80028f4 <main+0x5ec>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2bf8      	cmp	r3, #248	; 0xf8
 80026c2:	d007      	beq.n	80026d4 <main+0x3cc>
 80026c4:	4b8b      	ldr	r3, [pc, #556]	; (80028f4 <main+0x5ec>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2bfc      	cmp	r3, #252	; 0xfc
 80026ca:	d003      	beq.n	80026d4 <main+0x3cc>
 80026cc:	4b89      	ldr	r3, [pc, #548]	; (80028f4 <main+0x5ec>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2bfe      	cmp	r3, #254	; 0xfe
 80026d2:	d12c      	bne.n	800272e <main+0x426>
    {
    	if(FullWhiteFlag == 1)
 80026d4:	4b88      	ldr	r3, [pc, #544]	; (80028f8 <main+0x5f0>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10f      	bne.n	80026fc <main+0x3f4>
    	{
    		FullWhiteFlag = 0;
 80026dc:	4b86      	ldr	r3, [pc, #536]	; (80028f8 <main+0x5f0>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
    		while(LineDetect != 0)
 80026e2:	e001      	b.n	80026e8 <main+0x3e0>
    			Sensor_Convert_A2D();
 80026e4:	f000 ffb8 	bl	8003658 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 80026e8:	4b82      	ldr	r3, [pc, #520]	; (80028f4 <main+0x5ec>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f9      	bne.n	80026e4 <main+0x3dc>
    		Car_CuaTrai_Process();
 80026f0:	f001 fd7a 	bl	80041e8 <Car_CuaTrai_Process>
    		HalfWhiteFlag = 0;
 80026f4:	4b81      	ldr	r3, [pc, #516]	; (80028fc <main+0x5f4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
    		continue;
 80026fa:	e0f9      	b.n	80028f0 <main+0x5e8>
    	} else if(ChuyenLaneFlag == 0)
 80026fc:	4b80      	ldr	r3, [pc, #512]	; (8002900 <main+0x5f8>)
 80026fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80ef 	bne.w	80028e6 <main+0x5de>
    	{
    		HalfWhiteFlag_Raw = HalfLeft;
 8002708:	4b7e      	ldr	r3, [pc, #504]	; (8002904 <main+0x5fc>)
 800270a:	22ff      	movs	r2, #255	; 0xff
 800270c:	701a      	strb	r2, [r3, #0]
        	while(LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 800270e:	e001      	b.n	8002714 <main+0x40c>
        	{
        		Sensor_Convert_A2D();
 8002710:	f000 ffa2 	bl	8003658 <Sensor_Convert_A2D>
        	while(LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 8002714:	4b77      	ldr	r3, [pc, #476]	; (80028f4 <main+0x5ec>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2bf8      	cmp	r3, #248	; 0xf8
 800271a:	d0f9      	beq.n	8002710 <main+0x408>
 800271c:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <main+0x5ec>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2bfc      	cmp	r3, #252	; 0xfc
 8002722:	d0f5      	beq.n	8002710 <main+0x408>
 8002724:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <main+0x5ec>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2bfe      	cmp	r3, #254	; 0xfe
 800272a:	d0f1      	beq.n	8002710 <main+0x408>
    	if(FullWhiteFlag == 1)
 800272c:	e0db      	b.n	80028e6 <main+0x5de>
        	}
    	}
    }
    else if (LineDetect == 0xff)
 800272e:	4b71      	ldr	r3, [pc, #452]	; (80028f4 <main+0x5ec>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d16d      	bne.n	8002812 <main+0x50a>
    {

    	if(HalfWhiteFlag == HalfLeft)
 8002736:	4b71      	ldr	r3, [pc, #452]	; (80028fc <main+0x5f4>)
 8002738:	f993 3000 	ldrsb.w	r3, [r3]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d112      	bne.n	8002768 <main+0x460>
    	{
    		while(LineDetect != 0)
 8002742:	e001      	b.n	8002748 <main+0x440>
    			Sensor_Convert_A2D();
 8002744:	f000 ff88 	bl	8003658 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <main+0x5ec>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f9      	bne.n	8002744 <main+0x43c>
    		Car_CuaTrai_Process();
 8002750:	f001 fd4a 	bl	80041e8 <Car_CuaTrai_Process>
    		CuaFlag = 0;
 8002754:	4b6c      	ldr	r3, [pc, #432]	; (8002908 <main+0x600>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag = 0;
 800275a:	4b68      	ldr	r3, [pc, #416]	; (80028fc <main+0x5f4>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002760:	4b68      	ldr	r3, [pc, #416]	; (8002904 <main+0x5fc>)
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
    		continue;
 8002766:	e0c3      	b.n	80028f0 <main+0x5e8>
    	} else if(HalfWhiteFlag == HalfRight)
 8002768:	4b64      	ldr	r3, [pc, #400]	; (80028fc <main+0x5f4>)
 800276a:	f993 3000 	ldrsb.w	r3, [r3]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d112      	bne.n	8002798 <main+0x490>
    	{
    		while(LineDetect != 0)
 8002772:	e001      	b.n	8002778 <main+0x470>
    		{
    			Sensor_Convert_A2D();
 8002774:	f000 ff70 	bl	8003658 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 8002778:	4b5e      	ldr	r3, [pc, #376]	; (80028f4 <main+0x5ec>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f9      	bne.n	8002774 <main+0x46c>
    		}
    		Car_CuaPhai_Process();
 8002780:	f001 fcd6 	bl	8004130 <Car_CuaPhai_Process>
    		CuaFlag = 0;
 8002784:	4b60      	ldr	r3, [pc, #384]	; (8002908 <main+0x600>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag = 0;
 800278a:	4b5c      	ldr	r3, [pc, #368]	; (80028fc <main+0x5f4>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002790:	4b5c      	ldr	r3, [pc, #368]	; (8002904 <main+0x5fc>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
    		continue;
 8002796:	e0ab      	b.n	80028f0 <main+0x5e8>
    	}else
    	{
    		FullWhiteFlag = 1;
 8002798:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <main+0x5f0>)
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 800279e:	4b59      	ldr	r3, [pc, #356]	; (8002904 <main+0x5fc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    	}
    	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000||
 80027a4:	e001      	b.n	80027aa <main+0x4a2>
    			LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
    			LineDetect == 0b00110000 || LineDetect == 0b00010000 ||
				LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
				LineDetect == 0b00001100 || LineDetect == 0b00001000 ||
				LineDetect == 0))
    	    			Sensor_Convert_A2D();
 80027a6:	f000 ff57 	bl	8003658 <Sensor_Convert_A2D>
    	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000||
 80027aa:	4b52      	ldr	r3, [pc, #328]	; (80028f4 <main+0x5ec>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b18      	cmp	r3, #24
 80027b0:	d02b      	beq.n	800280a <main+0x502>
 80027b2:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <main+0x5ec>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b1c      	cmp	r3, #28
 80027b8:	d027      	beq.n	800280a <main+0x502>
 80027ba:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <main+0x5ec>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b38      	cmp	r3, #56	; 0x38
 80027c0:	d023      	beq.n	800280a <main+0x502>
    			LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80027c2:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <main+0x5ec>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
    	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000||
 80027c6:	2be0      	cmp	r3, #224	; 0xe0
 80027c8:	d01f      	beq.n	800280a <main+0x502>
    			LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <main+0x5ec>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b70      	cmp	r3, #112	; 0x70
 80027d0:	d01b      	beq.n	800280a <main+0x502>
    			LineDetect == 0b00110000 || LineDetect == 0b00010000 ||
 80027d2:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <main+0x5ec>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
    			LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80027d6:	2b30      	cmp	r3, #48	; 0x30
 80027d8:	d017      	beq.n	800280a <main+0x502>
    			LineDetect == 0b00110000 || LineDetect == 0b00010000 ||
 80027da:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <main+0x5ec>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d013      	beq.n	800280a <main+0x502>
				LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <main+0x5ec>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
    			LineDetect == 0b00110000 || LineDetect == 0b00010000 ||
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d00f      	beq.n	800280a <main+0x502>
				LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80027ea:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <main+0x5ec>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b0e      	cmp	r3, #14
 80027f0:	d00b      	beq.n	800280a <main+0x502>
				LineDetect == 0b00001100 || LineDetect == 0b00001000 ||
 80027f2:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <main+0x5ec>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
				LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d007      	beq.n	800280a <main+0x502>
				LineDetect == 0b00001100 || LineDetect == 0b00001000 ||
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <main+0x5ec>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d003      	beq.n	800280a <main+0x502>
				LineDetect == 0))
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <main+0x5ec>)
 8002804:	781b      	ldrb	r3, [r3, #0]
    	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000||
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1cd      	bne.n	80027a6 <main+0x49e>
    	HalfWhiteFlag_Raw = 0;
 800280a:	4b3e      	ldr	r3, [pc, #248]	; (8002904 <main+0x5fc>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e06a      	b.n	80028e8 <main+0x5e0>
    }
    else if (LineDetect == 0)
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <main+0x5ec>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d166      	bne.n	80028e8 <main+0x5e0>
    {
    	if (HalfWhiteFlag == HalfRight)
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <main+0x5f4>)
 800281c:	f993 3000 	ldrsb.w	r3, [r3]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d108      	bne.n	8002836 <main+0x52e>
    	{
    		HalfWhiteFlag = 0;
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <main+0x5f4>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <main+0x5fc>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
    		Car_ChuyenLanePhai_Process();
 8002830:	f001 fbc6 	bl	8003fc0 <Car_ChuyenLanePhai_Process>
    		continue;
 8002834:	e05c      	b.n	80028f0 <main+0x5e8>
    	} else if(HalfWhiteFlag == HalfLeft)
 8002836:	4b31      	ldr	r3, [pc, #196]	; (80028fc <main+0x5f4>)
 8002838:	f993 3000 	ldrsb.w	r3, [r3]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d108      	bne.n	8002854 <main+0x54c>
    	{
    		HalfWhiteFlag = 0;
 8002842:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <main+0x5f4>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <main+0x5fc>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
    		Car_ChuyenLaneTrai_Process();
 800284e:	f001 fc13 	bl	8004078 <Car_ChuyenLaneTrai_Process>
    		continue;
 8002852:	e04d      	b.n	80028f0 <main+0x5e8>
    	} else if(FullWhiteFlag == 1)
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <main+0x5f0>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d145      	bne.n	80028e8 <main+0x5e0>
    	{
    		FullWhiteFlag = 0 ;
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <main+0x5f0>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <main+0x5fc>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
    		Servo_SetAngle(-10);
 8002868:	4828      	ldr	r0, [pc, #160]	; (800290c <main+0x604>)
 800286a:	f7fe fccf 	bl	800120c <Servo_SetAngle>
    		MotorL_SetPWM(MaxSpeed * 1.2);
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <main+0x608>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fdc6 	bl	8000404 <__aeabi_i2d>
 8002878:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <main+0x60c>)
 800287e:	f7fd fe2b 	bl	80004d8 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fe f8d5 	bl	8000a38 <__aeabi_d2iz>
 800288e:	4603      	mov	r3, r0
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fc4b 	bl	800112c <MotorL_SetPWM>
    		MotorR_SetPWM(MaxSpeed * 1.5);
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <main+0x608>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fdb2 	bl	8000404 <__aeabi_i2d>
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <main+0x610>)
 80028a6:	f7fd fe17 	bl	80004d8 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f7fe f8c1 	bl	8000a38 <__aeabi_d2iz>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fc6f 	bl	800119c <MotorR_SetPWM>
    		while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 80028be:	e003      	b.n	80028c8 <main+0x5c0>
    		{
    			Sensor_Convert_A2D();
 80028c0:	f000 feca 	bl	8003658 <Sensor_Convert_A2D>
    			Car_MatLine_Process();
 80028c4:	f001 fb04 	bl	8003ed0 <Car_MatLine_Process>
    		while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <main+0x5ec>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b18      	cmp	r3, #24
 80028ce:	d00e      	beq.n	80028ee <main+0x5e6>
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <main+0x5ec>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b1c      	cmp	r3, #28
 80028d6:	d00a      	beq.n	80028ee <main+0x5e6>
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <main+0x5ec>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b38      	cmp	r3, #56	; 0x38
 80028de:	d1ef      	bne.n	80028c0 <main+0x5b8>
    		}
    		continue;
 80028e0:	e005      	b.n	80028ee <main+0x5e6>
    	if(FullWhiteFlag == 1)
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <main+0x5e0>
    	if(FullWhiteFlag == 1)
 80028e6:	bf00      	nop
    	}
    };
      Car_BamLine_Process();
 80028e8:	f000 ff1a 	bl	8003720 <Car_BamLine_Process>
 80028ec:	e5b9      	b.n	8002462 <main+0x15a>
    		continue;
 80028ee:	bf00      	nop
	Sensor_Convert_A2D();
 80028f0:	e5b7      	b.n	8002462 <main+0x15a>
 80028f2:	bf00      	nop
 80028f4:	20000205 	.word	0x20000205
 80028f8:	2000020b 	.word	0x2000020b
 80028fc:	20000208 	.word	0x20000208
 8002900:	20000207 	.word	0x20000207
 8002904:	20000209 	.word	0x20000209
 8002908:	2000020a 	.word	0x2000020a
 800290c:	c1200000 	.word	0xc1200000
 8002910:	20000010 	.word	0x20000010
 8002914:	3ff33333 	.word	0x3ff33333
 8002918:	3ff80000 	.word	0x3ff80000

0800291c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002920:	2002      	movs	r0, #2
 8002922:	f7ff f8eb 	bl	8001afc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8002926:	bf00      	nop
 8002928:	f7ff f8fc 	bl	8001b24 <LL_FLASH_GetLatency>
 800292c:	4603      	mov	r3, r0
 800292e:	2b02      	cmp	r3, #2
 8002930:	d1fa      	bne.n	8002928 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8002932:	f7fe ffd3 	bl	80018dc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002936:	bf00      	nop
 8002938:	f7fe ffde 	bl	80018f8 <LL_RCC_HSE_IsReady>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d1fa      	bne.n	8002938 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8002942:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8002946:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800294a:	f7ff f877 	bl	8001a3c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800294e:	f7ff f855 	bl	80019fc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002952:	bf00      	nop
 8002954:	f7ff f860 	bl	8001a18 <LL_RCC_PLL_IsReady>
 8002958:	4603      	mov	r3, r0
 800295a:	2b01      	cmp	r3, #1
 800295c:	d1fa      	bne.n	8002954 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe fffc 	bl	800195c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002964:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002968:	f7ff f80c 	bl	8001984 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff f81d 	bl	80019ac <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002972:	2002      	movs	r0, #2
 8002974:	f7fe ffd2 	bl	800191c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002978:	bf00      	nop
 800297a:	f7fe ffe3 	bl	8001944 <LL_RCC_GetSysClkSource>
 800297e:	4603      	mov	r3, r0
 8002980:	2b08      	cmp	r3, #8
 8002982:	d1fa      	bne.n	800297a <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8002984:	4805      	ldr	r0, [pc, #20]	; (800299c <SystemClock_Config+0x80>)
 8002986:	f003 f8d1 	bl	8005b2c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 800298a:	4804      	ldr	r0, [pc, #16]	; (800299c <SystemClock_Config+0x80>)
 800298c:	f003 f8dc 	bl	8005b48 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8002990:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002994:	f7ff f81e 	bl	80019d4 <LL_RCC_SetADCClockSource>
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	044aa200 	.word	0x044aa200

080029a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08e      	sub	sp, #56	; 0x38
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80029a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80029b4:	f107 0318 	add.w	r3, r7, #24
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80029d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029d6:	f7ff f879 	bl	8001acc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80029da:	2004      	movs	r0, #4
 80029dc:	f7ff f876 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80029e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029e4:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	486b      	ldr	r0, [pc, #428]	; (8002b9c <MX_ADC1_Init+0x1fc>)
 80029f0:	f002 fa15 	bl	8004e1e <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2101      	movs	r1, #1
 80029f8:	4869      	ldr	r0, [pc, #420]	; (8002ba0 <MX_ADC1_Init+0x200>)
 80029fa:	f7fe fddf 	bl	80015bc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 80029fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a02:	2101      	movs	r1, #1
 8002a04:	4866      	ldr	r0, [pc, #408]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a06:	f7fe fea7 	bl	8001758 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4864      	ldr	r0, [pc, #400]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a10:	f7fe fdf8 	bl	8001604 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2101      	movs	r1, #1
 8002a18:	4861      	ldr	r0, [pc, #388]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a1a:	f7fe fe15 	bl	8001648 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	2101      	movs	r1, #1
 8002a22:	485f      	ldr	r0, [pc, #380]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a24:	f7fe fe32 	bl	800168c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	485c      	ldr	r0, [pc, #368]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a30:	f7fe fe4e 	bl	80016d0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4859      	ldr	r0, [pc, #356]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a3c:	f7fe fe6a 	bl	8001714 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 8);
 8002a40:	2208      	movs	r2, #8
 8002a42:	2101      	movs	r1, #1
 8002a44:	4856      	ldr	r0, [pc, #344]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a46:	f7fe fea9 	bl	800179c <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
 8002a4a:	4b56      	ldr	r3, [pc, #344]	; (8002ba4 <MX_ADC1_Init+0x204>)
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4853      	ldr	r0, [pc, #332]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a52:	f7fe fec5 	bl	80017e0 <LL_DMA_SetMemoryAddress>
			(uint32_t) &Sensor_ADC_Value);
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, ADC1_DR_Address);
 8002a56:	4a54      	ldr	r2, [pc, #336]	; (8002ba8 <MX_ADC1_Init+0x208>)
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4851      	ldr	r0, [pc, #324]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a5c:	f7fe fed8 	bl	8001810 <LL_DMA_SetPeriphAddress>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002a60:	2101      	movs	r1, #1
 8002a62:	484f      	ldr	r0, [pc, #316]	; (8002ba0 <MX_ADC1_Init+0x200>)
 8002a64:	f7fe fd8c 	bl	8001580 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002a72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a76:	4619      	mov	r1, r3
 8002a78:	484c      	ldr	r0, [pc, #304]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002a7a:	f001 ff99 	bl	80049b0 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	4848      	ldr	r0, [pc, #288]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002a8a:	f001 ff5f 	bl	800494c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002a8e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8002a92:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8002a94:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8002a98:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002aa8:	f107 0318 	add.w	r3, r7, #24
 8002aac:	4619      	mov	r1, r3
 8002aae:	483f      	ldr	r0, [pc, #252]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002ab0:	f001 ffa5 	bl	80049fe <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8002ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002abc:	483b      	ldr	r0, [pc, #236]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002abe:	f7fe fc8d 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ac8:	4838      	ldr	r0, [pc, #224]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002aca:	f7fe fcce 	bl	800146a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002ace:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <MX_ADC1_Init+0x210>)
 8002ad0:	f240 2105 	movw	r1, #517	; 0x205
 8002ad4:	4835      	ldr	r0, [pc, #212]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002ad6:	f7fe fc81 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002ada:	2200      	movs	r2, #0
 8002adc:	4934      	ldr	r1, [pc, #208]	; (8002bb0 <MX_ADC1_Init+0x210>)
 8002ade:	4833      	ldr	r0, [pc, #204]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002ae0:	f7fe fcc3 	bl	800146a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8002ae4:	4a33      	ldr	r2, [pc, #204]	; (8002bb4 <MX_ADC1_Init+0x214>)
 8002ae6:	f240 210a 	movw	r1, #522	; 0x20a
 8002aea:	4830      	ldr	r0, [pc, #192]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002aec:	f7fe fc76 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002af0:	2200      	movs	r2, #0
 8002af2:	4930      	ldr	r1, [pc, #192]	; (8002bb4 <MX_ADC1_Init+0x214>)
 8002af4:	482d      	ldr	r0, [pc, #180]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002af6:	f7fe fcb8 	bl	800146a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8002afa:	4a2f      	ldr	r2, [pc, #188]	; (8002bb8 <MX_ADC1_Init+0x218>)
 8002afc:	f240 210f 	movw	r1, #527	; 0x20f
 8002b00:	482a      	ldr	r0, [pc, #168]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b02:	f7fe fc6b 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002b06:	2200      	movs	r2, #0
 8002b08:	492b      	ldr	r1, [pc, #172]	; (8002bb8 <MX_ADC1_Init+0x218>)
 8002b0a:	4828      	ldr	r0, [pc, #160]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b0c:	f7fe fcad 	bl	800146a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8002b10:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <MX_ADC1_Init+0x21c>)
 8002b12:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002b16:	4825      	ldr	r0, [pc, #148]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b18:	f7fe fc60 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4927      	ldr	r1, [pc, #156]	; (8002bbc <MX_ADC1_Init+0x21c>)
 8002b20:	4822      	ldr	r0, [pc, #136]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b22:	f7fe fca2 	bl	800146a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8002b26:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <MX_ADC1_Init+0x220>)
 8002b28:	f240 2119 	movw	r1, #537	; 0x219
 8002b2c:	481f      	ldr	r0, [pc, #124]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b2e:	f7fe fc55 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002b32:	2200      	movs	r2, #0
 8002b34:	4922      	ldr	r1, [pc, #136]	; (8002bc0 <MX_ADC1_Init+0x220>)
 8002b36:	481d      	ldr	r0, [pc, #116]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b38:	f7fe fc97 	bl	800146a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8002b3c:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <MX_ADC1_Init+0x224>)
 8002b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b42:	481a      	ldr	r0, [pc, #104]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b44:	f7fe fc4a 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	491e      	ldr	r1, [pc, #120]	; (8002bc4 <MX_ADC1_Init+0x224>)
 8002b4c:	4817      	ldr	r0, [pc, #92]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b4e:	f7fe fc8c 	bl	800146a <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <MX_ADC1_Init+0x228>)
 8002b54:	f240 1105 	movw	r1, #261	; 0x105
 8002b58:	4814      	ldr	r0, [pc, #80]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b5a:	f7fe fc3f 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4919      	ldr	r1, [pc, #100]	; (8002bc8 <MX_ADC1_Init+0x228>)
 8002b62:	4812      	ldr	r0, [pc, #72]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b64:	f7fe fc81 	bl	800146a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

	LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8002b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b6c:	480f      	ldr	r0, [pc, #60]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b6e:	f7fe fc6a 	bl	8001446 <LL_ADC_REG_SetDMATransfer>
	/* Khoi dong bo ADC */
	LL_ADC_Enable(ADC1);
 8002b72:	480e      	ldr	r0, [pc, #56]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b74:	f7fe fcc4 	bl	8001500 <LL_ADC_Enable>
	LL_ADC_StartCalibration(ADC1);
 8002b78:	480c      	ldr	r0, [pc, #48]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b7a:	f7fe fcd0 	bl	800151e <LL_ADC_StartCalibration>

	/* Cho trang thai cablib duoc bat *
	 *
	 */
	while (LL_ADC_IsCalibrationOnGoing(ADC1))
 8002b7e:	bf00      	nop
 8002b80:	480a      	ldr	r0, [pc, #40]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b82:	f7fe fcdb 	bl	800153c <LL_ADC_IsCalibrationOnGoing>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f9      	bne.n	8002b80 <MX_ADC1_Init+0x1e0>
		;

	/* Bat dau chuyen doi ADC */
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8002b8c:	4807      	ldr	r0, [pc, #28]	; (8002bac <MX_ADC1_Init+0x20c>)
 8002b8e:	f7fe fce7 	bl	8001560 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8002b92:	bf00      	nop
 8002b94:	3738      	adds	r7, #56	; 0x38
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40010800 	.word	0x40010800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	20000224 	.word	0x20000224
 8002ba8:	4001244c 	.word	0x4001244c
 8002bac:	40012400 	.word	0x40012400
 8002bb0:	02300001 	.word	0x02300001
 8002bb4:	02600002 	.word	0x02600002
 8002bb8:	02900003 	.word	0x02900003
 8002bbc:	02c00004 	.word	0x02c00004
 8002bc0:	02f00005 	.word	0x02f00005
 8002bc4:	03200006 	.word	0x03200006
 8002bc8:	03500007 	.word	0x03500007

08002bcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08c      	sub	sp, #48	; 0x30
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002bd2:	f107 0318 	add.w	r3, r7, #24
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002bf2:	2008      	movs	r0, #8
 8002bf4:	f7fe ff6a 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <MX_I2C1_Init+0xa4>)
 8002bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bfc:	2309      	movs	r3, #9
 8002bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002c00:	2303      	movs	r3, #3
 8002c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002c04:	2304      	movs	r3, #4
 8002c06:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4819      	ldr	r0, [pc, #100]	; (8002c74 <MX_I2C1_Init+0xa8>)
 8002c0e:	f002 f906 	bl	8004e1e <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 8002c12:	f7ff fadb 	bl	80021cc <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002c16:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c1a:	f7fe ff3f 	bl	8001a9c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8002c1e:	4816      	ldr	r0, [pc, #88]	; (8002c78 <MX_I2C1_Init+0xac>)
 8002c20:	f7fe fe4d 	bl	80018be <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002c24:	4814      	ldr	r0, [pc, #80]	; (8002c78 <MX_I2C1_Init+0xac>)
 8002c26:	f7fe fe29 	bl	800187c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002c2a:	4813      	ldr	r0, [pc, #76]	; (8002c78 <MX_I2C1_Init+0xac>)
 8002c2c:	f7fe fe17 	bl	800185e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_I2C1_Init+0xb0>)
 8002c36:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002c46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002c4c:	f107 0318 	add.w	r3, r7, #24
 8002c50:	4619      	mov	r1, r3
 8002c52:	4809      	ldr	r0, [pc, #36]	; (8002c78 <MX_I2C1_Init+0xac>)
 8002c54:	f002 fa38 	bl	80050c8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4807      	ldr	r0, [pc, #28]	; (8002c78 <MX_I2C1_Init+0xac>)
 8002c5c:	f7fe fe1d 	bl	800189a <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
	LL_I2C_Enable(I2C1);
 8002c60:	4805      	ldr	r0, [pc, #20]	; (8002c78 <MX_I2C1_Init+0xac>)
 8002c62:	f7fe fded 	bl	8001840 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	3730      	adds	r7, #48	; 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	04030003 	.word	0x04030003
 8002c74:	40010c00 	.word	0x40010c00
 8002c78:	40005400 	.word	0x40005400
 8002c7c:	000186a0 	.word	0x000186a0

08002c80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b098      	sub	sp, #96	; 0x60
 8002c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f002 ff8a 	bl	8005bb8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
 8002cb4:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002cc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002cc8:	f7fe ff00 	bl	8001acc <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 8002cd6:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002cda:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002ce4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ce8:	4619      	mov	r1, r3
 8002cea:	483a      	ldr	r0, [pc, #232]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002cec:	f002 fb9a 	bl	8005424 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002cf0:	4838      	ldr	r0, [pc, #224]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002cf2:	f7fe ff32 	bl	8001b5a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	4836      	ldr	r0, [pc, #216]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002cfa:	f7fe ff8f 	bl	8001c1c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002cfe:	2360      	movs	r3, #96	; 0x60
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002d12:	2300      	movs	r3, #0
 8002d14:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002d16:	2300      	movs	r3, #0
 8002d18:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d22:	461a      	mov	r2, r3
 8002d24:	2101      	movs	r1, #1
 8002d26:	482b      	ldr	r0, [pc, #172]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d28:	f002 fbda 	bl	80054e0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	4829      	ldr	r0, [pc, #164]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d30:	f7fe ff30 	bl	8001b94 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d38:	4826      	ldr	r0, [pc, #152]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d3a:	f7fe ff6f 	bl	8001c1c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d42:	461a      	mov	r2, r3
 8002d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d48:	4822      	ldr	r0, [pc, #136]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d4a:	f002 fbc9 	bl	80054e0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d52:	4820      	ldr	r0, [pc, #128]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d54:	f7fe ff1e 	bl	8001b94 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	481e      	ldr	r0, [pc, #120]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d5c:	f7ff f932 	bl	8001fc4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002d60:	481c      	ldr	r0, [pc, #112]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d62:	f7ff f941 	bl	8001fe8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4811      	ldr	r0, [pc, #68]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d8e:	f002 fbe8 	bl	8005562 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM1);
 8002d92:	4810      	ldr	r0, [pc, #64]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d94:	f7ff f960 	bl	8002058 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_SetCounter(TIM1, 0);
 8002d98:	2100      	movs	r1, #0
 8002d9a:	480e      	ldr	r0, [pc, #56]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002d9c:	f7fe feec 	bl	8001b78 <LL_TIM_SetCounter>
	LL_TIM_EnableAllOutputs(TIM1);
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002da2:	f7ff f930 	bl	8002006 <LL_TIM_EnableAllOutputs>
	LL_TIM_EnableCounter(TIM1);
 8002da6:	480b      	ldr	r0, [pc, #44]	; (8002dd4 <MX_TIM1_Init+0x154>)
 8002da8:	f7fe fec8 	bl	8001b3c <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002dac:	2004      	movs	r0, #4
 8002dae:	f7fe fe8d 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <MX_TIM1_Init+0x158>)
 8002db4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002db6:	2309      	movs	r3, #9
 8002db8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4805      	ldr	r0, [pc, #20]	; (8002ddc <MX_TIM1_Init+0x15c>)
 8002dc8:	f002 f829 	bl	8004e1e <LL_GPIO_Init>

}
 8002dcc:	bf00      	nop
 8002dce:	3760      	adds	r7, #96	; 0x60
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	04050005 	.word	0x04050005
 8002ddc:	40010800 	.word	0x40010800

08002de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	60da      	str	r2, [r3, #12]
 8002df4:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df6:	463b      	mov	r3, r7
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002e04:	2001      	movs	r0, #1
 8002e06:	f7fe fe49 	bl	8001a9c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002e0a:	2004      	movs	r0, #4
 8002e0c:	f7fe fe5e 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002e10:	2008      	movs	r0, #8
 8002e12:	f7fe fe5b 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <MX_TIM2_Init+0x154>)
 8002e18:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1e:	463b      	mov	r3, r7
 8002e20:	4619      	mov	r1, r3
 8002e22:	4845      	ldr	r0, [pc, #276]	; (8002f38 <MX_TIM2_Init+0x158>)
 8002e24:	f001 fffb 	bl	8004e1e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002e28:	f640 0308 	movw	r3, #2056	; 0x808
 8002e2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002e2e:	2304      	movs	r3, #4
 8002e30:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e32:	463b      	mov	r3, r7
 8002e34:	4619      	mov	r1, r3
 8002e36:	4841      	ldr	r0, [pc, #260]	; (8002f3c <MX_TIM2_Init+0x15c>)
 8002e38:	f001 fff1 	bl	8004e1e <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002e3c:	f7fe fa48 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2200      	movs	r2, #0
 8002e44:	2102      	movs	r1, #2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fa96 	bl	8001378 <NVIC_EncodePriority>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4619      	mov	r1, r3
 8002e50:	201c      	movs	r0, #28
 8002e52:	f7fe fa67 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002e56:	201c      	movs	r0, #28
 8002e58:	f7fe fa48 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
	LL_GPIO_AF_EnableRemap_TIM2();
 8002e5c:	f7ff f9d6 	bl	800220c <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8002e60:	2103      	movs	r1, #3
 8002e62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e66:	f7ff f89b 	bl	8001fa0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e6e:	2101      	movs	r1, #1
 8002e70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e74:	f7fe ff5a 	bl	8001d2c <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e80:	f7fe ffa0 	bl	8001dc4 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002e84:	2200      	movs	r2, #0
 8002e86:	2101      	movs	r1, #1
 8002e88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e8c:	f7fe ffe6 	bl	8001e5c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002e90:	2200      	movs	r2, #0
 8002e92:	2101      	movs	r1, #1
 8002e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e98:	f7ff f82c 	bl	8001ef4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002e9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ea0:	2110      	movs	r1, #16
 8002ea2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ea6:	f7fe ff41 	bl	8001d2c <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2110      	movs	r1, #16
 8002eae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eb2:	f7fe ff87 	bl	8001dc4 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2110      	movs	r1, #16
 8002eba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ebe:	f7fe ffcd 	bl	8001e5c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2110      	movs	r1, #16
 8002ec6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eca:	f7ff f813 	bl	8001ef4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eda:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eea:	f002 fa9b 	bl	8005424 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002eee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ef2:	f7fe fe32 	bl	8001b5a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002efc:	f7ff f862 	bl	8001fc4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002f00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f04:	f7ff f870 	bl	8001fe8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
	//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
	//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
	LL_TIM_SetCounter(TIM2, 0);
 8002f08:	2100      	movs	r1, #0
 8002f0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f0e:	f7fe fe33 	bl	8001b78 <LL_TIM_SetCounter>
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002f12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f16:	f7ff f885 	bl	8002024 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(TIM2);
 8002f1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f1e:	f7ff f89b 	bl	8002058 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 8002f22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002f26:	f7fe fe09 	bl	8001b3c <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	3728      	adds	r7, #40	; 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	04800080 	.word	0x04800080
 8002f38:	40010800 	.word	0x40010800
 8002f3c:	40010c00 	.word	0x40010c00

08002f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f56:	463b      	mov	r3, r7
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002f64:	2002      	movs	r0, #2
 8002f66:	f7fe fd99 	bl	8001a9c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002f6a:	2008      	movs	r0, #8
 8002f6c:	f7fe fdae 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002f70:	f243 0330 	movw	r3, #12336	; 0x3030
 8002f74:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002f76:	2304      	movs	r3, #4
 8002f78:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4836      	ldr	r0, [pc, #216]	; (8003058 <MX_TIM3_Init+0x118>)
 8002f80:	f001 ff4d 	bl	8004e1e <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002f84:	f7fe f9a4 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe f9f2 	bl	8001378 <NVIC_EncodePriority>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4619      	mov	r1, r3
 8002f98:	201d      	movs	r0, #29
 8002f9a:	f7fe f9c3 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002f9e:	201d      	movs	r0, #29
 8002fa0:	f7fe f9a4 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
	LL_GPIO_AF_RemapPartial_TIM3();
 8002fa4:	f7ff f942 	bl	800222c <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002fa8:	2103      	movs	r1, #3
 8002faa:	482c      	ldr	r0, [pc, #176]	; (800305c <MX_TIM3_Init+0x11c>)
 8002fac:	f7fe fff8 	bl	8001fa0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002fb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4829      	ldr	r0, [pc, #164]	; (800305c <MX_TIM3_Init+0x11c>)
 8002fb8:	f7fe feb8 	bl	8001d2c <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4826      	ldr	r0, [pc, #152]	; (800305c <MX_TIM3_Init+0x11c>)
 8002fc2:	f7fe feff 	bl	8001dc4 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4824      	ldr	r0, [pc, #144]	; (800305c <MX_TIM3_Init+0x11c>)
 8002fcc:	f7fe ff46 	bl	8001e5c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4821      	ldr	r0, [pc, #132]	; (800305c <MX_TIM3_Init+0x11c>)
 8002fd6:	f7fe ff8d 	bl	8001ef4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fde:	2110      	movs	r1, #16
 8002fe0:	481e      	ldr	r0, [pc, #120]	; (800305c <MX_TIM3_Init+0x11c>)
 8002fe2:	f7fe fea3 	bl	8001d2c <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2110      	movs	r1, #16
 8002fea:	481c      	ldr	r0, [pc, #112]	; (800305c <MX_TIM3_Init+0x11c>)
 8002fec:	f7fe feea 	bl	8001dc4 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2110      	movs	r1, #16
 8002ff4:	4819      	ldr	r0, [pc, #100]	; (800305c <MX_TIM3_Init+0x11c>)
 8002ff6:	f7fe ff31 	bl	8001e5c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2110      	movs	r1, #16
 8002ffe:	4817      	ldr	r0, [pc, #92]	; (800305c <MX_TIM3_Init+0x11c>)
 8003000:	f7fe ff78 	bl	8001ef4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 800300c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003010:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003012:	2300      	movs	r3, #0
 8003014:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	480f      	ldr	r0, [pc, #60]	; (800305c <MX_TIM3_Init+0x11c>)
 800301e:	f002 fa01 	bl	8005424 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003022:	480e      	ldr	r0, [pc, #56]	; (800305c <MX_TIM3_Init+0x11c>)
 8003024:	f7fe fd99 	bl	8001b5a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003028:	2100      	movs	r1, #0
 800302a:	480c      	ldr	r0, [pc, #48]	; (800305c <MX_TIM3_Init+0x11c>)
 800302c:	f7fe ffca 	bl	8001fc4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003030:	480a      	ldr	r0, [pc, #40]	; (800305c <MX_TIM3_Init+0x11c>)
 8003032:	f7fe ffd9 	bl	8001fe8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
	LL_TIM_SetCounter(TIM3, 0);
 8003036:	2100      	movs	r1, #0
 8003038:	4808      	ldr	r0, [pc, #32]	; (800305c <MX_TIM3_Init+0x11c>)
 800303a:	f7fe fd9d 	bl	8001b78 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM3);
 800303e:	4807      	ldr	r0, [pc, #28]	; (800305c <MX_TIM3_Init+0x11c>)
 8003040:	f7fe fd7c 	bl	8001b3c <LL_TIM_EnableCounter>
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8003044:	4805      	ldr	r0, [pc, #20]	; (800305c <MX_TIM3_Init+0x11c>)
 8003046:	f7fe ffed 	bl	8002024 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(TIM3);
 800304a:	4804      	ldr	r0, [pc, #16]	; (800305c <MX_TIM3_Init+0x11c>)
 800304c:	f7ff f804 	bl	8002058 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8003050:	bf00      	nop
 8003052:	3728      	adds	r7, #40	; 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40010c00 	.word	0x40010c00
 800305c:	40000400 	.word	0x40000400

08003060 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08e      	sub	sp, #56	; 0x38
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	2220      	movs	r2, #32
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f002 fd9b 	bl	8005bb8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003082:	2004      	movs	r0, #4
 8003084:	f7fe fd0a 	bl	8001a9c <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003088:	f7fe f922 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800308c:	4603      	mov	r3, r0
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe f970 	bl	8001378 <NVIC_EncodePriority>
 8003098:	4603      	mov	r3, r0
 800309a:	4619      	mov	r1, r3
 800309c:	201e      	movs	r0, #30
 800309e:	f7fe f941 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 80030a2:	201e      	movs	r0, #30
 80030a4:	f7fe f922 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 23;
 80030a8:	2317      	movs	r3, #23
 80030aa:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 59999;
 80030b0:	f64e 235f 	movw	r3, #59999	; 0xea5f
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80030b6:	2300      	movs	r3, #0
 80030b8:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80030ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030be:	4619      	mov	r1, r3
 80030c0:	4828      	ldr	r0, [pc, #160]	; (8003164 <MX_TIM4_Init+0x104>)
 80030c2:	f002 f9af 	bl	8005424 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80030c6:	4827      	ldr	r0, [pc, #156]	; (8003164 <MX_TIM4_Init+0x104>)
 80030c8:	f7fe fd47 	bl	8001b5a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80030cc:	2100      	movs	r1, #0
 80030ce:	4825      	ldr	r0, [pc, #148]	; (8003164 <MX_TIM4_Init+0x104>)
 80030d0:	f7fe ff52 	bl	8001f78 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 80030d4:	2101      	movs	r1, #1
 80030d6:	4823      	ldr	r0, [pc, #140]	; (8003164 <MX_TIM4_Init+0x104>)
 80030d8:	f7fe fda0 	bl	8001c1c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80030dc:	2360      	movs	r3, #96	; 0x60
 80030de:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 4500;
 80030e8:	f241 1394 	movw	r3, #4500	; 0x1194
 80030ec:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	461a      	mov	r2, r3
 80030f6:	2101      	movs	r1, #1
 80030f8:	481a      	ldr	r0, [pc, #104]	; (8003164 <MX_TIM4_Init+0x104>)
 80030fa:	f002 f9f1 	bl	80054e0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 80030fe:	2101      	movs	r1, #1
 8003100:	4818      	ldr	r0, [pc, #96]	; (8003164 <MX_TIM4_Init+0x104>)
 8003102:	f7fe fd47 	bl	8001b94 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	461a      	mov	r2, r3
 800310e:	2110      	movs	r1, #16
 8003110:	4814      	ldr	r0, [pc, #80]	; (8003164 <MX_TIM4_Init+0x104>)
 8003112:	f002 f9e5 	bl	80054e0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8003116:	2110      	movs	r1, #16
 8003118:	4812      	ldr	r0, [pc, #72]	; (8003164 <MX_TIM4_Init+0x104>)
 800311a:	f7fe fd3b 	bl	8001b94 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800311e:	2100      	movs	r1, #0
 8003120:	4810      	ldr	r0, [pc, #64]	; (8003164 <MX_TIM4_Init+0x104>)
 8003122:	f7fe ff4f 	bl	8001fc4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003126:	480f      	ldr	r0, [pc, #60]	; (8003164 <MX_TIM4_Init+0x104>)
 8003128:	f7fe ff5e 	bl	8001fe8 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 800312c:	2101      	movs	r1, #1
 800312e:	480d      	ldr	r0, [pc, #52]	; (8003164 <MX_TIM4_Init+0x104>)
 8003130:	f7fe fdb8 	bl	8001ca4 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM4_Init 2 */

	LL_TIM_EnableIT_UPDATE(TIM4);
 8003134:	480b      	ldr	r0, [pc, #44]	; (8003164 <MX_TIM4_Init+0x104>)
 8003136:	f7fe ff8f 	bl	8002058 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM4);
 800313a:	480a      	ldr	r0, [pc, #40]	; (8003164 <MX_TIM4_Init+0x104>)
 800313c:	f7fe ff72 	bl	8002024 <LL_TIM_ClearFlag_UPDATE>

	LL_TIM_EnableIT_CC1(TIM4);
 8003140:	4808      	ldr	r0, [pc, #32]	; (8003164 <MX_TIM4_Init+0x104>)
 8003142:	f7fe ff98 	bl	8002076 <LL_TIM_EnableIT_CC1>
	LL_TIM_ClearFlag_CC1(TIM4);
 8003146:	4807      	ldr	r0, [pc, #28]	; (8003164 <MX_TIM4_Init+0x104>)
 8003148:	f7fe ff79 	bl	800203e <LL_TIM_ClearFlag_CC1>

//  LL_TIM_EnableIT_CC2(TIM4);
//  LL_TIM_ClearFlag_CC2(TIM4);

	LL_TIM_SetCounter(TIM4, 0);
 800314c:	2100      	movs	r1, #0
 800314e:	4805      	ldr	r0, [pc, #20]	; (8003164 <MX_TIM4_Init+0x104>)
 8003150:	f7fe fd12 	bl	8001b78 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM4);
 8003154:	4803      	ldr	r0, [pc, #12]	; (8003164 <MX_TIM4_Init+0x104>)
 8003156:	f7fe fcf1 	bl	8001b3c <LL_TIM_EnableCounter>

  /* USER CODE END TIM4_Init 2 */

}
 800315a:	bf00      	nop
 800315c:	3738      	adds	r7, #56	; 0x38
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40000800 	.word	0x40000800

08003168 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08c      	sub	sp, #48	; 0x30
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	611a      	str	r2, [r3, #16]
 800317e:	615a      	str	r2, [r3, #20]
 8003180:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003182:	463b      	mov	r3, r7
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003190:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003194:	f7fe fc9a 	bl	8001acc <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003198:	2008      	movs	r0, #8
 800319a:	f7fe fc97 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800319e:	f244 0340 	movw	r3, #16448	; 0x4040
 80031a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80031a4:	2309      	movs	r3, #9
 80031a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80031a8:	2303      	movs	r3, #3
 80031aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b0:	463b      	mov	r3, r7
 80031b2:	4619      	mov	r1, r3
 80031b4:	4816      	ldr	r0, [pc, #88]	; (8003210 <MX_USART1_UART_Init+0xa8>)
 80031b6:	f001 fe32 	bl	8004e1e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80031ba:	f248 0380 	movw	r3, #32896	; 0x8080
 80031be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80031c0:	2304      	movs	r3, #4
 80031c2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c4:	463b      	mov	r3, r7
 80031c6:	4619      	mov	r1, r3
 80031c8:	4811      	ldr	r0, [pc, #68]	; (8003210 <MX_USART1_UART_Init+0xa8>)
 80031ca:	f001 fe28 	bl	8004e1e <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 80031ce:	f7ff f80d 	bl	80021ec <LL_GPIO_AF_EnableRemap_USART1>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80031d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031d6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80031d8:	2300      	movs	r3, #0
 80031da:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX;
 80031e4:	2308      	movs	r3, #8
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	4807      	ldr	r0, [pc, #28]	; (8003214 <MX_USART1_UART_Init+0xac>)
 80031f8:	f002 fc1e 	bl	8005a38 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80031fc:	4805      	ldr	r0, [pc, #20]	; (8003214 <MX_USART1_UART_Init+0xac>)
 80031fe:	f7fe ff58 	bl	80020b2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003202:	4804      	ldr	r0, [pc, #16]	; (8003214 <MX_USART1_UART_Init+0xac>)
 8003204:	f7fe ff46 	bl	8002094 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003208:	bf00      	nop
 800320a:	3730      	adds	r7, #48	; 0x30
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40010c00 	.word	0x40010c00
 8003214:	40013800 	.word	0x40013800

08003218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800321c:	2001      	movs	r0, #1
 800321e:	f7fe fc25 	bl	8001a6c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003222:	f7fe f855 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8003226:	4603      	mov	r3, r0
 8003228:	2200      	movs	r2, #0
 800322a:	2101      	movs	r1, #1
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe f8a3 	bl	8001378 <NVIC_EncodePriority>
 8003232:	4603      	mov	r3, r0
 8003234:	4619      	mov	r1, r3
 8003236:	200b      	movs	r0, #11
 8003238:	f7fe f874 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800323c:	200b      	movs	r0, #11
 800323e:	f7fe f855 	bl	80012ec <__NVIC_EnableIRQ>

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800324e:	f107 0318 	add.w	r3, r7, #24
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003266:	2010      	movs	r0, #16
 8003268:	f7fe fc30 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800326c:	2020      	movs	r0, #32
 800326e:	f7fe fc2d 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003272:	2004      	movs	r0, #4
 8003274:	f7fe fc2a 	bl	8001acc <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003278:	2008      	movs	r0, #8
 800327a:	f7fe fc27 	bl	8001acc <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Debug_Led_Pin|Debug_GPIO_Pin);
 800327e:	4959      	ldr	r1, [pc, #356]	; (80033e4 <MX_GPIO_Init+0x19c>)
 8003280:	4859      	ldr	r0, [pc, #356]	; (80033e8 <MX_GPIO_Init+0x1a0>)
 8003282:	f7fe ff93 	bl	80021ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8003286:	4959      	ldr	r1, [pc, #356]	; (80033ec <MX_GPIO_Init+0x1a4>)
 8003288:	4859      	ldr	r0, [pc, #356]	; (80033f0 <MX_GPIO_Init+0x1a8>)
 800328a:	f7fe ff8f 	bl	80021ac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 800328e:	4959      	ldr	r1, [pc, #356]	; (80033f4 <MX_GPIO_Init+0x1ac>)
 8003290:	4859      	ldr	r0, [pc, #356]	; (80033f8 <MX_GPIO_Init+0x1b0>)
 8003292:	f7fe ff8b 	bl	80021ac <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Debug_Led_Pin;
 8003296:	4b59      	ldr	r3, [pc, #356]	; (80033fc <MX_GPIO_Init+0x1b4>)
 8003298:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800329a:	2301      	movs	r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800329e:	2302      	movs	r3, #2
 80032a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Debug_Led_GPIO_Port, &GPIO_InitStruct);
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	484f      	ldr	r0, [pc, #316]	; (80033e8 <MX_GPIO_Init+0x1a0>)
 80032ac:	f001 fdb7 	bl	8004e1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Debug_GPIO_Pin;
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <MX_GPIO_Init+0x1b8>)
 80032b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032b4:	2301      	movs	r3, #1
 80032b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032b8:	2303      	movs	r3, #3
 80032ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Debug_GPIO_GPIO_Port, &GPIO_InitStruct);
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4848      	ldr	r0, [pc, #288]	; (80033e8 <MX_GPIO_Init+0x1a0>)
 80032c6:	f001 fdaa 	bl	8004e1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Distance_Pin;
 80032ca:	f240 1301 	movw	r3, #257	; 0x101
 80032ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80032d0:	2308      	movs	r3, #8
 80032d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Distance_GPIO_Port, &GPIO_InitStruct);
 80032d8:	1d3b      	adds	r3, r7, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	4844      	ldr	r0, [pc, #272]	; (80033f0 <MX_GPIO_Init+0x1a8>)
 80032de:	f001 fd9e 	bl	8004e1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80032e2:	4b42      	ldr	r3, [pc, #264]	; (80033ec <MX_GPIO_Init+0x1a4>)
 80032e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032e6:	2301      	movs	r3, #1
 80032e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032ea:	2303      	movs	r3, #3
 80032ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	483e      	ldr	r0, [pc, #248]	; (80033f0 <MX_GPIO_Init+0x1a8>)
 80032f8:	f001 fd91 	bl	8004e1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80032fc:	4b41      	ldr	r3, [pc, #260]	; (8003404 <MX_GPIO_Init+0x1bc>)
 80032fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003300:	2301      	movs	r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003304:	2302      	movs	r3, #2
 8003306:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4839      	ldr	r0, [pc, #228]	; (80033f8 <MX_GPIO_Init+0x1b0>)
 8003312:	f001 fd84 	bl	8004e1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003316:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <MX_GPIO_Init+0x1c0>)
 8003318:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800331a:	2301      	movs	r3, #1
 800331c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800331e:	2303      	movs	r3, #3
 8003320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4833      	ldr	r0, [pc, #204]	; (80033f8 <MX_GPIO_Init+0x1b0>)
 800332c:	f001 fd77 	bl	8004e1e <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 8003330:	4936      	ldr	r1, [pc, #216]	; (800340c <MX_GPIO_Init+0x1c4>)
 8003332:	2001      	movs	r0, #1
 8003334:	f7fe ffa2 	bl	800227c <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 8003338:	4935      	ldr	r1, [pc, #212]	; (8003410 <MX_GPIO_Init+0x1c8>)
 800333a:	2001      	movs	r0, #1
 800333c:	f7fe ff9e 	bl	800227c <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 8003340:	4934      	ldr	r1, [pc, #208]	; (8003414 <MX_GPIO_Init+0x1cc>)
 8003342:	2001      	movs	r0, #1
 8003344:	f7fe ff9a 	bl	800227c <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8003348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800334c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800334e:	2301      	movs	r3, #1
 8003350:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003352:	2300      	movs	r3, #0
 8003354:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003356:	2301      	movs	r3, #1
 8003358:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800335a:	f107 0318 	add.w	r3, r7, #24
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fc24 	bl	8004bac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8003364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003368:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800336a:	2301      	movs	r3, #1
 800336c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800336e:	2300      	movs	r3, #0
 8003370:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003372:	2301      	movs	r3, #1
 8003374:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003376:	f107 0318 	add.w	r3, r7, #24
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fc16 	bl	8004bac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8003380:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003384:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003386:	2301      	movs	r3, #1
 8003388:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800338a:	2300      	movs	r3, #0
 800338c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800338e:	2301      	movs	r3, #1
 8003390:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003392:	f107 0318 	add.w	r3, r7, #24
 8003396:	4618      	mov	r0, r3
 8003398:	f001 fc08 	bl	8004bac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(BTN1_GPIO_Port, BTN1_Pin, LL_GPIO_MODE_FLOATING);
 800339c:	2204      	movs	r2, #4
 800339e:	491e      	ldr	r1, [pc, #120]	; (8003418 <MX_GPIO_Init+0x1d0>)
 80033a0:	4813      	ldr	r0, [pc, #76]	; (80033f0 <MX_GPIO_Init+0x1a8>)
 80033a2:	f7fe febb 	bl	800211c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_GPIO_Port, BTN2_Pin, LL_GPIO_MODE_FLOATING);
 80033a6:	2204      	movs	r2, #4
 80033a8:	4914      	ldr	r1, [pc, #80]	; (80033fc <MX_GPIO_Init+0x1b4>)
 80033aa:	4811      	ldr	r0, [pc, #68]	; (80033f0 <MX_GPIO_Init+0x1a8>)
 80033ac:	f7fe feb6 	bl	800211c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_GPIO_Port, BTN3_Pin, LL_GPIO_MODE_FLOATING);
 80033b0:	2204      	movs	r2, #4
 80033b2:	4913      	ldr	r1, [pc, #76]	; (8003400 <MX_GPIO_Init+0x1b8>)
 80033b4:	480e      	ldr	r0, [pc, #56]	; (80033f0 <MX_GPIO_Init+0x1a8>)
 80033b6:	f7fe feb1 	bl	800211c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80033ba:	f7fd ff89 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80033be:	4603      	mov	r3, r0
 80033c0:	2200      	movs	r2, #0
 80033c2:	2102      	movs	r1, #2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd ffd7 	bl	8001378 <NVIC_EncodePriority>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4619      	mov	r1, r3
 80033ce:	2028      	movs	r0, #40	; 0x28
 80033d0:	f7fd ffa8 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033d4:	2028      	movs	r0, #40	; 0x28
 80033d6:	f7fd ff89 	bl	80012ec <__NVIC_EnableIRQ>

}
 80033da:	bf00      	nop
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	04600060 	.word	0x04600060
 80033e8:	40011000 	.word	0x40011000
 80033ec:	04800080 	.word	0x04800080
 80033f0:	40010c00 	.word	0x40010c00
 80033f4:	040a000a 	.word	0x040a000a
 80033f8:	40010800 	.word	0x40010800
 80033fc:	04200020 	.word	0x04200020
 8003400:	04400040 	.word	0x04400040
 8003404:	04020002 	.word	0x04020002
 8003408:	04080008 	.word	0x04080008
 800340c:	000f0003 	.word	0x000f0003
 8003410:	00f00003 	.word	0x00f00003
 8003414:	0f000003 	.word	0x0f000003
 8003418:	04100010 	.word	0x04100010

0800341c <GetThreshold>:

/* USER CODE BEGIN 4 */

void GetThreshold() {
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b091      	sub	sp, #68	; 0x44
 8003420:	af00      	add	r7, sp, #0
	printf("Getting White Line \n");
 8003422:	4880      	ldr	r0, [pc, #512]	; (8003624 <GetThreshold+0x208>)
 8003424:	f003 f8b6 	bl	8006594 <puts>
	while(BTN2_Flag == 0);
 8003428:	bf00      	nop
 800342a:	4b7f      	ldr	r3, [pc, #508]	; (8003628 <GetThreshold+0x20c>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0fb      	beq.n	800342a <GetThreshold+0xe>
//	while(LL_GPIO_IsInputPinSet(BTN2_GPIO_Port,BTN2_Pin) == 0);
	BTN2_Flag = 0;
 8003432:	4b7d      	ldr	r3, [pc, #500]	; (8003628 <GetThreshold+0x20c>)
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
	MotorL_SetPWM(3600);
 8003438:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800343c:	f7fd fe76 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(3600);
 8003440:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8003444:	f7fd feaa 	bl	800119c <MotorR_SetPWM>
	uint16_t WhiteValue[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]

	for (int i = 0; i < ADC_Sample_Times; ++i) {
 8003456:	2300      	movs	r3, #0
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800345a:	e025      	b.n	80034a8 <GetThreshold+0x8c>
		for (int i = 0; i < NumberOfSensor; ++i) {
 800345c:	2300      	movs	r3, #0
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003460:	e01c      	b.n	800349c <GetThreshold+0x80>
			if (Sensor_ADC_Value[i] > WhiteValue[i]) {
 8003462:	4a72      	ldr	r2, [pc, #456]	; (800362c <GetThreshold+0x210>)
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800346a:	b29a      	uxth	r2, r3
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003474:	440b      	add	r3, r1
 8003476:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800347a:	429a      	cmp	r2, r3
 800347c:	d90b      	bls.n	8003496 <GetThreshold+0x7a>
				WhiteValue[i] = Sensor_ADC_Value[i];
 800347e:	4a6b      	ldr	r2, [pc, #428]	; (800362c <GetThreshold+0x210>)
 8003480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003486:	b29a      	uxth	r2, r3
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003490:	440b      	add	r3, r1
 8003492:	f823 2c2c 	strh.w	r2, [r3, #-44]
		for (int i = 0; i < NumberOfSensor; ++i) {
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	3301      	adds	r3, #1
 800349a:	63bb      	str	r3, [r7, #56]	; 0x38
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	2b07      	cmp	r3, #7
 80034a0:	dddf      	ble.n	8003462 <GetThreshold+0x46>
	for (int i = 0; i < ADC_Sample_Times; ++i) {
 80034a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a4:	3301      	adds	r3, #1
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034aa:	4a61      	ldr	r2, [pc, #388]	; (8003630 <GetThreshold+0x214>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	ddd5      	ble.n	800345c <GetThreshold+0x40>
			}
		}
	}
	printf("WhiteValue:\t");
 80034b0:	4860      	ldr	r0, [pc, #384]	; (8003634 <GetThreshold+0x218>)
 80034b2:	f002 ffe9 	bl	8006488 <iprintf>
	for (int i = 0; i < 8; ++i) {
 80034b6:	2300      	movs	r3, #0
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ba:	e00d      	b.n	80034d8 <GetThreshold+0xbc>
			printf("%d \t",WhiteValue[i] );
 80034bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80034c4:	4413      	add	r3, r2
 80034c6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80034ca:	4619      	mov	r1, r3
 80034cc:	485a      	ldr	r0, [pc, #360]	; (8003638 <GetThreshold+0x21c>)
 80034ce:	f002 ffdb 	bl	8006488 <iprintf>
	for (int i = 0; i < 8; ++i) {
 80034d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d4:	3301      	adds	r3, #1
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	2b07      	cmp	r3, #7
 80034dc:	ddee      	ble.n	80034bc <GetThreshold+0xa0>
		}
	printf("\r\n");
 80034de:	4857      	ldr	r0, [pc, #348]	; (800363c <GetThreshold+0x220>)
 80034e0:	f003 f858 	bl	8006594 <puts>
	MotorL_SetPWM(0);
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7fd fe21 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fd fe56 	bl	800119c <MotorR_SetPWM>
	BTN2_Flag = 0;
 80034f0:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <GetThreshold+0x20c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
	while(BTN2_Flag == 0);
 80034f6:	bf00      	nop
 80034f8:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <GetThreshold+0x20c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0fb      	beq.n	80034f8 <GetThreshold+0xdc>
//	while(LL_GPIO_IsInputPinSet(BTN2_GPIO_Port,BTN2_Pin) == 0);
	BTN2_Flag = 0;
 8003500:	4b49      	ldr	r3, [pc, #292]	; (8003628 <GetThreshold+0x20c>)
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
	printf("Getting Black Line\n");
 8003506:	484e      	ldr	r0, [pc, #312]	; (8003640 <GetThreshold+0x224>)
 8003508:	f003 f844 	bl	8006594 <puts>
	MotorL_SetPWM(-3600);
 800350c:	484d      	ldr	r0, [pc, #308]	; (8003644 <GetThreshold+0x228>)
 800350e:	f7fd fe0d 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(-3600);
 8003512:	484c      	ldr	r0, [pc, #304]	; (8003644 <GetThreshold+0x228>)
 8003514:	f7fd fe42 	bl	800119c <MotorR_SetPWM>
	uint16_t BlackValue[] = { 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095 };
 8003518:	4b4b      	ldr	r3, [pc, #300]	; (8003648 <GetThreshold+0x22c>)
 800351a:	1d3c      	adds	r4, r7, #4
 800351c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800351e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 0; i < ADC_Sample_Times; ++i) {
 8003522:	2300      	movs	r3, #0
 8003524:	633b      	str	r3, [r7, #48]	; 0x30
 8003526:	e025      	b.n	8003574 <GetThreshold+0x158>
		for (int i = 0; i < NumberOfSensor; ++i) {
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352c:	e01c      	b.n	8003568 <GetThreshold+0x14c>
			if (Sensor_ADC_Value[i] < BlackValue[i]) {
 800352e:	4a3f      	ldr	r2, [pc, #252]	; (800362c <GetThreshold+0x210>)
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003536:	b29a      	uxth	r2, r3
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003540:	440b      	add	r3, r1
 8003542:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003546:	429a      	cmp	r2, r3
 8003548:	d20b      	bcs.n	8003562 <GetThreshold+0x146>
				BlackValue[i] = Sensor_ADC_Value[i];
 800354a:	4a38      	ldr	r2, [pc, #224]	; (800362c <GetThreshold+0x210>)
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003552:	b29a      	uxth	r2, r3
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800355c:	440b      	add	r3, r1
 800355e:	f823 2c3c 	strh.w	r2, [r3, #-60]
		for (int i = 0; i < NumberOfSensor; ++i) {
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	3301      	adds	r3, #1
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	2b07      	cmp	r3, #7
 800356c:	dddf      	ble.n	800352e <GetThreshold+0x112>
	for (int i = 0; i < ADC_Sample_Times; ++i) {
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	3301      	adds	r3, #1
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	4a2e      	ldr	r2, [pc, #184]	; (8003630 <GetThreshold+0x214>)
 8003578:	4293      	cmp	r3, r2
 800357a:	ddd5      	ble.n	8003528 <GetThreshold+0x10c>
			}
		}
	}
	printf("BlackValue:\t");
 800357c:	4833      	ldr	r0, [pc, #204]	; (800364c <GetThreshold+0x230>)
 800357e:	f002 ff83 	bl	8006488 <iprintf>
	for (int i = 0; i < 8; ++i) {
 8003582:	2300      	movs	r3, #0
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
 8003586:	e00d      	b.n	80035a4 <GetThreshold+0x188>
			printf("%d \t",BlackValue[i] );
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003590:	4413      	add	r3, r2
 8003592:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003596:	4619      	mov	r1, r3
 8003598:	4827      	ldr	r0, [pc, #156]	; (8003638 <GetThreshold+0x21c>)
 800359a:	f002 ff75 	bl	8006488 <iprintf>
	for (int i = 0; i < 8; ++i) {
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	3301      	adds	r3, #1
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	2b07      	cmp	r3, #7
 80035a8:	ddee      	ble.n	8003588 <GetThreshold+0x16c>
		}
	printf("\r\n");
 80035aa:	4824      	ldr	r0, [pc, #144]	; (800363c <GetThreshold+0x220>)
 80035ac:	f002 fff2 	bl	8006594 <puts>
	MotorL_SetPWM(0);
 80035b0:	2000      	movs	r0, #0
 80035b2:	f7fd fdbb 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fd fdf0 	bl	800119c <MotorR_SetPWM>
	printf("Done:\t");
 80035bc:	4824      	ldr	r0, [pc, #144]	; (8003650 <GetThreshold+0x234>)
 80035be:	f002 ff63 	bl	8006488 <iprintf>
	for (int i = 0; i < 8; ++i) {
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
 80035c6:	e022      	b.n	800360e <GetThreshold+0x1f2>
		Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i]) / 2;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80035d0:	4413      	add	r3, r2
 80035d2:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80035d6:	461a      	mov	r2, r3
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80035e0:	440b      	add	r3, r1
 80035e2:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80035e6:	4413      	add	r3, r2
 80035e8:	0fda      	lsrs	r2, r3, #31
 80035ea:	4413      	add	r3, r2
 80035ec:	105b      	asrs	r3, r3, #1
 80035ee:	b299      	uxth	r1, r3
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <GetThreshold+0x238>)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		printf("%d \t",Sensor_Threshold[i] );
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <GetThreshold+0x238>)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003600:	4619      	mov	r1, r3
 8003602:	480d      	ldr	r0, [pc, #52]	; (8003638 <GetThreshold+0x21c>)
 8003604:	f002 ff40 	bl	8006488 <iprintf>
	for (int i = 0; i < 8; ++i) {
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	3301      	adds	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	2b07      	cmp	r3, #7
 8003612:	ddd9      	ble.n	80035c8 <GetThreshold+0x1ac>
	}
	printf("\r\n");
 8003614:	4809      	ldr	r0, [pc, #36]	; (800363c <GetThreshold+0x220>)
 8003616:	f002 ffbd 	bl	8006594 <puts>

}
 800361a:	bf00      	nop
 800361c:	3744      	adds	r7, #68	; 0x44
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	bf00      	nop
 8003624:	08008838 	.word	0x08008838
 8003628:	20000214 	.word	0x20000214
 800362c:	20000224 	.word	0x20000224
 8003630:	000f423f 	.word	0x000f423f
 8003634:	0800884c 	.word	0x0800884c
 8003638:	0800885c 	.word	0x0800885c
 800363c:	08008864 	.word	0x08008864
 8003640:	08008868 	.word	0x08008868
 8003644:	fffff1f0 	.word	0xfffff1f0
 8003648:	08008894 	.word	0x08008894
 800364c:	0800887c 	.word	0x0800887c
 8003650:	0800888c 	.word	0x0800888c
 8003654:	20000000 	.word	0x20000000

08003658 <Sensor_Convert_A2D>:
void Sensor_Convert_A2D() {
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
	LineDetect = 0;
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <Sensor_Convert_A2D+0x60>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; ++i) {
 8003664:	2300      	movs	r3, #0
 8003666:	607b      	str	r3, [r7, #4]
 8003668:	e01c      	b.n	80036a4 <Sensor_Convert_A2D+0x4c>
		if (Sensor_ADC_Value[i] < Sensor_Threshold[i]) {
 800366a:	4a14      	ldr	r2, [pc, #80]	; (80036bc <Sensor_Convert_A2D+0x64>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003672:	b29a      	uxth	r2, r3
 8003674:	4912      	ldr	r1, [pc, #72]	; (80036c0 <Sensor_Convert_A2D+0x68>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800367c:	429a      	cmp	r2, r3
 800367e:	d20e      	bcs.n	800369e <Sensor_Convert_A2D+0x46>
			sbi(LineDetect, (7 - i));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1c3 0307 	rsb	r3, r3, #7
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	b25a      	sxtb	r2, r3
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <Sensor_Convert_A2D+0x60>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b25b      	sxtb	r3, r3
 8003694:	4313      	orrs	r3, r2
 8003696:	b25b      	sxtb	r3, r3
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <Sensor_Convert_A2D+0x60>)
 800369c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; ++i) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	dddf      	ble.n	800366a <Sensor_Convert_A2D+0x12>
			//			  printf("1 ");
		}
	};
	//	printf("\n");
	//	LL_mDelay(500);
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000205 	.word	0x20000205
 80036bc:	20000224 	.word	0x20000224
 80036c0:	20000000 	.word	0x20000000
 80036c4:	00000000 	.word	0x00000000

080036c8 <Car_DiThang_Process>:
		Servo_SetAngle(ServoAngle);
		printf("Servo Angle: %g \n", ServoAngle);
	}
}

void Car_DiThang_Process() {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	MotorL_SetPWM(MaxSpeed);
 80036cc:	4b12      	ldr	r3, [pc, #72]	; (8003718 <Car_DiThang_Process+0x50>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd fd2b 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed*0.95);
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <Car_DiThang_Process+0x50>)
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fc fe92 	bl	8000404 <__aeabi_i2d>
 80036e0:	a30b      	add	r3, pc, #44	; (adr r3, 8003710 <Car_DiThang_Process+0x48>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	f7fc fef7 	bl	80004d8 <__aeabi_dmul>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	f7fd f9a1 	bl	8000a38 <__aeabi_d2iz>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fd4f 	bl	800119c <MotorR_SetPWM>
	Servo_SetAngle(0);
 80036fe:	f04f 0000 	mov.w	r0, #0
 8003702:	f7fd fd83 	bl	800120c <Servo_SetAngle>

}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	f3af 8000 	nop.w
 8003710:	66666666 	.word	0x66666666
 8003714:	3fee6666 	.word	0x3fee6666
 8003718:	20000010 	.word	0x20000010
 800371c:	00000000 	.word	0x00000000

08003720 <Car_BamLine_Process>:
void Car_BamLine_Process() {
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	if (CarState == LechTrai) {
 8003724:	4bd6      	ldr	r3, [pc, #856]	; (8003a80 <Car_BamLine_Process+0x360>)
 8003726:	f993 3000 	ldrsb.w	r3, [r3]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	f040 81dd 	bne.w	8003aec <Car_BamLine_Process+0x3cc>
		switch (LineDetect) {
 8003732:	4bd4      	ldr	r3, [pc, #848]	; (8003a84 <Car_BamLine_Process+0x364>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2bc0      	cmp	r3, #192	; 0xc0
 8003738:	d02f      	beq.n	800379a <Car_BamLine_Process+0x7a>
 800373a:	2bc0      	cmp	r3, #192	; 0xc0
 800373c:	f300 83b3 	bgt.w	8003ea6 <Car_BamLine_Process+0x786>
 8003740:	2b0e      	cmp	r3, #14
 8003742:	dc27      	bgt.n	8003794 <Car_BamLine_Process+0x74>
 8003744:	2b00      	cmp	r3, #0
 8003746:	f2c0 83ae 	blt.w	8003ea6 <Car_BamLine_Process+0x786>
 800374a:	2b0e      	cmp	r3, #14
 800374c:	f200 83ab 	bhi.w	8003ea6 <Car_BamLine_Process+0x786>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <Car_BamLine_Process+0x38>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	0800384b 	.word	0x0800384b
 800375c:	080038a3 	.word	0x080038a3
 8003760:	08003ea7 	.word	0x08003ea7
 8003764:	080038fb 	.word	0x080038fb
 8003768:	08003ea7 	.word	0x08003ea7
 800376c:	08003ea7 	.word	0x08003ea7
 8003770:	080039ab 	.word	0x080039ab
 8003774:	08003953 	.word	0x08003953
 8003778:	08003ea7 	.word	0x08003ea7
 800377c:	08003ea7 	.word	0x08003ea7
 8003780:	08003ea7 	.word	0x08003ea7
 8003784:	08003ea7 	.word	0x08003ea7
 8003788:	08003ab1 	.word	0x08003ab1
 800378c:	08003ea7 	.word	0x08003ea7
 8003790:	08003a03 	.word	0x08003a03
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d02c      	beq.n	80037f2 <Car_BamLine_Process+0xd2>
			//			  case 0b00011100:
			//				  MotorR_SetPWM(MaxSpeed * 0.95);
			//				  MotorL_SetPWM(MaxSpeed * 1);
			//				  Servo_SetAngle(4);
		}
		return;
 8003798:	e385      	b.n	8003ea6 <Car_BamLine_Process+0x786>
			MotorR_SetPWM(MaxSpeed * 0.60);
 800379a:	4bbb      	ldr	r3, [pc, #748]	; (8003a88 <Car_BamLine_Process+0x368>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fc fe30 	bl	8000404 <__aeabi_i2d>
 80037a4:	a3a6      	add	r3, pc, #664	; (adr r3, 8003a40 <Car_BamLine_Process+0x320>)
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f7fc fe95 	bl	80004d8 <__aeabi_dmul>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	f7fd f93f 	bl	8000a38 <__aeabi_d2iz>
 80037ba:	4603      	mov	r3, r0
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fced 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.80);
 80037c2:	4bb1      	ldr	r3, [pc, #708]	; (8003a88 <Car_BamLine_Process+0x368>)
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fc fe1c 	bl	8000404 <__aeabi_i2d>
 80037cc:	a39e      	add	r3, pc, #632	; (adr r3, 8003a48 <Car_BamLine_Process+0x328>)
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f7fc fe81 	bl	80004d8 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	f7fd f92b 	bl	8000a38 <__aeabi_d2iz>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fca1 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(59); // 73
 80037ea:	48a8      	ldr	r0, [pc, #672]	; (8003a8c <Car_BamLine_Process+0x36c>)
 80037ec:	f7fd fd0e 	bl	800120c <Servo_SetAngle>
			break;
 80037f0:	e17b      	b.n	8003aea <Car_BamLine_Process+0x3ca>
			MotorR_SetPWM(MaxSpeed * 0.60);
 80037f2:	4ba5      	ldr	r3, [pc, #660]	; (8003a88 <Car_BamLine_Process+0x368>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fe04 	bl	8000404 <__aeabi_i2d>
 80037fc:	a390      	add	r3, pc, #576	; (adr r3, 8003a40 <Car_BamLine_Process+0x320>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc fe69 	bl	80004d8 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	f7fd f913 	bl	8000a38 <__aeabi_d2iz>
 8003812:	4603      	mov	r3, r0
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fcc1 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.85);
 800381a:	4b9b      	ldr	r3, [pc, #620]	; (8003a88 <Car_BamLine_Process+0x368>)
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fdf0 	bl	8000404 <__aeabi_i2d>
 8003824:	a38a      	add	r3, pc, #552	; (adr r3, 8003a50 <Car_BamLine_Process+0x330>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f7fc fe55 	bl	80004d8 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f8ff 	bl	8000a38 <__aeabi_d2iz>
 800383a:	4603      	mov	r3, r0
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd fc75 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(52.5); // 64
 8003842:	4893      	ldr	r0, [pc, #588]	; (8003a90 <Car_BamLine_Process+0x370>)
 8003844:	f7fd fce2 	bl	800120c <Servo_SetAngle>
			break;
 8003848:	e14f      	b.n	8003aea <Car_BamLine_Process+0x3ca>
			MotorR_SetPWM(MaxSpeed * 0.65);
 800384a:	4b8f      	ldr	r3, [pc, #572]	; (8003a88 <Car_BamLine_Process+0x368>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fdd8 	bl	8000404 <__aeabi_i2d>
 8003854:	a380      	add	r3, pc, #512	; (adr r3, 8003a58 <Car_BamLine_Process+0x338>)
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f7fc fe3d 	bl	80004d8 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	f7fd f8e7 	bl	8000a38 <__aeabi_d2iz>
 800386a:	4603      	mov	r3, r0
 800386c:	4618      	mov	r0, r3
 800386e:	f7fd fc95 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.85);
 8003872:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <Car_BamLine_Process+0x368>)
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fdc4 	bl	8000404 <__aeabi_i2d>
 800387c:	a374      	add	r3, pc, #464	; (adr r3, 8003a50 <Car_BamLine_Process+0x330>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f7fc fe29 	bl	80004d8 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f7fd f8d3 	bl	8000a38 <__aeabi_d2iz>
 8003892:	4603      	mov	r3, r0
 8003894:	4618      	mov	r0, r3
 8003896:	f7fd fc49 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(47); // 59
 800389a:	487e      	ldr	r0, [pc, #504]	; (8003a94 <Car_BamLine_Process+0x374>)
 800389c:	f7fd fcb6 	bl	800120c <Servo_SetAngle>
			break;
 80038a0:	e123      	b.n	8003aea <Car_BamLine_Process+0x3ca>
			MotorR_SetPWM(MaxSpeed * 0.70);
 80038a2:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <Car_BamLine_Process+0x368>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fc fdac 	bl	8000404 <__aeabi_i2d>
 80038ac:	a36c      	add	r3, pc, #432	; (adr r3, 8003a60 <Car_BamLine_Process+0x340>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f7fc fe11 	bl	80004d8 <__aeabi_dmul>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	f7fd f8bb 	bl	8000a38 <__aeabi_d2iz>
 80038c2:	4603      	mov	r3, r0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd fc69 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.9);
 80038ca:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <Car_BamLine_Process+0x368>)
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fc fd98 	bl	8000404 <__aeabi_i2d>
 80038d4:	a364      	add	r3, pc, #400	; (adr r3, 8003a68 <Car_BamLine_Process+0x348>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f7fc fdfd 	bl	80004d8 <__aeabi_dmul>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7fd f8a7 	bl	8000a38 <__aeabi_d2iz>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fd fc1d 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(31); // 45
 80038f2:	4869      	ldr	r0, [pc, #420]	; (8003a98 <Car_BamLine_Process+0x378>)
 80038f4:	f7fd fc8a 	bl	800120c <Servo_SetAngle>
			break;
 80038f8:	e0f7      	b.n	8003aea <Car_BamLine_Process+0x3ca>
			MotorR_SetPWM(MaxSpeed * 0.85);
 80038fa:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <Car_BamLine_Process+0x368>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fd80 	bl	8000404 <__aeabi_i2d>
 8003904:	a352      	add	r3, pc, #328	; (adr r3, 8003a50 <Car_BamLine_Process+0x330>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f7fc fde5 	bl	80004d8 <__aeabi_dmul>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	f7fd f88f 	bl	8000a38 <__aeabi_d2iz>
 800391a:	4603      	mov	r3, r0
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fc3d 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 8003922:	4b59      	ldr	r3, [pc, #356]	; (8003a88 <Car_BamLine_Process+0x368>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fc fd6c 	bl	8000404 <__aeabi_i2d>
 800392c:	a350      	add	r3, pc, #320	; (adr r3, 8003a70 <Car_BamLine_Process+0x350>)
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f7fc fdd1 	bl	80004d8 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f7fd f87b 	bl	8000a38 <__aeabi_d2iz>
 8003942:	4603      	mov	r3, r0
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fbf1 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(33); //33
 800394a:	4854      	ldr	r0, [pc, #336]	; (8003a9c <Car_BamLine_Process+0x37c>)
 800394c:	f7fd fc5e 	bl	800120c <Servo_SetAngle>
			break;
 8003950:	e0cb      	b.n	8003aea <Car_BamLine_Process+0x3ca>
			MotorR_SetPWM(MaxSpeed * 0.70);
 8003952:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <Car_BamLine_Process+0x368>)
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fd54 	bl	8000404 <__aeabi_i2d>
 800395c:	a340      	add	r3, pc, #256	; (adr r3, 8003a60 <Car_BamLine_Process+0x340>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f7fc fdb9 	bl	80004d8 <__aeabi_dmul>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f7fd f863 	bl	8000a38 <__aeabi_d2iz>
 8003972:	4603      	mov	r3, r0
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fc11 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <Car_BamLine_Process+0x368>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fc fd40 	bl	8000404 <__aeabi_i2d>
 8003984:	a33a      	add	r3, pc, #232	; (adr r3, 8003a70 <Car_BamLine_Process+0x350>)
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f7fc fda5 	bl	80004d8 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd f84f 	bl	8000a38 <__aeabi_d2iz>
 800399a:	4603      	mov	r3, r0
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd fbc5 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(25); // 25
 80039a2:	483f      	ldr	r0, [pc, #252]	; (8003aa0 <Car_BamLine_Process+0x380>)
 80039a4:	f7fd fc32 	bl	800120c <Servo_SetAngle>
			break;
 80039a8:	e09f      	b.n	8003aea <Car_BamLine_Process+0x3ca>
			MotorR_SetPWM(MaxSpeed * 0.75);
 80039aa:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <Car_BamLine_Process+0x368>)
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fd28 	bl	8000404 <__aeabi_i2d>
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <Car_BamLine_Process+0x384>)
 80039ba:	f7fc fd8d 	bl	80004d8 <__aeabi_dmul>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f7fd f837 	bl	8000a38 <__aeabi_d2iz>
 80039ca:	4603      	mov	r3, r0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd fbe5 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <Car_BamLine_Process+0x368>)
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fd14 	bl	8000404 <__aeabi_i2d>
 80039dc:	a324      	add	r3, pc, #144	; (adr r3, 8003a70 <Car_BamLine_Process+0x350>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f7fc fd79 	bl	80004d8 <__aeabi_dmul>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fd f823 	bl	8000a38 <__aeabi_d2iz>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fb99 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(19); //-24
 80039fa:	482b      	ldr	r0, [pc, #172]	; (8003aa8 <Car_BamLine_Process+0x388>)
 80039fc:	f7fd fc06 	bl	800120c <Servo_SetAngle>
			break;
 8003a00:	e073      	b.n	8003aea <Car_BamLine_Process+0x3ca>
			MotorR_SetPWM(MaxSpeed * 0.93);
 8003a02:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <Car_BamLine_Process+0x368>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fc fcfc 	bl	8000404 <__aeabi_i2d>
 8003a0c:	a31a      	add	r3, pc, #104	; (adr r3, 8003a78 <Car_BamLine_Process+0x358>)
 8003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a12:	f7fc fd61 	bl	80004d8 <__aeabi_dmul>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f7fd f80b 	bl	8000a38 <__aeabi_d2iz>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fd fbb9 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 1);
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <Car_BamLine_Process+0x368>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd fb7c 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(18); //20
 8003a34:	481d      	ldr	r0, [pc, #116]	; (8003aac <Car_BamLine_Process+0x38c>)
 8003a36:	f7fd fbe9 	bl	800120c <Servo_SetAngle>
			break;
 8003a3a:	e056      	b.n	8003aea <Car_BamLine_Process+0x3ca>
 8003a3c:	f3af 8000 	nop.w
 8003a40:	33333333 	.word	0x33333333
 8003a44:	3fe33333 	.word	0x3fe33333
 8003a48:	9999999a 	.word	0x9999999a
 8003a4c:	3fe99999 	.word	0x3fe99999
 8003a50:	33333333 	.word	0x33333333
 8003a54:	3feb3333 	.word	0x3feb3333
 8003a58:	cccccccd 	.word	0xcccccccd
 8003a5c:	3fe4cccc 	.word	0x3fe4cccc
 8003a60:	66666666 	.word	0x66666666
 8003a64:	3fe66666 	.word	0x3fe66666
 8003a68:	cccccccd 	.word	0xcccccccd
 8003a6c:	3feccccc 	.word	0x3feccccc
 8003a70:	66666666 	.word	0x66666666
 8003a74:	3fee6666 	.word	0x3fee6666
 8003a78:	5c28f5c3 	.word	0x5c28f5c3
 8003a7c:	3fedc28f 	.word	0x3fedc28f
 8003a80:	20000206 	.word	0x20000206
 8003a84:	20000205 	.word	0x20000205
 8003a88:	20000010 	.word	0x20000010
 8003a8c:	426c0000 	.word	0x426c0000
 8003a90:	42520000 	.word	0x42520000
 8003a94:	423c0000 	.word	0x423c0000
 8003a98:	41f80000 	.word	0x41f80000
 8003a9c:	42040000 	.word	0x42040000
 8003aa0:	41c80000 	.word	0x41c80000
 8003aa4:	3fe80000 	.word	0x3fe80000
 8003aa8:	41980000 	.word	0x41980000
 8003aac:	41900000 	.word	0x41900000
			MotorR_SetPWM(MaxSpeed * 0.90);
 8003ab0:	4bd3      	ldr	r3, [pc, #844]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fca5 	bl	8000404 <__aeabi_i2d>
 8003aba:	a3c1      	add	r3, pc, #772	; (adr r3, 8003dc0 <Car_BamLine_Process+0x6a0>)
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f7fc fd0a 	bl	80004d8 <__aeabi_dmul>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	f7fc ffb4 	bl	8000a38 <__aeabi_d2iz>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fb62 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 1);
 8003ad8:	4bc9      	ldr	r3, [pc, #804]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd fb25 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(10); //10
 8003ae2:	48c8      	ldr	r0, [pc, #800]	; (8003e04 <Car_BamLine_Process+0x6e4>)
 8003ae4:	f7fd fb92 	bl	800120c <Servo_SetAngle>
			break;
 8003ae8:	bf00      	nop
		return;
 8003aea:	e1dc      	b.n	8003ea6 <Car_BamLine_Process+0x786>
	};
	if (CarState == LechPhai) {
 8003aec:	4bc6      	ldr	r3, [pc, #792]	; (8003e08 <Car_BamLine_Process+0x6e8>)
 8003aee:	f993 3000 	ldrsb.w	r3, [r3]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f040 81da 	bne.w	8003eac <Car_BamLine_Process+0x78c>
		switch (LineDetect) {
 8003af8:	4bc4      	ldr	r3, [pc, #784]	; (8003e0c <Car_BamLine_Process+0x6ec>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2be0      	cmp	r3, #224	; 0xe0
 8003afe:	f000 8107 	beq.w	8003d10 <Car_BamLine_Process+0x5f0>
 8003b02:	2be0      	cmp	r3, #224	; 0xe0
 8003b04:	f300 81d1 	bgt.w	8003eaa <Car_BamLine_Process+0x78a>
 8003b08:	2bc0      	cmp	r3, #192	; 0xc0
 8003b0a:	f000 80d5 	beq.w	8003cb8 <Car_BamLine_Process+0x598>
 8003b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b10:	f300 81cb 	bgt.w	8003eaa <Car_BamLine_Process+0x78a>
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	f000 80a3 	beq.w	8003c60 <Car_BamLine_Process+0x540>
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	f300 81c5 	bgt.w	8003eaa <Car_BamLine_Process+0x78a>
 8003b20:	2b70      	cmp	r3, #112	; 0x70
 8003b22:	f000 8185 	beq.w	8003e30 <Car_BamLine_Process+0x710>
 8003b26:	2b70      	cmp	r3, #112	; 0x70
 8003b28:	f300 81bf 	bgt.w	8003eaa <Car_BamLine_Process+0x78a>
 8003b2c:	2b60      	cmp	r3, #96	; 0x60
 8003b2e:	f000 811b 	beq.w	8003d68 <Car_BamLine_Process+0x648>
 8003b32:	2b60      	cmp	r3, #96	; 0x60
 8003b34:	f300 81b9 	bgt.w	8003eaa <Car_BamLine_Process+0x78a>
 8003b38:	2b30      	cmp	r3, #48	; 0x30
 8003b3a:	f000 8196 	beq.w	8003e6a <Car_BamLine_Process+0x74a>
 8003b3e:	2b30      	cmp	r3, #48	; 0x30
 8003b40:	f300 81b3 	bgt.w	8003eaa <Car_BamLine_Process+0x78a>
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d007      	beq.n	8003b58 <Car_BamLine_Process+0x438>
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	f300 81ae 	bgt.w	8003eaa <Car_BamLine_Process+0x78a>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d05a      	beq.n	8003c08 <Car_BamLine_Process+0x4e8>
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d02c      	beq.n	8003bb0 <Car_BamLine_Process+0x490>
			//			  case 0b00111000:
			//				  MotorL_SetPWM(MaxSpeed * 0.95);
			//				  MotorR_SetPWM(MaxSpeed * 1);
			//				  Servo_SetAngle(-0);
		}
		return;
 8003b56:	e1a8      	b.n	8003eaa <Car_BamLine_Process+0x78a>
			MotorR_SetPWM(MaxSpeed * 0.60);
 8003b58:	4ba9      	ldr	r3, [pc, #676]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fc fc51 	bl	8000404 <__aeabi_i2d>
 8003b62:	a399      	add	r3, pc, #612	; (adr r3, 8003dc8 <Car_BamLine_Process+0x6a8>)
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f7fc fcb6 	bl	80004d8 <__aeabi_dmul>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7fc ff60 	bl	8000a38 <__aeabi_d2iz>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fb0e 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.80);
 8003b80:	4b9f      	ldr	r3, [pc, #636]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fc3d 	bl	8000404 <__aeabi_i2d>
 8003b8a:	a391      	add	r3, pc, #580	; (adr r3, 8003dd0 <Car_BamLine_Process+0x6b0>)
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f7fc fca2 	bl	80004d8 <__aeabi_dmul>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f7fc ff4c 	bl	8000a38 <__aeabi_d2iz>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fac2 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(-45); // -67
 8003ba8:	4899      	ldr	r0, [pc, #612]	; (8003e10 <Car_BamLine_Process+0x6f0>)
 8003baa:	f7fd fb2f 	bl	800120c <Servo_SetAngle>
			break;
 8003bae:	e179      	b.n	8003ea4 <Car_BamLine_Process+0x784>
			MotorL_SetPWM(MaxSpeed * 0.60);
 8003bb0:	4b93      	ldr	r3, [pc, #588]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fc fc25 	bl	8000404 <__aeabi_i2d>
 8003bba:	a383      	add	r3, pc, #524	; (adr r3, 8003dc8 <Car_BamLine_Process+0x6a8>)
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f7fc fc8a 	bl	80004d8 <__aeabi_dmul>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f7fc ff34 	bl	8000a38 <__aeabi_d2iz>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd faaa 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.85);
 8003bd8:	4b89      	ldr	r3, [pc, #548]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fc fc11 	bl	8000404 <__aeabi_i2d>
 8003be2:	a37d      	add	r3, pc, #500	; (adr r3, 8003dd8 <Car_BamLine_Process+0x6b8>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f7fc fc76 	bl	80004d8 <__aeabi_dmul>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f7fc ff20 	bl	8000a38 <__aeabi_d2iz>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fd face 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-40); // -62
 8003c00:	4884      	ldr	r0, [pc, #528]	; (8003e14 <Car_BamLine_Process+0x6f4>)
 8003c02:	f7fd fb03 	bl	800120c <Servo_SetAngle>
			break;
 8003c06:	e14d      	b.n	8003ea4 <Car_BamLine_Process+0x784>
			MotorL_SetPWM(MaxSpeed * 0.65);
 8003c08:	4b7d      	ldr	r3, [pc, #500]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fbf9 	bl	8000404 <__aeabi_i2d>
 8003c12:	a373      	add	r3, pc, #460	; (adr r3, 8003de0 <Car_BamLine_Process+0x6c0>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f7fc fc5e 	bl	80004d8 <__aeabi_dmul>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fc ff08 	bl	8000a38 <__aeabi_d2iz>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fa7e 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.85);
 8003c30:	4b73      	ldr	r3, [pc, #460]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fbe5 	bl	8000404 <__aeabi_i2d>
 8003c3a:	a367      	add	r3, pc, #412	; (adr r3, 8003dd8 <Car_BamLine_Process+0x6b8>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fc4a 	bl	80004d8 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f7fc fef4 	bl	8000a38 <__aeabi_d2iz>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd faa2 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-36); //-52
 8003c58:	486f      	ldr	r0, [pc, #444]	; (8003e18 <Car_BamLine_Process+0x6f8>)
 8003c5a:	f7fd fad7 	bl	800120c <Servo_SetAngle>
			break;
 8003c5e:	e121      	b.n	8003ea4 <Car_BamLine_Process+0x784>
			MotorL_SetPWM(MaxSpeed * 0.70);
 8003c60:	4b67      	ldr	r3, [pc, #412]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fbcd 	bl	8000404 <__aeabi_i2d>
 8003c6a:	a35f      	add	r3, pc, #380	; (adr r3, 8003de8 <Car_BamLine_Process+0x6c8>)
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f7fc fc32 	bl	80004d8 <__aeabi_dmul>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f7fc fedc 	bl	8000a38 <__aeabi_d2iz>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fa52 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.90);
 8003c88:	4b5d      	ldr	r3, [pc, #372]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fc fbb9 	bl	8000404 <__aeabi_i2d>
 8003c92:	a34b      	add	r3, pc, #300	; (adr r3, 8003dc0 <Car_BamLine_Process+0x6a0>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f7fc fc1e 	bl	80004d8 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f7fc fec8 	bl	8000a38 <__aeabi_d2iz>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd fa76 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-31); //-43
 8003cb0:	485a      	ldr	r0, [pc, #360]	; (8003e1c <Car_BamLine_Process+0x6fc>)
 8003cb2:	f7fd faab 	bl	800120c <Servo_SetAngle>
			break;
 8003cb6:	e0f5      	b.n	8003ea4 <Car_BamLine_Process+0x784>
			MotorL_SetPWM(MaxSpeed * 0.87);
 8003cb8:	4b51      	ldr	r3, [pc, #324]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fba1 	bl	8000404 <__aeabi_i2d>
 8003cc2:	a34b      	add	r3, pc, #300	; (adr r3, 8003df0 <Car_BamLine_Process+0x6d0>)
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f7fc fc06 	bl	80004d8 <__aeabi_dmul>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f7fc feb0 	bl	8000a38 <__aeabi_d2iz>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fa26 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003ce0:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fc fb8d 	bl	8000404 <__aeabi_i2d>
 8003cea:	a343      	add	r3, pc, #268	; (adr r3, 8003df8 <Car_BamLine_Process+0x6d8>)
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f7fc fbf2 	bl	80004d8 <__aeabi_dmul>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	f7fc fe9c 	bl	8000a38 <__aeabi_d2iz>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd fa4a 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-26); //-35
 8003d08:	4845      	ldr	r0, [pc, #276]	; (8003e20 <Car_BamLine_Process+0x700>)
 8003d0a:	f7fd fa7f 	bl	800120c <Servo_SetAngle>
			break;
 8003d0e:	e0c9      	b.n	8003ea4 <Car_BamLine_Process+0x784>
			MotorL_SetPWM(MaxSpeed * 0.70);
 8003d10:	4b3b      	ldr	r3, [pc, #236]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fb75 	bl	8000404 <__aeabi_i2d>
 8003d1a:	a333      	add	r3, pc, #204	; (adr r3, 8003de8 <Car_BamLine_Process+0x6c8>)
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	f7fc fbda 	bl	80004d8 <__aeabi_dmul>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f7fc fe84 	bl	8000a38 <__aeabi_d2iz>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd f9fa 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003d38:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fc fb61 	bl	8000404 <__aeabi_i2d>
 8003d42:	a32d      	add	r3, pc, #180	; (adr r3, 8003df8 <Car_BamLine_Process+0x6d8>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f7fc fbc6 	bl	80004d8 <__aeabi_dmul>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	f7fc fe70 	bl	8000a38 <__aeabi_d2iz>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd fa1e 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-22); //-27
 8003d60:	4830      	ldr	r0, [pc, #192]	; (8003e24 <Car_BamLine_Process+0x704>)
 8003d62:	f7fd fa53 	bl	800120c <Servo_SetAngle>
			break;
 8003d66:	e09d      	b.n	8003ea4 <Car_BamLine_Process+0x784>
			MotorL_SetPWM(MaxSpeed * 0.75);
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc fb49 	bl	8000404 <__aeabi_i2d>
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <Car_BamLine_Process+0x708>)
 8003d78:	f7fc fbae 	bl	80004d8 <__aeabi_dmul>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	f7fc fe58 	bl	8000a38 <__aeabi_d2iz>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fd f9ce 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <Car_BamLine_Process+0x6e0>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc fb35 	bl	8000404 <__aeabi_i2d>
 8003d9a:	a317      	add	r3, pc, #92	; (adr r3, 8003df8 <Car_BamLine_Process+0x6d8>)
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f7fc fb9a 	bl	80004d8 <__aeabi_dmul>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4610      	mov	r0, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	f7fc fe44 	bl	8000a38 <__aeabi_d2iz>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fd f9f2 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-21); //-24
 8003db8:	481c      	ldr	r0, [pc, #112]	; (8003e2c <Car_BamLine_Process+0x70c>)
 8003dba:	f7fd fa27 	bl	800120c <Servo_SetAngle>
			break;
 8003dbe:	e071      	b.n	8003ea4 <Car_BamLine_Process+0x784>
 8003dc0:	cccccccd 	.word	0xcccccccd
 8003dc4:	3feccccc 	.word	0x3feccccc
 8003dc8:	33333333 	.word	0x33333333
 8003dcc:	3fe33333 	.word	0x3fe33333
 8003dd0:	9999999a 	.word	0x9999999a
 8003dd4:	3fe99999 	.word	0x3fe99999
 8003dd8:	33333333 	.word	0x33333333
 8003ddc:	3feb3333 	.word	0x3feb3333
 8003de0:	cccccccd 	.word	0xcccccccd
 8003de4:	3fe4cccc 	.word	0x3fe4cccc
 8003de8:	66666666 	.word	0x66666666
 8003dec:	3fe66666 	.word	0x3fe66666
 8003df0:	3d70a3d7 	.word	0x3d70a3d7
 8003df4:	3febd70a 	.word	0x3febd70a
 8003df8:	66666666 	.word	0x66666666
 8003dfc:	3fee6666 	.word	0x3fee6666
 8003e00:	20000010 	.word	0x20000010
 8003e04:	41200000 	.word	0x41200000
 8003e08:	20000206 	.word	0x20000206
 8003e0c:	20000205 	.word	0x20000205
 8003e10:	c2340000 	.word	0xc2340000
 8003e14:	c2200000 	.word	0xc2200000
 8003e18:	c2100000 	.word	0xc2100000
 8003e1c:	c1f80000 	.word	0xc1f80000
 8003e20:	c1d00000 	.word	0xc1d00000
 8003e24:	c1b00000 	.word	0xc1b00000
 8003e28:	3fe80000 	.word	0x3fe80000
 8003e2c:	c1a80000 	.word	0xc1a80000
			MotorL_SetPWM(MaxSpeed * 0.93);
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <Car_BamLine_Process+0x7a0>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fc fae5 	bl	8000404 <__aeabi_i2d>
 8003e3a:	a31d      	add	r3, pc, #116	; (adr r3, 8003eb0 <Car_BamLine_Process+0x790>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f7fc fb4a 	bl	80004d8 <__aeabi_dmul>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	f7fc fdf4 	bl	8000a38 <__aeabi_d2iz>
 8003e50:	4603      	mov	r3, r0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fd f96a 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 1);
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <Car_BamLine_Process+0x7a0>)
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd f99d 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-16); //-22
 8003e62:	4818      	ldr	r0, [pc, #96]	; (8003ec4 <Car_BamLine_Process+0x7a4>)
 8003e64:	f7fd f9d2 	bl	800120c <Servo_SetAngle>
			break;
 8003e68:	e01c      	b.n	8003ea4 <Car_BamLine_Process+0x784>
			MotorL_SetPWM(MaxSpeed * 0.95);
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <Car_BamLine_Process+0x7a0>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fac8 	bl	8000404 <__aeabi_i2d>
 8003e74:	a310      	add	r3, pc, #64	; (adr r3, 8003eb8 <Car_BamLine_Process+0x798>)
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f7fc fb2d 	bl	80004d8 <__aeabi_dmul>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7fc fdd7 	bl	8000a38 <__aeabi_d2iz>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd f94d 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 1);
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <Car_BamLine_Process+0x7a0>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd f980 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-10); //-13
 8003e9c:	480a      	ldr	r0, [pc, #40]	; (8003ec8 <Car_BamLine_Process+0x7a8>)
 8003e9e:	f7fd f9b5 	bl	800120c <Servo_SetAngle>
			break;
 8003ea2:	bf00      	nop
		return;
 8003ea4:	e001      	b.n	8003eaa <Car_BamLine_Process+0x78a>
		return;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <Car_BamLine_Process+0x78c>
		return;
 8003eaa:	bf00      	nop
	}
}
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	5c28f5c3 	.word	0x5c28f5c3
 8003eb4:	3fedc28f 	.word	0x3fedc28f
 8003eb8:	66666666 	.word	0x66666666
 8003ebc:	3fee6666 	.word	0x3fee6666
 8003ec0:	20000010 	.word	0x20000010
 8003ec4:	c1800000 	.word	0xc1800000
 8003ec8:	c1200000 	.word	0xc1200000
 8003ecc:	00000000 	.word	0x00000000

08003ed0 <Car_MatLine_Process>:

void Car_MatLine_Process() {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
//	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);

	switch (LineDetect) {
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <Car_MatLine_Process+0xe0>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d002      	beq.n	8003ee2 <Car_MatLine_Process+0x12>
 8003edc:	2bc0      	cmp	r3, #192	; 0xc0
 8003ede:	d02c      	beq.n	8003f3a <Car_MatLine_Process+0x6a>
		MotorR_SetPWM(MaxSpeed * 0.8);
		MotorL_SetPWM(MaxSpeed * 1.3);
		Servo_SetAngle(19);
		break;
	}
}
 8003ee0:	e057      	b.n	8003f92 <Car_MatLine_Process+0xc2>
		MotorR_SetPWM(MaxSpeed * 0.9);
 8003ee2:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <Car_MatLine_Process+0xe4>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc fa8c 	bl	8000404 <__aeabi_i2d>
 8003eec:	a32a      	add	r3, pc, #168	; (adr r3, 8003f98 <Car_MatLine_Process+0xc8>)
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f7fc faf1 	bl	80004d8 <__aeabi_dmul>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4610      	mov	r0, r2
 8003efc:	4619      	mov	r1, r3
 8003efe:	f7fc fd9b 	bl	8000a38 <__aeabi_d2iz>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fd f949 	bl	800119c <MotorR_SetPWM>
		MotorL_SetPWM(MaxSpeed * 1.3);
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <Car_MatLine_Process+0xe4>)
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc fa78 	bl	8000404 <__aeabi_i2d>
 8003f14:	a322      	add	r3, pc, #136	; (adr r3, 8003fa0 <Car_MatLine_Process+0xd0>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	f7fc fadd 	bl	80004d8 <__aeabi_dmul>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f7fc fd87 	bl	8000a38 <__aeabi_d2iz>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fd f8fd 	bl	800112c <MotorL_SetPWM>
		Servo_SetAngle(15);
 8003f32:	4821      	ldr	r0, [pc, #132]	; (8003fb8 <Car_MatLine_Process+0xe8>)
 8003f34:	f7fd f96a 	bl	800120c <Servo_SetAngle>
		break;
 8003f38:	e02b      	b.n	8003f92 <Car_MatLine_Process+0xc2>
		MotorR_SetPWM(MaxSpeed * 0.8);
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <Car_MatLine_Process+0xe4>)
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fa60 	bl	8000404 <__aeabi_i2d>
 8003f44:	a318      	add	r3, pc, #96	; (adr r3, 8003fa8 <Car_MatLine_Process+0xd8>)
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f7fc fac5 	bl	80004d8 <__aeabi_dmul>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f7fc fd6f 	bl	8000a38 <__aeabi_d2iz>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd f91d 	bl	800119c <MotorR_SetPWM>
		MotorL_SetPWM(MaxSpeed * 1.3);
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <Car_MatLine_Process+0xe4>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fa4c 	bl	8000404 <__aeabi_i2d>
 8003f6c:	a30c      	add	r3, pc, #48	; (adr r3, 8003fa0 <Car_MatLine_Process+0xd0>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f7fc fab1 	bl	80004d8 <__aeabi_dmul>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7fc fd5b 	bl	8000a38 <__aeabi_d2iz>
 8003f82:	4603      	mov	r3, r0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd f8d1 	bl	800112c <MotorL_SetPWM>
		Servo_SetAngle(19);
 8003f8a:	480c      	ldr	r0, [pc, #48]	; (8003fbc <Car_MatLine_Process+0xec>)
 8003f8c:	f7fd f93e 	bl	800120c <Servo_SetAngle>
		break;
 8003f90:	bf00      	nop
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	cccccccd 	.word	0xcccccccd
 8003f9c:	3feccccc 	.word	0x3feccccc
 8003fa0:	cccccccd 	.word	0xcccccccd
 8003fa4:	3ff4cccc 	.word	0x3ff4cccc
 8003fa8:	9999999a 	.word	0x9999999a
 8003fac:	3fe99999 	.word	0x3fe99999
 8003fb0:	20000205 	.word	0x20000205
 8003fb4:	20000010 	.word	0x20000010
 8003fb8:	41700000 	.word	0x41700000
 8003fbc:	41980000 	.word	0x41980000

08003fc0 <Car_ChuyenLanePhai_Process>:
void Car_ChuyenLanePhai_Process() {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	ChuyenLaneFlag = 1;
 8003fc4:	4b22      	ldr	r3, [pc, #136]	; (8004050 <Car_ChuyenLanePhai_Process+0x90>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
//	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
	MotorL_SetPWM(MaxSpeed * 2);      //0.7
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <Car_ChuyenLanePhai_Process+0x94>)
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd f8ab 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.7);      //0.5
 8003fd6:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <Car_ChuyenLanePhai_Process+0x94>)
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fa12 	bl	8000404 <__aeabi_i2d>
 8003fe0:	a319      	add	r3, pc, #100	; (adr r3, 8004048 <Car_ChuyenLanePhai_Process+0x88>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc fa77 	bl	80004d8 <__aeabi_dmul>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f7fc fd21 	bl	8000a38 <__aeabi_d2iz>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd f8cf 	bl	800119c <MotorR_SetPWM>
	Servo_SetAngle(54);
 8003ffe:	4816      	ldr	r0, [pc, #88]	; (8004058 <Car_ChuyenLanePhai_Process+0x98>)
 8004000:	f7fd f904 	bl	800120c <Servo_SetAngle>
	CarState = LechTrai;
 8004004:	4b15      	ldr	r3, [pc, #84]	; (800405c <Car_ChuyenLanePhai_Process+0x9c>)
 8004006:	22ff      	movs	r2, #255	; 0xff
 8004008:	701a      	strb	r2, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 800400a:	e001      	b.n	8004010 <Car_ChuyenLanePhai_Process+0x50>
			|| LineDetect == 0b00111000))
		Sensor_Convert_A2D();
 800400c:	f7ff fb24 	bl	8003658 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <Car_ChuyenLanePhai_Process+0xa0>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b18      	cmp	r3, #24
 8004016:	d007      	beq.n	8004028 <Car_ChuyenLanePhai_Process+0x68>
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <Car_ChuyenLanePhai_Process+0xa0>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b1c      	cmp	r3, #28
 800401e:	d003      	beq.n	8004028 <Car_ChuyenLanePhai_Process+0x68>
			|| LineDetect == 0b00111000))
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <Car_ChuyenLanePhai_Process+0xa0>)
 8004022:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004024:	2b38      	cmp	r3, #56	; 0x38
 8004026:	d1f1      	bne.n	800400c <Car_ChuyenLanePhai_Process+0x4c>
	MatLineFlag = 0;
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <Car_ChuyenLanePhai_Process+0xa4>)
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
	FullWhiteFlag = 0;
 800402e:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <Car_ChuyenLanePhai_Process+0xa8>)
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag = 0;
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <Car_ChuyenLanePhai_Process+0xac>)
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag_Raw = 0;
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <Car_ChuyenLanePhai_Process+0xb0>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
}
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}
 8004044:	f3af 8000 	nop.w
 8004048:	33333333 	.word	0x33333333
 800404c:	3ffb3333 	.word	0x3ffb3333
 8004050:	20000207 	.word	0x20000207
 8004054:	20000010 	.word	0x20000010
 8004058:	42580000 	.word	0x42580000
 800405c:	20000206 	.word	0x20000206
 8004060:	20000205 	.word	0x20000205
 8004064:	2000020c 	.word	0x2000020c
 8004068:	2000020b 	.word	0x2000020b
 800406c:	20000208 	.word	0x20000208
 8004070:	20000209 	.word	0x20000209
 8004074:	00000000 	.word	0x00000000

08004078 <Car_ChuyenLaneTrai_Process>:
void Car_ChuyenLaneTrai_Process() {
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
	ChuyenLaneFlag = 1;
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <Car_ChuyenLaneTrai_Process+0x90>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
	MotorR_SetPWM(MaxSpeed * 2);      //0.7
 8004082:	4b22      	ldr	r3, [pc, #136]	; (800410c <Car_ChuyenLaneTrai_Process+0x94>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd f887 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.7);      //0.5
 800408e:	4b1f      	ldr	r3, [pc, #124]	; (800410c <Car_ChuyenLaneTrai_Process+0x94>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc f9b6 	bl	8000404 <__aeabi_i2d>
 8004098:	a319      	add	r3, pc, #100	; (adr r3, 8004100 <Car_ChuyenLaneTrai_Process+0x88>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc fa1b 	bl	80004d8 <__aeabi_dmul>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f7fc fcc5 	bl	8000a38 <__aeabi_d2iz>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fd f83b 	bl	800112c <MotorL_SetPWM>
	Servo_SetAngle(-30);
 80040b6:	4816      	ldr	r0, [pc, #88]	; (8004110 <Car_ChuyenLaneTrai_Process+0x98>)
 80040b8:	f7fd f8a8 	bl	800120c <Servo_SetAngle>
	CarState = LechPhai;
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <Car_ChuyenLaneTrai_Process+0x9c>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 80040c2:	e001      	b.n	80040c8 <Car_ChuyenLaneTrai_Process+0x50>
			|| LineDetect == 0b00111000))
		Sensor_Convert_A2D();
 80040c4:	f7ff fac8 	bl	8003658 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <Car_ChuyenLaneTrai_Process+0xa0>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b18      	cmp	r3, #24
 80040ce:	d007      	beq.n	80040e0 <Car_ChuyenLaneTrai_Process+0x68>
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <Car_ChuyenLaneTrai_Process+0xa0>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b1c      	cmp	r3, #28
 80040d6:	d003      	beq.n	80040e0 <Car_ChuyenLaneTrai_Process+0x68>
			|| LineDetect == 0b00111000))
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <Car_ChuyenLaneTrai_Process+0xa0>)
 80040da:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 80040dc:	2b38      	cmp	r3, #56	; 0x38
 80040de:	d1f1      	bne.n	80040c4 <Car_ChuyenLaneTrai_Process+0x4c>
	MatLineFlag = 0;
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <Car_ChuyenLaneTrai_Process+0xa4>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
	FullWhiteFlag = 0;
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <Car_ChuyenLaneTrai_Process+0xa8>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag = 0;
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <Car_ChuyenLaneTrai_Process+0xac>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag_Raw = 0;
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <Car_ChuyenLaneTrai_Process+0xb0>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
}
 80040f8:	bf00      	nop
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	f3af 8000 	nop.w
 8004100:	33333333 	.word	0x33333333
 8004104:	3ffb3333 	.word	0x3ffb3333
 8004108:	20000207 	.word	0x20000207
 800410c:	20000010 	.word	0x20000010
 8004110:	c1f00000 	.word	0xc1f00000
 8004114:	20000206 	.word	0x20000206
 8004118:	20000205 	.word	0x20000205
 800411c:	2000020c 	.word	0x2000020c
 8004120:	2000020b 	.word	0x2000020b
 8004124:	20000208 	.word	0x20000208
 8004128:	20000209 	.word	0x20000209
 800412c:	00000000 	.word	0x00000000

08004130 <Car_CuaPhai_Process>:
void Car_CuaPhai_Process() {
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
	Servo_SetAngle(85);
 8004134:	4824      	ldr	r0, [pc, #144]	; (80041c8 <Car_CuaPhai_Process+0x98>)
 8004136:	f7fd f869 	bl	800120c <Servo_SetAngle>
	MotorR_SetPWM(MaxSpeed * 1.0);
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <Car_CuaPhai_Process+0x9c>)
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc f960 	bl	8000404 <__aeabi_i2d>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	f7fc fc74 	bl	8000a38 <__aeabi_d2iz>
 8004150:	4603      	mov	r3, r0
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd f822 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.6);
 8004158:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <Car_CuaPhai_Process+0x9c>)
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc f951 	bl	8000404 <__aeabi_i2d>
 8004162:	a317      	add	r3, pc, #92	; (adr r3, 80041c0 <Car_CuaPhai_Process+0x90>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f7fc f9b6 	bl	80004d8 <__aeabi_dmul>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	f7fc fc60 	bl	8000a38 <__aeabi_d2iz>
 8004178:	4603      	mov	r3, r0
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc ffd6 	bl	800112c <MotorL_SetPWM>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004180:	e001      	b.n	8004186 <Car_CuaPhai_Process+0x56>
			|| LineDetect == 0b00111000)) {
		Sensor_Convert_A2D();
 8004182:	f7ff fa69 	bl	8003658 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <Car_CuaPhai_Process+0xa0>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b18      	cmp	r3, #24
 800418c:	d007      	beq.n	800419e <Car_CuaPhai_Process+0x6e>
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <Car_CuaPhai_Process+0xa0>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b1c      	cmp	r3, #28
 8004194:	d003      	beq.n	800419e <Car_CuaPhai_Process+0x6e>
			|| LineDetect == 0b00111000)) {
 8004196:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <Car_CuaPhai_Process+0xa0>)
 8004198:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 800419a:	2b38      	cmp	r3, #56	; 0x38
 800419c:	d1f1      	bne.n	8004182 <Car_CuaPhai_Process+0x52>
	}
	MatLineFlag = 0;
 800419e:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <Car_CuaPhai_Process+0xa4>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
	FullWhiteFlag = 0;
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <Car_CuaPhai_Process+0xa8>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag = 0;
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <Car_CuaPhai_Process+0xac>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag_Raw = 0;
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <Car_CuaPhai_Process+0xb0>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	f3af 8000 	nop.w
 80041c0:	9999999a 	.word	0x9999999a
 80041c4:	3ff99999 	.word	0x3ff99999
 80041c8:	42aa0000 	.word	0x42aa0000
 80041cc:	20000010 	.word	0x20000010
 80041d0:	20000205 	.word	0x20000205
 80041d4:	2000020c 	.word	0x2000020c
 80041d8:	2000020b 	.word	0x2000020b
 80041dc:	20000208 	.word	0x20000208
 80041e0:	20000209 	.word	0x20000209
 80041e4:	00000000 	.word	0x00000000

080041e8 <Car_CuaTrai_Process>:
void Car_CuaTrai_Process() {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
	Servo_SetAngle(-75);
 80041ec:	4828      	ldr	r0, [pc, #160]	; (8004290 <Car_CuaTrai_Process+0xa8>)
 80041ee:	f7fd f80d 	bl	800120c <Servo_SetAngle>
	MotorL_SetPWM(MaxSpeed * 1.4);
 80041f2:	4b28      	ldr	r3, [pc, #160]	; (8004294 <Car_CuaTrai_Process+0xac>)
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc f904 	bl	8000404 <__aeabi_i2d>
 80041fc:	a320      	add	r3, pc, #128	; (adr r3, 8004280 <Car_CuaTrai_Process+0x98>)
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f7fc f969 	bl	80004d8 <__aeabi_dmul>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4610      	mov	r0, r2
 800420c:	4619      	mov	r1, r3
 800420e:	f7fc fc13 	bl	8000a38 <__aeabi_d2iz>
 8004212:	4603      	mov	r3, r0
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc ff89 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.7);
 800421a:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <Car_CuaTrai_Process+0xac>)
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc f8f0 	bl	8000404 <__aeabi_i2d>
 8004224:	a318      	add	r3, pc, #96	; (adr r3, 8004288 <Car_CuaTrai_Process+0xa0>)
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f7fc f955 	bl	80004d8 <__aeabi_dmul>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4610      	mov	r0, r2
 8004234:	4619      	mov	r1, r3
 8004236:	f7fc fbff 	bl	8000a38 <__aeabi_d2iz>
 800423a:	4603      	mov	r3, r0
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc ffad 	bl	800119c <MotorR_SetPWM>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004242:	e001      	b.n	8004248 <Car_CuaTrai_Process+0x60>
			|| LineDetect == 0b00111000)) {
		Sensor_Convert_A2D();
 8004244:	f7ff fa08 	bl	8003658 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <Car_CuaTrai_Process+0xb0>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b18      	cmp	r3, #24
 800424e:	d007      	beq.n	8004260 <Car_CuaTrai_Process+0x78>
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <Car_CuaTrai_Process+0xb0>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b1c      	cmp	r3, #28
 8004256:	d003      	beq.n	8004260 <Car_CuaTrai_Process+0x78>
			|| LineDetect == 0b00111000)) {
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <Car_CuaTrai_Process+0xb0>)
 800425a:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 800425c:	2b38      	cmp	r3, #56	; 0x38
 800425e:	d1f1      	bne.n	8004244 <Car_CuaTrai_Process+0x5c>
	}
	MatLineFlag = 0;
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <Car_CuaTrai_Process+0xb4>)
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
	FullWhiteFlag = 0;
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <Car_CuaTrai_Process+0xb8>)
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag = 0;
 800426c:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <Car_CuaTrai_Process+0xbc>)
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag_Raw = 0;
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <Car_CuaTrai_Process+0xc0>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	f3af 8000 	nop.w
 8004280:	66666666 	.word	0x66666666
 8004284:	3ff66666 	.word	0x3ff66666
 8004288:	33333333 	.word	0x33333333
 800428c:	3ffb3333 	.word	0x3ffb3333
 8004290:	c2960000 	.word	0xc2960000
 8004294:	20000010 	.word	0x20000010
 8004298:	20000205 	.word	0x20000205
 800429c:	2000020c 	.word	0x2000020c
 80042a0:	2000020b 	.word	0x2000020b
 80042a4:	20000208 	.word	0x20000208
 80042a8:	20000209 	.word	0x20000209
 80042ac:	00000000 	.word	0x00000000

080042b0 <Car_Avoid_Process>:
void Car_Avoid_Process()
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
	Servo_SetAngle(65);
 80042b4:	485e      	ldr	r0, [pc, #376]	; (8004430 <Car_Avoid_Process+0x180>)
 80042b6:	f7fc ffa9 	bl	800120c <Servo_SetAngle>
	MotorL_SetPWM(MaxSpeed * 1.5);
 80042ba:	4b5e      	ldr	r3, [pc, #376]	; (8004434 <Car_Avoid_Process+0x184>)
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc f8a0 	bl	8000404 <__aeabi_i2d>
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	4b5b      	ldr	r3, [pc, #364]	; (8004438 <Car_Avoid_Process+0x188>)
 80042ca:	f7fc f905 	bl	80004d8 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	f7fc fbaf 	bl	8000a38 <__aeabi_d2iz>
 80042da:	4603      	mov	r3, r0
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fc ff25 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.9);
 80042e2:	4b54      	ldr	r3, [pc, #336]	; (8004434 <Car_Avoid_Process+0x184>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc f88c 	bl	8000404 <__aeabi_i2d>
 80042ec:	a34c      	add	r3, pc, #304	; (adr r3, 8004420 <Car_Avoid_Process+0x170>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f7fc f8f1 	bl	80004d8 <__aeabi_dmul>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7fc fb9b 	bl	8000a38 <__aeabi_d2iz>
 8004302:	4603      	mov	r3, r0
 8004304:	4618      	mov	r0, r3
 8004306:	f7fc ff49 	bl	800119c <MotorR_SetPWM>
	while(!(LineDetect == 0b00000001 || LineDetect == 0b00000011) )
 800430a:	e001      	b.n	8004310 <Car_Avoid_Process+0x60>
		Sensor_Convert_A2D();
 800430c:	f7ff f9a4 	bl	8003658 <Sensor_Convert_A2D>
	while(!(LineDetect == 0b00000001 || LineDetect == 0b00000011) )
 8004310:	4b4a      	ldr	r3, [pc, #296]	; (800443c <Car_Avoid_Process+0x18c>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d003      	beq.n	8004320 <Car_Avoid_Process+0x70>
 8004318:	4b48      	ldr	r3, [pc, #288]	; (800443c <Car_Avoid_Process+0x18c>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d1f5      	bne.n	800430c <Car_Avoid_Process+0x5c>
	Servo_SetAngle(-45);
 8004320:	4847      	ldr	r0, [pc, #284]	; (8004440 <Car_Avoid_Process+0x190>)
 8004322:	f7fc ff73 	bl	800120c <Servo_SetAngle>
	MotorR_SetPWM(MaxSpeed * 1.2);
 8004326:	4b43      	ldr	r3, [pc, #268]	; (8004434 <Car_Avoid_Process+0x184>)
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f86a 	bl	8000404 <__aeabi_i2d>
 8004330:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004334:	4b43      	ldr	r3, [pc, #268]	; (8004444 <Car_Avoid_Process+0x194>)
 8004336:	f7fc f8cf 	bl	80004d8 <__aeabi_dmul>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f7fc fb79 	bl	8000a38 <__aeabi_d2iz>
 8004346:	4603      	mov	r3, r0
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc ff27 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.5);
 800434e:	4b39      	ldr	r3, [pc, #228]	; (8004434 <Car_Avoid_Process+0x184>)
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f7fc f856 	bl	8000404 <__aeabi_i2d>
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	4b36      	ldr	r3, [pc, #216]	; (8004438 <Car_Avoid_Process+0x188>)
 800435e:	f7fc f8bb 	bl	80004d8 <__aeabi_dmul>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	f7fc fb65 	bl	8000a38 <__aeabi_d2iz>
 800436e:	4603      	mov	r3, r0
 8004370:	4618      	mov	r0, r3
 8004372:	f7fc fedb 	bl	800112c <MotorL_SetPWM>
	while(!(LineDetect == 0b10000000 || LineDetect == 0b11000000))
 8004376:	e001      	b.n	800437c <Car_Avoid_Process+0xcc>
		Sensor_Convert_A2D();
 8004378:	f7ff f96e 	bl	8003658 <Sensor_Convert_A2D>
	while(!(LineDetect == 0b10000000 || LineDetect == 0b11000000))
 800437c:	4b2f      	ldr	r3, [pc, #188]	; (800443c <Car_Avoid_Process+0x18c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b80      	cmp	r3, #128	; 0x80
 8004382:	d003      	beq.n	800438c <Car_Avoid_Process+0xdc>
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <Car_Avoid_Process+0x18c>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2bc0      	cmp	r3, #192	; 0xc0
 800438a:	d1f5      	bne.n	8004378 <Car_Avoid_Process+0xc8>
	Servo_SetAngle(15);
 800438c:	482e      	ldr	r0, [pc, #184]	; (8004448 <Car_Avoid_Process+0x198>)
 800438e:	f7fc ff3d 	bl	800120c <Servo_SetAngle>
	MotorR_SetPWM(MaxSpeed * 1.2);
 8004392:	4b28      	ldr	r3, [pc, #160]	; (8004434 <Car_Avoid_Process+0x184>)
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc f834 	bl	8000404 <__aeabi_i2d>
 800439c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <Car_Avoid_Process+0x194>)
 80043a2:	f7fc f899 	bl	80004d8 <__aeabi_dmul>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4610      	mov	r0, r2
 80043ac:	4619      	mov	r1, r3
 80043ae:	f7fc fb43 	bl	8000a38 <__aeabi_d2iz>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fef1 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.7);
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <Car_Avoid_Process+0x184>)
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc f820 	bl	8000404 <__aeabi_i2d>
 80043c4:	a318      	add	r3, pc, #96	; (adr r3, 8004428 <Car_Avoid_Process+0x178>)
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f7fc f885 	bl	80004d8 <__aeabi_dmul>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	f7fc fb2f 	bl	8000a38 <__aeabi_d2iz>
 80043da:	4603      	mov	r3, r0
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fc fea5 	bl	800112c <MotorL_SetPWM>
	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 80043e2:	e001      	b.n	80043e8 <Car_Avoid_Process+0x138>
		Sensor_Convert_A2D();
 80043e4:	f7ff f938 	bl	8003658 <Sensor_Convert_A2D>
	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <Car_Avoid_Process+0x18c>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b18      	cmp	r3, #24
 80043ee:	d007      	beq.n	8004400 <Car_Avoid_Process+0x150>
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <Car_Avoid_Process+0x18c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b1c      	cmp	r3, #28
 80043f6:	d003      	beq.n	8004400 <Car_Avoid_Process+0x150>
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <Car_Avoid_Process+0x18c>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b38      	cmp	r3, #56	; 0x38
 80043fe:	d1f1      	bne.n	80043e4 <Car_Avoid_Process+0x134>
	MatLineFlag = 0;
 8004400:	4b12      	ldr	r3, [pc, #72]	; (800444c <Car_Avoid_Process+0x19c>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
	FullWhiteFlag = 0;
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <Car_Avoid_Process+0x1a0>)
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag = 0;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <Car_Avoid_Process+0x1a4>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
	HalfWhiteFlag_Raw = 0;
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <Car_Avoid_Process+0x1a8>)
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	f3af 8000 	nop.w
 8004420:	66666666 	.word	0x66666666
 8004424:	3ffe6666 	.word	0x3ffe6666
 8004428:	33333333 	.word	0x33333333
 800442c:	3ffb3333 	.word	0x3ffb3333
 8004430:	42820000 	.word	0x42820000
 8004434:	20000010 	.word	0x20000010
 8004438:	3ff80000 	.word	0x3ff80000
 800443c:	20000205 	.word	0x20000205
 8004440:	c2340000 	.word	0xc2340000
 8004444:	3ff33333 	.word	0x3ff33333
 8004448:	41700000 	.word	0x41700000
 800444c:	2000020c 	.word	0x2000020c
 8004450:	2000020b 	.word	0x2000020b
 8004454:	20000208 	.word	0x20000208
 8004458:	20000209 	.word	0x20000209

0800445c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40010400 	.word	0x40010400

08004488 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004490:	4a03      	ldr	r2, [pc, #12]	; (80044a0 <LL_EXTI_ClearFlag_0_31+0x18>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6153      	str	r3, [r2, #20]
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr
 80044a0:	40010400 	.word	0x40010400

080044a4 <LL_TIM_ClearFlag_UPDATE>:
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f06f 0201 	mvn.w	r2, #1
 80044b2:	611a      	str	r2, [r3, #16]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <LL_TIM_IsActiveFlag_UPDATE>:
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <LL_TIM_ClearFlag_CC1>:
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f06f 0202 	mvn.w	r2, #2
 80044f0:	611a      	str	r2, [r3, #16]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <LL_TIM_IsActiveFlag_CC1>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b02      	cmp	r3, #2
 800450e:	d101      	bne.n	8004514 <LL_TIM_IsActiveFlag_CC1+0x18>
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr

08004520 <LL_GPIO_SetOutputPin>:
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	611a      	str	r2, [r3, #16]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <LL_GPIO_ResetOutputPin>:
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	b29a      	uxth	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	615a      	str	r2, [r3, #20]
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr

08004568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800456c:	e7fe      	b.n	800456c <HardFault_Handler+0x4>

0800456e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004572:	e7fe      	b.n	8004572 <MemManage_Handler+0x4>

08004574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004578:	e7fe      	b.n	8004578 <BusFault_Handler+0x4>

0800457a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800457e:	e7fe      	b.n	800457e <UsageFault_Handler+0x4>

08004580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr

08004598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <SysTick_Handler+0x18>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3301      	adds	r3, #1
 80045ae:	4a03      	ldr	r2, [pc, #12]	; (80045bc <SysTick_Handler+0x18>)
 80045b0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20000210 	.word	0x20000210

080045c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 80045d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80045d4:	f7ff ff66 	bl	80044a4 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045d8:	bf00      	nop
 80045da:	bd80      	pop	{r7, pc}

080045dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 80045e0:	4802      	ldr	r0, [pc, #8]	; (80045ec <TIM3_IRQHandler+0x10>)
 80045e2:	f7ff ff5f 	bl	80044a4 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40000400 	.word	0x40000400

080045f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 80045f4:	4814      	ldr	r0, [pc, #80]	; (8004648 <TIM4_IRQHandler+0x58>)
 80045f6:	f7ff ff81 	bl	80044fc <LL_TIM_IsActiveFlag_CC1>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <TIM4_IRQHandler+0x1e>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 8004600:	4811      	ldr	r0, [pc, #68]	; (8004648 <TIM4_IRQHandler+0x58>)
 8004602:	f7ff ff6e 	bl	80044e2 <LL_TIM_ClearFlag_CC1>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8004606:	4911      	ldr	r1, [pc, #68]	; (800464c <TIM4_IRQHandler+0x5c>)
 8004608:	4811      	ldr	r0, [pc, #68]	; (8004650 <TIM4_IRQHandler+0x60>)
 800460a:	f7ff ff98 	bl	800453e <LL_GPIO_ResetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 800460e:	480e      	ldr	r0, [pc, #56]	; (8004648 <TIM4_IRQHandler+0x58>)
 8004610:	f7ff ff55 	bl	80044be <LL_TIM_IsActiveFlag_UPDATE>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d013      	beq.n	8004642 <TIM4_IRQHandler+0x52>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 800461a:	480b      	ldr	r0, [pc, #44]	; (8004648 <TIM4_IRQHandler+0x58>)
 800461c:	f7ff ff42 	bl	80044a4 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8004620:	490a      	ldr	r1, [pc, #40]	; (800464c <TIM4_IRQHandler+0x5c>)
 8004622:	480b      	ldr	r0, [pc, #44]	; (8004650 <TIM4_IRQHandler+0x60>)
 8004624:	f7ff ff7c 	bl	8004520 <LL_GPIO_SetOutputPin>
		CountTime++;
 8004628:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <TIM4_IRQHandler+0x64>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	b2da      	uxtb	r2, r3
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <TIM4_IRQHandler+0x64>)
 8004632:	701a      	strb	r2, [r3, #0]
		if(CountTime > 3) CountTime = 0;
 8004634:	4b07      	ldr	r3, [pc, #28]	; (8004654 <TIM4_IRQHandler+0x64>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d902      	bls.n	8004642 <TIM4_IRQHandler+0x52>
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <TIM4_IRQHandler+0x64>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
//	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40000800 	.word	0x40000800
 800464c:	04080008 	.word	0x04080008
 8004650:	40010800 	.word	0x40010800
 8004654:	20000216 	.word	0x20000216

08004658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 800465c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004660:	f7ff fefc 	bl	800445c <LL_EXTI_IsActiveFlag_0_31>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 800466a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800466e:	f7ff ff0b 	bl	8004488 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <EXTI15_10_IRQHandler+0x6c>)
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8004678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800467c:	f7ff feee 	bl	800445c <LL_EXTI_IsActiveFlag_0_31>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d006      	beq.n	8004694 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8004686:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800468a:	f7ff fefd 	bl	8004488 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BTN2_Flag = 1;
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <EXTI15_10_IRQHandler+0x70>)
 8004690:	2201      	movs	r2, #1
 8004692:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004694:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004698:	f7ff fee0 	bl	800445c <LL_EXTI_IsActiveFlag_0_31>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <EXTI15_10_IRQHandler+0x66>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80046a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80046a6:	f7ff feef 	bl	8004488 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    BTN3_Flag = BTN3_Flag? 0 : 1 ;
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <EXTI15_10_IRQHandler+0x74>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b04      	ldr	r3, [pc, #16]	; (80046cc <EXTI15_10_IRQHandler+0x74>)
 80046bc:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000204 	.word	0x20000204
 80046c8:	20000214 	.word	0x20000214
 80046cc:	20000215 	.word	0x20000215

080046d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
	return 1;
 80046d4:	2301      	movs	r3, #1
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <_kill>:

int _kill(int pid, int sig)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046e8:	f001 fa3c 	bl	8005b64 <__errno>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2216      	movs	r2, #22
 80046f0:	601a      	str	r2, [r3, #0]
	return -1;
 80046f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <_exit>:

void _exit (int status)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004706:	f04f 31ff 	mov.w	r1, #4294967295
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff ffe7 	bl	80046de <_kill>
	while (1) {}		/* Make sure we hang here */
 8004710:	e7fe      	b.n	8004710 <_exit+0x12>

08004712 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e00a      	b.n	800473a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004724:	f3af 8000 	nop.w
 8004728:	4601      	mov	r1, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	60ba      	str	r2, [r7, #8]
 8004730:	b2ca      	uxtb	r2, r1
 8004732:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3301      	adds	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	dbf0      	blt.n	8004724 <_read+0x12>
	}

return len;
 8004742:	687b      	ldr	r3, [r7, #4]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e009      	b.n	8004772 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	60ba      	str	r2, [r7, #8]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fdb6 	bl	80022d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	3301      	adds	r3, #1
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	dbf1      	blt.n	800475e <_write+0x12>
	}
	return len;
 800477a:	687b      	ldr	r3, [r7, #4]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <_close>:

int _close(int file)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	return -1;
 800478c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr

0800479a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047aa:	605a      	str	r2, [r3, #4]
	return 0;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <_isatty>:

int _isatty(int file)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	return 1;
 80047c0:	2301      	movs	r3, #1
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
	return 0;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <_sbrk+0x5c>)
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <_sbrk+0x60>)
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047f8:	4b13      	ldr	r3, [pc, #76]	; (8004848 <_sbrk+0x64>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004800:	4b11      	ldr	r3, [pc, #68]	; (8004848 <_sbrk+0x64>)
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <_sbrk+0x68>)
 8004804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <_sbrk+0x64>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	429a      	cmp	r2, r3
 8004812:	d207      	bcs.n	8004824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004814:	f001 f9a6 	bl	8005b64 <__errno>
 8004818:	4603      	mov	r3, r0
 800481a:	220c      	movs	r2, #12
 800481c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	e009      	b.n	8004838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <_sbrk+0x64>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <_sbrk+0x64>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	4a05      	ldr	r2, [pc, #20]	; (8004848 <_sbrk+0x64>)
 8004834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004836:	68fb      	ldr	r3, [r7, #12]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20005000 	.word	0x20005000
 8004844:	00000400 	.word	0x00000400
 8004848:	20000218 	.word	0x20000218
 800484c:	20000248 	.word	0x20000248

08004850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004854:	4b15      	ldr	r3, [pc, #84]	; (80048ac <SystemInit+0x5c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a14      	ldr	r2, [pc, #80]	; (80048ac <SystemInit+0x5c>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <SystemInit+0x5c>)
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4911      	ldr	r1, [pc, #68]	; (80048ac <SystemInit+0x5c>)
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <SystemInit+0x60>)
 8004868:	4013      	ands	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <SystemInit+0x5c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0e      	ldr	r2, [pc, #56]	; (80048ac <SystemInit+0x5c>)
 8004872:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <SystemInit+0x5c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <SystemInit+0x5c>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004886:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <SystemInit+0x5c>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4a07      	ldr	r2, [pc, #28]	; (80048ac <SystemInit+0x5c>)
 800488e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004892:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <SystemInit+0x5c>)
 8004896:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800489a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <SystemInit+0x64>)
 800489e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr
 80048ac:	40021000 	.word	0x40021000
 80048b0:	f8ff0000 	.word	0xf8ff0000
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80048b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80048ba:	e003      	b.n	80048c4 <LoopCopyDataInit>

080048bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80048be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80048c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80048c2:	3104      	adds	r1, #4

080048c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80048c4:	480a      	ldr	r0, [pc, #40]	; (80048f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80048c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80048ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80048cc:	d3f6      	bcc.n	80048bc <CopyDataInit>
  ldr r2, =_sbss
 80048ce:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80048d0:	e002      	b.n	80048d8 <LoopFillZerobss>

080048d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80048d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80048d4:	f842 3b04 	str.w	r3, [r2], #4

080048d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80048da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80048dc:	d3f9      	bcc.n	80048d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048de:	f7ff ffb7 	bl	8004850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048e2:	f001 f945 	bl	8005b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048e6:	f7fd fd0f 	bl	8002308 <main>
  bx lr
 80048ea:	4770      	bx	lr
  ldr r3, =_sidata
 80048ec:	08008d2c 	.word	0x08008d2c
  ldr r0, =_sdata
 80048f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80048f4:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80048f8:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80048fc:	20000244 	.word	0x20000244

08004900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004900:	e7fe      	b.n	8004900 <ADC1_2_IRQHandler>

08004902 <LL_ADC_REG_SetSequencerLength>:
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <LL_ADC_IsEnabled>:
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	bf0c      	ite	eq
 800493a:	2301      	moveq	r3, #1
 800493c:	2300      	movne	r3, #0
 800493e:	b2db      	uxtb	r3, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr
	...

0800494c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800495a:	4813      	ldr	r0, [pc, #76]	; (80049a8 <LL_ADC_CommonInit+0x5c>)
 800495c:	f7ff ffe3 	bl	8004926 <LL_ADC_IsEnabled>
 8004960:	4604      	mov	r4, r0
 8004962:	4812      	ldr	r0, [pc, #72]	; (80049ac <LL_ADC_CommonInit+0x60>)
 8004964:	f7ff ffdf 	bl	8004926 <LL_ADC_IsEnabled>
 8004968:	4603      	mov	r3, r0
 800496a:	4323      	orrs	r3, r4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d114      	bne.n	800499a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	e008      	b.n	800499e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	e001      	b.n	800499e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd90      	pop	{r4, r7, pc}
 80049a8:	40012400 	.word	0x40012400
 80049ac:	40012800 	.word	0x40012800

080049b0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ffb1 	bl	8004926 <LL_ADC_IsEnabled>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d112      	bne.n	80049f0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	609a      	str	r2, [r3, #8]
 80049ee:	e001      	b.n	80049f4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff8a 	bl	8004926 <LL_ADC_IsEnabled>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d131      	bne.n	8004a7c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00c      	beq.n	8004a3a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	e008      	b.n	8004a4c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8004a54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	6811      	ldr	r1, [r2, #0]
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	68d2      	ldr	r2, [r2, #12]
 8004a60:	4311      	orrs	r1, r2
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	6912      	ldr	r2, [r2, #16]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff ff44 	bl	8004902 <LL_ADC_REG_SetSequencerLength>
 8004a7a:	e001      	b.n	8004a80 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <LL_EXTI_EnableIT_0_31>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <LL_EXTI_EnableIT_0_31+0x20>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4904      	ldr	r1, [pc, #16]	; (8004aac <LL_EXTI_EnableIT_0_31+0x20>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	600b      	str	r3, [r1, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010400 	.word	0x40010400

08004ab0 <LL_EXTI_DisableIT_0_31>:
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <LL_EXTI_DisableIT_0_31+0x20>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	4903      	ldr	r1, [pc, #12]	; (8004ad0 <LL_EXTI_DisableIT_0_31+0x20>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr
 8004ad0:	40010400 	.word	0x40010400

08004ad4 <LL_EXTI_EnableEvent_0_31>:
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4904      	ldr	r1, [pc, #16]	; (8004af4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	604b      	str	r3, [r1, #4]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010400 	.word	0x40010400

08004af8 <LL_EXTI_DisableEvent_0_31>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <LL_EXTI_DisableEvent_0_31+0x20>)
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	43db      	mvns	r3, r3
 8004b08:	4903      	ldr	r1, [pc, #12]	; (8004b18 <LL_EXTI_DisableEvent_0_31+0x20>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr
 8004b18:	40010400 	.word	0x40010400

08004b1c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	4904      	ldr	r1, [pc, #16]	; (8004b3c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40010400 	.word	0x40010400

08004b40 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	4903      	ldr	r1, [pc, #12]	; (8004b60 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	40010400 	.word	0x40010400

08004b64 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	4904      	ldr	r1, [pc, #16]	; (8004b84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60cb      	str	r3, [r1, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40010400 	.word	0x40010400

08004b88 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	4903      	ldr	r1, [pc, #12]	; (8004ba8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	60cb      	str	r3, [r1, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	40010400 	.word	0x40010400

08004bac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	791b      	ldrb	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d065      	beq.n	8004c8c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d06c      	beq.n	8004ca2 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	795b      	ldrb	r3, [r3, #5]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d01c      	beq.n	8004c0a <LL_EXTI_Init+0x5e>
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	dc25      	bgt.n	8004c20 <LL_EXTI_Init+0x74>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <LL_EXTI_Init+0x32>
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d00b      	beq.n	8004bf4 <LL_EXTI_Init+0x48>
 8004bdc:	e020      	b.n	8004c20 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff ff88 	bl	8004af8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff4d 	bl	8004a8c <LL_EXTI_EnableIT_0_31>
          break;
 8004bf2:	e018      	b.n	8004c26 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff59 	bl	8004ab0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff ff66 	bl	8004ad4 <LL_EXTI_EnableEvent_0_31>
          break;
 8004c08:	e00d      	b.n	8004c26 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff ff3c 	bl	8004a8c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff5b 	bl	8004ad4 <LL_EXTI_EnableEvent_0_31>
          break;
 8004c1e:	e002      	b.n	8004c26 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
          break;
 8004c24:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	799b      	ldrb	r3, [r3, #6]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d039      	beq.n	8004ca2 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	799b      	ldrb	r3, [r3, #6]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d01c      	beq.n	8004c70 <LL_EXTI_Init+0xc4>
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	dc25      	bgt.n	8004c86 <LL_EXTI_Init+0xda>
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d002      	beq.n	8004c44 <LL_EXTI_Init+0x98>
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d00b      	beq.n	8004c5a <LL_EXTI_Init+0xae>
 8004c42:	e020      	b.n	8004c86 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff9d 	bl	8004b88 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff ff62 	bl	8004b1c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004c58:	e024      	b.n	8004ca4 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff ff6e 	bl	8004b40 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff7b 	bl	8004b64 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004c6e:	e019      	b.n	8004ca4 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff ff51 	bl	8004b1c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff ff70 	bl	8004b64 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004c84:	e00e      	b.n	8004ca4 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
            break;
 8004c8a:	e00b      	b.n	8004ca4 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff ff0d 	bl	8004ab0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff ff2c 	bl	8004af8 <LL_EXTI_DisableEvent_0_31>
 8004ca0:	e000      	b.n	8004ca4 <LL_EXTI_Init+0xf8>
      }
 8004ca2:	bf00      	nop
  }
  return status;
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <LL_GPIO_SetPinMode>:
{
 8004cae:	b490      	push	{r4, r7}
 8004cb0:	b088      	sub	sp, #32
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	0e1b      	lsrs	r3, r3, #24
 8004cc2:	4413      	add	r3, r2
 8004cc4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fa93 f3a3 	rbit	r3, r3
 8004cd2:	613b      	str	r3, [r7, #16]
  return result;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	210f      	movs	r1, #15
 8004ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	fa93 f3a3 	rbit	r3, r3
 8004cf2:	61bb      	str	r3, [r7, #24]
  return result;
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	fab3 f383 	clz	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	fa01 f303 	lsl.w	r3, r1, r3
 8004d04:	4313      	orrs	r3, r2
 8004d06:	6023      	str	r3, [r4, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc90      	pop	{r4, r7}
 8004d10:	4770      	bx	lr

08004d12 <LL_GPIO_SetPinSpeed>:
{
 8004d12:	b490      	push	{r4, r7}
 8004d14:	b088      	sub	sp, #32
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	461a      	mov	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	4413      	add	r3, r2
 8004d28:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	613b      	str	r3, [r7, #16]
  return result;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	fab3 f383 	clz	r3, r3
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	2103      	movs	r1, #3
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	fa93 f3a3 	rbit	r3, r3
 8004d56:	61bb      	str	r3, [r7, #24]
  return result;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	fa01 f303 	lsl.w	r3, r1, r3
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	6023      	str	r3, [r4, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc90      	pop	{r4, r7}
 8004d74:	4770      	bx	lr

08004d76 <LL_GPIO_SetPinOutputType>:
{
 8004d76:	b490      	push	{r4, r7}
 8004d78:	b088      	sub	sp, #32
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	461a      	mov	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0e1b      	lsrs	r3, r3, #24
 8004d8a:	4413      	add	r3, r2
 8004d8c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	fa93 f3a3 	rbit	r3, r3
 8004d9a:	613b      	str	r3, [r7, #16]
  return result;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	2104      	movs	r1, #4
 8004da8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	401a      	ands	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	61bb      	str	r3, [r7, #24]
  return result;
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	6023      	str	r3, [r4, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc90      	pop	{r4, r7}
 8004dd8:	4770      	bx	lr

08004dda <LL_GPIO_SetPinPull>:
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b087      	sub	sp, #28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	0a1b      	lsrs	r3, r3, #8
 8004dee:	43db      	mvns	r3, r3
 8004df0:	401a      	ands	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	0a1b      	lsrs	r3, r3, #8
 8004df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	613b      	str	r3, [r7, #16]
  return result;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	fab3 f383 	clz	r3, r3
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	4619      	mov	r1, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	408b      	lsls	r3, r1
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	60da      	str	r2, [r3, #12]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b088      	sub	sp, #32
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	60fb      	str	r3, [r7, #12]
  return result;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004e40:	fab3 f383 	clz	r3, r3
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8004e48:	e044      	b.n	8004ed4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d03a      	beq.n	8004ece <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b07      	cmp	r3, #7
 8004e5c:	d806      	bhi.n	8004e6c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8004e5e:	f240 1201 	movw	r2, #257	; 0x101
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e008      	b.n	8004e7e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3b08      	subs	r3, #8
 8004e70:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e7c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d106      	bne.n	8004e94 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	69b9      	ldr	r1, [r7, #24]
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffa3 	bl	8004dda <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	69b9      	ldr	r1, [r7, #24]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff ff06 	bl	8004cae <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d003      	beq.n	8004eb2 <LL_GPIO_Init+0x94>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b09      	cmp	r3, #9
 8004eb0:	d10d      	bne.n	8004ece <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	69b9      	ldr	r1, [r7, #24]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff ff29 	bl	8004d12 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	69b9      	ldr	r1, [r7, #24]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff ff54 	bl	8004d76 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1b4      	bne.n	8004e4a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <LL_I2C_Enable>:
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f043 0201 	orr.w	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <LL_I2C_Disable>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f023 0201 	bic.w	r2, r3, #1
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	601a      	str	r2, [r3, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <LL_I2C_SetOwnAddress1>:
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	609a      	str	r2, [r3, #8]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a41      	ldr	r2, [pc, #260]	; (8005074 <LL_I2C_ConfigSpeed+0x120>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	0c9b      	lsrs	r3, r3, #18
 8004f74:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4939      	ldr	r1, [pc, #228]	; (8005078 <LL_I2C_ConfigSpeed+0x124>)
 8004f92:	428b      	cmp	r3, r1
 8004f94:	d802      	bhi.n	8004f9c <LL_I2C_ConfigSpeed+0x48>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	e009      	b.n	8004fb0 <LL_I2C_ConfigSpeed+0x5c>
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004fa2:	fb01 f303 	mul.w	r3, r1, r3
 8004fa6:	4935      	ldr	r1, [pc, #212]	; (800507c <LL_I2C_ConfigSpeed+0x128>)
 8004fa8:	fba1 1303 	umull	r1, r3, r1, r3
 8004fac:	099b      	lsrs	r3, r3, #6
 8004fae:	3301      	adds	r3, #1
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2f      	ldr	r2, [pc, #188]	; (8005078 <LL_I2C_ConfigSpeed+0x124>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d939      	bls.n	8005032 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d117      	bne.n	8004ff4 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fec:	e01d      	b.n	800502a <LL_I2C_ConfigSpeed+0xd6>
 8004fee:	f248 0301 	movw	r3, #32769	; 0x8001
 8004ff2:	e01a      	b.n	800502a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009a      	lsls	r2, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	fbb2 f3f3 	udiv	r3, r2, r3
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009a      	lsls	r2, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005024:	e001      	b.n	800502a <LL_I2C_ConfigSpeed+0xd6>
 8005026:	f248 0301 	movw	r3, #32769	; 0x8001
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e011      	b.n	8005056 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	fbb2 f2f3 	udiv	r2, r2, r3
 800503c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005040:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	e000      	b.n	8005054 <LL_I2C_ConfigSpeed+0x100>
 8005052:	2304      	movs	r3, #4
 8005054:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800505e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	61da      	str	r2, [r3, #28]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	431bde83 	.word	0x431bde83
 8005078:	000186a0 	.word	0x000186a0
 800507c:	10624dd3 	.word	0x10624dd3

08005080 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 021a 	bic.w	r2, r3, #26
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff ff18 	bl	8004f08 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80050d8:	f107 0308 	add.w	r3, r7, #8
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f87b 	bl	80051d8 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80050e2:	6939      	ldr	r1, [r7, #16]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ff31 	bl	8004f54 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68d9      	ldr	r1, [r3, #12]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	461a      	mov	r2, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ff12 	bl	8004f26 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ffb9 	bl	8005080 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff feeb 	bl	8004eea <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ffc2 	bl	80050a4 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <LL_RCC_GetSysClkSource>:
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005130:	4b03      	ldr	r3, [pc, #12]	; (8005140 <LL_RCC_GetSysClkSource+0x14>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 030c 	and.w	r3, r3, #12
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	40021000 	.word	0x40021000

08005144 <LL_RCC_GetAHBPrescaler>:
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <LL_RCC_GetAHBPrescaler+0x14>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr
 8005158:	40021000 	.word	0x40021000

0800515c <LL_RCC_GetAPB1Prescaler>:
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr
 8005170:	40021000 	.word	0x40021000

08005174 <LL_RCC_GetAPB2Prescaler>:
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <LL_RCC_GetAPB2Prescaler+0x14>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr
 8005188:	40021000 	.word	0x40021000

0800518c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <LL_RCC_PLL_GetMainSource+0x14>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr
 80051a0:	40021000 	.word	0x40021000

080051a4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr
 80051b8:	40021000 	.word	0x40021000

080051bc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <LL_RCC_PLL_GetPrediv+0x18>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	0c5b      	lsrs	r3, r3, #17
 80051c6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000

080051d8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80051e0:	f000 f820 	bl	8005224 <RCC_GetSystemClockFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f83e 	bl	8005270 <RCC_GetHCLKClockFreq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f84c 	bl	800529c <RCC_GetPCLK1ClockFreq>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f858 	bl	80052c4 <RCC_GetPCLK2ClockFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60da      	str	r2, [r3, #12]
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800522e:	f7ff ff7d 	bl	800512c <LL_RCC_GetSysClkSource>
 8005232:	4603      	mov	r3, r0
 8005234:	2b08      	cmp	r3, #8
 8005236:	d00c      	beq.n	8005252 <RCC_GetSystemClockFreq+0x2e>
 8005238:	2b08      	cmp	r3, #8
 800523a:	d80e      	bhi.n	800525a <RCC_GetSystemClockFreq+0x36>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <RCC_GetSystemClockFreq+0x22>
 8005240:	2b04      	cmp	r3, #4
 8005242:	d003      	beq.n	800524c <RCC_GetSystemClockFreq+0x28>
 8005244:	e009      	b.n	800525a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <RCC_GetSystemClockFreq+0x48>)
 8005248:	607b      	str	r3, [r7, #4]
      break;
 800524a:	e009      	b.n	8005260 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800524c:	4b07      	ldr	r3, [pc, #28]	; (800526c <RCC_GetSystemClockFreq+0x48>)
 800524e:	607b      	str	r3, [r7, #4]
      break;
 8005250:	e006      	b.n	8005260 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005252:	f000 f84b 	bl	80052ec <RCC_PLL_GetFreqDomain_SYS>
 8005256:	6078      	str	r0, [r7, #4]
      break;
 8005258:	e002      	b.n	8005260 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800525a:	4b04      	ldr	r3, [pc, #16]	; (800526c <RCC_GetSystemClockFreq+0x48>)
 800525c:	607b      	str	r3, [r7, #4]
      break;
 800525e:	bf00      	nop
  }

  return frequency;
 8005260:	687b      	ldr	r3, [r7, #4]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	007a1200 	.word	0x007a1200

08005270 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005278:	f7ff ff64 	bl	8005144 <LL_RCC_GetAHBPrescaler>
 800527c:	4603      	mov	r3, r0
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	4a04      	ldr	r2, [pc, #16]	; (8005298 <RCC_GetHCLKClockFreq+0x28>)
 8005286:	5cd3      	ldrb	r3, [r2, r3]
 8005288:	461a      	mov	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	40d3      	lsrs	r3, r2
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	08008928 	.word	0x08008928

0800529c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80052a4:	f7ff ff5a 	bl	800515c <LL_RCC_GetAPB1Prescaler>
 80052a8:	4603      	mov	r3, r0
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <RCC_GetPCLK1ClockFreq+0x24>)
 80052ae:	5cd3      	ldrb	r3, [r2, r3]
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	40d3      	lsrs	r3, r2
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	08008938 	.word	0x08008938

080052c4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80052cc:	f7ff ff52 	bl	8005174 <LL_RCC_GetAPB2Prescaler>
 80052d0:	4603      	mov	r3, r0
 80052d2:	0adb      	lsrs	r3, r3, #11
 80052d4:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <RCC_GetPCLK2ClockFreq+0x24>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	461a      	mov	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	40d3      	lsrs	r3, r2
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	08008938 	.word	0x08008938

080052ec <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	2300      	movs	r3, #0
 80052f8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80052fa:	f7ff ff47 	bl	800518c <LL_RCC_PLL_GetMainSource>
 80052fe:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530c:	d003      	beq.n	8005316 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800530e:	e00b      	b.n	8005328 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8005312:	607b      	str	r3, [r7, #4]
      break;
 8005314:	e00b      	b.n	800532e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8005316:	f7ff ff51 	bl	80051bc <LL_RCC_PLL_GetPrediv>
 800531a:	4603      	mov	r3, r0
 800531c:	3301      	adds	r3, #1
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	607b      	str	r3, [r7, #4]
      break;
 8005326:	e002      	b.n	800532e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8005328:	4b07      	ldr	r3, [pc, #28]	; (8005348 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800532a:	607b      	str	r3, [r7, #4]
      break;
 800532c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800532e:	f7ff ff39 	bl	80051a4 <LL_RCC_PLL_GetMultiplicator>
 8005332:	4603      	mov	r3, r0
 8005334:	0c9b      	lsrs	r3, r3, #18
 8005336:	3302      	adds	r3, #2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	fb02 f303 	mul.w	r3, r2, r3
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	003d0900 	.word	0x003d0900
 800534c:	007a1200 	.word	0x007a1200

08005350 <LL_TIM_SetPrescaler>:
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr

0800536a <LL_TIM_SetAutoReload>:
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <LL_TIM_SetRepetitionCounter>:
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <LL_TIM_OC_SetCompareCH1>:
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	635a      	str	r2, [r3, #52]	; 0x34
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <LL_TIM_OC_SetCompareCH2>:
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <LL_TIM_OC_SetCompareCH3>:
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <LL_TIM_OC_SetCompareCH4>:
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	615a      	str	r2, [r3, #20]
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a27      	ldr	r2, [pc, #156]	; (80054d4 <LL_TIM_Init+0xb0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <LL_TIM_Init+0x30>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005442:	d007      	beq.n	8005454 <LL_TIM_Init+0x30>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a24      	ldr	r2, [pc, #144]	; (80054d8 <LL_TIM_Init+0xb4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <LL_TIM_Init+0x30>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a23      	ldr	r2, [pc, #140]	; (80054dc <LL_TIM_Init+0xb8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d106      	bne.n	8005462 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a1b      	ldr	r2, [pc, #108]	; (80054d4 <LL_TIM_Init+0xb0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00b      	beq.n	8005482 <LL_TIM_Init+0x5e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d007      	beq.n	8005482 <LL_TIM_Init+0x5e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <LL_TIM_Init+0xb4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <LL_TIM_Init+0x5e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a17      	ldr	r2, [pc, #92]	; (80054dc <LL_TIM_Init+0xb8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d106      	bne.n	8005490 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ff64 	bl	800536a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff51 	bl	8005350 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <LL_TIM_Init+0xb0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d105      	bne.n	80054c2 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff61 	bl	8005384 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff9f 	bl	8005406 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00
 80054d8:	40000400 	.word	0x40000400
 80054dc:	40000800 	.word	0x40000800

080054e0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	d027      	beq.n	8005548 <LL_TIM_OC_Init+0x68>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d82a      	bhi.n	8005556 <LL_TIM_OC_Init+0x76>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005506:	d018      	beq.n	800553a <LL_TIM_OC_Init+0x5a>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800550e:	d822      	bhi.n	8005556 <LL_TIM_OC_Init+0x76>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d003      	beq.n	800551e <LL_TIM_OC_Init+0x3e>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b10      	cmp	r3, #16
 800551a:	d007      	beq.n	800552c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800551c:	e01b      	b.n	8005556 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f867 	bl	80055f4 <OC1Config>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]
      break;
 800552a:	e015      	b.n	8005558 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f8c6 	bl	80056c0 <OC2Config>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]
      break;
 8005538:	e00e      	b.n	8005558 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f929 	bl	8005794 <OC3Config>
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]
      break;
 8005546:	e007      	b.n	8005558 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f98c 	bl	8005868 <OC4Config>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]
      break;
 8005554:	e000      	b.n	8005558 <LL_TIM_OC_Init+0x78>
      break;
 8005556:	bf00      	nop
  }

  return result;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	7b12      	ldrb	r2, [r2, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	89d2      	ldrh	r2, [r2, #14]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr
	...

080055f4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f023 0201 	bic.w	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f023 0202 	bic.w	r2, r3, #2
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <OC1Config+0xc8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d11e      	bne.n	8005694 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 0208 	bic.w	r2, r3, #8
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0204 	bic.w	r2, r3, #4
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fe79 	bl	800539e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40012c00 	.word	0x40012c00

080056c0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0210 	bic.w	r2, r3, #16
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0220 	bic.w	r2, r3, #32
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0210 	bic.w	r2, r3, #16
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <OC2Config+0xd0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d11f      	bne.n	8005768 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	019b      	lsls	r3, r3, #6
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	019b      	lsls	r3, r3, #6
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff fe1c 	bl	80053b8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40012c00 	.word	0x40012c00

08005794 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1b      	ldr	r2, [pc, #108]	; (8005864 <OC3Config+0xd0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d11f      	bne.n	800583a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	029b      	lsls	r3, r3, #10
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	029b      	lsls	r3, r3, #10
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	015b      	lsls	r3, r3, #5
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fdc0 	bl	80053d2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40012c00 	.word	0x40012c00

08005868 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	031b      	lsls	r3, r3, #12
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	031b      	lsls	r3, r3, #12
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a0f      	ldr	r2, [pc, #60]	; (8005908 <OC4Config+0xa0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d107      	bne.n	80058e0 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	019b      	lsls	r3, r3, #6
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fd7a 	bl	80053ec <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40012c00 	.word	0x40012c00

0800590c <LL_USART_IsEnabled>:
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800591c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <LL_USART_SetStopBitsLength>:
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	611a      	str	r2, [r3, #16]
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <LL_USART_SetHWFlowCtrl>:
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	615a      	str	r2, [r3, #20]
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr
	...

0800597c <LL_USART_SetBaudRate>:
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009a      	lsls	r2, r3, #2
 8005992:	441a      	add	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	4a25      	ldr	r2, [pc, #148]	; (8005a34 <LL_USART_SetBaudRate+0xb8>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	b299      	uxth	r1, r3
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009a      	lsls	r2, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80059be:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <LL_USART_SetBaudRate+0xb8>)
 80059c0:	fba3 0302 	umull	r0, r3, r3, r2
 80059c4:	095b      	lsrs	r3, r3, #5
 80059c6:	2064      	movs	r0, #100	; 0x64
 80059c8:	fb00 f303 	mul.w	r3, r0, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	3332      	adds	r3, #50	; 0x32
 80059d2:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <LL_USART_SetBaudRate+0xb8>)
 80059d4:	fba2 2303 	umull	r2, r3, r2, r3
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	440b      	add	r3, r1
 80059e4:	b299      	uxth	r1, r3
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009a      	lsls	r2, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80059fa:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <LL_USART_SetBaudRate+0xb8>)
 80059fc:	fba3 0302 	umull	r0, r3, r3, r2
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	2064      	movs	r0, #100	; 0x64
 8005a04:	fb00 f303 	mul.w	r3, r0, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	3332      	adds	r3, #50	; 0x32
 8005a0e:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <LL_USART_SetBaudRate+0xb8>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	440b      	add	r3, r1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	609a      	str	r2, [r3, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	51eb851f 	.word	0x51eb851f

08005a38 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ff5e 	bl	800590c <LL_USART_IsEnabled>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d145      	bne.n	8005ae2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a5e:	f023 030c 	bic.w	r3, r3, #12
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	6851      	ldr	r1, [r2, #4]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	68d2      	ldr	r2, [r2, #12]
 8005a6a:	4311      	orrs	r1, r2
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	6912      	ldr	r2, [r2, #16]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff ff57 	bl	8005932 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff ff63 	bl	8005956 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005a90:	f107 0308 	add.w	r3, r7, #8
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fb9f 	bl	80051d8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a13      	ldr	r2, [pc, #76]	; (8005aec <LL_USART_Init+0xb4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d102      	bne.n	8005aa8 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e00c      	b.n	8005ac2 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <LL_USART_Init+0xb8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d102      	bne.n	8005ab6 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	e005      	b.n	8005ac2 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <LL_USART_Init+0xbc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d101      	bne.n	8005ac2 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00c      	beq.n	8005ae2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	69b9      	ldr	r1, [r7, #24]
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff ff4d 	bl	800597c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40013800 	.word	0x40013800
 8005af0:	40004400 	.word	0x40004400
 8005af4:	40004800 	.word	0x40004800

08005af8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	4a07      	ldr	r2, [pc, #28]	; (8005b28 <LL_InitTick+0x30>)
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <LL_InitTick+0x30>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <LL_InitTick+0x30>)
 8005b18:	2205      	movs	r2, #5
 8005b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	e000e010 	.word	0xe000e010

08005b2c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ffdd 	bl	8005af8 <LL_InitTick>
}
 8005b3e:	bf00      	nop
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005b50:	4a03      	ldr	r2, [pc, #12]	; (8005b60 <LL_SetSystemCoreClock+0x18>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6013      	str	r3, [r2, #0]
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr
 8005b60:	20000014 	.word	0x20000014

08005b64 <__errno>:
 8005b64:	4b01      	ldr	r3, [pc, #4]	; (8005b6c <__errno+0x8>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000018 	.word	0x20000018

08005b70 <__libc_init_array>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	2600      	movs	r6, #0
 8005b74:	4d0c      	ldr	r5, [pc, #48]	; (8005ba8 <__libc_init_array+0x38>)
 8005b76:	4c0d      	ldr	r4, [pc, #52]	; (8005bac <__libc_init_array+0x3c>)
 8005b78:	1b64      	subs	r4, r4, r5
 8005b7a:	10a4      	asrs	r4, r4, #2
 8005b7c:	42a6      	cmp	r6, r4
 8005b7e:	d109      	bne.n	8005b94 <__libc_init_array+0x24>
 8005b80:	f002 fe4c 	bl	800881c <_init>
 8005b84:	2600      	movs	r6, #0
 8005b86:	4d0a      	ldr	r5, [pc, #40]	; (8005bb0 <__libc_init_array+0x40>)
 8005b88:	4c0a      	ldr	r4, [pc, #40]	; (8005bb4 <__libc_init_array+0x44>)
 8005b8a:	1b64      	subs	r4, r4, r5
 8005b8c:	10a4      	asrs	r4, r4, #2
 8005b8e:	42a6      	cmp	r6, r4
 8005b90:	d105      	bne.n	8005b9e <__libc_init_array+0x2e>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b98:	4798      	blx	r3
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7ee      	b.n	8005b7c <__libc_init_array+0xc>
 8005b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba2:	4798      	blx	r3
 8005ba4:	3601      	adds	r6, #1
 8005ba6:	e7f2      	b.n	8005b8e <__libc_init_array+0x1e>
 8005ba8:	08008d24 	.word	0x08008d24
 8005bac:	08008d24 	.word	0x08008d24
 8005bb0:	08008d24 	.word	0x08008d24
 8005bb4:	08008d28 	.word	0x08008d28

08005bb8 <memset>:
 8005bb8:	4603      	mov	r3, r0
 8005bba:	4402      	add	r2, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <memset+0xa>
 8005bc0:	4770      	bx	lr
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <memset+0x4>

08005bc8 <__cvt>:
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bce:	461f      	mov	r7, r3
 8005bd0:	bfbb      	ittet	lt
 8005bd2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005bd6:	461f      	movlt	r7, r3
 8005bd8:	2300      	movge	r3, #0
 8005bda:	232d      	movlt	r3, #45	; 0x2d
 8005bdc:	b088      	sub	sp, #32
 8005bde:	4614      	mov	r4, r2
 8005be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005be2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005be4:	7013      	strb	r3, [r2, #0]
 8005be6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005be8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005bec:	f023 0820 	bic.w	r8, r3, #32
 8005bf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bf4:	d005      	beq.n	8005c02 <__cvt+0x3a>
 8005bf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bfa:	d100      	bne.n	8005bfe <__cvt+0x36>
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e000      	b.n	8005c04 <__cvt+0x3c>
 8005c02:	2303      	movs	r3, #3
 8005c04:	aa07      	add	r2, sp, #28
 8005c06:	9204      	str	r2, [sp, #16]
 8005c08:	aa06      	add	r2, sp, #24
 8005c0a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c0e:	e9cd 3500 	strd	r3, r5, [sp]
 8005c12:	4622      	mov	r2, r4
 8005c14:	463b      	mov	r3, r7
 8005c16:	f000 fedb 	bl	80069d0 <_dtoa_r>
 8005c1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c1e:	4606      	mov	r6, r0
 8005c20:	d102      	bne.n	8005c28 <__cvt+0x60>
 8005c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c24:	07db      	lsls	r3, r3, #31
 8005c26:	d522      	bpl.n	8005c6e <__cvt+0xa6>
 8005c28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c2c:	eb06 0905 	add.w	r9, r6, r5
 8005c30:	d110      	bne.n	8005c54 <__cvt+0x8c>
 8005c32:	7833      	ldrb	r3, [r6, #0]
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d10a      	bne.n	8005c4e <__cvt+0x86>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4639      	mov	r1, r7
 8005c40:	f7fa feb2 	bl	80009a8 <__aeabi_dcmpeq>
 8005c44:	b918      	cbnz	r0, 8005c4e <__cvt+0x86>
 8005c46:	f1c5 0501 	rsb	r5, r5, #1
 8005c4a:	f8ca 5000 	str.w	r5, [sl]
 8005c4e:	f8da 3000 	ldr.w	r3, [sl]
 8005c52:	4499      	add	r9, r3
 8005c54:	2200      	movs	r2, #0
 8005c56:	2300      	movs	r3, #0
 8005c58:	4620      	mov	r0, r4
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8005c60:	b108      	cbz	r0, 8005c66 <__cvt+0x9e>
 8005c62:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c66:	2230      	movs	r2, #48	; 0x30
 8005c68:	9b07      	ldr	r3, [sp, #28]
 8005c6a:	454b      	cmp	r3, r9
 8005c6c:	d307      	bcc.n	8005c7e <__cvt+0xb6>
 8005c6e:	4630      	mov	r0, r6
 8005c70:	9b07      	ldr	r3, [sp, #28]
 8005c72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c74:	1b9b      	subs	r3, r3, r6
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	b008      	add	sp, #32
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	9107      	str	r1, [sp, #28]
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e7f0      	b.n	8005c68 <__cvt+0xa0>

08005c86 <__exponent>:
 8005c86:	4603      	mov	r3, r0
 8005c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c8a:	2900      	cmp	r1, #0
 8005c8c:	f803 2b02 	strb.w	r2, [r3], #2
 8005c90:	bfb6      	itet	lt
 8005c92:	222d      	movlt	r2, #45	; 0x2d
 8005c94:	222b      	movge	r2, #43	; 0x2b
 8005c96:	4249      	neglt	r1, r1
 8005c98:	2909      	cmp	r1, #9
 8005c9a:	7042      	strb	r2, [r0, #1]
 8005c9c:	dd2b      	ble.n	8005cf6 <__exponent+0x70>
 8005c9e:	f10d 0407 	add.w	r4, sp, #7
 8005ca2:	46a4      	mov	ip, r4
 8005ca4:	270a      	movs	r7, #10
 8005ca6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005caa:	460a      	mov	r2, r1
 8005cac:	46a6      	mov	lr, r4
 8005cae:	fb07 1516 	mls	r5, r7, r6, r1
 8005cb2:	2a63      	cmp	r2, #99	; 0x63
 8005cb4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005cb8:	4631      	mov	r1, r6
 8005cba:	f104 34ff 	add.w	r4, r4, #4294967295
 8005cbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cc2:	dcf0      	bgt.n	8005ca6 <__exponent+0x20>
 8005cc4:	3130      	adds	r1, #48	; 0x30
 8005cc6:	f1ae 0502 	sub.w	r5, lr, #2
 8005cca:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005cce:	4629      	mov	r1, r5
 8005cd0:	1c44      	adds	r4, r0, #1
 8005cd2:	4561      	cmp	r1, ip
 8005cd4:	d30a      	bcc.n	8005cec <__exponent+0x66>
 8005cd6:	f10d 0209 	add.w	r2, sp, #9
 8005cda:	eba2 020e 	sub.w	r2, r2, lr
 8005cde:	4565      	cmp	r5, ip
 8005ce0:	bf88      	it	hi
 8005ce2:	2200      	movhi	r2, #0
 8005ce4:	4413      	add	r3, r2
 8005ce6:	1a18      	subs	r0, r3, r0
 8005ce8:	b003      	add	sp, #12
 8005cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cf0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cf4:	e7ed      	b.n	8005cd2 <__exponent+0x4c>
 8005cf6:	2330      	movs	r3, #48	; 0x30
 8005cf8:	3130      	adds	r1, #48	; 0x30
 8005cfa:	7083      	strb	r3, [r0, #2]
 8005cfc:	70c1      	strb	r1, [r0, #3]
 8005cfe:	1d03      	adds	r3, r0, #4
 8005d00:	e7f1      	b.n	8005ce6 <__exponent+0x60>
	...

08005d04 <_printf_float>:
 8005d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d08:	b091      	sub	sp, #68	; 0x44
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005d10:	4616      	mov	r6, r2
 8005d12:	461f      	mov	r7, r3
 8005d14:	4605      	mov	r5, r0
 8005d16:	f001 fe01 	bl	800791c <_localeconv_r>
 8005d1a:	6803      	ldr	r3, [r0, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d20:	f7fa fa16 	bl	8000150 <strlen>
 8005d24:	2300      	movs	r3, #0
 8005d26:	930e      	str	r3, [sp, #56]	; 0x38
 8005d28:	f8d8 3000 	ldr.w	r3, [r8]
 8005d2c:	900a      	str	r0, [sp, #40]	; 0x28
 8005d2e:	3307      	adds	r3, #7
 8005d30:	f023 0307 	bic.w	r3, r3, #7
 8005d34:	f103 0208 	add.w	r2, r3, #8
 8005d38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005d3c:	f8d4 b000 	ldr.w	fp, [r4]
 8005d40:	f8c8 2000 	str.w	r2, [r8]
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d4c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005d50:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d56:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	4b9c      	ldr	r3, [pc, #624]	; (8005fd0 <_printf_float+0x2cc>)
 8005d5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d60:	f7fa fe54 	bl	8000a0c <__aeabi_dcmpun>
 8005d64:	bb70      	cbnz	r0, 8005dc4 <_printf_float+0xc0>
 8005d66:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	4b98      	ldr	r3, [pc, #608]	; (8005fd0 <_printf_float+0x2cc>)
 8005d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d70:	f7fa fe2e 	bl	80009d0 <__aeabi_dcmple>
 8005d74:	bb30      	cbnz	r0, 8005dc4 <_printf_float+0xc0>
 8005d76:	2200      	movs	r2, #0
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	f7fa fe1d 	bl	80009bc <__aeabi_dcmplt>
 8005d82:	b110      	cbz	r0, 8005d8a <_printf_float+0x86>
 8005d84:	232d      	movs	r3, #45	; 0x2d
 8005d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8a:	4b92      	ldr	r3, [pc, #584]	; (8005fd4 <_printf_float+0x2d0>)
 8005d8c:	4892      	ldr	r0, [pc, #584]	; (8005fd8 <_printf_float+0x2d4>)
 8005d8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d92:	bf94      	ite	ls
 8005d94:	4698      	movls	r8, r3
 8005d96:	4680      	movhi	r8, r0
 8005d98:	2303      	movs	r3, #3
 8005d9a:	f04f 0a00 	mov.w	sl, #0
 8005d9e:	6123      	str	r3, [r4, #16]
 8005da0:	f02b 0304 	bic.w	r3, fp, #4
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	4633      	mov	r3, r6
 8005da8:	4621      	mov	r1, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	9700      	str	r7, [sp, #0]
 8005dae:	aa0f      	add	r2, sp, #60	; 0x3c
 8005db0:	f000 f9d4 	bl	800615c <_printf_common>
 8005db4:	3001      	adds	r0, #1
 8005db6:	f040 8090 	bne.w	8005eda <_printf_float+0x1d6>
 8005dba:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbe:	b011      	add	sp, #68	; 0x44
 8005dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	4653      	mov	r3, sl
 8005dc8:	4640      	mov	r0, r8
 8005dca:	4651      	mov	r1, sl
 8005dcc:	f7fa fe1e 	bl	8000a0c <__aeabi_dcmpun>
 8005dd0:	b148      	cbz	r0, 8005de6 <_printf_float+0xe2>
 8005dd2:	f1ba 0f00 	cmp.w	sl, #0
 8005dd6:	bfb8      	it	lt
 8005dd8:	232d      	movlt	r3, #45	; 0x2d
 8005dda:	4880      	ldr	r0, [pc, #512]	; (8005fdc <_printf_float+0x2d8>)
 8005ddc:	bfb8      	it	lt
 8005dde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005de2:	4b7f      	ldr	r3, [pc, #508]	; (8005fe0 <_printf_float+0x2dc>)
 8005de4:	e7d3      	b.n	8005d8e <_printf_float+0x8a>
 8005de6:	6863      	ldr	r3, [r4, #4]
 8005de8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	d142      	bne.n	8005e76 <_printf_float+0x172>
 8005df0:	2306      	movs	r3, #6
 8005df2:	6063      	str	r3, [r4, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	9206      	str	r2, [sp, #24]
 8005df8:	aa0e      	add	r2, sp, #56	; 0x38
 8005dfa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005dfe:	aa0d      	add	r2, sp, #52	; 0x34
 8005e00:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005e04:	9203      	str	r2, [sp, #12]
 8005e06:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005e0a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	6863      	ldr	r3, [r4, #4]
 8005e12:	4642      	mov	r2, r8
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	4628      	mov	r0, r5
 8005e18:	4653      	mov	r3, sl
 8005e1a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e1c:	f7ff fed4 	bl	8005bc8 <__cvt>
 8005e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e22:	4680      	mov	r8, r0
 8005e24:	2947      	cmp	r1, #71	; 0x47
 8005e26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e28:	d108      	bne.n	8005e3c <_printf_float+0x138>
 8005e2a:	1cc8      	adds	r0, r1, #3
 8005e2c:	db02      	blt.n	8005e34 <_printf_float+0x130>
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	4299      	cmp	r1, r3
 8005e32:	dd40      	ble.n	8005eb6 <_printf_float+0x1b2>
 8005e34:	f1a9 0902 	sub.w	r9, r9, #2
 8005e38:	fa5f f989 	uxtb.w	r9, r9
 8005e3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e40:	d81f      	bhi.n	8005e82 <_printf_float+0x17e>
 8005e42:	464a      	mov	r2, r9
 8005e44:	3901      	subs	r1, #1
 8005e46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e4a:	910d      	str	r1, [sp, #52]	; 0x34
 8005e4c:	f7ff ff1b 	bl	8005c86 <__exponent>
 8005e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e52:	4682      	mov	sl, r0
 8005e54:	1813      	adds	r3, r2, r0
 8005e56:	2a01      	cmp	r2, #1
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	dc02      	bgt.n	8005e62 <_printf_float+0x15e>
 8005e5c:	6822      	ldr	r2, [r4, #0]
 8005e5e:	07d2      	lsls	r2, r2, #31
 8005e60:	d501      	bpl.n	8005e66 <_printf_float+0x162>
 8005e62:	3301      	adds	r3, #1
 8005e64:	6123      	str	r3, [r4, #16]
 8005e66:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d09b      	beq.n	8005da6 <_printf_float+0xa2>
 8005e6e:	232d      	movs	r3, #45	; 0x2d
 8005e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e74:	e797      	b.n	8005da6 <_printf_float+0xa2>
 8005e76:	2947      	cmp	r1, #71	; 0x47
 8005e78:	d1bc      	bne.n	8005df4 <_printf_float+0xf0>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1ba      	bne.n	8005df4 <_printf_float+0xf0>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e7b7      	b.n	8005df2 <_printf_float+0xee>
 8005e82:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e86:	d118      	bne.n	8005eba <_printf_float+0x1b6>
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	6863      	ldr	r3, [r4, #4]
 8005e8c:	dd0b      	ble.n	8005ea6 <_printf_float+0x1a2>
 8005e8e:	6121      	str	r1, [r4, #16]
 8005e90:	b913      	cbnz	r3, 8005e98 <_printf_float+0x194>
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	07d0      	lsls	r0, r2, #31
 8005e96:	d502      	bpl.n	8005e9e <_printf_float+0x19a>
 8005e98:	3301      	adds	r3, #1
 8005e9a:	440b      	add	r3, r1
 8005e9c:	6123      	str	r3, [r4, #16]
 8005e9e:	f04f 0a00 	mov.w	sl, #0
 8005ea2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ea4:	e7df      	b.n	8005e66 <_printf_float+0x162>
 8005ea6:	b913      	cbnz	r3, 8005eae <_printf_float+0x1aa>
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	07d2      	lsls	r2, r2, #31
 8005eac:	d501      	bpl.n	8005eb2 <_printf_float+0x1ae>
 8005eae:	3302      	adds	r3, #2
 8005eb0:	e7f4      	b.n	8005e9c <_printf_float+0x198>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e7f2      	b.n	8005e9c <_printf_float+0x198>
 8005eb6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ebc:	4299      	cmp	r1, r3
 8005ebe:	db05      	blt.n	8005ecc <_printf_float+0x1c8>
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	6121      	str	r1, [r4, #16]
 8005ec4:	07d8      	lsls	r0, r3, #31
 8005ec6:	d5ea      	bpl.n	8005e9e <_printf_float+0x19a>
 8005ec8:	1c4b      	adds	r3, r1, #1
 8005eca:	e7e7      	b.n	8005e9c <_printf_float+0x198>
 8005ecc:	2900      	cmp	r1, #0
 8005ece:	bfcc      	ite	gt
 8005ed0:	2201      	movgt	r2, #1
 8005ed2:	f1c1 0202 	rsble	r2, r1, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	e7e0      	b.n	8005e9c <_printf_float+0x198>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	055a      	lsls	r2, r3, #21
 8005ede:	d407      	bmi.n	8005ef0 <_printf_float+0x1ec>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	d12b      	bne.n	8005f46 <_printf_float+0x242>
 8005eee:	e764      	b.n	8005dba <_printf_float+0xb6>
 8005ef0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ef4:	f240 80dd 	bls.w	80060b2 <_printf_float+0x3ae>
 8005ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005efc:	2200      	movs	r2, #0
 8005efe:	2300      	movs	r3, #0
 8005f00:	f7fa fd52 	bl	80009a8 <__aeabi_dcmpeq>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d033      	beq.n	8005f70 <_printf_float+0x26c>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	4a35      	ldr	r2, [pc, #212]	; (8005fe4 <_printf_float+0x2e0>)
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af51 	beq.w	8005dba <_printf_float+0xb6>
 8005f18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	db02      	blt.n	8005f26 <_printf_float+0x222>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	07d8      	lsls	r0, r3, #31
 8005f24:	d50f      	bpl.n	8005f46 <_printf_float+0x242>
 8005f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	f43f af42 	beq.w	8005dba <_printf_float+0xb6>
 8005f36:	f04f 0800 	mov.w	r8, #0
 8005f3a:	f104 091a 	add.w	r9, r4, #26
 8005f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f40:	3b01      	subs	r3, #1
 8005f42:	4543      	cmp	r3, r8
 8005f44:	dc09      	bgt.n	8005f5a <_printf_float+0x256>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	079b      	lsls	r3, r3, #30
 8005f4a:	f100 8102 	bmi.w	8006152 <_printf_float+0x44e>
 8005f4e:	68e0      	ldr	r0, [r4, #12]
 8005f50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f52:	4298      	cmp	r0, r3
 8005f54:	bfb8      	it	lt
 8005f56:	4618      	movlt	r0, r3
 8005f58:	e731      	b.n	8005dbe <_printf_float+0xba>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	464a      	mov	r2, r9
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	f43f af28 	beq.w	8005dba <_printf_float+0xb6>
 8005f6a:	f108 0801 	add.w	r8, r8, #1
 8005f6e:	e7e6      	b.n	8005f3e <_printf_float+0x23a>
 8005f70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	dc38      	bgt.n	8005fe8 <_printf_float+0x2e4>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	4a19      	ldr	r2, [pc, #100]	; (8005fe4 <_printf_float+0x2e0>)
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f af1a 	beq.w	8005dba <_printf_float+0xb6>
 8005f86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	d102      	bne.n	8005f94 <_printf_float+0x290>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	07d9      	lsls	r1, r3, #31
 8005f92:	d5d8      	bpl.n	8005f46 <_printf_float+0x242>
 8005f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f43f af0b 	beq.w	8005dba <_printf_float+0xb6>
 8005fa4:	f04f 0900 	mov.w	r9, #0
 8005fa8:	f104 0a1a 	add.w	sl, r4, #26
 8005fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fae:	425b      	negs	r3, r3
 8005fb0:	454b      	cmp	r3, r9
 8005fb2:	dc01      	bgt.n	8005fb8 <_printf_float+0x2b4>
 8005fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb6:	e794      	b.n	8005ee2 <_printf_float+0x1de>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4652      	mov	r2, sl
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f aef9 	beq.w	8005dba <_printf_float+0xb6>
 8005fc8:	f109 0901 	add.w	r9, r9, #1
 8005fcc:	e7ee      	b.n	8005fac <_printf_float+0x2a8>
 8005fce:	bf00      	nop
 8005fd0:	7fefffff 	.word	0x7fefffff
 8005fd4:	08008944 	.word	0x08008944
 8005fd8:	08008948 	.word	0x08008948
 8005fdc:	08008950 	.word	0x08008950
 8005fe0:	0800894c 	.word	0x0800894c
 8005fe4:	08008954 	.word	0x08008954
 8005fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fec:	429a      	cmp	r2, r3
 8005fee:	bfa8      	it	ge
 8005ff0:	461a      	movge	r2, r3
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	4691      	mov	r9, r2
 8005ff6:	dc37      	bgt.n	8006068 <_printf_float+0x364>
 8005ff8:	f04f 0b00 	mov.w	fp, #0
 8005ffc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006000:	f104 021a 	add.w	r2, r4, #26
 8006004:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006008:	ebaa 0309 	sub.w	r3, sl, r9
 800600c:	455b      	cmp	r3, fp
 800600e:	dc33      	bgt.n	8006078 <_printf_float+0x374>
 8006010:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006014:	429a      	cmp	r2, r3
 8006016:	db3b      	blt.n	8006090 <_printf_float+0x38c>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	07da      	lsls	r2, r3, #31
 800601c:	d438      	bmi.n	8006090 <_printf_float+0x38c>
 800601e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006020:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006022:	eba2 030a 	sub.w	r3, r2, sl
 8006026:	eba2 0901 	sub.w	r9, r2, r1
 800602a:	4599      	cmp	r9, r3
 800602c:	bfa8      	it	ge
 800602e:	4699      	movge	r9, r3
 8006030:	f1b9 0f00 	cmp.w	r9, #0
 8006034:	dc34      	bgt.n	80060a0 <_printf_float+0x39c>
 8006036:	f04f 0800 	mov.w	r8, #0
 800603a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800603e:	f104 0a1a 	add.w	sl, r4, #26
 8006042:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	eba3 0309 	sub.w	r3, r3, r9
 800604c:	4543      	cmp	r3, r8
 800604e:	f77f af7a 	ble.w	8005f46 <_printf_float+0x242>
 8006052:	2301      	movs	r3, #1
 8006054:	4652      	mov	r2, sl
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	f43f aeac 	beq.w	8005dba <_printf_float+0xb6>
 8006062:	f108 0801 	add.w	r8, r8, #1
 8006066:	e7ec      	b.n	8006042 <_printf_float+0x33e>
 8006068:	4613      	mov	r3, r2
 800606a:	4631      	mov	r1, r6
 800606c:	4642      	mov	r2, r8
 800606e:	4628      	mov	r0, r5
 8006070:	47b8      	blx	r7
 8006072:	3001      	adds	r0, #1
 8006074:	d1c0      	bne.n	8005ff8 <_printf_float+0x2f4>
 8006076:	e6a0      	b.n	8005dba <_printf_float+0xb6>
 8006078:	2301      	movs	r3, #1
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	f43f ae99 	beq.w	8005dba <_printf_float+0xb6>
 8006088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800608a:	f10b 0b01 	add.w	fp, fp, #1
 800608e:	e7b9      	b.n	8006004 <_printf_float+0x300>
 8006090:	4631      	mov	r1, r6
 8006092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006096:	4628      	mov	r0, r5
 8006098:	47b8      	blx	r7
 800609a:	3001      	adds	r0, #1
 800609c:	d1bf      	bne.n	800601e <_printf_float+0x31a>
 800609e:	e68c      	b.n	8005dba <_printf_float+0xb6>
 80060a0:	464b      	mov	r3, r9
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	eb08 020a 	add.w	r2, r8, sl
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	d1c2      	bne.n	8006036 <_printf_float+0x332>
 80060b0:	e683      	b.n	8005dba <_printf_float+0xb6>
 80060b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060b4:	2a01      	cmp	r2, #1
 80060b6:	dc01      	bgt.n	80060bc <_printf_float+0x3b8>
 80060b8:	07db      	lsls	r3, r3, #31
 80060ba:	d537      	bpl.n	800612c <_printf_float+0x428>
 80060bc:	2301      	movs	r3, #1
 80060be:	4642      	mov	r2, r8
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f ae77 	beq.w	8005dba <_printf_float+0xb6>
 80060cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f ae6f 	beq.w	8005dba <_printf_float+0xb6>
 80060dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060e0:	2200      	movs	r2, #0
 80060e2:	2300      	movs	r3, #0
 80060e4:	f7fa fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80060e8:	b9d8      	cbnz	r0, 8006122 <_printf_float+0x41e>
 80060ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ec:	f108 0201 	add.w	r2, r8, #1
 80060f0:	3b01      	subs	r3, #1
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	d10e      	bne.n	800611a <_printf_float+0x416>
 80060fc:	e65d      	b.n	8005dba <_printf_float+0xb6>
 80060fe:	2301      	movs	r3, #1
 8006100:	464a      	mov	r2, r9
 8006102:	4631      	mov	r1, r6
 8006104:	4628      	mov	r0, r5
 8006106:	47b8      	blx	r7
 8006108:	3001      	adds	r0, #1
 800610a:	f43f ae56 	beq.w	8005dba <_printf_float+0xb6>
 800610e:	f108 0801 	add.w	r8, r8, #1
 8006112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006114:	3b01      	subs	r3, #1
 8006116:	4543      	cmp	r3, r8
 8006118:	dcf1      	bgt.n	80060fe <_printf_float+0x3fa>
 800611a:	4653      	mov	r3, sl
 800611c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006120:	e6e0      	b.n	8005ee4 <_printf_float+0x1e0>
 8006122:	f04f 0800 	mov.w	r8, #0
 8006126:	f104 091a 	add.w	r9, r4, #26
 800612a:	e7f2      	b.n	8006112 <_printf_float+0x40e>
 800612c:	2301      	movs	r3, #1
 800612e:	4642      	mov	r2, r8
 8006130:	e7df      	b.n	80060f2 <_printf_float+0x3ee>
 8006132:	2301      	movs	r3, #1
 8006134:	464a      	mov	r2, r9
 8006136:	4631      	mov	r1, r6
 8006138:	4628      	mov	r0, r5
 800613a:	47b8      	blx	r7
 800613c:	3001      	adds	r0, #1
 800613e:	f43f ae3c 	beq.w	8005dba <_printf_float+0xb6>
 8006142:	f108 0801 	add.w	r8, r8, #1
 8006146:	68e3      	ldr	r3, [r4, #12]
 8006148:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800614a:	1a5b      	subs	r3, r3, r1
 800614c:	4543      	cmp	r3, r8
 800614e:	dcf0      	bgt.n	8006132 <_printf_float+0x42e>
 8006150:	e6fd      	b.n	8005f4e <_printf_float+0x24a>
 8006152:	f04f 0800 	mov.w	r8, #0
 8006156:	f104 0919 	add.w	r9, r4, #25
 800615a:	e7f4      	b.n	8006146 <_printf_float+0x442>

0800615c <_printf_common>:
 800615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	4616      	mov	r6, r2
 8006162:	4699      	mov	r9, r3
 8006164:	688a      	ldr	r2, [r1, #8]
 8006166:	690b      	ldr	r3, [r1, #16]
 8006168:	4607      	mov	r7, r0
 800616a:	4293      	cmp	r3, r2
 800616c:	bfb8      	it	lt
 800616e:	4613      	movlt	r3, r2
 8006170:	6033      	str	r3, [r6, #0]
 8006172:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006176:	460c      	mov	r4, r1
 8006178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800617c:	b10a      	cbz	r2, 8006182 <_printf_common+0x26>
 800617e:	3301      	adds	r3, #1
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	0699      	lsls	r1, r3, #26
 8006186:	bf42      	ittt	mi
 8006188:	6833      	ldrmi	r3, [r6, #0]
 800618a:	3302      	addmi	r3, #2
 800618c:	6033      	strmi	r3, [r6, #0]
 800618e:	6825      	ldr	r5, [r4, #0]
 8006190:	f015 0506 	ands.w	r5, r5, #6
 8006194:	d106      	bne.n	80061a4 <_printf_common+0x48>
 8006196:	f104 0a19 	add.w	sl, r4, #25
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	6832      	ldr	r2, [r6, #0]
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	dc28      	bgt.n	80061f6 <_printf_common+0x9a>
 80061a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061a8:	1e13      	subs	r3, r2, #0
 80061aa:	6822      	ldr	r2, [r4, #0]
 80061ac:	bf18      	it	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	0692      	lsls	r2, r2, #26
 80061b2:	d42d      	bmi.n	8006210 <_printf_common+0xb4>
 80061b4:	4649      	mov	r1, r9
 80061b6:	4638      	mov	r0, r7
 80061b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061bc:	47c0      	blx	r8
 80061be:	3001      	adds	r0, #1
 80061c0:	d020      	beq.n	8006204 <_printf_common+0xa8>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	68e5      	ldr	r5, [r4, #12]
 80061c6:	f003 0306 	and.w	r3, r3, #6
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	bf18      	it	ne
 80061ce:	2500      	movne	r5, #0
 80061d0:	6832      	ldr	r2, [r6, #0]
 80061d2:	f04f 0600 	mov.w	r6, #0
 80061d6:	68a3      	ldr	r3, [r4, #8]
 80061d8:	bf08      	it	eq
 80061da:	1aad      	subeq	r5, r5, r2
 80061dc:	6922      	ldr	r2, [r4, #16]
 80061de:	bf08      	it	eq
 80061e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061e4:	4293      	cmp	r3, r2
 80061e6:	bfc4      	itt	gt
 80061e8:	1a9b      	subgt	r3, r3, r2
 80061ea:	18ed      	addgt	r5, r5, r3
 80061ec:	341a      	adds	r4, #26
 80061ee:	42b5      	cmp	r5, r6
 80061f0:	d11a      	bne.n	8006228 <_printf_common+0xcc>
 80061f2:	2000      	movs	r0, #0
 80061f4:	e008      	b.n	8006208 <_printf_common+0xac>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4652      	mov	r2, sl
 80061fa:	4649      	mov	r1, r9
 80061fc:	4638      	mov	r0, r7
 80061fe:	47c0      	blx	r8
 8006200:	3001      	adds	r0, #1
 8006202:	d103      	bne.n	800620c <_printf_common+0xb0>
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620c:	3501      	adds	r5, #1
 800620e:	e7c4      	b.n	800619a <_printf_common+0x3e>
 8006210:	2030      	movs	r0, #48	; 0x30
 8006212:	18e1      	adds	r1, r4, r3
 8006214:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800621e:	4422      	add	r2, r4
 8006220:	3302      	adds	r3, #2
 8006222:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006226:	e7c5      	b.n	80061b4 <_printf_common+0x58>
 8006228:	2301      	movs	r3, #1
 800622a:	4622      	mov	r2, r4
 800622c:	4649      	mov	r1, r9
 800622e:	4638      	mov	r0, r7
 8006230:	47c0      	blx	r8
 8006232:	3001      	adds	r0, #1
 8006234:	d0e6      	beq.n	8006204 <_printf_common+0xa8>
 8006236:	3601      	adds	r6, #1
 8006238:	e7d9      	b.n	80061ee <_printf_common+0x92>
	...

0800623c <_printf_i>:
 800623c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006240:	460c      	mov	r4, r1
 8006242:	7e27      	ldrb	r7, [r4, #24]
 8006244:	4691      	mov	r9, r2
 8006246:	2f78      	cmp	r7, #120	; 0x78
 8006248:	4680      	mov	r8, r0
 800624a:	469a      	mov	sl, r3
 800624c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800624e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006252:	d807      	bhi.n	8006264 <_printf_i+0x28>
 8006254:	2f62      	cmp	r7, #98	; 0x62
 8006256:	d80a      	bhi.n	800626e <_printf_i+0x32>
 8006258:	2f00      	cmp	r7, #0
 800625a:	f000 80d9 	beq.w	8006410 <_printf_i+0x1d4>
 800625e:	2f58      	cmp	r7, #88	; 0x58
 8006260:	f000 80a4 	beq.w	80063ac <_printf_i+0x170>
 8006264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800626c:	e03a      	b.n	80062e4 <_printf_i+0xa8>
 800626e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006272:	2b15      	cmp	r3, #21
 8006274:	d8f6      	bhi.n	8006264 <_printf_i+0x28>
 8006276:	a001      	add	r0, pc, #4	; (adr r0, 800627c <_printf_i+0x40>)
 8006278:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800627c:	080062d5 	.word	0x080062d5
 8006280:	080062e9 	.word	0x080062e9
 8006284:	08006265 	.word	0x08006265
 8006288:	08006265 	.word	0x08006265
 800628c:	08006265 	.word	0x08006265
 8006290:	08006265 	.word	0x08006265
 8006294:	080062e9 	.word	0x080062e9
 8006298:	08006265 	.word	0x08006265
 800629c:	08006265 	.word	0x08006265
 80062a0:	08006265 	.word	0x08006265
 80062a4:	08006265 	.word	0x08006265
 80062a8:	080063f7 	.word	0x080063f7
 80062ac:	08006319 	.word	0x08006319
 80062b0:	080063d9 	.word	0x080063d9
 80062b4:	08006265 	.word	0x08006265
 80062b8:	08006265 	.word	0x08006265
 80062bc:	08006419 	.word	0x08006419
 80062c0:	08006265 	.word	0x08006265
 80062c4:	08006319 	.word	0x08006319
 80062c8:	08006265 	.word	0x08006265
 80062cc:	08006265 	.word	0x08006265
 80062d0:	080063e1 	.word	0x080063e1
 80062d4:	680b      	ldr	r3, [r1, #0]
 80062d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	600a      	str	r2, [r1, #0]
 80062e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0a4      	b.n	8006432 <_printf_i+0x1f6>
 80062e8:	6825      	ldr	r5, [r4, #0]
 80062ea:	6808      	ldr	r0, [r1, #0]
 80062ec:	062e      	lsls	r6, r5, #24
 80062ee:	f100 0304 	add.w	r3, r0, #4
 80062f2:	d50a      	bpl.n	800630a <_printf_i+0xce>
 80062f4:	6805      	ldr	r5, [r0, #0]
 80062f6:	600b      	str	r3, [r1, #0]
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	da03      	bge.n	8006304 <_printf_i+0xc8>
 80062fc:	232d      	movs	r3, #45	; 0x2d
 80062fe:	426d      	negs	r5, r5
 8006300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006304:	230a      	movs	r3, #10
 8006306:	485e      	ldr	r0, [pc, #376]	; (8006480 <_printf_i+0x244>)
 8006308:	e019      	b.n	800633e <_printf_i+0x102>
 800630a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800630e:	6805      	ldr	r5, [r0, #0]
 8006310:	600b      	str	r3, [r1, #0]
 8006312:	bf18      	it	ne
 8006314:	b22d      	sxthne	r5, r5
 8006316:	e7ef      	b.n	80062f8 <_printf_i+0xbc>
 8006318:	680b      	ldr	r3, [r1, #0]
 800631a:	6825      	ldr	r5, [r4, #0]
 800631c:	1d18      	adds	r0, r3, #4
 800631e:	6008      	str	r0, [r1, #0]
 8006320:	0628      	lsls	r0, r5, #24
 8006322:	d501      	bpl.n	8006328 <_printf_i+0xec>
 8006324:	681d      	ldr	r5, [r3, #0]
 8006326:	e002      	b.n	800632e <_printf_i+0xf2>
 8006328:	0669      	lsls	r1, r5, #25
 800632a:	d5fb      	bpl.n	8006324 <_printf_i+0xe8>
 800632c:	881d      	ldrh	r5, [r3, #0]
 800632e:	2f6f      	cmp	r7, #111	; 0x6f
 8006330:	bf0c      	ite	eq
 8006332:	2308      	moveq	r3, #8
 8006334:	230a      	movne	r3, #10
 8006336:	4852      	ldr	r0, [pc, #328]	; (8006480 <_printf_i+0x244>)
 8006338:	2100      	movs	r1, #0
 800633a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800633e:	6866      	ldr	r6, [r4, #4]
 8006340:	2e00      	cmp	r6, #0
 8006342:	bfa8      	it	ge
 8006344:	6821      	ldrge	r1, [r4, #0]
 8006346:	60a6      	str	r6, [r4, #8]
 8006348:	bfa4      	itt	ge
 800634a:	f021 0104 	bicge.w	r1, r1, #4
 800634e:	6021      	strge	r1, [r4, #0]
 8006350:	b90d      	cbnz	r5, 8006356 <_printf_i+0x11a>
 8006352:	2e00      	cmp	r6, #0
 8006354:	d04d      	beq.n	80063f2 <_printf_i+0x1b6>
 8006356:	4616      	mov	r6, r2
 8006358:	fbb5 f1f3 	udiv	r1, r5, r3
 800635c:	fb03 5711 	mls	r7, r3, r1, r5
 8006360:	5dc7      	ldrb	r7, [r0, r7]
 8006362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006366:	462f      	mov	r7, r5
 8006368:	42bb      	cmp	r3, r7
 800636a:	460d      	mov	r5, r1
 800636c:	d9f4      	bls.n	8006358 <_printf_i+0x11c>
 800636e:	2b08      	cmp	r3, #8
 8006370:	d10b      	bne.n	800638a <_printf_i+0x14e>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	07df      	lsls	r7, r3, #31
 8006376:	d508      	bpl.n	800638a <_printf_i+0x14e>
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	6861      	ldr	r1, [r4, #4]
 800637c:	4299      	cmp	r1, r3
 800637e:	bfde      	ittt	le
 8006380:	2330      	movle	r3, #48	; 0x30
 8006382:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006386:	f106 36ff 	addle.w	r6, r6, #4294967295
 800638a:	1b92      	subs	r2, r2, r6
 800638c:	6122      	str	r2, [r4, #16]
 800638e:	464b      	mov	r3, r9
 8006390:	4621      	mov	r1, r4
 8006392:	4640      	mov	r0, r8
 8006394:	f8cd a000 	str.w	sl, [sp]
 8006398:	aa03      	add	r2, sp, #12
 800639a:	f7ff fedf 	bl	800615c <_printf_common>
 800639e:	3001      	adds	r0, #1
 80063a0:	d14c      	bne.n	800643c <_printf_i+0x200>
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	b004      	add	sp, #16
 80063a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ac:	4834      	ldr	r0, [pc, #208]	; (8006480 <_printf_i+0x244>)
 80063ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063b2:	680e      	ldr	r6, [r1, #0]
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80063ba:	061f      	lsls	r7, r3, #24
 80063bc:	600e      	str	r6, [r1, #0]
 80063be:	d514      	bpl.n	80063ea <_printf_i+0x1ae>
 80063c0:	07d9      	lsls	r1, r3, #31
 80063c2:	bf44      	itt	mi
 80063c4:	f043 0320 	orrmi.w	r3, r3, #32
 80063c8:	6023      	strmi	r3, [r4, #0]
 80063ca:	b91d      	cbnz	r5, 80063d4 <_printf_i+0x198>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	f023 0320 	bic.w	r3, r3, #32
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	2310      	movs	r3, #16
 80063d6:	e7af      	b.n	8006338 <_printf_i+0xfc>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	f043 0320 	orr.w	r3, r3, #32
 80063de:	6023      	str	r3, [r4, #0]
 80063e0:	2378      	movs	r3, #120	; 0x78
 80063e2:	4828      	ldr	r0, [pc, #160]	; (8006484 <_printf_i+0x248>)
 80063e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063e8:	e7e3      	b.n	80063b2 <_printf_i+0x176>
 80063ea:	065e      	lsls	r6, r3, #25
 80063ec:	bf48      	it	mi
 80063ee:	b2ad      	uxthmi	r5, r5
 80063f0:	e7e6      	b.n	80063c0 <_printf_i+0x184>
 80063f2:	4616      	mov	r6, r2
 80063f4:	e7bb      	b.n	800636e <_printf_i+0x132>
 80063f6:	680b      	ldr	r3, [r1, #0]
 80063f8:	6826      	ldr	r6, [r4, #0]
 80063fa:	1d1d      	adds	r5, r3, #4
 80063fc:	6960      	ldr	r0, [r4, #20]
 80063fe:	600d      	str	r5, [r1, #0]
 8006400:	0635      	lsls	r5, r6, #24
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	d501      	bpl.n	800640a <_printf_i+0x1ce>
 8006406:	6018      	str	r0, [r3, #0]
 8006408:	e002      	b.n	8006410 <_printf_i+0x1d4>
 800640a:	0671      	lsls	r1, r6, #25
 800640c:	d5fb      	bpl.n	8006406 <_printf_i+0x1ca>
 800640e:	8018      	strh	r0, [r3, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	4616      	mov	r6, r2
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	e7ba      	b.n	800638e <_printf_i+0x152>
 8006418:	680b      	ldr	r3, [r1, #0]
 800641a:	1d1a      	adds	r2, r3, #4
 800641c:	600a      	str	r2, [r1, #0]
 800641e:	681e      	ldr	r6, [r3, #0]
 8006420:	2100      	movs	r1, #0
 8006422:	4630      	mov	r0, r6
 8006424:	6862      	ldr	r2, [r4, #4]
 8006426:	f001 faed 	bl	8007a04 <memchr>
 800642a:	b108      	cbz	r0, 8006430 <_printf_i+0x1f4>
 800642c:	1b80      	subs	r0, r0, r6
 800642e:	6060      	str	r0, [r4, #4]
 8006430:	6863      	ldr	r3, [r4, #4]
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	2300      	movs	r3, #0
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643a:	e7a8      	b.n	800638e <_printf_i+0x152>
 800643c:	4632      	mov	r2, r6
 800643e:	4649      	mov	r1, r9
 8006440:	4640      	mov	r0, r8
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	47d0      	blx	sl
 8006446:	3001      	adds	r0, #1
 8006448:	d0ab      	beq.n	80063a2 <_printf_i+0x166>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	079b      	lsls	r3, r3, #30
 800644e:	d413      	bmi.n	8006478 <_printf_i+0x23c>
 8006450:	68e0      	ldr	r0, [r4, #12]
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	4298      	cmp	r0, r3
 8006456:	bfb8      	it	lt
 8006458:	4618      	movlt	r0, r3
 800645a:	e7a4      	b.n	80063a6 <_printf_i+0x16a>
 800645c:	2301      	movs	r3, #1
 800645e:	4632      	mov	r2, r6
 8006460:	4649      	mov	r1, r9
 8006462:	4640      	mov	r0, r8
 8006464:	47d0      	blx	sl
 8006466:	3001      	adds	r0, #1
 8006468:	d09b      	beq.n	80063a2 <_printf_i+0x166>
 800646a:	3501      	adds	r5, #1
 800646c:	68e3      	ldr	r3, [r4, #12]
 800646e:	9903      	ldr	r1, [sp, #12]
 8006470:	1a5b      	subs	r3, r3, r1
 8006472:	42ab      	cmp	r3, r5
 8006474:	dcf2      	bgt.n	800645c <_printf_i+0x220>
 8006476:	e7eb      	b.n	8006450 <_printf_i+0x214>
 8006478:	2500      	movs	r5, #0
 800647a:	f104 0619 	add.w	r6, r4, #25
 800647e:	e7f5      	b.n	800646c <_printf_i+0x230>
 8006480:	08008956 	.word	0x08008956
 8006484:	08008967 	.word	0x08008967

08006488 <iprintf>:
 8006488:	b40f      	push	{r0, r1, r2, r3}
 800648a:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <iprintf+0x2c>)
 800648c:	b513      	push	{r0, r1, r4, lr}
 800648e:	681c      	ldr	r4, [r3, #0]
 8006490:	b124      	cbz	r4, 800649c <iprintf+0x14>
 8006492:	69a3      	ldr	r3, [r4, #24]
 8006494:	b913      	cbnz	r3, 800649c <iprintf+0x14>
 8006496:	4620      	mov	r0, r4
 8006498:	f001 f9a2 	bl	80077e0 <__sinit>
 800649c:	ab05      	add	r3, sp, #20
 800649e:	4620      	mov	r0, r4
 80064a0:	9a04      	ldr	r2, [sp, #16]
 80064a2:	68a1      	ldr	r1, [r4, #8]
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	f001 ff27 	bl	80082f8 <_vfiprintf_r>
 80064aa:	b002      	add	sp, #8
 80064ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b0:	b004      	add	sp, #16
 80064b2:	4770      	bx	lr
 80064b4:	20000018 	.word	0x20000018

080064b8 <_puts_r>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	460e      	mov	r6, r1
 80064bc:	4605      	mov	r5, r0
 80064be:	b118      	cbz	r0, 80064c8 <_puts_r+0x10>
 80064c0:	6983      	ldr	r3, [r0, #24]
 80064c2:	b90b      	cbnz	r3, 80064c8 <_puts_r+0x10>
 80064c4:	f001 f98c 	bl	80077e0 <__sinit>
 80064c8:	69ab      	ldr	r3, [r5, #24]
 80064ca:	68ac      	ldr	r4, [r5, #8]
 80064cc:	b913      	cbnz	r3, 80064d4 <_puts_r+0x1c>
 80064ce:	4628      	mov	r0, r5
 80064d0:	f001 f986 	bl	80077e0 <__sinit>
 80064d4:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <_puts_r+0xd0>)
 80064d6:	429c      	cmp	r4, r3
 80064d8:	d120      	bne.n	800651c <_puts_r+0x64>
 80064da:	686c      	ldr	r4, [r5, #4]
 80064dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064de:	07db      	lsls	r3, r3, #31
 80064e0:	d405      	bmi.n	80064ee <_puts_r+0x36>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	0598      	lsls	r0, r3, #22
 80064e6:	d402      	bmi.n	80064ee <_puts_r+0x36>
 80064e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ea:	f001 fa1c 	bl	8007926 <__retarget_lock_acquire_recursive>
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	0719      	lsls	r1, r3, #28
 80064f2:	d51d      	bpl.n	8006530 <_puts_r+0x78>
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	b1db      	cbz	r3, 8006530 <_puts_r+0x78>
 80064f8:	3e01      	subs	r6, #1
 80064fa:	68a3      	ldr	r3, [r4, #8]
 80064fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006500:	3b01      	subs	r3, #1
 8006502:	60a3      	str	r3, [r4, #8]
 8006504:	bb39      	cbnz	r1, 8006556 <_puts_r+0x9e>
 8006506:	2b00      	cmp	r3, #0
 8006508:	da38      	bge.n	800657c <_puts_r+0xc4>
 800650a:	4622      	mov	r2, r4
 800650c:	210a      	movs	r1, #10
 800650e:	4628      	mov	r0, r5
 8006510:	f000 f90e 	bl	8006730 <__swbuf_r>
 8006514:	3001      	adds	r0, #1
 8006516:	d011      	beq.n	800653c <_puts_r+0x84>
 8006518:	250a      	movs	r5, #10
 800651a:	e011      	b.n	8006540 <_puts_r+0x88>
 800651c:	4b1b      	ldr	r3, [pc, #108]	; (800658c <_puts_r+0xd4>)
 800651e:	429c      	cmp	r4, r3
 8006520:	d101      	bne.n	8006526 <_puts_r+0x6e>
 8006522:	68ac      	ldr	r4, [r5, #8]
 8006524:	e7da      	b.n	80064dc <_puts_r+0x24>
 8006526:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <_puts_r+0xd8>)
 8006528:	429c      	cmp	r4, r3
 800652a:	bf08      	it	eq
 800652c:	68ec      	ldreq	r4, [r5, #12]
 800652e:	e7d5      	b.n	80064dc <_puts_r+0x24>
 8006530:	4621      	mov	r1, r4
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f94e 	bl	80067d4 <__swsetup_r>
 8006538:	2800      	cmp	r0, #0
 800653a:	d0dd      	beq.n	80064f8 <_puts_r+0x40>
 800653c:	f04f 35ff 	mov.w	r5, #4294967295
 8006540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006542:	07da      	lsls	r2, r3, #31
 8006544:	d405      	bmi.n	8006552 <_puts_r+0x9a>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	059b      	lsls	r3, r3, #22
 800654a:	d402      	bmi.n	8006552 <_puts_r+0x9a>
 800654c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800654e:	f001 f9eb 	bl	8007928 <__retarget_lock_release_recursive>
 8006552:	4628      	mov	r0, r5
 8006554:	bd70      	pop	{r4, r5, r6, pc}
 8006556:	2b00      	cmp	r3, #0
 8006558:	da04      	bge.n	8006564 <_puts_r+0xac>
 800655a:	69a2      	ldr	r2, [r4, #24]
 800655c:	429a      	cmp	r2, r3
 800655e:	dc06      	bgt.n	800656e <_puts_r+0xb6>
 8006560:	290a      	cmp	r1, #10
 8006562:	d004      	beq.n	800656e <_puts_r+0xb6>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	6022      	str	r2, [r4, #0]
 800656a:	7019      	strb	r1, [r3, #0]
 800656c:	e7c5      	b.n	80064fa <_puts_r+0x42>
 800656e:	4622      	mov	r2, r4
 8006570:	4628      	mov	r0, r5
 8006572:	f000 f8dd 	bl	8006730 <__swbuf_r>
 8006576:	3001      	adds	r0, #1
 8006578:	d1bf      	bne.n	80064fa <_puts_r+0x42>
 800657a:	e7df      	b.n	800653c <_puts_r+0x84>
 800657c:	250a      	movs	r5, #10
 800657e:	6823      	ldr	r3, [r4, #0]
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	6022      	str	r2, [r4, #0]
 8006584:	701d      	strb	r5, [r3, #0]
 8006586:	e7db      	b.n	8006540 <_puts_r+0x88>
 8006588:	08008a2c 	.word	0x08008a2c
 800658c:	08008a4c 	.word	0x08008a4c
 8006590:	08008a0c 	.word	0x08008a0c

08006594 <puts>:
 8006594:	4b02      	ldr	r3, [pc, #8]	; (80065a0 <puts+0xc>)
 8006596:	4601      	mov	r1, r0
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	f7ff bf8d 	b.w	80064b8 <_puts_r>
 800659e:	bf00      	nop
 80065a0:	20000018 	.word	0x20000018

080065a4 <setvbuf>:
 80065a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80065a8:	461d      	mov	r5, r3
 80065aa:	4b5d      	ldr	r3, [pc, #372]	; (8006720 <setvbuf+0x17c>)
 80065ac:	4604      	mov	r4, r0
 80065ae:	681f      	ldr	r7, [r3, #0]
 80065b0:	460e      	mov	r6, r1
 80065b2:	4690      	mov	r8, r2
 80065b4:	b127      	cbz	r7, 80065c0 <setvbuf+0x1c>
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	b913      	cbnz	r3, 80065c0 <setvbuf+0x1c>
 80065ba:	4638      	mov	r0, r7
 80065bc:	f001 f910 	bl	80077e0 <__sinit>
 80065c0:	4b58      	ldr	r3, [pc, #352]	; (8006724 <setvbuf+0x180>)
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d167      	bne.n	8006696 <setvbuf+0xf2>
 80065c6:	687c      	ldr	r4, [r7, #4]
 80065c8:	f1b8 0f02 	cmp.w	r8, #2
 80065cc:	d006      	beq.n	80065dc <setvbuf+0x38>
 80065ce:	f1b8 0f01 	cmp.w	r8, #1
 80065d2:	f200 809f 	bhi.w	8006714 <setvbuf+0x170>
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	f2c0 809c 	blt.w	8006714 <setvbuf+0x170>
 80065dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065de:	07db      	lsls	r3, r3, #31
 80065e0:	d405      	bmi.n	80065ee <setvbuf+0x4a>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	0598      	lsls	r0, r3, #22
 80065e6:	d402      	bmi.n	80065ee <setvbuf+0x4a>
 80065e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ea:	f001 f99c 	bl	8007926 <__retarget_lock_acquire_recursive>
 80065ee:	4621      	mov	r1, r4
 80065f0:	4638      	mov	r0, r7
 80065f2:	f001 f861 	bl	80076b8 <_fflush_r>
 80065f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065f8:	b141      	cbz	r1, 800660c <setvbuf+0x68>
 80065fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065fe:	4299      	cmp	r1, r3
 8006600:	d002      	beq.n	8006608 <setvbuf+0x64>
 8006602:	4638      	mov	r0, r7
 8006604:	f001 fdaa 	bl	800815c <_free_r>
 8006608:	2300      	movs	r3, #0
 800660a:	6363      	str	r3, [r4, #52]	; 0x34
 800660c:	2300      	movs	r3, #0
 800660e:	61a3      	str	r3, [r4, #24]
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	0619      	lsls	r1, r3, #24
 8006616:	d503      	bpl.n	8006620 <setvbuf+0x7c>
 8006618:	4638      	mov	r0, r7
 800661a:	6921      	ldr	r1, [r4, #16]
 800661c:	f001 fd9e 	bl	800815c <_free_r>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f1b8 0f02 	cmp.w	r8, #2
 8006626:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	d06c      	beq.n	800670c <setvbuf+0x168>
 8006632:	ab01      	add	r3, sp, #4
 8006634:	466a      	mov	r2, sp
 8006636:	4621      	mov	r1, r4
 8006638:	4638      	mov	r0, r7
 800663a:	f001 f976 	bl	800792a <__swhatbuf_r>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	4318      	orrs	r0, r3
 8006642:	81a0      	strh	r0, [r4, #12]
 8006644:	2d00      	cmp	r5, #0
 8006646:	d130      	bne.n	80066aa <setvbuf+0x106>
 8006648:	9d00      	ldr	r5, [sp, #0]
 800664a:	4628      	mov	r0, r5
 800664c:	f001 f9d2 	bl	80079f4 <malloc>
 8006650:	4606      	mov	r6, r0
 8006652:	2800      	cmp	r0, #0
 8006654:	d155      	bne.n	8006702 <setvbuf+0x15e>
 8006656:	f8dd 9000 	ldr.w	r9, [sp]
 800665a:	45a9      	cmp	r9, r5
 800665c:	d14a      	bne.n	80066f4 <setvbuf+0x150>
 800665e:	f04f 35ff 	mov.w	r5, #4294967295
 8006662:	2200      	movs	r2, #0
 8006664:	60a2      	str	r2, [r4, #8]
 8006666:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	6122      	str	r2, [r4, #16]
 800666e:	2201      	movs	r2, #1
 8006670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006674:	6162      	str	r2, [r4, #20]
 8006676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006678:	f043 0302 	orr.w	r3, r3, #2
 800667c:	07d2      	lsls	r2, r2, #31
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	d405      	bmi.n	800668e <setvbuf+0xea>
 8006682:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006686:	d102      	bne.n	800668e <setvbuf+0xea>
 8006688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668a:	f001 f94d 	bl	8007928 <__retarget_lock_release_recursive>
 800668e:	4628      	mov	r0, r5
 8006690:	b003      	add	sp, #12
 8006692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006696:	4b24      	ldr	r3, [pc, #144]	; (8006728 <setvbuf+0x184>)
 8006698:	429c      	cmp	r4, r3
 800669a:	d101      	bne.n	80066a0 <setvbuf+0xfc>
 800669c:	68bc      	ldr	r4, [r7, #8]
 800669e:	e793      	b.n	80065c8 <setvbuf+0x24>
 80066a0:	4b22      	ldr	r3, [pc, #136]	; (800672c <setvbuf+0x188>)
 80066a2:	429c      	cmp	r4, r3
 80066a4:	bf08      	it	eq
 80066a6:	68fc      	ldreq	r4, [r7, #12]
 80066a8:	e78e      	b.n	80065c8 <setvbuf+0x24>
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d0cd      	beq.n	800664a <setvbuf+0xa6>
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	b913      	cbnz	r3, 80066b8 <setvbuf+0x114>
 80066b2:	4638      	mov	r0, r7
 80066b4:	f001 f894 	bl	80077e0 <__sinit>
 80066b8:	f1b8 0f01 	cmp.w	r8, #1
 80066bc:	bf08      	it	eq
 80066be:	89a3      	ldrheq	r3, [r4, #12]
 80066c0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80066c4:	bf04      	itt	eq
 80066c6:	f043 0301 	orreq.w	r3, r3, #1
 80066ca:	81a3      	strheq	r3, [r4, #12]
 80066cc:	89a2      	ldrh	r2, [r4, #12]
 80066ce:	6026      	str	r6, [r4, #0]
 80066d0:	f012 0308 	ands.w	r3, r2, #8
 80066d4:	d01c      	beq.n	8006710 <setvbuf+0x16c>
 80066d6:	07d3      	lsls	r3, r2, #31
 80066d8:	bf41      	itttt	mi
 80066da:	2300      	movmi	r3, #0
 80066dc:	426d      	negmi	r5, r5
 80066de:	60a3      	strmi	r3, [r4, #8]
 80066e0:	61a5      	strmi	r5, [r4, #24]
 80066e2:	bf58      	it	pl
 80066e4:	60a5      	strpl	r5, [r4, #8]
 80066e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80066e8:	f015 0501 	ands.w	r5, r5, #1
 80066ec:	d115      	bne.n	800671a <setvbuf+0x176>
 80066ee:	f412 7f00 	tst.w	r2, #512	; 0x200
 80066f2:	e7c8      	b.n	8006686 <setvbuf+0xe2>
 80066f4:	4648      	mov	r0, r9
 80066f6:	f001 f97d 	bl	80079f4 <malloc>
 80066fa:	4606      	mov	r6, r0
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d0ae      	beq.n	800665e <setvbuf+0xba>
 8006700:	464d      	mov	r5, r9
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	e7d0      	b.n	80066ae <setvbuf+0x10a>
 800670c:	2500      	movs	r5, #0
 800670e:	e7a8      	b.n	8006662 <setvbuf+0xbe>
 8006710:	60a3      	str	r3, [r4, #8]
 8006712:	e7e8      	b.n	80066e6 <setvbuf+0x142>
 8006714:	f04f 35ff 	mov.w	r5, #4294967295
 8006718:	e7b9      	b.n	800668e <setvbuf+0xea>
 800671a:	2500      	movs	r5, #0
 800671c:	e7b7      	b.n	800668e <setvbuf+0xea>
 800671e:	bf00      	nop
 8006720:	20000018 	.word	0x20000018
 8006724:	08008a2c 	.word	0x08008a2c
 8006728:	08008a4c 	.word	0x08008a4c
 800672c:	08008a0c 	.word	0x08008a0c

08006730 <__swbuf_r>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	460e      	mov	r6, r1
 8006734:	4614      	mov	r4, r2
 8006736:	4605      	mov	r5, r0
 8006738:	b118      	cbz	r0, 8006742 <__swbuf_r+0x12>
 800673a:	6983      	ldr	r3, [r0, #24]
 800673c:	b90b      	cbnz	r3, 8006742 <__swbuf_r+0x12>
 800673e:	f001 f84f 	bl	80077e0 <__sinit>
 8006742:	4b21      	ldr	r3, [pc, #132]	; (80067c8 <__swbuf_r+0x98>)
 8006744:	429c      	cmp	r4, r3
 8006746:	d12b      	bne.n	80067a0 <__swbuf_r+0x70>
 8006748:	686c      	ldr	r4, [r5, #4]
 800674a:	69a3      	ldr	r3, [r4, #24]
 800674c:	60a3      	str	r3, [r4, #8]
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	071a      	lsls	r2, r3, #28
 8006752:	d52f      	bpl.n	80067b4 <__swbuf_r+0x84>
 8006754:	6923      	ldr	r3, [r4, #16]
 8006756:	b36b      	cbz	r3, 80067b4 <__swbuf_r+0x84>
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	6820      	ldr	r0, [r4, #0]
 800675c:	b2f6      	uxtb	r6, r6
 800675e:	1ac0      	subs	r0, r0, r3
 8006760:	6963      	ldr	r3, [r4, #20]
 8006762:	4637      	mov	r7, r6
 8006764:	4283      	cmp	r3, r0
 8006766:	dc04      	bgt.n	8006772 <__swbuf_r+0x42>
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f000 ffa4 	bl	80076b8 <_fflush_r>
 8006770:	bb30      	cbnz	r0, 80067c0 <__swbuf_r+0x90>
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	3001      	adds	r0, #1
 8006776:	3b01      	subs	r3, #1
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	6022      	str	r2, [r4, #0]
 8006780:	701e      	strb	r6, [r3, #0]
 8006782:	6963      	ldr	r3, [r4, #20]
 8006784:	4283      	cmp	r3, r0
 8006786:	d004      	beq.n	8006792 <__swbuf_r+0x62>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	07db      	lsls	r3, r3, #31
 800678c:	d506      	bpl.n	800679c <__swbuf_r+0x6c>
 800678e:	2e0a      	cmp	r6, #10
 8006790:	d104      	bne.n	800679c <__swbuf_r+0x6c>
 8006792:	4621      	mov	r1, r4
 8006794:	4628      	mov	r0, r5
 8006796:	f000 ff8f 	bl	80076b8 <_fflush_r>
 800679a:	b988      	cbnz	r0, 80067c0 <__swbuf_r+0x90>
 800679c:	4638      	mov	r0, r7
 800679e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a0:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <__swbuf_r+0x9c>)
 80067a2:	429c      	cmp	r4, r3
 80067a4:	d101      	bne.n	80067aa <__swbuf_r+0x7a>
 80067a6:	68ac      	ldr	r4, [r5, #8]
 80067a8:	e7cf      	b.n	800674a <__swbuf_r+0x1a>
 80067aa:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <__swbuf_r+0xa0>)
 80067ac:	429c      	cmp	r4, r3
 80067ae:	bf08      	it	eq
 80067b0:	68ec      	ldreq	r4, [r5, #12]
 80067b2:	e7ca      	b.n	800674a <__swbuf_r+0x1a>
 80067b4:	4621      	mov	r1, r4
 80067b6:	4628      	mov	r0, r5
 80067b8:	f000 f80c 	bl	80067d4 <__swsetup_r>
 80067bc:	2800      	cmp	r0, #0
 80067be:	d0cb      	beq.n	8006758 <__swbuf_r+0x28>
 80067c0:	f04f 37ff 	mov.w	r7, #4294967295
 80067c4:	e7ea      	b.n	800679c <__swbuf_r+0x6c>
 80067c6:	bf00      	nop
 80067c8:	08008a2c 	.word	0x08008a2c
 80067cc:	08008a4c 	.word	0x08008a4c
 80067d0:	08008a0c 	.word	0x08008a0c

080067d4 <__swsetup_r>:
 80067d4:	4b32      	ldr	r3, [pc, #200]	; (80068a0 <__swsetup_r+0xcc>)
 80067d6:	b570      	push	{r4, r5, r6, lr}
 80067d8:	681d      	ldr	r5, [r3, #0]
 80067da:	4606      	mov	r6, r0
 80067dc:	460c      	mov	r4, r1
 80067de:	b125      	cbz	r5, 80067ea <__swsetup_r+0x16>
 80067e0:	69ab      	ldr	r3, [r5, #24]
 80067e2:	b913      	cbnz	r3, 80067ea <__swsetup_r+0x16>
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 fffb 	bl	80077e0 <__sinit>
 80067ea:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <__swsetup_r+0xd0>)
 80067ec:	429c      	cmp	r4, r3
 80067ee:	d10f      	bne.n	8006810 <__swsetup_r+0x3c>
 80067f0:	686c      	ldr	r4, [r5, #4]
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067f8:	0719      	lsls	r1, r3, #28
 80067fa:	d42c      	bmi.n	8006856 <__swsetup_r+0x82>
 80067fc:	06dd      	lsls	r5, r3, #27
 80067fe:	d411      	bmi.n	8006824 <__swsetup_r+0x50>
 8006800:	2309      	movs	r3, #9
 8006802:	6033      	str	r3, [r6, #0]
 8006804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	e03e      	b.n	800688e <__swsetup_r+0xba>
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <__swsetup_r+0xd4>)
 8006812:	429c      	cmp	r4, r3
 8006814:	d101      	bne.n	800681a <__swsetup_r+0x46>
 8006816:	68ac      	ldr	r4, [r5, #8]
 8006818:	e7eb      	b.n	80067f2 <__swsetup_r+0x1e>
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <__swsetup_r+0xd8>)
 800681c:	429c      	cmp	r4, r3
 800681e:	bf08      	it	eq
 8006820:	68ec      	ldreq	r4, [r5, #12]
 8006822:	e7e6      	b.n	80067f2 <__swsetup_r+0x1e>
 8006824:	0758      	lsls	r0, r3, #29
 8006826:	d512      	bpl.n	800684e <__swsetup_r+0x7a>
 8006828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800682a:	b141      	cbz	r1, 800683e <__swsetup_r+0x6a>
 800682c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006830:	4299      	cmp	r1, r3
 8006832:	d002      	beq.n	800683a <__swsetup_r+0x66>
 8006834:	4630      	mov	r0, r6
 8006836:	f001 fc91 	bl	800815c <_free_r>
 800683a:	2300      	movs	r3, #0
 800683c:	6363      	str	r3, [r4, #52]	; 0x34
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	2300      	movs	r3, #0
 8006848:	6063      	str	r3, [r4, #4]
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	f043 0308 	orr.w	r3, r3, #8
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	b94b      	cbnz	r3, 800686e <__swsetup_r+0x9a>
 800685a:	89a3      	ldrh	r3, [r4, #12]
 800685c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006864:	d003      	beq.n	800686e <__swsetup_r+0x9a>
 8006866:	4621      	mov	r1, r4
 8006868:	4630      	mov	r0, r6
 800686a:	f001 f883 	bl	8007974 <__smakebuf_r>
 800686e:	89a0      	ldrh	r0, [r4, #12]
 8006870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006874:	f010 0301 	ands.w	r3, r0, #1
 8006878:	d00a      	beq.n	8006890 <__swsetup_r+0xbc>
 800687a:	2300      	movs	r3, #0
 800687c:	60a3      	str	r3, [r4, #8]
 800687e:	6963      	ldr	r3, [r4, #20]
 8006880:	425b      	negs	r3, r3
 8006882:	61a3      	str	r3, [r4, #24]
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	b943      	cbnz	r3, 800689a <__swsetup_r+0xc6>
 8006888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800688c:	d1ba      	bne.n	8006804 <__swsetup_r+0x30>
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	0781      	lsls	r1, r0, #30
 8006892:	bf58      	it	pl
 8006894:	6963      	ldrpl	r3, [r4, #20]
 8006896:	60a3      	str	r3, [r4, #8]
 8006898:	e7f4      	b.n	8006884 <__swsetup_r+0xb0>
 800689a:	2000      	movs	r0, #0
 800689c:	e7f7      	b.n	800688e <__swsetup_r+0xba>
 800689e:	bf00      	nop
 80068a0:	20000018 	.word	0x20000018
 80068a4:	08008a2c 	.word	0x08008a2c
 80068a8:	08008a4c 	.word	0x08008a4c
 80068ac:	08008a0c 	.word	0x08008a0c

080068b0 <quorem>:
 80068b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	6903      	ldr	r3, [r0, #16]
 80068b6:	690c      	ldr	r4, [r1, #16]
 80068b8:	4607      	mov	r7, r0
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	f2c0 8083 	blt.w	80069c6 <quorem+0x116>
 80068c0:	3c01      	subs	r4, #1
 80068c2:	f100 0514 	add.w	r5, r0, #20
 80068c6:	f101 0814 	add.w	r8, r1, #20
 80068ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d8:	3301      	adds	r3, #1
 80068da:	429a      	cmp	r2, r3
 80068dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80068e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068e8:	d332      	bcc.n	8006950 <quorem+0xa0>
 80068ea:	f04f 0e00 	mov.w	lr, #0
 80068ee:	4640      	mov	r0, r8
 80068f0:	46ac      	mov	ip, r5
 80068f2:	46f2      	mov	sl, lr
 80068f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80068f8:	b293      	uxth	r3, r2
 80068fa:	fb06 e303 	mla	r3, r6, r3, lr
 80068fe:	0c12      	lsrs	r2, r2, #16
 8006900:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006904:	fb06 e202 	mla	r2, r6, r2, lr
 8006908:	b29b      	uxth	r3, r3
 800690a:	ebaa 0303 	sub.w	r3, sl, r3
 800690e:	f8dc a000 	ldr.w	sl, [ip]
 8006912:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006916:	fa1f fa8a 	uxth.w	sl, sl
 800691a:	4453      	add	r3, sl
 800691c:	fa1f fa82 	uxth.w	sl, r2
 8006920:	f8dc 2000 	ldr.w	r2, [ip]
 8006924:	4581      	cmp	r9, r0
 8006926:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800692a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800692e:	b29b      	uxth	r3, r3
 8006930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006934:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006938:	f84c 3b04 	str.w	r3, [ip], #4
 800693c:	d2da      	bcs.n	80068f4 <quorem+0x44>
 800693e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006942:	b92b      	cbnz	r3, 8006950 <quorem+0xa0>
 8006944:	9b01      	ldr	r3, [sp, #4]
 8006946:	3b04      	subs	r3, #4
 8006948:	429d      	cmp	r5, r3
 800694a:	461a      	mov	r2, r3
 800694c:	d32f      	bcc.n	80069ae <quorem+0xfe>
 800694e:	613c      	str	r4, [r7, #16]
 8006950:	4638      	mov	r0, r7
 8006952:	f001 faed 	bl	8007f30 <__mcmp>
 8006956:	2800      	cmp	r0, #0
 8006958:	db25      	blt.n	80069a6 <quorem+0xf6>
 800695a:	4628      	mov	r0, r5
 800695c:	f04f 0c00 	mov.w	ip, #0
 8006960:	3601      	adds	r6, #1
 8006962:	f858 1b04 	ldr.w	r1, [r8], #4
 8006966:	f8d0 e000 	ldr.w	lr, [r0]
 800696a:	b28b      	uxth	r3, r1
 800696c:	ebac 0303 	sub.w	r3, ip, r3
 8006970:	fa1f f28e 	uxth.w	r2, lr
 8006974:	4413      	add	r3, r2
 8006976:	0c0a      	lsrs	r2, r1, #16
 8006978:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800697c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006980:	b29b      	uxth	r3, r3
 8006982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006986:	45c1      	cmp	r9, r8
 8006988:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800698c:	f840 3b04 	str.w	r3, [r0], #4
 8006990:	d2e7      	bcs.n	8006962 <quorem+0xb2>
 8006992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800699a:	b922      	cbnz	r2, 80069a6 <quorem+0xf6>
 800699c:	3b04      	subs	r3, #4
 800699e:	429d      	cmp	r5, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	d30a      	bcc.n	80069ba <quorem+0x10a>
 80069a4:	613c      	str	r4, [r7, #16]
 80069a6:	4630      	mov	r0, r6
 80069a8:	b003      	add	sp, #12
 80069aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ae:	6812      	ldr	r2, [r2, #0]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	d1cb      	bne.n	800694e <quorem+0x9e>
 80069b6:	3c01      	subs	r4, #1
 80069b8:	e7c6      	b.n	8006948 <quorem+0x98>
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	3b04      	subs	r3, #4
 80069be:	2a00      	cmp	r2, #0
 80069c0:	d1f0      	bne.n	80069a4 <quorem+0xf4>
 80069c2:	3c01      	subs	r4, #1
 80069c4:	e7eb      	b.n	800699e <quorem+0xee>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e7ee      	b.n	80069a8 <quorem+0xf8>
 80069ca:	0000      	movs	r0, r0
 80069cc:	0000      	movs	r0, r0
	...

080069d0 <_dtoa_r>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	4616      	mov	r6, r2
 80069d6:	461f      	mov	r7, r3
 80069d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80069da:	b099      	sub	sp, #100	; 0x64
 80069dc:	4605      	mov	r5, r0
 80069de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80069e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80069e6:	b974      	cbnz	r4, 8006a06 <_dtoa_r+0x36>
 80069e8:	2010      	movs	r0, #16
 80069ea:	f001 f803 	bl	80079f4 <malloc>
 80069ee:	4602      	mov	r2, r0
 80069f0:	6268      	str	r0, [r5, #36]	; 0x24
 80069f2:	b920      	cbnz	r0, 80069fe <_dtoa_r+0x2e>
 80069f4:	21ea      	movs	r1, #234	; 0xea
 80069f6:	4bae      	ldr	r3, [pc, #696]	; (8006cb0 <_dtoa_r+0x2e0>)
 80069f8:	48ae      	ldr	r0, [pc, #696]	; (8006cb4 <_dtoa_r+0x2e4>)
 80069fa:	f001 fe13 	bl	8008624 <__assert_func>
 80069fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a02:	6004      	str	r4, [r0, #0]
 8006a04:	60c4      	str	r4, [r0, #12]
 8006a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a08:	6819      	ldr	r1, [r3, #0]
 8006a0a:	b151      	cbz	r1, 8006a22 <_dtoa_r+0x52>
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4093      	lsls	r3, r2
 8006a12:	604a      	str	r2, [r1, #4]
 8006a14:	608b      	str	r3, [r1, #8]
 8006a16:	4628      	mov	r0, r5
 8006a18:	f001 f850 	bl	8007abc <_Bfree>
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	1e3b      	subs	r3, r7, #0
 8006a24:	bfaf      	iteee	ge
 8006a26:	2300      	movge	r3, #0
 8006a28:	2201      	movlt	r2, #1
 8006a2a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a2e:	9305      	strlt	r3, [sp, #20]
 8006a30:	bfa8      	it	ge
 8006a32:	f8c8 3000 	strge.w	r3, [r8]
 8006a36:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006a3a:	4b9f      	ldr	r3, [pc, #636]	; (8006cb8 <_dtoa_r+0x2e8>)
 8006a3c:	bfb8      	it	lt
 8006a3e:	f8c8 2000 	strlt.w	r2, [r8]
 8006a42:	ea33 0309 	bics.w	r3, r3, r9
 8006a46:	d119      	bne.n	8006a7c <_dtoa_r+0xac>
 8006a48:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a54:	4333      	orrs	r3, r6
 8006a56:	f000 8580 	beq.w	800755a <_dtoa_r+0xb8a>
 8006a5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a5c:	b953      	cbnz	r3, 8006a74 <_dtoa_r+0xa4>
 8006a5e:	4b97      	ldr	r3, [pc, #604]	; (8006cbc <_dtoa_r+0x2ec>)
 8006a60:	e022      	b.n	8006aa8 <_dtoa_r+0xd8>
 8006a62:	4b97      	ldr	r3, [pc, #604]	; (8006cc0 <_dtoa_r+0x2f0>)
 8006a64:	9308      	str	r3, [sp, #32]
 8006a66:	3308      	adds	r3, #8
 8006a68:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	9808      	ldr	r0, [sp, #32]
 8006a6e:	b019      	add	sp, #100	; 0x64
 8006a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a74:	4b91      	ldr	r3, [pc, #580]	; (8006cbc <_dtoa_r+0x2ec>)
 8006a76:	9308      	str	r3, [sp, #32]
 8006a78:	3303      	adds	r3, #3
 8006a7a:	e7f5      	b.n	8006a68 <_dtoa_r+0x98>
 8006a7c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a80:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006a84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f7f9 ff8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006a90:	4680      	mov	r8, r0
 8006a92:	b158      	cbz	r0, 8006aac <_dtoa_r+0xdc>
 8006a94:	2301      	movs	r3, #1
 8006a96:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8559 	beq.w	8007554 <_dtoa_r+0xb84>
 8006aa2:	4888      	ldr	r0, [pc, #544]	; (8006cc4 <_dtoa_r+0x2f4>)
 8006aa4:	6018      	str	r0, [r3, #0]
 8006aa6:	1e43      	subs	r3, r0, #1
 8006aa8:	9308      	str	r3, [sp, #32]
 8006aaa:	e7df      	b.n	8006a6c <_dtoa_r+0x9c>
 8006aac:	ab16      	add	r3, sp, #88	; 0x58
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	ab17      	add	r3, sp, #92	; 0x5c
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006aba:	f001 fae5 	bl	8008088 <__d2b>
 8006abe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ac2:	4682      	mov	sl, r0
 8006ac4:	2c00      	cmp	r4, #0
 8006ac6:	d07e      	beq.n	8006bc6 <_dtoa_r+0x1f6>
 8006ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006acc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ace:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006ada:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006ade:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4b78      	ldr	r3, [pc, #480]	; (8006cc8 <_dtoa_r+0x2f8>)
 8006ae6:	f7f9 fb3f 	bl	8000168 <__aeabi_dsub>
 8006aea:	a36b      	add	r3, pc, #428	; (adr r3, 8006c98 <_dtoa_r+0x2c8>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fcf2 	bl	80004d8 <__aeabi_dmul>
 8006af4:	a36a      	add	r3, pc, #424	; (adr r3, 8006ca0 <_dtoa_r+0x2d0>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f7f9 fb37 	bl	800016c <__adddf3>
 8006afe:	4606      	mov	r6, r0
 8006b00:	4620      	mov	r0, r4
 8006b02:	460f      	mov	r7, r1
 8006b04:	f7f9 fc7e 	bl	8000404 <__aeabi_i2d>
 8006b08:	a367      	add	r3, pc, #412	; (adr r3, 8006ca8 <_dtoa_r+0x2d8>)
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f7f9 fce3 	bl	80004d8 <__aeabi_dmul>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fb27 	bl	800016c <__adddf3>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	460f      	mov	r7, r1
 8006b22:	f7f9 ff89 	bl	8000a38 <__aeabi_d2iz>
 8006b26:	2200      	movs	r2, #0
 8006b28:	4681      	mov	r9, r0
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	4639      	mov	r1, r7
 8006b30:	f7f9 ff44 	bl	80009bc <__aeabi_dcmplt>
 8006b34:	b148      	cbz	r0, 8006b4a <_dtoa_r+0x17a>
 8006b36:	4648      	mov	r0, r9
 8006b38:	f7f9 fc64 	bl	8000404 <__aeabi_i2d>
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	463b      	mov	r3, r7
 8006b40:	f7f9 ff32 	bl	80009a8 <__aeabi_dcmpeq>
 8006b44:	b908      	cbnz	r0, 8006b4a <_dtoa_r+0x17a>
 8006b46:	f109 39ff 	add.w	r9, r9, #4294967295
 8006b4a:	f1b9 0f16 	cmp.w	r9, #22
 8006b4e:	d857      	bhi.n	8006c00 <_dtoa_r+0x230>
 8006b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b54:	4b5d      	ldr	r3, [pc, #372]	; (8006ccc <_dtoa_r+0x2fc>)
 8006b56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 ff2d 	bl	80009bc <__aeabi_dcmplt>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d04e      	beq.n	8006c04 <_dtoa_r+0x234>
 8006b66:	2300      	movs	r3, #0
 8006b68:	f109 39ff 	add.w	r9, r9, #4294967295
 8006b6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b70:	1b1c      	subs	r4, r3, r4
 8006b72:	1e63      	subs	r3, r4, #1
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	bf49      	itett	mi
 8006b78:	f1c4 0301 	rsbmi	r3, r4, #1
 8006b7c:	2300      	movpl	r3, #0
 8006b7e:	9306      	strmi	r3, [sp, #24]
 8006b80:	2300      	movmi	r3, #0
 8006b82:	bf54      	ite	pl
 8006b84:	9306      	strpl	r3, [sp, #24]
 8006b86:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006b88:	f1b9 0f00 	cmp.w	r9, #0
 8006b8c:	db3c      	blt.n	8006c08 <_dtoa_r+0x238>
 8006b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b90:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b94:	444b      	add	r3, r9
 8006b96:	9309      	str	r3, [sp, #36]	; 0x24
 8006b98:	2300      	movs	r3, #0
 8006b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b9e:	2b09      	cmp	r3, #9
 8006ba0:	d86c      	bhi.n	8006c7c <_dtoa_r+0x2ac>
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	bfc4      	itt	gt
 8006ba6:	3b04      	subgt	r3, #4
 8006ba8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006baa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bac:	bfc8      	it	gt
 8006bae:	2400      	movgt	r4, #0
 8006bb0:	f1a3 0302 	sub.w	r3, r3, #2
 8006bb4:	bfd8      	it	le
 8006bb6:	2401      	movle	r4, #1
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	f200 808b 	bhi.w	8006cd4 <_dtoa_r+0x304>
 8006bbe:	e8df f003 	tbb	[pc, r3]
 8006bc2:	4f2d      	.short	0x4f2d
 8006bc4:	5b4d      	.short	0x5b4d
 8006bc6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006bca:	441c      	add	r4, r3
 8006bcc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	bfc3      	ittte	gt
 8006bd4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bd8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006bdc:	fa09 f303 	lslgt.w	r3, r9, r3
 8006be0:	f1c3 0320 	rsble	r3, r3, #32
 8006be4:	bfc6      	itte	gt
 8006be6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006bea:	4318      	orrgt	r0, r3
 8006bec:	fa06 f003 	lslle.w	r0, r6, r3
 8006bf0:	f7f9 fbf8 	bl	80003e4 <__aeabi_ui2d>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006bfa:	3c01      	subs	r4, #1
 8006bfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8006bfe:	e770      	b.n	8006ae2 <_dtoa_r+0x112>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e7b3      	b.n	8006b6c <_dtoa_r+0x19c>
 8006c04:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c06:	e7b2      	b.n	8006b6e <_dtoa_r+0x19e>
 8006c08:	9b06      	ldr	r3, [sp, #24]
 8006c0a:	eba3 0309 	sub.w	r3, r3, r9
 8006c0e:	9306      	str	r3, [sp, #24]
 8006c10:	f1c9 0300 	rsb	r3, r9, #0
 8006c14:	930a      	str	r3, [sp, #40]	; 0x28
 8006c16:	2300      	movs	r3, #0
 8006c18:	930e      	str	r3, [sp, #56]	; 0x38
 8006c1a:	e7bf      	b.n	8006b9c <_dtoa_r+0x1cc>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dc59      	bgt.n	8006cda <_dtoa_r+0x30a>
 8006c26:	f04f 0b01 	mov.w	fp, #1
 8006c2a:	465b      	mov	r3, fp
 8006c2c:	f8cd b008 	str.w	fp, [sp, #8]
 8006c30:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006c34:	2200      	movs	r2, #0
 8006c36:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006c38:	6042      	str	r2, [r0, #4]
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	f102 0614 	add.w	r6, r2, #20
 8006c40:	429e      	cmp	r6, r3
 8006c42:	6841      	ldr	r1, [r0, #4]
 8006c44:	d94f      	bls.n	8006ce6 <_dtoa_r+0x316>
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 fef8 	bl	8007a3c <_Balloc>
 8006c4c:	9008      	str	r0, [sp, #32]
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d14d      	bne.n	8006cee <_dtoa_r+0x31e>
 8006c52:	4602      	mov	r2, r0
 8006c54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c58:	4b1d      	ldr	r3, [pc, #116]	; (8006cd0 <_dtoa_r+0x300>)
 8006c5a:	e6cd      	b.n	80069f8 <_dtoa_r+0x28>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e7de      	b.n	8006c1e <_dtoa_r+0x24e>
 8006c60:	2300      	movs	r3, #0
 8006c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c66:	eb09 0b03 	add.w	fp, r9, r3
 8006c6a:	f10b 0301 	add.w	r3, fp, #1
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	9302      	str	r3, [sp, #8]
 8006c72:	bfb8      	it	lt
 8006c74:	2301      	movlt	r3, #1
 8006c76:	e7dd      	b.n	8006c34 <_dtoa_r+0x264>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e7f2      	b.n	8006c62 <_dtoa_r+0x292>
 8006c7c:	2401      	movs	r4, #1
 8006c7e:	2300      	movs	r3, #0
 8006c80:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c82:	9322      	str	r3, [sp, #136]	; 0x88
 8006c84:	f04f 3bff 	mov.w	fp, #4294967295
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2312      	movs	r3, #18
 8006c8c:	f8cd b008 	str.w	fp, [sp, #8]
 8006c90:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c92:	e7cf      	b.n	8006c34 <_dtoa_r+0x264>
 8006c94:	f3af 8000 	nop.w
 8006c98:	636f4361 	.word	0x636f4361
 8006c9c:	3fd287a7 	.word	0x3fd287a7
 8006ca0:	8b60c8b3 	.word	0x8b60c8b3
 8006ca4:	3fc68a28 	.word	0x3fc68a28
 8006ca8:	509f79fb 	.word	0x509f79fb
 8006cac:	3fd34413 	.word	0x3fd34413
 8006cb0:	08008985 	.word	0x08008985
 8006cb4:	0800899c 	.word	0x0800899c
 8006cb8:	7ff00000 	.word	0x7ff00000
 8006cbc:	08008981 	.word	0x08008981
 8006cc0:	08008978 	.word	0x08008978
 8006cc4:	08008955 	.word	0x08008955
 8006cc8:	3ff80000 	.word	0x3ff80000
 8006ccc:	08008af8 	.word	0x08008af8
 8006cd0:	080089fb 	.word	0x080089fb
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd8:	e7d4      	b.n	8006c84 <_dtoa_r+0x2b4>
 8006cda:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006cde:	465b      	mov	r3, fp
 8006ce0:	f8cd b008 	str.w	fp, [sp, #8]
 8006ce4:	e7a6      	b.n	8006c34 <_dtoa_r+0x264>
 8006ce6:	3101      	adds	r1, #1
 8006ce8:	6041      	str	r1, [r0, #4]
 8006cea:	0052      	lsls	r2, r2, #1
 8006cec:	e7a6      	b.n	8006c3c <_dtoa_r+0x26c>
 8006cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cf0:	9a08      	ldr	r2, [sp, #32]
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	9b02      	ldr	r3, [sp, #8]
 8006cf6:	2b0e      	cmp	r3, #14
 8006cf8:	f200 80a8 	bhi.w	8006e4c <_dtoa_r+0x47c>
 8006cfc:	2c00      	cmp	r4, #0
 8006cfe:	f000 80a5 	beq.w	8006e4c <_dtoa_r+0x47c>
 8006d02:	f1b9 0f00 	cmp.w	r9, #0
 8006d06:	dd34      	ble.n	8006d72 <_dtoa_r+0x3a2>
 8006d08:	4a9a      	ldr	r2, [pc, #616]	; (8006f74 <_dtoa_r+0x5a4>)
 8006d0a:	f009 030f 	and.w	r3, r9, #15
 8006d0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d12:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006d16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d1e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006d22:	d016      	beq.n	8006d52 <_dtoa_r+0x382>
 8006d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d28:	4b93      	ldr	r3, [pc, #588]	; (8006f78 <_dtoa_r+0x5a8>)
 8006d2a:	2703      	movs	r7, #3
 8006d2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d30:	f7f9 fcfc 	bl	800072c <__aeabi_ddiv>
 8006d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d38:	f004 040f 	and.w	r4, r4, #15
 8006d3c:	4e8e      	ldr	r6, [pc, #568]	; (8006f78 <_dtoa_r+0x5a8>)
 8006d3e:	b954      	cbnz	r4, 8006d56 <_dtoa_r+0x386>
 8006d40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d48:	f7f9 fcf0 	bl	800072c <__aeabi_ddiv>
 8006d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d50:	e029      	b.n	8006da6 <_dtoa_r+0x3d6>
 8006d52:	2702      	movs	r7, #2
 8006d54:	e7f2      	b.n	8006d3c <_dtoa_r+0x36c>
 8006d56:	07e1      	lsls	r1, r4, #31
 8006d58:	d508      	bpl.n	8006d6c <_dtoa_r+0x39c>
 8006d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d62:	f7f9 fbb9 	bl	80004d8 <__aeabi_dmul>
 8006d66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d6a:	3701      	adds	r7, #1
 8006d6c:	1064      	asrs	r4, r4, #1
 8006d6e:	3608      	adds	r6, #8
 8006d70:	e7e5      	b.n	8006d3e <_dtoa_r+0x36e>
 8006d72:	f000 80a5 	beq.w	8006ec0 <_dtoa_r+0x4f0>
 8006d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d7a:	f1c9 0400 	rsb	r4, r9, #0
 8006d7e:	4b7d      	ldr	r3, [pc, #500]	; (8006f74 <_dtoa_r+0x5a4>)
 8006d80:	f004 020f 	and.w	r2, r4, #15
 8006d84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fba4 	bl	80004d8 <__aeabi_dmul>
 8006d90:	2702      	movs	r7, #2
 8006d92:	2300      	movs	r3, #0
 8006d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d98:	4e77      	ldr	r6, [pc, #476]	; (8006f78 <_dtoa_r+0x5a8>)
 8006d9a:	1124      	asrs	r4, r4, #4
 8006d9c:	2c00      	cmp	r4, #0
 8006d9e:	f040 8084 	bne.w	8006eaa <_dtoa_r+0x4da>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1d2      	bne.n	8006d4c <_dtoa_r+0x37c>
 8006da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 808b 	beq.w	8006ec4 <_dtoa_r+0x4f4>
 8006dae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006db2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006db6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4b6f      	ldr	r3, [pc, #444]	; (8006f7c <_dtoa_r+0x5ac>)
 8006dbe:	f7f9 fdfd 	bl	80009bc <__aeabi_dcmplt>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d07e      	beq.n	8006ec4 <_dtoa_r+0x4f4>
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d07b      	beq.n	8006ec4 <_dtoa_r+0x4f4>
 8006dcc:	f1bb 0f00 	cmp.w	fp, #0
 8006dd0:	dd38      	ble.n	8006e44 <_dtoa_r+0x474>
 8006dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4b69      	ldr	r3, [pc, #420]	; (8006f80 <_dtoa_r+0x5b0>)
 8006dda:	f7f9 fb7d 	bl	80004d8 <__aeabi_dmul>
 8006dde:	465c      	mov	r4, fp
 8006de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006de4:	f109 38ff 	add.w	r8, r9, #4294967295
 8006de8:	3701      	adds	r7, #1
 8006dea:	4638      	mov	r0, r7
 8006dec:	f7f9 fb0a 	bl	8000404 <__aeabi_i2d>
 8006df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006df4:	f7f9 fb70 	bl	80004d8 <__aeabi_dmul>
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4b62      	ldr	r3, [pc, #392]	; (8006f84 <_dtoa_r+0x5b4>)
 8006dfc:	f7f9 f9b6 	bl	800016c <__adddf3>
 8006e00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006e04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e08:	9611      	str	r6, [sp, #68]	; 0x44
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	d15d      	bne.n	8006eca <_dtoa_r+0x4fa>
 8006e0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e12:	2200      	movs	r2, #0
 8006e14:	4b5c      	ldr	r3, [pc, #368]	; (8006f88 <_dtoa_r+0x5b8>)
 8006e16:	f7f9 f9a7 	bl	8000168 <__aeabi_dsub>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e22:	4633      	mov	r3, r6
 8006e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e26:	f7f9 fde7 	bl	80009f8 <__aeabi_dcmpgt>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	f040 829e 	bne.w	800736c <_dtoa_r+0x99c>
 8006e30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e3a:	f7f9 fdbf 	bl	80009bc <__aeabi_dcmplt>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f040 8292 	bne.w	8007368 <_dtoa_r+0x998>
 8006e44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006e48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f2c0 8153 	blt.w	80070fa <_dtoa_r+0x72a>
 8006e54:	f1b9 0f0e 	cmp.w	r9, #14
 8006e58:	f300 814f 	bgt.w	80070fa <_dtoa_r+0x72a>
 8006e5c:	4b45      	ldr	r3, [pc, #276]	; (8006f74 <_dtoa_r+0x5a4>)
 8006e5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006e62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f280 80db 	bge.w	8007028 <_dtoa_r+0x658>
 8006e72:	9b02      	ldr	r3, [sp, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f300 80d7 	bgt.w	8007028 <_dtoa_r+0x658>
 8006e7a:	f040 8274 	bne.w	8007366 <_dtoa_r+0x996>
 8006e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e82:	2200      	movs	r2, #0
 8006e84:	4b40      	ldr	r3, [pc, #256]	; (8006f88 <_dtoa_r+0x5b8>)
 8006e86:	f7f9 fb27 	bl	80004d8 <__aeabi_dmul>
 8006e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e8e:	f7f9 fda9 	bl	80009e4 <__aeabi_dcmpge>
 8006e92:	9c02      	ldr	r4, [sp, #8]
 8006e94:	4626      	mov	r6, r4
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f040 824a 	bne.w	8007330 <_dtoa_r+0x960>
 8006e9c:	2331      	movs	r3, #49	; 0x31
 8006e9e:	9f08      	ldr	r7, [sp, #32]
 8006ea0:	f109 0901 	add.w	r9, r9, #1
 8006ea4:	f807 3b01 	strb.w	r3, [r7], #1
 8006ea8:	e246      	b.n	8007338 <_dtoa_r+0x968>
 8006eaa:	07e2      	lsls	r2, r4, #31
 8006eac:	d505      	bpl.n	8006eba <_dtoa_r+0x4ea>
 8006eae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006eb2:	f7f9 fb11 	bl	80004d8 <__aeabi_dmul>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	3701      	adds	r7, #1
 8006eba:	1064      	asrs	r4, r4, #1
 8006ebc:	3608      	adds	r6, #8
 8006ebe:	e76d      	b.n	8006d9c <_dtoa_r+0x3cc>
 8006ec0:	2702      	movs	r7, #2
 8006ec2:	e770      	b.n	8006da6 <_dtoa_r+0x3d6>
 8006ec4:	46c8      	mov	r8, r9
 8006ec6:	9c02      	ldr	r4, [sp, #8]
 8006ec8:	e78f      	b.n	8006dea <_dtoa_r+0x41a>
 8006eca:	9908      	ldr	r1, [sp, #32]
 8006ecc:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <_dtoa_r+0x5a4>)
 8006ece:	4421      	add	r1, r4
 8006ed0:	9112      	str	r1, [sp, #72]	; 0x48
 8006ed2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ed4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ed8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006edc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	d055      	beq.n	8006f90 <_dtoa_r+0x5c0>
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	4929      	ldr	r1, [pc, #164]	; (8006f8c <_dtoa_r+0x5bc>)
 8006ee8:	f7f9 fc20 	bl	800072c <__aeabi_ddiv>
 8006eec:	463b      	mov	r3, r7
 8006eee:	4632      	mov	r2, r6
 8006ef0:	f7f9 f93a 	bl	8000168 <__aeabi_dsub>
 8006ef4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ef8:	9f08      	ldr	r7, [sp, #32]
 8006efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006efe:	f7f9 fd9b 	bl	8000a38 <__aeabi_d2iz>
 8006f02:	4604      	mov	r4, r0
 8006f04:	f7f9 fa7e 	bl	8000404 <__aeabi_i2d>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f10:	f7f9 f92a 	bl	8000168 <__aeabi_dsub>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	3430      	adds	r4, #48	; 0x30
 8006f1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f22:	f807 4b01 	strb.w	r4, [r7], #1
 8006f26:	f7f9 fd49 	bl	80009bc <__aeabi_dcmplt>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d174      	bne.n	8007018 <_dtoa_r+0x648>
 8006f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f32:	2000      	movs	r0, #0
 8006f34:	4911      	ldr	r1, [pc, #68]	; (8006f7c <_dtoa_r+0x5ac>)
 8006f36:	f7f9 f917 	bl	8000168 <__aeabi_dsub>
 8006f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f3e:	f7f9 fd3d 	bl	80009bc <__aeabi_dcmplt>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f040 80b6 	bne.w	80070b4 <_dtoa_r+0x6e4>
 8006f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f4a:	429f      	cmp	r7, r3
 8006f4c:	f43f af7a 	beq.w	8006e44 <_dtoa_r+0x474>
 8006f50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f54:	2200      	movs	r2, #0
 8006f56:	4b0a      	ldr	r3, [pc, #40]	; (8006f80 <_dtoa_r+0x5b0>)
 8006f58:	f7f9 fabe 	bl	80004d8 <__aeabi_dmul>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f66:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <_dtoa_r+0x5b0>)
 8006f68:	f7f9 fab6 	bl	80004d8 <__aeabi_dmul>
 8006f6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f70:	e7c3      	b.n	8006efa <_dtoa_r+0x52a>
 8006f72:	bf00      	nop
 8006f74:	08008af8 	.word	0x08008af8
 8006f78:	08008ad0 	.word	0x08008ad0
 8006f7c:	3ff00000 	.word	0x3ff00000
 8006f80:	40240000 	.word	0x40240000
 8006f84:	401c0000 	.word	0x401c0000
 8006f88:	40140000 	.word	0x40140000
 8006f8c:	3fe00000 	.word	0x3fe00000
 8006f90:	4630      	mov	r0, r6
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 faa0 	bl	80004d8 <__aeabi_dmul>
 8006f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f9e:	9c08      	ldr	r4, [sp, #32]
 8006fa0:	9314      	str	r3, [sp, #80]	; 0x50
 8006fa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fa6:	f7f9 fd47 	bl	8000a38 <__aeabi_d2iz>
 8006faa:	9015      	str	r0, [sp, #84]	; 0x54
 8006fac:	f7f9 fa2a 	bl	8000404 <__aeabi_i2d>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fb8:	f7f9 f8d6 	bl	8000168 <__aeabi_dsub>
 8006fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	3330      	adds	r3, #48	; 0x30
 8006fc2:	f804 3b01 	strb.w	r3, [r4], #1
 8006fc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fc8:	460f      	mov	r7, r1
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	d124      	bne.n	800701c <_dtoa_r+0x64c>
 8006fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fd6:	4bb3      	ldr	r3, [pc, #716]	; (80072a4 <_dtoa_r+0x8d4>)
 8006fd8:	f7f9 f8c8 	bl	800016c <__adddf3>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	f7f9 fd08 	bl	80009f8 <__aeabi_dcmpgt>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d162      	bne.n	80070b2 <_dtoa_r+0x6e2>
 8006fec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	49ac      	ldr	r1, [pc, #688]	; (80072a4 <_dtoa_r+0x8d4>)
 8006ff4:	f7f9 f8b8 	bl	8000168 <__aeabi_dsub>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7f9 fcdc 	bl	80009bc <__aeabi_dcmplt>
 8007004:	2800      	cmp	r0, #0
 8007006:	f43f af1d 	beq.w	8006e44 <_dtoa_r+0x474>
 800700a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800700c:	1e7b      	subs	r3, r7, #1
 800700e:	9314      	str	r3, [sp, #80]	; 0x50
 8007010:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007014:	2b30      	cmp	r3, #48	; 0x30
 8007016:	d0f8      	beq.n	800700a <_dtoa_r+0x63a>
 8007018:	46c1      	mov	r9, r8
 800701a:	e03a      	b.n	8007092 <_dtoa_r+0x6c2>
 800701c:	4ba2      	ldr	r3, [pc, #648]	; (80072a8 <_dtoa_r+0x8d8>)
 800701e:	f7f9 fa5b 	bl	80004d8 <__aeabi_dmul>
 8007022:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007026:	e7bc      	b.n	8006fa2 <_dtoa_r+0x5d2>
 8007028:	9f08      	ldr	r7, [sp, #32]
 800702a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800702e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007032:	f7f9 fb7b 	bl	800072c <__aeabi_ddiv>
 8007036:	f7f9 fcff 	bl	8000a38 <__aeabi_d2iz>
 800703a:	4604      	mov	r4, r0
 800703c:	f7f9 f9e2 	bl	8000404 <__aeabi_i2d>
 8007040:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007044:	f7f9 fa48 	bl	80004d8 <__aeabi_dmul>
 8007048:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800704c:	460b      	mov	r3, r1
 800704e:	4602      	mov	r2, r0
 8007050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007054:	f7f9 f888 	bl	8000168 <__aeabi_dsub>
 8007058:	f807 6b01 	strb.w	r6, [r7], #1
 800705c:	9e08      	ldr	r6, [sp, #32]
 800705e:	9b02      	ldr	r3, [sp, #8]
 8007060:	1bbe      	subs	r6, r7, r6
 8007062:	42b3      	cmp	r3, r6
 8007064:	d13a      	bne.n	80070dc <_dtoa_r+0x70c>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	f7f9 f87f 	bl	800016c <__adddf3>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800707a:	f7f9 fcbd 	bl	80009f8 <__aeabi_dcmpgt>
 800707e:	bb58      	cbnz	r0, 80070d8 <_dtoa_r+0x708>
 8007080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007088:	f7f9 fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800708c:	b108      	cbz	r0, 8007092 <_dtoa_r+0x6c2>
 800708e:	07e1      	lsls	r1, r4, #31
 8007090:	d422      	bmi.n	80070d8 <_dtoa_r+0x708>
 8007092:	4628      	mov	r0, r5
 8007094:	4651      	mov	r1, sl
 8007096:	f000 fd11 	bl	8007abc <_Bfree>
 800709a:	2300      	movs	r3, #0
 800709c:	703b      	strb	r3, [r7, #0]
 800709e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070a0:	f109 0001 	add.w	r0, r9, #1
 80070a4:	6018      	str	r0, [r3, #0]
 80070a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f43f acdf 	beq.w	8006a6c <_dtoa_r+0x9c>
 80070ae:	601f      	str	r7, [r3, #0]
 80070b0:	e4dc      	b.n	8006a6c <_dtoa_r+0x9c>
 80070b2:	4627      	mov	r7, r4
 80070b4:	463b      	mov	r3, r7
 80070b6:	461f      	mov	r7, r3
 80070b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070bc:	2a39      	cmp	r2, #57	; 0x39
 80070be:	d107      	bne.n	80070d0 <_dtoa_r+0x700>
 80070c0:	9a08      	ldr	r2, [sp, #32]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d1f7      	bne.n	80070b6 <_dtoa_r+0x6e6>
 80070c6:	2230      	movs	r2, #48	; 0x30
 80070c8:	9908      	ldr	r1, [sp, #32]
 80070ca:	f108 0801 	add.w	r8, r8, #1
 80070ce:	700a      	strb	r2, [r1, #0]
 80070d0:	781a      	ldrb	r2, [r3, #0]
 80070d2:	3201      	adds	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e79f      	b.n	8007018 <_dtoa_r+0x648>
 80070d8:	46c8      	mov	r8, r9
 80070da:	e7eb      	b.n	80070b4 <_dtoa_r+0x6e4>
 80070dc:	2200      	movs	r2, #0
 80070de:	4b72      	ldr	r3, [pc, #456]	; (80072a8 <_dtoa_r+0x8d8>)
 80070e0:	f7f9 f9fa 	bl	80004d8 <__aeabi_dmul>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070ec:	2200      	movs	r2, #0
 80070ee:	2300      	movs	r3, #0
 80070f0:	f7f9 fc5a 	bl	80009a8 <__aeabi_dcmpeq>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d098      	beq.n	800702a <_dtoa_r+0x65a>
 80070f8:	e7cb      	b.n	8007092 <_dtoa_r+0x6c2>
 80070fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070fc:	2a00      	cmp	r2, #0
 80070fe:	f000 80cd 	beq.w	800729c <_dtoa_r+0x8cc>
 8007102:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007104:	2a01      	cmp	r2, #1
 8007106:	f300 80af 	bgt.w	8007268 <_dtoa_r+0x898>
 800710a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800710c:	2a00      	cmp	r2, #0
 800710e:	f000 80a7 	beq.w	8007260 <_dtoa_r+0x890>
 8007112:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007116:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007118:	9f06      	ldr	r7, [sp, #24]
 800711a:	9a06      	ldr	r2, [sp, #24]
 800711c:	2101      	movs	r1, #1
 800711e:	441a      	add	r2, r3
 8007120:	9206      	str	r2, [sp, #24]
 8007122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007124:	4628      	mov	r0, r5
 8007126:	441a      	add	r2, r3
 8007128:	9209      	str	r2, [sp, #36]	; 0x24
 800712a:	f000 fd81 	bl	8007c30 <__i2b>
 800712e:	4606      	mov	r6, r0
 8007130:	2f00      	cmp	r7, #0
 8007132:	dd0c      	ble.n	800714e <_dtoa_r+0x77e>
 8007134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd09      	ble.n	800714e <_dtoa_r+0x77e>
 800713a:	42bb      	cmp	r3, r7
 800713c:	bfa8      	it	ge
 800713e:	463b      	movge	r3, r7
 8007140:	9a06      	ldr	r2, [sp, #24]
 8007142:	1aff      	subs	r7, r7, r3
 8007144:	1ad2      	subs	r2, r2, r3
 8007146:	9206      	str	r2, [sp, #24]
 8007148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	9309      	str	r3, [sp, #36]	; 0x24
 800714e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007150:	b1f3      	cbz	r3, 8007190 <_dtoa_r+0x7c0>
 8007152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80a9 	beq.w	80072ac <_dtoa_r+0x8dc>
 800715a:	2c00      	cmp	r4, #0
 800715c:	dd10      	ble.n	8007180 <_dtoa_r+0x7b0>
 800715e:	4631      	mov	r1, r6
 8007160:	4622      	mov	r2, r4
 8007162:	4628      	mov	r0, r5
 8007164:	f000 fe1e 	bl	8007da4 <__pow5mult>
 8007168:	4652      	mov	r2, sl
 800716a:	4601      	mov	r1, r0
 800716c:	4606      	mov	r6, r0
 800716e:	4628      	mov	r0, r5
 8007170:	f000 fd74 	bl	8007c5c <__multiply>
 8007174:	4680      	mov	r8, r0
 8007176:	4651      	mov	r1, sl
 8007178:	4628      	mov	r0, r5
 800717a:	f000 fc9f 	bl	8007abc <_Bfree>
 800717e:	46c2      	mov	sl, r8
 8007180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007182:	1b1a      	subs	r2, r3, r4
 8007184:	d004      	beq.n	8007190 <_dtoa_r+0x7c0>
 8007186:	4651      	mov	r1, sl
 8007188:	4628      	mov	r0, r5
 800718a:	f000 fe0b 	bl	8007da4 <__pow5mult>
 800718e:	4682      	mov	sl, r0
 8007190:	2101      	movs	r1, #1
 8007192:	4628      	mov	r0, r5
 8007194:	f000 fd4c 	bl	8007c30 <__i2b>
 8007198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800719a:	4604      	mov	r4, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	f340 8087 	ble.w	80072b0 <_dtoa_r+0x8e0>
 80071a2:	461a      	mov	r2, r3
 80071a4:	4601      	mov	r1, r0
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 fdfc 	bl	8007da4 <__pow5mult>
 80071ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ae:	4604      	mov	r4, r0
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f340 8080 	ble.w	80072b6 <_dtoa_r+0x8e6>
 80071b6:	f04f 0800 	mov.w	r8, #0
 80071ba:	6923      	ldr	r3, [r4, #16]
 80071bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071c0:	6918      	ldr	r0, [r3, #16]
 80071c2:	f000 fce7 	bl	8007b94 <__hi0bits>
 80071c6:	f1c0 0020 	rsb	r0, r0, #32
 80071ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071cc:	4418      	add	r0, r3
 80071ce:	f010 001f 	ands.w	r0, r0, #31
 80071d2:	f000 8092 	beq.w	80072fa <_dtoa_r+0x92a>
 80071d6:	f1c0 0320 	rsb	r3, r0, #32
 80071da:	2b04      	cmp	r3, #4
 80071dc:	f340 808a 	ble.w	80072f4 <_dtoa_r+0x924>
 80071e0:	f1c0 001c 	rsb	r0, r0, #28
 80071e4:	9b06      	ldr	r3, [sp, #24]
 80071e6:	4407      	add	r7, r0
 80071e8:	4403      	add	r3, r0
 80071ea:	9306      	str	r3, [sp, #24]
 80071ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ee:	4403      	add	r3, r0
 80071f0:	9309      	str	r3, [sp, #36]	; 0x24
 80071f2:	9b06      	ldr	r3, [sp, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	dd05      	ble.n	8007204 <_dtoa_r+0x834>
 80071f8:	4651      	mov	r1, sl
 80071fa:	461a      	mov	r2, r3
 80071fc:	4628      	mov	r0, r5
 80071fe:	f000 fe2b 	bl	8007e58 <__lshift>
 8007202:	4682      	mov	sl, r0
 8007204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007206:	2b00      	cmp	r3, #0
 8007208:	dd05      	ble.n	8007216 <_dtoa_r+0x846>
 800720a:	4621      	mov	r1, r4
 800720c:	461a      	mov	r2, r3
 800720e:	4628      	mov	r0, r5
 8007210:	f000 fe22 	bl	8007e58 <__lshift>
 8007214:	4604      	mov	r4, r0
 8007216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d070      	beq.n	80072fe <_dtoa_r+0x92e>
 800721c:	4621      	mov	r1, r4
 800721e:	4650      	mov	r0, sl
 8007220:	f000 fe86 	bl	8007f30 <__mcmp>
 8007224:	2800      	cmp	r0, #0
 8007226:	da6a      	bge.n	80072fe <_dtoa_r+0x92e>
 8007228:	2300      	movs	r3, #0
 800722a:	4651      	mov	r1, sl
 800722c:	220a      	movs	r2, #10
 800722e:	4628      	mov	r0, r5
 8007230:	f000 fc66 	bl	8007b00 <__multadd>
 8007234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007236:	4682      	mov	sl, r0
 8007238:	f109 39ff 	add.w	r9, r9, #4294967295
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 8193 	beq.w	8007568 <_dtoa_r+0xb98>
 8007242:	4631      	mov	r1, r6
 8007244:	2300      	movs	r3, #0
 8007246:	220a      	movs	r2, #10
 8007248:	4628      	mov	r0, r5
 800724a:	f000 fc59 	bl	8007b00 <__multadd>
 800724e:	f1bb 0f00 	cmp.w	fp, #0
 8007252:	4606      	mov	r6, r0
 8007254:	f300 8093 	bgt.w	800737e <_dtoa_r+0x9ae>
 8007258:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800725a:	2b02      	cmp	r3, #2
 800725c:	dc57      	bgt.n	800730e <_dtoa_r+0x93e>
 800725e:	e08e      	b.n	800737e <_dtoa_r+0x9ae>
 8007260:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007262:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007266:	e756      	b.n	8007116 <_dtoa_r+0x746>
 8007268:	9b02      	ldr	r3, [sp, #8]
 800726a:	1e5c      	subs	r4, r3, #1
 800726c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800726e:	42a3      	cmp	r3, r4
 8007270:	bfb7      	itett	lt
 8007272:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007274:	1b1c      	subge	r4, r3, r4
 8007276:	1ae2      	sublt	r2, r4, r3
 8007278:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800727a:	bfbe      	ittt	lt
 800727c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800727e:	189b      	addlt	r3, r3, r2
 8007280:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007282:	9b02      	ldr	r3, [sp, #8]
 8007284:	bfb8      	it	lt
 8007286:	2400      	movlt	r4, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	bfbb      	ittet	lt
 800728c:	9b06      	ldrlt	r3, [sp, #24]
 800728e:	9a02      	ldrlt	r2, [sp, #8]
 8007290:	9f06      	ldrge	r7, [sp, #24]
 8007292:	1a9f      	sublt	r7, r3, r2
 8007294:	bfac      	ite	ge
 8007296:	9b02      	ldrge	r3, [sp, #8]
 8007298:	2300      	movlt	r3, #0
 800729a:	e73e      	b.n	800711a <_dtoa_r+0x74a>
 800729c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800729e:	9f06      	ldr	r7, [sp, #24]
 80072a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80072a2:	e745      	b.n	8007130 <_dtoa_r+0x760>
 80072a4:	3fe00000 	.word	0x3fe00000
 80072a8:	40240000 	.word	0x40240000
 80072ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ae:	e76a      	b.n	8007186 <_dtoa_r+0x7b6>
 80072b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	dc19      	bgt.n	80072ea <_dtoa_r+0x91a>
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	b9bb      	cbnz	r3, 80072ea <_dtoa_r+0x91a>
 80072ba:	9b05      	ldr	r3, [sp, #20]
 80072bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072c0:	b99b      	cbnz	r3, 80072ea <_dtoa_r+0x91a>
 80072c2:	9b05      	ldr	r3, [sp, #20]
 80072c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072c8:	0d1b      	lsrs	r3, r3, #20
 80072ca:	051b      	lsls	r3, r3, #20
 80072cc:	b183      	cbz	r3, 80072f0 <_dtoa_r+0x920>
 80072ce:	f04f 0801 	mov.w	r8, #1
 80072d2:	9b06      	ldr	r3, [sp, #24]
 80072d4:	3301      	adds	r3, #1
 80072d6:	9306      	str	r3, [sp, #24]
 80072d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072da:	3301      	adds	r3, #1
 80072dc:	9309      	str	r3, [sp, #36]	; 0x24
 80072de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f af6a 	bne.w	80071ba <_dtoa_r+0x7ea>
 80072e6:	2001      	movs	r0, #1
 80072e8:	e76f      	b.n	80071ca <_dtoa_r+0x7fa>
 80072ea:	f04f 0800 	mov.w	r8, #0
 80072ee:	e7f6      	b.n	80072de <_dtoa_r+0x90e>
 80072f0:	4698      	mov	r8, r3
 80072f2:	e7f4      	b.n	80072de <_dtoa_r+0x90e>
 80072f4:	f43f af7d 	beq.w	80071f2 <_dtoa_r+0x822>
 80072f8:	4618      	mov	r0, r3
 80072fa:	301c      	adds	r0, #28
 80072fc:	e772      	b.n	80071e4 <_dtoa_r+0x814>
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc36      	bgt.n	8007372 <_dtoa_r+0x9a2>
 8007304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007306:	2b02      	cmp	r3, #2
 8007308:	dd33      	ble.n	8007372 <_dtoa_r+0x9a2>
 800730a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800730e:	f1bb 0f00 	cmp.w	fp, #0
 8007312:	d10d      	bne.n	8007330 <_dtoa_r+0x960>
 8007314:	4621      	mov	r1, r4
 8007316:	465b      	mov	r3, fp
 8007318:	2205      	movs	r2, #5
 800731a:	4628      	mov	r0, r5
 800731c:	f000 fbf0 	bl	8007b00 <__multadd>
 8007320:	4601      	mov	r1, r0
 8007322:	4604      	mov	r4, r0
 8007324:	4650      	mov	r0, sl
 8007326:	f000 fe03 	bl	8007f30 <__mcmp>
 800732a:	2800      	cmp	r0, #0
 800732c:	f73f adb6 	bgt.w	8006e9c <_dtoa_r+0x4cc>
 8007330:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007332:	9f08      	ldr	r7, [sp, #32]
 8007334:	ea6f 0903 	mvn.w	r9, r3
 8007338:	f04f 0800 	mov.w	r8, #0
 800733c:	4621      	mov	r1, r4
 800733e:	4628      	mov	r0, r5
 8007340:	f000 fbbc 	bl	8007abc <_Bfree>
 8007344:	2e00      	cmp	r6, #0
 8007346:	f43f aea4 	beq.w	8007092 <_dtoa_r+0x6c2>
 800734a:	f1b8 0f00 	cmp.w	r8, #0
 800734e:	d005      	beq.n	800735c <_dtoa_r+0x98c>
 8007350:	45b0      	cmp	r8, r6
 8007352:	d003      	beq.n	800735c <_dtoa_r+0x98c>
 8007354:	4641      	mov	r1, r8
 8007356:	4628      	mov	r0, r5
 8007358:	f000 fbb0 	bl	8007abc <_Bfree>
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	f000 fbac 	bl	8007abc <_Bfree>
 8007364:	e695      	b.n	8007092 <_dtoa_r+0x6c2>
 8007366:	2400      	movs	r4, #0
 8007368:	4626      	mov	r6, r4
 800736a:	e7e1      	b.n	8007330 <_dtoa_r+0x960>
 800736c:	46c1      	mov	r9, r8
 800736e:	4626      	mov	r6, r4
 8007370:	e594      	b.n	8006e9c <_dtoa_r+0x4cc>
 8007372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007374:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 80fc 	beq.w	8007576 <_dtoa_r+0xba6>
 800737e:	2f00      	cmp	r7, #0
 8007380:	dd05      	ble.n	800738e <_dtoa_r+0x9be>
 8007382:	4631      	mov	r1, r6
 8007384:	463a      	mov	r2, r7
 8007386:	4628      	mov	r0, r5
 8007388:	f000 fd66 	bl	8007e58 <__lshift>
 800738c:	4606      	mov	r6, r0
 800738e:	f1b8 0f00 	cmp.w	r8, #0
 8007392:	d05c      	beq.n	800744e <_dtoa_r+0xa7e>
 8007394:	4628      	mov	r0, r5
 8007396:	6871      	ldr	r1, [r6, #4]
 8007398:	f000 fb50 	bl	8007a3c <_Balloc>
 800739c:	4607      	mov	r7, r0
 800739e:	b928      	cbnz	r0, 80073ac <_dtoa_r+0x9dc>
 80073a0:	4602      	mov	r2, r0
 80073a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073a6:	4b7e      	ldr	r3, [pc, #504]	; (80075a0 <_dtoa_r+0xbd0>)
 80073a8:	f7ff bb26 	b.w	80069f8 <_dtoa_r+0x28>
 80073ac:	6932      	ldr	r2, [r6, #16]
 80073ae:	f106 010c 	add.w	r1, r6, #12
 80073b2:	3202      	adds	r2, #2
 80073b4:	0092      	lsls	r2, r2, #2
 80073b6:	300c      	adds	r0, #12
 80073b8:	f000 fb32 	bl	8007a20 <memcpy>
 80073bc:	2201      	movs	r2, #1
 80073be:	4639      	mov	r1, r7
 80073c0:	4628      	mov	r0, r5
 80073c2:	f000 fd49 	bl	8007e58 <__lshift>
 80073c6:	46b0      	mov	r8, r6
 80073c8:	4606      	mov	r6, r0
 80073ca:	9b08      	ldr	r3, [sp, #32]
 80073cc:	3301      	adds	r3, #1
 80073ce:	9302      	str	r3, [sp, #8]
 80073d0:	9b08      	ldr	r3, [sp, #32]
 80073d2:	445b      	add	r3, fp
 80073d4:	930a      	str	r3, [sp, #40]	; 0x28
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	9309      	str	r3, [sp, #36]	; 0x24
 80073de:	9b02      	ldr	r3, [sp, #8]
 80073e0:	4621      	mov	r1, r4
 80073e2:	4650      	mov	r0, sl
 80073e4:	f103 3bff 	add.w	fp, r3, #4294967295
 80073e8:	f7ff fa62 	bl	80068b0 <quorem>
 80073ec:	4603      	mov	r3, r0
 80073ee:	4641      	mov	r1, r8
 80073f0:	3330      	adds	r3, #48	; 0x30
 80073f2:	9004      	str	r0, [sp, #16]
 80073f4:	4650      	mov	r0, sl
 80073f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073f8:	f000 fd9a 	bl	8007f30 <__mcmp>
 80073fc:	4632      	mov	r2, r6
 80073fe:	9006      	str	r0, [sp, #24]
 8007400:	4621      	mov	r1, r4
 8007402:	4628      	mov	r0, r5
 8007404:	f000 fdb0 	bl	8007f68 <__mdiff>
 8007408:	68c2      	ldr	r2, [r0, #12]
 800740a:	4607      	mov	r7, r0
 800740c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800740e:	bb02      	cbnz	r2, 8007452 <_dtoa_r+0xa82>
 8007410:	4601      	mov	r1, r0
 8007412:	4650      	mov	r0, sl
 8007414:	f000 fd8c 	bl	8007f30 <__mcmp>
 8007418:	4602      	mov	r2, r0
 800741a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741c:	4639      	mov	r1, r7
 800741e:	4628      	mov	r0, r5
 8007420:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007424:	f000 fb4a 	bl	8007abc <_Bfree>
 8007428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800742a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800742c:	9f02      	ldr	r7, [sp, #8]
 800742e:	ea43 0102 	orr.w	r1, r3, r2
 8007432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007434:	430b      	orrs	r3, r1
 8007436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007438:	d10d      	bne.n	8007456 <_dtoa_r+0xa86>
 800743a:	2b39      	cmp	r3, #57	; 0x39
 800743c:	d027      	beq.n	800748e <_dtoa_r+0xabe>
 800743e:	9a06      	ldr	r2, [sp, #24]
 8007440:	2a00      	cmp	r2, #0
 8007442:	dd01      	ble.n	8007448 <_dtoa_r+0xa78>
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	3331      	adds	r3, #49	; 0x31
 8007448:	f88b 3000 	strb.w	r3, [fp]
 800744c:	e776      	b.n	800733c <_dtoa_r+0x96c>
 800744e:	4630      	mov	r0, r6
 8007450:	e7b9      	b.n	80073c6 <_dtoa_r+0x9f6>
 8007452:	2201      	movs	r2, #1
 8007454:	e7e2      	b.n	800741c <_dtoa_r+0xa4c>
 8007456:	9906      	ldr	r1, [sp, #24]
 8007458:	2900      	cmp	r1, #0
 800745a:	db04      	blt.n	8007466 <_dtoa_r+0xa96>
 800745c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800745e:	4301      	orrs	r1, r0
 8007460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007462:	4301      	orrs	r1, r0
 8007464:	d120      	bne.n	80074a8 <_dtoa_r+0xad8>
 8007466:	2a00      	cmp	r2, #0
 8007468:	ddee      	ble.n	8007448 <_dtoa_r+0xa78>
 800746a:	4651      	mov	r1, sl
 800746c:	2201      	movs	r2, #1
 800746e:	4628      	mov	r0, r5
 8007470:	9302      	str	r3, [sp, #8]
 8007472:	f000 fcf1 	bl	8007e58 <__lshift>
 8007476:	4621      	mov	r1, r4
 8007478:	4682      	mov	sl, r0
 800747a:	f000 fd59 	bl	8007f30 <__mcmp>
 800747e:	2800      	cmp	r0, #0
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	dc02      	bgt.n	800748a <_dtoa_r+0xaba>
 8007484:	d1e0      	bne.n	8007448 <_dtoa_r+0xa78>
 8007486:	07da      	lsls	r2, r3, #31
 8007488:	d5de      	bpl.n	8007448 <_dtoa_r+0xa78>
 800748a:	2b39      	cmp	r3, #57	; 0x39
 800748c:	d1da      	bne.n	8007444 <_dtoa_r+0xa74>
 800748e:	2339      	movs	r3, #57	; 0x39
 8007490:	f88b 3000 	strb.w	r3, [fp]
 8007494:	463b      	mov	r3, r7
 8007496:	461f      	mov	r7, r3
 8007498:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800749c:	3b01      	subs	r3, #1
 800749e:	2a39      	cmp	r2, #57	; 0x39
 80074a0:	d050      	beq.n	8007544 <_dtoa_r+0xb74>
 80074a2:	3201      	adds	r2, #1
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	e749      	b.n	800733c <_dtoa_r+0x96c>
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	dd03      	ble.n	80074b4 <_dtoa_r+0xae4>
 80074ac:	2b39      	cmp	r3, #57	; 0x39
 80074ae:	d0ee      	beq.n	800748e <_dtoa_r+0xabe>
 80074b0:	3301      	adds	r3, #1
 80074b2:	e7c9      	b.n	8007448 <_dtoa_r+0xa78>
 80074b4:	9a02      	ldr	r2, [sp, #8]
 80074b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80074bc:	428a      	cmp	r2, r1
 80074be:	d02a      	beq.n	8007516 <_dtoa_r+0xb46>
 80074c0:	4651      	mov	r1, sl
 80074c2:	2300      	movs	r3, #0
 80074c4:	220a      	movs	r2, #10
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 fb1a 	bl	8007b00 <__multadd>
 80074cc:	45b0      	cmp	r8, r6
 80074ce:	4682      	mov	sl, r0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	f04f 020a 	mov.w	r2, #10
 80074d8:	4641      	mov	r1, r8
 80074da:	4628      	mov	r0, r5
 80074dc:	d107      	bne.n	80074ee <_dtoa_r+0xb1e>
 80074de:	f000 fb0f 	bl	8007b00 <__multadd>
 80074e2:	4680      	mov	r8, r0
 80074e4:	4606      	mov	r6, r0
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	3301      	adds	r3, #1
 80074ea:	9302      	str	r3, [sp, #8]
 80074ec:	e777      	b.n	80073de <_dtoa_r+0xa0e>
 80074ee:	f000 fb07 	bl	8007b00 <__multadd>
 80074f2:	4631      	mov	r1, r6
 80074f4:	4680      	mov	r8, r0
 80074f6:	2300      	movs	r3, #0
 80074f8:	220a      	movs	r2, #10
 80074fa:	4628      	mov	r0, r5
 80074fc:	f000 fb00 	bl	8007b00 <__multadd>
 8007500:	4606      	mov	r6, r0
 8007502:	e7f0      	b.n	80074e6 <_dtoa_r+0xb16>
 8007504:	f1bb 0f00 	cmp.w	fp, #0
 8007508:	bfcc      	ite	gt
 800750a:	465f      	movgt	r7, fp
 800750c:	2701      	movle	r7, #1
 800750e:	f04f 0800 	mov.w	r8, #0
 8007512:	9a08      	ldr	r2, [sp, #32]
 8007514:	4417      	add	r7, r2
 8007516:	4651      	mov	r1, sl
 8007518:	2201      	movs	r2, #1
 800751a:	4628      	mov	r0, r5
 800751c:	9302      	str	r3, [sp, #8]
 800751e:	f000 fc9b 	bl	8007e58 <__lshift>
 8007522:	4621      	mov	r1, r4
 8007524:	4682      	mov	sl, r0
 8007526:	f000 fd03 	bl	8007f30 <__mcmp>
 800752a:	2800      	cmp	r0, #0
 800752c:	dcb2      	bgt.n	8007494 <_dtoa_r+0xac4>
 800752e:	d102      	bne.n	8007536 <_dtoa_r+0xb66>
 8007530:	9b02      	ldr	r3, [sp, #8]
 8007532:	07db      	lsls	r3, r3, #31
 8007534:	d4ae      	bmi.n	8007494 <_dtoa_r+0xac4>
 8007536:	463b      	mov	r3, r7
 8007538:	461f      	mov	r7, r3
 800753a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800753e:	2a30      	cmp	r2, #48	; 0x30
 8007540:	d0fa      	beq.n	8007538 <_dtoa_r+0xb68>
 8007542:	e6fb      	b.n	800733c <_dtoa_r+0x96c>
 8007544:	9a08      	ldr	r2, [sp, #32]
 8007546:	429a      	cmp	r2, r3
 8007548:	d1a5      	bne.n	8007496 <_dtoa_r+0xac6>
 800754a:	2331      	movs	r3, #49	; 0x31
 800754c:	f109 0901 	add.w	r9, r9, #1
 8007550:	7013      	strb	r3, [r2, #0]
 8007552:	e6f3      	b.n	800733c <_dtoa_r+0x96c>
 8007554:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <_dtoa_r+0xbd4>)
 8007556:	f7ff baa7 	b.w	8006aa8 <_dtoa_r+0xd8>
 800755a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800755c:	2b00      	cmp	r3, #0
 800755e:	f47f aa80 	bne.w	8006a62 <_dtoa_r+0x92>
 8007562:	4b11      	ldr	r3, [pc, #68]	; (80075a8 <_dtoa_r+0xbd8>)
 8007564:	f7ff baa0 	b.w	8006aa8 <_dtoa_r+0xd8>
 8007568:	f1bb 0f00 	cmp.w	fp, #0
 800756c:	dc03      	bgt.n	8007576 <_dtoa_r+0xba6>
 800756e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007570:	2b02      	cmp	r3, #2
 8007572:	f73f aecc 	bgt.w	800730e <_dtoa_r+0x93e>
 8007576:	9f08      	ldr	r7, [sp, #32]
 8007578:	4621      	mov	r1, r4
 800757a:	4650      	mov	r0, sl
 800757c:	f7ff f998 	bl	80068b0 <quorem>
 8007580:	9a08      	ldr	r2, [sp, #32]
 8007582:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007586:	f807 3b01 	strb.w	r3, [r7], #1
 800758a:	1aba      	subs	r2, r7, r2
 800758c:	4593      	cmp	fp, r2
 800758e:	ddb9      	ble.n	8007504 <_dtoa_r+0xb34>
 8007590:	4651      	mov	r1, sl
 8007592:	2300      	movs	r3, #0
 8007594:	220a      	movs	r2, #10
 8007596:	4628      	mov	r0, r5
 8007598:	f000 fab2 	bl	8007b00 <__multadd>
 800759c:	4682      	mov	sl, r0
 800759e:	e7eb      	b.n	8007578 <_dtoa_r+0xba8>
 80075a0:	080089fb 	.word	0x080089fb
 80075a4:	08008954 	.word	0x08008954
 80075a8:	08008978 	.word	0x08008978

080075ac <__sflush_r>:
 80075ac:	898a      	ldrh	r2, [r1, #12]
 80075ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b2:	4605      	mov	r5, r0
 80075b4:	0710      	lsls	r0, r2, #28
 80075b6:	460c      	mov	r4, r1
 80075b8:	d458      	bmi.n	800766c <__sflush_r+0xc0>
 80075ba:	684b      	ldr	r3, [r1, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dc05      	bgt.n	80075cc <__sflush_r+0x20>
 80075c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dc02      	bgt.n	80075cc <__sflush_r+0x20>
 80075c6:	2000      	movs	r0, #0
 80075c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ce:	2e00      	cmp	r6, #0
 80075d0:	d0f9      	beq.n	80075c6 <__sflush_r+0x1a>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075d8:	682f      	ldr	r7, [r5, #0]
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	d032      	beq.n	8007644 <__sflush_r+0x98>
 80075de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	075a      	lsls	r2, r3, #29
 80075e4:	d505      	bpl.n	80075f2 <__sflush_r+0x46>
 80075e6:	6863      	ldr	r3, [r4, #4]
 80075e8:	1ac0      	subs	r0, r0, r3
 80075ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075ec:	b10b      	cbz	r3, 80075f2 <__sflush_r+0x46>
 80075ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075f0:	1ac0      	subs	r0, r0, r3
 80075f2:	2300      	movs	r3, #0
 80075f4:	4602      	mov	r2, r0
 80075f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f8:	4628      	mov	r0, r5
 80075fa:	6a21      	ldr	r1, [r4, #32]
 80075fc:	47b0      	blx	r6
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	d106      	bne.n	8007612 <__sflush_r+0x66>
 8007604:	6829      	ldr	r1, [r5, #0]
 8007606:	291d      	cmp	r1, #29
 8007608:	d82c      	bhi.n	8007664 <__sflush_r+0xb8>
 800760a:	4a2a      	ldr	r2, [pc, #168]	; (80076b4 <__sflush_r+0x108>)
 800760c:	40ca      	lsrs	r2, r1
 800760e:	07d6      	lsls	r6, r2, #31
 8007610:	d528      	bpl.n	8007664 <__sflush_r+0xb8>
 8007612:	2200      	movs	r2, #0
 8007614:	6062      	str	r2, [r4, #4]
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	04d9      	lsls	r1, r3, #19
 800761a:	6022      	str	r2, [r4, #0]
 800761c:	d504      	bpl.n	8007628 <__sflush_r+0x7c>
 800761e:	1c42      	adds	r2, r0, #1
 8007620:	d101      	bne.n	8007626 <__sflush_r+0x7a>
 8007622:	682b      	ldr	r3, [r5, #0]
 8007624:	b903      	cbnz	r3, 8007628 <__sflush_r+0x7c>
 8007626:	6560      	str	r0, [r4, #84]	; 0x54
 8007628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800762a:	602f      	str	r7, [r5, #0]
 800762c:	2900      	cmp	r1, #0
 800762e:	d0ca      	beq.n	80075c6 <__sflush_r+0x1a>
 8007630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007634:	4299      	cmp	r1, r3
 8007636:	d002      	beq.n	800763e <__sflush_r+0x92>
 8007638:	4628      	mov	r0, r5
 800763a:	f000 fd8f 	bl	800815c <_free_r>
 800763e:	2000      	movs	r0, #0
 8007640:	6360      	str	r0, [r4, #52]	; 0x34
 8007642:	e7c1      	b.n	80075c8 <__sflush_r+0x1c>
 8007644:	6a21      	ldr	r1, [r4, #32]
 8007646:	2301      	movs	r3, #1
 8007648:	4628      	mov	r0, r5
 800764a:	47b0      	blx	r6
 800764c:	1c41      	adds	r1, r0, #1
 800764e:	d1c7      	bne.n	80075e0 <__sflush_r+0x34>
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0c4      	beq.n	80075e0 <__sflush_r+0x34>
 8007656:	2b1d      	cmp	r3, #29
 8007658:	d001      	beq.n	800765e <__sflush_r+0xb2>
 800765a:	2b16      	cmp	r3, #22
 800765c:	d101      	bne.n	8007662 <__sflush_r+0xb6>
 800765e:	602f      	str	r7, [r5, #0]
 8007660:	e7b1      	b.n	80075c6 <__sflush_r+0x1a>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	e7ad      	b.n	80075c8 <__sflush_r+0x1c>
 800766c:	690f      	ldr	r7, [r1, #16]
 800766e:	2f00      	cmp	r7, #0
 8007670:	d0a9      	beq.n	80075c6 <__sflush_r+0x1a>
 8007672:	0793      	lsls	r3, r2, #30
 8007674:	bf18      	it	ne
 8007676:	2300      	movne	r3, #0
 8007678:	680e      	ldr	r6, [r1, #0]
 800767a:	bf08      	it	eq
 800767c:	694b      	ldreq	r3, [r1, #20]
 800767e:	eba6 0807 	sub.w	r8, r6, r7
 8007682:	600f      	str	r7, [r1, #0]
 8007684:	608b      	str	r3, [r1, #8]
 8007686:	f1b8 0f00 	cmp.w	r8, #0
 800768a:	dd9c      	ble.n	80075c6 <__sflush_r+0x1a>
 800768c:	4643      	mov	r3, r8
 800768e:	463a      	mov	r2, r7
 8007690:	4628      	mov	r0, r5
 8007692:	6a21      	ldr	r1, [r4, #32]
 8007694:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007696:	47b0      	blx	r6
 8007698:	2800      	cmp	r0, #0
 800769a:	dc06      	bgt.n	80076aa <__sflush_r+0xfe>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	f04f 30ff 	mov.w	r0, #4294967295
 80076a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	e78e      	b.n	80075c8 <__sflush_r+0x1c>
 80076aa:	4407      	add	r7, r0
 80076ac:	eba8 0800 	sub.w	r8, r8, r0
 80076b0:	e7e9      	b.n	8007686 <__sflush_r+0xda>
 80076b2:	bf00      	nop
 80076b4:	20400001 	.word	0x20400001

080076b8 <_fflush_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	690b      	ldr	r3, [r1, #16]
 80076bc:	4605      	mov	r5, r0
 80076be:	460c      	mov	r4, r1
 80076c0:	b913      	cbnz	r3, 80076c8 <_fflush_r+0x10>
 80076c2:	2500      	movs	r5, #0
 80076c4:	4628      	mov	r0, r5
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	b118      	cbz	r0, 80076d2 <_fflush_r+0x1a>
 80076ca:	6983      	ldr	r3, [r0, #24]
 80076cc:	b90b      	cbnz	r3, 80076d2 <_fflush_r+0x1a>
 80076ce:	f000 f887 	bl	80077e0 <__sinit>
 80076d2:	4b14      	ldr	r3, [pc, #80]	; (8007724 <_fflush_r+0x6c>)
 80076d4:	429c      	cmp	r4, r3
 80076d6:	d11b      	bne.n	8007710 <_fflush_r+0x58>
 80076d8:	686c      	ldr	r4, [r5, #4]
 80076da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0ef      	beq.n	80076c2 <_fflush_r+0xa>
 80076e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076e4:	07d0      	lsls	r0, r2, #31
 80076e6:	d404      	bmi.n	80076f2 <_fflush_r+0x3a>
 80076e8:	0599      	lsls	r1, r3, #22
 80076ea:	d402      	bmi.n	80076f2 <_fflush_r+0x3a>
 80076ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076ee:	f000 f91a 	bl	8007926 <__retarget_lock_acquire_recursive>
 80076f2:	4628      	mov	r0, r5
 80076f4:	4621      	mov	r1, r4
 80076f6:	f7ff ff59 	bl	80075ac <__sflush_r>
 80076fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076fc:	4605      	mov	r5, r0
 80076fe:	07da      	lsls	r2, r3, #31
 8007700:	d4e0      	bmi.n	80076c4 <_fflush_r+0xc>
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	059b      	lsls	r3, r3, #22
 8007706:	d4dd      	bmi.n	80076c4 <_fflush_r+0xc>
 8007708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800770a:	f000 f90d 	bl	8007928 <__retarget_lock_release_recursive>
 800770e:	e7d9      	b.n	80076c4 <_fflush_r+0xc>
 8007710:	4b05      	ldr	r3, [pc, #20]	; (8007728 <_fflush_r+0x70>)
 8007712:	429c      	cmp	r4, r3
 8007714:	d101      	bne.n	800771a <_fflush_r+0x62>
 8007716:	68ac      	ldr	r4, [r5, #8]
 8007718:	e7df      	b.n	80076da <_fflush_r+0x22>
 800771a:	4b04      	ldr	r3, [pc, #16]	; (800772c <_fflush_r+0x74>)
 800771c:	429c      	cmp	r4, r3
 800771e:	bf08      	it	eq
 8007720:	68ec      	ldreq	r4, [r5, #12]
 8007722:	e7da      	b.n	80076da <_fflush_r+0x22>
 8007724:	08008a2c 	.word	0x08008a2c
 8007728:	08008a4c 	.word	0x08008a4c
 800772c:	08008a0c 	.word	0x08008a0c

08007730 <std>:
 8007730:	2300      	movs	r3, #0
 8007732:	b510      	push	{r4, lr}
 8007734:	4604      	mov	r4, r0
 8007736:	e9c0 3300 	strd	r3, r3, [r0]
 800773a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800773e:	6083      	str	r3, [r0, #8]
 8007740:	8181      	strh	r1, [r0, #12]
 8007742:	6643      	str	r3, [r0, #100]	; 0x64
 8007744:	81c2      	strh	r2, [r0, #14]
 8007746:	6183      	str	r3, [r0, #24]
 8007748:	4619      	mov	r1, r3
 800774a:	2208      	movs	r2, #8
 800774c:	305c      	adds	r0, #92	; 0x5c
 800774e:	f7fe fa33 	bl	8005bb8 <memset>
 8007752:	4b05      	ldr	r3, [pc, #20]	; (8007768 <std+0x38>)
 8007754:	6224      	str	r4, [r4, #32]
 8007756:	6263      	str	r3, [r4, #36]	; 0x24
 8007758:	4b04      	ldr	r3, [pc, #16]	; (800776c <std+0x3c>)
 800775a:	62a3      	str	r3, [r4, #40]	; 0x28
 800775c:	4b04      	ldr	r3, [pc, #16]	; (8007770 <std+0x40>)
 800775e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007760:	4b04      	ldr	r3, [pc, #16]	; (8007774 <std+0x44>)
 8007762:	6323      	str	r3, [r4, #48]	; 0x30
 8007764:	bd10      	pop	{r4, pc}
 8007766:	bf00      	nop
 8007768:	08008579 	.word	0x08008579
 800776c:	0800859b 	.word	0x0800859b
 8007770:	080085d3 	.word	0x080085d3
 8007774:	080085f7 	.word	0x080085f7

08007778 <_cleanup_r>:
 8007778:	4901      	ldr	r1, [pc, #4]	; (8007780 <_cleanup_r+0x8>)
 800777a:	f000 b8af 	b.w	80078dc <_fwalk_reent>
 800777e:	bf00      	nop
 8007780:	080076b9 	.word	0x080076b9

08007784 <__sfmoreglue>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	2568      	movs	r5, #104	; 0x68
 8007788:	1e4a      	subs	r2, r1, #1
 800778a:	4355      	muls	r5, r2
 800778c:	460e      	mov	r6, r1
 800778e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007792:	f000 fd2f 	bl	80081f4 <_malloc_r>
 8007796:	4604      	mov	r4, r0
 8007798:	b140      	cbz	r0, 80077ac <__sfmoreglue+0x28>
 800779a:	2100      	movs	r1, #0
 800779c:	e9c0 1600 	strd	r1, r6, [r0]
 80077a0:	300c      	adds	r0, #12
 80077a2:	60a0      	str	r0, [r4, #8]
 80077a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077a8:	f7fe fa06 	bl	8005bb8 <memset>
 80077ac:	4620      	mov	r0, r4
 80077ae:	bd70      	pop	{r4, r5, r6, pc}

080077b0 <__sfp_lock_acquire>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__sfp_lock_acquire+0x8>)
 80077b2:	f000 b8b8 	b.w	8007926 <__retarget_lock_acquire_recursive>
 80077b6:	bf00      	nop
 80077b8:	2000023c 	.word	0x2000023c

080077bc <__sfp_lock_release>:
 80077bc:	4801      	ldr	r0, [pc, #4]	; (80077c4 <__sfp_lock_release+0x8>)
 80077be:	f000 b8b3 	b.w	8007928 <__retarget_lock_release_recursive>
 80077c2:	bf00      	nop
 80077c4:	2000023c 	.word	0x2000023c

080077c8 <__sinit_lock_acquire>:
 80077c8:	4801      	ldr	r0, [pc, #4]	; (80077d0 <__sinit_lock_acquire+0x8>)
 80077ca:	f000 b8ac 	b.w	8007926 <__retarget_lock_acquire_recursive>
 80077ce:	bf00      	nop
 80077d0:	20000237 	.word	0x20000237

080077d4 <__sinit_lock_release>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__sinit_lock_release+0x8>)
 80077d6:	f000 b8a7 	b.w	8007928 <__retarget_lock_release_recursive>
 80077da:	bf00      	nop
 80077dc:	20000237 	.word	0x20000237

080077e0 <__sinit>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	4604      	mov	r4, r0
 80077e4:	f7ff fff0 	bl	80077c8 <__sinit_lock_acquire>
 80077e8:	69a3      	ldr	r3, [r4, #24]
 80077ea:	b11b      	cbz	r3, 80077f4 <__sinit+0x14>
 80077ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f0:	f7ff bff0 	b.w	80077d4 <__sinit_lock_release>
 80077f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80077f8:	6523      	str	r3, [r4, #80]	; 0x50
 80077fa:	4b13      	ldr	r3, [pc, #76]	; (8007848 <__sinit+0x68>)
 80077fc:	4a13      	ldr	r2, [pc, #76]	; (800784c <__sinit+0x6c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	62a2      	str	r2, [r4, #40]	; 0x28
 8007802:	42a3      	cmp	r3, r4
 8007804:	bf08      	it	eq
 8007806:	2301      	moveq	r3, #1
 8007808:	4620      	mov	r0, r4
 800780a:	bf08      	it	eq
 800780c:	61a3      	streq	r3, [r4, #24]
 800780e:	f000 f81f 	bl	8007850 <__sfp>
 8007812:	6060      	str	r0, [r4, #4]
 8007814:	4620      	mov	r0, r4
 8007816:	f000 f81b 	bl	8007850 <__sfp>
 800781a:	60a0      	str	r0, [r4, #8]
 800781c:	4620      	mov	r0, r4
 800781e:	f000 f817 	bl	8007850 <__sfp>
 8007822:	2200      	movs	r2, #0
 8007824:	2104      	movs	r1, #4
 8007826:	60e0      	str	r0, [r4, #12]
 8007828:	6860      	ldr	r0, [r4, #4]
 800782a:	f7ff ff81 	bl	8007730 <std>
 800782e:	2201      	movs	r2, #1
 8007830:	2109      	movs	r1, #9
 8007832:	68a0      	ldr	r0, [r4, #8]
 8007834:	f7ff ff7c 	bl	8007730 <std>
 8007838:	2202      	movs	r2, #2
 800783a:	2112      	movs	r1, #18
 800783c:	68e0      	ldr	r0, [r4, #12]
 800783e:	f7ff ff77 	bl	8007730 <std>
 8007842:	2301      	movs	r3, #1
 8007844:	61a3      	str	r3, [r4, #24]
 8007846:	e7d1      	b.n	80077ec <__sinit+0xc>
 8007848:	08008940 	.word	0x08008940
 800784c:	08007779 	.word	0x08007779

08007850 <__sfp>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	4607      	mov	r7, r0
 8007854:	f7ff ffac 	bl	80077b0 <__sfp_lock_acquire>
 8007858:	4b1e      	ldr	r3, [pc, #120]	; (80078d4 <__sfp+0x84>)
 800785a:	681e      	ldr	r6, [r3, #0]
 800785c:	69b3      	ldr	r3, [r6, #24]
 800785e:	b913      	cbnz	r3, 8007866 <__sfp+0x16>
 8007860:	4630      	mov	r0, r6
 8007862:	f7ff ffbd 	bl	80077e0 <__sinit>
 8007866:	3648      	adds	r6, #72	; 0x48
 8007868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800786c:	3b01      	subs	r3, #1
 800786e:	d503      	bpl.n	8007878 <__sfp+0x28>
 8007870:	6833      	ldr	r3, [r6, #0]
 8007872:	b30b      	cbz	r3, 80078b8 <__sfp+0x68>
 8007874:	6836      	ldr	r6, [r6, #0]
 8007876:	e7f7      	b.n	8007868 <__sfp+0x18>
 8007878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800787c:	b9d5      	cbnz	r5, 80078b4 <__sfp+0x64>
 800787e:	4b16      	ldr	r3, [pc, #88]	; (80078d8 <__sfp+0x88>)
 8007880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007884:	60e3      	str	r3, [r4, #12]
 8007886:	6665      	str	r5, [r4, #100]	; 0x64
 8007888:	f000 f84c 	bl	8007924 <__retarget_lock_init_recursive>
 800788c:	f7ff ff96 	bl	80077bc <__sfp_lock_release>
 8007890:	2208      	movs	r2, #8
 8007892:	4629      	mov	r1, r5
 8007894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800789c:	6025      	str	r5, [r4, #0]
 800789e:	61a5      	str	r5, [r4, #24]
 80078a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078a4:	f7fe f988 	bl	8005bb8 <memset>
 80078a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078b0:	4620      	mov	r0, r4
 80078b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b4:	3468      	adds	r4, #104	; 0x68
 80078b6:	e7d9      	b.n	800786c <__sfp+0x1c>
 80078b8:	2104      	movs	r1, #4
 80078ba:	4638      	mov	r0, r7
 80078bc:	f7ff ff62 	bl	8007784 <__sfmoreglue>
 80078c0:	4604      	mov	r4, r0
 80078c2:	6030      	str	r0, [r6, #0]
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d1d5      	bne.n	8007874 <__sfp+0x24>
 80078c8:	f7ff ff78 	bl	80077bc <__sfp_lock_release>
 80078cc:	230c      	movs	r3, #12
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	e7ee      	b.n	80078b0 <__sfp+0x60>
 80078d2:	bf00      	nop
 80078d4:	08008940 	.word	0x08008940
 80078d8:	ffff0001 	.word	0xffff0001

080078dc <_fwalk_reent>:
 80078dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e0:	4606      	mov	r6, r0
 80078e2:	4688      	mov	r8, r1
 80078e4:	2700      	movs	r7, #0
 80078e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ee:	f1b9 0901 	subs.w	r9, r9, #1
 80078f2:	d505      	bpl.n	8007900 <_fwalk_reent+0x24>
 80078f4:	6824      	ldr	r4, [r4, #0]
 80078f6:	2c00      	cmp	r4, #0
 80078f8:	d1f7      	bne.n	80078ea <_fwalk_reent+0xe>
 80078fa:	4638      	mov	r0, r7
 80078fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007900:	89ab      	ldrh	r3, [r5, #12]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d907      	bls.n	8007916 <_fwalk_reent+0x3a>
 8007906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800790a:	3301      	adds	r3, #1
 800790c:	d003      	beq.n	8007916 <_fwalk_reent+0x3a>
 800790e:	4629      	mov	r1, r5
 8007910:	4630      	mov	r0, r6
 8007912:	47c0      	blx	r8
 8007914:	4307      	orrs	r7, r0
 8007916:	3568      	adds	r5, #104	; 0x68
 8007918:	e7e9      	b.n	80078ee <_fwalk_reent+0x12>
	...

0800791c <_localeconv_r>:
 800791c:	4800      	ldr	r0, [pc, #0]	; (8007920 <_localeconv_r+0x4>)
 800791e:	4770      	bx	lr
 8007920:	2000016c 	.word	0x2000016c

08007924 <__retarget_lock_init_recursive>:
 8007924:	4770      	bx	lr

08007926 <__retarget_lock_acquire_recursive>:
 8007926:	4770      	bx	lr

08007928 <__retarget_lock_release_recursive>:
 8007928:	4770      	bx	lr

0800792a <__swhatbuf_r>:
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	460e      	mov	r6, r1
 800792e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007932:	4614      	mov	r4, r2
 8007934:	2900      	cmp	r1, #0
 8007936:	461d      	mov	r5, r3
 8007938:	b096      	sub	sp, #88	; 0x58
 800793a:	da07      	bge.n	800794c <__swhatbuf_r+0x22>
 800793c:	2300      	movs	r3, #0
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	89b3      	ldrh	r3, [r6, #12]
 8007942:	061a      	lsls	r2, r3, #24
 8007944:	d410      	bmi.n	8007968 <__swhatbuf_r+0x3e>
 8007946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800794a:	e00e      	b.n	800796a <__swhatbuf_r+0x40>
 800794c:	466a      	mov	r2, sp
 800794e:	f000 fea9 	bl	80086a4 <_fstat_r>
 8007952:	2800      	cmp	r0, #0
 8007954:	dbf2      	blt.n	800793c <__swhatbuf_r+0x12>
 8007956:	9a01      	ldr	r2, [sp, #4]
 8007958:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800795c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007960:	425a      	negs	r2, r3
 8007962:	415a      	adcs	r2, r3
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	e7ee      	b.n	8007946 <__swhatbuf_r+0x1c>
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	2000      	movs	r0, #0
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	b016      	add	sp, #88	; 0x58
 8007970:	bd70      	pop	{r4, r5, r6, pc}
	...

08007974 <__smakebuf_r>:
 8007974:	898b      	ldrh	r3, [r1, #12]
 8007976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007978:	079d      	lsls	r5, r3, #30
 800797a:	4606      	mov	r6, r0
 800797c:	460c      	mov	r4, r1
 800797e:	d507      	bpl.n	8007990 <__smakebuf_r+0x1c>
 8007980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	6123      	str	r3, [r4, #16]
 8007988:	2301      	movs	r3, #1
 800798a:	6163      	str	r3, [r4, #20]
 800798c:	b002      	add	sp, #8
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	466a      	mov	r2, sp
 8007992:	ab01      	add	r3, sp, #4
 8007994:	f7ff ffc9 	bl	800792a <__swhatbuf_r>
 8007998:	9900      	ldr	r1, [sp, #0]
 800799a:	4605      	mov	r5, r0
 800799c:	4630      	mov	r0, r6
 800799e:	f000 fc29 	bl	80081f4 <_malloc_r>
 80079a2:	b948      	cbnz	r0, 80079b8 <__smakebuf_r+0x44>
 80079a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a8:	059a      	lsls	r2, r3, #22
 80079aa:	d4ef      	bmi.n	800798c <__smakebuf_r+0x18>
 80079ac:	f023 0303 	bic.w	r3, r3, #3
 80079b0:	f043 0302 	orr.w	r3, r3, #2
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	e7e3      	b.n	8007980 <__smakebuf_r+0xc>
 80079b8:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <__smakebuf_r+0x7c>)
 80079ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	6020      	str	r0, [r4, #0]
 80079c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	9b00      	ldr	r3, [sp, #0]
 80079c8:	6120      	str	r0, [r4, #16]
 80079ca:	6163      	str	r3, [r4, #20]
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	b15b      	cbz	r3, 80079e8 <__smakebuf_r+0x74>
 80079d0:	4630      	mov	r0, r6
 80079d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079d6:	f000 fe77 	bl	80086c8 <_isatty_r>
 80079da:	b128      	cbz	r0, 80079e8 <__smakebuf_r+0x74>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	89a0      	ldrh	r0, [r4, #12]
 80079ea:	4305      	orrs	r5, r0
 80079ec:	81a5      	strh	r5, [r4, #12]
 80079ee:	e7cd      	b.n	800798c <__smakebuf_r+0x18>
 80079f0:	08007779 	.word	0x08007779

080079f4 <malloc>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <malloc+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f000 bbfb 	b.w	80081f4 <_malloc_r>
 80079fe:	bf00      	nop
 8007a00:	20000018 	.word	0x20000018

08007a04 <memchr>:
 8007a04:	4603      	mov	r3, r0
 8007a06:	b510      	push	{r4, lr}
 8007a08:	b2c9      	uxtb	r1, r1
 8007a0a:	4402      	add	r2, r0
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	d101      	bne.n	8007a16 <memchr+0x12>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e003      	b.n	8007a1e <memchr+0x1a>
 8007a16:	7804      	ldrb	r4, [r0, #0]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	428c      	cmp	r4, r1
 8007a1c:	d1f6      	bne.n	8007a0c <memchr+0x8>
 8007a1e:	bd10      	pop	{r4, pc}

08007a20 <memcpy>:
 8007a20:	440a      	add	r2, r1
 8007a22:	4291      	cmp	r1, r2
 8007a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a28:	d100      	bne.n	8007a2c <memcpy+0xc>
 8007a2a:	4770      	bx	lr
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a32:	4291      	cmp	r1, r2
 8007a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a38:	d1f9      	bne.n	8007a2e <memcpy+0xe>
 8007a3a:	bd10      	pop	{r4, pc}

08007a3c <_Balloc>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a40:	4604      	mov	r4, r0
 8007a42:	460d      	mov	r5, r1
 8007a44:	b976      	cbnz	r6, 8007a64 <_Balloc+0x28>
 8007a46:	2010      	movs	r0, #16
 8007a48:	f7ff ffd4 	bl	80079f4 <malloc>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6260      	str	r0, [r4, #36]	; 0x24
 8007a50:	b920      	cbnz	r0, 8007a5c <_Balloc+0x20>
 8007a52:	2166      	movs	r1, #102	; 0x66
 8007a54:	4b17      	ldr	r3, [pc, #92]	; (8007ab4 <_Balloc+0x78>)
 8007a56:	4818      	ldr	r0, [pc, #96]	; (8007ab8 <_Balloc+0x7c>)
 8007a58:	f000 fde4 	bl	8008624 <__assert_func>
 8007a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a60:	6006      	str	r6, [r0, #0]
 8007a62:	60c6      	str	r6, [r0, #12]
 8007a64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a66:	68f3      	ldr	r3, [r6, #12]
 8007a68:	b183      	cbz	r3, 8007a8c <_Balloc+0x50>
 8007a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a72:	b9b8      	cbnz	r0, 8007aa4 <_Balloc+0x68>
 8007a74:	2101      	movs	r1, #1
 8007a76:	fa01 f605 	lsl.w	r6, r1, r5
 8007a7a:	1d72      	adds	r2, r6, #5
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	0092      	lsls	r2, r2, #2
 8007a80:	f000 fb5e 	bl	8008140 <_calloc_r>
 8007a84:	b160      	cbz	r0, 8007aa0 <_Balloc+0x64>
 8007a86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a8a:	e00e      	b.n	8007aaa <_Balloc+0x6e>
 8007a8c:	2221      	movs	r2, #33	; 0x21
 8007a8e:	2104      	movs	r1, #4
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 fb55 	bl	8008140 <_calloc_r>
 8007a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a98:	60f0      	str	r0, [r6, #12]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e4      	bne.n	8007a6a <_Balloc+0x2e>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}
 8007aa4:	6802      	ldr	r2, [r0, #0]
 8007aa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ab0:	e7f7      	b.n	8007aa2 <_Balloc+0x66>
 8007ab2:	bf00      	nop
 8007ab4:	08008985 	.word	0x08008985
 8007ab8:	08008a6c 	.word	0x08008a6c

08007abc <_Bfree>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	b976      	cbnz	r6, 8007ae4 <_Bfree+0x28>
 8007ac6:	2010      	movs	r0, #16
 8007ac8:	f7ff ff94 	bl	80079f4 <malloc>
 8007acc:	4602      	mov	r2, r0
 8007ace:	6268      	str	r0, [r5, #36]	; 0x24
 8007ad0:	b920      	cbnz	r0, 8007adc <_Bfree+0x20>
 8007ad2:	218a      	movs	r1, #138	; 0x8a
 8007ad4:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <_Bfree+0x3c>)
 8007ad6:	4809      	ldr	r0, [pc, #36]	; (8007afc <_Bfree+0x40>)
 8007ad8:	f000 fda4 	bl	8008624 <__assert_func>
 8007adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ae0:	6006      	str	r6, [r0, #0]
 8007ae2:	60c6      	str	r6, [r0, #12]
 8007ae4:	b13c      	cbz	r4, 8007af6 <_Bfree+0x3a>
 8007ae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ae8:	6862      	ldr	r2, [r4, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007af0:	6021      	str	r1, [r4, #0]
 8007af2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	08008985 	.word	0x08008985
 8007afc:	08008a6c 	.word	0x08008a6c

08007b00 <__multadd>:
 8007b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b04:	4698      	mov	r8, r3
 8007b06:	460c      	mov	r4, r1
 8007b08:	2300      	movs	r3, #0
 8007b0a:	690e      	ldr	r6, [r1, #16]
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	f101 0014 	add.w	r0, r1, #20
 8007b12:	6805      	ldr	r5, [r0, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	b2a9      	uxth	r1, r5
 8007b18:	fb02 8101 	mla	r1, r2, r1, r8
 8007b1c:	0c2d      	lsrs	r5, r5, #16
 8007b1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007b22:	fb02 c505 	mla	r5, r2, r5, ip
 8007b26:	b289      	uxth	r1, r1
 8007b28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007b2c:	429e      	cmp	r6, r3
 8007b2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007b32:	f840 1b04 	str.w	r1, [r0], #4
 8007b36:	dcec      	bgt.n	8007b12 <__multadd+0x12>
 8007b38:	f1b8 0f00 	cmp.w	r8, #0
 8007b3c:	d022      	beq.n	8007b84 <__multadd+0x84>
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	42b3      	cmp	r3, r6
 8007b42:	dc19      	bgt.n	8007b78 <__multadd+0x78>
 8007b44:	6861      	ldr	r1, [r4, #4]
 8007b46:	4638      	mov	r0, r7
 8007b48:	3101      	adds	r1, #1
 8007b4a:	f7ff ff77 	bl	8007a3c <_Balloc>
 8007b4e:	4605      	mov	r5, r0
 8007b50:	b928      	cbnz	r0, 8007b5e <__multadd+0x5e>
 8007b52:	4602      	mov	r2, r0
 8007b54:	21b5      	movs	r1, #181	; 0xb5
 8007b56:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <__multadd+0x8c>)
 8007b58:	480d      	ldr	r0, [pc, #52]	; (8007b90 <__multadd+0x90>)
 8007b5a:	f000 fd63 	bl	8008624 <__assert_func>
 8007b5e:	6922      	ldr	r2, [r4, #16]
 8007b60:	f104 010c 	add.w	r1, r4, #12
 8007b64:	3202      	adds	r2, #2
 8007b66:	0092      	lsls	r2, r2, #2
 8007b68:	300c      	adds	r0, #12
 8007b6a:	f7ff ff59 	bl	8007a20 <memcpy>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4638      	mov	r0, r7
 8007b72:	f7ff ffa3 	bl	8007abc <_Bfree>
 8007b76:	462c      	mov	r4, r5
 8007b78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007b7c:	3601      	adds	r6, #1
 8007b7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007b82:	6126      	str	r6, [r4, #16]
 8007b84:	4620      	mov	r0, r4
 8007b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b8a:	bf00      	nop
 8007b8c:	080089fb 	.word	0x080089fb
 8007b90:	08008a6c 	.word	0x08008a6c

08007b94 <__hi0bits>:
 8007b94:	0c02      	lsrs	r2, r0, #16
 8007b96:	0412      	lsls	r2, r2, #16
 8007b98:	4603      	mov	r3, r0
 8007b9a:	b9ca      	cbnz	r2, 8007bd0 <__hi0bits+0x3c>
 8007b9c:	0403      	lsls	r3, r0, #16
 8007b9e:	2010      	movs	r0, #16
 8007ba0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ba4:	bf04      	itt	eq
 8007ba6:	021b      	lsleq	r3, r3, #8
 8007ba8:	3008      	addeq	r0, #8
 8007baa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007bae:	bf04      	itt	eq
 8007bb0:	011b      	lsleq	r3, r3, #4
 8007bb2:	3004      	addeq	r0, #4
 8007bb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007bb8:	bf04      	itt	eq
 8007bba:	009b      	lsleq	r3, r3, #2
 8007bbc:	3002      	addeq	r0, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	db05      	blt.n	8007bce <__hi0bits+0x3a>
 8007bc2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007bc6:	f100 0001 	add.w	r0, r0, #1
 8007bca:	bf08      	it	eq
 8007bcc:	2020      	moveq	r0, #32
 8007bce:	4770      	bx	lr
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	e7e5      	b.n	8007ba0 <__hi0bits+0xc>

08007bd4 <__lo0bits>:
 8007bd4:	6803      	ldr	r3, [r0, #0]
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	f013 0007 	ands.w	r0, r3, #7
 8007bdc:	d00b      	beq.n	8007bf6 <__lo0bits+0x22>
 8007bde:	07d9      	lsls	r1, r3, #31
 8007be0:	d422      	bmi.n	8007c28 <__lo0bits+0x54>
 8007be2:	0798      	lsls	r0, r3, #30
 8007be4:	bf49      	itett	mi
 8007be6:	085b      	lsrmi	r3, r3, #1
 8007be8:	089b      	lsrpl	r3, r3, #2
 8007bea:	2001      	movmi	r0, #1
 8007bec:	6013      	strmi	r3, [r2, #0]
 8007bee:	bf5c      	itt	pl
 8007bf0:	2002      	movpl	r0, #2
 8007bf2:	6013      	strpl	r3, [r2, #0]
 8007bf4:	4770      	bx	lr
 8007bf6:	b299      	uxth	r1, r3
 8007bf8:	b909      	cbnz	r1, 8007bfe <__lo0bits+0x2a>
 8007bfa:	2010      	movs	r0, #16
 8007bfc:	0c1b      	lsrs	r3, r3, #16
 8007bfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c02:	bf04      	itt	eq
 8007c04:	0a1b      	lsreq	r3, r3, #8
 8007c06:	3008      	addeq	r0, #8
 8007c08:	0719      	lsls	r1, r3, #28
 8007c0a:	bf04      	itt	eq
 8007c0c:	091b      	lsreq	r3, r3, #4
 8007c0e:	3004      	addeq	r0, #4
 8007c10:	0799      	lsls	r1, r3, #30
 8007c12:	bf04      	itt	eq
 8007c14:	089b      	lsreq	r3, r3, #2
 8007c16:	3002      	addeq	r0, #2
 8007c18:	07d9      	lsls	r1, r3, #31
 8007c1a:	d403      	bmi.n	8007c24 <__lo0bits+0x50>
 8007c1c:	085b      	lsrs	r3, r3, #1
 8007c1e:	f100 0001 	add.w	r0, r0, #1
 8007c22:	d003      	beq.n	8007c2c <__lo0bits+0x58>
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	4770      	bx	lr
 8007c28:	2000      	movs	r0, #0
 8007c2a:	4770      	bx	lr
 8007c2c:	2020      	movs	r0, #32
 8007c2e:	4770      	bx	lr

08007c30 <__i2b>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	460c      	mov	r4, r1
 8007c34:	2101      	movs	r1, #1
 8007c36:	f7ff ff01 	bl	8007a3c <_Balloc>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	b928      	cbnz	r0, 8007c4a <__i2b+0x1a>
 8007c3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c42:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <__i2b+0x24>)
 8007c44:	4804      	ldr	r0, [pc, #16]	; (8007c58 <__i2b+0x28>)
 8007c46:	f000 fced 	bl	8008624 <__assert_func>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	6144      	str	r4, [r0, #20]
 8007c4e:	6103      	str	r3, [r0, #16]
 8007c50:	bd10      	pop	{r4, pc}
 8007c52:	bf00      	nop
 8007c54:	080089fb 	.word	0x080089fb
 8007c58:	08008a6c 	.word	0x08008a6c

08007c5c <__multiply>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	4614      	mov	r4, r2
 8007c62:	690a      	ldr	r2, [r1, #16]
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	460d      	mov	r5, r1
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	bfbe      	ittt	lt
 8007c6c:	460b      	movlt	r3, r1
 8007c6e:	4625      	movlt	r5, r4
 8007c70:	461c      	movlt	r4, r3
 8007c72:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007c76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007c7a:	68ab      	ldr	r3, [r5, #8]
 8007c7c:	6869      	ldr	r1, [r5, #4]
 8007c7e:	eb0a 0709 	add.w	r7, sl, r9
 8007c82:	42bb      	cmp	r3, r7
 8007c84:	b085      	sub	sp, #20
 8007c86:	bfb8      	it	lt
 8007c88:	3101      	addlt	r1, #1
 8007c8a:	f7ff fed7 	bl	8007a3c <_Balloc>
 8007c8e:	b930      	cbnz	r0, 8007c9e <__multiply+0x42>
 8007c90:	4602      	mov	r2, r0
 8007c92:	f240 115d 	movw	r1, #349	; 0x15d
 8007c96:	4b41      	ldr	r3, [pc, #260]	; (8007d9c <__multiply+0x140>)
 8007c98:	4841      	ldr	r0, [pc, #260]	; (8007da0 <__multiply+0x144>)
 8007c9a:	f000 fcc3 	bl	8008624 <__assert_func>
 8007c9e:	f100 0614 	add.w	r6, r0, #20
 8007ca2:	4633      	mov	r3, r6
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007caa:	4543      	cmp	r3, r8
 8007cac:	d31e      	bcc.n	8007cec <__multiply+0x90>
 8007cae:	f105 0c14 	add.w	ip, r5, #20
 8007cb2:	f104 0314 	add.w	r3, r4, #20
 8007cb6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007cba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007cbe:	9202      	str	r2, [sp, #8]
 8007cc0:	ebac 0205 	sub.w	r2, ip, r5
 8007cc4:	3a15      	subs	r2, #21
 8007cc6:	f022 0203 	bic.w	r2, r2, #3
 8007cca:	3204      	adds	r2, #4
 8007ccc:	f105 0115 	add.w	r1, r5, #21
 8007cd0:	458c      	cmp	ip, r1
 8007cd2:	bf38      	it	cc
 8007cd4:	2204      	movcc	r2, #4
 8007cd6:	9201      	str	r2, [sp, #4]
 8007cd8:	9a02      	ldr	r2, [sp, #8]
 8007cda:	9303      	str	r3, [sp, #12]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d808      	bhi.n	8007cf2 <__multiply+0x96>
 8007ce0:	2f00      	cmp	r7, #0
 8007ce2:	dc55      	bgt.n	8007d90 <__multiply+0x134>
 8007ce4:	6107      	str	r7, [r0, #16]
 8007ce6:	b005      	add	sp, #20
 8007ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cec:	f843 2b04 	str.w	r2, [r3], #4
 8007cf0:	e7db      	b.n	8007caa <__multiply+0x4e>
 8007cf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cf6:	f1ba 0f00 	cmp.w	sl, #0
 8007cfa:	d020      	beq.n	8007d3e <__multiply+0xe2>
 8007cfc:	46b1      	mov	r9, r6
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f105 0e14 	add.w	lr, r5, #20
 8007d04:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007d08:	f8d9 b000 	ldr.w	fp, [r9]
 8007d0c:	b2a1      	uxth	r1, r4
 8007d0e:	fa1f fb8b 	uxth.w	fp, fp
 8007d12:	fb0a b101 	mla	r1, sl, r1, fp
 8007d16:	4411      	add	r1, r2
 8007d18:	f8d9 2000 	ldr.w	r2, [r9]
 8007d1c:	0c24      	lsrs	r4, r4, #16
 8007d1e:	0c12      	lsrs	r2, r2, #16
 8007d20:	fb0a 2404 	mla	r4, sl, r4, r2
 8007d24:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007d28:	b289      	uxth	r1, r1
 8007d2a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d2e:	45f4      	cmp	ip, lr
 8007d30:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007d34:	f849 1b04 	str.w	r1, [r9], #4
 8007d38:	d8e4      	bhi.n	8007d04 <__multiply+0xa8>
 8007d3a:	9901      	ldr	r1, [sp, #4]
 8007d3c:	5072      	str	r2, [r6, r1]
 8007d3e:	9a03      	ldr	r2, [sp, #12]
 8007d40:	3304      	adds	r3, #4
 8007d42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d46:	f1b9 0f00 	cmp.w	r9, #0
 8007d4a:	d01f      	beq.n	8007d8c <__multiply+0x130>
 8007d4c:	46b6      	mov	lr, r6
 8007d4e:	f04f 0a00 	mov.w	sl, #0
 8007d52:	6834      	ldr	r4, [r6, #0]
 8007d54:	f105 0114 	add.w	r1, r5, #20
 8007d58:	880a      	ldrh	r2, [r1, #0]
 8007d5a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007d5e:	b2a4      	uxth	r4, r4
 8007d60:	fb09 b202 	mla	r2, r9, r2, fp
 8007d64:	4492      	add	sl, r2
 8007d66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007d6a:	f84e 4b04 	str.w	r4, [lr], #4
 8007d6e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007d72:	f8be 2000 	ldrh.w	r2, [lr]
 8007d76:	0c24      	lsrs	r4, r4, #16
 8007d78:	fb09 2404 	mla	r4, r9, r4, r2
 8007d7c:	458c      	cmp	ip, r1
 8007d7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007d82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d86:	d8e7      	bhi.n	8007d58 <__multiply+0xfc>
 8007d88:	9a01      	ldr	r2, [sp, #4]
 8007d8a:	50b4      	str	r4, [r6, r2]
 8007d8c:	3604      	adds	r6, #4
 8007d8e:	e7a3      	b.n	8007cd8 <__multiply+0x7c>
 8007d90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1a5      	bne.n	8007ce4 <__multiply+0x88>
 8007d98:	3f01      	subs	r7, #1
 8007d9a:	e7a1      	b.n	8007ce0 <__multiply+0x84>
 8007d9c:	080089fb 	.word	0x080089fb
 8007da0:	08008a6c 	.word	0x08008a6c

08007da4 <__pow5mult>:
 8007da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da8:	4615      	mov	r5, r2
 8007daa:	f012 0203 	ands.w	r2, r2, #3
 8007dae:	4606      	mov	r6, r0
 8007db0:	460f      	mov	r7, r1
 8007db2:	d007      	beq.n	8007dc4 <__pow5mult+0x20>
 8007db4:	4c25      	ldr	r4, [pc, #148]	; (8007e4c <__pow5mult+0xa8>)
 8007db6:	3a01      	subs	r2, #1
 8007db8:	2300      	movs	r3, #0
 8007dba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dbe:	f7ff fe9f 	bl	8007b00 <__multadd>
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	10ad      	asrs	r5, r5, #2
 8007dc6:	d03d      	beq.n	8007e44 <__pow5mult+0xa0>
 8007dc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dca:	b97c      	cbnz	r4, 8007dec <__pow5mult+0x48>
 8007dcc:	2010      	movs	r0, #16
 8007dce:	f7ff fe11 	bl	80079f4 <malloc>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6270      	str	r0, [r6, #36]	; 0x24
 8007dd6:	b928      	cbnz	r0, 8007de4 <__pow5mult+0x40>
 8007dd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <__pow5mult+0xac>)
 8007dde:	481d      	ldr	r0, [pc, #116]	; (8007e54 <__pow5mult+0xb0>)
 8007de0:	f000 fc20 	bl	8008624 <__assert_func>
 8007de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007de8:	6004      	str	r4, [r0, #0]
 8007dea:	60c4      	str	r4, [r0, #12]
 8007dec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007df0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007df4:	b94c      	cbnz	r4, 8007e0a <__pow5mult+0x66>
 8007df6:	f240 2171 	movw	r1, #625	; 0x271
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ff18 	bl	8007c30 <__i2b>
 8007e00:	2300      	movs	r3, #0
 8007e02:	4604      	mov	r4, r0
 8007e04:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e08:	6003      	str	r3, [r0, #0]
 8007e0a:	f04f 0900 	mov.w	r9, #0
 8007e0e:	07eb      	lsls	r3, r5, #31
 8007e10:	d50a      	bpl.n	8007e28 <__pow5mult+0x84>
 8007e12:	4639      	mov	r1, r7
 8007e14:	4622      	mov	r2, r4
 8007e16:	4630      	mov	r0, r6
 8007e18:	f7ff ff20 	bl	8007c5c <__multiply>
 8007e1c:	4680      	mov	r8, r0
 8007e1e:	4639      	mov	r1, r7
 8007e20:	4630      	mov	r0, r6
 8007e22:	f7ff fe4b 	bl	8007abc <_Bfree>
 8007e26:	4647      	mov	r7, r8
 8007e28:	106d      	asrs	r5, r5, #1
 8007e2a:	d00b      	beq.n	8007e44 <__pow5mult+0xa0>
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	b938      	cbnz	r0, 8007e40 <__pow5mult+0x9c>
 8007e30:	4622      	mov	r2, r4
 8007e32:	4621      	mov	r1, r4
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff ff11 	bl	8007c5c <__multiply>
 8007e3a:	6020      	str	r0, [r4, #0]
 8007e3c:	f8c0 9000 	str.w	r9, [r0]
 8007e40:	4604      	mov	r4, r0
 8007e42:	e7e4      	b.n	8007e0e <__pow5mult+0x6a>
 8007e44:	4638      	mov	r0, r7
 8007e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	bf00      	nop
 8007e4c:	08008bc0 	.word	0x08008bc0
 8007e50:	08008985 	.word	0x08008985
 8007e54:	08008a6c 	.word	0x08008a6c

08007e58 <__lshift>:
 8007e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	4607      	mov	r7, r0
 8007e60:	4691      	mov	r9, r2
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	6849      	ldr	r1, [r1, #4]
 8007e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e6a:	68a3      	ldr	r3, [r4, #8]
 8007e6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e70:	f108 0601 	add.w	r6, r8, #1
 8007e74:	42b3      	cmp	r3, r6
 8007e76:	db0b      	blt.n	8007e90 <__lshift+0x38>
 8007e78:	4638      	mov	r0, r7
 8007e7a:	f7ff fddf 	bl	8007a3c <_Balloc>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b948      	cbnz	r0, 8007e96 <__lshift+0x3e>
 8007e82:	4602      	mov	r2, r0
 8007e84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e88:	4b27      	ldr	r3, [pc, #156]	; (8007f28 <__lshift+0xd0>)
 8007e8a:	4828      	ldr	r0, [pc, #160]	; (8007f2c <__lshift+0xd4>)
 8007e8c:	f000 fbca 	bl	8008624 <__assert_func>
 8007e90:	3101      	adds	r1, #1
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	e7ee      	b.n	8007e74 <__lshift+0x1c>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f100 0114 	add.w	r1, r0, #20
 8007e9c:	f100 0210 	add.w	r2, r0, #16
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	4553      	cmp	r3, sl
 8007ea4:	db33      	blt.n	8007f0e <__lshift+0xb6>
 8007ea6:	6920      	ldr	r0, [r4, #16]
 8007ea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007eac:	f104 0314 	add.w	r3, r4, #20
 8007eb0:	f019 091f 	ands.w	r9, r9, #31
 8007eb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007eb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ebc:	d02b      	beq.n	8007f16 <__lshift+0xbe>
 8007ebe:	468a      	mov	sl, r1
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	fa00 f009 	lsl.w	r0, r0, r9
 8007ecc:	4302      	orrs	r2, r0
 8007ece:	f84a 2b04 	str.w	r2, [sl], #4
 8007ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed6:	459c      	cmp	ip, r3
 8007ed8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007edc:	d8f3      	bhi.n	8007ec6 <__lshift+0x6e>
 8007ede:	ebac 0304 	sub.w	r3, ip, r4
 8007ee2:	3b15      	subs	r3, #21
 8007ee4:	f023 0303 	bic.w	r3, r3, #3
 8007ee8:	3304      	adds	r3, #4
 8007eea:	f104 0015 	add.w	r0, r4, #21
 8007eee:	4584      	cmp	ip, r0
 8007ef0:	bf38      	it	cc
 8007ef2:	2304      	movcc	r3, #4
 8007ef4:	50ca      	str	r2, [r1, r3]
 8007ef6:	b10a      	cbz	r2, 8007efc <__lshift+0xa4>
 8007ef8:	f108 0602 	add.w	r6, r8, #2
 8007efc:	3e01      	subs	r6, #1
 8007efe:	4638      	mov	r0, r7
 8007f00:	4621      	mov	r1, r4
 8007f02:	612e      	str	r6, [r5, #16]
 8007f04:	f7ff fdda 	bl	8007abc <_Bfree>
 8007f08:	4628      	mov	r0, r5
 8007f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f12:	3301      	adds	r3, #1
 8007f14:	e7c5      	b.n	8007ea2 <__lshift+0x4a>
 8007f16:	3904      	subs	r1, #4
 8007f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f1c:	459c      	cmp	ip, r3
 8007f1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f22:	d8f9      	bhi.n	8007f18 <__lshift+0xc0>
 8007f24:	e7ea      	b.n	8007efc <__lshift+0xa4>
 8007f26:	bf00      	nop
 8007f28:	080089fb 	.word	0x080089fb
 8007f2c:	08008a6c 	.word	0x08008a6c

08007f30 <__mcmp>:
 8007f30:	4603      	mov	r3, r0
 8007f32:	690a      	ldr	r2, [r1, #16]
 8007f34:	6900      	ldr	r0, [r0, #16]
 8007f36:	b530      	push	{r4, r5, lr}
 8007f38:	1a80      	subs	r0, r0, r2
 8007f3a:	d10d      	bne.n	8007f58 <__mcmp+0x28>
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	3114      	adds	r1, #20
 8007f40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f50:	4295      	cmp	r5, r2
 8007f52:	d002      	beq.n	8007f5a <__mcmp+0x2a>
 8007f54:	d304      	bcc.n	8007f60 <__mcmp+0x30>
 8007f56:	2001      	movs	r0, #1
 8007f58:	bd30      	pop	{r4, r5, pc}
 8007f5a:	42a3      	cmp	r3, r4
 8007f5c:	d3f4      	bcc.n	8007f48 <__mcmp+0x18>
 8007f5e:	e7fb      	b.n	8007f58 <__mcmp+0x28>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	e7f8      	b.n	8007f58 <__mcmp+0x28>
	...

08007f68 <__mdiff>:
 8007f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	4606      	mov	r6, r0
 8007f70:	4611      	mov	r1, r2
 8007f72:	4620      	mov	r0, r4
 8007f74:	4692      	mov	sl, r2
 8007f76:	f7ff ffdb 	bl	8007f30 <__mcmp>
 8007f7a:	1e05      	subs	r5, r0, #0
 8007f7c:	d111      	bne.n	8007fa2 <__mdiff+0x3a>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff fd5b 	bl	8007a3c <_Balloc>
 8007f86:	4602      	mov	r2, r0
 8007f88:	b928      	cbnz	r0, 8007f96 <__mdiff+0x2e>
 8007f8a:	f240 2132 	movw	r1, #562	; 0x232
 8007f8e:	4b3c      	ldr	r3, [pc, #240]	; (8008080 <__mdiff+0x118>)
 8007f90:	483c      	ldr	r0, [pc, #240]	; (8008084 <__mdiff+0x11c>)
 8007f92:	f000 fb47 	bl	8008624 <__assert_func>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa2:	bfa4      	itt	ge
 8007fa4:	4653      	movge	r3, sl
 8007fa6:	46a2      	movge	sl, r4
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007fae:	bfa6      	itte	ge
 8007fb0:	461c      	movge	r4, r3
 8007fb2:	2500      	movge	r5, #0
 8007fb4:	2501      	movlt	r5, #1
 8007fb6:	f7ff fd41 	bl	8007a3c <_Balloc>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	b918      	cbnz	r0, 8007fc6 <__mdiff+0x5e>
 8007fbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fc2:	4b2f      	ldr	r3, [pc, #188]	; (8008080 <__mdiff+0x118>)
 8007fc4:	e7e4      	b.n	8007f90 <__mdiff+0x28>
 8007fc6:	f100 0814 	add.w	r8, r0, #20
 8007fca:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007fce:	60c5      	str	r5, [r0, #12]
 8007fd0:	f04f 0c00 	mov.w	ip, #0
 8007fd4:	f10a 0514 	add.w	r5, sl, #20
 8007fd8:	f10a 0010 	add.w	r0, sl, #16
 8007fdc:	46c2      	mov	sl, r8
 8007fde:	6926      	ldr	r6, [r4, #16]
 8007fe0:	f104 0914 	add.w	r9, r4, #20
 8007fe4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007fe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007ff0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ff4:	fa1f f18b 	uxth.w	r1, fp
 8007ff8:	4461      	add	r1, ip
 8007ffa:	fa1f fc83 	uxth.w	ip, r3
 8007ffe:	0c1b      	lsrs	r3, r3, #16
 8008000:	eba1 010c 	sub.w	r1, r1, ip
 8008004:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008008:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800800c:	b289      	uxth	r1, r1
 800800e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008012:	454e      	cmp	r6, r9
 8008014:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008018:	f84a 3b04 	str.w	r3, [sl], #4
 800801c:	d8e6      	bhi.n	8007fec <__mdiff+0x84>
 800801e:	1b33      	subs	r3, r6, r4
 8008020:	3b15      	subs	r3, #21
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	3415      	adds	r4, #21
 8008028:	3304      	adds	r3, #4
 800802a:	42a6      	cmp	r6, r4
 800802c:	bf38      	it	cc
 800802e:	2304      	movcc	r3, #4
 8008030:	441d      	add	r5, r3
 8008032:	4443      	add	r3, r8
 8008034:	461e      	mov	r6, r3
 8008036:	462c      	mov	r4, r5
 8008038:	4574      	cmp	r4, lr
 800803a:	d30e      	bcc.n	800805a <__mdiff+0xf2>
 800803c:	f10e 0103 	add.w	r1, lr, #3
 8008040:	1b49      	subs	r1, r1, r5
 8008042:	f021 0103 	bic.w	r1, r1, #3
 8008046:	3d03      	subs	r5, #3
 8008048:	45ae      	cmp	lr, r5
 800804a:	bf38      	it	cc
 800804c:	2100      	movcc	r1, #0
 800804e:	4419      	add	r1, r3
 8008050:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008054:	b18b      	cbz	r3, 800807a <__mdiff+0x112>
 8008056:	6117      	str	r7, [r2, #16]
 8008058:	e7a0      	b.n	8007f9c <__mdiff+0x34>
 800805a:	f854 8b04 	ldr.w	r8, [r4], #4
 800805e:	fa1f f188 	uxth.w	r1, r8
 8008062:	4461      	add	r1, ip
 8008064:	1408      	asrs	r0, r1, #16
 8008066:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800806a:	b289      	uxth	r1, r1
 800806c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008074:	f846 1b04 	str.w	r1, [r6], #4
 8008078:	e7de      	b.n	8008038 <__mdiff+0xd0>
 800807a:	3f01      	subs	r7, #1
 800807c:	e7e8      	b.n	8008050 <__mdiff+0xe8>
 800807e:	bf00      	nop
 8008080:	080089fb 	.word	0x080089fb
 8008084:	08008a6c 	.word	0x08008a6c

08008088 <__d2b>:
 8008088:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800808c:	2101      	movs	r1, #1
 800808e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008092:	4690      	mov	r8, r2
 8008094:	461d      	mov	r5, r3
 8008096:	f7ff fcd1 	bl	8007a3c <_Balloc>
 800809a:	4604      	mov	r4, r0
 800809c:	b930      	cbnz	r0, 80080ac <__d2b+0x24>
 800809e:	4602      	mov	r2, r0
 80080a0:	f240 310a 	movw	r1, #778	; 0x30a
 80080a4:	4b24      	ldr	r3, [pc, #144]	; (8008138 <__d2b+0xb0>)
 80080a6:	4825      	ldr	r0, [pc, #148]	; (800813c <__d2b+0xb4>)
 80080a8:	f000 fabc 	bl	8008624 <__assert_func>
 80080ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80080b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80080b4:	bb2d      	cbnz	r5, 8008102 <__d2b+0x7a>
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	f1b8 0300 	subs.w	r3, r8, #0
 80080bc:	d026      	beq.n	800810c <__d2b+0x84>
 80080be:	4668      	mov	r0, sp
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	f7ff fd87 	bl	8007bd4 <__lo0bits>
 80080c6:	9900      	ldr	r1, [sp, #0]
 80080c8:	b1f0      	cbz	r0, 8008108 <__d2b+0x80>
 80080ca:	9a01      	ldr	r2, [sp, #4]
 80080cc:	f1c0 0320 	rsb	r3, r0, #32
 80080d0:	fa02 f303 	lsl.w	r3, r2, r3
 80080d4:	430b      	orrs	r3, r1
 80080d6:	40c2      	lsrs	r2, r0
 80080d8:	6163      	str	r3, [r4, #20]
 80080da:	9201      	str	r2, [sp, #4]
 80080dc:	9b01      	ldr	r3, [sp, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bf14      	ite	ne
 80080e2:	2102      	movne	r1, #2
 80080e4:	2101      	moveq	r1, #1
 80080e6:	61a3      	str	r3, [r4, #24]
 80080e8:	6121      	str	r1, [r4, #16]
 80080ea:	b1c5      	cbz	r5, 800811e <__d2b+0x96>
 80080ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080f0:	4405      	add	r5, r0
 80080f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080f6:	603d      	str	r5, [r7, #0]
 80080f8:	6030      	str	r0, [r6, #0]
 80080fa:	4620      	mov	r0, r4
 80080fc:	b002      	add	sp, #8
 80080fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008106:	e7d6      	b.n	80080b6 <__d2b+0x2e>
 8008108:	6161      	str	r1, [r4, #20]
 800810a:	e7e7      	b.n	80080dc <__d2b+0x54>
 800810c:	a801      	add	r0, sp, #4
 800810e:	f7ff fd61 	bl	8007bd4 <__lo0bits>
 8008112:	2101      	movs	r1, #1
 8008114:	9b01      	ldr	r3, [sp, #4]
 8008116:	6121      	str	r1, [r4, #16]
 8008118:	6163      	str	r3, [r4, #20]
 800811a:	3020      	adds	r0, #32
 800811c:	e7e5      	b.n	80080ea <__d2b+0x62>
 800811e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008122:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008126:	6038      	str	r0, [r7, #0]
 8008128:	6918      	ldr	r0, [r3, #16]
 800812a:	f7ff fd33 	bl	8007b94 <__hi0bits>
 800812e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008132:	6031      	str	r1, [r6, #0]
 8008134:	e7e1      	b.n	80080fa <__d2b+0x72>
 8008136:	bf00      	nop
 8008138:	080089fb 	.word	0x080089fb
 800813c:	08008a6c 	.word	0x08008a6c

08008140 <_calloc_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	fb02 f501 	mul.w	r5, r2, r1
 8008146:	4629      	mov	r1, r5
 8008148:	f000 f854 	bl	80081f4 <_malloc_r>
 800814c:	4604      	mov	r4, r0
 800814e:	b118      	cbz	r0, 8008158 <_calloc_r+0x18>
 8008150:	462a      	mov	r2, r5
 8008152:	2100      	movs	r1, #0
 8008154:	f7fd fd30 	bl	8005bb8 <memset>
 8008158:	4620      	mov	r0, r4
 800815a:	bd38      	pop	{r3, r4, r5, pc}

0800815c <_free_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4605      	mov	r5, r0
 8008160:	2900      	cmp	r1, #0
 8008162:	d043      	beq.n	80081ec <_free_r+0x90>
 8008164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008168:	1f0c      	subs	r4, r1, #4
 800816a:	2b00      	cmp	r3, #0
 800816c:	bfb8      	it	lt
 800816e:	18e4      	addlt	r4, r4, r3
 8008170:	f000 fade 	bl	8008730 <__malloc_lock>
 8008174:	4a1e      	ldr	r2, [pc, #120]	; (80081f0 <_free_r+0x94>)
 8008176:	6813      	ldr	r3, [r2, #0]
 8008178:	4610      	mov	r0, r2
 800817a:	b933      	cbnz	r3, 800818a <_free_r+0x2e>
 800817c:	6063      	str	r3, [r4, #4]
 800817e:	6014      	str	r4, [r2, #0]
 8008180:	4628      	mov	r0, r5
 8008182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008186:	f000 bad9 	b.w	800873c <__malloc_unlock>
 800818a:	42a3      	cmp	r3, r4
 800818c:	d90a      	bls.n	80081a4 <_free_r+0x48>
 800818e:	6821      	ldr	r1, [r4, #0]
 8008190:	1862      	adds	r2, r4, r1
 8008192:	4293      	cmp	r3, r2
 8008194:	bf01      	itttt	eq
 8008196:	681a      	ldreq	r2, [r3, #0]
 8008198:	685b      	ldreq	r3, [r3, #4]
 800819a:	1852      	addeq	r2, r2, r1
 800819c:	6022      	streq	r2, [r4, #0]
 800819e:	6063      	str	r3, [r4, #4]
 80081a0:	6004      	str	r4, [r0, #0]
 80081a2:	e7ed      	b.n	8008180 <_free_r+0x24>
 80081a4:	461a      	mov	r2, r3
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	b10b      	cbz	r3, 80081ae <_free_r+0x52>
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	d9fa      	bls.n	80081a4 <_free_r+0x48>
 80081ae:	6811      	ldr	r1, [r2, #0]
 80081b0:	1850      	adds	r0, r2, r1
 80081b2:	42a0      	cmp	r0, r4
 80081b4:	d10b      	bne.n	80081ce <_free_r+0x72>
 80081b6:	6820      	ldr	r0, [r4, #0]
 80081b8:	4401      	add	r1, r0
 80081ba:	1850      	adds	r0, r2, r1
 80081bc:	4283      	cmp	r3, r0
 80081be:	6011      	str	r1, [r2, #0]
 80081c0:	d1de      	bne.n	8008180 <_free_r+0x24>
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	4401      	add	r1, r0
 80081c8:	6011      	str	r1, [r2, #0]
 80081ca:	6053      	str	r3, [r2, #4]
 80081cc:	e7d8      	b.n	8008180 <_free_r+0x24>
 80081ce:	d902      	bls.n	80081d6 <_free_r+0x7a>
 80081d0:	230c      	movs	r3, #12
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	e7d4      	b.n	8008180 <_free_r+0x24>
 80081d6:	6820      	ldr	r0, [r4, #0]
 80081d8:	1821      	adds	r1, r4, r0
 80081da:	428b      	cmp	r3, r1
 80081dc:	bf01      	itttt	eq
 80081de:	6819      	ldreq	r1, [r3, #0]
 80081e0:	685b      	ldreq	r3, [r3, #4]
 80081e2:	1809      	addeq	r1, r1, r0
 80081e4:	6021      	streq	r1, [r4, #0]
 80081e6:	6063      	str	r3, [r4, #4]
 80081e8:	6054      	str	r4, [r2, #4]
 80081ea:	e7c9      	b.n	8008180 <_free_r+0x24>
 80081ec:	bd38      	pop	{r3, r4, r5, pc}
 80081ee:	bf00      	nop
 80081f0:	2000021c 	.word	0x2000021c

080081f4 <_malloc_r>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	1ccd      	adds	r5, r1, #3
 80081f8:	f025 0503 	bic.w	r5, r5, #3
 80081fc:	3508      	adds	r5, #8
 80081fe:	2d0c      	cmp	r5, #12
 8008200:	bf38      	it	cc
 8008202:	250c      	movcc	r5, #12
 8008204:	2d00      	cmp	r5, #0
 8008206:	4606      	mov	r6, r0
 8008208:	db01      	blt.n	800820e <_malloc_r+0x1a>
 800820a:	42a9      	cmp	r1, r5
 800820c:	d903      	bls.n	8008216 <_malloc_r+0x22>
 800820e:	230c      	movs	r3, #12
 8008210:	6033      	str	r3, [r6, #0]
 8008212:	2000      	movs	r0, #0
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008216:	f000 fa8b 	bl	8008730 <__malloc_lock>
 800821a:	4921      	ldr	r1, [pc, #132]	; (80082a0 <_malloc_r+0xac>)
 800821c:	680a      	ldr	r2, [r1, #0]
 800821e:	4614      	mov	r4, r2
 8008220:	b99c      	cbnz	r4, 800824a <_malloc_r+0x56>
 8008222:	4f20      	ldr	r7, [pc, #128]	; (80082a4 <_malloc_r+0xb0>)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	b923      	cbnz	r3, 8008232 <_malloc_r+0x3e>
 8008228:	4621      	mov	r1, r4
 800822a:	4630      	mov	r0, r6
 800822c:	f000 f994 	bl	8008558 <_sbrk_r>
 8008230:	6038      	str	r0, [r7, #0]
 8008232:	4629      	mov	r1, r5
 8008234:	4630      	mov	r0, r6
 8008236:	f000 f98f 	bl	8008558 <_sbrk_r>
 800823a:	1c43      	adds	r3, r0, #1
 800823c:	d123      	bne.n	8008286 <_malloc_r+0x92>
 800823e:	230c      	movs	r3, #12
 8008240:	4630      	mov	r0, r6
 8008242:	6033      	str	r3, [r6, #0]
 8008244:	f000 fa7a 	bl	800873c <__malloc_unlock>
 8008248:	e7e3      	b.n	8008212 <_malloc_r+0x1e>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	1b5b      	subs	r3, r3, r5
 800824e:	d417      	bmi.n	8008280 <_malloc_r+0x8c>
 8008250:	2b0b      	cmp	r3, #11
 8008252:	d903      	bls.n	800825c <_malloc_r+0x68>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	441c      	add	r4, r3
 8008258:	6025      	str	r5, [r4, #0]
 800825a:	e004      	b.n	8008266 <_malloc_r+0x72>
 800825c:	6863      	ldr	r3, [r4, #4]
 800825e:	42a2      	cmp	r2, r4
 8008260:	bf0c      	ite	eq
 8008262:	600b      	streq	r3, [r1, #0]
 8008264:	6053      	strne	r3, [r2, #4]
 8008266:	4630      	mov	r0, r6
 8008268:	f000 fa68 	bl	800873c <__malloc_unlock>
 800826c:	f104 000b 	add.w	r0, r4, #11
 8008270:	1d23      	adds	r3, r4, #4
 8008272:	f020 0007 	bic.w	r0, r0, #7
 8008276:	1ac2      	subs	r2, r0, r3
 8008278:	d0cc      	beq.n	8008214 <_malloc_r+0x20>
 800827a:	1a1b      	subs	r3, r3, r0
 800827c:	50a3      	str	r3, [r4, r2]
 800827e:	e7c9      	b.n	8008214 <_malloc_r+0x20>
 8008280:	4622      	mov	r2, r4
 8008282:	6864      	ldr	r4, [r4, #4]
 8008284:	e7cc      	b.n	8008220 <_malloc_r+0x2c>
 8008286:	1cc4      	adds	r4, r0, #3
 8008288:	f024 0403 	bic.w	r4, r4, #3
 800828c:	42a0      	cmp	r0, r4
 800828e:	d0e3      	beq.n	8008258 <_malloc_r+0x64>
 8008290:	1a21      	subs	r1, r4, r0
 8008292:	4630      	mov	r0, r6
 8008294:	f000 f960 	bl	8008558 <_sbrk_r>
 8008298:	3001      	adds	r0, #1
 800829a:	d1dd      	bne.n	8008258 <_malloc_r+0x64>
 800829c:	e7cf      	b.n	800823e <_malloc_r+0x4a>
 800829e:	bf00      	nop
 80082a0:	2000021c 	.word	0x2000021c
 80082a4:	20000220 	.word	0x20000220

080082a8 <__sfputc_r>:
 80082a8:	6893      	ldr	r3, [r2, #8]
 80082aa:	b410      	push	{r4}
 80082ac:	3b01      	subs	r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	6093      	str	r3, [r2, #8]
 80082b2:	da07      	bge.n	80082c4 <__sfputc_r+0x1c>
 80082b4:	6994      	ldr	r4, [r2, #24]
 80082b6:	42a3      	cmp	r3, r4
 80082b8:	db01      	blt.n	80082be <__sfputc_r+0x16>
 80082ba:	290a      	cmp	r1, #10
 80082bc:	d102      	bne.n	80082c4 <__sfputc_r+0x1c>
 80082be:	bc10      	pop	{r4}
 80082c0:	f7fe ba36 	b.w	8006730 <__swbuf_r>
 80082c4:	6813      	ldr	r3, [r2, #0]
 80082c6:	1c58      	adds	r0, r3, #1
 80082c8:	6010      	str	r0, [r2, #0]
 80082ca:	7019      	strb	r1, [r3, #0]
 80082cc:	4608      	mov	r0, r1
 80082ce:	bc10      	pop	{r4}
 80082d0:	4770      	bx	lr

080082d2 <__sfputs_r>:
 80082d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d4:	4606      	mov	r6, r0
 80082d6:	460f      	mov	r7, r1
 80082d8:	4614      	mov	r4, r2
 80082da:	18d5      	adds	r5, r2, r3
 80082dc:	42ac      	cmp	r4, r5
 80082de:	d101      	bne.n	80082e4 <__sfputs_r+0x12>
 80082e0:	2000      	movs	r0, #0
 80082e2:	e007      	b.n	80082f4 <__sfputs_r+0x22>
 80082e4:	463a      	mov	r2, r7
 80082e6:	4630      	mov	r0, r6
 80082e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ec:	f7ff ffdc 	bl	80082a8 <__sfputc_r>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d1f3      	bne.n	80082dc <__sfputs_r+0xa>
 80082f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082f8 <_vfiprintf_r>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	460d      	mov	r5, r1
 80082fe:	4614      	mov	r4, r2
 8008300:	4698      	mov	r8, r3
 8008302:	4606      	mov	r6, r0
 8008304:	b09d      	sub	sp, #116	; 0x74
 8008306:	b118      	cbz	r0, 8008310 <_vfiprintf_r+0x18>
 8008308:	6983      	ldr	r3, [r0, #24]
 800830a:	b90b      	cbnz	r3, 8008310 <_vfiprintf_r+0x18>
 800830c:	f7ff fa68 	bl	80077e0 <__sinit>
 8008310:	4b89      	ldr	r3, [pc, #548]	; (8008538 <_vfiprintf_r+0x240>)
 8008312:	429d      	cmp	r5, r3
 8008314:	d11b      	bne.n	800834e <_vfiprintf_r+0x56>
 8008316:	6875      	ldr	r5, [r6, #4]
 8008318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800831a:	07d9      	lsls	r1, r3, #31
 800831c:	d405      	bmi.n	800832a <_vfiprintf_r+0x32>
 800831e:	89ab      	ldrh	r3, [r5, #12]
 8008320:	059a      	lsls	r2, r3, #22
 8008322:	d402      	bmi.n	800832a <_vfiprintf_r+0x32>
 8008324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008326:	f7ff fafe 	bl	8007926 <__retarget_lock_acquire_recursive>
 800832a:	89ab      	ldrh	r3, [r5, #12]
 800832c:	071b      	lsls	r3, r3, #28
 800832e:	d501      	bpl.n	8008334 <_vfiprintf_r+0x3c>
 8008330:	692b      	ldr	r3, [r5, #16]
 8008332:	b9eb      	cbnz	r3, 8008370 <_vfiprintf_r+0x78>
 8008334:	4629      	mov	r1, r5
 8008336:	4630      	mov	r0, r6
 8008338:	f7fe fa4c 	bl	80067d4 <__swsetup_r>
 800833c:	b1c0      	cbz	r0, 8008370 <_vfiprintf_r+0x78>
 800833e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008340:	07dc      	lsls	r4, r3, #31
 8008342:	d50e      	bpl.n	8008362 <_vfiprintf_r+0x6a>
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	b01d      	add	sp, #116	; 0x74
 800834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834e:	4b7b      	ldr	r3, [pc, #492]	; (800853c <_vfiprintf_r+0x244>)
 8008350:	429d      	cmp	r5, r3
 8008352:	d101      	bne.n	8008358 <_vfiprintf_r+0x60>
 8008354:	68b5      	ldr	r5, [r6, #8]
 8008356:	e7df      	b.n	8008318 <_vfiprintf_r+0x20>
 8008358:	4b79      	ldr	r3, [pc, #484]	; (8008540 <_vfiprintf_r+0x248>)
 800835a:	429d      	cmp	r5, r3
 800835c:	bf08      	it	eq
 800835e:	68f5      	ldreq	r5, [r6, #12]
 8008360:	e7da      	b.n	8008318 <_vfiprintf_r+0x20>
 8008362:	89ab      	ldrh	r3, [r5, #12]
 8008364:	0598      	lsls	r0, r3, #22
 8008366:	d4ed      	bmi.n	8008344 <_vfiprintf_r+0x4c>
 8008368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800836a:	f7ff fadd 	bl	8007928 <__retarget_lock_release_recursive>
 800836e:	e7e9      	b.n	8008344 <_vfiprintf_r+0x4c>
 8008370:	2300      	movs	r3, #0
 8008372:	9309      	str	r3, [sp, #36]	; 0x24
 8008374:	2320      	movs	r3, #32
 8008376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800837a:	2330      	movs	r3, #48	; 0x30
 800837c:	f04f 0901 	mov.w	r9, #1
 8008380:	f8cd 800c 	str.w	r8, [sp, #12]
 8008384:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008544 <_vfiprintf_r+0x24c>
 8008388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800838c:	4623      	mov	r3, r4
 800838e:	469a      	mov	sl, r3
 8008390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008394:	b10a      	cbz	r2, 800839a <_vfiprintf_r+0xa2>
 8008396:	2a25      	cmp	r2, #37	; 0x25
 8008398:	d1f9      	bne.n	800838e <_vfiprintf_r+0x96>
 800839a:	ebba 0b04 	subs.w	fp, sl, r4
 800839e:	d00b      	beq.n	80083b8 <_vfiprintf_r+0xc0>
 80083a0:	465b      	mov	r3, fp
 80083a2:	4622      	mov	r2, r4
 80083a4:	4629      	mov	r1, r5
 80083a6:	4630      	mov	r0, r6
 80083a8:	f7ff ff93 	bl	80082d2 <__sfputs_r>
 80083ac:	3001      	adds	r0, #1
 80083ae:	f000 80aa 	beq.w	8008506 <_vfiprintf_r+0x20e>
 80083b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083b4:	445a      	add	r2, fp
 80083b6:	9209      	str	r2, [sp, #36]	; 0x24
 80083b8:	f89a 3000 	ldrb.w	r3, [sl]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 80a2 	beq.w	8008506 <_vfiprintf_r+0x20e>
 80083c2:	2300      	movs	r3, #0
 80083c4:	f04f 32ff 	mov.w	r2, #4294967295
 80083c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083cc:	f10a 0a01 	add.w	sl, sl, #1
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	9307      	str	r3, [sp, #28]
 80083d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083d8:	931a      	str	r3, [sp, #104]	; 0x68
 80083da:	4654      	mov	r4, sl
 80083dc:	2205      	movs	r2, #5
 80083de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e2:	4858      	ldr	r0, [pc, #352]	; (8008544 <_vfiprintf_r+0x24c>)
 80083e4:	f7ff fb0e 	bl	8007a04 <memchr>
 80083e8:	9a04      	ldr	r2, [sp, #16]
 80083ea:	b9d8      	cbnz	r0, 8008424 <_vfiprintf_r+0x12c>
 80083ec:	06d1      	lsls	r1, r2, #27
 80083ee:	bf44      	itt	mi
 80083f0:	2320      	movmi	r3, #32
 80083f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083f6:	0713      	lsls	r3, r2, #28
 80083f8:	bf44      	itt	mi
 80083fa:	232b      	movmi	r3, #43	; 0x2b
 80083fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008400:	f89a 3000 	ldrb.w	r3, [sl]
 8008404:	2b2a      	cmp	r3, #42	; 0x2a
 8008406:	d015      	beq.n	8008434 <_vfiprintf_r+0x13c>
 8008408:	4654      	mov	r4, sl
 800840a:	2000      	movs	r0, #0
 800840c:	f04f 0c0a 	mov.w	ip, #10
 8008410:	9a07      	ldr	r2, [sp, #28]
 8008412:	4621      	mov	r1, r4
 8008414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008418:	3b30      	subs	r3, #48	; 0x30
 800841a:	2b09      	cmp	r3, #9
 800841c:	d94e      	bls.n	80084bc <_vfiprintf_r+0x1c4>
 800841e:	b1b0      	cbz	r0, 800844e <_vfiprintf_r+0x156>
 8008420:	9207      	str	r2, [sp, #28]
 8008422:	e014      	b.n	800844e <_vfiprintf_r+0x156>
 8008424:	eba0 0308 	sub.w	r3, r0, r8
 8008428:	fa09 f303 	lsl.w	r3, r9, r3
 800842c:	4313      	orrs	r3, r2
 800842e:	46a2      	mov	sl, r4
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	e7d2      	b.n	80083da <_vfiprintf_r+0xe2>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	1d19      	adds	r1, r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	9103      	str	r1, [sp, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	bfbb      	ittet	lt
 8008440:	425b      	neglt	r3, r3
 8008442:	f042 0202 	orrlt.w	r2, r2, #2
 8008446:	9307      	strge	r3, [sp, #28]
 8008448:	9307      	strlt	r3, [sp, #28]
 800844a:	bfb8      	it	lt
 800844c:	9204      	strlt	r2, [sp, #16]
 800844e:	7823      	ldrb	r3, [r4, #0]
 8008450:	2b2e      	cmp	r3, #46	; 0x2e
 8008452:	d10c      	bne.n	800846e <_vfiprintf_r+0x176>
 8008454:	7863      	ldrb	r3, [r4, #1]
 8008456:	2b2a      	cmp	r3, #42	; 0x2a
 8008458:	d135      	bne.n	80084c6 <_vfiprintf_r+0x1ce>
 800845a:	9b03      	ldr	r3, [sp, #12]
 800845c:	3402      	adds	r4, #2
 800845e:	1d1a      	adds	r2, r3, #4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	9203      	str	r2, [sp, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	bfb8      	it	lt
 8008468:	f04f 33ff 	movlt.w	r3, #4294967295
 800846c:	9305      	str	r3, [sp, #20]
 800846e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008554 <_vfiprintf_r+0x25c>
 8008472:	2203      	movs	r2, #3
 8008474:	4650      	mov	r0, sl
 8008476:	7821      	ldrb	r1, [r4, #0]
 8008478:	f7ff fac4 	bl	8007a04 <memchr>
 800847c:	b140      	cbz	r0, 8008490 <_vfiprintf_r+0x198>
 800847e:	2340      	movs	r3, #64	; 0x40
 8008480:	eba0 000a 	sub.w	r0, r0, sl
 8008484:	fa03 f000 	lsl.w	r0, r3, r0
 8008488:	9b04      	ldr	r3, [sp, #16]
 800848a:	3401      	adds	r4, #1
 800848c:	4303      	orrs	r3, r0
 800848e:	9304      	str	r3, [sp, #16]
 8008490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008494:	2206      	movs	r2, #6
 8008496:	482c      	ldr	r0, [pc, #176]	; (8008548 <_vfiprintf_r+0x250>)
 8008498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800849c:	f7ff fab2 	bl	8007a04 <memchr>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d03f      	beq.n	8008524 <_vfiprintf_r+0x22c>
 80084a4:	4b29      	ldr	r3, [pc, #164]	; (800854c <_vfiprintf_r+0x254>)
 80084a6:	bb1b      	cbnz	r3, 80084f0 <_vfiprintf_r+0x1f8>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	3307      	adds	r3, #7
 80084ac:	f023 0307 	bic.w	r3, r3, #7
 80084b0:	3308      	adds	r3, #8
 80084b2:	9303      	str	r3, [sp, #12]
 80084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b6:	443b      	add	r3, r7
 80084b8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ba:	e767      	b.n	800838c <_vfiprintf_r+0x94>
 80084bc:	460c      	mov	r4, r1
 80084be:	2001      	movs	r0, #1
 80084c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084c4:	e7a5      	b.n	8008412 <_vfiprintf_r+0x11a>
 80084c6:	2300      	movs	r3, #0
 80084c8:	f04f 0c0a 	mov.w	ip, #10
 80084cc:	4619      	mov	r1, r3
 80084ce:	3401      	adds	r4, #1
 80084d0:	9305      	str	r3, [sp, #20]
 80084d2:	4620      	mov	r0, r4
 80084d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084d8:	3a30      	subs	r2, #48	; 0x30
 80084da:	2a09      	cmp	r2, #9
 80084dc:	d903      	bls.n	80084e6 <_vfiprintf_r+0x1ee>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0c5      	beq.n	800846e <_vfiprintf_r+0x176>
 80084e2:	9105      	str	r1, [sp, #20]
 80084e4:	e7c3      	b.n	800846e <_vfiprintf_r+0x176>
 80084e6:	4604      	mov	r4, r0
 80084e8:	2301      	movs	r3, #1
 80084ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ee:	e7f0      	b.n	80084d2 <_vfiprintf_r+0x1da>
 80084f0:	ab03      	add	r3, sp, #12
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	462a      	mov	r2, r5
 80084f6:	4630      	mov	r0, r6
 80084f8:	4b15      	ldr	r3, [pc, #84]	; (8008550 <_vfiprintf_r+0x258>)
 80084fa:	a904      	add	r1, sp, #16
 80084fc:	f7fd fc02 	bl	8005d04 <_printf_float>
 8008500:	4607      	mov	r7, r0
 8008502:	1c78      	adds	r0, r7, #1
 8008504:	d1d6      	bne.n	80084b4 <_vfiprintf_r+0x1bc>
 8008506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008508:	07d9      	lsls	r1, r3, #31
 800850a:	d405      	bmi.n	8008518 <_vfiprintf_r+0x220>
 800850c:	89ab      	ldrh	r3, [r5, #12]
 800850e:	059a      	lsls	r2, r3, #22
 8008510:	d402      	bmi.n	8008518 <_vfiprintf_r+0x220>
 8008512:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008514:	f7ff fa08 	bl	8007928 <__retarget_lock_release_recursive>
 8008518:	89ab      	ldrh	r3, [r5, #12]
 800851a:	065b      	lsls	r3, r3, #25
 800851c:	f53f af12 	bmi.w	8008344 <_vfiprintf_r+0x4c>
 8008520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008522:	e711      	b.n	8008348 <_vfiprintf_r+0x50>
 8008524:	ab03      	add	r3, sp, #12
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	462a      	mov	r2, r5
 800852a:	4630      	mov	r0, r6
 800852c:	4b08      	ldr	r3, [pc, #32]	; (8008550 <_vfiprintf_r+0x258>)
 800852e:	a904      	add	r1, sp, #16
 8008530:	f7fd fe84 	bl	800623c <_printf_i>
 8008534:	e7e4      	b.n	8008500 <_vfiprintf_r+0x208>
 8008536:	bf00      	nop
 8008538:	08008a2c 	.word	0x08008a2c
 800853c:	08008a4c 	.word	0x08008a4c
 8008540:	08008a0c 	.word	0x08008a0c
 8008544:	08008bcc 	.word	0x08008bcc
 8008548:	08008bd6 	.word	0x08008bd6
 800854c:	08005d05 	.word	0x08005d05
 8008550:	080082d3 	.word	0x080082d3
 8008554:	08008bd2 	.word	0x08008bd2

08008558 <_sbrk_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	2300      	movs	r3, #0
 800855c:	4d05      	ldr	r5, [pc, #20]	; (8008574 <_sbrk_r+0x1c>)
 800855e:	4604      	mov	r4, r0
 8008560:	4608      	mov	r0, r1
 8008562:	602b      	str	r3, [r5, #0]
 8008564:	f7fc f93e 	bl	80047e4 <_sbrk>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d102      	bne.n	8008572 <_sbrk_r+0x1a>
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	b103      	cbz	r3, 8008572 <_sbrk_r+0x1a>
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	bd38      	pop	{r3, r4, r5, pc}
 8008574:	20000240 	.word	0x20000240

08008578 <__sread>:
 8008578:	b510      	push	{r4, lr}
 800857a:	460c      	mov	r4, r1
 800857c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008580:	f000 f8e2 	bl	8008748 <_read_r>
 8008584:	2800      	cmp	r0, #0
 8008586:	bfab      	itete	ge
 8008588:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800858a:	89a3      	ldrhlt	r3, [r4, #12]
 800858c:	181b      	addge	r3, r3, r0
 800858e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008592:	bfac      	ite	ge
 8008594:	6563      	strge	r3, [r4, #84]	; 0x54
 8008596:	81a3      	strhlt	r3, [r4, #12]
 8008598:	bd10      	pop	{r4, pc}

0800859a <__swrite>:
 800859a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859e:	461f      	mov	r7, r3
 80085a0:	898b      	ldrh	r3, [r1, #12]
 80085a2:	4605      	mov	r5, r0
 80085a4:	05db      	lsls	r3, r3, #23
 80085a6:	460c      	mov	r4, r1
 80085a8:	4616      	mov	r6, r2
 80085aa:	d505      	bpl.n	80085b8 <__swrite+0x1e>
 80085ac:	2302      	movs	r3, #2
 80085ae:	2200      	movs	r2, #0
 80085b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085b4:	f000 f898 	bl	80086e8 <_lseek_r>
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	4632      	mov	r2, r6
 80085bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085c0:	81a3      	strh	r3, [r4, #12]
 80085c2:	4628      	mov	r0, r5
 80085c4:	463b      	mov	r3, r7
 80085c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ce:	f000 b817 	b.w	8008600 <_write_r>

080085d2 <__sseek>:
 80085d2:	b510      	push	{r4, lr}
 80085d4:	460c      	mov	r4, r1
 80085d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085da:	f000 f885 	bl	80086e8 <_lseek_r>
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	bf15      	itete	ne
 80085e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085ee:	81a3      	strheq	r3, [r4, #12]
 80085f0:	bf18      	it	ne
 80085f2:	81a3      	strhne	r3, [r4, #12]
 80085f4:	bd10      	pop	{r4, pc}

080085f6 <__sclose>:
 80085f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fa:	f000 b831 	b.w	8008660 <_close_r>
	...

08008600 <_write_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	4611      	mov	r1, r2
 8008608:	2200      	movs	r2, #0
 800860a:	4d05      	ldr	r5, [pc, #20]	; (8008620 <_write_r+0x20>)
 800860c:	602a      	str	r2, [r5, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	f7fc f89c 	bl	800474c <_write>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_write_r+0x1e>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_write_r+0x1e>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20000240 	.word	0x20000240

08008624 <__assert_func>:
 8008624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008626:	4614      	mov	r4, r2
 8008628:	461a      	mov	r2, r3
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <__assert_func+0x2c>)
 800862c:	4605      	mov	r5, r0
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68d8      	ldr	r0, [r3, #12]
 8008632:	b14c      	cbz	r4, 8008648 <__assert_func+0x24>
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <__assert_func+0x30>)
 8008636:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800863a:	9100      	str	r1, [sp, #0]
 800863c:	462b      	mov	r3, r5
 800863e:	4906      	ldr	r1, [pc, #24]	; (8008658 <__assert_func+0x34>)
 8008640:	f000 f81e 	bl	8008680 <fiprintf>
 8008644:	f000 f89f 	bl	8008786 <abort>
 8008648:	4b04      	ldr	r3, [pc, #16]	; (800865c <__assert_func+0x38>)
 800864a:	461c      	mov	r4, r3
 800864c:	e7f3      	b.n	8008636 <__assert_func+0x12>
 800864e:	bf00      	nop
 8008650:	20000018 	.word	0x20000018
 8008654:	08008bdd 	.word	0x08008bdd
 8008658:	08008bea 	.word	0x08008bea
 800865c:	08008c18 	.word	0x08008c18

08008660 <_close_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	2300      	movs	r3, #0
 8008664:	4d05      	ldr	r5, [pc, #20]	; (800867c <_close_r+0x1c>)
 8008666:	4604      	mov	r4, r0
 8008668:	4608      	mov	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7fc f88a 	bl	8004784 <_close>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d102      	bne.n	800867a <_close_r+0x1a>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	b103      	cbz	r3, 800867a <_close_r+0x1a>
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	20000240 	.word	0x20000240

08008680 <fiprintf>:
 8008680:	b40e      	push	{r1, r2, r3}
 8008682:	b503      	push	{r0, r1, lr}
 8008684:	4601      	mov	r1, r0
 8008686:	ab03      	add	r3, sp, #12
 8008688:	4805      	ldr	r0, [pc, #20]	; (80086a0 <fiprintf+0x20>)
 800868a:	f853 2b04 	ldr.w	r2, [r3], #4
 800868e:	6800      	ldr	r0, [r0, #0]
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	f7ff fe31 	bl	80082f8 <_vfiprintf_r>
 8008696:	b002      	add	sp, #8
 8008698:	f85d eb04 	ldr.w	lr, [sp], #4
 800869c:	b003      	add	sp, #12
 800869e:	4770      	bx	lr
 80086a0:	20000018 	.word	0x20000018

080086a4 <_fstat_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	2300      	movs	r3, #0
 80086a8:	4d06      	ldr	r5, [pc, #24]	; (80086c4 <_fstat_r+0x20>)
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	4611      	mov	r1, r2
 80086b0:	602b      	str	r3, [r5, #0]
 80086b2:	f7fc f872 	bl	800479a <_fstat>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d102      	bne.n	80086c0 <_fstat_r+0x1c>
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	b103      	cbz	r3, 80086c0 <_fstat_r+0x1c>
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	bd38      	pop	{r3, r4, r5, pc}
 80086c2:	bf00      	nop
 80086c4:	20000240 	.word	0x20000240

080086c8 <_isatty_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	2300      	movs	r3, #0
 80086cc:	4d05      	ldr	r5, [pc, #20]	; (80086e4 <_isatty_r+0x1c>)
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f7fc f870 	bl	80047b8 <_isatty>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_isatty_r+0x1a>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_isatty_r+0x1a>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	20000240 	.word	0x20000240

080086e8 <_lseek_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	2200      	movs	r2, #0
 80086f2:	4d05      	ldr	r5, [pc, #20]	; (8008708 <_lseek_r+0x20>)
 80086f4:	602a      	str	r2, [r5, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	f7fc f868 	bl	80047cc <_lseek>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d102      	bne.n	8008706 <_lseek_r+0x1e>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	b103      	cbz	r3, 8008706 <_lseek_r+0x1e>
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	20000240 	.word	0x20000240

0800870c <__ascii_mbtowc>:
 800870c:	b082      	sub	sp, #8
 800870e:	b901      	cbnz	r1, 8008712 <__ascii_mbtowc+0x6>
 8008710:	a901      	add	r1, sp, #4
 8008712:	b142      	cbz	r2, 8008726 <__ascii_mbtowc+0x1a>
 8008714:	b14b      	cbz	r3, 800872a <__ascii_mbtowc+0x1e>
 8008716:	7813      	ldrb	r3, [r2, #0]
 8008718:	600b      	str	r3, [r1, #0]
 800871a:	7812      	ldrb	r2, [r2, #0]
 800871c:	1e10      	subs	r0, r2, #0
 800871e:	bf18      	it	ne
 8008720:	2001      	movne	r0, #1
 8008722:	b002      	add	sp, #8
 8008724:	4770      	bx	lr
 8008726:	4610      	mov	r0, r2
 8008728:	e7fb      	b.n	8008722 <__ascii_mbtowc+0x16>
 800872a:	f06f 0001 	mvn.w	r0, #1
 800872e:	e7f8      	b.n	8008722 <__ascii_mbtowc+0x16>

08008730 <__malloc_lock>:
 8008730:	4801      	ldr	r0, [pc, #4]	; (8008738 <__malloc_lock+0x8>)
 8008732:	f7ff b8f8 	b.w	8007926 <__retarget_lock_acquire_recursive>
 8008736:	bf00      	nop
 8008738:	20000238 	.word	0x20000238

0800873c <__malloc_unlock>:
 800873c:	4801      	ldr	r0, [pc, #4]	; (8008744 <__malloc_unlock+0x8>)
 800873e:	f7ff b8f3 	b.w	8007928 <__retarget_lock_release_recursive>
 8008742:	bf00      	nop
 8008744:	20000238 	.word	0x20000238

08008748 <_read_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	2200      	movs	r2, #0
 8008752:	4d05      	ldr	r5, [pc, #20]	; (8008768 <_read_r+0x20>)
 8008754:	602a      	str	r2, [r5, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	f7fb ffdb 	bl	8004712 <_read>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_read_r+0x1e>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_read_r+0x1e>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20000240 	.word	0x20000240

0800876c <__ascii_wctomb>:
 800876c:	4603      	mov	r3, r0
 800876e:	4608      	mov	r0, r1
 8008770:	b141      	cbz	r1, 8008784 <__ascii_wctomb+0x18>
 8008772:	2aff      	cmp	r2, #255	; 0xff
 8008774:	d904      	bls.n	8008780 <__ascii_wctomb+0x14>
 8008776:	228a      	movs	r2, #138	; 0x8a
 8008778:	f04f 30ff 	mov.w	r0, #4294967295
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	4770      	bx	lr
 8008780:	2001      	movs	r0, #1
 8008782:	700a      	strb	r2, [r1, #0]
 8008784:	4770      	bx	lr

08008786 <abort>:
 8008786:	2006      	movs	r0, #6
 8008788:	b508      	push	{r3, lr}
 800878a:	f000 f82b 	bl	80087e4 <raise>
 800878e:	2001      	movs	r0, #1
 8008790:	f7fb ffb5 	bl	80046fe <_exit>

08008794 <_raise_r>:
 8008794:	291f      	cmp	r1, #31
 8008796:	b538      	push	{r3, r4, r5, lr}
 8008798:	4604      	mov	r4, r0
 800879a:	460d      	mov	r5, r1
 800879c:	d904      	bls.n	80087a8 <_raise_r+0x14>
 800879e:	2316      	movs	r3, #22
 80087a0:	6003      	str	r3, [r0, #0]
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087aa:	b112      	cbz	r2, 80087b2 <_raise_r+0x1e>
 80087ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087b0:	b94b      	cbnz	r3, 80087c6 <_raise_r+0x32>
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 f830 	bl	8008818 <_getpid_r>
 80087b8:	462a      	mov	r2, r5
 80087ba:	4601      	mov	r1, r0
 80087bc:	4620      	mov	r0, r4
 80087be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087c2:	f000 b817 	b.w	80087f4 <_kill_r>
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d00a      	beq.n	80087e0 <_raise_r+0x4c>
 80087ca:	1c59      	adds	r1, r3, #1
 80087cc:	d103      	bne.n	80087d6 <_raise_r+0x42>
 80087ce:	2316      	movs	r3, #22
 80087d0:	6003      	str	r3, [r0, #0]
 80087d2:	2001      	movs	r0, #1
 80087d4:	e7e7      	b.n	80087a6 <_raise_r+0x12>
 80087d6:	2400      	movs	r4, #0
 80087d8:	4628      	mov	r0, r5
 80087da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087de:	4798      	blx	r3
 80087e0:	2000      	movs	r0, #0
 80087e2:	e7e0      	b.n	80087a6 <_raise_r+0x12>

080087e4 <raise>:
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <raise+0xc>)
 80087e6:	4601      	mov	r1, r0
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	f7ff bfd3 	b.w	8008794 <_raise_r>
 80087ee:	bf00      	nop
 80087f0:	20000018 	.word	0x20000018

080087f4 <_kill_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	2300      	movs	r3, #0
 80087f8:	4d06      	ldr	r5, [pc, #24]	; (8008814 <_kill_r+0x20>)
 80087fa:	4604      	mov	r4, r0
 80087fc:	4608      	mov	r0, r1
 80087fe:	4611      	mov	r1, r2
 8008800:	602b      	str	r3, [r5, #0]
 8008802:	f7fb ff6c 	bl	80046de <_kill>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d102      	bne.n	8008810 <_kill_r+0x1c>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	b103      	cbz	r3, 8008810 <_kill_r+0x1c>
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	bd38      	pop	{r3, r4, r5, pc}
 8008812:	bf00      	nop
 8008814:	20000240 	.word	0x20000240

08008818 <_getpid_r>:
 8008818:	f7fb bf5a 	b.w	80046d0 <_getpid>

0800881c <_init>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	bf00      	nop
 8008820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008822:	bc08      	pop	{r3}
 8008824:	469e      	mov	lr, r3
 8008826:	4770      	bx	lr

08008828 <_fini>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	bf00      	nop
 800882c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882e:	bc08      	pop	{r3}
 8008830:	469e      	mov	lr, r3
 8008832:	4770      	bx	lr

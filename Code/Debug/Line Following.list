
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000819c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080082b0  080082b0  000182b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008678  08008678  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008678  08008678  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008678  08008678  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  200001e8  08008868  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08008868  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f44  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca8  00000000  00000000  0002a155  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  0002be00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002c938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000158dd  00000000  00000000  0002d388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fca  00000000  00000000  00042c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dfc1  00000000  00000000  00049c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7bf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e64  00000000  00000000  000b7c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008294 	.word	0x08008294

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008294 	.word	0x08008294

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	621a      	str	r2, [r3, #32]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	611a      	str	r2, [r3, #16]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	615a      	str	r2, [r3, #20]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <MotorL_EnablePWM>:
 *      Author: vanti
 */
#include "MotorControl.h"

void MotorL_EnablePWM(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8001104:	2101      	movs	r1, #1
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <MotorL_EnablePWM+0x10>)
 8001108:	f7ff ffb2 	bl	8001070 <LL_TIM_CC_EnableChannel>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012c00 	.word	0x40012c00

08001114 <MotorR_EnablePWM>:
{
	LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorR_EnablePWM(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <MotorR_EnablePWM+0x14>)
 800111e:	f7ff ffa7 	bl	8001070 <LL_TIM_CC_EnableChannel>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012c00 	.word	0x40012c00

0800112c <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800113a:	db03      	blt.n	8001144 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 800113c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e005      	b.n	8001150 <MotorL_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800114a:	dc01      	bgt.n	8001150 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MotorL_SetPWM+0x60>)
 800114e:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0a      	blt.n	800116c <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MotorL_SetPWM+0x64>)
 800115e:	f7ff ff97 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <MotorL_SetPWM+0x68>)
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MotorL_SetPWM+0x6c>)
 8001166:	f7ff ffbc 	bl	80010e2 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800116a:	e00a      	b.n	8001182 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001172:	4619      	mov	r1, r3
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <MotorL_SetPWM+0x64>)
 8001176:	f7ff ff8b 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800117a:	4906      	ldr	r1, [pc, #24]	; (8001194 <MotorL_SetPWM+0x68>)
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <MotorL_SetPWM+0x6c>)
 800117e:	f7ff ffa1 	bl	80010c4 <LL_GPIO_SetOutputPin>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	ffffe3e0 	.word	0xffffe3e0
 8001190:	40012c00 	.word	0x40012c00
 8001194:	04800080 	.word	0x04800080
 8001198:	40010c00 	.word	0x40010c00

0800119c <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011aa:	db03      	blt.n	80011b4 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 80011ac:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e005      	b.n	80011c0 <MotorR_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80011ba:	dc01      	bgt.n	80011c0 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MotorR_SetPWM+0x60>)
 80011be:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0a      	blt.n	80011dc <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MotorR_SetPWM+0x64>)
 80011ce:	f7ff ff6c 	bl	80010aa <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80011d2:	490c      	ldr	r1, [pc, #48]	; (8001204 <MotorR_SetPWM+0x68>)
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MotorR_SetPWM+0x6c>)
 80011d6:	f7ff ff84 	bl	80010e2 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 80011da:	e00a      	b.n	80011f2 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <MotorR_SetPWM+0x64>)
 80011e6:	f7ff ff60 	bl	80010aa <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80011ea:	4906      	ldr	r1, [pc, #24]	; (8001204 <MotorR_SetPWM+0x68>)
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <MotorR_SetPWM+0x6c>)
 80011ee:	f7ff ff69 	bl	80010c4 <LL_GPIO_SetOutputPin>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	ffffe3e0 	.word	0xffffe3e0
 8001200:	40012c00 	.word	0x40012c00
 8001204:	04020002 	.word	0x04020002
 8001208:	40010800 	.word	0x40010800

0800120c <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90)
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <Servo_SetAngle+0x64>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff00 	bl	800101c <__aeabi_fcmpgt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <Servo_SetAngle+0x1c>
		ServoAngle = 90;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <Servo_SetAngle+0x64>)
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e008      	b.n	800123a <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90)
 8001228:	4912      	ldr	r1, [pc, #72]	; (8001274 <Servo_SetAngle+0x68>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fed8 	bl	8000fe0 <__aeabi_fcmplt>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <Servo_SetAngle+0x2e>
		ServoAngle = -90;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <Servo_SetAngle+0x68>)
 8001238:	607b      	str	r3, [r7, #4]
	//	uint16_t ServoCPR = 540 + ServoAngle*2;
	LL_TIM_OC_SetCompareCH1(TIM4, 4500 + ServoAngle * 50 / 3);
 800123a:	490f      	ldr	r1, [pc, #60]	; (8001278 <Servo_SetAngle+0x6c>)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fd31 	bl	8000ca4 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	490d      	ldr	r1, [pc, #52]	; (800127c <Servo_SetAngle+0x70>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fde0 	bl	8000e0c <__aeabi_fdiv>
 800124c:	4603      	mov	r3, r0
 800124e:	490c      	ldr	r1, [pc, #48]	; (8001280 <Servo_SetAngle+0x74>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc1f 	bl	8000a94 <__addsf3>
 8001256:	4603      	mov	r3, r0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fee9 	bl	8001030 <__aeabi_f2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	4619      	mov	r1, r3
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <Servo_SetAngle+0x78>)
 8001264:	f7ff ff14 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	42b40000 	.word	0x42b40000
 8001274:	c2b40000 	.word	0xc2b40000
 8001278:	42480000 	.word	0x42480000
 800127c:	40400000 	.word	0x40400000
 8001280:	458ca000 	.word	0x458ca000
 8001284:	40000800 	.word	0x40000800

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <__NVIC_EnableIRQ+0x34>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013dc:	b490      	push	{r4, r7}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	332c      	adds	r3, #44	; 0x2c
 80013ec:	4619      	mov	r1, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013f8:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	fa92 f2a2 	rbit	r2, r2
 8001400:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	fab2 f282 	clz	r2, r2
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	40d3      	lsrs	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	211f      	movs	r1, #31
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 011f 	and.w	r1, r3, #31
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bc90      	pop	{r4, r7}
 8001440:	4770      	bx	lr

08001442 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001466:	b490      	push	{r4, r7}
 8001468:	b08a      	sub	sp, #40	; 0x28
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	330c      	adds	r3, #12
 8001476:	4619      	mov	r1, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	fa92 f2a2 	rbit	r2, r2
 800148a:	613a      	str	r2, [r7, #16]
  return result;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	40d3      	lsrs	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014a4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014a8:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	69f9      	ldr	r1, [r7, #28]
 80014ac:	fa91 f1a1 	rbit	r1, r1
 80014b0:	61b9      	str	r1, [r7, #24]
  return result;
 80014b2:	69b9      	ldr	r1, [r7, #24]
 80014b4:	fab1 f181 	clz	r1, r1
 80014b8:	b2c9      	uxtb	r1, r1
 80014ba:	40cb      	lsrs	r3, r1
 80014bc:	2107      	movs	r1, #7
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	401a      	ands	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014cc:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014d0:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d4:	fa91 f1a1 	rbit	r1, r1
 80014d8:	6239      	str	r1, [r7, #32]
  return result;
 80014da:	6a39      	ldr	r1, [r7, #32]
 80014dc:	fab1 f181 	clz	r1, r1
 80014e0:	b2c9      	uxtb	r1, r1
 80014e2:	40cb      	lsrs	r3, r1
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc90      	pop	{r4, r7}
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f043 0204 	orr.w	r2, r3, #4
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b04      	cmp	r3, #4
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
	...

08001578 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LL_DMA_EnableChannel+0x38>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	3a01      	subs	r2, #1
 8001596:	4906      	ldr	r1, [pc, #24]	; (80015b0 <LL_DMA_EnableChannel+0x38>)
 8001598:	5c8a      	ldrb	r2, [r1, r2]
 800159a:	4611      	mov	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	440a      	add	r2, r1
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	08008378 	.word	0x08008378

080015b4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d4:	f023 0310 	bic.w	r3, r3, #16
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	3a01      	subs	r2, #1
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80015de:	5c8a      	ldrb	r2, [r1, r2]
 80015e0:	4611      	mov	r1, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	440a      	add	r2, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	08008378 	.word	0x08008378

080015fc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LL_DMA_SetMode+0x40>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 0220 	bic.w	r2, r3, #32
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3b01      	subs	r3, #1
 8001620:	4906      	ldr	r1, [pc, #24]	; (800163c <LL_DMA_SetMode+0x40>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	4619      	mov	r1, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	440b      	add	r3, r1
 800162a:	4619      	mov	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	08008378 	.word	0x08008378

08001640 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3b01      	subs	r3, #1
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <LL_DMA_SetPeriphIncMode+0x40>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <LL_DMA_SetPeriphIncMode+0x40>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	4619      	mov	r1, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	440b      	add	r3, r1
 800166e:	4619      	mov	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	08008378 	.word	0x08008378

08001684 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LL_DMA_SetMemoryIncMode+0x40>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	4906      	ldr	r1, [pc, #24]	; (80016c4 <LL_DMA_SetMemoryIncMode+0x40>)
 80016aa:	5ccb      	ldrb	r3, [r1, r3]
 80016ac:	4619      	mov	r1, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	440b      	add	r3, r1
 80016b2:	4619      	mov	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	08008378 	.word	0x08008378

080016c8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LL_DMA_SetPeriphSize+0x40>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4906      	ldr	r1, [pc, #24]	; (8001708 <LL_DMA_SetPeriphSize+0x40>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	4619      	mov	r1, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	440b      	add	r3, r1
 80016f6:	4619      	mov	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	08008378 	.word	0x08008378

0800170c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	3b01      	subs	r3, #1
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <LL_DMA_SetMemorySize+0x40>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3b01      	subs	r3, #1
 8001730:	4906      	ldr	r1, [pc, #24]	; (800174c <LL_DMA_SetMemorySize+0x40>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	4619      	mov	r1, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	440b      	add	r3, r1
 800173a:	4619      	mov	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	08008378 	.word	0x08008378

08001750 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	3b01      	subs	r3, #1
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	461a      	mov	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3b01      	subs	r3, #1
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	4619      	mov	r1, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	440b      	add	r3, r1
 800177e:	4619      	mov	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	08008378 	.word	0x08008378

08001794 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LL_DMA_SetDataLength+0x40>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	461a      	mov	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	3a01      	subs	r2, #1
 80017b8:	4906      	ldr	r1, [pc, #24]	; (80017d4 <LL_DMA_SetDataLength+0x40>)
 80017ba:	5c8a      	ldrb	r2, [r1, r2]
 80017bc:	4611      	mov	r1, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	440a      	add	r2, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	08008378 	.word	0x08008378

080017d8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <LL_DMA_SetMemoryAddress+0x2c>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08008378 	.word	0x08008378

08001808 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3b01      	subs	r3, #1
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <LL_DMA_SetPeriphAddress+0x2c>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6093      	str	r3, [r2, #8]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	08008378 	.word	0x08008378

08001838 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f023 0201 	bic.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60da      	str	r2, [r3, #12]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <LL_RCC_HSE_Enable+0x18>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <LL_RCC_HSE_Enable+0x18>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <LL_RCC_HSE_IsReady+0x20>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000

08001914 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <LL_RCC_SetSysClkSource+0x24>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 0203 	bic.w	r2, r3, #3
 8001924:	4904      	ldr	r1, [pc, #16]	; (8001938 <LL_RCC_SetSysClkSource+0x24>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <LL_RCC_GetSysClkSource+0x14>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <LL_RCC_SetAHBPrescaler+0x24>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <LL_RCC_SetAHBPrescaler+0x24>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b4:	4904      	ldr	r1, [pc, #16]	; (80019c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <LL_RCC_SetADCClockSource+0x24>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <LL_RCC_SetADCClockSource+0x24>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <LL_RCC_PLL_Enable+0x18>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <LL_RCC_PLL_Enable+0x18>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000

08001a10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <LL_RCC_PLL_IsReady+0x20>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000

08001a34 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000

08001a64 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <LL_FLASH_SetLatency+0x24>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4904      	ldr	r1, [pc, #16]	; (8001b18 <LL_FLASH_SetLatency+0x24>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40022000 	.word	0x40022000

08001b1c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <LL_FLASH_GetLatency+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40022000 	.word	0x40022000

08001b34 <LL_TIM_EnableCounter>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <LL_TIM_DisableARRPreload>:
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <LL_TIM_SetCounter>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <LL_TIM_OC_DisableFast>:
{
 8001b8c:	b4b0      	push	{r4, r5, r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d01c      	beq.n	8001bd6 <LL_TIM_OC_DisableFast+0x4a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d017      	beq.n	8001bd2 <LL_TIM_OC_DisableFast+0x46>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d012      	beq.n	8001bce <LL_TIM_OC_DisableFast+0x42>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d00d      	beq.n	8001bca <LL_TIM_OC_DisableFast+0x3e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb4:	d007      	beq.n	8001bc6 <LL_TIM_OC_DisableFast+0x3a>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbc:	d101      	bne.n	8001bc2 <LL_TIM_OC_DisableFast+0x36>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e00a      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e008      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3318      	adds	r3, #24
 8001bde:	461a      	mov	r2, r3
 8001be0:	4629      	mov	r1, r5
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <LL_TIM_OC_DisableFast+0x7c>)
 8001be4:	5c5b      	ldrb	r3, [r3, r1]
 8001be6:	4413      	add	r3, r2
 8001be8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	4629      	mov	r1, r5
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <LL_TIM_OC_DisableFast+0x80>)
 8001bf0:	5c5b      	ldrb	r3, [r3, r1]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	408b      	lsls	r3, r1
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	6023      	str	r3, [r4, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bcb0      	pop	{r4, r5, r7}
 8001c06:	4770      	bx	lr
 8001c08:	08008380 	.word	0x08008380
 8001c0c:	08008388 	.word	0x08008388

08001c10 <LL_TIM_OC_EnablePreload>:
{
 8001c10:	b4b0      	push	{r4, r5, r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d01c      	beq.n	8001c5a <LL_TIM_OC_EnablePreload+0x4a>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d017      	beq.n	8001c56 <LL_TIM_OC_EnablePreload+0x46>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d012      	beq.n	8001c52 <LL_TIM_OC_EnablePreload+0x42>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d00d      	beq.n	8001c4e <LL_TIM_OC_EnablePreload+0x3e>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	d007      	beq.n	8001c4a <LL_TIM_OC_EnablePreload+0x3a>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c40:	d101      	bne.n	8001c46 <LL_TIM_OC_EnablePreload+0x36>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e00a      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e008      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3318      	adds	r3, #24
 8001c62:	461a      	mov	r2, r3
 8001c64:	4629      	mov	r1, r5
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <LL_TIM_OC_EnablePreload+0x7c>)
 8001c68:	5c5b      	ldrb	r3, [r3, r1]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	4629      	mov	r1, r5
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <LL_TIM_OC_EnablePreload+0x80>)
 8001c74:	5c5b      	ldrb	r3, [r3, r1]
 8001c76:	4619      	mov	r1, r3
 8001c78:	2308      	movs	r3, #8
 8001c7a:	408b      	lsls	r3, r1
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	6023      	str	r3, [r4, #0]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bcb0      	pop	{r4, r5, r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	08008380 	.word	0x08008380
 8001c90:	08008388 	.word	0x08008388

08001c94 <LL_TIM_OC_DisablePreload>:
{
 8001c94:	b4b0      	push	{r4, r5, r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d01c      	beq.n	8001cde <LL_TIM_OC_DisablePreload+0x4a>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d017      	beq.n	8001cda <LL_TIM_OC_DisablePreload+0x46>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d012      	beq.n	8001cd6 <LL_TIM_OC_DisablePreload+0x42>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d00d      	beq.n	8001cd2 <LL_TIM_OC_DisablePreload+0x3e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbc:	d007      	beq.n	8001cce <LL_TIM_OC_DisablePreload+0x3a>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc4:	d101      	bne.n	8001cca <LL_TIM_OC_DisablePreload+0x36>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e00a      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e008      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	e006      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e004      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e002      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LL_TIM_OC_DisablePreload+0x7c>)
 8001cec:	5c5b      	ldrb	r3, [r3, r1]
 8001cee:	4413      	add	r3, r2
 8001cf0:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001cf2:	6822      	ldr	r2, [r4, #0]
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <LL_TIM_OC_DisablePreload+0x80>)
 8001cf8:	5c5b      	ldrb	r3, [r3, r1]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	408b      	lsls	r3, r1
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4013      	ands	r3, r2
 8001d04:	6023      	str	r3, [r4, #0]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bcb0      	pop	{r4, r5, r7}
 8001d0e:	4770      	bx	lr
 8001d10:	08008380 	.word	0x08008380
 8001d14:	08008388 	.word	0x08008388

08001d18 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001d18:	b4b0      	push	{r4, r5, r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d01c      	beq.n	8001d64 <LL_TIM_IC_SetActiveInput+0x4c>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d017      	beq.n	8001d60 <LL_TIM_IC_SetActiveInput+0x48>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d012      	beq.n	8001d5c <LL_TIM_IC_SetActiveInput+0x44>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d00d      	beq.n	8001d58 <LL_TIM_IC_SetActiveInput+0x40>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d42:	d007      	beq.n	8001d54 <LL_TIM_IC_SetActiveInput+0x3c>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d101      	bne.n	8001d50 <LL_TIM_IC_SetActiveInput+0x38>
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	e00a      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d50:	2306      	movs	r3, #6
 8001d52:	e008      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e006      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e004      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d64:	2300      	movs	r3, #0
 8001d66:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4629      	mov	r1, r5
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001d72:	5c5b      	ldrb	r3, [r3, r1]
 8001d74:	4413      	add	r3, r2
 8001d76:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d78:	6822      	ldr	r2, [r4, #0]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001d7e:	5c5b      	ldrb	r3, [r3, r1]
 8001d80:	4619      	mov	r1, r3
 8001d82:	2303      	movs	r3, #3
 8001d84:	408b      	lsls	r3, r1
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	4628      	mov	r0, r5
 8001d90:	4905      	ldr	r1, [pc, #20]	; (8001da8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001d92:	5c09      	ldrb	r1, [r1, r0]
 8001d94:	408b      	lsls	r3, r1
 8001d96:	4313      	orrs	r3, r2
 8001d98:	6023      	str	r3, [r4, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bcb0      	pop	{r4, r5, r7}
 8001da2:	4770      	bx	lr
 8001da4:	08008380 	.word	0x08008380
 8001da8:	08008390 	.word	0x08008390

08001dac <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001dac:	b4b0      	push	{r4, r5, r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d01c      	beq.n	8001df8 <LL_TIM_IC_SetPrescaler+0x4c>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d017      	beq.n	8001df4 <LL_TIM_IC_SetPrescaler+0x48>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d012      	beq.n	8001df0 <LL_TIM_IC_SetPrescaler+0x44>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d00d      	beq.n	8001dec <LL_TIM_IC_SetPrescaler+0x40>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd6:	d007      	beq.n	8001de8 <LL_TIM_IC_SetPrescaler+0x3c>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dde:	d101      	bne.n	8001de4 <LL_TIM_IC_SetPrescaler+0x38>
 8001de0:	2305      	movs	r3, #5
 8001de2:	e00a      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001de4:	2306      	movs	r3, #6
 8001de6:	e008      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001de8:	2304      	movs	r3, #4
 8001dea:	e006      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001dec:	2303      	movs	r3, #3
 8001dee:	e004      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3318      	adds	r3, #24
 8001e00:	461a      	mov	r2, r3
 8001e02:	4629      	mov	r1, r5
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001e06:	5c5b      	ldrb	r3, [r3, r1]
 8001e08:	4413      	add	r3, r2
 8001e0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <LL_TIM_IC_SetPrescaler+0x90>)
 8001e12:	5c5b      	ldrb	r3, [r3, r1]
 8001e14:	4619      	mov	r1, r3
 8001e16:	230c      	movs	r3, #12
 8001e18:	408b      	lsls	r3, r1
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	4628      	mov	r0, r5
 8001e24:	4905      	ldr	r1, [pc, #20]	; (8001e3c <LL_TIM_IC_SetPrescaler+0x90>)
 8001e26:	5c09      	ldrb	r1, [r1, r0]
 8001e28:	408b      	lsls	r3, r1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	6023      	str	r3, [r4, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bcb0      	pop	{r4, r5, r7}
 8001e36:	4770      	bx	lr
 8001e38:	08008380 	.word	0x08008380
 8001e3c:	08008390 	.word	0x08008390

08001e40 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001e40:	b4b0      	push	{r4, r5, r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d01c      	beq.n	8001e8c <LL_TIM_IC_SetFilter+0x4c>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d017      	beq.n	8001e88 <LL_TIM_IC_SetFilter+0x48>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d012      	beq.n	8001e84 <LL_TIM_IC_SetFilter+0x44>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d00d      	beq.n	8001e80 <LL_TIM_IC_SetFilter+0x40>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d007      	beq.n	8001e7c <LL_TIM_IC_SetFilter+0x3c>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d101      	bne.n	8001e78 <LL_TIM_IC_SetFilter+0x38>
 8001e74:	2305      	movs	r3, #5
 8001e76:	e00a      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e78:	2306      	movs	r3, #6
 8001e7a:	e008      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e006      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e004      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e002      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3318      	adds	r3, #24
 8001e94:	461a      	mov	r2, r3
 8001e96:	4629      	mov	r1, r5
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <LL_TIM_IC_SetFilter+0x8c>)
 8001e9a:	5c5b      	ldrb	r3, [r3, r1]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <LL_TIM_IC_SetFilter+0x90>)
 8001ea6:	5c5b      	ldrb	r3, [r3, r1]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	23f0      	movs	r3, #240	; 0xf0
 8001eac:	408b      	lsls	r3, r1
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	4905      	ldr	r1, [pc, #20]	; (8001ed0 <LL_TIM_IC_SetFilter+0x90>)
 8001eba:	5c09      	ldrb	r1, [r1, r0]
 8001ebc:	408b      	lsls	r3, r1
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	6023      	str	r3, [r4, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bcb0      	pop	{r4, r5, r7}
 8001eca:	4770      	bx	lr
 8001ecc:	08008380 	.word	0x08008380
 8001ed0:	08008390 	.word	0x08008390

08001ed4 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d01c      	beq.n	8001f20 <LL_TIM_IC_SetPolarity+0x4c>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d017      	beq.n	8001f1c <LL_TIM_IC_SetPolarity+0x48>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d012      	beq.n	8001f18 <LL_TIM_IC_SetPolarity+0x44>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d00d      	beq.n	8001f14 <LL_TIM_IC_SetPolarity+0x40>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efe:	d007      	beq.n	8001f10 <LL_TIM_IC_SetPolarity+0x3c>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d101      	bne.n	8001f0c <LL_TIM_IC_SetPolarity+0x38>
 8001f08:	2305      	movs	r3, #5
 8001f0a:	e00a      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	e008      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e006      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e004      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f20:	2300      	movs	r3, #0
 8001f22:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <LL_TIM_IC_SetPolarity+0x80>)
 8001f2c:	5c5b      	ldrb	r3, [r3, r1]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	230a      	movs	r3, #10
 8001f32:	408b      	lsls	r3, r1
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <LL_TIM_IC_SetPolarity+0x80>)
 8001f3c:	5c5b      	ldrb	r3, [r3, r1]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	408b      	lsls	r3, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc90      	pop	{r4, r7}
 8001f52:	4770      	bx	lr
 8001f54:	08008398 	.word	0x08008398

08001f58 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	605a      	str	r2, [r3, #4]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f06f 0201 	mvn.w	r2, #1
 8002012:	611a      	str	r2, [r3, #16]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f06f 0202 	mvn.w	r2, #2
 800202c:	611a      	str	r2, [r3, #16]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60da      	str	r2, [r3, #12]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	615a      	str	r2, [r3, #20]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <LL_GPIO_SetPinMode>:
{
 80020fc:	b490      	push	{r4, r7}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0e1b      	lsrs	r3, r3, #24
 8002110:	4413      	add	r3, r2
 8002112:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	613b      	str	r3, [r7, #16]
  return result;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	210f      	movs	r1, #15
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	401a      	ands	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	61bb      	str	r3, [r7, #24]
  return result;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	6023      	str	r3, [r4, #0]
}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bc90      	pop	{r4, r7}
 800215e:	4770      	bx	lr

08002160 <LL_GPIO_IsInputPinSet>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	43da      	mvns	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	4013      	ands	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <LL_GPIO_SetOutputPin>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <LL_GPIO_ResetOutputPin>:
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	615a      	str	r2, [r3, #20]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 80021d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	6053      	str	r3, [r2, #4]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40010000 	.word	0x40010000

080021e8 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80021f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6053      	str	r3, [r2, #4]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40010000 	.word	0x40010000

08002208 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8002212:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002216:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800221a:	6053      	str	r3, [r2, #4]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40010000 	.word	0x40010000

08002228 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002234:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 800223a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800223e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002242:	6053      	str	r3, [r2, #4]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40010000 	.word	0x40010000

08002250 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800225a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800225e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226a:	6053      	str	r3, [r2, #4]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40010000 	.word	0x40010000

08002278 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3302      	adds	r3, #2
 800228a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	43db      	mvns	r3, r3
 8002294:	ea02 0103 	and.w	r1, r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	0c1b      	lsrs	r3, r3, #16
 800229c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	60bb      	str	r3, [r7, #8]
  return result;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	fa03 f202 	lsl.w	r2, r3, r2
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <LL_GPIO_AF_SetEXTISource+0x58>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	430a      	orrs	r2, r1
 80022be:	3302      	adds	r3, #2
 80022c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40010000 	.word	0x40010000

080022d4 <__io_putchar>:
void Car_Avoid_Process();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1) == 0) {
 80022dc:	bf00      	nop
 80022de:	4808      	ldr	r0, [pc, #32]	; (8002300 <__io_putchar+0x2c>)
 80022e0:	f7ff feec 	bl	80020bc <LL_USART_IsActiveFlag_TC>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f9      	beq.n	80022de <__io_putchar+0xa>
	}
	LL_USART_TransmitData8(USART1, (uint8_t) ch);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <__io_putchar+0x2c>)
 80022f2:	f7ff fef5 	bl	80020e0 <LL_USART_TransmitData8>

	return ch;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013800 	.word	0x40013800

08002304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fbda 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002310:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002314:	f7ff fbbe 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f7fe ffb5 	bl	8001288 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800231e:	f7fe ffd7 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002322:	4603      	mov	r3, r0
 8002324:	2200      	movs	r2, #0
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f825 	bl	8001378 <NVIC_EncodePriority>
 800232e:	4603      	mov	r3, r0
 8002330:	4619      	mov	r1, r3
 8002332:	f06f 000b 	mvn.w	r0, #11
 8002336:	f7fe fff5 	bl	8001324 <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800233a:	f7fe ffc9 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800233e:	4603      	mov	r3, r0
 8002340:	2200      	movs	r2, #0
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f817 	bl	8001378 <NVIC_EncodePriority>
 800234a:	4603      	mov	r3, r0
 800234c:	4619      	mov	r1, r3
 800234e:	f06f 000a 	mvn.w	r0, #10
 8002352:	f7fe ffe7 	bl	8001324 <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002356:	f7fe ffbb 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800235a:	4603      	mov	r3, r0
 800235c:	2200      	movs	r2, #0
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f809 	bl	8001378 <NVIC_EncodePriority>
 8002366:	4603      	mov	r3, r0
 8002368:	4619      	mov	r1, r3
 800236a:	f06f 0009 	mvn.w	r0, #9
 800236e:	f7fe ffd9 	bl	8001324 <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002372:	f7fe ffad 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002376:	4603      	mov	r3, r0
 8002378:	2200      	movs	r2, #0
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fffb 	bl	8001378 <NVIC_EncodePriority>
 8002382:	4603      	mov	r3, r0
 8002384:	4619      	mov	r1, r3
 8002386:	f06f 0004 	mvn.w	r0, #4
 800238a:	f7fe ffcb 	bl	8001324 <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800238e:	f7fe ff9f 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002392:	4603      	mov	r3, r0
 8002394:	2200      	movs	r2, #0
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe ffed 	bl	8001378 <NVIC_EncodePriority>
 800239e:	4603      	mov	r3, r0
 80023a0:	4619      	mov	r1, r3
 80023a2:	f06f 0003 	mvn.w	r0, #3
 80023a6:	f7fe ffbd 	bl	8001324 <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023aa:	f7fe ff91 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2200      	movs	r2, #0
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe ffdf 	bl	8001378 <NVIC_EncodePriority>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4619      	mov	r1, r3
 80023be:	f06f 0001 	mvn.w	r0, #1
 80023c2:	f7fe ffaf 	bl	8001324 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023c6:	f7fe ff83 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2200      	movs	r2, #0
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe ffd1 	bl	8001378 <NVIC_EncodePriority>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4619      	mov	r1, r3
 80023da:	f04f 30ff 	mov.w	r0, #4294967295
 80023de:	f7fe ffa1 	bl	8001324 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80023e2:	f7ff ff35 	bl	8002250 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
	setvbuf(stdin, NULL, _IONBF, 0);
 80023e6:	4ba7      	ldr	r3, [pc, #668]	; (8002684 <main+0x380>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6858      	ldr	r0, [r3, #4]
 80023ec:	2300      	movs	r3, #0
 80023ee:	2202      	movs	r2, #2
 80023f0:	2100      	movs	r1, #0
 80023f2:	f003 ffe3 	bl	80063bc <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 80023f6:	4ba3      	ldr	r3, [pc, #652]	; (8002684 <main+0x380>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6898      	ldr	r0, [r3, #8]
 80023fc:	2300      	movs	r3, #0
 80023fe:	2202      	movs	r2, #2
 8002400:	2100      	movs	r1, #0
 8002402:	f003 ffdb 	bl	80063bc <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 8002406:	4b9f      	ldr	r3, [pc, #636]	; (8002684 <main+0x380>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68d8      	ldr	r0, [r3, #12]
 800240c:	2300      	movs	r3, #0
 800240e:	2202      	movs	r2, #2
 8002410:	2100      	movs	r1, #0
 8002412:	f003 ffd3 	bl	80063bc <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002416:	f000 fa27 	bl	8002868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800241a:	f000 fec5 	bl	80031a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800241e:	f000 feab 	bl	8003178 <MX_DMA_Init>
  MX_TIM1_Init();
 8002422:	f000 fbd3 	bl	8002bcc <MX_TIM1_Init>
  MX_ADC1_Init();
 8002426:	f000 fa61 	bl	80028ec <MX_ADC1_Init>
  MX_I2C1_Init();
 800242a:	f000 fb75 	bl	8002b18 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800242e:	f000 fe4b 	bl	80030c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002432:	f000 fc81 	bl	8002d38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002436:	f000 fd2f 	bl	8002e98 <MX_TIM3_Init>
  MX_TIM4_Init();
 800243a:	f000 fdbd 	bl	8002fb8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	MotorL_EnablePWM();
 800243e:	f7fe fe5f 	bl	8001100 <MotorL_EnablePWM>
	MotorR_EnablePWM();
 8002442:	f7fe fe67 	bl	8001114 <MotorR_EnablePWM>
	MotorL_SetPWM(0);
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fe70 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe fea5 	bl	800119c <MotorR_SetPWM>
	Servo_SetAngle(0);
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f7fe fed9 	bl	800120c <Servo_SetAngle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//  uint32_t Count = LL_TIM_GetCounter(TIM2);
	uint8_t DistanceState = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]
	while (1) {
	Sensor_Convert_A2D();
 800245e:	f001 f8b3 	bl	80035c8 <Sensor_Convert_A2D>
//	  Sensor_Print_LineDetect();
#endif

#if NormalRun == 1

    DistanceState = LL_GPIO_IsInputPinSet(Distance_GPIO_Port, Distance_Pin);
 8002462:	f240 1101 	movw	r1, #257	; 0x101
 8002466:	4888      	ldr	r0, [pc, #544]	; (8002688 <main+0x384>)
 8002468:	f7ff fe7a 	bl	8002160 <LL_GPIO_IsInputPinSet>
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]

    if(GetThreshold_Flag == 1)
 8002470:	4b86      	ldr	r3, [pc, #536]	; (800268c <main+0x388>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10c      	bne.n	8002492 <main+0x18e>
    {
    	while(LL_GPIO_IsInputPinSet(BTN1_GPIO_Port,BTN1_Pin) == 0);
 8002478:	bf00      	nop
 800247a:	4985      	ldr	r1, [pc, #532]	; (8002690 <main+0x38c>)
 800247c:	4882      	ldr	r0, [pc, #520]	; (8002688 <main+0x384>)
 800247e:	f7ff fe6f 	bl	8002160 <LL_GPIO_IsInputPinSet>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f8      	beq.n	800247a <main+0x176>
    	GetThreshold_Flag = 0;
 8002488:	4b80      	ldr	r3, [pc, #512]	; (800268c <main+0x388>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
    	GetThreshold();
 800248e:	f000 ff75 	bl	800337c <GetThreshold>
    }
    if(BTN3_Flag == 0) continue;
 8002492:	4b80      	ldr	r3, [pc, #512]	; (8002694 <main+0x390>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 81cc 	beq.w	8002834 <main+0x530>
    if (HalfWhiteFlag != 0 || FullWhiteFlag != 0)
 800249c:	4b7e      	ldr	r3, [pc, #504]	; (8002698 <main+0x394>)
 800249e:	f993 3000 	ldrsb.w	r3, [r3]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <main+0x1aa>
 80024a6:	4b7d      	ldr	r3, [pc, #500]	; (800269c <main+0x398>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <main+0x1b4>
    {
      MaxSpeed = SignalSpeed;
 80024ae:	4b7c      	ldr	r3, [pc, #496]	; (80026a0 <main+0x39c>)
 80024b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	e003      	b.n	80024c0 <main+0x1bc>
    }
    else
    {
      MaxSpeed = MaximumSpeed;
 80024b8:	4b79      	ldr	r3, [pc, #484]	; (80026a0 <main+0x39c>)
 80024ba:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80024be:	801a      	strh	r2, [r3, #0]
    }
    if (CarState == DiThang)
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <main+0x3a0>)
 80024c2:	f993 3000 	ldrsb.w	r3, [r3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d136      	bne.n	8002538 <main+0x234>
        {
          if (LineDetect == 0b10000000 || LineDetect == 0b11000000 ||
 80024ca:	4b77      	ldr	r3, [pc, #476]	; (80026a8 <main+0x3a4>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d013      	beq.n	80024fa <main+0x1f6>
 80024d2:	4b75      	ldr	r3, [pc, #468]	; (80026a8 <main+0x3a4>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2bc0      	cmp	r3, #192	; 0xc0
 80024d8:	d00f      	beq.n	80024fa <main+0x1f6>
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <main+0x3a4>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
          if (LineDetect == 0b10000000 || LineDetect == 0b11000000 ||
 80024de:	2be0      	cmp	r3, #224	; 0xe0
 80024e0:	d00b      	beq.n	80024fa <main+0x1f6>
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024e2:	4b71      	ldr	r3, [pc, #452]	; (80026a8 <main+0x3a4>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b70      	cmp	r3, #112	; 0x70
 80024e8:	d007      	beq.n	80024fa <main+0x1f6>
              LineDetect == 0b00110000 || LineDetect == 0b00010000)
 80024ea:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <main+0x3a4>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024ee:	2b30      	cmp	r3, #48	; 0x30
 80024f0:	d003      	beq.n	80024fa <main+0x1f6>
              LineDetect == 0b00110000 || LineDetect == 0b00010000)
 80024f2:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <main+0x3a4>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d103      	bne.n	8002502 <main+0x1fe>
          {
            CarState = LechPhai;// 25-30us
 80024fa:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <main+0x3a0>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e01a      	b.n	8002538 <main+0x234>
          }
          else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 8002502:	4b69      	ldr	r3, [pc, #420]	; (80026a8 <main+0x3a4>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d013      	beq.n	8002532 <main+0x22e>
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <main+0x3a4>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d00f      	beq.n	8002532 <main+0x22e>
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <main+0x3a4>)
 8002514:	781b      	ldrb	r3, [r3, #0]
          else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 8002516:	2b07      	cmp	r3, #7
 8002518:	d00b      	beq.n	8002532 <main+0x22e>
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <main+0x3a4>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b0e      	cmp	r3, #14
 8002520:	d007      	beq.n	8002532 <main+0x22e>
                   LineDetect == 0b00001100 || LineDetect == 0b00001000)
 8002522:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <main+0x3a4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d003      	beq.n	8002532 <main+0x22e>
                   LineDetect == 0b00001100 || LineDetect == 0b00001000)
 800252a:	4b5f      	ldr	r3, [pc, #380]	; (80026a8 <main+0x3a4>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d102      	bne.n	8002538 <main+0x234>
          {
            CarState = LechTrai;// 25-30us
 8002532:	4b5c      	ldr	r3, [pc, #368]	; (80026a4 <main+0x3a0>)
 8002534:	22ff      	movs	r2, #255	; 0xff
 8002536:	701a      	strb	r2, [r3, #0]
          }
        }
    if(FullWhiteFlag == 1 && DistanceState == 0)
 8002538:	4b58      	ldr	r3, [pc, #352]	; (800269c <main+0x398>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d108      	bne.n	8002552 <main+0x24e>
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <main+0x24e>
    {
    	Car_Avoid_Process();
 8002546:	f001 fe1b 	bl	8004180 <Car_Avoid_Process>
    	FullWhiteFlag = 0;
 800254a:	4b54      	ldr	r3, [pc, #336]	; (800269c <main+0x398>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
		continue;
 8002550:	e173      	b.n	800283a <main+0x536>
    }
    if (LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000) // 18.8 us
 8002552:	4b55      	ldr	r3, [pc, #340]	; (80026a8 <main+0x3a4>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b18      	cmp	r3, #24
 8002558:	d007      	beq.n	800256a <main+0x266>
 800255a:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <main+0x3a4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b1c      	cmp	r3, #28
 8002560:	d003      	beq.n	800256a <main+0x266>
 8002562:	4b51      	ldr	r3, [pc, #324]	; (80026a8 <main+0x3a4>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b38      	cmp	r3, #56	; 0x38
 8002568:	d120      	bne.n	80025ac <main+0x2a8>
    {
      if (HalfWhiteFlag_Raw == HalfLeft)
 800256a:	4b50      	ldr	r3, [pc, #320]	; (80026ac <main+0x3a8>)
 800256c:	f993 3000 	ldrsb.w	r3, [r3]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d106      	bne.n	8002584 <main+0x280>
      {
        HalfWhiteFlag_Raw = 0;
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <main+0x3a8>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
        HalfWhiteFlag = HalfLeft;
 800257c:	4b46      	ldr	r3, [pc, #280]	; (8002698 <main+0x394>)
 800257e:	22ff      	movs	r2, #255	; 0xff
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e00a      	b.n	800259a <main+0x296>
      }
      else if (HalfWhiteFlag_Raw == HalfRight)
 8002584:	4b49      	ldr	r3, [pc, #292]	; (80026ac <main+0x3a8>)
 8002586:	f993 3000 	ldrsb.w	r3, [r3]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <main+0x296>
      {
        HalfWhiteFlag_Raw = 0;
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <main+0x3a8>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
        HalfWhiteFlag = HalfRight;
 8002594:	4b40      	ldr	r3, [pc, #256]	; (8002698 <main+0x394>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
      }

      MatLineFlag = 0;
 800259a:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <main+0x3ac>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
      CarState = DiThang;
 80025a0:	4b40      	ldr	r3, [pc, #256]	; (80026a4 <main+0x3a0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

      Car_DiThang_Process();
 80025a6:	f001 f843 	bl	8003630 <Car_DiThang_Process>
      continue;
 80025aa:	e146      	b.n	800283a <main+0x536>
    }
    else if (LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 80025ac:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <main+0x3a4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b7f      	cmp	r3, #127	; 0x7f
 80025b2:	d007      	beq.n	80025c4 <main+0x2c0>
 80025b4:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <main+0x3a4>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b3f      	cmp	r3, #63	; 0x3f
 80025ba:	d003      	beq.n	80025c4 <main+0x2c0>
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <main+0x3a4>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b1f      	cmp	r3, #31
 80025c2:	d126      	bne.n	8002612 <main+0x30e>
    {
    	if(FullWhiteFlag == 1)
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <main+0x398>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10f      	bne.n	80025ec <main+0x2e8>
    	{
    		FullWhiteFlag = 0;
 80025cc:	4b33      	ldr	r3, [pc, #204]	; (800269c <main+0x398>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
    		while(LineDetect != 0)
 80025d2:	e001      	b.n	80025d8 <main+0x2d4>
    			Sensor_Convert_A2D();
 80025d4:	f000 fff8 	bl	80035c8 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <main+0x3a4>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <main+0x2d0>
    		Car_CuaPhai_Process();
 80025e0:	f001 fd42 	bl	8004068 <Car_CuaPhai_Process>

    		HalfWhiteFlag = 0;
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <main+0x394>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
    		continue;
 80025ea:	e126      	b.n	800283a <main+0x536>
    	} else
    	{
    		HalfWhiteFlag_Raw = HalfRight;
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <main+0x3a8>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
    	};
    	while(LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 80025f2:	e001      	b.n	80025f8 <main+0x2f4>
    	{
    		Sensor_Convert_A2D();
 80025f4:	f000 ffe8 	bl	80035c8 <Sensor_Convert_A2D>
    	while(LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <main+0x3a4>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b7f      	cmp	r3, #127	; 0x7f
 80025fe:	d0f9      	beq.n	80025f4 <main+0x2f0>
 8002600:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <main+0x3a4>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b3f      	cmp	r3, #63	; 0x3f
 8002606:	d0f5      	beq.n	80025f4 <main+0x2f0>
 8002608:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <main+0x3a4>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b1f      	cmp	r3, #31
 800260e:	d0f1      	beq.n	80025f4 <main+0x2f0>
    else if (LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 8002610:	e10d      	b.n	800282e <main+0x52a>
    	}
    }
    else if (LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <main+0x3a4>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2bf8      	cmp	r3, #248	; 0xf8
 8002618:	d007      	beq.n	800262a <main+0x326>
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <main+0x3a4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2bfc      	cmp	r3, #252	; 0xfc
 8002620:	d003      	beq.n	800262a <main+0x326>
 8002622:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <main+0x3a4>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2bfe      	cmp	r3, #254	; 0xfe
 8002628:	d126      	bne.n	8002678 <main+0x374>
    {
    	if(FullWhiteFlag == 1)
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <main+0x398>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10f      	bne.n	8002652 <main+0x34e>
    	{
    		FullWhiteFlag = 0;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <main+0x398>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
    		while(LineDetect != 0)
 8002638:	e001      	b.n	800263e <main+0x33a>
    			Sensor_Convert_A2D();
 800263a:	f000 ffc5 	bl	80035c8 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 800263e:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <main+0x3a4>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f9      	bne.n	800263a <main+0x336>
    		Car_CuaTrai_Process();
 8002646:	f001 fd53 	bl	80040f0 <Car_CuaTrai_Process>
    		HalfWhiteFlag = 0;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <main+0x394>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
    		continue;
 8002650:	e0f3      	b.n	800283a <main+0x536>
    	} else
    	{
    		HalfWhiteFlag_Raw = HalfLeft;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <main+0x3a8>)
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	701a      	strb	r2, [r3, #0]
    	}
    	while(LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 8002658:	e001      	b.n	800265e <main+0x35a>
    	{
    		Sensor_Convert_A2D();
 800265a:	f000 ffb5 	bl	80035c8 <Sensor_Convert_A2D>
    	while(LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <main+0x3a4>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2bf8      	cmp	r3, #248	; 0xf8
 8002664:	d0f9      	beq.n	800265a <main+0x356>
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <main+0x3a4>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2bfc      	cmp	r3, #252	; 0xfc
 800266c:	d0f5      	beq.n	800265a <main+0x356>
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <main+0x3a4>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2bfe      	cmp	r3, #254	; 0xfe
 8002674:	d0f1      	beq.n	800265a <main+0x356>
    else if (LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 8002676:	e0da      	b.n	800282e <main+0x52a>
    	}
    }
    else if (LineDetect == 0xff)
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <main+0x3a4>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2bff      	cmp	r3, #255	; 0xff
 800267e:	d166      	bne.n	800274e <main+0x44a>
    {
    	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000 || LineDetect== 0))
 8002680:	e01a      	b.n	80026b8 <main+0x3b4>
 8002682:	bf00      	nop
 8002684:	20000018 	.word	0x20000018
 8002688:	40010c00 	.word	0x40010c00
 800268c:	20000204 	.word	0x20000204
 8002690:	04100010 	.word	0x04100010
 8002694:	20000211 	.word	0x20000211
 8002698:	20000207 	.word	0x20000207
 800269c:	2000020a 	.word	0x2000020a
 80026a0:	20000010 	.word	0x20000010
 80026a4:	20000206 	.word	0x20000206
 80026a8:	20000205 	.word	0x20000205
 80026ac:	20000208 	.word	0x20000208
 80026b0:	2000020b 	.word	0x2000020b
    	    			Sensor_Convert_A2D();
 80026b4:	f000 ff88 	bl	80035c8 <Sensor_Convert_A2D>
    	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000 || LineDetect== 0))
 80026b8:	4b60      	ldr	r3, [pc, #384]	; (800283c <main+0x538>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b18      	cmp	r3, #24
 80026be:	d00b      	beq.n	80026d8 <main+0x3d4>
 80026c0:	4b5e      	ldr	r3, [pc, #376]	; (800283c <main+0x538>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b1c      	cmp	r3, #28
 80026c6:	d007      	beq.n	80026d8 <main+0x3d4>
 80026c8:	4b5c      	ldr	r3, [pc, #368]	; (800283c <main+0x538>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b38      	cmp	r3, #56	; 0x38
 80026ce:	d003      	beq.n	80026d8 <main+0x3d4>
 80026d0:	4b5a      	ldr	r3, [pc, #360]	; (800283c <main+0x538>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ed      	bne.n	80026b4 <main+0x3b0>
    	HalfWhiteFlag_Raw = 0;
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <main+0x53c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
    	if(HalfWhiteFlag == HalfLeft)
 80026de:	4b59      	ldr	r3, [pc, #356]	; (8002844 <main+0x540>)
 80026e0:	f993 3000 	ldrsb.w	r3, [r3]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d112      	bne.n	8002710 <main+0x40c>
    	{
    		while(LineDetect != 0)
 80026ea:	e001      	b.n	80026f0 <main+0x3ec>
    			Sensor_Convert_A2D();
 80026ec:	f000 ff6c 	bl	80035c8 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 80026f0:	4b52      	ldr	r3, [pc, #328]	; (800283c <main+0x538>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <main+0x3e8>
    		Car_CuaTrai_Process();
 80026f8:	f001 fcfa 	bl	80040f0 <Car_CuaTrai_Process>
    		CuaFlag = 0;
 80026fc:	4b52      	ldr	r3, [pc, #328]	; (8002848 <main+0x544>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag = 0;
 8002702:	4b50      	ldr	r3, [pc, #320]	; (8002844 <main+0x540>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002708:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <main+0x53c>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
    		continue;
 800270e:	e094      	b.n	800283a <main+0x536>
    	} else if(HalfWhiteFlag == HalfRight)
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <main+0x540>)
 8002712:	f993 3000 	ldrsb.w	r3, [r3]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d112      	bne.n	8002740 <main+0x43c>
    	{
    		while(LineDetect != 0)
 800271a:	e001      	b.n	8002720 <main+0x41c>
    		{
    			Sensor_Convert_A2D();
 800271c:	f000 ff54 	bl	80035c8 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 8002720:	4b46      	ldr	r3, [pc, #280]	; (800283c <main+0x538>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <main+0x418>
    		}
    		Car_CuaPhai_Process();
 8002728:	f001 fc9e 	bl	8004068 <Car_CuaPhai_Process>
    		CuaFlag = 0;
 800272c:	4b46      	ldr	r3, [pc, #280]	; (8002848 <main+0x544>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag = 0;
 8002732:	4b44      	ldr	r3, [pc, #272]	; (8002844 <main+0x540>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002738:	4b41      	ldr	r3, [pc, #260]	; (8002840 <main+0x53c>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
    		continue;
 800273e:	e07c      	b.n	800283a <main+0x536>
    	}else
    	{
    		FullWhiteFlag = 1;
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <main+0x548>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <main+0x53c>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e06f      	b.n	800282e <main+0x52a>
    	}
    }
    else if (LineDetect == 0)
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <main+0x538>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d16b      	bne.n	800282e <main+0x52a>
    {
    	if (HalfWhiteFlag == HalfRight)
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <main+0x540>)
 8002758:	f993 3000 	ldrsb.w	r3, [r3]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d10c      	bne.n	800277a <main+0x476>
    	{
    		HalfWhiteFlag = 0;
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <main+0x540>)
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002766:	4b36      	ldr	r3, [pc, #216]	; (8002840 <main+0x53c>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
    		Car_ChuyenLanePhai_Process();
 800276c:	f001 fbf4 	bl	8003f58 <Car_ChuyenLanePhai_Process>
    		LL_GPIO_ResetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 8002770:	4937      	ldr	r1, [pc, #220]	; (8002850 <main+0x54c>)
 8002772:	4838      	ldr	r0, [pc, #224]	; (8002854 <main+0x550>)
 8002774:	f7ff fd19 	bl	80021aa <LL_GPIO_ResetOutputPin>
    		continue;
 8002778:	e05f      	b.n	800283a <main+0x536>
    	} else if(HalfWhiteFlag == HalfLeft)
 800277a:	4b32      	ldr	r3, [pc, #200]	; (8002844 <main+0x540>)
 800277c:	f993 3000 	ldrsb.w	r3, [r3]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d10c      	bne.n	80027a0 <main+0x49c>
    	{
    		HalfWhiteFlag = 0;
 8002786:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <main+0x540>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <main+0x53c>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
    		Car_ChuyenLaneTrai_Process();
 8002792:	f001 fc29 	bl	8003fe8 <Car_ChuyenLaneTrai_Process>
    		LL_GPIO_ResetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 8002796:	492e      	ldr	r1, [pc, #184]	; (8002850 <main+0x54c>)
 8002798:	482e      	ldr	r0, [pc, #184]	; (8002854 <main+0x550>)
 800279a:	f7ff fd06 	bl	80021aa <LL_GPIO_ResetOutputPin>
    		continue;
 800279e:	e04c      	b.n	800283a <main+0x536>
    	} else if(FullWhiteFlag == 1)
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <main+0x548>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d142      	bne.n	800282e <main+0x52a>
    	{
    		FullWhiteFlag = 0 ;
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <main+0x548>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <main+0x53c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
    		Servo_SetAngle(-10);
 80027b4:	4828      	ldr	r0, [pc, #160]	; (8002858 <main+0x554>)
 80027b6:	f7fe fd29 	bl	800120c <Servo_SetAngle>
    		MotorL_SetPWM(MaxSpeed * 1.2);
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <main+0x558>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fe20 	bl	8000404 <__aeabi_i2d>
 80027c4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80027c8:	4b25      	ldr	r3, [pc, #148]	; (8002860 <main+0x55c>)
 80027ca:	f7fd fe85 	bl	80004d8 <__aeabi_dmul>
 80027ce:	4603      	mov	r3, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	4618      	mov	r0, r3
 80027d4:	4621      	mov	r1, r4
 80027d6:	f7fe f92f 	bl	8000a38 <__aeabi_d2iz>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fca5 	bl	800112c <MotorL_SetPWM>
    		MotorR_SetPWM(MaxSpeed * 1.5);
 80027e2:	4b1e      	ldr	r3, [pc, #120]	; (800285c <main+0x558>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd fe0c 	bl	8000404 <__aeabi_i2d>
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <main+0x560>)
 80027f2:	f7fd fe71 	bl	80004d8 <__aeabi_dmul>
 80027f6:	4603      	mov	r3, r0
 80027f8:	460c      	mov	r4, r1
 80027fa:	4618      	mov	r0, r3
 80027fc:	4621      	mov	r1, r4
 80027fe:	f7fe f91b 	bl	8000a38 <__aeabi_d2iz>
 8002802:	4603      	mov	r3, r0
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fcc9 	bl	800119c <MotorR_SetPWM>
    		while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 800280a:	e003      	b.n	8002814 <main+0x510>
    		{
    			Sensor_Convert_A2D();
 800280c:	f000 fedc 	bl	80035c8 <Sensor_Convert_A2D>
    			Car_MatLine_Process();
 8002810:	f001 fb3e 	bl	8003e90 <Car_MatLine_Process>
    		while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <main+0x538>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b18      	cmp	r3, #24
 800281a:	d00d      	beq.n	8002838 <main+0x534>
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <main+0x538>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b1c      	cmp	r3, #28
 8002822:	d009      	beq.n	8002838 <main+0x534>
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <main+0x538>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b38      	cmp	r3, #56	; 0x38
 800282a:	d1ef      	bne.n	800280c <main+0x508>
    		}
    		continue;
 800282c:	e004      	b.n	8002838 <main+0x534>
    	}
    };
      Car_BamLine_Process();
 800282e:	f000 ff7b 	bl	8003728 <Car_BamLine_Process>
 8002832:	e614      	b.n	800245e <main+0x15a>
    if(BTN3_Flag == 0) continue;
 8002834:	bf00      	nop
 8002836:	e612      	b.n	800245e <main+0x15a>
    		continue;
 8002838:	bf00      	nop
	Sensor_Convert_A2D();
 800283a:	e610      	b.n	800245e <main+0x15a>
 800283c:	20000205 	.word	0x20000205
 8002840:	20000208 	.word	0x20000208
 8002844:	20000207 	.word	0x20000207
 8002848:	20000209 	.word	0x20000209
 800284c:	2000020a 	.word	0x2000020a
 8002850:	04200020 	.word	0x04200020
 8002854:	40011000 	.word	0x40011000
 8002858:	c1200000 	.word	0xc1200000
 800285c:	20000010 	.word	0x20000010
 8002860:	3ff33333 	.word	0x3ff33333
 8002864:	3ff80000 	.word	0x3ff80000

08002868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800286c:	2002      	movs	r0, #2
 800286e:	f7ff f941 	bl	8001af4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8002872:	bf00      	nop
 8002874:	f7ff f952 	bl	8001b1c <LL_FLASH_GetLatency>
 8002878:	4603      	mov	r3, r0
 800287a:	2b02      	cmp	r3, #2
 800287c:	d1fa      	bne.n	8002874 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800287e:	f7ff f829 	bl	80018d4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002882:	bf00      	nop
 8002884:	f7ff f834 	bl	80018f0 <LL_RCC_HSE_IsReady>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d1fa      	bne.n	8002884 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800288e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8002892:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002896:	f7ff f8cd 	bl	8001a34 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800289a:	f7ff f8ab 	bl	80019f4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800289e:	bf00      	nop
 80028a0:	f7ff f8b6 	bl	8001a10 <LL_RCC_PLL_IsReady>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d1fa      	bne.n	80028a0 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7ff f852 	bl	8001954 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80028b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028b4:	f7ff f862 	bl	800197c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7ff f873 	bl	80019a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80028be:	2002      	movs	r0, #2
 80028c0:	f7ff f828 	bl	8001914 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80028c4:	bf00      	nop
 80028c6:	f7ff f839 	bl	800193c <LL_RCC_GetSysClkSource>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d1fa      	bne.n	80028c6 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <SystemClock_Config+0x80>)
 80028d2:	f003 f835 	bl	8005940 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80028d6:	4804      	ldr	r0, [pc, #16]	; (80028e8 <SystemClock_Config+0x80>)
 80028d8:	f003 f864 	bl	80059a4 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 80028dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80028e0:	f7ff f874 	bl	80019cc <LL_RCC_SetADCClockSource>
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	044aa200 	.word	0x044aa200

080028ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08e      	sub	sp, #56	; 0x38
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80028f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80028fc:	2300      	movs	r3, #0
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002900:	f107 0318 	add.w	r3, r7, #24
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800291e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002922:	f7ff f8cf 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002926:	2004      	movs	r0, #4
 8002928:	f7ff f8cc 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800292c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002930:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	486b      	ldr	r0, [pc, #428]	; (8002ae8 <MX_ADC1_Init+0x1fc>)
 800293c:	f002 f992 	bl	8004c64 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002940:	2200      	movs	r2, #0
 8002942:	2101      	movs	r1, #1
 8002944:	4869      	ldr	r0, [pc, #420]	; (8002aec <MX_ADC1_Init+0x200>)
 8002946:	f7fe fe35 	bl	80015b4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 800294a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800294e:	2101      	movs	r1, #1
 8002950:	4866      	ldr	r0, [pc, #408]	; (8002aec <MX_ADC1_Init+0x200>)
 8002952:	f7fe fefd 	bl	8001750 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002956:	2220      	movs	r2, #32
 8002958:	2101      	movs	r1, #1
 800295a:	4864      	ldr	r0, [pc, #400]	; (8002aec <MX_ADC1_Init+0x200>)
 800295c:	f7fe fe4e 	bl	80015fc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002960:	2200      	movs	r2, #0
 8002962:	2101      	movs	r1, #1
 8002964:	4861      	ldr	r0, [pc, #388]	; (8002aec <MX_ADC1_Init+0x200>)
 8002966:	f7fe fe6b 	bl	8001640 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	2101      	movs	r1, #1
 800296e:	485f      	ldr	r0, [pc, #380]	; (8002aec <MX_ADC1_Init+0x200>)
 8002970:	f7fe fe88 	bl	8001684 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002978:	2101      	movs	r1, #1
 800297a:	485c      	ldr	r0, [pc, #368]	; (8002aec <MX_ADC1_Init+0x200>)
 800297c:	f7fe fea4 	bl	80016c8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002984:	2101      	movs	r1, #1
 8002986:	4859      	ldr	r0, [pc, #356]	; (8002aec <MX_ADC1_Init+0x200>)
 8002988:	f7fe fec0 	bl	800170c <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 8);
 800298c:	2208      	movs	r2, #8
 800298e:	2101      	movs	r1, #1
 8002990:	4856      	ldr	r0, [pc, #344]	; (8002aec <MX_ADC1_Init+0x200>)
 8002992:	f7fe feff 	bl	8001794 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <MX_ADC1_Init+0x204>)
 8002998:	461a      	mov	r2, r3
 800299a:	2101      	movs	r1, #1
 800299c:	4853      	ldr	r0, [pc, #332]	; (8002aec <MX_ADC1_Init+0x200>)
 800299e:	f7fe ff1b 	bl	80017d8 <LL_DMA_SetMemoryAddress>
			(uint32_t) &Sensor_ADC_Value);
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, ADC1_DR_Address);
 80029a2:	4a54      	ldr	r2, [pc, #336]	; (8002af4 <MX_ADC1_Init+0x208>)
 80029a4:	2101      	movs	r1, #1
 80029a6:	4851      	ldr	r0, [pc, #324]	; (8002aec <MX_ADC1_Init+0x200>)
 80029a8:	f7fe ff2e 	bl	8001808 <LL_DMA_SetPeriphAddress>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 80029ac:	2101      	movs	r1, #1
 80029ae:	484f      	ldr	r0, [pc, #316]	; (8002aec <MX_ADC1_Init+0x200>)
 80029b0:	f7fe fde2 	bl	8001578 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80029b4:	2300      	movs	r3, #0
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80029b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80029be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029c2:	4619      	mov	r1, r3
 80029c4:	484c      	ldr	r0, [pc, #304]	; (8002af8 <MX_ADC1_Init+0x20c>)
 80029c6:	f001 ff1b 	bl	8004800 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80029ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d2:	4619      	mov	r1, r3
 80029d4:	4848      	ldr	r0, [pc, #288]	; (8002af8 <MX_ADC1_Init+0x20c>)
 80029d6:	f001 fee1 	bl	800479c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80029da:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80029de:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 80029e0:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 80029e4:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80029ea:	2302      	movs	r3, #2
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80029ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80029f4:	f107 0318 	add.w	r3, r7, #24
 80029f8:	4619      	mov	r1, r3
 80029fa:	483f      	ldr	r0, [pc, #252]	; (8002af8 <MX_ADC1_Init+0x20c>)
 80029fc:	f001 ff27 	bl	800484e <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8002a00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a08:	483b      	ldr	r0, [pc, #236]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a0a:	f7fe fce7 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_7CYCLES_5);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a14:	4838      	ldr	r0, [pc, #224]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a16:	f7fe fd26 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002a1a:	4a38      	ldr	r2, [pc, #224]	; (8002afc <MX_ADC1_Init+0x210>)
 8002a1c:	f240 2105 	movw	r1, #517	; 0x205
 8002a20:	4835      	ldr	r0, [pc, #212]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a22:	f7fe fcdb 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_7CYCLES_5);
 8002a26:	2201      	movs	r2, #1
 8002a28:	4934      	ldr	r1, [pc, #208]	; (8002afc <MX_ADC1_Init+0x210>)
 8002a2a:	4833      	ldr	r0, [pc, #204]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a2c:	f7fe fd1b 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8002a30:	4a33      	ldr	r2, [pc, #204]	; (8002b00 <MX_ADC1_Init+0x214>)
 8002a32:	f240 210a 	movw	r1, #522	; 0x20a
 8002a36:	4830      	ldr	r0, [pc, #192]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a38:	f7fe fcd0 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_7CYCLES_5);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4930      	ldr	r1, [pc, #192]	; (8002b00 <MX_ADC1_Init+0x214>)
 8002a40:	482d      	ldr	r0, [pc, #180]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a42:	f7fe fd10 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8002a46:	4a2f      	ldr	r2, [pc, #188]	; (8002b04 <MX_ADC1_Init+0x218>)
 8002a48:	f240 210f 	movw	r1, #527	; 0x20f
 8002a4c:	482a      	ldr	r0, [pc, #168]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a4e:	f7fe fcc5 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_7CYCLES_5);
 8002a52:	2201      	movs	r2, #1
 8002a54:	492b      	ldr	r1, [pc, #172]	; (8002b04 <MX_ADC1_Init+0x218>)
 8002a56:	4828      	ldr	r0, [pc, #160]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a58:	f7fe fd05 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <MX_ADC1_Init+0x21c>)
 8002a5e:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002a62:	4825      	ldr	r0, [pc, #148]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a64:	f7fe fcba 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4927      	ldr	r1, [pc, #156]	; (8002b08 <MX_ADC1_Init+0x21c>)
 8002a6c:	4822      	ldr	r0, [pc, #136]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a6e:	f7fe fcfa 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8002a72:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <MX_ADC1_Init+0x220>)
 8002a74:	f240 2119 	movw	r1, #537	; 0x219
 8002a78:	481f      	ldr	r0, [pc, #124]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a7a:	f7fe fcaf 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4922      	ldr	r1, [pc, #136]	; (8002b0c <MX_ADC1_Init+0x220>)
 8002a82:	481d      	ldr	r0, [pc, #116]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a84:	f7fe fcef 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8002a88:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <MX_ADC1_Init+0x224>)
 8002a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a8e:	481a      	ldr	r0, [pc, #104]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a90:	f7fe fca4 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002a94:	2200      	movs	r2, #0
 8002a96:	491e      	ldr	r1, [pc, #120]	; (8002b10 <MX_ADC1_Init+0x224>)
 8002a98:	4817      	ldr	r0, [pc, #92]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002a9a:	f7fe fce4 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <MX_ADC1_Init+0x228>)
 8002aa0:	f240 1105 	movw	r1, #261	; 0x105
 8002aa4:	4814      	ldr	r0, [pc, #80]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002aa6:	f7fe fc99 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	4919      	ldr	r1, [pc, #100]	; (8002b14 <MX_ADC1_Init+0x228>)
 8002aae:	4812      	ldr	r0, [pc, #72]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002ab0:	f7fe fcd9 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

	LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8002ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ab8:	480f      	ldr	r0, [pc, #60]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002aba:	f7fe fcc2 	bl	8001442 <LL_ADC_REG_SetDMATransfer>
	/* Khoi dong bo ADC */
	LL_ADC_Enable(ADC1);
 8002abe:	480e      	ldr	r0, [pc, #56]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002ac0:	f7fe fd1a 	bl	80014f8 <LL_ADC_Enable>
	LL_ADC_StartCalibration(ADC1);
 8002ac4:	480c      	ldr	r0, [pc, #48]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002ac6:	f7fe fd26 	bl	8001516 <LL_ADC_StartCalibration>

	/* Cho trang thai cablib duoc bat *
	 *
	 */
	while (LL_ADC_IsCalibrationOnGoing(ADC1))
 8002aca:	bf00      	nop
 8002acc:	480a      	ldr	r0, [pc, #40]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002ace:	f7fe fd31 	bl	8001534 <LL_ADC_IsCalibrationOnGoing>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f9      	bne.n	8002acc <MX_ADC1_Init+0x1e0>
		;

	/* Bat dau chuyen doi ADC */
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8002ad8:	4807      	ldr	r0, [pc, #28]	; (8002af8 <MX_ADC1_Init+0x20c>)
 8002ada:	f7fe fd3d 	bl	8001558 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	3738      	adds	r7, #56	; 0x38
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40010800 	.word	0x40010800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	20000220 	.word	0x20000220
 8002af4:	4001244c 	.word	0x4001244c
 8002af8:	40012400 	.word	0x40012400
 8002afc:	02300001 	.word	0x02300001
 8002b00:	02600002 	.word	0x02600002
 8002b04:	02900003 	.word	0x02900003
 8002b08:	02c00004 	.word	0x02c00004
 8002b0c:	02f00005 	.word	0x02f00005
 8002b10:	03200006 	.word	0x03200006
 8002b14:	03500007 	.word	0x03500007

08002b18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	; 0x30
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002b1e:	f107 0318 	add.w	r3, r7, #24
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002b3e:	2008      	movs	r0, #8
 8002b40:	f7fe ffc0 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <MX_I2C1_Init+0xa4>)
 8002b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b48:	2309      	movs	r3, #9
 8002b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002b50:	2304      	movs	r3, #4
 8002b52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4819      	ldr	r0, [pc, #100]	; (8002bc0 <MX_I2C1_Init+0xa8>)
 8002b5a:	f002 f883 	bl	8004c64 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 8002b5e:	f7ff fb33 	bl	80021c8 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002b62:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b66:	f7fe ff95 	bl	8001a94 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8002b6a:	4816      	ldr	r0, [pc, #88]	; (8002bc4 <MX_I2C1_Init+0xac>)
 8002b6c:	f7fe fea3 	bl	80018b6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002b70:	4814      	ldr	r0, [pc, #80]	; (8002bc4 <MX_I2C1_Init+0xac>)
 8002b72:	f7fe fe7f 	bl	8001874 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002b76:	4813      	ldr	r0, [pc, #76]	; (8002bc4 <MX_I2C1_Init+0xac>)
 8002b78:	f7fe fe6d 	bl	8001856 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <MX_I2C1_Init+0xb0>)
 8002b82:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002b92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002b98:	f107 0318 	add.w	r3, r7, #24
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <MX_I2C1_Init+0xac>)
 8002ba0:	f002 f9ac 	bl	8004efc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <MX_I2C1_Init+0xac>)
 8002ba8:	f7fe fe73 	bl	8001892 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
	LL_I2C_Enable(I2C1);
 8002bac:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_I2C1_Init+0xac>)
 8002bae:	f7fe fe43 	bl	8001838 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	04030003 	.word	0x04030003
 8002bc0:	40010c00 	.word	0x40010c00
 8002bc4:	40005400 	.word	0x40005400
 8002bc8:	000186a0 	.word	0x000186a0

08002bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b098      	sub	sp, #96	; 0x60
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002bd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be6:	2220      	movs	r2, #32
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 ff12 	bl	8005a14 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c02:	463b      	mov	r3, r7
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002c10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c14:	f7fe ff56 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 8002c22:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002c26:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002c32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c36:	4619      	mov	r1, r3
 8002c38:	483c      	ldr	r0, [pc, #240]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002c3a:	f002 fb07 	bl	800524c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002c3e:	483b      	ldr	r0, [pc, #236]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002c40:	f7fe ff87 	bl	8001b52 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002c44:	2101      	movs	r1, #1
 8002c46:	4839      	ldr	r0, [pc, #228]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002c48:	f7fe ffe2 	bl	8001c10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002c4c:	2360      	movs	r3, #96	; 0x60
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c60:	2300      	movs	r3, #0
 8002c62:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c70:	461a      	mov	r2, r3
 8002c72:	2101      	movs	r1, #1
 8002c74:	482d      	ldr	r0, [pc, #180]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002c76:	f002 fb47 	bl	8005308 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	482b      	ldr	r0, [pc, #172]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002c7e:	f7fe ff85 	bl	8001b8c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c86:	4829      	ldr	r0, [pc, #164]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002c88:	f7fe ffc2 	bl	8001c10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c9e:	4823      	ldr	r0, [pc, #140]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002ca0:	f002 fb32 	bl	8005308 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ca8:	4820      	ldr	r0, [pc, #128]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002caa:	f7fe ff6f 	bl	8001b8c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002cae:	2100      	movs	r1, #0
 8002cb0:	481e      	ldr	r0, [pc, #120]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002cb2:	f7ff f977 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002cb6:	481d      	ldr	r0, [pc, #116]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002cb8:	f7ff f986 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002cd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002cdc:	f107 0314 	add.w	r3, r7, #20
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4812      	ldr	r0, [pc, #72]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002ce4:	f002 fb48 	bl	8005378 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM1);
 8002ce8:	4810      	ldr	r0, [pc, #64]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002cea:	f7ff f9a5 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_SetCounter(TIM1, 0);
 8002cee:	2100      	movs	r1, #0
 8002cf0:	480e      	ldr	r0, [pc, #56]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002cf2:	f7fe ff3d 	bl	8001b70 <LL_TIM_SetCounter>
	LL_TIM_EnableAllOutputs(TIM1);
 8002cf6:	480d      	ldr	r0, [pc, #52]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002cf8:	f7ff f975 	bl	8001fe6 <LL_TIM_EnableAllOutputs>
	LL_TIM_EnableCounter(TIM1);
 8002cfc:	480b      	ldr	r0, [pc, #44]	; (8002d2c <MX_TIM1_Init+0x160>)
 8002cfe:	f7fe ff19 	bl	8001b34 <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002d02:	2004      	movs	r0, #4
 8002d04:	f7fe fede 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <MX_TIM1_Init+0x164>)
 8002d0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d0c:	2309      	movs	r3, #9
 8002d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d18:	463b      	mov	r3, r7
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <MX_TIM1_Init+0x168>)
 8002d1e:	f001 ffa1 	bl	8004c64 <LL_GPIO_Init>

}
 8002d22:	bf00      	nop
 8002d24:	3760      	adds	r7, #96	; 0x60
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	04050005 	.word	0x04050005
 8002d34:	40010800 	.word	0x40010800

08002d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d3e:	f107 0314 	add.w	r3, r7, #20
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
 8002d4c:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4e:	463b      	mov	r3, r7
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	f7fe fe99 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002d62:	2004      	movs	r0, #4
 8002d64:	f7fe feae 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002d68:	2008      	movs	r0, #8
 8002d6a:	f7fe feab 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <MX_TIM2_Init+0x154>)
 8002d70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002d72:	2304      	movs	r3, #4
 8002d74:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d76:	463b      	mov	r3, r7
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4845      	ldr	r0, [pc, #276]	; (8002e90 <MX_TIM2_Init+0x158>)
 8002d7c:	f001 ff72 	bl	8004c64 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002d80:	f640 0308 	movw	r3, #2056	; 0x808
 8002d84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002d86:	2304      	movs	r3, #4
 8002d88:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	463b      	mov	r3, r7
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4841      	ldr	r0, [pc, #260]	; (8002e94 <MX_TIM2_Init+0x15c>)
 8002d90:	f001 ff68 	bl	8004c64 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002d94:	f7fe fa9c 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe faea 	bl	8001378 <NVIC_EncodePriority>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4619      	mov	r1, r3
 8002da8:	201c      	movs	r0, #28
 8002daa:	f7fe fabb 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002dae:	201c      	movs	r0, #28
 8002db0:	f7fe fa9c 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
	LL_GPIO_AF_EnableRemap_TIM2();
 8002db4:	f7ff fa28 	bl	8002208 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8002db8:	2103      	movs	r1, #3
 8002dba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dbe:	f7ff f8df 	bl	8001f80 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002dc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dcc:	f7fe ffa4 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dd8:	f7fe ffe8 	bl	8001dac <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2101      	movs	r1, #1
 8002de0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002de4:	f7ff f82c 	bl	8001e40 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002de8:	2200      	movs	r2, #0
 8002dea:	2101      	movs	r1, #1
 8002dec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002df0:	f7ff f870 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002df4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002df8:	2110      	movs	r1, #16
 8002dfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dfe:	f7fe ff8b 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2110      	movs	r1, #16
 8002e06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e0a:	f7fe ffcf 	bl	8001dac <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2110      	movs	r1, #16
 8002e12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e16:	f7ff f813 	bl	8001e40 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e22:	f7ff f857 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e32:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e42:	f002 fa03 	bl	800524c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002e46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e4a:	f7fe fe82 	bl	8001b52 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e54:	f7ff f8a6 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002e58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e5c:	f7ff f8b4 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
	//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
	//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
	LL_TIM_SetCounter(TIM2, 0);
 8002e60:	2100      	movs	r1, #0
 8002e62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e66:	f7fe fe83 	bl	8001b70 <LL_TIM_SetCounter>
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002e6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e6e:	f7ff f8c9 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(TIM2);
 8002e72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e76:	f7ff f8df 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 8002e7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e7e:	f7fe fe59 	bl	8001b34 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	04800080 	.word	0x04800080
 8002e90:	40010800 	.word	0x40010800
 8002e94:	40010c00 	.word	0x40010c00

08002e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	463b      	mov	r3, r7
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	f7fe fde9 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002ec2:	2008      	movs	r0, #8
 8002ec4:	f7fe fdfe 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002ec8:	f243 0330 	movw	r3, #12336	; 0x3030
 8002ecc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002ece:	2304      	movs	r3, #4
 8002ed0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4836      	ldr	r0, [pc, #216]	; (8002fb0 <MX_TIM3_Init+0x118>)
 8002ed8:	f001 fec4 	bl	8004c64 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002edc:	f7fe f9f8 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fa46 	bl	8001378 <NVIC_EncodePriority>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4619      	mov	r1, r3
 8002ef0:	201d      	movs	r0, #29
 8002ef2:	f7fe fa17 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002ef6:	201d      	movs	r0, #29
 8002ef8:	f7fe f9f8 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
	LL_GPIO_AF_RemapPartial_TIM3();
 8002efc:	f7ff f994 	bl	8002228 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002f00:	2103      	movs	r1, #3
 8002f02:	482c      	ldr	r0, [pc, #176]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f04:	f7ff f83c 	bl	8001f80 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002f08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4829      	ldr	r0, [pc, #164]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f10:	f7fe ff02 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2101      	movs	r1, #1
 8002f18:	4826      	ldr	r0, [pc, #152]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f1a:	f7fe ff47 	bl	8001dac <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2101      	movs	r1, #1
 8002f22:	4824      	ldr	r0, [pc, #144]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f24:	f7fe ff8c 	bl	8001e40 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4821      	ldr	r0, [pc, #132]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f2e:	f7fe ffd1 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f36:	2110      	movs	r1, #16
 8002f38:	481e      	ldr	r0, [pc, #120]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f3a:	f7fe feed 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2110      	movs	r1, #16
 8002f42:	481c      	ldr	r0, [pc, #112]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f44:	f7fe ff32 	bl	8001dac <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2110      	movs	r1, #16
 8002f4c:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f4e:	f7fe ff77 	bl	8001e40 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2110      	movs	r1, #16
 8002f56:	4817      	ldr	r0, [pc, #92]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f58:	f7fe ffbc 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f68:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002f6e:	f107 0314 	add.w	r3, r7, #20
 8002f72:	4619      	mov	r1, r3
 8002f74:	480f      	ldr	r0, [pc, #60]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f76:	f002 f969 	bl	800524c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002f7a:	480e      	ldr	r0, [pc, #56]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f7c:	f7fe fde9 	bl	8001b52 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002f80:	2100      	movs	r1, #0
 8002f82:	480c      	ldr	r0, [pc, #48]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f84:	f7ff f80e 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002f88:	480a      	ldr	r0, [pc, #40]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f8a:	f7ff f81d 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
	LL_TIM_SetCounter(TIM3, 0);
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4808      	ldr	r0, [pc, #32]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f92:	f7fe fded 	bl	8001b70 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM3);
 8002f96:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f98:	f7fe fdcc 	bl	8001b34 <LL_TIM_EnableCounter>
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002f9c:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002f9e:	f7ff f831 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(TIM3);
 8002fa2:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <MX_TIM3_Init+0x11c>)
 8002fa4:	f7ff f848 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40010c00 	.word	0x40010c00
 8002fb4:	40000400 	.word	0x40000400

08002fb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	; 0x38
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f002 fd1d 	bl	8005a14 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002fda:	2004      	movs	r0, #4
 8002fdc:	f7fe fd5a 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002fe0:	f7fe f976 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe f9c4 	bl	8001378 <NVIC_EncodePriority>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	201e      	movs	r0, #30
 8002ff6:	f7fe f995 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002ffa:	201e      	movs	r0, #30
 8002ffc:	f7fe f976 	bl	80012ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 23;
 8003000:	2317      	movs	r3, #23
 8003002:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003004:	2300      	movs	r3, #0
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 59999;
 8003008:	f64e 235f 	movw	r3, #59999	; 0xea5f
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800300e:	2300      	movs	r3, #0
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8003012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003016:	4619      	mov	r1, r3
 8003018:	482a      	ldr	r0, [pc, #168]	; (80030c4 <MX_TIM4_Init+0x10c>)
 800301a:	f002 f917 	bl	800524c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800301e:	4829      	ldr	r0, [pc, #164]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003020:	f7fe fd97 	bl	8001b52 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003024:	2100      	movs	r1, #0
 8003026:	4827      	ldr	r0, [pc, #156]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003028:	f7fe ff96 	bl	8001f58 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 800302c:	2101      	movs	r1, #1
 800302e:	4825      	ldr	r0, [pc, #148]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003030:	f7fe fdee 	bl	8001c10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003034:	2360      	movs	r3, #96	; 0x60
 8003036:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 4500;
 8003040:	f241 1394 	movw	r3, #4500	; 0x1194
 8003044:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	461a      	mov	r2, r3
 800304e:	2101      	movs	r1, #1
 8003050:	481c      	ldr	r0, [pc, #112]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003052:	f002 f959 	bl	8005308 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8003056:	2101      	movs	r1, #1
 8003058:	481a      	ldr	r0, [pc, #104]	; (80030c4 <MX_TIM4_Init+0x10c>)
 800305a:	f7fe fd97 	bl	8001b8c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	461a      	mov	r2, r3
 800306e:	2110      	movs	r1, #16
 8003070:	4814      	ldr	r0, [pc, #80]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003072:	f002 f949 	bl	8005308 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8003076:	2110      	movs	r1, #16
 8003078:	4812      	ldr	r0, [pc, #72]	; (80030c4 <MX_TIM4_Init+0x10c>)
 800307a:	f7fe fd87 	bl	8001b8c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800307e:	2100      	movs	r1, #0
 8003080:	4810      	ldr	r0, [pc, #64]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003082:	f7fe ff8f 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003086:	480f      	ldr	r0, [pc, #60]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003088:	f7fe ff9e 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 800308c:	2101      	movs	r1, #1
 800308e:	480d      	ldr	r0, [pc, #52]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003090:	f7fe fe00 	bl	8001c94 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM4_Init 2 */

	LL_TIM_EnableIT_UPDATE(TIM4);
 8003094:	480b      	ldr	r0, [pc, #44]	; (80030c4 <MX_TIM4_Init+0x10c>)
 8003096:	f7fe ffcf 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM4);
 800309a:	480a      	ldr	r0, [pc, #40]	; (80030c4 <MX_TIM4_Init+0x10c>)
 800309c:	f7fe ffb2 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>

	LL_TIM_EnableIT_CC1(TIM4);
 80030a0:	4808      	ldr	r0, [pc, #32]	; (80030c4 <MX_TIM4_Init+0x10c>)
 80030a2:	f7fe ffd8 	bl	8002056 <LL_TIM_EnableIT_CC1>
	LL_TIM_ClearFlag_CC1(TIM4);
 80030a6:	4807      	ldr	r0, [pc, #28]	; (80030c4 <MX_TIM4_Init+0x10c>)
 80030a8:	f7fe ffb9 	bl	800201e <LL_TIM_ClearFlag_CC1>

//  LL_TIM_EnableIT_CC2(TIM4);
//  LL_TIM_ClearFlag_CC2(TIM4);

	LL_TIM_SetCounter(TIM4, 0);
 80030ac:	2100      	movs	r1, #0
 80030ae:	4805      	ldr	r0, [pc, #20]	; (80030c4 <MX_TIM4_Init+0x10c>)
 80030b0:	f7fe fd5e 	bl	8001b70 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM4);
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <MX_TIM4_Init+0x10c>)
 80030b6:	f7fe fd3d 	bl	8001b34 <LL_TIM_EnableCounter>

  /* USER CODE END TIM4_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	3738      	adds	r7, #56	; 0x38
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40000800 	.word	0x40000800

080030c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	; 0x30
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80030ce:	f107 0314 	add.w	r3, r7, #20
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	611a      	str	r2, [r3, #16]
 80030de:	615a      	str	r2, [r3, #20]
 80030e0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e2:	463b      	mov	r3, r7
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80030f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030f4:	f7fe fce6 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80030f8:	2008      	movs	r0, #8
 80030fa:	f7fe fce3 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80030fe:	f244 0340 	movw	r3, #16448	; 0x4040
 8003102:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003104:	2309      	movs	r3, #9
 8003106:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003110:	463b      	mov	r3, r7
 8003112:	4619      	mov	r1, r3
 8003114:	4816      	ldr	r0, [pc, #88]	; (8003170 <MX_USART1_UART_Init+0xa8>)
 8003116:	f001 fda5 	bl	8004c64 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800311a:	f248 0380 	movw	r3, #32896	; 0x8080
 800311e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003120:	2304      	movs	r3, #4
 8003122:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003124:	463b      	mov	r3, r7
 8003126:	4619      	mov	r1, r3
 8003128:	4811      	ldr	r0, [pc, #68]	; (8003170 <MX_USART1_UART_Init+0xa8>)
 800312a:	f001 fd9b 	bl	8004c64 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 800312e:	f7ff f85b 	bl	80021e8 <LL_GPIO_AF_EnableRemap_USART1>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003132:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003136:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800313c:	2300      	movs	r3, #0
 800313e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX;
 8003144:	2308      	movs	r3, #8
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003148:	2300      	movs	r3, #0
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800314c:	2300      	movs	r3, #0
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4619      	mov	r1, r3
 8003156:	4807      	ldr	r0, [pc, #28]	; (8003174 <MX_USART1_UART_Init+0xac>)
 8003158:	f002 fb78 	bl	800584c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800315c:	4805      	ldr	r0, [pc, #20]	; (8003174 <MX_USART1_UART_Init+0xac>)
 800315e:	f7fe ff98 	bl	8002092 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003162:	4804      	ldr	r0, [pc, #16]	; (8003174 <MX_USART1_UART_Init+0xac>)
 8003164:	f7fe ff86 	bl	8002074 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003168:	bf00      	nop
 800316a:	3730      	adds	r7, #48	; 0x30
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40010c00 	.word	0x40010c00
 8003174:	40013800 	.word	0x40013800

08003178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800317c:	2001      	movs	r0, #1
 800317e:	f7fe fc71 	bl	8001a64 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003182:	f7fe f8a5 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8003186:	4603      	mov	r3, r0
 8003188:	2200      	movs	r2, #0
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe f8f3 	bl	8001378 <NVIC_EncodePriority>
 8003192:	4603      	mov	r3, r0
 8003194:	4619      	mov	r1, r3
 8003196:	200b      	movs	r0, #11
 8003198:	f7fe f8c4 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800319c:	200b      	movs	r0, #11
 800319e:	f7fe f8a5 	bl	80012ec <__NVIC_EnableIRQ>

}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80031ae:	f107 0318 	add.w	r3, r7, #24
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80031c6:	2010      	movs	r0, #16
 80031c8:	f7fe fc7c 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80031cc:	2020      	movs	r0, #32
 80031ce:	f7fe fc79 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80031d2:	2004      	movs	r0, #4
 80031d4:	f7fe fc76 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80031d8:	2008      	movs	r0, #8
 80031da:	f7fe fc73 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Debug_Led_Pin|Debug_GPIO_Pin);
 80031de:	4959      	ldr	r1, [pc, #356]	; (8003344 <MX_GPIO_Init+0x19c>)
 80031e0:	4859      	ldr	r0, [pc, #356]	; (8003348 <MX_GPIO_Init+0x1a0>)
 80031e2:	f7fe ffe2 	bl	80021aa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80031e6:	4959      	ldr	r1, [pc, #356]	; (800334c <MX_GPIO_Init+0x1a4>)
 80031e8:	4859      	ldr	r0, [pc, #356]	; (8003350 <MX_GPIO_Init+0x1a8>)
 80031ea:	f7fe ffde 	bl	80021aa <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 80031ee:	4959      	ldr	r1, [pc, #356]	; (8003354 <MX_GPIO_Init+0x1ac>)
 80031f0:	4859      	ldr	r0, [pc, #356]	; (8003358 <MX_GPIO_Init+0x1b0>)
 80031f2:	f7fe ffda 	bl	80021aa <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Debug_Led_Pin;
 80031f6:	4b59      	ldr	r3, [pc, #356]	; (800335c <MX_GPIO_Init+0x1b4>)
 80031f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031fa:	2301      	movs	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80031fe:	2302      	movs	r3, #2
 8003200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Debug_Led_GPIO_Port, &GPIO_InitStruct);
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	4619      	mov	r1, r3
 800320a:	484f      	ldr	r0, [pc, #316]	; (8003348 <MX_GPIO_Init+0x1a0>)
 800320c:	f001 fd2a 	bl	8004c64 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Debug_GPIO_Pin;
 8003210:	4b53      	ldr	r3, [pc, #332]	; (8003360 <MX_GPIO_Init+0x1b8>)
 8003212:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003214:	2301      	movs	r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Debug_GPIO_GPIO_Port, &GPIO_InitStruct);
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	4619      	mov	r1, r3
 8003224:	4848      	ldr	r0, [pc, #288]	; (8003348 <MX_GPIO_Init+0x1a0>)
 8003226:	f001 fd1d 	bl	8004c64 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Distance_Pin;
 800322a:	f240 1301 	movw	r3, #257	; 0x101
 800322e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003230:	2308      	movs	r3, #8
 8003232:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8003234:	2301      	movs	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(Distance_GPIO_Port, &GPIO_InitStruct);
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4844      	ldr	r0, [pc, #272]	; (8003350 <MX_GPIO_Init+0x1a8>)
 800323e:	f001 fd11 	bl	8004c64 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003242:	4b42      	ldr	r3, [pc, #264]	; (800334c <MX_GPIO_Init+0x1a4>)
 8003244:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003246:	2301      	movs	r3, #1
 8003248:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800324a:	2303      	movs	r3, #3
 800324c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	4619      	mov	r1, r3
 8003256:	483e      	ldr	r0, [pc, #248]	; (8003350 <MX_GPIO_Init+0x1a8>)
 8003258:	f001 fd04 	bl	8004c64 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <MX_GPIO_Init+0x1bc>)
 800325e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003260:	2301      	movs	r3, #1
 8003262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003264:	2302      	movs	r3, #2
 8003266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	4619      	mov	r1, r3
 8003270:	4839      	ldr	r0, [pc, #228]	; (8003358 <MX_GPIO_Init+0x1b0>)
 8003272:	f001 fcf7 	bl	8004c64 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003276:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <MX_GPIO_Init+0x1c0>)
 8003278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800327a:	2301      	movs	r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800327e:	2303      	movs	r3, #3
 8003280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4833      	ldr	r0, [pc, #204]	; (8003358 <MX_GPIO_Init+0x1b0>)
 800328c:	f001 fcea 	bl	8004c64 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 8003290:	4936      	ldr	r1, [pc, #216]	; (800336c <MX_GPIO_Init+0x1c4>)
 8003292:	2001      	movs	r0, #1
 8003294:	f7fe fff0 	bl	8002278 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 8003298:	4935      	ldr	r1, [pc, #212]	; (8003370 <MX_GPIO_Init+0x1c8>)
 800329a:	2001      	movs	r0, #1
 800329c:	f7fe ffec 	bl	8002278 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 80032a0:	4934      	ldr	r1, [pc, #208]	; (8003374 <MX_GPIO_Init+0x1cc>)
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7fe ffe8 	bl	8002278 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80032a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ac:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80032b2:	2300      	movs	r3, #0
 80032b4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80032b6:	2301      	movs	r3, #1
 80032b8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80032ba:	f107 0318 	add.w	r3, r7, #24
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 fb9c 	bl	80049fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80032c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80032ce:	2300      	movs	r3, #0
 80032d0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80032d2:	2301      	movs	r3, #1
 80032d4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80032d6:	f107 0318 	add.w	r3, r7, #24
 80032da:	4618      	mov	r0, r3
 80032dc:	f001 fb8e 	bl	80049fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80032e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032e4:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80032e6:	2301      	movs	r3, #1
 80032e8:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80032ea:	2300      	movs	r3, #0
 80032ec:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80032ee:	2301      	movs	r3, #1
 80032f0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80032f2:	f107 0318 	add.w	r3, r7, #24
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 fb80 	bl	80049fc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(BTN1_GPIO_Port, BTN1_Pin, LL_GPIO_MODE_FLOATING);
 80032fc:	2204      	movs	r2, #4
 80032fe:	491e      	ldr	r1, [pc, #120]	; (8003378 <MX_GPIO_Init+0x1d0>)
 8003300:	4813      	ldr	r0, [pc, #76]	; (8003350 <MX_GPIO_Init+0x1a8>)
 8003302:	f7fe fefb 	bl	80020fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_GPIO_Port, BTN2_Pin, LL_GPIO_MODE_FLOATING);
 8003306:	2204      	movs	r2, #4
 8003308:	4914      	ldr	r1, [pc, #80]	; (800335c <MX_GPIO_Init+0x1b4>)
 800330a:	4811      	ldr	r0, [pc, #68]	; (8003350 <MX_GPIO_Init+0x1a8>)
 800330c:	f7fe fef6 	bl	80020fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_GPIO_Port, BTN3_Pin, LL_GPIO_MODE_FLOATING);
 8003310:	2204      	movs	r2, #4
 8003312:	4913      	ldr	r1, [pc, #76]	; (8003360 <MX_GPIO_Init+0x1b8>)
 8003314:	480e      	ldr	r0, [pc, #56]	; (8003350 <MX_GPIO_Init+0x1a8>)
 8003316:	f7fe fef1 	bl	80020fc <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800331a:	f7fd ffd9 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800331e:	4603      	mov	r3, r0
 8003320:	2200      	movs	r2, #0
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe f827 	bl	8001378 <NVIC_EncodePriority>
 800332a:	4603      	mov	r3, r0
 800332c:	4619      	mov	r1, r3
 800332e:	2028      	movs	r0, #40	; 0x28
 8003330:	f7fd fff8 	bl	8001324 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003334:	2028      	movs	r0, #40	; 0x28
 8003336:	f7fd ffd9 	bl	80012ec <__NVIC_EnableIRQ>

}
 800333a:	bf00      	nop
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	04600060 	.word	0x04600060
 8003348:	40011000 	.word	0x40011000
 800334c:	04800080 	.word	0x04800080
 8003350:	40010c00 	.word	0x40010c00
 8003354:	040a000a 	.word	0x040a000a
 8003358:	40010800 	.word	0x40010800
 800335c:	04200020 	.word	0x04200020
 8003360:	04400040 	.word	0x04400040
 8003364:	04020002 	.word	0x04020002
 8003368:	04080008 	.word	0x04080008
 800336c:	000f0003 	.word	0x000f0003
 8003370:	00f00003 	.word	0x00f00003
 8003374:	0f000003 	.word	0x0f000003
 8003378:	04100010 	.word	0x04100010

0800337c <GetThreshold>:

/* USER CODE BEGIN 4 */

void GetThreshold() {
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b091      	sub	sp, #68	; 0x44
 8003380:	af00      	add	r7, sp, #0
	printf("Getting White Line \n");
 8003382:	4884      	ldr	r0, [pc, #528]	; (8003594 <GetThreshold+0x218>)
 8003384:	f003 f812 	bl	80063ac <puts>
	while(BTN2_Flag == 0);
 8003388:	bf00      	nop
 800338a:	4b83      	ldr	r3, [pc, #524]	; (8003598 <GetThreshold+0x21c>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0fb      	beq.n	800338a <GetThreshold+0xe>
//	while(LL_GPIO_IsInputPinSet(BTN2_GPIO_Port,BTN2_Pin) == 0);
	BTN2_Flag = 0;
 8003392:	4b81      	ldr	r3, [pc, #516]	; (8003598 <GetThreshold+0x21c>)
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
	MotorL_SetPWM(3600);
 8003398:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800339c:	f7fd fec6 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(3600);
 80033a0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80033a4:	f7fd fefa 	bl	800119c <MotorR_SetPWM>
	uint16_t WhiteValue[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]

	for (int i = 0; i < ADC_Sample_Times; ++i) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ba:	e025      	b.n	8003408 <GetThreshold+0x8c>
		for (int i = 0; i < NumberOfSensor; ++i) {
 80033bc:	2300      	movs	r3, #0
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c0:	e01c      	b.n	80033fc <GetThreshold+0x80>
			if (Sensor_ADC_Value[i] > WhiteValue[i]) {
 80033c2:	4a76      	ldr	r2, [pc, #472]	; (800359c <GetThreshold+0x220>)
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80033d4:	440b      	add	r3, r1
 80033d6:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d90b      	bls.n	80033f6 <GetThreshold+0x7a>
				WhiteValue[i] = Sensor_ADC_Value[i];
 80033de:	4a6f      	ldr	r2, [pc, #444]	; (800359c <GetThreshold+0x220>)
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80033f0:	440b      	add	r3, r1
 80033f2:	f823 2c2c 	strh.w	r2, [r3, #-44]
		for (int i = 0; i < NumberOfSensor; ++i) {
 80033f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f8:	3301      	adds	r3, #1
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	2b07      	cmp	r3, #7
 8003400:	dddf      	ble.n	80033c2 <GetThreshold+0x46>
	for (int i = 0; i < ADC_Sample_Times; ++i) {
 8003402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003404:	3301      	adds	r3, #1
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340a:	4a65      	ldr	r2, [pc, #404]	; (80035a0 <GetThreshold+0x224>)
 800340c:	4293      	cmp	r3, r2
 800340e:	ddd5      	ble.n	80033bc <GetThreshold+0x40>
			}
		}
	}
	printf("WhiteValue: ");
 8003410:	4864      	ldr	r0, [pc, #400]	; (80035a4 <GetThreshold+0x228>)
 8003412:	f002 ff57 	bl	80062c4 <iprintf>
	for (int i = 0; i < 8; ++i) {
 8003416:	2300      	movs	r3, #0
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
 800341a:	e00d      	b.n	8003438 <GetThreshold+0xbc>
			printf("%d \t",WhiteValue[i] );
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003424:	4413      	add	r3, r2
 8003426:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800342a:	4619      	mov	r1, r3
 800342c:	485e      	ldr	r0, [pc, #376]	; (80035a8 <GetThreshold+0x22c>)
 800342e:	f002 ff49 	bl	80062c4 <iprintf>
	for (int i = 0; i < 8; ++i) {
 8003432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003434:	3301      	adds	r3, #1
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	2b07      	cmp	r3, #7
 800343c:	ddee      	ble.n	800341c <GetThreshold+0xa0>
		}
	printf("\r\n");
 800343e:	485b      	ldr	r0, [pc, #364]	; (80035ac <GetThreshold+0x230>)
 8003440:	f002 ffb4 	bl	80063ac <puts>
	LL_mDelay(1000);
 8003444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003448:	f002 fa88 	bl	800595c <LL_mDelay>
	MotorL_SetPWM(0);
 800344c:	2000      	movs	r0, #0
 800344e:	f7fd fe6d 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 8003452:	2000      	movs	r0, #0
 8003454:	f7fd fea2 	bl	800119c <MotorR_SetPWM>
	BTN2_Flag = 0;
 8003458:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <GetThreshold+0x21c>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
	while(BTN2_Flag == 0);
 800345e:	bf00      	nop
 8003460:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <GetThreshold+0x21c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0fb      	beq.n	8003460 <GetThreshold+0xe4>
//	while(LL_GPIO_IsInputPinSet(BTN2_GPIO_Port,BTN2_Pin) == 0);
	BTN2_Flag = 0;
 8003468:	4b4b      	ldr	r3, [pc, #300]	; (8003598 <GetThreshold+0x21c>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
	printf("Getting Black Line\n");
 800346e:	4850      	ldr	r0, [pc, #320]	; (80035b0 <GetThreshold+0x234>)
 8003470:	f002 ff9c 	bl	80063ac <puts>
	MotorL_SetPWM(-3600);
 8003474:	484f      	ldr	r0, [pc, #316]	; (80035b4 <GetThreshold+0x238>)
 8003476:	f7fd fe59 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(-3600);
 800347a:	484e      	ldr	r0, [pc, #312]	; (80035b4 <GetThreshold+0x238>)
 800347c:	f7fd fe8e 	bl	800119c <MotorR_SetPWM>
	uint16_t BlackValue[] = { 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4095 };
 8003480:	4b4d      	ldr	r3, [pc, #308]	; (80035b8 <GetThreshold+0x23c>)
 8003482:	1d3c      	adds	r4, r7, #4
 8003484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 0; i < ADC_Sample_Times; ++i) {
 800348a:	2300      	movs	r3, #0
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
 800348e:	e025      	b.n	80034dc <GetThreshold+0x160>
		for (int i = 0; i < NumberOfSensor; ++i) {
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003494:	e01c      	b.n	80034d0 <GetThreshold+0x154>
			if (Sensor_ADC_Value[i] < BlackValue[i]) {
 8003496:	4a41      	ldr	r2, [pc, #260]	; (800359c <GetThreshold+0x220>)
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80034a8:	440b      	add	r3, r1
 80034aa:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20b      	bcs.n	80034ca <GetThreshold+0x14e>
				BlackValue[i] = Sensor_ADC_Value[i];
 80034b2:	4a3a      	ldr	r2, [pc, #232]	; (800359c <GetThreshold+0x220>)
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80034c4:	440b      	add	r3, r1
 80034c6:	f823 2c3c 	strh.w	r2, [r3, #-60]
		for (int i = 0; i < NumberOfSensor; ++i) {
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	3301      	adds	r3, #1
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	2b07      	cmp	r3, #7
 80034d4:	dddf      	ble.n	8003496 <GetThreshold+0x11a>
	for (int i = 0; i < ADC_Sample_Times; ++i) {
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	3301      	adds	r3, #1
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <GetThreshold+0x224>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	ddd5      	ble.n	8003490 <GetThreshold+0x114>
			}
		}
	}
	printf("BlackValue: ");
 80034e4:	4835      	ldr	r0, [pc, #212]	; (80035bc <GetThreshold+0x240>)
 80034e6:	f002 feed 	bl	80062c4 <iprintf>
	for (int i = 0; i < 8; ++i) {
 80034ea:	2300      	movs	r3, #0
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ee:	e00d      	b.n	800350c <GetThreshold+0x190>
			printf("%d \t",BlackValue[i] );
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80034f8:	4413      	add	r3, r2
 80034fa:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80034fe:	4619      	mov	r1, r3
 8003500:	4829      	ldr	r0, [pc, #164]	; (80035a8 <GetThreshold+0x22c>)
 8003502:	f002 fedf 	bl	80062c4 <iprintf>
	for (int i = 0; i < 8; ++i) {
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	3301      	adds	r3, #1
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	2b07      	cmp	r3, #7
 8003510:	ddee      	ble.n	80034f0 <GetThreshold+0x174>
		}
	printf("\r\n");
 8003512:	4826      	ldr	r0, [pc, #152]	; (80035ac <GetThreshold+0x230>)
 8003514:	f002 ff4a 	bl	80063ac <puts>
	LL_mDelay(1000);
 8003518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800351c:	f002 fa1e 	bl	800595c <LL_mDelay>
	MotorL_SetPWM(0);
 8003520:	2000      	movs	r0, #0
 8003522:	f7fd fe03 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd fe38 	bl	800119c <MotorR_SetPWM>
	printf("Done: ");
 800352c:	4824      	ldr	r0, [pc, #144]	; (80035c0 <GetThreshold+0x244>)
 800352e:	f002 fec9 	bl	80062c4 <iprintf>
	for (int i = 0; i < 8; ++i) {
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
 8003536:	e022      	b.n	800357e <GetThreshold+0x202>
		Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i]) / 2;
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003540:	4413      	add	r3, r2
 8003542:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003546:	461a      	mov	r2, r3
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003550:	440b      	add	r3, r1
 8003552:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8003556:	4413      	add	r3, r2
 8003558:	0fda      	lsrs	r2, r3, #31
 800355a:	4413      	add	r3, r2
 800355c:	105b      	asrs	r3, r3, #1
 800355e:	b299      	uxth	r1, r3
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <GetThreshold+0x248>)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		printf("%d \t",Sensor_Threshold[i] );
 8003568:	4a16      	ldr	r2, [pc, #88]	; (80035c4 <GetThreshold+0x248>)
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003570:	4619      	mov	r1, r3
 8003572:	480d      	ldr	r0, [pc, #52]	; (80035a8 <GetThreshold+0x22c>)
 8003574:	f002 fea6 	bl	80062c4 <iprintf>
	for (int i = 0; i < 8; ++i) {
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	3301      	adds	r3, #1
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	2b07      	cmp	r3, #7
 8003582:	ddd9      	ble.n	8003538 <GetThreshold+0x1bc>
	}
	printf("\r\n");
 8003584:	4809      	ldr	r0, [pc, #36]	; (80035ac <GetThreshold+0x230>)
 8003586:	f002 ff11 	bl	80063ac <puts>

}
 800358a:	bf00      	nop
 800358c:	3744      	adds	r7, #68	; 0x44
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	080082b0 	.word	0x080082b0
 8003598:	20000210 	.word	0x20000210
 800359c:	20000220 	.word	0x20000220
 80035a0:	000f423f 	.word	0x000f423f
 80035a4:	080082c4 	.word	0x080082c4
 80035a8:	080082d4 	.word	0x080082d4
 80035ac:	080082dc 	.word	0x080082dc
 80035b0:	080082e0 	.word	0x080082e0
 80035b4:	fffff1f0 	.word	0xfffff1f0
 80035b8:	0800830c 	.word	0x0800830c
 80035bc:	080082f4 	.word	0x080082f4
 80035c0:	08008304 	.word	0x08008304
 80035c4:	20000000 	.word	0x20000000

080035c8 <Sensor_Convert_A2D>:
void Sensor_Convert_A2D() {
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
	LineDetect = 0;
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <Sensor_Convert_A2D+0x5c>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; ++i) {
 80035d4:	2300      	movs	r3, #0
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	e01c      	b.n	8003614 <Sensor_Convert_A2D+0x4c>
		if (Sensor_ADC_Value[i] < Sensor_Threshold[i]) {
 80035da:	4a13      	ldr	r2, [pc, #76]	; (8003628 <Sensor_Convert_A2D+0x60>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	4911      	ldr	r1, [pc, #68]	; (800362c <Sensor_Convert_A2D+0x64>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d20e      	bcs.n	800360e <Sensor_Convert_A2D+0x46>
			sbi(LineDetect, (7 - i));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2201      	movs	r2, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	b25a      	sxtb	r2, r3
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <Sensor_Convert_A2D+0x5c>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	b25b      	sxtb	r3, r3
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <Sensor_Convert_A2D+0x5c>)
 800360c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; ++i) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3301      	adds	r3, #1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b07      	cmp	r3, #7
 8003618:	dddf      	ble.n	80035da <Sensor_Convert_A2D+0x12>
			//			  printf("1 ");
		}
	};
	//	printf("\n");
	//	LL_mDelay(500);
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	20000205 	.word	0x20000205
 8003628:	20000220 	.word	0x20000220
 800362c:	20000000 	.word	0x20000000

08003630 <Car_DiThang_Process>:
		Servo_SetAngle(ServoAngle);
		printf("Servo Angle: %g \n", ServoAngle);
	}
}

void Car_DiThang_Process() {
 8003630:	b598      	push	{r3, r4, r7, lr}
 8003632:	af00      	add	r7, sp, #0
//	MotorL_SetPWM(MaxSpeed);
//	MotorR_SetPWM(MaxSpeed);
//	Servo_SetAngle(0);
	switch (LineDetect) {
 8003634:	4b38      	ldr	r3, [pc, #224]	; (8003718 <Car_DiThang_Process+0xe8>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b1c      	cmp	r3, #28
 800363a:	d004      	beq.n	8003646 <Car_DiThang_Process+0x16>
 800363c:	2b38      	cmp	r3, #56	; 0x38
 800363e:	d01f      	beq.n	8003680 <Car_DiThang_Process+0x50>
 8003640:	2b18      	cmp	r3, #24
 8003642:	d03b      	beq.n	80036bc <Car_DiThang_Process+0x8c>
		MotorL_SetPWM(MaxSpeed);
		MotorR_SetPWM(MaxSpeed * 0.998);
		Servo_SetAngle(0);
		break;
	}
}
 8003644:	e058      	b.n	80036f8 <Car_DiThang_Process+0xc8>
		MotorL_SetPWM(MaxSpeed);
 8003646:	4b35      	ldr	r3, [pc, #212]	; (800371c <Car_DiThang_Process+0xec>)
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fd6e 	bl	800112c <MotorL_SetPWM>
		MotorR_SetPWM(MaxSpeed * 0.99);
 8003650:	4b32      	ldr	r3, [pc, #200]	; (800371c <Car_DiThang_Process+0xec>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc fed5 	bl	8000404 <__aeabi_i2d>
 800365a:	a329      	add	r3, pc, #164	; (adr r3, 8003700 <Car_DiThang_Process+0xd0>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc ff3a 	bl	80004d8 <__aeabi_dmul>
 8003664:	4603      	mov	r3, r0
 8003666:	460c      	mov	r4, r1
 8003668:	4618      	mov	r0, r3
 800366a:	4621      	mov	r1, r4
 800366c:	f7fd f9e4 	bl	8000a38 <__aeabi_d2iz>
 8003670:	4603      	mov	r3, r0
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fd92 	bl	800119c <MotorR_SetPWM>
		Servo_SetAngle(-1.5);
 8003678:	4829      	ldr	r0, [pc, #164]	; (8003720 <Car_DiThang_Process+0xf0>)
 800367a:	f7fd fdc7 	bl	800120c <Servo_SetAngle>
		break;
 800367e:	e03b      	b.n	80036f8 <Car_DiThang_Process+0xc8>
		MotorR_SetPWM(MaxSpeed);
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <Car_DiThang_Process+0xec>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fd fd89 	bl	800119c <MotorR_SetPWM>
		MotorL_SetPWM(MaxSpeed * 0.995);
 800368a:	4b24      	ldr	r3, [pc, #144]	; (800371c <Car_DiThang_Process+0xec>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc feb8 	bl	8000404 <__aeabi_i2d>
 8003694:	a31c      	add	r3, pc, #112	; (adr r3, 8003708 <Car_DiThang_Process+0xd8>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fc ff1d 	bl	80004d8 <__aeabi_dmul>
 800369e:	4603      	mov	r3, r0
 80036a0:	460c      	mov	r4, r1
 80036a2:	4618      	mov	r0, r3
 80036a4:	4621      	mov	r1, r4
 80036a6:	f7fd f9c7 	bl	8000a38 <__aeabi_d2iz>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fd3d 	bl	800112c <MotorL_SetPWM>
		Servo_SetAngle(1);
 80036b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80036b6:	f7fd fda9 	bl	800120c <Servo_SetAngle>
		break;
 80036ba:	e01d      	b.n	80036f8 <Car_DiThang_Process+0xc8>
		MotorL_SetPWM(MaxSpeed);
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <Car_DiThang_Process+0xec>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fd33 	bl	800112c <MotorL_SetPWM>
		MotorR_SetPWM(MaxSpeed * 0.998);
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <Car_DiThang_Process+0xec>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc fe9a 	bl	8000404 <__aeabi_i2d>
 80036d0:	a30f      	add	r3, pc, #60	; (adr r3, 8003710 <Car_DiThang_Process+0xe0>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fc feff 	bl	80004d8 <__aeabi_dmul>
 80036da:	4603      	mov	r3, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	4618      	mov	r0, r3
 80036e0:	4621      	mov	r1, r4
 80036e2:	f7fd f9a9 	bl	8000a38 <__aeabi_d2iz>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fd fd57 	bl	800119c <MotorR_SetPWM>
		Servo_SetAngle(0);
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f7fd fd8b 	bl	800120c <Servo_SetAngle>
		break;
 80036f6:	bf00      	nop
}
 80036f8:	bf00      	nop
 80036fa:	bd98      	pop	{r3, r4, r7, pc}
 80036fc:	f3af 8000 	nop.w
 8003700:	7ae147ae 	.word	0x7ae147ae
 8003704:	3fefae14 	.word	0x3fefae14
 8003708:	3d70a3d7 	.word	0x3d70a3d7
 800370c:	3fefd70a 	.word	0x3fefd70a
 8003710:	b22d0e56 	.word	0xb22d0e56
 8003714:	3fefef9d 	.word	0x3fefef9d
 8003718:	20000205 	.word	0x20000205
 800371c:	20000010 	.word	0x20000010
 8003720:	bfc00000 	.word	0xbfc00000
 8003724:	00000000 	.word	0x00000000

08003728 <Car_BamLine_Process>:
void Car_BamLine_Process() {
 8003728:	b598      	push	{r3, r4, r7, lr}
 800372a:	af00      	add	r7, sp, #0
	if (CarState == LechTrai) {
 800372c:	4bcc      	ldr	r3, [pc, #816]	; (8003a60 <Car_BamLine_Process+0x338>)
 800372e:	f993 3000 	ldrsb.w	r3, [r3]
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	f040 81c9 	bne.w	8003acc <Car_BamLine_Process+0x3a4>
		switch (LineDetect) {
 800373a:	4bca      	ldr	r3, [pc, #808]	; (8003a64 <Car_BamLine_Process+0x33c>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b07      	cmp	r3, #7
 8003740:	f000 80fb 	beq.w	800393a <Car_BamLine_Process+0x212>
 8003744:	2b07      	cmp	r3, #7
 8003746:	dc0e      	bgt.n	8003766 <Car_BamLine_Process+0x3e>
 8003748:	2b01      	cmp	r3, #1
 800374a:	f000 809e 	beq.w	800388a <Car_BamLine_Process+0x162>
 800374e:	2b01      	cmp	r3, #1
 8003750:	dc02      	bgt.n	8003758 <Car_BamLine_Process+0x30>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d06d      	beq.n	8003832 <Car_BamLine_Process+0x10a>
			//			  case 0b00011100:
			//				  MotorR_SetPWM(MaxSpeed * 0.95);
			//				  MotorL_SetPWM(MaxSpeed * 1);
			//				  Servo_SetAngle(4);
		}
		return;
 8003756:	e38a      	b.n	8003e6e <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003758:	2b03      	cmp	r3, #3
 800375a:	f000 80c2 	beq.w	80038e2 <Car_BamLine_Process+0x1ba>
 800375e:	2b06      	cmp	r3, #6
 8003760:	f000 8117 	beq.w	8003992 <Car_BamLine_Process+0x26a>
		return;
 8003764:	e383      	b.n	8003e6e <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003766:	2b0e      	cmp	r3, #14
 8003768:	f000 8130 	beq.w	80039cc <Car_BamLine_Process+0x2a4>
 800376c:	2b0e      	cmp	r3, #14
 800376e:	dc03      	bgt.n	8003778 <Car_BamLine_Process+0x50>
 8003770:	2b0c      	cmp	r3, #12
 8003772:	f000 818d 	beq.w	8003a90 <Car_BamLine_Process+0x368>
		return;
 8003776:	e37a      	b.n	8003e6e <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003778:	2b80      	cmp	r3, #128	; 0x80
 800377a:	d02e      	beq.n	80037da <Car_BamLine_Process+0xb2>
 800377c:	2bc0      	cmp	r3, #192	; 0xc0
 800377e:	d000      	beq.n	8003782 <Car_BamLine_Process+0x5a>
		return;
 8003780:	e375      	b.n	8003e6e <Car_BamLine_Process+0x746>
			MotorR_SetPWM(MaxSpeed * 0.60);
 8003782:	4bb9      	ldr	r3, [pc, #740]	; (8003a68 <Car_BamLine_Process+0x340>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fc fe3c 	bl	8000404 <__aeabi_i2d>
 800378c:	a3a6      	add	r3, pc, #664	; (adr r3, 8003a28 <Car_BamLine_Process+0x300>)
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f7fc fea1 	bl	80004d8 <__aeabi_dmul>
 8003796:	4603      	mov	r3, r0
 8003798:	460c      	mov	r4, r1
 800379a:	4618      	mov	r0, r3
 800379c:	4621      	mov	r1, r4
 800379e:	f7fd f94b 	bl	8000a38 <__aeabi_d2iz>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd fcf9 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.85);
 80037aa:	4baf      	ldr	r3, [pc, #700]	; (8003a68 <Car_BamLine_Process+0x340>)
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fc fe28 	bl	8000404 <__aeabi_i2d>
 80037b4:	a39e      	add	r3, pc, #632	; (adr r3, 8003a30 <Car_BamLine_Process+0x308>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f7fc fe8d 	bl	80004d8 <__aeabi_dmul>
 80037be:	4603      	mov	r3, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	4618      	mov	r0, r3
 80037c4:	4621      	mov	r1, r4
 80037c6:	f7fd f937 	bl	8000a38 <__aeabi_d2iz>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd fcad 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(59); // 73
 80037d2:	48a6      	ldr	r0, [pc, #664]	; (8003a6c <Car_BamLine_Process+0x344>)
 80037d4:	f7fd fd1a 	bl	800120c <Servo_SetAngle>
			break;
 80037d8:	e177      	b.n	8003aca <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.65);
 80037da:	4ba3      	ldr	r3, [pc, #652]	; (8003a68 <Car_BamLine_Process+0x340>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fe10 	bl	8000404 <__aeabi_i2d>
 80037e4:	a394      	add	r3, pc, #592	; (adr r3, 8003a38 <Car_BamLine_Process+0x310>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f7fc fe75 	bl	80004d8 <__aeabi_dmul>
 80037ee:	4603      	mov	r3, r0
 80037f0:	460c      	mov	r4, r1
 80037f2:	4618      	mov	r0, r3
 80037f4:	4621      	mov	r1, r4
 80037f6:	f7fd f91f 	bl	8000a38 <__aeabi_d2iz>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd fccd 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.85);
 8003802:	4b99      	ldr	r3, [pc, #612]	; (8003a68 <Car_BamLine_Process+0x340>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fdfc 	bl	8000404 <__aeabi_i2d>
 800380c:	a388      	add	r3, pc, #544	; (adr r3, 8003a30 <Car_BamLine_Process+0x308>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f7fc fe61 	bl	80004d8 <__aeabi_dmul>
 8003816:	4603      	mov	r3, r0
 8003818:	460c      	mov	r4, r1
 800381a:	4618      	mov	r0, r3
 800381c:	4621      	mov	r1, r4
 800381e:	f7fd f90b 	bl	8000a38 <__aeabi_d2iz>
 8003822:	4603      	mov	r3, r0
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fc81 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(52.5); // 64
 800382a:	4891      	ldr	r0, [pc, #580]	; (8003a70 <Car_BamLine_Process+0x348>)
 800382c:	f7fd fcee 	bl	800120c <Servo_SetAngle>
			break;
 8003830:	e14b      	b.n	8003aca <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.65);
 8003832:	4b8d      	ldr	r3, [pc, #564]	; (8003a68 <Car_BamLine_Process+0x340>)
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fde4 	bl	8000404 <__aeabi_i2d>
 800383c:	a37e      	add	r3, pc, #504	; (adr r3, 8003a38 <Car_BamLine_Process+0x310>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f7fc fe49 	bl	80004d8 <__aeabi_dmul>
 8003846:	4603      	mov	r3, r0
 8003848:	460c      	mov	r4, r1
 800384a:	4618      	mov	r0, r3
 800384c:	4621      	mov	r1, r4
 800384e:	f7fd f8f3 	bl	8000a38 <__aeabi_d2iz>
 8003852:	4603      	mov	r3, r0
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fca1 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.9);
 800385a:	4b83      	ldr	r3, [pc, #524]	; (8003a68 <Car_BamLine_Process+0x340>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fdd0 	bl	8000404 <__aeabi_i2d>
 8003864:	a376      	add	r3, pc, #472	; (adr r3, 8003a40 <Car_BamLine_Process+0x318>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f7fc fe35 	bl	80004d8 <__aeabi_dmul>
 800386e:	4603      	mov	r3, r0
 8003870:	460c      	mov	r4, r1
 8003872:	4618      	mov	r0, r3
 8003874:	4621      	mov	r1, r4
 8003876:	f7fd f8df 	bl	8000a38 <__aeabi_d2iz>
 800387a:	4603      	mov	r3, r0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fc55 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(47); // 59
 8003882:	487c      	ldr	r0, [pc, #496]	; (8003a74 <Car_BamLine_Process+0x34c>)
 8003884:	f7fd fcc2 	bl	800120c <Servo_SetAngle>
			break;
 8003888:	e11f      	b.n	8003aca <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.70);
 800388a:	4b77      	ldr	r3, [pc, #476]	; (8003a68 <Car_BamLine_Process+0x340>)
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fc fdb8 	bl	8000404 <__aeabi_i2d>
 8003894:	a36c      	add	r3, pc, #432	; (adr r3, 8003a48 <Car_BamLine_Process+0x320>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f7fc fe1d 	bl	80004d8 <__aeabi_dmul>
 800389e:	4603      	mov	r3, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	4618      	mov	r0, r3
 80038a4:	4621      	mov	r1, r4
 80038a6:	f7fd f8c7 	bl	8000a38 <__aeabi_d2iz>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fc75 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.9);
 80038b2:	4b6d      	ldr	r3, [pc, #436]	; (8003a68 <Car_BamLine_Process+0x340>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fda4 	bl	8000404 <__aeabi_i2d>
 80038bc:	a360      	add	r3, pc, #384	; (adr r3, 8003a40 <Car_BamLine_Process+0x318>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc fe09 	bl	80004d8 <__aeabi_dmul>
 80038c6:	4603      	mov	r3, r0
 80038c8:	460c      	mov	r4, r1
 80038ca:	4618      	mov	r0, r3
 80038cc:	4621      	mov	r1, r4
 80038ce:	f7fd f8b3 	bl	8000a38 <__aeabi_d2iz>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fc29 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(31); // 45
 80038da:	4867      	ldr	r0, [pc, #412]	; (8003a78 <Car_BamLine_Process+0x350>)
 80038dc:	f7fd fc96 	bl	800120c <Servo_SetAngle>
			break;
 80038e0:	e0f3      	b.n	8003aca <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.70);
 80038e2:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <Car_BamLine_Process+0x340>)
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fc fd8c 	bl	8000404 <__aeabi_i2d>
 80038ec:	a356      	add	r3, pc, #344	; (adr r3, 8003a48 <Car_BamLine_Process+0x320>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fdf1 	bl	80004d8 <__aeabi_dmul>
 80038f6:	4603      	mov	r3, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	4618      	mov	r0, r3
 80038fc:	4621      	mov	r1, r4
 80038fe:	f7fd f89b 	bl	8000a38 <__aeabi_d2iz>
 8003902:	4603      	mov	r3, r0
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fc49 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 800390a:	4b57      	ldr	r3, [pc, #348]	; (8003a68 <Car_BamLine_Process+0x340>)
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fd78 	bl	8000404 <__aeabi_i2d>
 8003914:	a34e      	add	r3, pc, #312	; (adr r3, 8003a50 <Car_BamLine_Process+0x328>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	f7fc fddd 	bl	80004d8 <__aeabi_dmul>
 800391e:	4603      	mov	r3, r0
 8003920:	460c      	mov	r4, r1
 8003922:	4618      	mov	r0, r3
 8003924:	4621      	mov	r1, r4
 8003926:	f7fd f887 	bl	8000a38 <__aeabi_d2iz>
 800392a:	4603      	mov	r3, r0
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd fbfd 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(29); //33
 8003932:	4852      	ldr	r0, [pc, #328]	; (8003a7c <Car_BamLine_Process+0x354>)
 8003934:	f7fd fc6a 	bl	800120c <Servo_SetAngle>
			break;
 8003938:	e0c7      	b.n	8003aca <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.75);
 800393a:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <Car_BamLine_Process+0x340>)
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fc fd60 	bl	8000404 <__aeabi_i2d>
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <Car_BamLine_Process+0x358>)
 800394a:	f7fc fdc5 	bl	80004d8 <__aeabi_dmul>
 800394e:	4603      	mov	r3, r0
 8003950:	460c      	mov	r4, r1
 8003952:	4618      	mov	r0, r3
 8003954:	4621      	mov	r1, r4
 8003956:	f7fd f86f 	bl	8000a38 <__aeabi_d2iz>
 800395a:	4603      	mov	r3, r0
 800395c:	4618      	mov	r0, r3
 800395e:	f7fd fc1d 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 8003962:	4b41      	ldr	r3, [pc, #260]	; (8003a68 <Car_BamLine_Process+0x340>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc fd4c 	bl	8000404 <__aeabi_i2d>
 800396c:	a338      	add	r3, pc, #224	; (adr r3, 8003a50 <Car_BamLine_Process+0x328>)
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	f7fc fdb1 	bl	80004d8 <__aeabi_dmul>
 8003976:	4603      	mov	r3, r0
 8003978:	460c      	mov	r4, r1
 800397a:	4618      	mov	r0, r3
 800397c:	4621      	mov	r1, r4
 800397e:	f7fd f85b 	bl	8000a38 <__aeabi_d2iz>
 8003982:	4603      	mov	r3, r0
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd fbd1 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(20); // 25
 800398a:	483e      	ldr	r0, [pc, #248]	; (8003a84 <Car_BamLine_Process+0x35c>)
 800398c:	f7fd fc3e 	bl	800120c <Servo_SetAngle>
			break;
 8003990:	e09b      	b.n	8003aca <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.85);
 8003992:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <Car_BamLine_Process+0x340>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7fc fd34 	bl	8000404 <__aeabi_i2d>
 800399c:	a324      	add	r3, pc, #144	; (adr r3, 8003a30 <Car_BamLine_Process+0x308>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f7fc fd99 	bl	80004d8 <__aeabi_dmul>
 80039a6:	4603      	mov	r3, r0
 80039a8:	460c      	mov	r4, r1
 80039aa:	4618      	mov	r0, r3
 80039ac:	4621      	mov	r1, r4
 80039ae:	f7fd f843 	bl	8000a38 <__aeabi_d2iz>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fbf1 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 1);
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <Car_BamLine_Process+0x340>)
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fbb4 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(19); //-24
 80039c4:	4830      	ldr	r0, [pc, #192]	; (8003a88 <Car_BamLine_Process+0x360>)
 80039c6:	f7fd fc21 	bl	800120c <Servo_SetAngle>
			break;
 80039ca:	e07e      	b.n	8003aca <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.80);
 80039cc:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <Car_BamLine_Process+0x340>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fd17 	bl	8000404 <__aeabi_i2d>
 80039d6:	a320      	add	r3, pc, #128	; (adr r3, 8003a58 <Car_BamLine_Process+0x330>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f7fc fd7c 	bl	80004d8 <__aeabi_dmul>
 80039e0:	4603      	mov	r3, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4618      	mov	r0, r3
 80039e6:	4621      	mov	r1, r4
 80039e8:	f7fd f826 	bl	8000a38 <__aeabi_d2iz>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd fbd4 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 80039f4:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <Car_BamLine_Process+0x340>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fc fd03 	bl	8000404 <__aeabi_i2d>
 80039fe:	a314      	add	r3, pc, #80	; (adr r3, 8003a50 <Car_BamLine_Process+0x328>)
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	f7fc fd68 	bl	80004d8 <__aeabi_dmul>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	4621      	mov	r1, r4
 8003a10:	f7fd f812 	bl	8000a38 <__aeabi_d2iz>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fb88 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(18); //20
 8003a1c:	481b      	ldr	r0, [pc, #108]	; (8003a8c <Car_BamLine_Process+0x364>)
 8003a1e:	f7fd fbf5 	bl	800120c <Servo_SetAngle>
			break;
 8003a22:	e052      	b.n	8003aca <Car_BamLine_Process+0x3a2>
 8003a24:	f3af 8000 	nop.w
 8003a28:	33333333 	.word	0x33333333
 8003a2c:	3fe33333 	.word	0x3fe33333
 8003a30:	33333333 	.word	0x33333333
 8003a34:	3feb3333 	.word	0x3feb3333
 8003a38:	cccccccd 	.word	0xcccccccd
 8003a3c:	3fe4cccc 	.word	0x3fe4cccc
 8003a40:	cccccccd 	.word	0xcccccccd
 8003a44:	3feccccc 	.word	0x3feccccc
 8003a48:	66666666 	.word	0x66666666
 8003a4c:	3fe66666 	.word	0x3fe66666
 8003a50:	66666666 	.word	0x66666666
 8003a54:	3fee6666 	.word	0x3fee6666
 8003a58:	9999999a 	.word	0x9999999a
 8003a5c:	3fe99999 	.word	0x3fe99999
 8003a60:	20000206 	.word	0x20000206
 8003a64:	20000205 	.word	0x20000205
 8003a68:	20000010 	.word	0x20000010
 8003a6c:	426c0000 	.word	0x426c0000
 8003a70:	42520000 	.word	0x42520000
 8003a74:	423c0000 	.word	0x423c0000
 8003a78:	41f80000 	.word	0x41f80000
 8003a7c:	41e80000 	.word	0x41e80000
 8003a80:	3fe80000 	.word	0x3fe80000
 8003a84:	41a00000 	.word	0x41a00000
 8003a88:	41980000 	.word	0x41980000
 8003a8c:	41900000 	.word	0x41900000
			MotorR_SetPWM(MaxSpeed * 0.90);
 8003a90:	4bcd      	ldr	r3, [pc, #820]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fc fcb5 	bl	8000404 <__aeabi_i2d>
 8003a9a:	a3bb      	add	r3, pc, #748	; (adr r3, 8003d88 <Car_BamLine_Process+0x660>)
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f7fc fd1a 	bl	80004d8 <__aeabi_dmul>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	4621      	mov	r1, r4
 8003aac:	f7fc ffc4 	bl	8000a38 <__aeabi_d2iz>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fb72 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 1);
 8003ab8:	4bc3      	ldr	r3, [pc, #780]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fb35 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(6); //10
 8003ac2:	48c2      	ldr	r0, [pc, #776]	; (8003dcc <Car_BamLine_Process+0x6a4>)
 8003ac4:	f7fd fba2 	bl	800120c <Servo_SetAngle>
			break;
 8003ac8:	bf00      	nop
		return;
 8003aca:	e1d0      	b.n	8003e6e <Car_BamLine_Process+0x746>
	};
	if (CarState == LechPhai) {
 8003acc:	4bc0      	ldr	r3, [pc, #768]	; (8003dd0 <Car_BamLine_Process+0x6a8>)
 8003ace:	f993 3000 	ldrsb.w	r3, [r3]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	f040 81cb 	bne.w	8003e6e <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003ad8:	4bbe      	ldr	r3, [pc, #760]	; (8003dd4 <Car_BamLine_Process+0x6ac>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b60      	cmp	r3, #96	; 0x60
 8003ade:	f000 8127 	beq.w	8003d30 <Car_BamLine_Process+0x608>
 8003ae2:	2b60      	cmp	r3, #96	; 0x60
 8003ae4:	dc0c      	bgt.n	8003b00 <Car_BamLine_Process+0x3d8>
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d046      	beq.n	8003b78 <Car_BamLine_Process+0x450>
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	dc02      	bgt.n	8003af4 <Car_BamLine_Process+0x3cc>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d06e      	beq.n	8003bd0 <Car_BamLine_Process+0x4a8>
			//			  case 0b00111000:
			//				  MotorL_SetPWM(MaxSpeed * 0.95);
			//				  MotorR_SetPWM(MaxSpeed * 1);
			//				  Servo_SetAngle(-0);
		}
		return;
 8003af2:	e1bc      	b.n	8003e6e <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d013      	beq.n	8003b20 <Car_BamLine_Process+0x3f8>
 8003af8:	2b30      	cmp	r3, #48	; 0x30
 8003afa:	f000 819a 	beq.w	8003e32 <Car_BamLine_Process+0x70a>
		return;
 8003afe:	e1b6      	b.n	8003e6e <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	f000 8091 	beq.w	8003c28 <Car_BamLine_Process+0x500>
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	dc03      	bgt.n	8003b12 <Car_BamLine_Process+0x3ea>
 8003b0a:	2b70      	cmp	r3, #112	; 0x70
 8003b0c:	f000 8174 	beq.w	8003df8 <Car_BamLine_Process+0x6d0>
		return;
 8003b10:	e1ad      	b.n	8003e6e <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003b12:	2bc0      	cmp	r3, #192	; 0xc0
 8003b14:	f000 80b4 	beq.w	8003c80 <Car_BamLine_Process+0x558>
 8003b18:	2be0      	cmp	r3, #224	; 0xe0
 8003b1a:	f000 80dd 	beq.w	8003cd8 <Car_BamLine_Process+0x5b0>
		return;
 8003b1e:	e1a6      	b.n	8003e6e <Car_BamLine_Process+0x746>
			MotorR_SetPWM(MaxSpeed * 0.55);
 8003b20:	4ba9      	ldr	r3, [pc, #676]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fc6d 	bl	8000404 <__aeabi_i2d>
 8003b2a:	a399      	add	r3, pc, #612	; (adr r3, 8003d90 <Car_BamLine_Process+0x668>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f7fc fcd2 	bl	80004d8 <__aeabi_dmul>
 8003b34:	4603      	mov	r3, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	f7fc ff7c 	bl	8000a38 <__aeabi_d2iz>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fb2a 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.70);
 8003b48:	4b9f      	ldr	r3, [pc, #636]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fc fc59 	bl	8000404 <__aeabi_i2d>
 8003b52:	a391      	add	r3, pc, #580	; (adr r3, 8003d98 <Car_BamLine_Process+0x670>)
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f7fc fcbe 	bl	80004d8 <__aeabi_dmul>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	4618      	mov	r0, r3
 8003b62:	4621      	mov	r1, r4
 8003b64:	f7fc ff68 	bl	8000a38 <__aeabi_d2iz>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fade 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(-445); // -67
 8003b70:	4899      	ldr	r0, [pc, #612]	; (8003dd8 <Car_BamLine_Process+0x6b0>)
 8003b72:	f7fd fb4b 	bl	800120c <Servo_SetAngle>
			break;
 8003b76:	e179      	b.n	8003e6c <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.60);
 8003b78:	4b93      	ldr	r3, [pc, #588]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fc41 	bl	8000404 <__aeabi_i2d>
 8003b82:	a387      	add	r3, pc, #540	; (adr r3, 8003da0 <Car_BamLine_Process+0x678>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f7fc fca6 	bl	80004d8 <__aeabi_dmul>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	460c      	mov	r4, r1
 8003b90:	4618      	mov	r0, r3
 8003b92:	4621      	mov	r1, r4
 8003b94:	f7fc ff50 	bl	8000a38 <__aeabi_d2iz>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd fac6 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.85);
 8003ba0:	4b89      	ldr	r3, [pc, #548]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fc fc2d 	bl	8000404 <__aeabi_i2d>
 8003baa:	a37f      	add	r3, pc, #508	; (adr r3, 8003da8 <Car_BamLine_Process+0x680>)
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f7fc fc92 	bl	80004d8 <__aeabi_dmul>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	4621      	mov	r1, r4
 8003bbc:	f7fc ff3c 	bl	8000a38 <__aeabi_d2iz>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd faea 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-40); // -62
 8003bc8:	4884      	ldr	r0, [pc, #528]	; (8003ddc <Car_BamLine_Process+0x6b4>)
 8003bca:	f7fd fb1f 	bl	800120c <Servo_SetAngle>
			break;
 8003bce:	e14d      	b.n	8003e6c <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.65);
 8003bd0:	4b7d      	ldr	r3, [pc, #500]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fc15 	bl	8000404 <__aeabi_i2d>
 8003bda:	a375      	add	r3, pc, #468	; (adr r3, 8003db0 <Car_BamLine_Process+0x688>)
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f7fc fc7a 	bl	80004d8 <__aeabi_dmul>
 8003be4:	4603      	mov	r3, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	4618      	mov	r0, r3
 8003bea:	4621      	mov	r1, r4
 8003bec:	f7fc ff24 	bl	8000a38 <__aeabi_d2iz>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd fa9a 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.85);
 8003bf8:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fc01 	bl	8000404 <__aeabi_i2d>
 8003c02:	a369      	add	r3, pc, #420	; (adr r3, 8003da8 <Car_BamLine_Process+0x680>)
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f7fc fc66 	bl	80004d8 <__aeabi_dmul>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	4618      	mov	r0, r3
 8003c12:	4621      	mov	r1, r4
 8003c14:	f7fc ff10 	bl	8000a38 <__aeabi_d2iz>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd fabe 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-36); //-52
 8003c20:	486f      	ldr	r0, [pc, #444]	; (8003de0 <Car_BamLine_Process+0x6b8>)
 8003c22:	f7fd faf3 	bl	800120c <Servo_SetAngle>
			break;
 8003c26:	e121      	b.n	8003e6c <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.70);
 8003c28:	4b67      	ldr	r3, [pc, #412]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fc fbe9 	bl	8000404 <__aeabi_i2d>
 8003c32:	a359      	add	r3, pc, #356	; (adr r3, 8003d98 <Car_BamLine_Process+0x670>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fc4e 	bl	80004d8 <__aeabi_dmul>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	4618      	mov	r0, r3
 8003c42:	4621      	mov	r1, r4
 8003c44:	f7fc fef8 	bl	8000a38 <__aeabi_d2iz>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd fa6e 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.90);
 8003c50:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fbd5 	bl	8000404 <__aeabi_i2d>
 8003c5a:	a34b      	add	r3, pc, #300	; (adr r3, 8003d88 <Car_BamLine_Process+0x660>)
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f7fc fc3a 	bl	80004d8 <__aeabi_dmul>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	f7fc fee4 	bl	8000a38 <__aeabi_d2iz>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd fa92 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-31); //-43
 8003c78:	485a      	ldr	r0, [pc, #360]	; (8003de4 <Car_BamLine_Process+0x6bc>)
 8003c7a:	f7fd fac7 	bl	800120c <Servo_SetAngle>
			break;
 8003c7e:	e0f5      	b.n	8003e6c <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.87);
 8003c80:	4b51      	ldr	r3, [pc, #324]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc fbbd 	bl	8000404 <__aeabi_i2d>
 8003c8a:	a34b      	add	r3, pc, #300	; (adr r3, 8003db8 <Car_BamLine_Process+0x690>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f7fc fc22 	bl	80004d8 <__aeabi_dmul>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	f7fc fecc 	bl	8000a38 <__aeabi_d2iz>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd fa42 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003ca8:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fc fba9 	bl	8000404 <__aeabi_i2d>
 8003cb2:	a343      	add	r3, pc, #268	; (adr r3, 8003dc0 <Car_BamLine_Process+0x698>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fc0e 	bl	80004d8 <__aeabi_dmul>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	f7fc feb8 	bl	8000a38 <__aeabi_d2iz>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fa66 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-26); //-35
 8003cd0:	4845      	ldr	r0, [pc, #276]	; (8003de8 <Car_BamLine_Process+0x6c0>)
 8003cd2:	f7fd fa9b 	bl	800120c <Servo_SetAngle>
			break;
 8003cd6:	e0c9      	b.n	8003e6c <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.70);
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fb91 	bl	8000404 <__aeabi_i2d>
 8003ce2:	a32d      	add	r3, pc, #180	; (adr r3, 8003d98 <Car_BamLine_Process+0x670>)
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f7fc fbf6 	bl	80004d8 <__aeabi_dmul>
 8003cec:	4603      	mov	r3, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	f7fc fea0 	bl	8000a38 <__aeabi_d2iz>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fa16 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003d00:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc fb7d 	bl	8000404 <__aeabi_i2d>
 8003d0a:	a32d      	add	r3, pc, #180	; (adr r3, 8003dc0 <Car_BamLine_Process+0x698>)
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f7fc fbe2 	bl	80004d8 <__aeabi_dmul>
 8003d14:	4603      	mov	r3, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	f7fc fe8c 	bl	8000a38 <__aeabi_d2iz>
 8003d20:	4603      	mov	r3, r0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fa3a 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-22); //-27
 8003d28:	4830      	ldr	r0, [pc, #192]	; (8003dec <Car_BamLine_Process+0x6c4>)
 8003d2a:	f7fd fa6f 	bl	800120c <Servo_SetAngle>
			break;
 8003d2e:	e09d      	b.n	8003e6c <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.75);
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc fb65 	bl	8000404 <__aeabi_i2d>
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <Car_BamLine_Process+0x6c8>)
 8003d40:	f7fc fbca 	bl	80004d8 <__aeabi_dmul>
 8003d44:	4603      	mov	r3, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	4618      	mov	r0, r3
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	f7fc fe74 	bl	8000a38 <__aeabi_d2iz>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd f9ea 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <Car_BamLine_Process+0x6a0>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fb51 	bl	8000404 <__aeabi_i2d>
 8003d62:	a317      	add	r3, pc, #92	; (adr r3, 8003dc0 <Car_BamLine_Process+0x698>)
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f7fc fbb6 	bl	80004d8 <__aeabi_dmul>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4618      	mov	r0, r3
 8003d72:	4621      	mov	r1, r4
 8003d74:	f7fc fe60 	bl	8000a38 <__aeabi_d2iz>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd fa0e 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-21); //-24
 8003d80:	481c      	ldr	r0, [pc, #112]	; (8003df4 <Car_BamLine_Process+0x6cc>)
 8003d82:	f7fd fa43 	bl	800120c <Servo_SetAngle>
			break;
 8003d86:	e071      	b.n	8003e6c <Car_BamLine_Process+0x744>
 8003d88:	cccccccd 	.word	0xcccccccd
 8003d8c:	3feccccc 	.word	0x3feccccc
 8003d90:	9999999a 	.word	0x9999999a
 8003d94:	3fe19999 	.word	0x3fe19999
 8003d98:	66666666 	.word	0x66666666
 8003d9c:	3fe66666 	.word	0x3fe66666
 8003da0:	33333333 	.word	0x33333333
 8003da4:	3fe33333 	.word	0x3fe33333
 8003da8:	33333333 	.word	0x33333333
 8003dac:	3feb3333 	.word	0x3feb3333
 8003db0:	cccccccd 	.word	0xcccccccd
 8003db4:	3fe4cccc 	.word	0x3fe4cccc
 8003db8:	3d70a3d7 	.word	0x3d70a3d7
 8003dbc:	3febd70a 	.word	0x3febd70a
 8003dc0:	66666666 	.word	0x66666666
 8003dc4:	3fee6666 	.word	0x3fee6666
 8003dc8:	20000010 	.word	0x20000010
 8003dcc:	40c00000 	.word	0x40c00000
 8003dd0:	20000206 	.word	0x20000206
 8003dd4:	20000205 	.word	0x20000205
 8003dd8:	c3de8000 	.word	0xc3de8000
 8003ddc:	c2200000 	.word	0xc2200000
 8003de0:	c2100000 	.word	0xc2100000
 8003de4:	c1f80000 	.word	0xc1f80000
 8003de8:	c1d00000 	.word	0xc1d00000
 8003dec:	c1b00000 	.word	0xc1b00000
 8003df0:	3fe80000 	.word	0x3fe80000
 8003df4:	c1a80000 	.word	0xc1a80000
			MotorL_SetPWM(MaxSpeed * 0.93);
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <Car_BamLine_Process+0x758>)
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fb01 	bl	8000404 <__aeabi_i2d>
 8003e02:	a31b      	add	r3, pc, #108	; (adr r3, 8003e70 <Car_BamLine_Process+0x748>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	f7fc fb66 	bl	80004d8 <__aeabi_dmul>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	4618      	mov	r0, r3
 8003e12:	4621      	mov	r1, r4
 8003e14:	f7fc fe10 	bl	8000a38 <__aeabi_d2iz>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fd f986 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 1);
 8003e20:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <Car_BamLine_Process+0x758>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd f9b9 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-16); //-22
 8003e2a:	4816      	ldr	r0, [pc, #88]	; (8003e84 <Car_BamLine_Process+0x75c>)
 8003e2c:	f7fd f9ee 	bl	800120c <Servo_SetAngle>
			break;
 8003e30:	e01c      	b.n	8003e6c <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.95);
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <Car_BamLine_Process+0x758>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc fae4 	bl	8000404 <__aeabi_i2d>
 8003e3c:	a30e      	add	r3, pc, #56	; (adr r3, 8003e78 <Car_BamLine_Process+0x750>)
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f7fc fb49 	bl	80004d8 <__aeabi_dmul>
 8003e46:	4603      	mov	r3, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	f7fc fdf3 	bl	8000a38 <__aeabi_d2iz>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fd f969 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 1);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <Car_BamLine_Process+0x758>)
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd f99c 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-13); //-13
 8003e64:	4808      	ldr	r0, [pc, #32]	; (8003e88 <Car_BamLine_Process+0x760>)
 8003e66:	f7fd f9d1 	bl	800120c <Servo_SetAngle>
			break;
 8003e6a:	bf00      	nop
		return;
 8003e6c:	bf00      	nop
	}
}
 8003e6e:	bd98      	pop	{r3, r4, r7, pc}
 8003e70:	5c28f5c3 	.word	0x5c28f5c3
 8003e74:	3fedc28f 	.word	0x3fedc28f
 8003e78:	66666666 	.word	0x66666666
 8003e7c:	3fee6666 	.word	0x3fee6666
 8003e80:	20000010 	.word	0x20000010
 8003e84:	c1800000 	.word	0xc1800000
 8003e88:	c1500000 	.word	0xc1500000
 8003e8c:	00000000 	.word	0x00000000

08003e90 <Car_MatLine_Process>:

void Car_MatLine_Process() {
 8003e90:	b598      	push	{r3, r4, r7, lr}
 8003e92:	af00      	add	r7, sp, #0
//	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);

	switch (LineDetect) {
 8003e94:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <Car_MatLine_Process+0xb0>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d002      	beq.n	8003ea2 <Car_MatLine_Process+0x12>
 8003e9c:	2bc0      	cmp	r3, #192	; 0xc0
 8003e9e:	d01d      	beq.n	8003edc <Car_MatLine_Process+0x4c>
		MotorR_SetPWM(MaxSpeed * 0.9);
		MotorL_SetPWM(MaxSpeed * 1.5);
		Servo_SetAngle(25);
		break;
	}
}
 8003ea0:	e048      	b.n	8003f34 <Car_MatLine_Process+0xa4>
		MotorR_SetPWM(MaxSpeed * 1);
 8003ea2:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <Car_MatLine_Process+0xb4>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd f978 	bl	800119c <MotorR_SetPWM>
		MotorL_SetPWM(MaxSpeed * 1.5);
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <Car_MatLine_Process+0xb4>)
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fc faa7 	bl	8000404 <__aeabi_i2d>
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	4b23      	ldr	r3, [pc, #140]	; (8003f48 <Car_MatLine_Process+0xb8>)
 8003ebc:	f7fc fb0c 	bl	80004d8 <__aeabi_dmul>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	f7fc fdb6 	bl	8000a38 <__aeabi_d2iz>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd f92c 	bl	800112c <MotorL_SetPWM>
		Servo_SetAngle(20);
 8003ed4:	481d      	ldr	r0, [pc, #116]	; (8003f4c <Car_MatLine_Process+0xbc>)
 8003ed6:	f7fd f999 	bl	800120c <Servo_SetAngle>
		break;
 8003eda:	e02b      	b.n	8003f34 <Car_MatLine_Process+0xa4>
		MotorR_SetPWM(MaxSpeed * 0.9);
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <Car_MatLine_Process+0xb4>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc fa8f 	bl	8000404 <__aeabi_i2d>
 8003ee6:	a314      	add	r3, pc, #80	; (adr r3, 8003f38 <Car_MatLine_Process+0xa8>)
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f7fc faf4 	bl	80004d8 <__aeabi_dmul>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	f7fc fd9e 	bl	8000a38 <__aeabi_d2iz>
 8003efc:	4603      	mov	r3, r0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd f94c 	bl	800119c <MotorR_SetPWM>
		MotorL_SetPWM(MaxSpeed * 1.5);
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <Car_MatLine_Process+0xb4>)
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fc fa7b 	bl	8000404 <__aeabi_i2d>
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <Car_MatLine_Process+0xb8>)
 8003f14:	f7fc fae0 	bl	80004d8 <__aeabi_dmul>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4621      	mov	r1, r4
 8003f20:	f7fc fd8a 	bl	8000a38 <__aeabi_d2iz>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd f900 	bl	800112c <MotorL_SetPWM>
		Servo_SetAngle(25);
 8003f2c:	4808      	ldr	r0, [pc, #32]	; (8003f50 <Car_MatLine_Process+0xc0>)
 8003f2e:	f7fd f96d 	bl	800120c <Servo_SetAngle>
		break;
 8003f32:	bf00      	nop
}
 8003f34:	bf00      	nop
 8003f36:	bd98      	pop	{r3, r4, r7, pc}
 8003f38:	cccccccd 	.word	0xcccccccd
 8003f3c:	3feccccc 	.word	0x3feccccc
 8003f40:	20000205 	.word	0x20000205
 8003f44:	20000010 	.word	0x20000010
 8003f48:	3ff80000 	.word	0x3ff80000
 8003f4c:	41a00000 	.word	0x41a00000
 8003f50:	41c80000 	.word	0x41c80000
 8003f54:	00000000 	.word	0x00000000

08003f58 <Car_ChuyenLanePhai_Process>:
void Car_ChuyenLanePhai_Process() {
 8003f58:	b598      	push	{r3, r4, r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 8003f5c:	491c      	ldr	r1, [pc, #112]	; (8003fd0 <Car_ChuyenLanePhai_Process+0x78>)
 8003f5e:	481d      	ldr	r0, [pc, #116]	; (8003fd4 <Car_ChuyenLanePhai_Process+0x7c>)
 8003f60:	f7fe f914 	bl	800218c <LL_GPIO_SetOutputPin>
	MotorL_SetPWM(MaxSpeed * 2);      //0.7
 8003f64:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <Car_ChuyenLanePhai_Process+0x80>)
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd f8de 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.7);      //0.5
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <Car_ChuyenLanePhai_Process+0x80>)
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fa45 	bl	8000404 <__aeabi_i2d>
 8003f7a:	a313      	add	r3, pc, #76	; (adr r3, 8003fc8 <Car_ChuyenLanePhai_Process+0x70>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f7fc faaa 	bl	80004d8 <__aeabi_dmul>
 8003f84:	4603      	mov	r3, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	f7fc fd54 	bl	8000a38 <__aeabi_d2iz>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd f902 	bl	800119c <MotorR_SetPWM>
	Servo_SetAngle(54);
 8003f98:	4810      	ldr	r0, [pc, #64]	; (8003fdc <Car_ChuyenLanePhai_Process+0x84>)
 8003f9a:	f7fd f937 	bl	800120c <Servo_SetAngle>
	CarState = LechTrai;
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <Car_ChuyenLanePhai_Process+0x88>)
 8003fa0:	22ff      	movs	r2, #255	; 0xff
 8003fa2:	701a      	strb	r2, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003fa4:	e001      	b.n	8003faa <Car_ChuyenLanePhai_Process+0x52>
			|| LineDetect == 0b00111000))
		Sensor_Convert_A2D();
 8003fa6:	f7ff fb0f 	bl	80035c8 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <Car_ChuyenLanePhai_Process+0x8c>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b18      	cmp	r3, #24
 8003fb0:	d007      	beq.n	8003fc2 <Car_ChuyenLanePhai_Process+0x6a>
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <Car_ChuyenLanePhai_Process+0x8c>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b1c      	cmp	r3, #28
 8003fb8:	d003      	beq.n	8003fc2 <Car_ChuyenLanePhai_Process+0x6a>
			|| LineDetect == 0b00111000))
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <Car_ChuyenLanePhai_Process+0x8c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003fbe:	2b38      	cmp	r3, #56	; 0x38
 8003fc0:	d1f1      	bne.n	8003fa6 <Car_ChuyenLanePhai_Process+0x4e>
}
 8003fc2:	bf00      	nop
 8003fc4:	bd98      	pop	{r3, r4, r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	33333333 	.word	0x33333333
 8003fcc:	3ffb3333 	.word	0x3ffb3333
 8003fd0:	04200020 	.word	0x04200020
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	20000010 	.word	0x20000010
 8003fdc:	42580000 	.word	0x42580000
 8003fe0:	20000206 	.word	0x20000206
 8003fe4:	20000205 	.word	0x20000205

08003fe8 <Car_ChuyenLaneTrai_Process>:
void Car_ChuyenLaneTrai_Process() {
 8003fe8:	b598      	push	{r3, r4, r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	MotorR_SetPWM(MaxSpeed * 2);      //0.7
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <Car_ChuyenLaneTrai_Process+0x70>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd f8d2 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.7);      //0.5
 8003ff8:	4b17      	ldr	r3, [pc, #92]	; (8004058 <Car_ChuyenLaneTrai_Process+0x70>)
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc fa01 	bl	8000404 <__aeabi_i2d>
 8004002:	a313      	add	r3, pc, #76	; (adr r3, 8004050 <Car_ChuyenLaneTrai_Process+0x68>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc fa66 	bl	80004d8 <__aeabi_dmul>
 800400c:	4603      	mov	r3, r0
 800400e:	460c      	mov	r4, r1
 8004010:	4618      	mov	r0, r3
 8004012:	4621      	mov	r1, r4
 8004014:	f7fc fd10 	bl	8000a38 <__aeabi_d2iz>
 8004018:	4603      	mov	r3, r0
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd f886 	bl	800112c <MotorL_SetPWM>
	Servo_SetAngle(-30);
 8004020:	480e      	ldr	r0, [pc, #56]	; (800405c <Car_ChuyenLaneTrai_Process+0x74>)
 8004022:	f7fd f8f3 	bl	800120c <Servo_SetAngle>
	CarState = LechPhai;
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <Car_ChuyenLaneTrai_Process+0x78>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 800402c:	e001      	b.n	8004032 <Car_ChuyenLaneTrai_Process+0x4a>
			|| LineDetect == 0b00111000))
		Sensor_Convert_A2D();
 800402e:	f7ff facb 	bl	80035c8 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <Car_ChuyenLaneTrai_Process+0x7c>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b18      	cmp	r3, #24
 8004038:	d007      	beq.n	800404a <Car_ChuyenLaneTrai_Process+0x62>
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <Car_ChuyenLaneTrai_Process+0x7c>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b1c      	cmp	r3, #28
 8004040:	d003      	beq.n	800404a <Car_ChuyenLaneTrai_Process+0x62>
			|| LineDetect == 0b00111000))
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <Car_ChuyenLaneTrai_Process+0x7c>)
 8004044:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004046:	2b38      	cmp	r3, #56	; 0x38
 8004048:	d1f1      	bne.n	800402e <Car_ChuyenLaneTrai_Process+0x46>
}
 800404a:	bf00      	nop
 800404c:	bd98      	pop	{r3, r4, r7, pc}
 800404e:	bf00      	nop
 8004050:	33333333 	.word	0x33333333
 8004054:	3ffb3333 	.word	0x3ffb3333
 8004058:	20000010 	.word	0x20000010
 800405c:	c1f00000 	.word	0xc1f00000
 8004060:	20000206 	.word	0x20000206
 8004064:	20000205 	.word	0x20000205

08004068 <Car_CuaPhai_Process>:
void Car_CuaPhai_Process() {
 8004068:	b598      	push	{r3, r4, r7, lr}
 800406a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 800406c:	491a      	ldr	r1, [pc, #104]	; (80040d8 <Car_CuaPhai_Process+0x70>)
 800406e:	481b      	ldr	r0, [pc, #108]	; (80040dc <Car_CuaPhai_Process+0x74>)
 8004070:	f7fe f88c 	bl	800218c <LL_GPIO_SetOutputPin>
	Servo_SetAngle(80);
 8004074:	481a      	ldr	r0, [pc, #104]	; (80040e0 <Car_CuaPhai_Process+0x78>)
 8004076:	f7fd f8c9 	bl	800120c <Servo_SetAngle>
	MotorR_SetPWM(MaxSpeed * 1);
 800407a:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <Car_CuaPhai_Process+0x7c>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd f88c 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.5);
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <Car_CuaPhai_Process+0x7c>)
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc f9bb 	bl	8000404 <__aeabi_i2d>
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <Car_CuaPhai_Process+0x80>)
 8004094:	f7fc fa20 	bl	80004d8 <__aeabi_dmul>
 8004098:	4603      	mov	r3, r0
 800409a:	460c      	mov	r4, r1
 800409c:	4618      	mov	r0, r3
 800409e:	4621      	mov	r1, r4
 80040a0:	f7fc fcca 	bl	8000a38 <__aeabi_d2iz>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd f840 	bl	800112c <MotorL_SetPWM>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 80040ac:	e001      	b.n	80040b2 <Car_CuaPhai_Process+0x4a>
			|| LineDetect == 0b00111000)) {
		Sensor_Convert_A2D();
 80040ae:	f7ff fa8b 	bl	80035c8 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 80040b2:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <Car_CuaPhai_Process+0x84>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b18      	cmp	r3, #24
 80040b8:	d007      	beq.n	80040ca <Car_CuaPhai_Process+0x62>
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <Car_CuaPhai_Process+0x84>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b1c      	cmp	r3, #28
 80040c0:	d003      	beq.n	80040ca <Car_CuaPhai_Process+0x62>
			|| LineDetect == 0b00111000)) {
 80040c2:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <Car_CuaPhai_Process+0x84>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 80040c6:	2b38      	cmp	r3, #56	; 0x38
 80040c8:	d1f1      	bne.n	80040ae <Car_CuaPhai_Process+0x46>
	}
	LL_GPIO_ResetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 80040ca:	4903      	ldr	r1, [pc, #12]	; (80040d8 <Car_CuaPhai_Process+0x70>)
 80040cc:	4803      	ldr	r0, [pc, #12]	; (80040dc <Car_CuaPhai_Process+0x74>)
 80040ce:	f7fe f86c 	bl	80021aa <LL_GPIO_ResetOutputPin>

}
 80040d2:	bf00      	nop
 80040d4:	bd98      	pop	{r3, r4, r7, pc}
 80040d6:	bf00      	nop
 80040d8:	04200020 	.word	0x04200020
 80040dc:	40011000 	.word	0x40011000
 80040e0:	42a00000 	.word	0x42a00000
 80040e4:	20000010 	.word	0x20000010
 80040e8:	3ff80000 	.word	0x3ff80000
 80040ec:	20000205 	.word	0x20000205

080040f0 <Car_CuaTrai_Process>:
void Car_CuaTrai_Process() {
 80040f0:	b598      	push	{r3, r4, r7, lr}
 80040f2:	af00      	add	r7, sp, #0
	Servo_SetAngle(-75);
 80040f4:	481d      	ldr	r0, [pc, #116]	; (800416c <Car_CuaTrai_Process+0x7c>)
 80040f6:	f7fd f889 	bl	800120c <Servo_SetAngle>
	MotorL_SetPWM(MaxSpeed * 1.2);
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <Car_CuaTrai_Process+0x80>)
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fc f980 	bl	8000404 <__aeabi_i2d>
 8004104:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004108:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <Car_CuaTrai_Process+0x84>)
 800410a:	f7fc f9e5 	bl	80004d8 <__aeabi_dmul>
 800410e:	4603      	mov	r3, r0
 8004110:	460c      	mov	r4, r1
 8004112:	4618      	mov	r0, r3
 8004114:	4621      	mov	r1, r4
 8004116:	f7fc fc8f 	bl	8000a38 <__aeabi_d2iz>
 800411a:	4603      	mov	r3, r0
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd f805 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.5);
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <Car_CuaTrai_Process+0x80>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fc f96c 	bl	8000404 <__aeabi_i2d>
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <Car_CuaTrai_Process+0x88>)
 8004132:	f7fc f9d1 	bl	80004d8 <__aeabi_dmul>
 8004136:	4603      	mov	r3, r0
 8004138:	460c      	mov	r4, r1
 800413a:	4618      	mov	r0, r3
 800413c:	4621      	mov	r1, r4
 800413e:	f7fc fc7b 	bl	8000a38 <__aeabi_d2iz>
 8004142:	4603      	mov	r3, r0
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd f829 	bl	800119c <MotorR_SetPWM>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 800414a:	e001      	b.n	8004150 <Car_CuaTrai_Process+0x60>
			|| LineDetect == 0b00111000)) {
		Sensor_Convert_A2D();
 800414c:	f7ff fa3c 	bl	80035c8 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <Car_CuaTrai_Process+0x8c>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b18      	cmp	r3, #24
 8004156:	d007      	beq.n	8004168 <Car_CuaTrai_Process+0x78>
 8004158:	4b08      	ldr	r3, [pc, #32]	; (800417c <Car_CuaTrai_Process+0x8c>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b1c      	cmp	r3, #28
 800415e:	d003      	beq.n	8004168 <Car_CuaTrai_Process+0x78>
			|| LineDetect == 0b00111000)) {
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <Car_CuaTrai_Process+0x8c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8004164:	2b38      	cmp	r3, #56	; 0x38
 8004166:	d1f1      	bne.n	800414c <Car_CuaTrai_Process+0x5c>
	}
}
 8004168:	bf00      	nop
 800416a:	bd98      	pop	{r3, r4, r7, pc}
 800416c:	c2960000 	.word	0xc2960000
 8004170:	20000010 	.word	0x20000010
 8004174:	3ff33333 	.word	0x3ff33333
 8004178:	3ff80000 	.word	0x3ff80000
 800417c:	20000205 	.word	0x20000205

08004180 <Car_Avoid_Process>:
void Car_Avoid_Process()
{
 8004180:	b598      	push	{r3, r4, r7, lr}
 8004182:	af00      	add	r7, sp, #0
	Servo_SetAngle(65);
 8004184:	4856      	ldr	r0, [pc, #344]	; (80042e0 <Car_Avoid_Process+0x160>)
 8004186:	f7fd f841 	bl	800120c <Servo_SetAngle>
	MotorL_SetPWM(MaxSpeed * 1.2);
 800418a:	4b56      	ldr	r3, [pc, #344]	; (80042e4 <Car_Avoid_Process+0x164>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc f938 	bl	8000404 <__aeabi_i2d>
 8004194:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <Car_Avoid_Process+0x168>)
 800419a:	f7fc f99d 	bl	80004d8 <__aeabi_dmul>
 800419e:	4603      	mov	r3, r0
 80041a0:	460c      	mov	r4, r1
 80041a2:	4618      	mov	r0, r3
 80041a4:	4621      	mov	r1, r4
 80041a6:	f7fc fc47 	bl	8000a38 <__aeabi_d2iz>
 80041aa:	4603      	mov	r3, r0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fc ffbd 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.5);
 80041b2:	4b4c      	ldr	r3, [pc, #304]	; (80042e4 <Car_Avoid_Process+0x164>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fc f924 	bl	8000404 <__aeabi_i2d>
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	4b4a      	ldr	r3, [pc, #296]	; (80042ec <Car_Avoid_Process+0x16c>)
 80041c2:	f7fc f989 	bl	80004d8 <__aeabi_dmul>
 80041c6:	4603      	mov	r3, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	4618      	mov	r0, r3
 80041cc:	4621      	mov	r1, r4
 80041ce:	f7fc fc33 	bl	8000a38 <__aeabi_d2iz>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc ffe1 	bl	800119c <MotorR_SetPWM>
	while(LineDetect != 0b00000001)
 80041da:	e001      	b.n	80041e0 <Car_Avoid_Process+0x60>
		Sensor_Convert_A2D();
 80041dc:	f7ff f9f4 	bl	80035c8 <Sensor_Convert_A2D>
	while(LineDetect != 0b00000001)
 80041e0:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <Car_Avoid_Process+0x170>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d1f9      	bne.n	80041dc <Car_Avoid_Process+0x5c>
	Servo_SetAngle(-45);
 80041e8:	4842      	ldr	r0, [pc, #264]	; (80042f4 <Car_Avoid_Process+0x174>)
 80041ea:	f7fd f80f 	bl	800120c <Servo_SetAngle>
	MotorR_SetPWM(MaxSpeed * 1.2);
 80041ee:	4b3d      	ldr	r3, [pc, #244]	; (80042e4 <Car_Avoid_Process+0x164>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc f906 	bl	8000404 <__aeabi_i2d>
 80041f8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80041fc:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <Car_Avoid_Process+0x168>)
 80041fe:	f7fc f96b 	bl	80004d8 <__aeabi_dmul>
 8004202:	4603      	mov	r3, r0
 8004204:	460c      	mov	r4, r1
 8004206:	4618      	mov	r0, r3
 8004208:	4621      	mov	r1, r4
 800420a:	f7fc fc15 	bl	8000a38 <__aeabi_d2iz>
 800420e:	4603      	mov	r3, r0
 8004210:	4618      	mov	r0, r3
 8004212:	f7fc ffc3 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.5);
 8004216:	4b33      	ldr	r3, [pc, #204]	; (80042e4 <Car_Avoid_Process+0x164>)
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc f8f2 	bl	8000404 <__aeabi_i2d>
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	4b31      	ldr	r3, [pc, #196]	; (80042ec <Car_Avoid_Process+0x16c>)
 8004226:	f7fc f957 	bl	80004d8 <__aeabi_dmul>
 800422a:	4603      	mov	r3, r0
 800422c:	460c      	mov	r4, r1
 800422e:	4618      	mov	r0, r3
 8004230:	4621      	mov	r1, r4
 8004232:	f7fc fc01 	bl	8000a38 <__aeabi_d2iz>
 8004236:	4603      	mov	r3, r0
 8004238:	4618      	mov	r0, r3
 800423a:	f7fc ff77 	bl	800112c <MotorL_SetPWM>
	while(!(LineDetect == 0b10000000 || LineDetect == 0b11000000))
 800423e:	e001      	b.n	8004244 <Car_Avoid_Process+0xc4>
		Sensor_Convert_A2D();
 8004240:	f7ff f9c2 	bl	80035c8 <Sensor_Convert_A2D>
	while(!(LineDetect == 0b10000000 || LineDetect == 0b11000000))
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <Car_Avoid_Process+0x170>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d003      	beq.n	8004254 <Car_Avoid_Process+0xd4>
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <Car_Avoid_Process+0x170>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2bc0      	cmp	r3, #192	; 0xc0
 8004252:	d1f5      	bne.n	8004240 <Car_Avoid_Process+0xc0>
	Servo_SetAngle(15);
 8004254:	4828      	ldr	r0, [pc, #160]	; (80042f8 <Car_Avoid_Process+0x178>)
 8004256:	f7fc ffd9 	bl	800120c <Servo_SetAngle>
	MotorR_SetPWM(MaxSpeed * 1.4);
 800425a:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <Car_Avoid_Process+0x164>)
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fc f8d0 	bl	8000404 <__aeabi_i2d>
 8004264:	a31a      	add	r3, pc, #104	; (adr r3, 80042d0 <Car_Avoid_Process+0x150>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f7fc f935 	bl	80004d8 <__aeabi_dmul>
 800426e:	4603      	mov	r3, r0
 8004270:	460c      	mov	r4, r1
 8004272:	4618      	mov	r0, r3
 8004274:	4621      	mov	r1, r4
 8004276:	f7fc fbdf 	bl	8000a38 <__aeabi_d2iz>
 800427a:	4603      	mov	r3, r0
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc ff8d 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.7);
 8004282:	4b18      	ldr	r3, [pc, #96]	; (80042e4 <Car_Avoid_Process+0x164>)
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc f8bc 	bl	8000404 <__aeabi_i2d>
 800428c:	a312      	add	r3, pc, #72	; (adr r3, 80042d8 <Car_Avoid_Process+0x158>)
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f7fc f921 	bl	80004d8 <__aeabi_dmul>
 8004296:	4603      	mov	r3, r0
 8004298:	460c      	mov	r4, r1
 800429a:	4618      	mov	r0, r3
 800429c:	4621      	mov	r1, r4
 800429e:	f7fc fbcb 	bl	8000a38 <__aeabi_d2iz>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fc ff41 	bl	800112c <MotorL_SetPWM>
	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 80042aa:	e001      	b.n	80042b0 <Car_Avoid_Process+0x130>
		Sensor_Convert_A2D();
 80042ac:	f7ff f98c 	bl	80035c8 <Sensor_Convert_A2D>
	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <Car_Avoid_Process+0x170>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b18      	cmp	r3, #24
 80042b6:	d007      	beq.n	80042c8 <Car_Avoid_Process+0x148>
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <Car_Avoid_Process+0x170>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b1c      	cmp	r3, #28
 80042be:	d003      	beq.n	80042c8 <Car_Avoid_Process+0x148>
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <Car_Avoid_Process+0x170>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b38      	cmp	r3, #56	; 0x38
 80042c6:	d1f1      	bne.n	80042ac <Car_Avoid_Process+0x12c>
}
 80042c8:	bf00      	nop
 80042ca:	bd98      	pop	{r3, r4, r7, pc}
 80042cc:	f3af 8000 	nop.w
 80042d0:	66666666 	.word	0x66666666
 80042d4:	3ff66666 	.word	0x3ff66666
 80042d8:	33333333 	.word	0x33333333
 80042dc:	3ffb3333 	.word	0x3ffb3333
 80042e0:	42820000 	.word	0x42820000
 80042e4:	20000010 	.word	0x20000010
 80042e8:	3ff33333 	.word	0x3ff33333
 80042ec:	3ff80000 	.word	0x3ff80000
 80042f0:	20000205 	.word	0x20000205
 80042f4:	c2340000 	.word	0xc2340000
 80042f8:	41700000 	.word	0x41700000

080042fc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010400 	.word	0x40010400

08004328 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8004330:	4a03      	ldr	r2, [pc, #12]	; (8004340 <LL_EXTI_ClearFlag_0_31+0x18>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6153      	str	r3, [r2, #20]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40010400 	.word	0x40010400

08004344 <LL_TIM_ClearFlag_UPDATE>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f06f 0201 	mvn.w	r2, #1
 8004352:	611a      	str	r2, [r3, #16]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <LL_TIM_IsActiveFlag_UPDATE>:
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr

08004382 <LL_TIM_ClearFlag_CC1>:
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f06f 0202 	mvn.w	r2, #2
 8004390:	611a      	str	r2, [r3, #16]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <LL_TIM_IsActiveFlag_CC1>:
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d101      	bne.n	80043b4 <LL_TIM_IsActiveFlag_CC1+0x18>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <LL_TIM_IsActiveFlag_CC1+0x1a>
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <LL_GPIO_SetOutputPin>:
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	0a1b      	lsrs	r3, r3, #8
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	611a      	str	r2, [r3, #16]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <LL_GPIO_ResetOutputPin>:
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	615a      	str	r2, [r3, #20]
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800440c:	e7fe      	b.n	800440c <HardFault_Handler+0x4>

0800440e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004412:	e7fe      	b.n	8004412 <MemManage_Handler+0x4>

08004414 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004418:	e7fe      	b.n	8004418 <BusFault_Handler+0x4>

0800441a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800441e:	e7fe      	b.n	800441e <UsageFault_Handler+0x4>

08004420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <SysTick_Handler+0x18>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3301      	adds	r3, #1
 800444e:	4a03      	ldr	r2, [pc, #12]	; (800445c <SysTick_Handler+0x18>)
 8004450:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	2000020c 	.word	0x2000020c

08004460 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8004470:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004474:	f7ff ff66 	bl	8004344 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004478:	bf00      	nop
 800447a:	bd80      	pop	{r7, pc}

0800447c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8004480:	4802      	ldr	r0, [pc, #8]	; (800448c <TIM3_IRQHandler+0x10>)
 8004482:	f7ff ff5f 	bl	8004344 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40000400 	.word	0x40000400

08004490 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 8004494:	4814      	ldr	r0, [pc, #80]	; (80044e8 <TIM4_IRQHandler+0x58>)
 8004496:	f7ff ff81 	bl	800439c <LL_TIM_IsActiveFlag_CC1>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <TIM4_IRQHandler+0x1e>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 80044a0:	4811      	ldr	r0, [pc, #68]	; (80044e8 <TIM4_IRQHandler+0x58>)
 80044a2:	f7ff ff6e 	bl	8004382 <LL_TIM_ClearFlag_CC1>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80044a6:	4911      	ldr	r1, [pc, #68]	; (80044ec <TIM4_IRQHandler+0x5c>)
 80044a8:	4811      	ldr	r0, [pc, #68]	; (80044f0 <TIM4_IRQHandler+0x60>)
 80044aa:	f7ff ff98 	bl	80043de <LL_GPIO_ResetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 80044ae:	480e      	ldr	r0, [pc, #56]	; (80044e8 <TIM4_IRQHandler+0x58>)
 80044b0:	f7ff ff55 	bl	800435e <LL_TIM_IsActiveFlag_UPDATE>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d013      	beq.n	80044e2 <TIM4_IRQHandler+0x52>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 80044ba:	480b      	ldr	r0, [pc, #44]	; (80044e8 <TIM4_IRQHandler+0x58>)
 80044bc:	f7ff ff42 	bl	8004344 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80044c0:	490a      	ldr	r1, [pc, #40]	; (80044ec <TIM4_IRQHandler+0x5c>)
 80044c2:	480b      	ldr	r0, [pc, #44]	; (80044f0 <TIM4_IRQHandler+0x60>)
 80044c4:	f7ff ff7c 	bl	80043c0 <LL_GPIO_SetOutputPin>
		CountTime++;
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <TIM4_IRQHandler+0x64>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <TIM4_IRQHandler+0x64>)
 80044d2:	701a      	strb	r2, [r3, #0]
		if(CountTime > 3) CountTime = 0;
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <TIM4_IRQHandler+0x64>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d902      	bls.n	80044e2 <TIM4_IRQHandler+0x52>
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <TIM4_IRQHandler+0x64>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
//	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40000800 	.word	0x40000800
 80044ec:	04080008 	.word	0x04080008
 80044f0:	40010800 	.word	0x40010800
 80044f4:	20000212 	.word	0x20000212

080044f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 80044fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004500:	f7ff fefc 	bl	80042fc <LL_EXTI_IsActiveFlag_0_31>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d006      	beq.n	8004518 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 800450a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800450e:	f7ff ff0b 	bl	8004328 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <EXTI15_10_IRQHandler+0x5c>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8004518:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800451c:	f7ff feee 	bl	80042fc <LL_EXTI_IsActiveFlag_0_31>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8004526:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800452a:	f7ff fefd 	bl	8004328 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BTN2_Flag = 1;
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <EXTI15_10_IRQHandler+0x60>)
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004534:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004538:	f7ff fee0 	bl	80042fc <LL_EXTI_IsActiveFlag_0_31>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d006      	beq.n	8004550 <EXTI15_10_IRQHandler+0x58>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004542:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004546:	f7ff feef 	bl	8004328 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    BTN3_Flag = 1 ;
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <EXTI15_10_IRQHandler+0x64>)
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004550:	bf00      	nop
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000204 	.word	0x20000204
 8004558:	20000210 	.word	0x20000210
 800455c:	20000211 	.word	0x20000211

08004560 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e00a      	b.n	8004588 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004572:	f3af 8000 	nop.w
 8004576:	4601      	mov	r1, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	60ba      	str	r2, [r7, #8]
 800457e:	b2ca      	uxtb	r2, r1
 8004580:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3301      	adds	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	dbf0      	blt.n	8004572 <_read+0x12>
	}

return len;
 8004590:	687b      	ldr	r3, [r7, #4]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b086      	sub	sp, #24
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e009      	b.n	80045c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	60ba      	str	r2, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd fe8d 	bl	80022d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	3301      	adds	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	dbf1      	blt.n	80045ac <_write+0x12>
	}
	return len;
 80045c8:	687b      	ldr	r3, [r7, #4]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <_close>:

int _close(int file)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
	return -1;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045f8:	605a      	str	r2, [r3, #4]
	return 0;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <_isatty>:

int _isatty(int file)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
	return 1;
 800460e:	2301      	movs	r3, #1
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
	return 0;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
	...

08004634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800463c:	4a14      	ldr	r2, [pc, #80]	; (8004690 <_sbrk+0x5c>)
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <_sbrk+0x60>)
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <_sbrk+0x64>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <_sbrk+0x64>)
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <_sbrk+0x68>)
 8004654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <_sbrk+0x64>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	429a      	cmp	r2, r3
 8004662:	d207      	bcs.n	8004674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004664:	f001 f9ac 	bl	80059c0 <__errno>
 8004668:	4602      	mov	r2, r0
 800466a:	230c      	movs	r3, #12
 800466c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	e009      	b.n	8004688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004674:	4b08      	ldr	r3, [pc, #32]	; (8004698 <_sbrk+0x64>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800467a:	4b07      	ldr	r3, [pc, #28]	; (8004698 <_sbrk+0x64>)
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	4a05      	ldr	r2, [pc, #20]	; (8004698 <_sbrk+0x64>)
 8004684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004686:	68fb      	ldr	r3, [r7, #12]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	20005000 	.word	0x20005000
 8004694:	00000400 	.word	0x00000400
 8004698:	20000214 	.word	0x20000214
 800469c:	20000238 	.word	0x20000238

080046a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <SystemInit+0x5c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <SystemInit+0x5c>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <SystemInit+0x5c>)
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	4911      	ldr	r1, [pc, #68]	; (80046fc <SystemInit+0x5c>)
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <SystemInit+0x60>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80046bc:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <SystemInit+0x5c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <SystemInit+0x5c>)
 80046c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80046c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <SystemInit+0x5c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <SystemInit+0x5c>)
 80046d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80046d8:	4b08      	ldr	r3, [pc, #32]	; (80046fc <SystemInit+0x5c>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a07      	ldr	r2, [pc, #28]	; (80046fc <SystemInit+0x5c>)
 80046de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80046e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <SystemInit+0x5c>)
 80046e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80046ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <SystemInit+0x64>)
 80046ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	40021000 	.word	0x40021000
 8004700:	f8ff0000 	.word	0xf8ff0000
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004708:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800470a:	e003      	b.n	8004714 <LoopCopyDataInit>

0800470c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800470c:	4b0b      	ldr	r3, [pc, #44]	; (800473c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800470e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004710:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004712:	3104      	adds	r1, #4

08004714 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004714:	480a      	ldr	r0, [pc, #40]	; (8004740 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004718:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800471a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800471c:	d3f6      	bcc.n	800470c <CopyDataInit>
  ldr r2, =_sbss
 800471e:	4a0a      	ldr	r2, [pc, #40]	; (8004748 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004720:	e002      	b.n	8004728 <LoopFillZerobss>

08004722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004722:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004724:	f842 3b04 	str.w	r3, [r2], #4

08004728 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800472a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800472c:	d3f9      	bcc.n	8004722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800472e:	f7ff ffb7 	bl	80046a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004732:	f001 f94b 	bl	80059cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004736:	f7fd fde5 	bl	8002304 <main>
  bx lr
 800473a:	4770      	bx	lr
  ldr r3, =_sidata
 800473c:	08008680 	.word	0x08008680
  ldr r0, =_sdata
 8004740:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004744:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8004748:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 800474c:	20000234 	.word	0x20000234

08004750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004750:	e7fe      	b.n	8004750 <ADC1_2_IRQHandler>

08004752 <LL_ADC_REG_SetSequencerLength>:
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <LL_ADC_IsEnabled>:
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
	...

0800479c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80047aa:	4813      	ldr	r0, [pc, #76]	; (80047f8 <LL_ADC_CommonInit+0x5c>)
 80047ac:	f7ff ffe3 	bl	8004776 <LL_ADC_IsEnabled>
 80047b0:	4604      	mov	r4, r0
 80047b2:	4812      	ldr	r0, [pc, #72]	; (80047fc <LL_ADC_CommonInit+0x60>)
 80047b4:	f7ff ffdf 	bl	8004776 <LL_ADC_IsEnabled>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4323      	orrs	r3, r4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d114      	bne.n	80047ea <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	e008      	b.n	80047ee <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	e001      	b.n	80047ee <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd90      	pop	{r4, r7, pc}
 80047f8:	40012400 	.word	0x40012400
 80047fc:	40012800 	.word	0x40012800

08004800 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ffb1 	bl	8004776 <LL_ADC_IsEnabled>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d112      	bne.n	8004840 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]
 800483e:	e001      	b.n	8004844 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ff8a 	bl	8004776 <LL_ADC_IsEnabled>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d131      	bne.n	80048cc <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00c      	beq.n	800488a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6859      	ldr	r1, [r3, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	430b      	orrs	r3, r1
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	e008      	b.n	800489c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80048a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	6811      	ldr	r1, [r2, #0]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	68d2      	ldr	r2, [r2, #12]
 80048b0:	4311      	orrs	r1, r2
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	6912      	ldr	r2, [r2, #16]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff44 	bl	8004752 <LL_ADC_REG_SetSequencerLength>
 80048ca:	e001      	b.n	80048d0 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <LL_EXTI_EnableIT_0_31>:
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80048e4:	4b05      	ldr	r3, [pc, #20]	; (80048fc <LL_EXTI_EnableIT_0_31+0x20>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4904      	ldr	r1, [pc, #16]	; (80048fc <LL_EXTI_EnableIT_0_31+0x20>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	600b      	str	r3, [r1, #0]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010400 	.word	0x40010400

08004900 <LL_EXTI_DisableIT_0_31>:
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <LL_EXTI_DisableIT_0_31+0x20>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	43db      	mvns	r3, r3
 8004910:	4903      	ldr	r1, [pc, #12]	; (8004920 <LL_EXTI_DisableIT_0_31+0x20>)
 8004912:	4013      	ands	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	40010400 	.word	0x40010400

08004924 <LL_EXTI_EnableEvent_0_31>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <LL_EXTI_EnableEvent_0_31+0x20>)
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4904      	ldr	r1, [pc, #16]	; (8004944 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010400 	.word	0x40010400

08004948 <LL_EXTI_DisableEvent_0_31>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <LL_EXTI_DisableEvent_0_31+0x20>)
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	43db      	mvns	r3, r3
 8004958:	4903      	ldr	r1, [pc, #12]	; (8004968 <LL_EXTI_DisableEvent_0_31+0x20>)
 800495a:	4013      	ands	r3, r2
 800495c:	604b      	str	r3, [r1, #4]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	40010400 	.word	0x40010400

0800496c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	4904      	ldr	r1, [pc, #16]	; (800498c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4313      	orrs	r3, r2
 800497e:	608b      	str	r3, [r1, #8]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40010400 	.word	0x40010400

08004990 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	43db      	mvns	r3, r3
 80049a0:	4903      	ldr	r1, [pc, #12]	; (80049b0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	40010400 	.word	0x40010400

080049b4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	4904      	ldr	r1, [pc, #16]	; (80049d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60cb      	str	r3, [r1, #12]
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010400 	.word	0x40010400

080049d8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	4903      	ldr	r1, [pc, #12]	; (80049f8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	60cb      	str	r3, [r1, #12]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	40010400 	.word	0x40010400

080049fc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004a04:	2300      	movs	r3, #0
 8004a06:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	791b      	ldrb	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d060      	beq.n	8004ad2 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d067      	beq.n	8004ae8 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	795b      	ldrb	r3, [r3, #5]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d00e      	beq.n	8004a3e <LL_EXTI_Init+0x42>
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d017      	beq.n	8004a54 <LL_EXTI_Init+0x58>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d120      	bne.n	8004a6a <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff ff8b 	bl	8004948 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff ff50 	bl	80048dc <LL_EXTI_EnableIT_0_31>
          break;
 8004a3c:	e018      	b.n	8004a70 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff ff5c 	bl	8004900 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff ff69 	bl	8004924 <LL_EXTI_EnableEvent_0_31>
          break;
 8004a52:	e00d      	b.n	8004a70 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff3f 	bl	80048dc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ff5e 	bl	8004924 <LL_EXTI_EnableEvent_0_31>
          break;
 8004a68:	e002      	b.n	8004a70 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a6e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	799b      	ldrb	r3, [r3, #6]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d037      	beq.n	8004ae8 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	799b      	ldrb	r3, [r3, #6]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d00e      	beq.n	8004a9e <LL_EXTI_Init+0xa2>
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d017      	beq.n	8004ab4 <LL_EXTI_Init+0xb8>
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d120      	bne.n	8004aca <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff ffa3 	bl	80049d8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff ff68 	bl	800496c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004a9c:	e025      	b.n	8004aea <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ff74 	bl	8004990 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff ff81 	bl	80049b4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004ab2:	e01a      	b.n	8004aea <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff57 	bl	800496c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff76 	bl	80049b4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004ac8:	e00f      	b.n	8004aea <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
            break;
 8004ace:	bf00      	nop
 8004ad0:	e00b      	b.n	8004aea <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff ff12 	bl	8004900 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff ff31 	bl	8004948 <LL_EXTI_DisableEvent_0_31>
 8004ae6:	e000      	b.n	8004aea <LL_EXTI_Init+0xee>
      }
 8004ae8:	bf00      	nop
  }
  return status;
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <LL_GPIO_SetPinMode>:
{
 8004af4:	b490      	push	{r4, r7}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	461a      	mov	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	0e1b      	lsrs	r3, r3, #24
 8004b08:	4413      	add	r3, r2
 8004b0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	fa93 f3a3 	rbit	r3, r3
 8004b18:	613b      	str	r3, [r7, #16]
  return result;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	fab3 f383 	clz	r3, r3
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	210f      	movs	r1, #15
 8004b26:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	401a      	ands	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	61bb      	str	r3, [r7, #24]
  return result;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	fab3 f383 	clz	r3, r3
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	6023      	str	r3, [r4, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc90      	pop	{r4, r7}
 8004b56:	4770      	bx	lr

08004b58 <LL_GPIO_SetPinSpeed>:
{
 8004b58:	b490      	push	{r4, r7}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	0e1b      	lsrs	r3, r3, #24
 8004b6c:	4413      	add	r3, r2
 8004b6e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	fa93 f3a3 	rbit	r3, r3
 8004b7c:	613b      	str	r3, [r7, #16]
  return result;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	fab3 f383 	clz	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	2103      	movs	r1, #3
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	401a      	ands	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	61bb      	str	r3, [r7, #24]
  return result;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	fab3 f383 	clz	r3, r3
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	6023      	str	r3, [r4, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc90      	pop	{r4, r7}
 8004bba:	4770      	bx	lr

08004bbc <LL_GPIO_SetPinOutputType>:
{
 8004bbc:	b490      	push	{r4, r7}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	0e1b      	lsrs	r3, r3, #24
 8004bd0:	4413      	add	r3, r2
 8004bd2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	613b      	str	r3, [r7, #16]
  return result;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	2104      	movs	r1, #4
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	401a      	ands	r2, r3
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	61bb      	str	r3, [r7, #24]
  return result;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	6023      	str	r3, [r4, #0]
}
 8004c16:	bf00      	nop
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc90      	pop	{r4, r7}
 8004c1e:	4770      	bx	lr

08004c20 <LL_GPIO_SetPinPull>:
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	43db      	mvns	r3, r3
 8004c36:	401a      	ands	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	fa93 f3a3 	rbit	r3, r3
 8004c44:	613b      	str	r3, [r7, #16]
  return result;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	fab3 f383 	clz	r3, r3
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	4619      	mov	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	408b      	lsls	r3, r1
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	60da      	str	r2, [r3, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	0c1b      	lsrs	r3, r3, #16
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	60fb      	str	r3, [r7, #12]
  return result;
 8004c84:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8004c8e:	e040      	b.n	8004d12 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8004c90:	2201      	movs	r2, #1
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	409a      	lsls	r2, r3
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d036      	beq.n	8004d0c <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2b07      	cmp	r3, #7
 8004ca2:	d806      	bhi.n	8004cb2 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8004ca4:	f240 1201 	movw	r2, #257	; 0x101
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e008      	b.n	8004cc4 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3b08      	subs	r3, #8
 8004cb6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cc2:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	69b9      	ldr	r1, [r7, #24]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff11 	bl	8004af4 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ffa0 	bl	8004c20 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d003      	beq.n	8004cf0 <LL_GPIO_Init+0x8c>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b09      	cmp	r3, #9
 8004cee:	d10d      	bne.n	8004d0c <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	69b9      	ldr	r1, [r7, #24]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ff2d 	bl	8004b58 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff ff58 	bl	8004bbc <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1b8      	bne.n	8004c90 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <LL_I2C_Enable>:
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f043 0201 	orr.w	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <LL_I2C_Disable>:
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 0201 	bic.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <LL_I2C_SetOwnAddress1>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
	...

08004d94 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8004d94:	b490      	push	{r4, r7}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8004da2:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8004da4:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4a3f      	ldr	r2, [pc, #252]	; (8004ea8 <LL_I2C_ConfigSpeed+0x114>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004db8:	ea44 0203 	orr.w	r2, r4, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4938      	ldr	r1, [pc, #224]	; (8004eac <LL_I2C_ConfigSpeed+0x118>)
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d801      	bhi.n	8004dd4 <LL_I2C_ConfigSpeed+0x40>
 8004dd0:	1c63      	adds	r3, r4, #1
 8004dd2:	e008      	b.n	8004de6 <LL_I2C_ConfigSpeed+0x52>
 8004dd4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004dd8:	fb03 f304 	mul.w	r3, r3, r4
 8004ddc:	4934      	ldr	r1, [pc, #208]	; (8004eb0 <LL_I2C_ConfigSpeed+0x11c>)
 8004dde:	fba1 1303 	umull	r1, r3, r1, r3
 8004de2:	099b      	lsrs	r3, r3, #6
 8004de4:	3301      	adds	r3, #1
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a2f      	ldr	r2, [pc, #188]	; (8004eac <LL_I2C_ConfigSpeed+0x118>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d939      	bls.n	8004e68 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d117      	bne.n	8004e2a <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e22:	e01d      	b.n	8004e60 <LL_I2C_ConfigSpeed+0xcc>
 8004e24:	f248 0301 	movw	r3, #32769	; 0x8001
 8004e28:	e01a      	b.n	8004e60 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009a      	lsls	r2, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5a:	e001      	b.n	8004e60 <LL_I2C_ConfigSpeed+0xcc>
 8004e5c:	f248 0301 	movw	r3, #32769	; 0x8001
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	ea43 0402 	orr.w	r4, r3, r2
 8004e66:	e010      	b.n	8004e8a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d905      	bls.n	8004e86 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	e000      	b.n	8004e88 <LL_I2C_ConfigSpeed+0xf4>
 8004e86:	2304      	movs	r3, #4
 8004e88:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e96:	ea44 0203 	orr.w	r2, r4, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	61da      	str	r2, [r3, #28]
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc90      	pop	{r4, r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	431bde83 	.word	0x431bde83
 8004eac:	000186a0 	.word	0x000186a0
 8004eb0:	10624dd3 	.word	0x10624dd3

08004eb4 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 021a 	bic.w	r2, r3, #26
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	601a      	str	r2, [r3, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ff1d 	bl	8004d46 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004f0c:	f107 0308 	add.w	r3, r7, #8
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f87b 	bl	800500c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004f16:	6939      	ldr	r1, [r7, #16]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff37 	bl	8004d94 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68d9      	ldr	r1, [r3, #12]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ff17 	bl	8004d64 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ffb9 	bl	8004eb4 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff fef0 	bl	8004d28 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff ffc2 	bl	8004ed8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <LL_RCC_GetSysClkSource>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f64:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <LL_RCC_GetSysClkSource+0x14>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 030c 	and.w	r3, r3, #12
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	40021000 	.word	0x40021000

08004f78 <LL_RCC_GetAHBPrescaler>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f7c:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <LL_RCC_GetAHBPrescaler+0x14>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	40021000 	.word	0x40021000

08004f90 <LL_RCC_GetAPB1Prescaler>:
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <LL_RCC_GetAPB2Prescaler>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <LL_RCC_GetAPB2Prescaler+0x14>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <LL_RCC_PLL_GetMainSource+0x14>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr
 8004fd4:	40021000 	.word	0x40021000

08004fd8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004fdc:	4b03      	ldr	r3, [pc, #12]	; (8004fec <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr
 8004fec:	40021000 	.word	0x40021000

08004ff0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004ff4:	4b04      	ldr	r3, [pc, #16]	; (8005008 <LL_RCC_PLL_GetPrediv+0x18>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	0c5b      	lsrs	r3, r3, #17
 8004ffa:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40021000 	.word	0x40021000

0800500c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005014:	f000 f820 	bl	8005058 <RCC_GetSystemClockFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f83a 	bl	800509c <RCC_GetHCLKClockFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f848 	bl	80050c8 <RCC_GetPCLK1ClockFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f854 	bl	80050f0 <RCC_GetPCLK2ClockFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60da      	str	r2, [r3, #12]
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005062:	f7ff ff7d 	bl	8004f60 <LL_RCC_GetSysClkSource>
 8005066:	4603      	mov	r3, r0
 8005068:	2b04      	cmp	r3, #4
 800506a:	d006      	beq.n	800507a <RCC_GetSystemClockFreq+0x22>
 800506c:	2b08      	cmp	r3, #8
 800506e:	d007      	beq.n	8005080 <RCC_GetSystemClockFreq+0x28>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005074:	4b08      	ldr	r3, [pc, #32]	; (8005098 <RCC_GetSystemClockFreq+0x40>)
 8005076:	607b      	str	r3, [r7, #4]
      break;
 8005078:	e009      	b.n	800508e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800507a:	4b07      	ldr	r3, [pc, #28]	; (8005098 <RCC_GetSystemClockFreq+0x40>)
 800507c:	607b      	str	r3, [r7, #4]
      break;
 800507e:	e006      	b.n	800508e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005080:	f000 f84a 	bl	8005118 <RCC_PLL_GetFreqDomain_SYS>
 8005084:	6078      	str	r0, [r7, #4]
      break;
 8005086:	e002      	b.n	800508e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8005088:	4b03      	ldr	r3, [pc, #12]	; (8005098 <RCC_GetSystemClockFreq+0x40>)
 800508a:	607b      	str	r3, [r7, #4]
      break;
 800508c:	bf00      	nop
  }

  return frequency;
 800508e:	687b      	ldr	r3, [r7, #4]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	007a1200 	.word	0x007a1200

0800509c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80050a4:	f7ff ff68 	bl	8004f78 <LL_RCC_GetAHBPrescaler>
 80050a8:	4603      	mov	r3, r0
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	4a04      	ldr	r2, [pc, #16]	; (80050c4 <RCC_GetHCLKClockFreq+0x28>)
 80050b2:	5cd3      	ldrb	r3, [r2, r3]
 80050b4:	461a      	mov	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	40d3      	lsrs	r3, r2
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	080083a0 	.word	0x080083a0

080050c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80050d0:	f7ff ff5e 	bl	8004f90 <LL_RCC_GetAPB1Prescaler>
 80050d4:	4603      	mov	r3, r0
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	4a04      	ldr	r2, [pc, #16]	; (80050ec <RCC_GetPCLK1ClockFreq+0x24>)
 80050da:	5cd3      	ldrb	r3, [r2, r3]
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	40d3      	lsrs	r3, r2
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	080083b0 	.word	0x080083b0

080050f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80050f8:	f7ff ff56 	bl	8004fa8 <LL_RCC_GetAPB2Prescaler>
 80050fc:	4603      	mov	r3, r0
 80050fe:	0adb      	lsrs	r3, r3, #11
 8005100:	4a04      	ldr	r2, [pc, #16]	; (8005114 <RCC_GetPCLK2ClockFreq+0x24>)
 8005102:	5cd3      	ldrb	r3, [r2, r3]
 8005104:	461a      	mov	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	40d3      	lsrs	r3, r2
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	080083b0 	.word	0x080083b0

08005118 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	2300      	movs	r3, #0
 8005124:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005126:	f7ff ff4b 	bl	8004fc0 <LL_RCC_PLL_GetMainSource>
 800512a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8005132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005136:	d003      	beq.n	8005140 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8005138:	e00b      	b.n	8005152 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800513a:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 800513c:	607b      	str	r3, [r7, #4]
      break;
 800513e:	e00b      	b.n	8005158 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8005140:	f7ff ff56 	bl	8004ff0 <LL_RCC_PLL_GetPrediv>
 8005144:	4603      	mov	r3, r0
 8005146:	3301      	adds	r3, #1
 8005148:	4a0a      	ldr	r2, [pc, #40]	; (8005174 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	607b      	str	r3, [r7, #4]
      break;
 8005150:	e002      	b.n	8005158 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8005154:	607b      	str	r3, [r7, #4]
      break;
 8005156:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8005158:	f7ff ff3e 	bl	8004fd8 <LL_RCC_PLL_GetMultiplicator>
 800515c:	4603      	mov	r3, r0
 800515e:	0c9b      	lsrs	r3, r3, #18
 8005160:	3302      	adds	r3, #2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	fb02 f303 	mul.w	r3, r2, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	003d0900 	.word	0x003d0900
 8005174:	007a1200 	.word	0x007a1200

08005178 <LL_TIM_SetPrescaler>:
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <LL_TIM_SetAutoReload>:
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <LL_TIM_SetRepetitionCounter>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr

080051c6 <LL_TIM_OC_SetCompareCH1>:
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <LL_TIM_OC_SetCompareCH2>:
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <LL_TIM_OC_SetCompareCH3>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <LL_TIM_OC_SetCompareCH4>:
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	615a      	str	r2, [r3, #20]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a27      	ldr	r2, [pc, #156]	; (80052fc <LL_TIM_Init+0xb0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00b      	beq.n	800527c <LL_TIM_Init+0x30>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526a:	d007      	beq.n	800527c <LL_TIM_Init+0x30>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a24      	ldr	r2, [pc, #144]	; (8005300 <LL_TIM_Init+0xb4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <LL_TIM_Init+0x30>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a23      	ldr	r2, [pc, #140]	; (8005304 <LL_TIM_Init+0xb8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d106      	bne.n	800528a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <LL_TIM_Init+0xb0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00b      	beq.n	80052aa <LL_TIM_Init+0x5e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005298:	d007      	beq.n	80052aa <LL_TIM_Init+0x5e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <LL_TIM_Init+0xb4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <LL_TIM_Init+0x5e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a17      	ldr	r2, [pc, #92]	; (8005304 <LL_TIM_Init+0xb8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d106      	bne.n	80052b8 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff ff64 	bl	8005192 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff51 	bl	8005178 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <LL_TIM_Init+0xb0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d105      	bne.n	80052ea <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	7c1b      	ldrb	r3, [r3, #16]
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ff61 	bl	80051ac <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ff9f 	bl	800522e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800

08005308 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b10      	cmp	r3, #16
 800531c:	d012      	beq.n	8005344 <LL_TIM_OC_Init+0x3c>
 800531e:	2b10      	cmp	r3, #16
 8005320:	d802      	bhi.n	8005328 <LL_TIM_OC_Init+0x20>
 8005322:	2b01      	cmp	r3, #1
 8005324:	d007      	beq.n	8005336 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8005326:	e022      	b.n	800536e <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8005328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532c:	d011      	beq.n	8005352 <LL_TIM_OC_Init+0x4a>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005332:	d015      	beq.n	8005360 <LL_TIM_OC_Init+0x58>
      break;
 8005334:	e01b      	b.n	800536e <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f865 	bl	8005408 <OC1Config>
 800533e:	4603      	mov	r3, r0
 8005340:	75fb      	strb	r3, [r7, #23]
      break;
 8005342:	e014      	b.n	800536e <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f8c4 	bl	80054d4 <OC2Config>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]
      break;
 8005350:	e00d      	b.n	800536e <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f927 	bl	80055a8 <OC3Config>
 800535a:	4603      	mov	r3, r0
 800535c:	75fb      	strb	r3, [r7, #23]
      break;
 800535e:	e006      	b.n	800536e <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f98a 	bl	800567c <OC4Config>
 8005368:	4603      	mov	r3, r0
 800536a:	75fb      	strb	r3, [r7, #23]
      break;
 800536c:	bf00      	nop
  }

  return result;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	7b12      	ldrb	r2, [r2, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	89d2      	ldrh	r2, [r2, #14]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0303 	bic.w	r3, r3, #3
 8005436:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 0202 	bic.w	r2, r3, #2
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0201 	bic.w	r2, r3, #1
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a1a      	ldr	r2, [pc, #104]	; (80054d0 <OC1Config+0xc8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d11e      	bne.n	80054a8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f023 0208 	bic.w	r2, r3, #8
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f023 0204 	bic.w	r2, r3, #4
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fe83 	bl	80051c6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40012c00 	.word	0x40012c00

080054d4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f023 0210 	bic.w	r2, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0220 	bic.w	r2, r3, #32
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0210 	bic.w	r2, r3, #16
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <OC2Config+0xd0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d11f      	bne.n	800557c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	019b      	lsls	r3, r3, #6
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	019b      	lsls	r3, r3, #6
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4619      	mov	r1, r3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff fe26 	bl	80051e0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40012c00 	.word	0x40012c00

080055a8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <OC3Config+0xd0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d11f      	bne.n	800564e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	029b      	lsls	r3, r3, #10
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	029b      	lsls	r3, r3, #10
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	015b      	lsls	r3, r3, #5
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff fdca 	bl	80051fa <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40012c00 	.word	0x40012c00

0800567c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	031b      	lsls	r3, r3, #12
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	031b      	lsls	r3, r3, #12
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a0f      	ldr	r2, [pc, #60]	; (800571c <OC4Config+0xa0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d107      	bne.n	80056f4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	019b      	lsls	r3, r3, #6
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff fd84 	bl	8005214 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40012c00 	.word	0x40012c00

08005720 <LL_USART_IsEnabled>:
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005734:	bf0c      	ite	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	2300      	movne	r3, #0
 800573a:	b2db      	uxtb	r3, r3
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <LL_USART_SetStopBitsLength>:
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	611a      	str	r2, [r3, #16]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <LL_USART_SetHWFlowCtrl>:
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	615a      	str	r2, [r3, #20]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
	...

08005790 <LL_USART_SetBaudRate>:
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009a      	lsls	r2, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <LL_USART_SetBaudRate+0xb8>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	b299      	uxth	r1, r3
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	009a      	lsls	r2, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80057d2:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <LL_USART_SetBaudRate+0xb8>)
 80057d4:	fba3 0302 	umull	r0, r3, r3, r2
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	2064      	movs	r0, #100	; 0x64
 80057dc:	fb00 f303 	mul.w	r3, r0, r3
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	3332      	adds	r3, #50	; 0x32
 80057e6:	4a18      	ldr	r2, [pc, #96]	; (8005848 <LL_USART_SetBaudRate+0xb8>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	440b      	add	r3, r1
 80057f8:	b299      	uxth	r1, r3
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	009a      	lsls	r2, r3, #2
 8005804:	441a      	add	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	fbb2 f2f3 	udiv	r2, r2, r3
 800580e:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <LL_USART_SetBaudRate+0xb8>)
 8005810:	fba3 0302 	umull	r0, r3, r3, r2
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	2064      	movs	r0, #100	; 0x64
 8005818:	fb00 f303 	mul.w	r3, r0, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	3332      	adds	r3, #50	; 0x32
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <LL_USART_SetBaudRate+0xb8>)
 8005824:	fba2 2303 	umull	r2, r3, r2, r3
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	b29b      	uxth	r3, r3
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	b29b      	uxth	r3, r3
 8005832:	440b      	add	r3, r1
 8005834:	b29b      	uxth	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	609a      	str	r2, [r3, #8]
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	51eb851f 	.word	0x51eb851f

0800584c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800585a:	2300      	movs	r3, #0
 800585c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff ff5e 	bl	8005720 <LL_USART_IsEnabled>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d145      	bne.n	80058f6 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005872:	f023 030c 	bic.w	r3, r3, #12
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	6851      	ldr	r1, [r2, #4]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	68d2      	ldr	r2, [r2, #12]
 800587e:	4311      	orrs	r1, r2
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	6912      	ldr	r2, [r2, #16]
 8005884:	430a      	orrs	r2, r1
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff ff57 	bl	8005746 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff ff63 	bl	800576a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fbaf 	bl	800500c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a13      	ldr	r2, [pc, #76]	; (8005900 <LL_USART_Init+0xb4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d102      	bne.n	80058bc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e00c      	b.n	80058d6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a11      	ldr	r2, [pc, #68]	; (8005904 <LL_USART_Init+0xb8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d102      	bne.n	80058ca <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	e005      	b.n	80058d6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a0e      	ldr	r2, [pc, #56]	; (8005908 <LL_USART_Init+0xbc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d101      	bne.n	80058d6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00c      	beq.n	80058f6 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80058e4:	2300      	movs	r3, #0
 80058e6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	69b9      	ldr	r1, [r7, #24]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ff4d 	bl	8005790 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40013800 	.word	0x40013800
 8005904:	40004400 	.word	0x40004400
 8005908:	40004800 	.word	0x40004800

0800590c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	4a07      	ldr	r2, [pc, #28]	; (800593c <LL_InitTick+0x30>)
 8005920:	3b01      	subs	r3, #1
 8005922:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <LL_InitTick+0x30>)
 8005926:	2200      	movs	r2, #0
 8005928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800592a:	4b04      	ldr	r3, [pc, #16]	; (800593c <LL_InitTick+0x30>)
 800592c:	2205      	movs	r2, #5
 800592e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	bc80      	pop	{r7}
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	e000e010 	.word	0xe000e010

08005940 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005948:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ffdd 	bl	800590c <LL_InitTick>
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <LL_mDelay+0x44>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800596a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d00c      	beq.n	800598e <LL_mDelay+0x32>
  {
    Delay++;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3301      	adds	r3, #1
 8005978:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800597a:	e008      	b.n	800598e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800597c:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <LL_mDelay+0x44>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <LL_mDelay+0x32>
    {
      Delay--;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3b01      	subs	r3, #1
 800598c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f3      	bne.n	800597c <LL_mDelay+0x20>
    }
  }
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	e000e010 	.word	0xe000e010

080059a4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80059ac:	4a03      	ldr	r2, [pc, #12]	; (80059bc <LL_SetSystemCoreClock+0x18>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc80      	pop	{r7}
 80059ba:	4770      	bx	lr
 80059bc:	20000014 	.word	0x20000014

080059c0 <__errno>:
 80059c0:	4b01      	ldr	r3, [pc, #4]	; (80059c8 <__errno+0x8>)
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	20000018 	.word	0x20000018

080059cc <__libc_init_array>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	2500      	movs	r5, #0
 80059d0:	4e0c      	ldr	r6, [pc, #48]	; (8005a04 <__libc_init_array+0x38>)
 80059d2:	4c0d      	ldr	r4, [pc, #52]	; (8005a08 <__libc_init_array+0x3c>)
 80059d4:	1ba4      	subs	r4, r4, r6
 80059d6:	10a4      	asrs	r4, r4, #2
 80059d8:	42a5      	cmp	r5, r4
 80059da:	d109      	bne.n	80059f0 <__libc_init_array+0x24>
 80059dc:	f002 fc5a 	bl	8008294 <_init>
 80059e0:	2500      	movs	r5, #0
 80059e2:	4e0a      	ldr	r6, [pc, #40]	; (8005a0c <__libc_init_array+0x40>)
 80059e4:	4c0a      	ldr	r4, [pc, #40]	; (8005a10 <__libc_init_array+0x44>)
 80059e6:	1ba4      	subs	r4, r4, r6
 80059e8:	10a4      	asrs	r4, r4, #2
 80059ea:	42a5      	cmp	r5, r4
 80059ec:	d105      	bne.n	80059fa <__libc_init_array+0x2e>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059f4:	4798      	blx	r3
 80059f6:	3501      	adds	r5, #1
 80059f8:	e7ee      	b.n	80059d8 <__libc_init_array+0xc>
 80059fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059fe:	4798      	blx	r3
 8005a00:	3501      	adds	r5, #1
 8005a02:	e7f2      	b.n	80059ea <__libc_init_array+0x1e>
 8005a04:	08008678 	.word	0x08008678
 8005a08:	08008678 	.word	0x08008678
 8005a0c:	08008678 	.word	0x08008678
 8005a10:	0800867c 	.word	0x0800867c

08005a14 <memset>:
 8005a14:	4603      	mov	r3, r0
 8005a16:	4402      	add	r2, r0
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d100      	bne.n	8005a1e <memset+0xa>
 8005a1c:	4770      	bx	lr
 8005a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a22:	e7f9      	b.n	8005a18 <memset+0x4>

08005a24 <__cvt>:
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2a:	461e      	mov	r6, r3
 8005a2c:	bfbb      	ittet	lt
 8005a2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a32:	461e      	movlt	r6, r3
 8005a34:	2300      	movge	r3, #0
 8005a36:	232d      	movlt	r3, #45	; 0x2d
 8005a38:	b088      	sub	sp, #32
 8005a3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a3c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005a40:	f027 0720 	bic.w	r7, r7, #32
 8005a44:	2f46      	cmp	r7, #70	; 0x46
 8005a46:	4614      	mov	r4, r2
 8005a48:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a4a:	700b      	strb	r3, [r1, #0]
 8005a4c:	d004      	beq.n	8005a58 <__cvt+0x34>
 8005a4e:	2f45      	cmp	r7, #69	; 0x45
 8005a50:	d100      	bne.n	8005a54 <__cvt+0x30>
 8005a52:	3501      	adds	r5, #1
 8005a54:	2302      	movs	r3, #2
 8005a56:	e000      	b.n	8005a5a <__cvt+0x36>
 8005a58:	2303      	movs	r3, #3
 8005a5a:	aa07      	add	r2, sp, #28
 8005a5c:	9204      	str	r2, [sp, #16]
 8005a5e:	aa06      	add	r2, sp, #24
 8005a60:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a64:	e9cd 3500 	strd	r3, r5, [sp]
 8005a68:	4622      	mov	r2, r4
 8005a6a:	4633      	mov	r3, r6
 8005a6c:	f000 fea4 	bl	80067b8 <_dtoa_r>
 8005a70:	2f47      	cmp	r7, #71	; 0x47
 8005a72:	4680      	mov	r8, r0
 8005a74:	d102      	bne.n	8005a7c <__cvt+0x58>
 8005a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a78:	07db      	lsls	r3, r3, #31
 8005a7a:	d526      	bpl.n	8005aca <__cvt+0xa6>
 8005a7c:	2f46      	cmp	r7, #70	; 0x46
 8005a7e:	eb08 0905 	add.w	r9, r8, r5
 8005a82:	d111      	bne.n	8005aa8 <__cvt+0x84>
 8005a84:	f898 3000 	ldrb.w	r3, [r8]
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d10a      	bne.n	8005aa2 <__cvt+0x7e>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4620      	mov	r0, r4
 8005a92:	4631      	mov	r1, r6
 8005a94:	f7fa ff88 	bl	80009a8 <__aeabi_dcmpeq>
 8005a98:	b918      	cbnz	r0, 8005aa2 <__cvt+0x7e>
 8005a9a:	f1c5 0501 	rsb	r5, r5, #1
 8005a9e:	f8ca 5000 	str.w	r5, [sl]
 8005aa2:	f8da 3000 	ldr.w	r3, [sl]
 8005aa6:	4499      	add	r9, r3
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4620      	mov	r0, r4
 8005aae:	4631      	mov	r1, r6
 8005ab0:	f7fa ff7a 	bl	80009a8 <__aeabi_dcmpeq>
 8005ab4:	b938      	cbnz	r0, 8005ac6 <__cvt+0xa2>
 8005ab6:	2230      	movs	r2, #48	; 0x30
 8005ab8:	9b07      	ldr	r3, [sp, #28]
 8005aba:	454b      	cmp	r3, r9
 8005abc:	d205      	bcs.n	8005aca <__cvt+0xa6>
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	9107      	str	r1, [sp, #28]
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e7f8      	b.n	8005ab8 <__cvt+0x94>
 8005ac6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005aca:	4640      	mov	r0, r8
 8005acc:	9b07      	ldr	r3, [sp, #28]
 8005ace:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ad0:	eba3 0308 	sub.w	r3, r3, r8
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	b008      	add	sp, #32
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005adc <__exponent>:
 8005adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ade:	2900      	cmp	r1, #0
 8005ae0:	bfb4      	ite	lt
 8005ae2:	232d      	movlt	r3, #45	; 0x2d
 8005ae4:	232b      	movge	r3, #43	; 0x2b
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	bfb8      	it	lt
 8005aea:	4249      	neglt	r1, r1
 8005aec:	2909      	cmp	r1, #9
 8005aee:	f804 2b02 	strb.w	r2, [r4], #2
 8005af2:	7043      	strb	r3, [r0, #1]
 8005af4:	dd21      	ble.n	8005b3a <__exponent+0x5e>
 8005af6:	f10d 0307 	add.w	r3, sp, #7
 8005afa:	461f      	mov	r7, r3
 8005afc:	260a      	movs	r6, #10
 8005afe:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b02:	fb06 1115 	mls	r1, r6, r5, r1
 8005b06:	2d09      	cmp	r5, #9
 8005b08:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005b0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b10:	f103 32ff 	add.w	r2, r3, #4294967295
 8005b14:	4629      	mov	r1, r5
 8005b16:	dc09      	bgt.n	8005b2c <__exponent+0x50>
 8005b18:	3130      	adds	r1, #48	; 0x30
 8005b1a:	3b02      	subs	r3, #2
 8005b1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005b20:	42bb      	cmp	r3, r7
 8005b22:	4622      	mov	r2, r4
 8005b24:	d304      	bcc.n	8005b30 <__exponent+0x54>
 8005b26:	1a10      	subs	r0, r2, r0
 8005b28:	b003      	add	sp, #12
 8005b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	e7e6      	b.n	8005afe <__exponent+0x22>
 8005b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b34:	f804 2b01 	strb.w	r2, [r4], #1
 8005b38:	e7f2      	b.n	8005b20 <__exponent+0x44>
 8005b3a:	2330      	movs	r3, #48	; 0x30
 8005b3c:	4419      	add	r1, r3
 8005b3e:	7083      	strb	r3, [r0, #2]
 8005b40:	1d02      	adds	r2, r0, #4
 8005b42:	70c1      	strb	r1, [r0, #3]
 8005b44:	e7ef      	b.n	8005b26 <__exponent+0x4a>
	...

08005b48 <_printf_float>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	b091      	sub	sp, #68	; 0x44
 8005b4e:	460c      	mov	r4, r1
 8005b50:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005b52:	4693      	mov	fp, r2
 8005b54:	461e      	mov	r6, r3
 8005b56:	4605      	mov	r5, r0
 8005b58:	f001 fd5c 	bl	8007614 <_localeconv_r>
 8005b5c:	6803      	ldr	r3, [r0, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	9309      	str	r3, [sp, #36]	; 0x24
 8005b62:	f7fa faf5 	bl	8000150 <strlen>
 8005b66:	2300      	movs	r3, #0
 8005b68:	930e      	str	r3, [sp, #56]	; 0x38
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	900a      	str	r0, [sp, #40]	; 0x28
 8005b6e:	3307      	adds	r3, #7
 8005b70:	f023 0307 	bic.w	r3, r3, #7
 8005b74:	f103 0208 	add.w	r2, r3, #8
 8005b78:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005b7c:	f8d4 a000 	ldr.w	sl, [r4]
 8005b80:	603a      	str	r2, [r7, #0]
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b8a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005b8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295
 8005b98:	4ba6      	ldr	r3, [pc, #664]	; (8005e34 <_printf_float+0x2ec>)
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b9e:	f7fa ff35 	bl	8000a0c <__aeabi_dcmpun>
 8005ba2:	bb68      	cbnz	r0, 8005c00 <_printf_float+0xb8>
 8005ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba8:	4ba2      	ldr	r3, [pc, #648]	; (8005e34 <_printf_float+0x2ec>)
 8005baa:	4638      	mov	r0, r7
 8005bac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bae:	f7fa ff0f 	bl	80009d0 <__aeabi_dcmple>
 8005bb2:	bb28      	cbnz	r0, 8005c00 <_printf_float+0xb8>
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4638      	mov	r0, r7
 8005bba:	4649      	mov	r1, r9
 8005bbc:	f7fa fefe 	bl	80009bc <__aeabi_dcmplt>
 8005bc0:	b110      	cbz	r0, 8005bc8 <_printf_float+0x80>
 8005bc2:	232d      	movs	r3, #45	; 0x2d
 8005bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc8:	4f9b      	ldr	r7, [pc, #620]	; (8005e38 <_printf_float+0x2f0>)
 8005bca:	4b9c      	ldr	r3, [pc, #624]	; (8005e3c <_printf_float+0x2f4>)
 8005bcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bd0:	bf98      	it	ls
 8005bd2:	461f      	movls	r7, r3
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	f04f 0900 	mov.w	r9, #0
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	f02a 0304 	bic.w	r3, sl, #4
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	9600      	str	r6, [sp, #0]
 8005be4:	465b      	mov	r3, fp
 8005be6:	aa0f      	add	r2, sp, #60	; 0x3c
 8005be8:	4621      	mov	r1, r4
 8005bea:	4628      	mov	r0, r5
 8005bec:	f000 f9e2 	bl	8005fb4 <_printf_common>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f040 8090 	bne.w	8005d16 <_printf_float+0x1ce>
 8005bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfa:	b011      	add	sp, #68	; 0x44
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c00:	463a      	mov	r2, r7
 8005c02:	464b      	mov	r3, r9
 8005c04:	4638      	mov	r0, r7
 8005c06:	4649      	mov	r1, r9
 8005c08:	f7fa ff00 	bl	8000a0c <__aeabi_dcmpun>
 8005c0c:	b110      	cbz	r0, 8005c14 <_printf_float+0xcc>
 8005c0e:	4f8c      	ldr	r7, [pc, #560]	; (8005e40 <_printf_float+0x2f8>)
 8005c10:	4b8c      	ldr	r3, [pc, #560]	; (8005e44 <_printf_float+0x2fc>)
 8005c12:	e7db      	b.n	8005bcc <_printf_float+0x84>
 8005c14:	6863      	ldr	r3, [r4, #4]
 8005c16:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	a80d      	add	r0, sp, #52	; 0x34
 8005c1e:	a90e      	add	r1, sp, #56	; 0x38
 8005c20:	d140      	bne.n	8005ca4 <_printf_float+0x15c>
 8005c22:	2306      	movs	r3, #6
 8005c24:	6063      	str	r3, [r4, #4]
 8005c26:	f04f 0c00 	mov.w	ip, #0
 8005c2a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005c2e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005c32:	6863      	ldr	r3, [r4, #4]
 8005c34:	6022      	str	r2, [r4, #0]
 8005c36:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	464b      	mov	r3, r9
 8005c40:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005c44:	4628      	mov	r0, r5
 8005c46:	f7ff feed 	bl	8005a24 <__cvt>
 8005c4a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005c4e:	2b47      	cmp	r3, #71	; 0x47
 8005c50:	4607      	mov	r7, r0
 8005c52:	d109      	bne.n	8005c68 <_printf_float+0x120>
 8005c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c56:	1cd8      	adds	r0, r3, #3
 8005c58:	db02      	blt.n	8005c60 <_printf_float+0x118>
 8005c5a:	6862      	ldr	r2, [r4, #4]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	dd47      	ble.n	8005cf0 <_printf_float+0x1a8>
 8005c60:	f1a8 0802 	sub.w	r8, r8, #2
 8005c64:	fa5f f888 	uxtb.w	r8, r8
 8005c68:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005c6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c6e:	d824      	bhi.n	8005cba <_printf_float+0x172>
 8005c70:	3901      	subs	r1, #1
 8005c72:	4642      	mov	r2, r8
 8005c74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c78:	910d      	str	r1, [sp, #52]	; 0x34
 8005c7a:	f7ff ff2f 	bl	8005adc <__exponent>
 8005c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c80:	4681      	mov	r9, r0
 8005c82:	1813      	adds	r3, r2, r0
 8005c84:	2a01      	cmp	r2, #1
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	dc02      	bgt.n	8005c90 <_printf_float+0x148>
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	07d1      	lsls	r1, r2, #31
 8005c8e:	d501      	bpl.n	8005c94 <_printf_float+0x14c>
 8005c90:	3301      	adds	r3, #1
 8005c92:	6123      	str	r3, [r4, #16]
 8005c94:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0a2      	beq.n	8005be2 <_printf_float+0x9a>
 8005c9c:	232d      	movs	r3, #45	; 0x2d
 8005c9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca2:	e79e      	b.n	8005be2 <_printf_float+0x9a>
 8005ca4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005ca8:	f000 816e 	beq.w	8005f88 <_printf_float+0x440>
 8005cac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cb0:	d1b9      	bne.n	8005c26 <_printf_float+0xde>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1b7      	bne.n	8005c26 <_printf_float+0xde>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e7b4      	b.n	8005c24 <_printf_float+0xdc>
 8005cba:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005cbe:	d119      	bne.n	8005cf4 <_printf_float+0x1ac>
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	6863      	ldr	r3, [r4, #4]
 8005cc4:	dd0c      	ble.n	8005ce0 <_printf_float+0x198>
 8005cc6:	6121      	str	r1, [r4, #16]
 8005cc8:	b913      	cbnz	r3, 8005cd0 <_printf_float+0x188>
 8005cca:	6822      	ldr	r2, [r4, #0]
 8005ccc:	07d2      	lsls	r2, r2, #31
 8005cce:	d502      	bpl.n	8005cd6 <_printf_float+0x18e>
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	440b      	add	r3, r1
 8005cd4:	6123      	str	r3, [r4, #16]
 8005cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8005cde:	e7d9      	b.n	8005c94 <_printf_float+0x14c>
 8005ce0:	b913      	cbnz	r3, 8005ce8 <_printf_float+0x1a0>
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	07d0      	lsls	r0, r2, #31
 8005ce6:	d501      	bpl.n	8005cec <_printf_float+0x1a4>
 8005ce8:	3302      	adds	r3, #2
 8005cea:	e7f3      	b.n	8005cd4 <_printf_float+0x18c>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e7f1      	b.n	8005cd4 <_printf_float+0x18c>
 8005cf0:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005cf4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	db05      	blt.n	8005d08 <_printf_float+0x1c0>
 8005cfc:	6822      	ldr	r2, [r4, #0]
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	07d1      	lsls	r1, r2, #31
 8005d02:	d5e8      	bpl.n	8005cd6 <_printf_float+0x18e>
 8005d04:	3301      	adds	r3, #1
 8005d06:	e7e5      	b.n	8005cd4 <_printf_float+0x18c>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bfcc      	ite	gt
 8005d0c:	2301      	movgt	r3, #1
 8005d0e:	f1c3 0302 	rsble	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	e7de      	b.n	8005cd4 <_printf_float+0x18c>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	055a      	lsls	r2, r3, #21
 8005d1a:	d407      	bmi.n	8005d2c <_printf_float+0x1e4>
 8005d1c:	6923      	ldr	r3, [r4, #16]
 8005d1e:	463a      	mov	r2, r7
 8005d20:	4659      	mov	r1, fp
 8005d22:	4628      	mov	r0, r5
 8005d24:	47b0      	blx	r6
 8005d26:	3001      	adds	r0, #1
 8005d28:	d129      	bne.n	8005d7e <_printf_float+0x236>
 8005d2a:	e764      	b.n	8005bf6 <_printf_float+0xae>
 8005d2c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005d30:	f240 80d7 	bls.w	8005ee2 <_printf_float+0x39a>
 8005d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f7fa fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8005d40:	b388      	cbz	r0, 8005da6 <_printf_float+0x25e>
 8005d42:	2301      	movs	r3, #1
 8005d44:	4a40      	ldr	r2, [pc, #256]	; (8005e48 <_printf_float+0x300>)
 8005d46:	4659      	mov	r1, fp
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b0      	blx	r6
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f af52 	beq.w	8005bf6 <_printf_float+0xae>
 8005d52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d56:	429a      	cmp	r2, r3
 8005d58:	db02      	blt.n	8005d60 <_printf_float+0x218>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	07d8      	lsls	r0, r3, #31
 8005d5e:	d50e      	bpl.n	8005d7e <_printf_float+0x236>
 8005d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d64:	4659      	mov	r1, fp
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b0      	blx	r6
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f43f af43 	beq.w	8005bf6 <_printf_float+0xae>
 8005d70:	2700      	movs	r7, #0
 8005d72:	f104 081a 	add.w	r8, r4, #26
 8005d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	42bb      	cmp	r3, r7
 8005d7c:	dc09      	bgt.n	8005d92 <_printf_float+0x24a>
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	079f      	lsls	r7, r3, #30
 8005d82:	f100 80fd 	bmi.w	8005f80 <_printf_float+0x438>
 8005d86:	68e0      	ldr	r0, [r4, #12]
 8005d88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d8a:	4298      	cmp	r0, r3
 8005d8c:	bfb8      	it	lt
 8005d8e:	4618      	movlt	r0, r3
 8005d90:	e733      	b.n	8005bfa <_printf_float+0xb2>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4642      	mov	r2, r8
 8005d96:	4659      	mov	r1, fp
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b0      	blx	r6
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	f43f af2a 	beq.w	8005bf6 <_printf_float+0xae>
 8005da2:	3701      	adds	r7, #1
 8005da4:	e7e7      	b.n	8005d76 <_printf_float+0x22e>
 8005da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	dc2b      	bgt.n	8005e04 <_printf_float+0x2bc>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4a26      	ldr	r2, [pc, #152]	; (8005e48 <_printf_float+0x300>)
 8005db0:	4659      	mov	r1, fp
 8005db2:	4628      	mov	r0, r5
 8005db4:	47b0      	blx	r6
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f af1d 	beq.w	8005bf6 <_printf_float+0xae>
 8005dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dbe:	b923      	cbnz	r3, 8005dca <_printf_float+0x282>
 8005dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc2:	b913      	cbnz	r3, 8005dca <_printf_float+0x282>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	07d9      	lsls	r1, r3, #31
 8005dc8:	d5d9      	bpl.n	8005d7e <_printf_float+0x236>
 8005dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dce:	4659      	mov	r1, fp
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b0      	blx	r6
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	f43f af0e 	beq.w	8005bf6 <_printf_float+0xae>
 8005dda:	f04f 0800 	mov.w	r8, #0
 8005dde:	f104 091a 	add.w	r9, r4, #26
 8005de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005de4:	425b      	negs	r3, r3
 8005de6:	4543      	cmp	r3, r8
 8005de8:	dc01      	bgt.n	8005dee <_printf_float+0x2a6>
 8005dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dec:	e797      	b.n	8005d1e <_printf_float+0x1d6>
 8005dee:	2301      	movs	r3, #1
 8005df0:	464a      	mov	r2, r9
 8005df2:	4659      	mov	r1, fp
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b0      	blx	r6
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f43f aefc 	beq.w	8005bf6 <_printf_float+0xae>
 8005dfe:	f108 0801 	add.w	r8, r8, #1
 8005e02:	e7ee      	b.n	8005de2 <_printf_float+0x29a>
 8005e04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	bfa8      	it	ge
 8005e0c:	461a      	movge	r2, r3
 8005e0e:	2a00      	cmp	r2, #0
 8005e10:	4690      	mov	r8, r2
 8005e12:	dd07      	ble.n	8005e24 <_printf_float+0x2dc>
 8005e14:	4613      	mov	r3, r2
 8005e16:	4659      	mov	r1, fp
 8005e18:	463a      	mov	r2, r7
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b0      	blx	r6
 8005e1e:	3001      	adds	r0, #1
 8005e20:	f43f aee9 	beq.w	8005bf6 <_printf_float+0xae>
 8005e24:	f104 031a 	add.w	r3, r4, #26
 8005e28:	f04f 0a00 	mov.w	sl, #0
 8005e2c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e32:	e015      	b.n	8005e60 <_printf_float+0x318>
 8005e34:	7fefffff 	.word	0x7fefffff
 8005e38:	080083c0 	.word	0x080083c0
 8005e3c:	080083bc 	.word	0x080083bc
 8005e40:	080083c8 	.word	0x080083c8
 8005e44:	080083c4 	.word	0x080083c4
 8005e48:	080083cc 	.word	0x080083cc
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e50:	4659      	mov	r1, fp
 8005e52:	4628      	mov	r0, r5
 8005e54:	47b0      	blx	r6
 8005e56:	3001      	adds	r0, #1
 8005e58:	f43f aecd 	beq.w	8005bf6 <_printf_float+0xae>
 8005e5c:	f10a 0a01 	add.w	sl, sl, #1
 8005e60:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005e64:	eba9 0308 	sub.w	r3, r9, r8
 8005e68:	4553      	cmp	r3, sl
 8005e6a:	dcef      	bgt.n	8005e4c <_printf_float+0x304>
 8005e6c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e70:	429a      	cmp	r2, r3
 8005e72:	444f      	add	r7, r9
 8005e74:	db14      	blt.n	8005ea0 <_printf_float+0x358>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	07da      	lsls	r2, r3, #31
 8005e7a:	d411      	bmi.n	8005ea0 <_printf_float+0x358>
 8005e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e80:	eba3 0209 	sub.w	r2, r3, r9
 8005e84:	eba3 0901 	sub.w	r9, r3, r1
 8005e88:	4591      	cmp	r9, r2
 8005e8a:	bfa8      	it	ge
 8005e8c:	4691      	movge	r9, r2
 8005e8e:	f1b9 0f00 	cmp.w	r9, #0
 8005e92:	dc0d      	bgt.n	8005eb0 <_printf_float+0x368>
 8005e94:	2700      	movs	r7, #0
 8005e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e9a:	f104 081a 	add.w	r8, r4, #26
 8005e9e:	e018      	b.n	8005ed2 <_printf_float+0x38a>
 8005ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b0      	blx	r6
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d1e6      	bne.n	8005e7c <_printf_float+0x334>
 8005eae:	e6a2      	b.n	8005bf6 <_printf_float+0xae>
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	463a      	mov	r2, r7
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b0      	blx	r6
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d1ea      	bne.n	8005e94 <_printf_float+0x34c>
 8005ebe:	e69a      	b.n	8005bf6 <_printf_float+0xae>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4642      	mov	r2, r8
 8005ec4:	4659      	mov	r1, fp
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b0      	blx	r6
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f ae93 	beq.w	8005bf6 <_printf_float+0xae>
 8005ed0:	3701      	adds	r7, #1
 8005ed2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	eba3 0309 	sub.w	r3, r3, r9
 8005edc:	42bb      	cmp	r3, r7
 8005ede:	dcef      	bgt.n	8005ec0 <_printf_float+0x378>
 8005ee0:	e74d      	b.n	8005d7e <_printf_float+0x236>
 8005ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ee4:	2a01      	cmp	r2, #1
 8005ee6:	dc01      	bgt.n	8005eec <_printf_float+0x3a4>
 8005ee8:	07db      	lsls	r3, r3, #31
 8005eea:	d538      	bpl.n	8005f5e <_printf_float+0x416>
 8005eec:	2301      	movs	r3, #1
 8005eee:	463a      	mov	r2, r7
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b0      	blx	r6
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	f43f ae7d 	beq.w	8005bf6 <_printf_float+0xae>
 8005efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f00:	4659      	mov	r1, fp
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b0      	blx	r6
 8005f06:	3001      	adds	r0, #1
 8005f08:	f107 0701 	add.w	r7, r7, #1
 8005f0c:	f43f ae73 	beq.w	8005bf6 <_printf_float+0xae>
 8005f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f16:	2200      	movs	r2, #0
 8005f18:	f103 38ff 	add.w	r8, r3, #4294967295
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f7fa fd43 	bl	80009a8 <__aeabi_dcmpeq>
 8005f22:	b9c0      	cbnz	r0, 8005f56 <_printf_float+0x40e>
 8005f24:	4643      	mov	r3, r8
 8005f26:	463a      	mov	r2, r7
 8005f28:	4659      	mov	r1, fp
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b0      	blx	r6
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d10d      	bne.n	8005f4e <_printf_float+0x406>
 8005f32:	e660      	b.n	8005bf6 <_printf_float+0xae>
 8005f34:	2301      	movs	r3, #1
 8005f36:	4642      	mov	r2, r8
 8005f38:	4659      	mov	r1, fp
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	47b0      	blx	r6
 8005f3e:	3001      	adds	r0, #1
 8005f40:	f43f ae59 	beq.w	8005bf6 <_printf_float+0xae>
 8005f44:	3701      	adds	r7, #1
 8005f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	42bb      	cmp	r3, r7
 8005f4c:	dcf2      	bgt.n	8005f34 <_printf_float+0x3ec>
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f54:	e6e4      	b.n	8005d20 <_printf_float+0x1d8>
 8005f56:	2700      	movs	r7, #0
 8005f58:	f104 081a 	add.w	r8, r4, #26
 8005f5c:	e7f3      	b.n	8005f46 <_printf_float+0x3fe>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e7e1      	b.n	8005f26 <_printf_float+0x3de>
 8005f62:	2301      	movs	r3, #1
 8005f64:	4642      	mov	r2, r8
 8005f66:	4659      	mov	r1, fp
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b0      	blx	r6
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	f43f ae42 	beq.w	8005bf6 <_printf_float+0xae>
 8005f72:	3701      	adds	r7, #1
 8005f74:	68e3      	ldr	r3, [r4, #12]
 8005f76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	42bb      	cmp	r3, r7
 8005f7c:	dcf1      	bgt.n	8005f62 <_printf_float+0x41a>
 8005f7e:	e702      	b.n	8005d86 <_printf_float+0x23e>
 8005f80:	2700      	movs	r7, #0
 8005f82:	f104 0819 	add.w	r8, r4, #25
 8005f86:	e7f5      	b.n	8005f74 <_printf_float+0x42c>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f43f ae94 	beq.w	8005cb6 <_printf_float+0x16e>
 8005f8e:	f04f 0c00 	mov.w	ip, #0
 8005f92:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005f96:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005f9a:	6022      	str	r2, [r4, #0]
 8005f9c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005fa0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	463a      	mov	r2, r7
 8005fa8:	464b      	mov	r3, r9
 8005faa:	4628      	mov	r0, r5
 8005fac:	f7ff fd3a 	bl	8005a24 <__cvt>
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	e64f      	b.n	8005c54 <_printf_float+0x10c>

08005fb4 <_printf_common>:
 8005fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	4691      	mov	r9, r2
 8005fba:	461f      	mov	r7, r3
 8005fbc:	688a      	ldr	r2, [r1, #8]
 8005fbe:	690b      	ldr	r3, [r1, #16]
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	bfb8      	it	lt
 8005fc6:	4613      	movlt	r3, r2
 8005fc8:	f8c9 3000 	str.w	r3, [r9]
 8005fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fd6:	b112      	cbz	r2, 8005fde <_printf_common+0x2a>
 8005fd8:	3301      	adds	r3, #1
 8005fda:	f8c9 3000 	str.w	r3, [r9]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005fe8:	3302      	addmi	r3, #2
 8005fea:	f8c9 3000 	strmi.w	r3, [r9]
 8005fee:	6825      	ldr	r5, [r4, #0]
 8005ff0:	f015 0506 	ands.w	r5, r5, #6
 8005ff4:	d107      	bne.n	8006006 <_printf_common+0x52>
 8005ff6:	f104 0a19 	add.w	sl, r4, #25
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	f8d9 2000 	ldr.w	r2, [r9]
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	42ab      	cmp	r3, r5
 8006004:	dc29      	bgt.n	800605a <_printf_common+0xa6>
 8006006:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800600a:	6822      	ldr	r2, [r4, #0]
 800600c:	3300      	adds	r3, #0
 800600e:	bf18      	it	ne
 8006010:	2301      	movne	r3, #1
 8006012:	0692      	lsls	r2, r2, #26
 8006014:	d42e      	bmi.n	8006074 <_printf_common+0xc0>
 8006016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800601a:	4639      	mov	r1, r7
 800601c:	4630      	mov	r0, r6
 800601e:	47c0      	blx	r8
 8006020:	3001      	adds	r0, #1
 8006022:	d021      	beq.n	8006068 <_printf_common+0xb4>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	68e5      	ldr	r5, [r4, #12]
 8006028:	f003 0306 	and.w	r3, r3, #6
 800602c:	2b04      	cmp	r3, #4
 800602e:	bf18      	it	ne
 8006030:	2500      	movne	r5, #0
 8006032:	f8d9 2000 	ldr.w	r2, [r9]
 8006036:	f04f 0900 	mov.w	r9, #0
 800603a:	bf08      	it	eq
 800603c:	1aad      	subeq	r5, r5, r2
 800603e:	68a3      	ldr	r3, [r4, #8]
 8006040:	6922      	ldr	r2, [r4, #16]
 8006042:	bf08      	it	eq
 8006044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006048:	4293      	cmp	r3, r2
 800604a:	bfc4      	itt	gt
 800604c:	1a9b      	subgt	r3, r3, r2
 800604e:	18ed      	addgt	r5, r5, r3
 8006050:	341a      	adds	r4, #26
 8006052:	454d      	cmp	r5, r9
 8006054:	d11a      	bne.n	800608c <_printf_common+0xd8>
 8006056:	2000      	movs	r0, #0
 8006058:	e008      	b.n	800606c <_printf_common+0xb8>
 800605a:	2301      	movs	r3, #1
 800605c:	4652      	mov	r2, sl
 800605e:	4639      	mov	r1, r7
 8006060:	4630      	mov	r0, r6
 8006062:	47c0      	blx	r8
 8006064:	3001      	adds	r0, #1
 8006066:	d103      	bne.n	8006070 <_printf_common+0xbc>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006070:	3501      	adds	r5, #1
 8006072:	e7c2      	b.n	8005ffa <_printf_common+0x46>
 8006074:	2030      	movs	r0, #48	; 0x30
 8006076:	18e1      	adds	r1, r4, r3
 8006078:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006082:	4422      	add	r2, r4
 8006084:	3302      	adds	r3, #2
 8006086:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800608a:	e7c4      	b.n	8006016 <_printf_common+0x62>
 800608c:	2301      	movs	r3, #1
 800608e:	4622      	mov	r2, r4
 8006090:	4639      	mov	r1, r7
 8006092:	4630      	mov	r0, r6
 8006094:	47c0      	blx	r8
 8006096:	3001      	adds	r0, #1
 8006098:	d0e6      	beq.n	8006068 <_printf_common+0xb4>
 800609a:	f109 0901 	add.w	r9, r9, #1
 800609e:	e7d8      	b.n	8006052 <_printf_common+0x9e>

080060a0 <_printf_i>:
 80060a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80060a8:	460c      	mov	r4, r1
 80060aa:	7e09      	ldrb	r1, [r1, #24]
 80060ac:	b085      	sub	sp, #20
 80060ae:	296e      	cmp	r1, #110	; 0x6e
 80060b0:	4617      	mov	r7, r2
 80060b2:	4606      	mov	r6, r0
 80060b4:	4698      	mov	r8, r3
 80060b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060b8:	f000 80b3 	beq.w	8006222 <_printf_i+0x182>
 80060bc:	d822      	bhi.n	8006104 <_printf_i+0x64>
 80060be:	2963      	cmp	r1, #99	; 0x63
 80060c0:	d036      	beq.n	8006130 <_printf_i+0x90>
 80060c2:	d80a      	bhi.n	80060da <_printf_i+0x3a>
 80060c4:	2900      	cmp	r1, #0
 80060c6:	f000 80b9 	beq.w	800623c <_printf_i+0x19c>
 80060ca:	2958      	cmp	r1, #88	; 0x58
 80060cc:	f000 8083 	beq.w	80061d6 <_printf_i+0x136>
 80060d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80060d8:	e032      	b.n	8006140 <_printf_i+0xa0>
 80060da:	2964      	cmp	r1, #100	; 0x64
 80060dc:	d001      	beq.n	80060e2 <_printf_i+0x42>
 80060de:	2969      	cmp	r1, #105	; 0x69
 80060e0:	d1f6      	bne.n	80060d0 <_printf_i+0x30>
 80060e2:	6820      	ldr	r0, [r4, #0]
 80060e4:	6813      	ldr	r3, [r2, #0]
 80060e6:	0605      	lsls	r5, r0, #24
 80060e8:	f103 0104 	add.w	r1, r3, #4
 80060ec:	d52a      	bpl.n	8006144 <_printf_i+0xa4>
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6011      	str	r1, [r2, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da03      	bge.n	80060fe <_printf_i+0x5e>
 80060f6:	222d      	movs	r2, #45	; 0x2d
 80060f8:	425b      	negs	r3, r3
 80060fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80060fe:	486f      	ldr	r0, [pc, #444]	; (80062bc <_printf_i+0x21c>)
 8006100:	220a      	movs	r2, #10
 8006102:	e039      	b.n	8006178 <_printf_i+0xd8>
 8006104:	2973      	cmp	r1, #115	; 0x73
 8006106:	f000 809d 	beq.w	8006244 <_printf_i+0x1a4>
 800610a:	d808      	bhi.n	800611e <_printf_i+0x7e>
 800610c:	296f      	cmp	r1, #111	; 0x6f
 800610e:	d020      	beq.n	8006152 <_printf_i+0xb2>
 8006110:	2970      	cmp	r1, #112	; 0x70
 8006112:	d1dd      	bne.n	80060d0 <_printf_i+0x30>
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	f043 0320 	orr.w	r3, r3, #32
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	e003      	b.n	8006126 <_printf_i+0x86>
 800611e:	2975      	cmp	r1, #117	; 0x75
 8006120:	d017      	beq.n	8006152 <_printf_i+0xb2>
 8006122:	2978      	cmp	r1, #120	; 0x78
 8006124:	d1d4      	bne.n	80060d0 <_printf_i+0x30>
 8006126:	2378      	movs	r3, #120	; 0x78
 8006128:	4865      	ldr	r0, [pc, #404]	; (80062c0 <_printf_i+0x220>)
 800612a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800612e:	e055      	b.n	80061dc <_printf_i+0x13c>
 8006130:	6813      	ldr	r3, [r2, #0]
 8006132:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006136:	1d19      	adds	r1, r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6011      	str	r1, [r2, #0]
 800613c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006140:	2301      	movs	r3, #1
 8006142:	e08c      	b.n	800625e <_printf_i+0x1be>
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f010 0f40 	tst.w	r0, #64	; 0x40
 800614a:	6011      	str	r1, [r2, #0]
 800614c:	bf18      	it	ne
 800614e:	b21b      	sxthne	r3, r3
 8006150:	e7cf      	b.n	80060f2 <_printf_i+0x52>
 8006152:	6813      	ldr	r3, [r2, #0]
 8006154:	6825      	ldr	r5, [r4, #0]
 8006156:	1d18      	adds	r0, r3, #4
 8006158:	6010      	str	r0, [r2, #0]
 800615a:	0628      	lsls	r0, r5, #24
 800615c:	d501      	bpl.n	8006162 <_printf_i+0xc2>
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	e002      	b.n	8006168 <_printf_i+0xc8>
 8006162:	0668      	lsls	r0, r5, #25
 8006164:	d5fb      	bpl.n	800615e <_printf_i+0xbe>
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	296f      	cmp	r1, #111	; 0x6f
 800616a:	bf14      	ite	ne
 800616c:	220a      	movne	r2, #10
 800616e:	2208      	moveq	r2, #8
 8006170:	4852      	ldr	r0, [pc, #328]	; (80062bc <_printf_i+0x21c>)
 8006172:	2100      	movs	r1, #0
 8006174:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006178:	6865      	ldr	r5, [r4, #4]
 800617a:	2d00      	cmp	r5, #0
 800617c:	60a5      	str	r5, [r4, #8]
 800617e:	f2c0 8095 	blt.w	80062ac <_printf_i+0x20c>
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	f021 0104 	bic.w	r1, r1, #4
 8006188:	6021      	str	r1, [r4, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d13d      	bne.n	800620a <_printf_i+0x16a>
 800618e:	2d00      	cmp	r5, #0
 8006190:	f040 808e 	bne.w	80062b0 <_printf_i+0x210>
 8006194:	4665      	mov	r5, ip
 8006196:	2a08      	cmp	r2, #8
 8006198:	d10b      	bne.n	80061b2 <_printf_i+0x112>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	07db      	lsls	r3, r3, #31
 800619e:	d508      	bpl.n	80061b2 <_printf_i+0x112>
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	bfde      	ittt	le
 80061a8:	2330      	movle	r3, #48	; 0x30
 80061aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061b2:	ebac 0305 	sub.w	r3, ip, r5
 80061b6:	6123      	str	r3, [r4, #16]
 80061b8:	f8cd 8000 	str.w	r8, [sp]
 80061bc:	463b      	mov	r3, r7
 80061be:	aa03      	add	r2, sp, #12
 80061c0:	4621      	mov	r1, r4
 80061c2:	4630      	mov	r0, r6
 80061c4:	f7ff fef6 	bl	8005fb4 <_printf_common>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d14d      	bne.n	8006268 <_printf_i+0x1c8>
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	b005      	add	sp, #20
 80061d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061d6:	4839      	ldr	r0, [pc, #228]	; (80062bc <_printf_i+0x21c>)
 80061d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80061dc:	6813      	ldr	r3, [r2, #0]
 80061de:	6821      	ldr	r1, [r4, #0]
 80061e0:	1d1d      	adds	r5, r3, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6015      	str	r5, [r2, #0]
 80061e6:	060a      	lsls	r2, r1, #24
 80061e8:	d50b      	bpl.n	8006202 <_printf_i+0x162>
 80061ea:	07ca      	lsls	r2, r1, #31
 80061ec:	bf44      	itt	mi
 80061ee:	f041 0120 	orrmi.w	r1, r1, #32
 80061f2:	6021      	strmi	r1, [r4, #0]
 80061f4:	b91b      	cbnz	r3, 80061fe <_printf_i+0x15e>
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	f022 0220 	bic.w	r2, r2, #32
 80061fc:	6022      	str	r2, [r4, #0]
 80061fe:	2210      	movs	r2, #16
 8006200:	e7b7      	b.n	8006172 <_printf_i+0xd2>
 8006202:	064d      	lsls	r5, r1, #25
 8006204:	bf48      	it	mi
 8006206:	b29b      	uxthmi	r3, r3
 8006208:	e7ef      	b.n	80061ea <_printf_i+0x14a>
 800620a:	4665      	mov	r5, ip
 800620c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006210:	fb02 3311 	mls	r3, r2, r1, r3
 8006214:	5cc3      	ldrb	r3, [r0, r3]
 8006216:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800621a:	460b      	mov	r3, r1
 800621c:	2900      	cmp	r1, #0
 800621e:	d1f5      	bne.n	800620c <_printf_i+0x16c>
 8006220:	e7b9      	b.n	8006196 <_printf_i+0xf6>
 8006222:	6813      	ldr	r3, [r2, #0]
 8006224:	6825      	ldr	r5, [r4, #0]
 8006226:	1d18      	adds	r0, r3, #4
 8006228:	6961      	ldr	r1, [r4, #20]
 800622a:	6010      	str	r0, [r2, #0]
 800622c:	0628      	lsls	r0, r5, #24
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	d501      	bpl.n	8006236 <_printf_i+0x196>
 8006232:	6019      	str	r1, [r3, #0]
 8006234:	e002      	b.n	800623c <_printf_i+0x19c>
 8006236:	066a      	lsls	r2, r5, #25
 8006238:	d5fb      	bpl.n	8006232 <_printf_i+0x192>
 800623a:	8019      	strh	r1, [r3, #0]
 800623c:	2300      	movs	r3, #0
 800623e:	4665      	mov	r5, ip
 8006240:	6123      	str	r3, [r4, #16]
 8006242:	e7b9      	b.n	80061b8 <_printf_i+0x118>
 8006244:	6813      	ldr	r3, [r2, #0]
 8006246:	1d19      	adds	r1, r3, #4
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	681d      	ldr	r5, [r3, #0]
 800624c:	6862      	ldr	r2, [r4, #4]
 800624e:	2100      	movs	r1, #0
 8006250:	4628      	mov	r0, r5
 8006252:	f001 fa59 	bl	8007708 <memchr>
 8006256:	b108      	cbz	r0, 800625c <_printf_i+0x1bc>
 8006258:	1b40      	subs	r0, r0, r5
 800625a:	6060      	str	r0, [r4, #4]
 800625c:	6863      	ldr	r3, [r4, #4]
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	2300      	movs	r3, #0
 8006262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006266:	e7a7      	b.n	80061b8 <_printf_i+0x118>
 8006268:	6923      	ldr	r3, [r4, #16]
 800626a:	462a      	mov	r2, r5
 800626c:	4639      	mov	r1, r7
 800626e:	4630      	mov	r0, r6
 8006270:	47c0      	blx	r8
 8006272:	3001      	adds	r0, #1
 8006274:	d0aa      	beq.n	80061cc <_printf_i+0x12c>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	079b      	lsls	r3, r3, #30
 800627a:	d413      	bmi.n	80062a4 <_printf_i+0x204>
 800627c:	68e0      	ldr	r0, [r4, #12]
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	4298      	cmp	r0, r3
 8006282:	bfb8      	it	lt
 8006284:	4618      	movlt	r0, r3
 8006286:	e7a3      	b.n	80061d0 <_printf_i+0x130>
 8006288:	2301      	movs	r3, #1
 800628a:	464a      	mov	r2, r9
 800628c:	4639      	mov	r1, r7
 800628e:	4630      	mov	r0, r6
 8006290:	47c0      	blx	r8
 8006292:	3001      	adds	r0, #1
 8006294:	d09a      	beq.n	80061cc <_printf_i+0x12c>
 8006296:	3501      	adds	r5, #1
 8006298:	68e3      	ldr	r3, [r4, #12]
 800629a:	9a03      	ldr	r2, [sp, #12]
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	42ab      	cmp	r3, r5
 80062a0:	dcf2      	bgt.n	8006288 <_printf_i+0x1e8>
 80062a2:	e7eb      	b.n	800627c <_printf_i+0x1dc>
 80062a4:	2500      	movs	r5, #0
 80062a6:	f104 0919 	add.w	r9, r4, #25
 80062aa:	e7f5      	b.n	8006298 <_printf_i+0x1f8>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ac      	bne.n	800620a <_printf_i+0x16a>
 80062b0:	7803      	ldrb	r3, [r0, #0]
 80062b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062ba:	e76c      	b.n	8006196 <_printf_i+0xf6>
 80062bc:	080083ce 	.word	0x080083ce
 80062c0:	080083df 	.word	0x080083df

080062c4 <iprintf>:
 80062c4:	b40f      	push	{r0, r1, r2, r3}
 80062c6:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <iprintf+0x2c>)
 80062c8:	b513      	push	{r0, r1, r4, lr}
 80062ca:	681c      	ldr	r4, [r3, #0]
 80062cc:	b124      	cbz	r4, 80062d8 <iprintf+0x14>
 80062ce:	69a3      	ldr	r3, [r4, #24]
 80062d0:	b913      	cbnz	r3, 80062d8 <iprintf+0x14>
 80062d2:	4620      	mov	r0, r4
 80062d4:	f001 f914 	bl	8007500 <__sinit>
 80062d8:	ab05      	add	r3, sp, #20
 80062da:	9a04      	ldr	r2, [sp, #16]
 80062dc:	68a1      	ldr	r1, [r4, #8]
 80062de:	4620      	mov	r0, r4
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	f001 fde3 	bl	8007eac <_vfiprintf_r>
 80062e6:	b002      	add	sp, #8
 80062e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ec:	b004      	add	sp, #16
 80062ee:	4770      	bx	lr
 80062f0:	20000018 	.word	0x20000018

080062f4 <_puts_r>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	460e      	mov	r6, r1
 80062f8:	4605      	mov	r5, r0
 80062fa:	b118      	cbz	r0, 8006304 <_puts_r+0x10>
 80062fc:	6983      	ldr	r3, [r0, #24]
 80062fe:	b90b      	cbnz	r3, 8006304 <_puts_r+0x10>
 8006300:	f001 f8fe 	bl	8007500 <__sinit>
 8006304:	69ab      	ldr	r3, [r5, #24]
 8006306:	68ac      	ldr	r4, [r5, #8]
 8006308:	b913      	cbnz	r3, 8006310 <_puts_r+0x1c>
 800630a:	4628      	mov	r0, r5
 800630c:	f001 f8f8 	bl	8007500 <__sinit>
 8006310:	4b23      	ldr	r3, [pc, #140]	; (80063a0 <_puts_r+0xac>)
 8006312:	429c      	cmp	r4, r3
 8006314:	d117      	bne.n	8006346 <_puts_r+0x52>
 8006316:	686c      	ldr	r4, [r5, #4]
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	071b      	lsls	r3, r3, #28
 800631c:	d51d      	bpl.n	800635a <_puts_r+0x66>
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	b1db      	cbz	r3, 800635a <_puts_r+0x66>
 8006322:	3e01      	subs	r6, #1
 8006324:	68a3      	ldr	r3, [r4, #8]
 8006326:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800632a:	3b01      	subs	r3, #1
 800632c:	60a3      	str	r3, [r4, #8]
 800632e:	b9e9      	cbnz	r1, 800636c <_puts_r+0x78>
 8006330:	2b00      	cmp	r3, #0
 8006332:	da2e      	bge.n	8006392 <_puts_r+0x9e>
 8006334:	4622      	mov	r2, r4
 8006336:	210a      	movs	r1, #10
 8006338:	4628      	mov	r0, r5
 800633a:	f000 f8ed 	bl	8006518 <__swbuf_r>
 800633e:	3001      	adds	r0, #1
 8006340:	d011      	beq.n	8006366 <_puts_r+0x72>
 8006342:	200a      	movs	r0, #10
 8006344:	e011      	b.n	800636a <_puts_r+0x76>
 8006346:	4b17      	ldr	r3, [pc, #92]	; (80063a4 <_puts_r+0xb0>)
 8006348:	429c      	cmp	r4, r3
 800634a:	d101      	bne.n	8006350 <_puts_r+0x5c>
 800634c:	68ac      	ldr	r4, [r5, #8]
 800634e:	e7e3      	b.n	8006318 <_puts_r+0x24>
 8006350:	4b15      	ldr	r3, [pc, #84]	; (80063a8 <_puts_r+0xb4>)
 8006352:	429c      	cmp	r4, r3
 8006354:	bf08      	it	eq
 8006356:	68ec      	ldreq	r4, [r5, #12]
 8006358:	e7de      	b.n	8006318 <_puts_r+0x24>
 800635a:	4621      	mov	r1, r4
 800635c:	4628      	mov	r0, r5
 800635e:	f000 f92d 	bl	80065bc <__swsetup_r>
 8006362:	2800      	cmp	r0, #0
 8006364:	d0dd      	beq.n	8006322 <_puts_r+0x2e>
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	2b00      	cmp	r3, #0
 800636e:	da04      	bge.n	800637a <_puts_r+0x86>
 8006370:	69a2      	ldr	r2, [r4, #24]
 8006372:	429a      	cmp	r2, r3
 8006374:	dc06      	bgt.n	8006384 <_puts_r+0x90>
 8006376:	290a      	cmp	r1, #10
 8006378:	d004      	beq.n	8006384 <_puts_r+0x90>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	6022      	str	r2, [r4, #0]
 8006380:	7019      	strb	r1, [r3, #0]
 8006382:	e7cf      	b.n	8006324 <_puts_r+0x30>
 8006384:	4622      	mov	r2, r4
 8006386:	4628      	mov	r0, r5
 8006388:	f000 f8c6 	bl	8006518 <__swbuf_r>
 800638c:	3001      	adds	r0, #1
 800638e:	d1c9      	bne.n	8006324 <_puts_r+0x30>
 8006390:	e7e9      	b.n	8006366 <_puts_r+0x72>
 8006392:	200a      	movs	r0, #10
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	6022      	str	r2, [r4, #0]
 800639a:	7018      	strb	r0, [r3, #0]
 800639c:	e7e5      	b.n	800636a <_puts_r+0x76>
 800639e:	bf00      	nop
 80063a0:	08008420 	.word	0x08008420
 80063a4:	08008440 	.word	0x08008440
 80063a8:	08008400 	.word	0x08008400

080063ac <puts>:
 80063ac:	4b02      	ldr	r3, [pc, #8]	; (80063b8 <puts+0xc>)
 80063ae:	4601      	mov	r1, r0
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	f7ff bf9f 	b.w	80062f4 <_puts_r>
 80063b6:	bf00      	nop
 80063b8:	20000018 	.word	0x20000018

080063bc <setvbuf>:
 80063bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	461d      	mov	r5, r3
 80063c2:	4b51      	ldr	r3, [pc, #324]	; (8006508 <setvbuf+0x14c>)
 80063c4:	4604      	mov	r4, r0
 80063c6:	681e      	ldr	r6, [r3, #0]
 80063c8:	460f      	mov	r7, r1
 80063ca:	4690      	mov	r8, r2
 80063cc:	b126      	cbz	r6, 80063d8 <setvbuf+0x1c>
 80063ce:	69b3      	ldr	r3, [r6, #24]
 80063d0:	b913      	cbnz	r3, 80063d8 <setvbuf+0x1c>
 80063d2:	4630      	mov	r0, r6
 80063d4:	f001 f894 	bl	8007500 <__sinit>
 80063d8:	4b4c      	ldr	r3, [pc, #304]	; (800650c <setvbuf+0x150>)
 80063da:	429c      	cmp	r4, r3
 80063dc:	d152      	bne.n	8006484 <setvbuf+0xc8>
 80063de:	6874      	ldr	r4, [r6, #4]
 80063e0:	f1b8 0f02 	cmp.w	r8, #2
 80063e4:	d006      	beq.n	80063f4 <setvbuf+0x38>
 80063e6:	f1b8 0f01 	cmp.w	r8, #1
 80063ea:	f200 8089 	bhi.w	8006500 <setvbuf+0x144>
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	f2c0 8086 	blt.w	8006500 <setvbuf+0x144>
 80063f4:	4621      	mov	r1, r4
 80063f6:	4630      	mov	r0, r6
 80063f8:	f001 f818 	bl	800742c <_fflush_r>
 80063fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063fe:	b141      	cbz	r1, 8006412 <setvbuf+0x56>
 8006400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006404:	4299      	cmp	r1, r3
 8006406:	d002      	beq.n	800640e <setvbuf+0x52>
 8006408:	4630      	mov	r0, r6
 800640a:	f001 fc81 	bl	8007d10 <_free_r>
 800640e:	2300      	movs	r3, #0
 8006410:	6363      	str	r3, [r4, #52]	; 0x34
 8006412:	2300      	movs	r3, #0
 8006414:	61a3      	str	r3, [r4, #24]
 8006416:	6063      	str	r3, [r4, #4]
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	061b      	lsls	r3, r3, #24
 800641c:	d503      	bpl.n	8006426 <setvbuf+0x6a>
 800641e:	6921      	ldr	r1, [r4, #16]
 8006420:	4630      	mov	r0, r6
 8006422:	f001 fc75 	bl	8007d10 <_free_r>
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	f1b8 0f02 	cmp.w	r8, #2
 800642c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006430:	f023 0303 	bic.w	r3, r3, #3
 8006434:	81a3      	strh	r3, [r4, #12]
 8006436:	d05d      	beq.n	80064f4 <setvbuf+0x138>
 8006438:	ab01      	add	r3, sp, #4
 800643a:	466a      	mov	r2, sp
 800643c:	4621      	mov	r1, r4
 800643e:	4630      	mov	r0, r6
 8006440:	f001 f8f6 	bl	8007630 <__swhatbuf_r>
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	4318      	orrs	r0, r3
 8006448:	81a0      	strh	r0, [r4, #12]
 800644a:	bb2d      	cbnz	r5, 8006498 <setvbuf+0xdc>
 800644c:	9d00      	ldr	r5, [sp, #0]
 800644e:	4628      	mov	r0, r5
 8006450:	f001 f952 	bl	80076f8 <malloc>
 8006454:	4607      	mov	r7, r0
 8006456:	2800      	cmp	r0, #0
 8006458:	d14e      	bne.n	80064f8 <setvbuf+0x13c>
 800645a:	f8dd 9000 	ldr.w	r9, [sp]
 800645e:	45a9      	cmp	r9, r5
 8006460:	d13c      	bne.n	80064dc <setvbuf+0x120>
 8006462:	f04f 30ff 	mov.w	r0, #4294967295
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	f043 0302 	orr.w	r3, r3, #2
 800646c:	81a3      	strh	r3, [r4, #12]
 800646e:	2300      	movs	r3, #0
 8006470:	60a3      	str	r3, [r4, #8]
 8006472:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	2301      	movs	r3, #1
 800647c:	6163      	str	r3, [r4, #20]
 800647e:	b003      	add	sp, #12
 8006480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006484:	4b22      	ldr	r3, [pc, #136]	; (8006510 <setvbuf+0x154>)
 8006486:	429c      	cmp	r4, r3
 8006488:	d101      	bne.n	800648e <setvbuf+0xd2>
 800648a:	68b4      	ldr	r4, [r6, #8]
 800648c:	e7a8      	b.n	80063e0 <setvbuf+0x24>
 800648e:	4b21      	ldr	r3, [pc, #132]	; (8006514 <setvbuf+0x158>)
 8006490:	429c      	cmp	r4, r3
 8006492:	bf08      	it	eq
 8006494:	68f4      	ldreq	r4, [r6, #12]
 8006496:	e7a3      	b.n	80063e0 <setvbuf+0x24>
 8006498:	2f00      	cmp	r7, #0
 800649a:	d0d8      	beq.n	800644e <setvbuf+0x92>
 800649c:	69b3      	ldr	r3, [r6, #24]
 800649e:	b913      	cbnz	r3, 80064a6 <setvbuf+0xea>
 80064a0:	4630      	mov	r0, r6
 80064a2:	f001 f82d 	bl	8007500 <__sinit>
 80064a6:	f1b8 0f01 	cmp.w	r8, #1
 80064aa:	bf08      	it	eq
 80064ac:	89a3      	ldrheq	r3, [r4, #12]
 80064ae:	6027      	str	r7, [r4, #0]
 80064b0:	bf04      	itt	eq
 80064b2:	f043 0301 	orreq.w	r3, r3, #1
 80064b6:	81a3      	strheq	r3, [r4, #12]
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80064be:	f013 0008 	ands.w	r0, r3, #8
 80064c2:	d01b      	beq.n	80064fc <setvbuf+0x140>
 80064c4:	f013 0001 	ands.w	r0, r3, #1
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	bf1f      	itttt	ne
 80064ce:	426d      	negne	r5, r5
 80064d0:	60a3      	strne	r3, [r4, #8]
 80064d2:	61a5      	strne	r5, [r4, #24]
 80064d4:	4618      	movne	r0, r3
 80064d6:	bf08      	it	eq
 80064d8:	60a5      	streq	r5, [r4, #8]
 80064da:	e7d0      	b.n	800647e <setvbuf+0xc2>
 80064dc:	4648      	mov	r0, r9
 80064de:	f001 f90b 	bl	80076f8 <malloc>
 80064e2:	4607      	mov	r7, r0
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d0bc      	beq.n	8006462 <setvbuf+0xa6>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	464d      	mov	r5, r9
 80064ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	e7d3      	b.n	800649c <setvbuf+0xe0>
 80064f4:	2000      	movs	r0, #0
 80064f6:	e7b6      	b.n	8006466 <setvbuf+0xaa>
 80064f8:	46a9      	mov	r9, r5
 80064fa:	e7f5      	b.n	80064e8 <setvbuf+0x12c>
 80064fc:	60a0      	str	r0, [r4, #8]
 80064fe:	e7be      	b.n	800647e <setvbuf+0xc2>
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	e7bb      	b.n	800647e <setvbuf+0xc2>
 8006506:	bf00      	nop
 8006508:	20000018 	.word	0x20000018
 800650c:	08008420 	.word	0x08008420
 8006510:	08008440 	.word	0x08008440
 8006514:	08008400 	.word	0x08008400

08006518 <__swbuf_r>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	460e      	mov	r6, r1
 800651c:	4614      	mov	r4, r2
 800651e:	4605      	mov	r5, r0
 8006520:	b118      	cbz	r0, 800652a <__swbuf_r+0x12>
 8006522:	6983      	ldr	r3, [r0, #24]
 8006524:	b90b      	cbnz	r3, 800652a <__swbuf_r+0x12>
 8006526:	f000 ffeb 	bl	8007500 <__sinit>
 800652a:	4b21      	ldr	r3, [pc, #132]	; (80065b0 <__swbuf_r+0x98>)
 800652c:	429c      	cmp	r4, r3
 800652e:	d12a      	bne.n	8006586 <__swbuf_r+0x6e>
 8006530:	686c      	ldr	r4, [r5, #4]
 8006532:	69a3      	ldr	r3, [r4, #24]
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	071a      	lsls	r2, r3, #28
 800653a:	d52e      	bpl.n	800659a <__swbuf_r+0x82>
 800653c:	6923      	ldr	r3, [r4, #16]
 800653e:	b363      	cbz	r3, 800659a <__swbuf_r+0x82>
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	b2f6      	uxtb	r6, r6
 8006546:	1ac0      	subs	r0, r0, r3
 8006548:	6963      	ldr	r3, [r4, #20]
 800654a:	4637      	mov	r7, r6
 800654c:	4283      	cmp	r3, r0
 800654e:	dc04      	bgt.n	800655a <__swbuf_r+0x42>
 8006550:	4621      	mov	r1, r4
 8006552:	4628      	mov	r0, r5
 8006554:	f000 ff6a 	bl	800742c <_fflush_r>
 8006558:	bb28      	cbnz	r0, 80065a6 <__swbuf_r+0x8e>
 800655a:	68a3      	ldr	r3, [r4, #8]
 800655c:	3001      	adds	r0, #1
 800655e:	3b01      	subs	r3, #1
 8006560:	60a3      	str	r3, [r4, #8]
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	6022      	str	r2, [r4, #0]
 8006568:	701e      	strb	r6, [r3, #0]
 800656a:	6963      	ldr	r3, [r4, #20]
 800656c:	4283      	cmp	r3, r0
 800656e:	d004      	beq.n	800657a <__swbuf_r+0x62>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	07db      	lsls	r3, r3, #31
 8006574:	d519      	bpl.n	80065aa <__swbuf_r+0x92>
 8006576:	2e0a      	cmp	r6, #10
 8006578:	d117      	bne.n	80065aa <__swbuf_r+0x92>
 800657a:	4621      	mov	r1, r4
 800657c:	4628      	mov	r0, r5
 800657e:	f000 ff55 	bl	800742c <_fflush_r>
 8006582:	b190      	cbz	r0, 80065aa <__swbuf_r+0x92>
 8006584:	e00f      	b.n	80065a6 <__swbuf_r+0x8e>
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <__swbuf_r+0x9c>)
 8006588:	429c      	cmp	r4, r3
 800658a:	d101      	bne.n	8006590 <__swbuf_r+0x78>
 800658c:	68ac      	ldr	r4, [r5, #8]
 800658e:	e7d0      	b.n	8006532 <__swbuf_r+0x1a>
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <__swbuf_r+0xa0>)
 8006592:	429c      	cmp	r4, r3
 8006594:	bf08      	it	eq
 8006596:	68ec      	ldreq	r4, [r5, #12]
 8006598:	e7cb      	b.n	8006532 <__swbuf_r+0x1a>
 800659a:	4621      	mov	r1, r4
 800659c:	4628      	mov	r0, r5
 800659e:	f000 f80d 	bl	80065bc <__swsetup_r>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0cc      	beq.n	8006540 <__swbuf_r+0x28>
 80065a6:	f04f 37ff 	mov.w	r7, #4294967295
 80065aa:	4638      	mov	r0, r7
 80065ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ae:	bf00      	nop
 80065b0:	08008420 	.word	0x08008420
 80065b4:	08008440 	.word	0x08008440
 80065b8:	08008400 	.word	0x08008400

080065bc <__swsetup_r>:
 80065bc:	4b32      	ldr	r3, [pc, #200]	; (8006688 <__swsetup_r+0xcc>)
 80065be:	b570      	push	{r4, r5, r6, lr}
 80065c0:	681d      	ldr	r5, [r3, #0]
 80065c2:	4606      	mov	r6, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	b125      	cbz	r5, 80065d2 <__swsetup_r+0x16>
 80065c8:	69ab      	ldr	r3, [r5, #24]
 80065ca:	b913      	cbnz	r3, 80065d2 <__swsetup_r+0x16>
 80065cc:	4628      	mov	r0, r5
 80065ce:	f000 ff97 	bl	8007500 <__sinit>
 80065d2:	4b2e      	ldr	r3, [pc, #184]	; (800668c <__swsetup_r+0xd0>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	d10f      	bne.n	80065f8 <__swsetup_r+0x3c>
 80065d8:	686c      	ldr	r4, [r5, #4]
 80065da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065de:	b29a      	uxth	r2, r3
 80065e0:	0715      	lsls	r5, r2, #28
 80065e2:	d42c      	bmi.n	800663e <__swsetup_r+0x82>
 80065e4:	06d0      	lsls	r0, r2, #27
 80065e6:	d411      	bmi.n	800660c <__swsetup_r+0x50>
 80065e8:	2209      	movs	r2, #9
 80065ea:	6032      	str	r2, [r6, #0]
 80065ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	f04f 30ff 	mov.w	r0, #4294967295
 80065f6:	e03e      	b.n	8006676 <__swsetup_r+0xba>
 80065f8:	4b25      	ldr	r3, [pc, #148]	; (8006690 <__swsetup_r+0xd4>)
 80065fa:	429c      	cmp	r4, r3
 80065fc:	d101      	bne.n	8006602 <__swsetup_r+0x46>
 80065fe:	68ac      	ldr	r4, [r5, #8]
 8006600:	e7eb      	b.n	80065da <__swsetup_r+0x1e>
 8006602:	4b24      	ldr	r3, [pc, #144]	; (8006694 <__swsetup_r+0xd8>)
 8006604:	429c      	cmp	r4, r3
 8006606:	bf08      	it	eq
 8006608:	68ec      	ldreq	r4, [r5, #12]
 800660a:	e7e6      	b.n	80065da <__swsetup_r+0x1e>
 800660c:	0751      	lsls	r1, r2, #29
 800660e:	d512      	bpl.n	8006636 <__swsetup_r+0x7a>
 8006610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006612:	b141      	cbz	r1, 8006626 <__swsetup_r+0x6a>
 8006614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006618:	4299      	cmp	r1, r3
 800661a:	d002      	beq.n	8006622 <__swsetup_r+0x66>
 800661c:	4630      	mov	r0, r6
 800661e:	f001 fb77 	bl	8007d10 <_free_r>
 8006622:	2300      	movs	r3, #0
 8006624:	6363      	str	r3, [r4, #52]	; 0x34
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800662c:	81a3      	strh	r3, [r4, #12]
 800662e:	2300      	movs	r3, #0
 8006630:	6063      	str	r3, [r4, #4]
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f043 0308 	orr.w	r3, r3, #8
 800663c:	81a3      	strh	r3, [r4, #12]
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	b94b      	cbnz	r3, 8006656 <__swsetup_r+0x9a>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800664c:	d003      	beq.n	8006656 <__swsetup_r+0x9a>
 800664e:	4621      	mov	r1, r4
 8006650:	4630      	mov	r0, r6
 8006652:	f001 f811 	bl	8007678 <__smakebuf_r>
 8006656:	89a2      	ldrh	r2, [r4, #12]
 8006658:	f012 0301 	ands.w	r3, r2, #1
 800665c:	d00c      	beq.n	8006678 <__swsetup_r+0xbc>
 800665e:	2300      	movs	r3, #0
 8006660:	60a3      	str	r3, [r4, #8]
 8006662:	6963      	ldr	r3, [r4, #20]
 8006664:	425b      	negs	r3, r3
 8006666:	61a3      	str	r3, [r4, #24]
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	b953      	cbnz	r3, 8006682 <__swsetup_r+0xc6>
 800666c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006670:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006674:	d1ba      	bne.n	80065ec <__swsetup_r+0x30>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	0792      	lsls	r2, r2, #30
 800667a:	bf58      	it	pl
 800667c:	6963      	ldrpl	r3, [r4, #20]
 800667e:	60a3      	str	r3, [r4, #8]
 8006680:	e7f2      	b.n	8006668 <__swsetup_r+0xac>
 8006682:	2000      	movs	r0, #0
 8006684:	e7f7      	b.n	8006676 <__swsetup_r+0xba>
 8006686:	bf00      	nop
 8006688:	20000018 	.word	0x20000018
 800668c:	08008420 	.word	0x08008420
 8006690:	08008440 	.word	0x08008440
 8006694:	08008400 	.word	0x08008400

08006698 <quorem>:
 8006698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	6903      	ldr	r3, [r0, #16]
 800669e:	690c      	ldr	r4, [r1, #16]
 80066a0:	4680      	mov	r8, r0
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	f2c0 8084 	blt.w	80067b0 <quorem+0x118>
 80066a8:	3c01      	subs	r4, #1
 80066aa:	f101 0714 	add.w	r7, r1, #20
 80066ae:	f100 0614 	add.w	r6, r0, #20
 80066b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80066b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80066ba:	3501      	adds	r5, #1
 80066bc:	fbb0 f5f5 	udiv	r5, r0, r5
 80066c0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80066c4:	eb06 030c 	add.w	r3, r6, ip
 80066c8:	eb07 090c 	add.w	r9, r7, ip
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	b39d      	cbz	r5, 8006738 <quorem+0xa0>
 80066d0:	f04f 0a00 	mov.w	sl, #0
 80066d4:	4638      	mov	r0, r7
 80066d6:	46b6      	mov	lr, r6
 80066d8:	46d3      	mov	fp, sl
 80066da:	f850 2b04 	ldr.w	r2, [r0], #4
 80066de:	b293      	uxth	r3, r2
 80066e0:	fb05 a303 	mla	r3, r5, r3, sl
 80066e4:	0c12      	lsrs	r2, r2, #16
 80066e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066ea:	fb05 a202 	mla	r2, r5, r2, sl
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	ebab 0303 	sub.w	r3, fp, r3
 80066f4:	f8de b000 	ldr.w	fp, [lr]
 80066f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80066fc:	fa1f fb8b 	uxth.w	fp, fp
 8006700:	445b      	add	r3, fp
 8006702:	fa1f fb82 	uxth.w	fp, r2
 8006706:	f8de 2000 	ldr.w	r2, [lr]
 800670a:	4581      	cmp	r9, r0
 800670c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006714:	b29b      	uxth	r3, r3
 8006716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800671a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800671e:	f84e 3b04 	str.w	r3, [lr], #4
 8006722:	d2da      	bcs.n	80066da <quorem+0x42>
 8006724:	f856 300c 	ldr.w	r3, [r6, ip]
 8006728:	b933      	cbnz	r3, 8006738 <quorem+0xa0>
 800672a:	9b01      	ldr	r3, [sp, #4]
 800672c:	3b04      	subs	r3, #4
 800672e:	429e      	cmp	r6, r3
 8006730:	461a      	mov	r2, r3
 8006732:	d331      	bcc.n	8006798 <quorem+0x100>
 8006734:	f8c8 4010 	str.w	r4, [r8, #16]
 8006738:	4640      	mov	r0, r8
 800673a:	f001 fa13 	bl	8007b64 <__mcmp>
 800673e:	2800      	cmp	r0, #0
 8006740:	db26      	blt.n	8006790 <quorem+0xf8>
 8006742:	4630      	mov	r0, r6
 8006744:	f04f 0c00 	mov.w	ip, #0
 8006748:	3501      	adds	r5, #1
 800674a:	f857 1b04 	ldr.w	r1, [r7], #4
 800674e:	f8d0 e000 	ldr.w	lr, [r0]
 8006752:	b28b      	uxth	r3, r1
 8006754:	ebac 0303 	sub.w	r3, ip, r3
 8006758:	fa1f f28e 	uxth.w	r2, lr
 800675c:	4413      	add	r3, r2
 800675e:	0c0a      	lsrs	r2, r1, #16
 8006760:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006768:	b29b      	uxth	r3, r3
 800676a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800676e:	45b9      	cmp	r9, r7
 8006770:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006774:	f840 3b04 	str.w	r3, [r0], #4
 8006778:	d2e7      	bcs.n	800674a <quorem+0xb2>
 800677a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800677e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006782:	b92a      	cbnz	r2, 8006790 <quorem+0xf8>
 8006784:	3b04      	subs	r3, #4
 8006786:	429e      	cmp	r6, r3
 8006788:	461a      	mov	r2, r3
 800678a:	d30b      	bcc.n	80067a4 <quorem+0x10c>
 800678c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006790:	4628      	mov	r0, r5
 8006792:	b003      	add	sp, #12
 8006794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	3b04      	subs	r3, #4
 800679c:	2a00      	cmp	r2, #0
 800679e:	d1c9      	bne.n	8006734 <quorem+0x9c>
 80067a0:	3c01      	subs	r4, #1
 80067a2:	e7c4      	b.n	800672e <quorem+0x96>
 80067a4:	6812      	ldr	r2, [r2, #0]
 80067a6:	3b04      	subs	r3, #4
 80067a8:	2a00      	cmp	r2, #0
 80067aa:	d1ef      	bne.n	800678c <quorem+0xf4>
 80067ac:	3c01      	subs	r4, #1
 80067ae:	e7ea      	b.n	8006786 <quorem+0xee>
 80067b0:	2000      	movs	r0, #0
 80067b2:	e7ee      	b.n	8006792 <quorem+0xfa>
 80067b4:	0000      	movs	r0, r0
	...

080067b8 <_dtoa_r>:
 80067b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067bc:	4616      	mov	r6, r2
 80067be:	461f      	mov	r7, r3
 80067c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067c2:	b095      	sub	sp, #84	; 0x54
 80067c4:	4604      	mov	r4, r0
 80067c6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80067ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80067ce:	b93d      	cbnz	r5, 80067e0 <_dtoa_r+0x28>
 80067d0:	2010      	movs	r0, #16
 80067d2:	f000 ff91 	bl	80076f8 <malloc>
 80067d6:	6260      	str	r0, [r4, #36]	; 0x24
 80067d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067dc:	6005      	str	r5, [r0, #0]
 80067de:	60c5      	str	r5, [r0, #12]
 80067e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067e2:	6819      	ldr	r1, [r3, #0]
 80067e4:	b151      	cbz	r1, 80067fc <_dtoa_r+0x44>
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	2301      	movs	r3, #1
 80067ea:	4093      	lsls	r3, r2
 80067ec:	604a      	str	r2, [r1, #4]
 80067ee:	608b      	str	r3, [r1, #8]
 80067f0:	4620      	mov	r0, r4
 80067f2:	f000 ffd6 	bl	80077a2 <_Bfree>
 80067f6:	2200      	movs	r2, #0
 80067f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	1e3b      	subs	r3, r7, #0
 80067fe:	bfaf      	iteee	ge
 8006800:	2300      	movge	r3, #0
 8006802:	2201      	movlt	r2, #1
 8006804:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006808:	9303      	strlt	r3, [sp, #12]
 800680a:	bfac      	ite	ge
 800680c:	f8c8 3000 	strge.w	r3, [r8]
 8006810:	f8c8 2000 	strlt.w	r2, [r8]
 8006814:	4bae      	ldr	r3, [pc, #696]	; (8006ad0 <_dtoa_r+0x318>)
 8006816:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800681a:	ea33 0308 	bics.w	r3, r3, r8
 800681e:	d11b      	bne.n	8006858 <_dtoa_r+0xa0>
 8006820:	f242 730f 	movw	r3, #9999	; 0x270f
 8006824:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	9b02      	ldr	r3, [sp, #8]
 800682a:	b923      	cbnz	r3, 8006836 <_dtoa_r+0x7e>
 800682c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006830:	2800      	cmp	r0, #0
 8006832:	f000 8545 	beq.w	80072c0 <_dtoa_r+0xb08>
 8006836:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006838:	b953      	cbnz	r3, 8006850 <_dtoa_r+0x98>
 800683a:	4ba6      	ldr	r3, [pc, #664]	; (8006ad4 <_dtoa_r+0x31c>)
 800683c:	e021      	b.n	8006882 <_dtoa_r+0xca>
 800683e:	4ba6      	ldr	r3, [pc, #664]	; (8006ad8 <_dtoa_r+0x320>)
 8006840:	9306      	str	r3, [sp, #24]
 8006842:	3308      	adds	r3, #8
 8006844:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	9806      	ldr	r0, [sp, #24]
 800684a:	b015      	add	sp, #84	; 0x54
 800684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006850:	4ba0      	ldr	r3, [pc, #640]	; (8006ad4 <_dtoa_r+0x31c>)
 8006852:	9306      	str	r3, [sp, #24]
 8006854:	3303      	adds	r3, #3
 8006856:	e7f5      	b.n	8006844 <_dtoa_r+0x8c>
 8006858:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800685c:	2200      	movs	r2, #0
 800685e:	2300      	movs	r3, #0
 8006860:	4630      	mov	r0, r6
 8006862:	4639      	mov	r1, r7
 8006864:	f7fa f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 8006868:	4682      	mov	sl, r0
 800686a:	b160      	cbz	r0, 8006886 <_dtoa_r+0xce>
 800686c:	2301      	movs	r3, #1
 800686e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8520 	beq.w	80072ba <_dtoa_r+0xb02>
 800687a:	4b98      	ldr	r3, [pc, #608]	; (8006adc <_dtoa_r+0x324>)
 800687c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	3b01      	subs	r3, #1
 8006882:	9306      	str	r3, [sp, #24]
 8006884:	e7e0      	b.n	8006848 <_dtoa_r+0x90>
 8006886:	ab12      	add	r3, sp, #72	; 0x48
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	ab13      	add	r3, sp, #76	; 0x4c
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4632      	mov	r2, r6
 8006890:	463b      	mov	r3, r7
 8006892:	4620      	mov	r0, r4
 8006894:	f001 f9de 	bl	8007c54 <__d2b>
 8006898:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800689c:	4683      	mov	fp, r0
 800689e:	2d00      	cmp	r5, #0
 80068a0:	d07d      	beq.n	800699e <_dtoa_r+0x1e6>
 80068a2:	46b0      	mov	r8, r6
 80068a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068a8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80068ac:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80068b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068b4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80068b8:	2200      	movs	r2, #0
 80068ba:	4b89      	ldr	r3, [pc, #548]	; (8006ae0 <_dtoa_r+0x328>)
 80068bc:	4640      	mov	r0, r8
 80068be:	4649      	mov	r1, r9
 80068c0:	f7f9 fc52 	bl	8000168 <__aeabi_dsub>
 80068c4:	a37c      	add	r3, pc, #496	; (adr r3, 8006ab8 <_dtoa_r+0x300>)
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f7f9 fe05 	bl	80004d8 <__aeabi_dmul>
 80068ce:	a37c      	add	r3, pc, #496	; (adr r3, 8006ac0 <_dtoa_r+0x308>)
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	f7f9 fc4a 	bl	800016c <__adddf3>
 80068d8:	4606      	mov	r6, r0
 80068da:	4628      	mov	r0, r5
 80068dc:	460f      	mov	r7, r1
 80068de:	f7f9 fd91 	bl	8000404 <__aeabi_i2d>
 80068e2:	a379      	add	r3, pc, #484	; (adr r3, 8006ac8 <_dtoa_r+0x310>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f7f9 fdf6 	bl	80004d8 <__aeabi_dmul>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7f9 fc3a 	bl	800016c <__adddf3>
 80068f8:	4606      	mov	r6, r0
 80068fa:	460f      	mov	r7, r1
 80068fc:	f7fa f89c 	bl	8000a38 <__aeabi_d2iz>
 8006900:	2200      	movs	r2, #0
 8006902:	4682      	mov	sl, r0
 8006904:	2300      	movs	r3, #0
 8006906:	4630      	mov	r0, r6
 8006908:	4639      	mov	r1, r7
 800690a:	f7fa f857 	bl	80009bc <__aeabi_dcmplt>
 800690e:	b148      	cbz	r0, 8006924 <_dtoa_r+0x16c>
 8006910:	4650      	mov	r0, sl
 8006912:	f7f9 fd77 	bl	8000404 <__aeabi_i2d>
 8006916:	4632      	mov	r2, r6
 8006918:	463b      	mov	r3, r7
 800691a:	f7fa f845 	bl	80009a8 <__aeabi_dcmpeq>
 800691e:	b908      	cbnz	r0, 8006924 <_dtoa_r+0x16c>
 8006920:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006924:	f1ba 0f16 	cmp.w	sl, #22
 8006928:	d85a      	bhi.n	80069e0 <_dtoa_r+0x228>
 800692a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800692e:	496d      	ldr	r1, [pc, #436]	; (8006ae4 <_dtoa_r+0x32c>)
 8006930:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006938:	f7fa f85e 	bl	80009f8 <__aeabi_dcmpgt>
 800693c:	2800      	cmp	r0, #0
 800693e:	d051      	beq.n	80069e4 <_dtoa_r+0x22c>
 8006940:	2300      	movs	r3, #0
 8006942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006946:	930d      	str	r3, [sp, #52]	; 0x34
 8006948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800694a:	1b5d      	subs	r5, r3, r5
 800694c:	1e6b      	subs	r3, r5, #1
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	bf43      	ittte	mi
 8006952:	2300      	movmi	r3, #0
 8006954:	f1c5 0901 	rsbmi	r9, r5, #1
 8006958:	9307      	strmi	r3, [sp, #28]
 800695a:	f04f 0900 	movpl.w	r9, #0
 800695e:	f1ba 0f00 	cmp.w	sl, #0
 8006962:	db41      	blt.n	80069e8 <_dtoa_r+0x230>
 8006964:	9b07      	ldr	r3, [sp, #28]
 8006966:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800696a:	4453      	add	r3, sl
 800696c:	9307      	str	r3, [sp, #28]
 800696e:	2300      	movs	r3, #0
 8006970:	9308      	str	r3, [sp, #32]
 8006972:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006974:	2b09      	cmp	r3, #9
 8006976:	f200 808f 	bhi.w	8006a98 <_dtoa_r+0x2e0>
 800697a:	2b05      	cmp	r3, #5
 800697c:	bfc4      	itt	gt
 800697e:	3b04      	subgt	r3, #4
 8006980:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006982:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006984:	bfc8      	it	gt
 8006986:	2500      	movgt	r5, #0
 8006988:	f1a3 0302 	sub.w	r3, r3, #2
 800698c:	bfd8      	it	le
 800698e:	2501      	movle	r5, #1
 8006990:	2b03      	cmp	r3, #3
 8006992:	f200 808d 	bhi.w	8006ab0 <_dtoa_r+0x2f8>
 8006996:	e8df f003 	tbb	[pc, r3]
 800699a:	7d7b      	.short	0x7d7b
 800699c:	6f2f      	.short	0x6f2f
 800699e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80069a2:	441d      	add	r5, r3
 80069a4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80069a8:	2820      	cmp	r0, #32
 80069aa:	dd13      	ble.n	80069d4 <_dtoa_r+0x21c>
 80069ac:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80069b0:	9b02      	ldr	r3, [sp, #8]
 80069b2:	fa08 f800 	lsl.w	r8, r8, r0
 80069b6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80069ba:	fa23 f000 	lsr.w	r0, r3, r0
 80069be:	ea48 0000 	orr.w	r0, r8, r0
 80069c2:	f7f9 fd0f 	bl	80003e4 <__aeabi_ui2d>
 80069c6:	2301      	movs	r3, #1
 80069c8:	4680      	mov	r8, r0
 80069ca:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80069ce:	3d01      	subs	r5, #1
 80069d0:	9310      	str	r3, [sp, #64]	; 0x40
 80069d2:	e771      	b.n	80068b8 <_dtoa_r+0x100>
 80069d4:	9b02      	ldr	r3, [sp, #8]
 80069d6:	f1c0 0020 	rsb	r0, r0, #32
 80069da:	fa03 f000 	lsl.w	r0, r3, r0
 80069de:	e7f0      	b.n	80069c2 <_dtoa_r+0x20a>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e7b0      	b.n	8006946 <_dtoa_r+0x18e>
 80069e4:	900d      	str	r0, [sp, #52]	; 0x34
 80069e6:	e7af      	b.n	8006948 <_dtoa_r+0x190>
 80069e8:	f1ca 0300 	rsb	r3, sl, #0
 80069ec:	9308      	str	r3, [sp, #32]
 80069ee:	2300      	movs	r3, #0
 80069f0:	eba9 090a 	sub.w	r9, r9, sl
 80069f4:	930c      	str	r3, [sp, #48]	; 0x30
 80069f6:	e7bc      	b.n	8006972 <_dtoa_r+0x1ba>
 80069f8:	2301      	movs	r3, #1
 80069fa:	9309      	str	r3, [sp, #36]	; 0x24
 80069fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	dd74      	ble.n	8006aec <_dtoa_r+0x334>
 8006a02:	4698      	mov	r8, r3
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	2200      	movs	r2, #0
 8006a08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a0a:	6072      	str	r2, [r6, #4]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	f102 0014 	add.w	r0, r2, #20
 8006a12:	4298      	cmp	r0, r3
 8006a14:	6871      	ldr	r1, [r6, #4]
 8006a16:	d96e      	bls.n	8006af6 <_dtoa_r+0x33e>
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f000 fe8e 	bl	800773a <_Balloc>
 8006a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a20:	6030      	str	r0, [r6, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f1b8 0f0e 	cmp.w	r8, #14
 8006a28:	9306      	str	r3, [sp, #24]
 8006a2a:	f200 80ed 	bhi.w	8006c08 <_dtoa_r+0x450>
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	f000 80ea 	beq.w	8006c08 <_dtoa_r+0x450>
 8006a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a38:	f1ba 0f00 	cmp.w	sl, #0
 8006a3c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006a40:	dd77      	ble.n	8006b32 <_dtoa_r+0x37a>
 8006a42:	4a28      	ldr	r2, [pc, #160]	; (8006ae4 <_dtoa_r+0x32c>)
 8006a44:	f00a 030f 	and.w	r3, sl, #15
 8006a48:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006a4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a50:	06f0      	lsls	r0, r6, #27
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a5a:	d568      	bpl.n	8006b2e <_dtoa_r+0x376>
 8006a5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a60:	4b21      	ldr	r3, [pc, #132]	; (8006ae8 <_dtoa_r+0x330>)
 8006a62:	2503      	movs	r5, #3
 8006a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a68:	f7f9 fe60 	bl	800072c <__aeabi_ddiv>
 8006a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a70:	f006 060f 	and.w	r6, r6, #15
 8006a74:	4f1c      	ldr	r7, [pc, #112]	; (8006ae8 <_dtoa_r+0x330>)
 8006a76:	e04f      	b.n	8006b18 <_dtoa_r+0x360>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a7e:	4453      	add	r3, sl
 8006a80:	f103 0801 	add.w	r8, r3, #1
 8006a84:	9304      	str	r3, [sp, #16]
 8006a86:	4643      	mov	r3, r8
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	bfb8      	it	lt
 8006a8c:	2301      	movlt	r3, #1
 8006a8e:	e7ba      	b.n	8006a06 <_dtoa_r+0x24e>
 8006a90:	2300      	movs	r3, #0
 8006a92:	e7b2      	b.n	80069fa <_dtoa_r+0x242>
 8006a94:	2300      	movs	r3, #0
 8006a96:	e7f0      	b.n	8006a7a <_dtoa_r+0x2c2>
 8006a98:	2501      	movs	r5, #1
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9509      	str	r5, [sp, #36]	; 0x24
 8006a9e:	931e      	str	r3, [sp, #120]	; 0x78
 8006aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	9304      	str	r3, [sp, #16]
 8006aa8:	4698      	mov	r8, r3
 8006aaa:	2312      	movs	r3, #18
 8006aac:	921f      	str	r2, [sp, #124]	; 0x7c
 8006aae:	e7aa      	b.n	8006a06 <_dtoa_r+0x24e>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab4:	e7f4      	b.n	8006aa0 <_dtoa_r+0x2e8>
 8006ab6:	bf00      	nop
 8006ab8:	636f4361 	.word	0x636f4361
 8006abc:	3fd287a7 	.word	0x3fd287a7
 8006ac0:	8b60c8b3 	.word	0x8b60c8b3
 8006ac4:	3fc68a28 	.word	0x3fc68a28
 8006ac8:	509f79fb 	.word	0x509f79fb
 8006acc:	3fd34413 	.word	0x3fd34413
 8006ad0:	7ff00000 	.word	0x7ff00000
 8006ad4:	080083f9 	.word	0x080083f9
 8006ad8:	080083f0 	.word	0x080083f0
 8006adc:	080083cd 	.word	0x080083cd
 8006ae0:	3ff80000 	.word	0x3ff80000
 8006ae4:	08008488 	.word	0x08008488
 8006ae8:	08008460 	.word	0x08008460
 8006aec:	2301      	movs	r3, #1
 8006aee:	9304      	str	r3, [sp, #16]
 8006af0:	4698      	mov	r8, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	e7da      	b.n	8006aac <_dtoa_r+0x2f4>
 8006af6:	3101      	adds	r1, #1
 8006af8:	6071      	str	r1, [r6, #4]
 8006afa:	0052      	lsls	r2, r2, #1
 8006afc:	e787      	b.n	8006a0e <_dtoa_r+0x256>
 8006afe:	07f1      	lsls	r1, r6, #31
 8006b00:	d508      	bpl.n	8006b14 <_dtoa_r+0x35c>
 8006b02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0a:	f7f9 fce5 	bl	80004d8 <__aeabi_dmul>
 8006b0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b12:	3501      	adds	r5, #1
 8006b14:	1076      	asrs	r6, r6, #1
 8006b16:	3708      	adds	r7, #8
 8006b18:	2e00      	cmp	r6, #0
 8006b1a:	d1f0      	bne.n	8006afe <_dtoa_r+0x346>
 8006b1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b24:	f7f9 fe02 	bl	800072c <__aeabi_ddiv>
 8006b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b2c:	e01b      	b.n	8006b66 <_dtoa_r+0x3ae>
 8006b2e:	2502      	movs	r5, #2
 8006b30:	e7a0      	b.n	8006a74 <_dtoa_r+0x2bc>
 8006b32:	f000 80a4 	beq.w	8006c7e <_dtoa_r+0x4c6>
 8006b36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006b3a:	f1ca 0600 	rsb	r6, sl, #0
 8006b3e:	4ba0      	ldr	r3, [pc, #640]	; (8006dc0 <_dtoa_r+0x608>)
 8006b40:	f006 020f 	and.w	r2, r6, #15
 8006b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f7f9 fcc4 	bl	80004d8 <__aeabi_dmul>
 8006b50:	2502      	movs	r5, #2
 8006b52:	2300      	movs	r3, #0
 8006b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b58:	4f9a      	ldr	r7, [pc, #616]	; (8006dc4 <_dtoa_r+0x60c>)
 8006b5a:	1136      	asrs	r6, r6, #4
 8006b5c:	2e00      	cmp	r6, #0
 8006b5e:	f040 8083 	bne.w	8006c68 <_dtoa_r+0x4b0>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e0      	bne.n	8006b28 <_dtoa_r+0x370>
 8006b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 808a 	beq.w	8006c82 <_dtoa_r+0x4ca>
 8006b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006b76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	4b92      	ldr	r3, [pc, #584]	; (8006dc8 <_dtoa_r+0x610>)
 8006b7e:	f7f9 ff1d 	bl	80009bc <__aeabi_dcmplt>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d07d      	beq.n	8006c82 <_dtoa_r+0x4ca>
 8006b86:	f1b8 0f00 	cmp.w	r8, #0
 8006b8a:	d07a      	beq.n	8006c82 <_dtoa_r+0x4ca>
 8006b8c:	9b04      	ldr	r3, [sp, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dd36      	ble.n	8006c00 <_dtoa_r+0x448>
 8006b92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b96:	2200      	movs	r2, #0
 8006b98:	4b8c      	ldr	r3, [pc, #560]	; (8006dcc <_dtoa_r+0x614>)
 8006b9a:	f7f9 fc9d 	bl	80004d8 <__aeabi_dmul>
 8006b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ba2:	9e04      	ldr	r6, [sp, #16]
 8006ba4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006ba8:	3501      	adds	r5, #1
 8006baa:	4628      	mov	r0, r5
 8006bac:	f7f9 fc2a 	bl	8000404 <__aeabi_i2d>
 8006bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bb4:	f7f9 fc90 	bl	80004d8 <__aeabi_dmul>
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4b85      	ldr	r3, [pc, #532]	; (8006dd0 <_dtoa_r+0x618>)
 8006bbc:	f7f9 fad6 	bl	800016c <__adddf3>
 8006bc0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006bc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006bc8:	950b      	str	r5, [sp, #44]	; 0x2c
 8006bca:	2e00      	cmp	r6, #0
 8006bcc:	d15c      	bne.n	8006c88 <_dtoa_r+0x4d0>
 8006bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4b7f      	ldr	r3, [pc, #508]	; (8006dd4 <_dtoa_r+0x61c>)
 8006bd6:	f7f9 fac7 	bl	8000168 <__aeabi_dsub>
 8006bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bdc:	462b      	mov	r3, r5
 8006bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006be2:	f7f9 ff09 	bl	80009f8 <__aeabi_dcmpgt>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f040 8281 	bne.w	80070ee <_dtoa_r+0x936>
 8006bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006bf6:	f7f9 fee1 	bl	80009bc <__aeabi_dcmplt>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f040 8275 	bne.w	80070ea <_dtoa_r+0x932>
 8006c00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f2c0 814b 	blt.w	8006ea6 <_dtoa_r+0x6ee>
 8006c10:	f1ba 0f0e 	cmp.w	sl, #14
 8006c14:	f300 8147 	bgt.w	8006ea6 <_dtoa_r+0x6ee>
 8006c18:	4b69      	ldr	r3, [pc, #420]	; (8006dc0 <_dtoa_r+0x608>)
 8006c1a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f280 80d7 	bge.w	8006ddc <_dtoa_r+0x624>
 8006c2e:	f1b8 0f00 	cmp.w	r8, #0
 8006c32:	f300 80d3 	bgt.w	8006ddc <_dtoa_r+0x624>
 8006c36:	f040 8257 	bne.w	80070e8 <_dtoa_r+0x930>
 8006c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4b64      	ldr	r3, [pc, #400]	; (8006dd4 <_dtoa_r+0x61c>)
 8006c42:	f7f9 fc49 	bl	80004d8 <__aeabi_dmul>
 8006c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c4a:	f7f9 fecb 	bl	80009e4 <__aeabi_dcmpge>
 8006c4e:	4646      	mov	r6, r8
 8006c50:	4647      	mov	r7, r8
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f040 822d 	bne.w	80070b2 <_dtoa_r+0x8fa>
 8006c58:	9b06      	ldr	r3, [sp, #24]
 8006c5a:	9a06      	ldr	r2, [sp, #24]
 8006c5c:	1c5d      	adds	r5, r3, #1
 8006c5e:	2331      	movs	r3, #49	; 0x31
 8006c60:	f10a 0a01 	add.w	sl, sl, #1
 8006c64:	7013      	strb	r3, [r2, #0]
 8006c66:	e228      	b.n	80070ba <_dtoa_r+0x902>
 8006c68:	07f2      	lsls	r2, r6, #31
 8006c6a:	d505      	bpl.n	8006c78 <_dtoa_r+0x4c0>
 8006c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c70:	f7f9 fc32 	bl	80004d8 <__aeabi_dmul>
 8006c74:	2301      	movs	r3, #1
 8006c76:	3501      	adds	r5, #1
 8006c78:	1076      	asrs	r6, r6, #1
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	e76e      	b.n	8006b5c <_dtoa_r+0x3a4>
 8006c7e:	2502      	movs	r5, #2
 8006c80:	e771      	b.n	8006b66 <_dtoa_r+0x3ae>
 8006c82:	4657      	mov	r7, sl
 8006c84:	4646      	mov	r6, r8
 8006c86:	e790      	b.n	8006baa <_dtoa_r+0x3f2>
 8006c88:	4b4d      	ldr	r3, [pc, #308]	; (8006dc0 <_dtoa_r+0x608>)
 8006c8a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c8e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d048      	beq.n	8006d2a <_dtoa_r+0x572>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	494e      	ldr	r1, [pc, #312]	; (8006dd8 <_dtoa_r+0x620>)
 8006ca0:	f7f9 fd44 	bl	800072c <__aeabi_ddiv>
 8006ca4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ca8:	f7f9 fa5e 	bl	8000168 <__aeabi_dsub>
 8006cac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006cb0:	9d06      	ldr	r5, [sp, #24]
 8006cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cb6:	f7f9 febf 	bl	8000a38 <__aeabi_d2iz>
 8006cba:	9011      	str	r0, [sp, #68]	; 0x44
 8006cbc:	f7f9 fba2 	bl	8000404 <__aeabi_i2d>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc8:	f7f9 fa4e 	bl	8000168 <__aeabi_dsub>
 8006ccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd2:	3330      	adds	r3, #48	; 0x30
 8006cd4:	f805 3b01 	strb.w	r3, [r5], #1
 8006cd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cdc:	f7f9 fe6e 	bl	80009bc <__aeabi_dcmplt>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d163      	bne.n	8006dac <_dtoa_r+0x5f4>
 8006ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ce8:	2000      	movs	r0, #0
 8006cea:	4937      	ldr	r1, [pc, #220]	; (8006dc8 <_dtoa_r+0x610>)
 8006cec:	f7f9 fa3c 	bl	8000168 <__aeabi_dsub>
 8006cf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cf4:	f7f9 fe62 	bl	80009bc <__aeabi_dcmplt>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f040 80b5 	bne.w	8006e68 <_dtoa_r+0x6b0>
 8006cfe:	9b06      	ldr	r3, [sp, #24]
 8006d00:	1aeb      	subs	r3, r5, r3
 8006d02:	429e      	cmp	r6, r3
 8006d04:	f77f af7c 	ble.w	8006c00 <_dtoa_r+0x448>
 8006d08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4b2f      	ldr	r3, [pc, #188]	; (8006dcc <_dtoa_r+0x614>)
 8006d10:	f7f9 fbe2 	bl	80004d8 <__aeabi_dmul>
 8006d14:	2200      	movs	r2, #0
 8006d16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1e:	4b2b      	ldr	r3, [pc, #172]	; (8006dcc <_dtoa_r+0x614>)
 8006d20:	f7f9 fbda 	bl	80004d8 <__aeabi_dmul>
 8006d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d28:	e7c3      	b.n	8006cb2 <_dtoa_r+0x4fa>
 8006d2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d2e:	f7f9 fbd3 	bl	80004d8 <__aeabi_dmul>
 8006d32:	9b06      	ldr	r3, [sp, #24]
 8006d34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d38:	199d      	adds	r5, r3, r6
 8006d3a:	461e      	mov	r6, r3
 8006d3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d40:	f7f9 fe7a 	bl	8000a38 <__aeabi_d2iz>
 8006d44:	9011      	str	r0, [sp, #68]	; 0x44
 8006d46:	f7f9 fb5d 	bl	8000404 <__aeabi_i2d>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d52:	f7f9 fa09 	bl	8000168 <__aeabi_dsub>
 8006d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5c:	3330      	adds	r3, #48	; 0x30
 8006d5e:	f806 3b01 	strb.w	r3, [r6], #1
 8006d62:	42ae      	cmp	r6, r5
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	d124      	bne.n	8006db4 <_dtoa_r+0x5fc>
 8006d6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d6e:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <_dtoa_r+0x620>)
 8006d70:	f7f9 f9fc 	bl	800016c <__adddf3>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d7c:	f7f9 fe3c 	bl	80009f8 <__aeabi_dcmpgt>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d171      	bne.n	8006e68 <_dtoa_r+0x6b0>
 8006d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d88:	2000      	movs	r0, #0
 8006d8a:	4913      	ldr	r1, [pc, #76]	; (8006dd8 <_dtoa_r+0x620>)
 8006d8c:	f7f9 f9ec 	bl	8000168 <__aeabi_dsub>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d98:	f7f9 fe10 	bl	80009bc <__aeabi_dcmplt>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f43f af2f 	beq.w	8006c00 <_dtoa_r+0x448>
 8006da2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006da6:	1e6a      	subs	r2, r5, #1
 8006da8:	2b30      	cmp	r3, #48	; 0x30
 8006daa:	d001      	beq.n	8006db0 <_dtoa_r+0x5f8>
 8006dac:	46ba      	mov	sl, r7
 8006dae:	e04a      	b.n	8006e46 <_dtoa_r+0x68e>
 8006db0:	4615      	mov	r5, r2
 8006db2:	e7f6      	b.n	8006da2 <_dtoa_r+0x5ea>
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <_dtoa_r+0x614>)
 8006db6:	f7f9 fb8f 	bl	80004d8 <__aeabi_dmul>
 8006dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dbe:	e7bd      	b.n	8006d3c <_dtoa_r+0x584>
 8006dc0:	08008488 	.word	0x08008488
 8006dc4:	08008460 	.word	0x08008460
 8006dc8:	3ff00000 	.word	0x3ff00000
 8006dcc:	40240000 	.word	0x40240000
 8006dd0:	401c0000 	.word	0x401c0000
 8006dd4:	40140000 	.word	0x40140000
 8006dd8:	3fe00000 	.word	0x3fe00000
 8006ddc:	9d06      	ldr	r5, [sp, #24]
 8006dde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006de6:	4630      	mov	r0, r6
 8006de8:	4639      	mov	r1, r7
 8006dea:	f7f9 fc9f 	bl	800072c <__aeabi_ddiv>
 8006dee:	f7f9 fe23 	bl	8000a38 <__aeabi_d2iz>
 8006df2:	4681      	mov	r9, r0
 8006df4:	f7f9 fb06 	bl	8000404 <__aeabi_i2d>
 8006df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dfc:	f7f9 fb6c 	bl	80004d8 <__aeabi_dmul>
 8006e00:	4602      	mov	r2, r0
 8006e02:	460b      	mov	r3, r1
 8006e04:	4630      	mov	r0, r6
 8006e06:	4639      	mov	r1, r7
 8006e08:	f7f9 f9ae 	bl	8000168 <__aeabi_dsub>
 8006e0c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006e10:	f805 6b01 	strb.w	r6, [r5], #1
 8006e14:	9e06      	ldr	r6, [sp, #24]
 8006e16:	4602      	mov	r2, r0
 8006e18:	1bae      	subs	r6, r5, r6
 8006e1a:	45b0      	cmp	r8, r6
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	d135      	bne.n	8006e8c <_dtoa_r+0x6d4>
 8006e20:	f7f9 f9a4 	bl	800016c <__adddf3>
 8006e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e28:	4606      	mov	r6, r0
 8006e2a:	460f      	mov	r7, r1
 8006e2c:	f7f9 fde4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e30:	b9c8      	cbnz	r0, 8006e66 <_dtoa_r+0x6ae>
 8006e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e36:	4630      	mov	r0, r6
 8006e38:	4639      	mov	r1, r7
 8006e3a:	f7f9 fdb5 	bl	80009a8 <__aeabi_dcmpeq>
 8006e3e:	b110      	cbz	r0, 8006e46 <_dtoa_r+0x68e>
 8006e40:	f019 0f01 	tst.w	r9, #1
 8006e44:	d10f      	bne.n	8006e66 <_dtoa_r+0x6ae>
 8006e46:	4659      	mov	r1, fp
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f000 fcaa 	bl	80077a2 <_Bfree>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e52:	702b      	strb	r3, [r5, #0]
 8006e54:	f10a 0301 	add.w	r3, sl, #1
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f43f acf3 	beq.w	8006848 <_dtoa_r+0x90>
 8006e62:	601d      	str	r5, [r3, #0]
 8006e64:	e4f0      	b.n	8006848 <_dtoa_r+0x90>
 8006e66:	4657      	mov	r7, sl
 8006e68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e6c:	1e6b      	subs	r3, r5, #1
 8006e6e:	2a39      	cmp	r2, #57	; 0x39
 8006e70:	d106      	bne.n	8006e80 <_dtoa_r+0x6c8>
 8006e72:	9a06      	ldr	r2, [sp, #24]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d107      	bne.n	8006e88 <_dtoa_r+0x6d0>
 8006e78:	2330      	movs	r3, #48	; 0x30
 8006e7a:	7013      	strb	r3, [r2, #0]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	3701      	adds	r7, #1
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	3201      	adds	r2, #1
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	e791      	b.n	8006dac <_dtoa_r+0x5f4>
 8006e88:	461d      	mov	r5, r3
 8006e8a:	e7ed      	b.n	8006e68 <_dtoa_r+0x6b0>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4b99      	ldr	r3, [pc, #612]	; (80070f4 <_dtoa_r+0x93c>)
 8006e90:	f7f9 fb22 	bl	80004d8 <__aeabi_dmul>
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4606      	mov	r6, r0
 8006e9a:	460f      	mov	r7, r1
 8006e9c:	f7f9 fd84 	bl	80009a8 <__aeabi_dcmpeq>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d09e      	beq.n	8006de2 <_dtoa_r+0x62a>
 8006ea4:	e7cf      	b.n	8006e46 <_dtoa_r+0x68e>
 8006ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	f000 8088 	beq.w	8006fbe <_dtoa_r+0x806>
 8006eae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006eb0:	2a01      	cmp	r2, #1
 8006eb2:	dc6d      	bgt.n	8006f90 <_dtoa_r+0x7d8>
 8006eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006eb6:	2a00      	cmp	r2, #0
 8006eb8:	d066      	beq.n	8006f88 <_dtoa_r+0x7d0>
 8006eba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ebe:	464d      	mov	r5, r9
 8006ec0:	9e08      	ldr	r6, [sp, #32]
 8006ec2:	9a07      	ldr	r2, [sp, #28]
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	441a      	add	r2, r3
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4499      	add	r9, r3
 8006ecc:	9207      	str	r2, [sp, #28]
 8006ece:	f000 fd08 	bl	80078e2 <__i2b>
 8006ed2:	4607      	mov	r7, r0
 8006ed4:	2d00      	cmp	r5, #0
 8006ed6:	dd0b      	ble.n	8006ef0 <_dtoa_r+0x738>
 8006ed8:	9b07      	ldr	r3, [sp, #28]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	dd08      	ble.n	8006ef0 <_dtoa_r+0x738>
 8006ede:	42ab      	cmp	r3, r5
 8006ee0:	bfa8      	it	ge
 8006ee2:	462b      	movge	r3, r5
 8006ee4:	9a07      	ldr	r2, [sp, #28]
 8006ee6:	eba9 0903 	sub.w	r9, r9, r3
 8006eea:	1aed      	subs	r5, r5, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	9b08      	ldr	r3, [sp, #32]
 8006ef2:	b1eb      	cbz	r3, 8006f30 <_dtoa_r+0x778>
 8006ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d065      	beq.n	8006fc6 <_dtoa_r+0x80e>
 8006efa:	b18e      	cbz	r6, 8006f20 <_dtoa_r+0x768>
 8006efc:	4639      	mov	r1, r7
 8006efe:	4632      	mov	r2, r6
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 fd8d 	bl	8007a20 <__pow5mult>
 8006f06:	465a      	mov	r2, fp
 8006f08:	4601      	mov	r1, r0
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 fcf1 	bl	80078f4 <__multiply>
 8006f12:	4659      	mov	r1, fp
 8006f14:	900a      	str	r0, [sp, #40]	; 0x28
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 fc43 	bl	80077a2 <_Bfree>
 8006f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1e:	469b      	mov	fp, r3
 8006f20:	9b08      	ldr	r3, [sp, #32]
 8006f22:	1b9a      	subs	r2, r3, r6
 8006f24:	d004      	beq.n	8006f30 <_dtoa_r+0x778>
 8006f26:	4659      	mov	r1, fp
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 fd79 	bl	8007a20 <__pow5mult>
 8006f2e:	4683      	mov	fp, r0
 8006f30:	2101      	movs	r1, #1
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 fcd5 	bl	80078e2 <__i2b>
 8006f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 81c6 	beq.w	80072ce <_dtoa_r+0xb16>
 8006f42:	461a      	mov	r2, r3
 8006f44:	4601      	mov	r1, r0
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 fd6a 	bl	8007a20 <__pow5mult>
 8006f4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f4e:	4606      	mov	r6, r0
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	dc3e      	bgt.n	8006fd2 <_dtoa_r+0x81a>
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d137      	bne.n	8006fca <_dtoa_r+0x812>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d134      	bne.n	8006fce <_dtoa_r+0x816>
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f6a:	0d1b      	lsrs	r3, r3, #20
 8006f6c:	051b      	lsls	r3, r3, #20
 8006f6e:	b12b      	cbz	r3, 8006f7c <_dtoa_r+0x7c4>
 8006f70:	9b07      	ldr	r3, [sp, #28]
 8006f72:	f109 0901 	add.w	r9, r9, #1
 8006f76:	3301      	adds	r3, #1
 8006f78:	9307      	str	r3, [sp, #28]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	9308      	str	r3, [sp, #32]
 8006f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d128      	bne.n	8006fd6 <_dtoa_r+0x81e>
 8006f84:	2001      	movs	r0, #1
 8006f86:	e02e      	b.n	8006fe6 <_dtoa_r+0x82e>
 8006f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f8a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f8e:	e796      	b.n	8006ebe <_dtoa_r+0x706>
 8006f90:	9b08      	ldr	r3, [sp, #32]
 8006f92:	f108 36ff 	add.w	r6, r8, #4294967295
 8006f96:	42b3      	cmp	r3, r6
 8006f98:	bfb7      	itett	lt
 8006f9a:	9b08      	ldrlt	r3, [sp, #32]
 8006f9c:	1b9e      	subge	r6, r3, r6
 8006f9e:	1af2      	sublt	r2, r6, r3
 8006fa0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006fa2:	bfbf      	itttt	lt
 8006fa4:	9608      	strlt	r6, [sp, #32]
 8006fa6:	189b      	addlt	r3, r3, r2
 8006fa8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006faa:	2600      	movlt	r6, #0
 8006fac:	f1b8 0f00 	cmp.w	r8, #0
 8006fb0:	bfb9      	ittee	lt
 8006fb2:	eba9 0508 	sublt.w	r5, r9, r8
 8006fb6:	2300      	movlt	r3, #0
 8006fb8:	464d      	movge	r5, r9
 8006fba:	4643      	movge	r3, r8
 8006fbc:	e781      	b.n	8006ec2 <_dtoa_r+0x70a>
 8006fbe:	9e08      	ldr	r6, [sp, #32]
 8006fc0:	464d      	mov	r5, r9
 8006fc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006fc4:	e786      	b.n	8006ed4 <_dtoa_r+0x71c>
 8006fc6:	9a08      	ldr	r2, [sp, #32]
 8006fc8:	e7ad      	b.n	8006f26 <_dtoa_r+0x76e>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e7d6      	b.n	8006f7c <_dtoa_r+0x7c4>
 8006fce:	9b02      	ldr	r3, [sp, #8]
 8006fd0:	e7d4      	b.n	8006f7c <_dtoa_r+0x7c4>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9308      	str	r3, [sp, #32]
 8006fd6:	6933      	ldr	r3, [r6, #16]
 8006fd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006fdc:	6918      	ldr	r0, [r3, #16]
 8006fde:	f000 fc32 	bl	8007846 <__hi0bits>
 8006fe2:	f1c0 0020 	rsb	r0, r0, #32
 8006fe6:	9b07      	ldr	r3, [sp, #28]
 8006fe8:	4418      	add	r0, r3
 8006fea:	f010 001f 	ands.w	r0, r0, #31
 8006fee:	d047      	beq.n	8007080 <_dtoa_r+0x8c8>
 8006ff0:	f1c0 0320 	rsb	r3, r0, #32
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	dd3b      	ble.n	8007070 <_dtoa_r+0x8b8>
 8006ff8:	9b07      	ldr	r3, [sp, #28]
 8006ffa:	f1c0 001c 	rsb	r0, r0, #28
 8006ffe:	4481      	add	r9, r0
 8007000:	4405      	add	r5, r0
 8007002:	4403      	add	r3, r0
 8007004:	9307      	str	r3, [sp, #28]
 8007006:	f1b9 0f00 	cmp.w	r9, #0
 800700a:	dd05      	ble.n	8007018 <_dtoa_r+0x860>
 800700c:	4659      	mov	r1, fp
 800700e:	464a      	mov	r2, r9
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fd53 	bl	8007abc <__lshift>
 8007016:	4683      	mov	fp, r0
 8007018:	9b07      	ldr	r3, [sp, #28]
 800701a:	2b00      	cmp	r3, #0
 800701c:	dd05      	ble.n	800702a <_dtoa_r+0x872>
 800701e:	4631      	mov	r1, r6
 8007020:	461a      	mov	r2, r3
 8007022:	4620      	mov	r0, r4
 8007024:	f000 fd4a 	bl	8007abc <__lshift>
 8007028:	4606      	mov	r6, r0
 800702a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800702c:	b353      	cbz	r3, 8007084 <_dtoa_r+0x8cc>
 800702e:	4631      	mov	r1, r6
 8007030:	4658      	mov	r0, fp
 8007032:	f000 fd97 	bl	8007b64 <__mcmp>
 8007036:	2800      	cmp	r0, #0
 8007038:	da24      	bge.n	8007084 <_dtoa_r+0x8cc>
 800703a:	2300      	movs	r3, #0
 800703c:	4659      	mov	r1, fp
 800703e:	220a      	movs	r2, #10
 8007040:	4620      	mov	r0, r4
 8007042:	f000 fbc5 	bl	80077d0 <__multadd>
 8007046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007048:	f10a 3aff 	add.w	sl, sl, #4294967295
 800704c:	4683      	mov	fp, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8144 	beq.w	80072dc <_dtoa_r+0xb24>
 8007054:	2300      	movs	r3, #0
 8007056:	4639      	mov	r1, r7
 8007058:	220a      	movs	r2, #10
 800705a:	4620      	mov	r0, r4
 800705c:	f000 fbb8 	bl	80077d0 <__multadd>
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	4607      	mov	r7, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	dc4d      	bgt.n	8007104 <_dtoa_r+0x94c>
 8007068:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800706a:	2b02      	cmp	r3, #2
 800706c:	dd4a      	ble.n	8007104 <_dtoa_r+0x94c>
 800706e:	e011      	b.n	8007094 <_dtoa_r+0x8dc>
 8007070:	d0c9      	beq.n	8007006 <_dtoa_r+0x84e>
 8007072:	9a07      	ldr	r2, [sp, #28]
 8007074:	331c      	adds	r3, #28
 8007076:	441a      	add	r2, r3
 8007078:	4499      	add	r9, r3
 800707a:	441d      	add	r5, r3
 800707c:	4613      	mov	r3, r2
 800707e:	e7c1      	b.n	8007004 <_dtoa_r+0x84c>
 8007080:	4603      	mov	r3, r0
 8007082:	e7f6      	b.n	8007072 <_dtoa_r+0x8ba>
 8007084:	f1b8 0f00 	cmp.w	r8, #0
 8007088:	dc36      	bgt.n	80070f8 <_dtoa_r+0x940>
 800708a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800708c:	2b02      	cmp	r3, #2
 800708e:	dd33      	ble.n	80070f8 <_dtoa_r+0x940>
 8007090:	f8cd 8010 	str.w	r8, [sp, #16]
 8007094:	9b04      	ldr	r3, [sp, #16]
 8007096:	b963      	cbnz	r3, 80070b2 <_dtoa_r+0x8fa>
 8007098:	4631      	mov	r1, r6
 800709a:	2205      	movs	r2, #5
 800709c:	4620      	mov	r0, r4
 800709e:	f000 fb97 	bl	80077d0 <__multadd>
 80070a2:	4601      	mov	r1, r0
 80070a4:	4606      	mov	r6, r0
 80070a6:	4658      	mov	r0, fp
 80070a8:	f000 fd5c 	bl	8007b64 <__mcmp>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f73f add3 	bgt.w	8006c58 <_dtoa_r+0x4a0>
 80070b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070b4:	9d06      	ldr	r5, [sp, #24]
 80070b6:	ea6f 0a03 	mvn.w	sl, r3
 80070ba:	f04f 0900 	mov.w	r9, #0
 80070be:	4631      	mov	r1, r6
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fb6e 	bl	80077a2 <_Bfree>
 80070c6:	2f00      	cmp	r7, #0
 80070c8:	f43f aebd 	beq.w	8006e46 <_dtoa_r+0x68e>
 80070cc:	f1b9 0f00 	cmp.w	r9, #0
 80070d0:	d005      	beq.n	80070de <_dtoa_r+0x926>
 80070d2:	45b9      	cmp	r9, r7
 80070d4:	d003      	beq.n	80070de <_dtoa_r+0x926>
 80070d6:	4649      	mov	r1, r9
 80070d8:	4620      	mov	r0, r4
 80070da:	f000 fb62 	bl	80077a2 <_Bfree>
 80070de:	4639      	mov	r1, r7
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 fb5e 	bl	80077a2 <_Bfree>
 80070e6:	e6ae      	b.n	8006e46 <_dtoa_r+0x68e>
 80070e8:	2600      	movs	r6, #0
 80070ea:	4637      	mov	r7, r6
 80070ec:	e7e1      	b.n	80070b2 <_dtoa_r+0x8fa>
 80070ee:	46ba      	mov	sl, r7
 80070f0:	4637      	mov	r7, r6
 80070f2:	e5b1      	b.n	8006c58 <_dtoa_r+0x4a0>
 80070f4:	40240000 	.word	0x40240000
 80070f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80f3 	beq.w	80072ea <_dtoa_r+0xb32>
 8007104:	2d00      	cmp	r5, #0
 8007106:	dd05      	ble.n	8007114 <_dtoa_r+0x95c>
 8007108:	4639      	mov	r1, r7
 800710a:	462a      	mov	r2, r5
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fcd5 	bl	8007abc <__lshift>
 8007112:	4607      	mov	r7, r0
 8007114:	9b08      	ldr	r3, [sp, #32]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d04c      	beq.n	80071b4 <_dtoa_r+0x9fc>
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	4620      	mov	r0, r4
 800711e:	f000 fb0c 	bl	800773a <_Balloc>
 8007122:	4605      	mov	r5, r0
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	f107 010c 	add.w	r1, r7, #12
 800712a:	3202      	adds	r2, #2
 800712c:	0092      	lsls	r2, r2, #2
 800712e:	300c      	adds	r0, #12
 8007130:	f000 faf8 	bl	8007724 <memcpy>
 8007134:	2201      	movs	r2, #1
 8007136:	4629      	mov	r1, r5
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fcbf 	bl	8007abc <__lshift>
 800713e:	46b9      	mov	r9, r7
 8007140:	4607      	mov	r7, r0
 8007142:	9b06      	ldr	r3, [sp, #24]
 8007144:	9307      	str	r3, [sp, #28]
 8007146:	9b02      	ldr	r3, [sp, #8]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	9308      	str	r3, [sp, #32]
 800714e:	4631      	mov	r1, r6
 8007150:	4658      	mov	r0, fp
 8007152:	f7ff faa1 	bl	8006698 <quorem>
 8007156:	4649      	mov	r1, r9
 8007158:	4605      	mov	r5, r0
 800715a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800715e:	4658      	mov	r0, fp
 8007160:	f000 fd00 	bl	8007b64 <__mcmp>
 8007164:	463a      	mov	r2, r7
 8007166:	9002      	str	r0, [sp, #8]
 8007168:	4631      	mov	r1, r6
 800716a:	4620      	mov	r0, r4
 800716c:	f000 fd14 	bl	8007b98 <__mdiff>
 8007170:	68c3      	ldr	r3, [r0, #12]
 8007172:	4602      	mov	r2, r0
 8007174:	bb03      	cbnz	r3, 80071b8 <_dtoa_r+0xa00>
 8007176:	4601      	mov	r1, r0
 8007178:	9009      	str	r0, [sp, #36]	; 0x24
 800717a:	4658      	mov	r0, fp
 800717c:	f000 fcf2 	bl	8007b64 <__mcmp>
 8007180:	4603      	mov	r3, r0
 8007182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007184:	4611      	mov	r1, r2
 8007186:	4620      	mov	r0, r4
 8007188:	9309      	str	r3, [sp, #36]	; 0x24
 800718a:	f000 fb0a 	bl	80077a2 <_Bfree>
 800718e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007190:	b9a3      	cbnz	r3, 80071bc <_dtoa_r+0xa04>
 8007192:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007194:	b992      	cbnz	r2, 80071bc <_dtoa_r+0xa04>
 8007196:	9a08      	ldr	r2, [sp, #32]
 8007198:	b982      	cbnz	r2, 80071bc <_dtoa_r+0xa04>
 800719a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800719e:	d029      	beq.n	80071f4 <_dtoa_r+0xa3c>
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dd01      	ble.n	80071aa <_dtoa_r+0x9f2>
 80071a6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80071aa:	9b07      	ldr	r3, [sp, #28]
 80071ac:	1c5d      	adds	r5, r3, #1
 80071ae:	f883 8000 	strb.w	r8, [r3]
 80071b2:	e784      	b.n	80070be <_dtoa_r+0x906>
 80071b4:	4638      	mov	r0, r7
 80071b6:	e7c2      	b.n	800713e <_dtoa_r+0x986>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e7e3      	b.n	8007184 <_dtoa_r+0x9cc>
 80071bc:	9a02      	ldr	r2, [sp, #8]
 80071be:	2a00      	cmp	r2, #0
 80071c0:	db04      	blt.n	80071cc <_dtoa_r+0xa14>
 80071c2:	d123      	bne.n	800720c <_dtoa_r+0xa54>
 80071c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80071c6:	bb0a      	cbnz	r2, 800720c <_dtoa_r+0xa54>
 80071c8:	9a08      	ldr	r2, [sp, #32]
 80071ca:	b9fa      	cbnz	r2, 800720c <_dtoa_r+0xa54>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	ddec      	ble.n	80071aa <_dtoa_r+0x9f2>
 80071d0:	4659      	mov	r1, fp
 80071d2:	2201      	movs	r2, #1
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 fc71 	bl	8007abc <__lshift>
 80071da:	4631      	mov	r1, r6
 80071dc:	4683      	mov	fp, r0
 80071de:	f000 fcc1 	bl	8007b64 <__mcmp>
 80071e2:	2800      	cmp	r0, #0
 80071e4:	dc03      	bgt.n	80071ee <_dtoa_r+0xa36>
 80071e6:	d1e0      	bne.n	80071aa <_dtoa_r+0x9f2>
 80071e8:	f018 0f01 	tst.w	r8, #1
 80071ec:	d0dd      	beq.n	80071aa <_dtoa_r+0x9f2>
 80071ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80071f2:	d1d8      	bne.n	80071a6 <_dtoa_r+0x9ee>
 80071f4:	9b07      	ldr	r3, [sp, #28]
 80071f6:	9a07      	ldr	r2, [sp, #28]
 80071f8:	1c5d      	adds	r5, r3, #1
 80071fa:	2339      	movs	r3, #57	; 0x39
 80071fc:	7013      	strb	r3, [r2, #0]
 80071fe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007202:	1e6a      	subs	r2, r5, #1
 8007204:	2b39      	cmp	r3, #57	; 0x39
 8007206:	d04d      	beq.n	80072a4 <_dtoa_r+0xaec>
 8007208:	3301      	adds	r3, #1
 800720a:	e052      	b.n	80072b2 <_dtoa_r+0xafa>
 800720c:	9a07      	ldr	r2, [sp, #28]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f102 0501 	add.w	r5, r2, #1
 8007214:	dd06      	ble.n	8007224 <_dtoa_r+0xa6c>
 8007216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800721a:	d0eb      	beq.n	80071f4 <_dtoa_r+0xa3c>
 800721c:	f108 0801 	add.w	r8, r8, #1
 8007220:	9b07      	ldr	r3, [sp, #28]
 8007222:	e7c4      	b.n	80071ae <_dtoa_r+0x9f6>
 8007224:	9b06      	ldr	r3, [sp, #24]
 8007226:	9a04      	ldr	r2, [sp, #16]
 8007228:	1aeb      	subs	r3, r5, r3
 800722a:	4293      	cmp	r3, r2
 800722c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007230:	d021      	beq.n	8007276 <_dtoa_r+0xabe>
 8007232:	4659      	mov	r1, fp
 8007234:	2300      	movs	r3, #0
 8007236:	220a      	movs	r2, #10
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fac9 	bl	80077d0 <__multadd>
 800723e:	45b9      	cmp	r9, r7
 8007240:	4683      	mov	fp, r0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	f04f 020a 	mov.w	r2, #10
 800724a:	4649      	mov	r1, r9
 800724c:	4620      	mov	r0, r4
 800724e:	d105      	bne.n	800725c <_dtoa_r+0xaa4>
 8007250:	f000 fabe 	bl	80077d0 <__multadd>
 8007254:	4681      	mov	r9, r0
 8007256:	4607      	mov	r7, r0
 8007258:	9507      	str	r5, [sp, #28]
 800725a:	e778      	b.n	800714e <_dtoa_r+0x996>
 800725c:	f000 fab8 	bl	80077d0 <__multadd>
 8007260:	4639      	mov	r1, r7
 8007262:	4681      	mov	r9, r0
 8007264:	2300      	movs	r3, #0
 8007266:	220a      	movs	r2, #10
 8007268:	4620      	mov	r0, r4
 800726a:	f000 fab1 	bl	80077d0 <__multadd>
 800726e:	4607      	mov	r7, r0
 8007270:	e7f2      	b.n	8007258 <_dtoa_r+0xaa0>
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	4659      	mov	r1, fp
 8007278:	2201      	movs	r2, #1
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fc1e 	bl	8007abc <__lshift>
 8007280:	4631      	mov	r1, r6
 8007282:	4683      	mov	fp, r0
 8007284:	f000 fc6e 	bl	8007b64 <__mcmp>
 8007288:	2800      	cmp	r0, #0
 800728a:	dcb8      	bgt.n	80071fe <_dtoa_r+0xa46>
 800728c:	d102      	bne.n	8007294 <_dtoa_r+0xadc>
 800728e:	f018 0f01 	tst.w	r8, #1
 8007292:	d1b4      	bne.n	80071fe <_dtoa_r+0xa46>
 8007294:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007298:	1e6a      	subs	r2, r5, #1
 800729a:	2b30      	cmp	r3, #48	; 0x30
 800729c:	f47f af0f 	bne.w	80070be <_dtoa_r+0x906>
 80072a0:	4615      	mov	r5, r2
 80072a2:	e7f7      	b.n	8007294 <_dtoa_r+0xadc>
 80072a4:	9b06      	ldr	r3, [sp, #24]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d105      	bne.n	80072b6 <_dtoa_r+0xafe>
 80072aa:	2331      	movs	r3, #49	; 0x31
 80072ac:	9a06      	ldr	r2, [sp, #24]
 80072ae:	f10a 0a01 	add.w	sl, sl, #1
 80072b2:	7013      	strb	r3, [r2, #0]
 80072b4:	e703      	b.n	80070be <_dtoa_r+0x906>
 80072b6:	4615      	mov	r5, r2
 80072b8:	e7a1      	b.n	80071fe <_dtoa_r+0xa46>
 80072ba:	4b17      	ldr	r3, [pc, #92]	; (8007318 <_dtoa_r+0xb60>)
 80072bc:	f7ff bae1 	b.w	8006882 <_dtoa_r+0xca>
 80072c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f47f aabb 	bne.w	800683e <_dtoa_r+0x86>
 80072c8:	4b14      	ldr	r3, [pc, #80]	; (800731c <_dtoa_r+0xb64>)
 80072ca:	f7ff bada 	b.w	8006882 <_dtoa_r+0xca>
 80072ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	f77f ae3f 	ble.w	8006f54 <_dtoa_r+0x79c>
 80072d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072d8:	9308      	str	r3, [sp, #32]
 80072da:	e653      	b.n	8006f84 <_dtoa_r+0x7cc>
 80072dc:	9b04      	ldr	r3, [sp, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	dc03      	bgt.n	80072ea <_dtoa_r+0xb32>
 80072e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	f73f aed5 	bgt.w	8007094 <_dtoa_r+0x8dc>
 80072ea:	9d06      	ldr	r5, [sp, #24]
 80072ec:	4631      	mov	r1, r6
 80072ee:	4658      	mov	r0, fp
 80072f0:	f7ff f9d2 	bl	8006698 <quorem>
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80072fa:	f805 8b01 	strb.w	r8, [r5], #1
 80072fe:	9a04      	ldr	r2, [sp, #16]
 8007300:	1aeb      	subs	r3, r5, r3
 8007302:	429a      	cmp	r2, r3
 8007304:	ddb5      	ble.n	8007272 <_dtoa_r+0xaba>
 8007306:	4659      	mov	r1, fp
 8007308:	2300      	movs	r3, #0
 800730a:	220a      	movs	r2, #10
 800730c:	4620      	mov	r0, r4
 800730e:	f000 fa5f 	bl	80077d0 <__multadd>
 8007312:	4683      	mov	fp, r0
 8007314:	e7ea      	b.n	80072ec <_dtoa_r+0xb34>
 8007316:	bf00      	nop
 8007318:	080083cc 	.word	0x080083cc
 800731c:	080083f0 	.word	0x080083f0

08007320 <__sflush_r>:
 8007320:	898a      	ldrh	r2, [r1, #12]
 8007322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	4605      	mov	r5, r0
 8007328:	0710      	lsls	r0, r2, #28
 800732a:	460c      	mov	r4, r1
 800732c:	d458      	bmi.n	80073e0 <__sflush_r+0xc0>
 800732e:	684b      	ldr	r3, [r1, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	dc05      	bgt.n	8007340 <__sflush_r+0x20>
 8007334:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	dc02      	bgt.n	8007340 <__sflush_r+0x20>
 800733a:	2000      	movs	r0, #0
 800733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007342:	2e00      	cmp	r6, #0
 8007344:	d0f9      	beq.n	800733a <__sflush_r+0x1a>
 8007346:	2300      	movs	r3, #0
 8007348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800734c:	682f      	ldr	r7, [r5, #0]
 800734e:	6a21      	ldr	r1, [r4, #32]
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	d032      	beq.n	80073ba <__sflush_r+0x9a>
 8007354:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	075a      	lsls	r2, r3, #29
 800735a:	d505      	bpl.n	8007368 <__sflush_r+0x48>
 800735c:	6863      	ldr	r3, [r4, #4]
 800735e:	1ac0      	subs	r0, r0, r3
 8007360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007362:	b10b      	cbz	r3, 8007368 <__sflush_r+0x48>
 8007364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007366:	1ac0      	subs	r0, r0, r3
 8007368:	2300      	movs	r3, #0
 800736a:	4602      	mov	r2, r0
 800736c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800736e:	6a21      	ldr	r1, [r4, #32]
 8007370:	4628      	mov	r0, r5
 8007372:	47b0      	blx	r6
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	d106      	bne.n	8007388 <__sflush_r+0x68>
 800737a:	6829      	ldr	r1, [r5, #0]
 800737c:	291d      	cmp	r1, #29
 800737e:	d848      	bhi.n	8007412 <__sflush_r+0xf2>
 8007380:	4a29      	ldr	r2, [pc, #164]	; (8007428 <__sflush_r+0x108>)
 8007382:	40ca      	lsrs	r2, r1
 8007384:	07d6      	lsls	r6, r2, #31
 8007386:	d544      	bpl.n	8007412 <__sflush_r+0xf2>
 8007388:	2200      	movs	r2, #0
 800738a:	6062      	str	r2, [r4, #4]
 800738c:	6922      	ldr	r2, [r4, #16]
 800738e:	04d9      	lsls	r1, r3, #19
 8007390:	6022      	str	r2, [r4, #0]
 8007392:	d504      	bpl.n	800739e <__sflush_r+0x7e>
 8007394:	1c42      	adds	r2, r0, #1
 8007396:	d101      	bne.n	800739c <__sflush_r+0x7c>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b903      	cbnz	r3, 800739e <__sflush_r+0x7e>
 800739c:	6560      	str	r0, [r4, #84]	; 0x54
 800739e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073a0:	602f      	str	r7, [r5, #0]
 80073a2:	2900      	cmp	r1, #0
 80073a4:	d0c9      	beq.n	800733a <__sflush_r+0x1a>
 80073a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073aa:	4299      	cmp	r1, r3
 80073ac:	d002      	beq.n	80073b4 <__sflush_r+0x94>
 80073ae:	4628      	mov	r0, r5
 80073b0:	f000 fcae 	bl	8007d10 <_free_r>
 80073b4:	2000      	movs	r0, #0
 80073b6:	6360      	str	r0, [r4, #52]	; 0x34
 80073b8:	e7c0      	b.n	800733c <__sflush_r+0x1c>
 80073ba:	2301      	movs	r3, #1
 80073bc:	4628      	mov	r0, r5
 80073be:	47b0      	blx	r6
 80073c0:	1c41      	adds	r1, r0, #1
 80073c2:	d1c8      	bne.n	8007356 <__sflush_r+0x36>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0c5      	beq.n	8007356 <__sflush_r+0x36>
 80073ca:	2b1d      	cmp	r3, #29
 80073cc:	d001      	beq.n	80073d2 <__sflush_r+0xb2>
 80073ce:	2b16      	cmp	r3, #22
 80073d0:	d101      	bne.n	80073d6 <__sflush_r+0xb6>
 80073d2:	602f      	str	r7, [r5, #0]
 80073d4:	e7b1      	b.n	800733a <__sflush_r+0x1a>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	e7ad      	b.n	800733c <__sflush_r+0x1c>
 80073e0:	690f      	ldr	r7, [r1, #16]
 80073e2:	2f00      	cmp	r7, #0
 80073e4:	d0a9      	beq.n	800733a <__sflush_r+0x1a>
 80073e6:	0793      	lsls	r3, r2, #30
 80073e8:	bf18      	it	ne
 80073ea:	2300      	movne	r3, #0
 80073ec:	680e      	ldr	r6, [r1, #0]
 80073ee:	bf08      	it	eq
 80073f0:	694b      	ldreq	r3, [r1, #20]
 80073f2:	eba6 0807 	sub.w	r8, r6, r7
 80073f6:	600f      	str	r7, [r1, #0]
 80073f8:	608b      	str	r3, [r1, #8]
 80073fa:	f1b8 0f00 	cmp.w	r8, #0
 80073fe:	dd9c      	ble.n	800733a <__sflush_r+0x1a>
 8007400:	4643      	mov	r3, r8
 8007402:	463a      	mov	r2, r7
 8007404:	6a21      	ldr	r1, [r4, #32]
 8007406:	4628      	mov	r0, r5
 8007408:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800740a:	47b0      	blx	r6
 800740c:	2800      	cmp	r0, #0
 800740e:	dc06      	bgt.n	800741e <__sflush_r+0xfe>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007416:	81a3      	strh	r3, [r4, #12]
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	e78e      	b.n	800733c <__sflush_r+0x1c>
 800741e:	4407      	add	r7, r0
 8007420:	eba8 0800 	sub.w	r8, r8, r0
 8007424:	e7e9      	b.n	80073fa <__sflush_r+0xda>
 8007426:	bf00      	nop
 8007428:	20400001 	.word	0x20400001

0800742c <_fflush_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	690b      	ldr	r3, [r1, #16]
 8007430:	4605      	mov	r5, r0
 8007432:	460c      	mov	r4, r1
 8007434:	b1db      	cbz	r3, 800746e <_fflush_r+0x42>
 8007436:	b118      	cbz	r0, 8007440 <_fflush_r+0x14>
 8007438:	6983      	ldr	r3, [r0, #24]
 800743a:	b90b      	cbnz	r3, 8007440 <_fflush_r+0x14>
 800743c:	f000 f860 	bl	8007500 <__sinit>
 8007440:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <_fflush_r+0x48>)
 8007442:	429c      	cmp	r4, r3
 8007444:	d109      	bne.n	800745a <_fflush_r+0x2e>
 8007446:	686c      	ldr	r4, [r5, #4]
 8007448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800744c:	b17b      	cbz	r3, 800746e <_fflush_r+0x42>
 800744e:	4621      	mov	r1, r4
 8007450:	4628      	mov	r0, r5
 8007452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007456:	f7ff bf63 	b.w	8007320 <__sflush_r>
 800745a:	4b07      	ldr	r3, [pc, #28]	; (8007478 <_fflush_r+0x4c>)
 800745c:	429c      	cmp	r4, r3
 800745e:	d101      	bne.n	8007464 <_fflush_r+0x38>
 8007460:	68ac      	ldr	r4, [r5, #8]
 8007462:	e7f1      	b.n	8007448 <_fflush_r+0x1c>
 8007464:	4b05      	ldr	r3, [pc, #20]	; (800747c <_fflush_r+0x50>)
 8007466:	429c      	cmp	r4, r3
 8007468:	bf08      	it	eq
 800746a:	68ec      	ldreq	r4, [r5, #12]
 800746c:	e7ec      	b.n	8007448 <_fflush_r+0x1c>
 800746e:	2000      	movs	r0, #0
 8007470:	bd38      	pop	{r3, r4, r5, pc}
 8007472:	bf00      	nop
 8007474:	08008420 	.word	0x08008420
 8007478:	08008440 	.word	0x08008440
 800747c:	08008400 	.word	0x08008400

08007480 <std>:
 8007480:	2300      	movs	r3, #0
 8007482:	b510      	push	{r4, lr}
 8007484:	4604      	mov	r4, r0
 8007486:	e9c0 3300 	strd	r3, r3, [r0]
 800748a:	6083      	str	r3, [r0, #8]
 800748c:	8181      	strh	r1, [r0, #12]
 800748e:	6643      	str	r3, [r0, #100]	; 0x64
 8007490:	81c2      	strh	r2, [r0, #14]
 8007492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007496:	6183      	str	r3, [r0, #24]
 8007498:	4619      	mov	r1, r3
 800749a:	2208      	movs	r2, #8
 800749c:	305c      	adds	r0, #92	; 0x5c
 800749e:	f7fe fab9 	bl	8005a14 <memset>
 80074a2:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <std+0x38>)
 80074a4:	6224      	str	r4, [r4, #32]
 80074a6:	6263      	str	r3, [r4, #36]	; 0x24
 80074a8:	4b04      	ldr	r3, [pc, #16]	; (80074bc <std+0x3c>)
 80074aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80074ac:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <std+0x40>)
 80074ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074b0:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <std+0x44>)
 80074b2:	6323      	str	r3, [r4, #48]	; 0x30
 80074b4:	bd10      	pop	{r4, pc}
 80074b6:	bf00      	nop
 80074b8:	080080f9 	.word	0x080080f9
 80074bc:	0800811b 	.word	0x0800811b
 80074c0:	08008153 	.word	0x08008153
 80074c4:	08008177 	.word	0x08008177

080074c8 <_cleanup_r>:
 80074c8:	4901      	ldr	r1, [pc, #4]	; (80074d0 <_cleanup_r+0x8>)
 80074ca:	f000 b885 	b.w	80075d8 <_fwalk_reent>
 80074ce:	bf00      	nop
 80074d0:	0800742d 	.word	0x0800742d

080074d4 <__sfmoreglue>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	2568      	movs	r5, #104	; 0x68
 80074d8:	1e4a      	subs	r2, r1, #1
 80074da:	4355      	muls	r5, r2
 80074dc:	460e      	mov	r6, r1
 80074de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074e2:	f000 fc61 	bl	8007da8 <_malloc_r>
 80074e6:	4604      	mov	r4, r0
 80074e8:	b140      	cbz	r0, 80074fc <__sfmoreglue+0x28>
 80074ea:	2100      	movs	r1, #0
 80074ec:	e9c0 1600 	strd	r1, r6, [r0]
 80074f0:	300c      	adds	r0, #12
 80074f2:	60a0      	str	r0, [r4, #8]
 80074f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074f8:	f7fe fa8c 	bl	8005a14 <memset>
 80074fc:	4620      	mov	r0, r4
 80074fe:	bd70      	pop	{r4, r5, r6, pc}

08007500 <__sinit>:
 8007500:	6983      	ldr	r3, [r0, #24]
 8007502:	b510      	push	{r4, lr}
 8007504:	4604      	mov	r4, r0
 8007506:	bb33      	cbnz	r3, 8007556 <__sinit+0x56>
 8007508:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800750c:	6503      	str	r3, [r0, #80]	; 0x50
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <__sinit+0x58>)
 8007510:	4a12      	ldr	r2, [pc, #72]	; (800755c <__sinit+0x5c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6282      	str	r2, [r0, #40]	; 0x28
 8007516:	4298      	cmp	r0, r3
 8007518:	bf04      	itt	eq
 800751a:	2301      	moveq	r3, #1
 800751c:	6183      	streq	r3, [r0, #24]
 800751e:	f000 f81f 	bl	8007560 <__sfp>
 8007522:	6060      	str	r0, [r4, #4]
 8007524:	4620      	mov	r0, r4
 8007526:	f000 f81b 	bl	8007560 <__sfp>
 800752a:	60a0      	str	r0, [r4, #8]
 800752c:	4620      	mov	r0, r4
 800752e:	f000 f817 	bl	8007560 <__sfp>
 8007532:	2200      	movs	r2, #0
 8007534:	60e0      	str	r0, [r4, #12]
 8007536:	2104      	movs	r1, #4
 8007538:	6860      	ldr	r0, [r4, #4]
 800753a:	f7ff ffa1 	bl	8007480 <std>
 800753e:	2201      	movs	r2, #1
 8007540:	2109      	movs	r1, #9
 8007542:	68a0      	ldr	r0, [r4, #8]
 8007544:	f7ff ff9c 	bl	8007480 <std>
 8007548:	2202      	movs	r2, #2
 800754a:	2112      	movs	r1, #18
 800754c:	68e0      	ldr	r0, [r4, #12]
 800754e:	f7ff ff97 	bl	8007480 <std>
 8007552:	2301      	movs	r3, #1
 8007554:	61a3      	str	r3, [r4, #24]
 8007556:	bd10      	pop	{r4, pc}
 8007558:	080083b8 	.word	0x080083b8
 800755c:	080074c9 	.word	0x080074c9

08007560 <__sfp>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <__sfp+0x70>)
 8007564:	4607      	mov	r7, r0
 8007566:	681e      	ldr	r6, [r3, #0]
 8007568:	69b3      	ldr	r3, [r6, #24]
 800756a:	b913      	cbnz	r3, 8007572 <__sfp+0x12>
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff ffc7 	bl	8007500 <__sinit>
 8007572:	3648      	adds	r6, #72	; 0x48
 8007574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007578:	3b01      	subs	r3, #1
 800757a:	d503      	bpl.n	8007584 <__sfp+0x24>
 800757c:	6833      	ldr	r3, [r6, #0]
 800757e:	b133      	cbz	r3, 800758e <__sfp+0x2e>
 8007580:	6836      	ldr	r6, [r6, #0]
 8007582:	e7f7      	b.n	8007574 <__sfp+0x14>
 8007584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007588:	b16d      	cbz	r5, 80075a6 <__sfp+0x46>
 800758a:	3468      	adds	r4, #104	; 0x68
 800758c:	e7f4      	b.n	8007578 <__sfp+0x18>
 800758e:	2104      	movs	r1, #4
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff ff9f 	bl	80074d4 <__sfmoreglue>
 8007596:	6030      	str	r0, [r6, #0]
 8007598:	2800      	cmp	r0, #0
 800759a:	d1f1      	bne.n	8007580 <__sfp+0x20>
 800759c:	230c      	movs	r3, #12
 800759e:	4604      	mov	r4, r0
 80075a0:	603b      	str	r3, [r7, #0]
 80075a2:	4620      	mov	r0, r4
 80075a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <__sfp+0x74>)
 80075a8:	6665      	str	r5, [r4, #100]	; 0x64
 80075aa:	e9c4 5500 	strd	r5, r5, [r4]
 80075ae:	60a5      	str	r5, [r4, #8]
 80075b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80075b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80075b8:	2208      	movs	r2, #8
 80075ba:	4629      	mov	r1, r5
 80075bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075c0:	f7fe fa28 	bl	8005a14 <memset>
 80075c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075cc:	e7e9      	b.n	80075a2 <__sfp+0x42>
 80075ce:	bf00      	nop
 80075d0:	080083b8 	.word	0x080083b8
 80075d4:	ffff0001 	.word	0xffff0001

080075d8 <_fwalk_reent>:
 80075d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075dc:	4680      	mov	r8, r0
 80075de:	4689      	mov	r9, r1
 80075e0:	2600      	movs	r6, #0
 80075e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075e6:	b914      	cbnz	r4, 80075ee <_fwalk_reent+0x16>
 80075e8:	4630      	mov	r0, r6
 80075ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80075f2:	3f01      	subs	r7, #1
 80075f4:	d501      	bpl.n	80075fa <_fwalk_reent+0x22>
 80075f6:	6824      	ldr	r4, [r4, #0]
 80075f8:	e7f5      	b.n	80075e6 <_fwalk_reent+0xe>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d907      	bls.n	8007610 <_fwalk_reent+0x38>
 8007600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007604:	3301      	adds	r3, #1
 8007606:	d003      	beq.n	8007610 <_fwalk_reent+0x38>
 8007608:	4629      	mov	r1, r5
 800760a:	4640      	mov	r0, r8
 800760c:	47c8      	blx	r9
 800760e:	4306      	orrs	r6, r0
 8007610:	3568      	adds	r5, #104	; 0x68
 8007612:	e7ee      	b.n	80075f2 <_fwalk_reent+0x1a>

08007614 <_localeconv_r>:
 8007614:	4b04      	ldr	r3, [pc, #16]	; (8007628 <_localeconv_r+0x14>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a18      	ldr	r0, [r3, #32]
 800761a:	4b04      	ldr	r3, [pc, #16]	; (800762c <_localeconv_r+0x18>)
 800761c:	2800      	cmp	r0, #0
 800761e:	bf08      	it	eq
 8007620:	4618      	moveq	r0, r3
 8007622:	30f0      	adds	r0, #240	; 0xf0
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000018 	.word	0x20000018
 800762c:	2000007c 	.word	0x2000007c

08007630 <__swhatbuf_r>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	460e      	mov	r6, r1
 8007634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007638:	b096      	sub	sp, #88	; 0x58
 800763a:	2900      	cmp	r1, #0
 800763c:	4614      	mov	r4, r2
 800763e:	461d      	mov	r5, r3
 8007640:	da07      	bge.n	8007652 <__swhatbuf_r+0x22>
 8007642:	2300      	movs	r3, #0
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	89b3      	ldrh	r3, [r6, #12]
 8007648:	061a      	lsls	r2, r3, #24
 800764a:	d410      	bmi.n	800766e <__swhatbuf_r+0x3e>
 800764c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007650:	e00e      	b.n	8007670 <__swhatbuf_r+0x40>
 8007652:	466a      	mov	r2, sp
 8007654:	f000 fdb6 	bl	80081c4 <_fstat_r>
 8007658:	2800      	cmp	r0, #0
 800765a:	dbf2      	blt.n	8007642 <__swhatbuf_r+0x12>
 800765c:	9a01      	ldr	r2, [sp, #4]
 800765e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007662:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007666:	425a      	negs	r2, r3
 8007668:	415a      	adcs	r2, r3
 800766a:	602a      	str	r2, [r5, #0]
 800766c:	e7ee      	b.n	800764c <__swhatbuf_r+0x1c>
 800766e:	2340      	movs	r3, #64	; 0x40
 8007670:	2000      	movs	r0, #0
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	b016      	add	sp, #88	; 0x58
 8007676:	bd70      	pop	{r4, r5, r6, pc}

08007678 <__smakebuf_r>:
 8007678:	898b      	ldrh	r3, [r1, #12]
 800767a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800767c:	079d      	lsls	r5, r3, #30
 800767e:	4606      	mov	r6, r0
 8007680:	460c      	mov	r4, r1
 8007682:	d507      	bpl.n	8007694 <__smakebuf_r+0x1c>
 8007684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	6123      	str	r3, [r4, #16]
 800768c:	2301      	movs	r3, #1
 800768e:	6163      	str	r3, [r4, #20]
 8007690:	b002      	add	sp, #8
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	ab01      	add	r3, sp, #4
 8007696:	466a      	mov	r2, sp
 8007698:	f7ff ffca 	bl	8007630 <__swhatbuf_r>
 800769c:	9900      	ldr	r1, [sp, #0]
 800769e:	4605      	mov	r5, r0
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 fb81 	bl	8007da8 <_malloc_r>
 80076a6:	b948      	cbnz	r0, 80076bc <__smakebuf_r+0x44>
 80076a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ac:	059a      	lsls	r2, r3, #22
 80076ae:	d4ef      	bmi.n	8007690 <__smakebuf_r+0x18>
 80076b0:	f023 0303 	bic.w	r3, r3, #3
 80076b4:	f043 0302 	orr.w	r3, r3, #2
 80076b8:	81a3      	strh	r3, [r4, #12]
 80076ba:	e7e3      	b.n	8007684 <__smakebuf_r+0xc>
 80076bc:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <__smakebuf_r+0x7c>)
 80076be:	62b3      	str	r3, [r6, #40]	; 0x28
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	6020      	str	r0, [r4, #0]
 80076c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	9b00      	ldr	r3, [sp, #0]
 80076cc:	6120      	str	r0, [r4, #16]
 80076ce:	6163      	str	r3, [r4, #20]
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	b15b      	cbz	r3, 80076ec <__smakebuf_r+0x74>
 80076d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 fd85 	bl	80081e8 <_isatty_r>
 80076de:	b128      	cbz	r0, 80076ec <__smakebuf_r+0x74>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	431d      	orrs	r5, r3
 80076f0:	81a5      	strh	r5, [r4, #12]
 80076f2:	e7cd      	b.n	8007690 <__smakebuf_r+0x18>
 80076f4:	080074c9 	.word	0x080074c9

080076f8 <malloc>:
 80076f8:	4b02      	ldr	r3, [pc, #8]	; (8007704 <malloc+0xc>)
 80076fa:	4601      	mov	r1, r0
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	f000 bb53 	b.w	8007da8 <_malloc_r>
 8007702:	bf00      	nop
 8007704:	20000018 	.word	0x20000018

08007708 <memchr>:
 8007708:	b510      	push	{r4, lr}
 800770a:	b2c9      	uxtb	r1, r1
 800770c:	4402      	add	r2, r0
 800770e:	4290      	cmp	r0, r2
 8007710:	4603      	mov	r3, r0
 8007712:	d101      	bne.n	8007718 <memchr+0x10>
 8007714:	2300      	movs	r3, #0
 8007716:	e003      	b.n	8007720 <memchr+0x18>
 8007718:	781c      	ldrb	r4, [r3, #0]
 800771a:	3001      	adds	r0, #1
 800771c:	428c      	cmp	r4, r1
 800771e:	d1f6      	bne.n	800770e <memchr+0x6>
 8007720:	4618      	mov	r0, r3
 8007722:	bd10      	pop	{r4, pc}

08007724 <memcpy>:
 8007724:	b510      	push	{r4, lr}
 8007726:	1e43      	subs	r3, r0, #1
 8007728:	440a      	add	r2, r1
 800772a:	4291      	cmp	r1, r2
 800772c:	d100      	bne.n	8007730 <memcpy+0xc>
 800772e:	bd10      	pop	{r4, pc}
 8007730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007738:	e7f7      	b.n	800772a <memcpy+0x6>

0800773a <_Balloc>:
 800773a:	b570      	push	{r4, r5, r6, lr}
 800773c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800773e:	4604      	mov	r4, r0
 8007740:	460e      	mov	r6, r1
 8007742:	b93d      	cbnz	r5, 8007754 <_Balloc+0x1a>
 8007744:	2010      	movs	r0, #16
 8007746:	f7ff ffd7 	bl	80076f8 <malloc>
 800774a:	6260      	str	r0, [r4, #36]	; 0x24
 800774c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007750:	6005      	str	r5, [r0, #0]
 8007752:	60c5      	str	r5, [r0, #12]
 8007754:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007756:	68eb      	ldr	r3, [r5, #12]
 8007758:	b183      	cbz	r3, 800777c <_Balloc+0x42>
 800775a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007762:	b9b8      	cbnz	r0, 8007794 <_Balloc+0x5a>
 8007764:	2101      	movs	r1, #1
 8007766:	fa01 f506 	lsl.w	r5, r1, r6
 800776a:	1d6a      	adds	r2, r5, #5
 800776c:	0092      	lsls	r2, r2, #2
 800776e:	4620      	mov	r0, r4
 8007770:	f000 fabf 	bl	8007cf2 <_calloc_r>
 8007774:	b160      	cbz	r0, 8007790 <_Balloc+0x56>
 8007776:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800777a:	e00e      	b.n	800779a <_Balloc+0x60>
 800777c:	2221      	movs	r2, #33	; 0x21
 800777e:	2104      	movs	r1, #4
 8007780:	4620      	mov	r0, r4
 8007782:	f000 fab6 	bl	8007cf2 <_calloc_r>
 8007786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007788:	60e8      	str	r0, [r5, #12]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e4      	bne.n	800775a <_Balloc+0x20>
 8007790:	2000      	movs	r0, #0
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	6802      	ldr	r2, [r0, #0]
 8007796:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800779a:	2300      	movs	r3, #0
 800779c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077a0:	e7f7      	b.n	8007792 <_Balloc+0x58>

080077a2 <_Bfree>:
 80077a2:	b570      	push	{r4, r5, r6, lr}
 80077a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80077a6:	4606      	mov	r6, r0
 80077a8:	460d      	mov	r5, r1
 80077aa:	b93c      	cbnz	r4, 80077bc <_Bfree+0x1a>
 80077ac:	2010      	movs	r0, #16
 80077ae:	f7ff ffa3 	bl	80076f8 <malloc>
 80077b2:	6270      	str	r0, [r6, #36]	; 0x24
 80077b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077b8:	6004      	str	r4, [r0, #0]
 80077ba:	60c4      	str	r4, [r0, #12]
 80077bc:	b13d      	cbz	r5, 80077ce <_Bfree+0x2c>
 80077be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80077c0:	686a      	ldr	r2, [r5, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077c8:	6029      	str	r1, [r5, #0]
 80077ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80077ce:	bd70      	pop	{r4, r5, r6, pc}

080077d0 <__multadd>:
 80077d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d4:	461f      	mov	r7, r3
 80077d6:	4606      	mov	r6, r0
 80077d8:	460c      	mov	r4, r1
 80077da:	2300      	movs	r3, #0
 80077dc:	690d      	ldr	r5, [r1, #16]
 80077de:	f101 0c14 	add.w	ip, r1, #20
 80077e2:	f8dc 0000 	ldr.w	r0, [ip]
 80077e6:	3301      	adds	r3, #1
 80077e8:	b281      	uxth	r1, r0
 80077ea:	fb02 7101 	mla	r1, r2, r1, r7
 80077ee:	0c00      	lsrs	r0, r0, #16
 80077f0:	0c0f      	lsrs	r7, r1, #16
 80077f2:	fb02 7000 	mla	r0, r2, r0, r7
 80077f6:	b289      	uxth	r1, r1
 80077f8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80077fc:	429d      	cmp	r5, r3
 80077fe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007802:	f84c 1b04 	str.w	r1, [ip], #4
 8007806:	dcec      	bgt.n	80077e2 <__multadd+0x12>
 8007808:	b1d7      	cbz	r7, 8007840 <__multadd+0x70>
 800780a:	68a3      	ldr	r3, [r4, #8]
 800780c:	42ab      	cmp	r3, r5
 800780e:	dc12      	bgt.n	8007836 <__multadd+0x66>
 8007810:	6861      	ldr	r1, [r4, #4]
 8007812:	4630      	mov	r0, r6
 8007814:	3101      	adds	r1, #1
 8007816:	f7ff ff90 	bl	800773a <_Balloc>
 800781a:	4680      	mov	r8, r0
 800781c:	6922      	ldr	r2, [r4, #16]
 800781e:	f104 010c 	add.w	r1, r4, #12
 8007822:	3202      	adds	r2, #2
 8007824:	0092      	lsls	r2, r2, #2
 8007826:	300c      	adds	r0, #12
 8007828:	f7ff ff7c 	bl	8007724 <memcpy>
 800782c:	4621      	mov	r1, r4
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff ffb7 	bl	80077a2 <_Bfree>
 8007834:	4644      	mov	r4, r8
 8007836:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800783a:	3501      	adds	r5, #1
 800783c:	615f      	str	r7, [r3, #20]
 800783e:	6125      	str	r5, [r4, #16]
 8007840:	4620      	mov	r0, r4
 8007842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007846 <__hi0bits>:
 8007846:	0c02      	lsrs	r2, r0, #16
 8007848:	0412      	lsls	r2, r2, #16
 800784a:	4603      	mov	r3, r0
 800784c:	b9b2      	cbnz	r2, 800787c <__hi0bits+0x36>
 800784e:	0403      	lsls	r3, r0, #16
 8007850:	2010      	movs	r0, #16
 8007852:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007856:	bf04      	itt	eq
 8007858:	021b      	lsleq	r3, r3, #8
 800785a:	3008      	addeq	r0, #8
 800785c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007860:	bf04      	itt	eq
 8007862:	011b      	lsleq	r3, r3, #4
 8007864:	3004      	addeq	r0, #4
 8007866:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800786a:	bf04      	itt	eq
 800786c:	009b      	lsleq	r3, r3, #2
 800786e:	3002      	addeq	r0, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	db06      	blt.n	8007882 <__hi0bits+0x3c>
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	d503      	bpl.n	8007880 <__hi0bits+0x3a>
 8007878:	3001      	adds	r0, #1
 800787a:	4770      	bx	lr
 800787c:	2000      	movs	r0, #0
 800787e:	e7e8      	b.n	8007852 <__hi0bits+0xc>
 8007880:	2020      	movs	r0, #32
 8007882:	4770      	bx	lr

08007884 <__lo0bits>:
 8007884:	6803      	ldr	r3, [r0, #0]
 8007886:	4601      	mov	r1, r0
 8007888:	f013 0207 	ands.w	r2, r3, #7
 800788c:	d00b      	beq.n	80078a6 <__lo0bits+0x22>
 800788e:	07da      	lsls	r2, r3, #31
 8007890:	d423      	bmi.n	80078da <__lo0bits+0x56>
 8007892:	0798      	lsls	r0, r3, #30
 8007894:	bf49      	itett	mi
 8007896:	085b      	lsrmi	r3, r3, #1
 8007898:	089b      	lsrpl	r3, r3, #2
 800789a:	2001      	movmi	r0, #1
 800789c:	600b      	strmi	r3, [r1, #0]
 800789e:	bf5c      	itt	pl
 80078a0:	600b      	strpl	r3, [r1, #0]
 80078a2:	2002      	movpl	r0, #2
 80078a4:	4770      	bx	lr
 80078a6:	b298      	uxth	r0, r3
 80078a8:	b9a8      	cbnz	r0, 80078d6 <__lo0bits+0x52>
 80078aa:	2010      	movs	r0, #16
 80078ac:	0c1b      	lsrs	r3, r3, #16
 80078ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078b2:	bf04      	itt	eq
 80078b4:	0a1b      	lsreq	r3, r3, #8
 80078b6:	3008      	addeq	r0, #8
 80078b8:	071a      	lsls	r2, r3, #28
 80078ba:	bf04      	itt	eq
 80078bc:	091b      	lsreq	r3, r3, #4
 80078be:	3004      	addeq	r0, #4
 80078c0:	079a      	lsls	r2, r3, #30
 80078c2:	bf04      	itt	eq
 80078c4:	089b      	lsreq	r3, r3, #2
 80078c6:	3002      	addeq	r0, #2
 80078c8:	07da      	lsls	r2, r3, #31
 80078ca:	d402      	bmi.n	80078d2 <__lo0bits+0x4e>
 80078cc:	085b      	lsrs	r3, r3, #1
 80078ce:	d006      	beq.n	80078de <__lo0bits+0x5a>
 80078d0:	3001      	adds	r0, #1
 80078d2:	600b      	str	r3, [r1, #0]
 80078d4:	4770      	bx	lr
 80078d6:	4610      	mov	r0, r2
 80078d8:	e7e9      	b.n	80078ae <__lo0bits+0x2a>
 80078da:	2000      	movs	r0, #0
 80078dc:	4770      	bx	lr
 80078de:	2020      	movs	r0, #32
 80078e0:	4770      	bx	lr

080078e2 <__i2b>:
 80078e2:	b510      	push	{r4, lr}
 80078e4:	460c      	mov	r4, r1
 80078e6:	2101      	movs	r1, #1
 80078e8:	f7ff ff27 	bl	800773a <_Balloc>
 80078ec:	2201      	movs	r2, #1
 80078ee:	6144      	str	r4, [r0, #20]
 80078f0:	6102      	str	r2, [r0, #16]
 80078f2:	bd10      	pop	{r4, pc}

080078f4 <__multiply>:
 80078f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f8:	4614      	mov	r4, r2
 80078fa:	690a      	ldr	r2, [r1, #16]
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	4688      	mov	r8, r1
 8007900:	429a      	cmp	r2, r3
 8007902:	bfbe      	ittt	lt
 8007904:	460b      	movlt	r3, r1
 8007906:	46a0      	movlt	r8, r4
 8007908:	461c      	movlt	r4, r3
 800790a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800790e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007912:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007916:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800791a:	eb07 0609 	add.w	r6, r7, r9
 800791e:	42b3      	cmp	r3, r6
 8007920:	bfb8      	it	lt
 8007922:	3101      	addlt	r1, #1
 8007924:	f7ff ff09 	bl	800773a <_Balloc>
 8007928:	f100 0514 	add.w	r5, r0, #20
 800792c:	462b      	mov	r3, r5
 800792e:	2200      	movs	r2, #0
 8007930:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007934:	4573      	cmp	r3, lr
 8007936:	d316      	bcc.n	8007966 <__multiply+0x72>
 8007938:	f104 0214 	add.w	r2, r4, #20
 800793c:	f108 0114 	add.w	r1, r8, #20
 8007940:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007944:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	9b00      	ldr	r3, [sp, #0]
 800794c:	9201      	str	r2, [sp, #4]
 800794e:	4293      	cmp	r3, r2
 8007950:	d80c      	bhi.n	800796c <__multiply+0x78>
 8007952:	2e00      	cmp	r6, #0
 8007954:	dd03      	ble.n	800795e <__multiply+0x6a>
 8007956:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800795a:	2b00      	cmp	r3, #0
 800795c:	d05d      	beq.n	8007a1a <__multiply+0x126>
 800795e:	6106      	str	r6, [r0, #16]
 8007960:	b003      	add	sp, #12
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	f843 2b04 	str.w	r2, [r3], #4
 800796a:	e7e3      	b.n	8007934 <__multiply+0x40>
 800796c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007970:	f1bb 0f00 	cmp.w	fp, #0
 8007974:	d023      	beq.n	80079be <__multiply+0xca>
 8007976:	4689      	mov	r9, r1
 8007978:	46ac      	mov	ip, r5
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007982:	f8dc a000 	ldr.w	sl, [ip]
 8007986:	b2a3      	uxth	r3, r4
 8007988:	fa1f fa8a 	uxth.w	sl, sl
 800798c:	fb0b a303 	mla	r3, fp, r3, sl
 8007990:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007994:	f8dc 4000 	ldr.w	r4, [ip]
 8007998:	4443      	add	r3, r8
 800799a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800799e:	fb0b 840a 	mla	r4, fp, sl, r8
 80079a2:	46e2      	mov	sl, ip
 80079a4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80079ae:	454f      	cmp	r7, r9
 80079b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80079b4:	f84a 3b04 	str.w	r3, [sl], #4
 80079b8:	d82b      	bhi.n	8007a12 <__multiply+0x11e>
 80079ba:	f8cc 8004 	str.w	r8, [ip, #4]
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	3204      	adds	r2, #4
 80079c2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80079c6:	f1ba 0f00 	cmp.w	sl, #0
 80079ca:	d020      	beq.n	8007a0e <__multiply+0x11a>
 80079cc:	4689      	mov	r9, r1
 80079ce:	46a8      	mov	r8, r5
 80079d0:	f04f 0b00 	mov.w	fp, #0
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	f8b9 c000 	ldrh.w	ip, [r9]
 80079da:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	fb0a 440c 	mla	r4, sl, ip, r4
 80079e4:	46c4      	mov	ip, r8
 80079e6:	445c      	add	r4, fp
 80079e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80079ec:	f84c 3b04 	str.w	r3, [ip], #4
 80079f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80079f4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	fb0a b303 	mla	r3, sl, r3, fp
 80079fe:	454f      	cmp	r7, r9
 8007a00:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007a04:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007a08:	d805      	bhi.n	8007a16 <__multiply+0x122>
 8007a0a:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a0e:	3504      	adds	r5, #4
 8007a10:	e79b      	b.n	800794a <__multiply+0x56>
 8007a12:	46d4      	mov	ip, sl
 8007a14:	e7b3      	b.n	800797e <__multiply+0x8a>
 8007a16:	46e0      	mov	r8, ip
 8007a18:	e7dd      	b.n	80079d6 <__multiply+0xe2>
 8007a1a:	3e01      	subs	r6, #1
 8007a1c:	e799      	b.n	8007952 <__multiply+0x5e>
	...

08007a20 <__pow5mult>:
 8007a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	4615      	mov	r5, r2
 8007a26:	f012 0203 	ands.w	r2, r2, #3
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	460f      	mov	r7, r1
 8007a2e:	d007      	beq.n	8007a40 <__pow5mult+0x20>
 8007a30:	4c21      	ldr	r4, [pc, #132]	; (8007ab8 <__pow5mult+0x98>)
 8007a32:	3a01      	subs	r2, #1
 8007a34:	2300      	movs	r3, #0
 8007a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a3a:	f7ff fec9 	bl	80077d0 <__multadd>
 8007a3e:	4607      	mov	r7, r0
 8007a40:	10ad      	asrs	r5, r5, #2
 8007a42:	d035      	beq.n	8007ab0 <__pow5mult+0x90>
 8007a44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a46:	b93c      	cbnz	r4, 8007a58 <__pow5mult+0x38>
 8007a48:	2010      	movs	r0, #16
 8007a4a:	f7ff fe55 	bl	80076f8 <malloc>
 8007a4e:	6270      	str	r0, [r6, #36]	; 0x24
 8007a50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a54:	6004      	str	r4, [r0, #0]
 8007a56:	60c4      	str	r4, [r0, #12]
 8007a58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a60:	b94c      	cbnz	r4, 8007a76 <__pow5mult+0x56>
 8007a62:	f240 2171 	movw	r1, #625	; 0x271
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ff3b 	bl	80078e2 <__i2b>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	f04f 0800 	mov.w	r8, #0
 8007a7a:	07eb      	lsls	r3, r5, #31
 8007a7c:	d50a      	bpl.n	8007a94 <__pow5mult+0x74>
 8007a7e:	4639      	mov	r1, r7
 8007a80:	4622      	mov	r2, r4
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ff36 	bl	80078f4 <__multiply>
 8007a88:	4681      	mov	r9, r0
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7ff fe88 	bl	80077a2 <_Bfree>
 8007a92:	464f      	mov	r7, r9
 8007a94:	106d      	asrs	r5, r5, #1
 8007a96:	d00b      	beq.n	8007ab0 <__pow5mult+0x90>
 8007a98:	6820      	ldr	r0, [r4, #0]
 8007a9a:	b938      	cbnz	r0, 8007aac <__pow5mult+0x8c>
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7ff ff27 	bl	80078f4 <__multiply>
 8007aa6:	6020      	str	r0, [r4, #0]
 8007aa8:	f8c0 8000 	str.w	r8, [r0]
 8007aac:	4604      	mov	r4, r0
 8007aae:	e7e4      	b.n	8007a7a <__pow5mult+0x5a>
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08008550 	.word	0x08008550

08007abc <__lshift>:
 8007abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	4607      	mov	r7, r0
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007acc:	eb0a 0903 	add.w	r9, sl, r3
 8007ad0:	6849      	ldr	r1, [r1, #4]
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	f109 0501 	add.w	r5, r9, #1
 8007ad8:	42ab      	cmp	r3, r5
 8007ada:	db32      	blt.n	8007b42 <__lshift+0x86>
 8007adc:	4638      	mov	r0, r7
 8007ade:	f7ff fe2c 	bl	800773a <_Balloc>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f100 0114 	add.w	r1, r0, #20
 8007aec:	4553      	cmp	r3, sl
 8007aee:	db2b      	blt.n	8007b48 <__lshift+0x8c>
 8007af0:	6920      	ldr	r0, [r4, #16]
 8007af2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007af6:	f104 0314 	add.w	r3, r4, #20
 8007afa:	f016 021f 	ands.w	r2, r6, #31
 8007afe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b06:	d025      	beq.n	8007b54 <__lshift+0x98>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	f1c2 0e20 	rsb	lr, r2, #32
 8007b0e:	468a      	mov	sl, r1
 8007b10:	681e      	ldr	r6, [r3, #0]
 8007b12:	4096      	lsls	r6, r2
 8007b14:	4330      	orrs	r0, r6
 8007b16:	f84a 0b04 	str.w	r0, [sl], #4
 8007b1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8007b1e:	459c      	cmp	ip, r3
 8007b20:	fa20 f00e 	lsr.w	r0, r0, lr
 8007b24:	d814      	bhi.n	8007b50 <__lshift+0x94>
 8007b26:	6048      	str	r0, [r1, #4]
 8007b28:	b108      	cbz	r0, 8007b2e <__lshift+0x72>
 8007b2a:	f109 0502 	add.w	r5, r9, #2
 8007b2e:	3d01      	subs	r5, #1
 8007b30:	4638      	mov	r0, r7
 8007b32:	f8c8 5010 	str.w	r5, [r8, #16]
 8007b36:	4621      	mov	r1, r4
 8007b38:	f7ff fe33 	bl	80077a2 <_Bfree>
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b42:	3101      	adds	r1, #1
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	e7c7      	b.n	8007ad8 <__lshift+0x1c>
 8007b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	e7cd      	b.n	8007aec <__lshift+0x30>
 8007b50:	4651      	mov	r1, sl
 8007b52:	e7dc      	b.n	8007b0e <__lshift+0x52>
 8007b54:	3904      	subs	r1, #4
 8007b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b5a:	459c      	cmp	ip, r3
 8007b5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b60:	d8f9      	bhi.n	8007b56 <__lshift+0x9a>
 8007b62:	e7e4      	b.n	8007b2e <__lshift+0x72>

08007b64 <__mcmp>:
 8007b64:	6903      	ldr	r3, [r0, #16]
 8007b66:	690a      	ldr	r2, [r1, #16]
 8007b68:	b530      	push	{r4, r5, lr}
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	d10c      	bne.n	8007b88 <__mcmp+0x24>
 8007b6e:	0092      	lsls	r2, r2, #2
 8007b70:	3014      	adds	r0, #20
 8007b72:	3114      	adds	r1, #20
 8007b74:	1884      	adds	r4, r0, r2
 8007b76:	4411      	add	r1, r2
 8007b78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b80:	4295      	cmp	r5, r2
 8007b82:	d003      	beq.n	8007b8c <__mcmp+0x28>
 8007b84:	d305      	bcc.n	8007b92 <__mcmp+0x2e>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4618      	mov	r0, r3
 8007b8a:	bd30      	pop	{r4, r5, pc}
 8007b8c:	42a0      	cmp	r0, r4
 8007b8e:	d3f3      	bcc.n	8007b78 <__mcmp+0x14>
 8007b90:	e7fa      	b.n	8007b88 <__mcmp+0x24>
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	e7f7      	b.n	8007b88 <__mcmp+0x24>

08007b98 <__mdiff>:
 8007b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	f7ff ffdd 	bl	8007b64 <__mcmp>
 8007baa:	1e06      	subs	r6, r0, #0
 8007bac:	d108      	bne.n	8007bc0 <__mdiff+0x28>
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f7ff fdc2 	bl	800773a <_Balloc>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc0:	bfa4      	itt	ge
 8007bc2:	4623      	movge	r3, r4
 8007bc4:	462c      	movge	r4, r5
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	6861      	ldr	r1, [r4, #4]
 8007bca:	bfa6      	itte	ge
 8007bcc:	461d      	movge	r5, r3
 8007bce:	2600      	movge	r6, #0
 8007bd0:	2601      	movlt	r6, #1
 8007bd2:	f7ff fdb2 	bl	800773a <_Balloc>
 8007bd6:	f04f 0e00 	mov.w	lr, #0
 8007bda:	60c6      	str	r6, [r0, #12]
 8007bdc:	692b      	ldr	r3, [r5, #16]
 8007bde:	6926      	ldr	r6, [r4, #16]
 8007be0:	f104 0214 	add.w	r2, r4, #20
 8007be4:	f105 0914 	add.w	r9, r5, #20
 8007be8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007bec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007bf0:	f100 0114 	add.w	r1, r0, #20
 8007bf4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007bf8:	f859 5b04 	ldr.w	r5, [r9], #4
 8007bfc:	fa1f f38a 	uxth.w	r3, sl
 8007c00:	4473      	add	r3, lr
 8007c02:	b2ac      	uxth	r4, r5
 8007c04:	1b1b      	subs	r3, r3, r4
 8007c06:	0c2c      	lsrs	r4, r5, #16
 8007c08:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007c0c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007c16:	45c8      	cmp	r8, r9
 8007c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007c1c:	4694      	mov	ip, r2
 8007c1e:	f841 4b04 	str.w	r4, [r1], #4
 8007c22:	d8e7      	bhi.n	8007bf4 <__mdiff+0x5c>
 8007c24:	45bc      	cmp	ip, r7
 8007c26:	d304      	bcc.n	8007c32 <__mdiff+0x9a>
 8007c28:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007c2c:	b183      	cbz	r3, 8007c50 <__mdiff+0xb8>
 8007c2e:	6106      	str	r6, [r0, #16]
 8007c30:	e7c4      	b.n	8007bbc <__mdiff+0x24>
 8007c32:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007c36:	b2a2      	uxth	r2, r4
 8007c38:	4472      	add	r2, lr
 8007c3a:	1413      	asrs	r3, r2, #16
 8007c3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007c40:	b292      	uxth	r2, r2
 8007c42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c46:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007c4a:	f841 2b04 	str.w	r2, [r1], #4
 8007c4e:	e7e9      	b.n	8007c24 <__mdiff+0x8c>
 8007c50:	3e01      	subs	r6, #1
 8007c52:	e7e9      	b.n	8007c28 <__mdiff+0x90>

08007c54 <__d2b>:
 8007c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007c58:	461c      	mov	r4, r3
 8007c5a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007c5e:	2101      	movs	r1, #1
 8007c60:	4690      	mov	r8, r2
 8007c62:	f7ff fd6a 	bl	800773a <_Balloc>
 8007c66:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007c6a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007c6e:	4607      	mov	r7, r0
 8007c70:	bb34      	cbnz	r4, 8007cc0 <__d2b+0x6c>
 8007c72:	9201      	str	r2, [sp, #4]
 8007c74:	f1b8 0200 	subs.w	r2, r8, #0
 8007c78:	d027      	beq.n	8007cca <__d2b+0x76>
 8007c7a:	a802      	add	r0, sp, #8
 8007c7c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007c80:	f7ff fe00 	bl	8007884 <__lo0bits>
 8007c84:	9900      	ldr	r1, [sp, #0]
 8007c86:	b1f0      	cbz	r0, 8007cc6 <__d2b+0x72>
 8007c88:	9a01      	ldr	r2, [sp, #4]
 8007c8a:	f1c0 0320 	rsb	r3, r0, #32
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	430b      	orrs	r3, r1
 8007c94:	40c2      	lsrs	r2, r0
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	9201      	str	r2, [sp, #4]
 8007c9a:	9b01      	ldr	r3, [sp, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf14      	ite	ne
 8007ca0:	2102      	movne	r1, #2
 8007ca2:	2101      	moveq	r1, #1
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	6139      	str	r1, [r7, #16]
 8007ca8:	b1c4      	cbz	r4, 8007cdc <__d2b+0x88>
 8007caa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007cae:	4404      	add	r4, r0
 8007cb0:	6034      	str	r4, [r6, #0]
 8007cb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cb6:	6028      	str	r0, [r5, #0]
 8007cb8:	4638      	mov	r0, r7
 8007cba:	b002      	add	sp, #8
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007cc4:	e7d5      	b.n	8007c72 <__d2b+0x1e>
 8007cc6:	6179      	str	r1, [r7, #20]
 8007cc8:	e7e7      	b.n	8007c9a <__d2b+0x46>
 8007cca:	a801      	add	r0, sp, #4
 8007ccc:	f7ff fdda 	bl	8007884 <__lo0bits>
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	9b01      	ldr	r3, [sp, #4]
 8007cd4:	6139      	str	r1, [r7, #16]
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	3020      	adds	r0, #32
 8007cda:	e7e5      	b.n	8007ca8 <__d2b+0x54>
 8007cdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ce0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007ce4:	6030      	str	r0, [r6, #0]
 8007ce6:	6918      	ldr	r0, [r3, #16]
 8007ce8:	f7ff fdad 	bl	8007846 <__hi0bits>
 8007cec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007cf0:	e7e1      	b.n	8007cb6 <__d2b+0x62>

08007cf2 <_calloc_r>:
 8007cf2:	b538      	push	{r3, r4, r5, lr}
 8007cf4:	fb02 f401 	mul.w	r4, r2, r1
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f000 f855 	bl	8007da8 <_malloc_r>
 8007cfe:	4605      	mov	r5, r0
 8007d00:	b118      	cbz	r0, 8007d0a <_calloc_r+0x18>
 8007d02:	4622      	mov	r2, r4
 8007d04:	2100      	movs	r1, #0
 8007d06:	f7fd fe85 	bl	8005a14 <memset>
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007d10 <_free_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4605      	mov	r5, r0
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d043      	beq.n	8007da0 <_free_r+0x90>
 8007d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d1c:	1f0c      	subs	r4, r1, #4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bfb8      	it	lt
 8007d22:	18e4      	addlt	r4, r4, r3
 8007d24:	f000 fa94 	bl	8008250 <__malloc_lock>
 8007d28:	4a1e      	ldr	r2, [pc, #120]	; (8007da4 <_free_r+0x94>)
 8007d2a:	6813      	ldr	r3, [r2, #0]
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	b933      	cbnz	r3, 8007d3e <_free_r+0x2e>
 8007d30:	6063      	str	r3, [r4, #4]
 8007d32:	6014      	str	r4, [r2, #0]
 8007d34:	4628      	mov	r0, r5
 8007d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d3a:	f000 ba8a 	b.w	8008252 <__malloc_unlock>
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	d90b      	bls.n	8007d5a <_free_r+0x4a>
 8007d42:	6821      	ldr	r1, [r4, #0]
 8007d44:	1862      	adds	r2, r4, r1
 8007d46:	4293      	cmp	r3, r2
 8007d48:	bf01      	itttt	eq
 8007d4a:	681a      	ldreq	r2, [r3, #0]
 8007d4c:	685b      	ldreq	r3, [r3, #4]
 8007d4e:	1852      	addeq	r2, r2, r1
 8007d50:	6022      	streq	r2, [r4, #0]
 8007d52:	6063      	str	r3, [r4, #4]
 8007d54:	6004      	str	r4, [r0, #0]
 8007d56:	e7ed      	b.n	8007d34 <_free_r+0x24>
 8007d58:	4613      	mov	r3, r2
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	b10a      	cbz	r2, 8007d62 <_free_r+0x52>
 8007d5e:	42a2      	cmp	r2, r4
 8007d60:	d9fa      	bls.n	8007d58 <_free_r+0x48>
 8007d62:	6819      	ldr	r1, [r3, #0]
 8007d64:	1858      	adds	r0, r3, r1
 8007d66:	42a0      	cmp	r0, r4
 8007d68:	d10b      	bne.n	8007d82 <_free_r+0x72>
 8007d6a:	6820      	ldr	r0, [r4, #0]
 8007d6c:	4401      	add	r1, r0
 8007d6e:	1858      	adds	r0, r3, r1
 8007d70:	4282      	cmp	r2, r0
 8007d72:	6019      	str	r1, [r3, #0]
 8007d74:	d1de      	bne.n	8007d34 <_free_r+0x24>
 8007d76:	6810      	ldr	r0, [r2, #0]
 8007d78:	6852      	ldr	r2, [r2, #4]
 8007d7a:	4401      	add	r1, r0
 8007d7c:	6019      	str	r1, [r3, #0]
 8007d7e:	605a      	str	r2, [r3, #4]
 8007d80:	e7d8      	b.n	8007d34 <_free_r+0x24>
 8007d82:	d902      	bls.n	8007d8a <_free_r+0x7a>
 8007d84:	230c      	movs	r3, #12
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	e7d4      	b.n	8007d34 <_free_r+0x24>
 8007d8a:	6820      	ldr	r0, [r4, #0]
 8007d8c:	1821      	adds	r1, r4, r0
 8007d8e:	428a      	cmp	r2, r1
 8007d90:	bf01      	itttt	eq
 8007d92:	6811      	ldreq	r1, [r2, #0]
 8007d94:	6852      	ldreq	r2, [r2, #4]
 8007d96:	1809      	addeq	r1, r1, r0
 8007d98:	6021      	streq	r1, [r4, #0]
 8007d9a:	6062      	str	r2, [r4, #4]
 8007d9c:	605c      	str	r4, [r3, #4]
 8007d9e:	e7c9      	b.n	8007d34 <_free_r+0x24>
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
 8007da2:	bf00      	nop
 8007da4:	20000218 	.word	0x20000218

08007da8 <_malloc_r>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	1ccd      	adds	r5, r1, #3
 8007dac:	f025 0503 	bic.w	r5, r5, #3
 8007db0:	3508      	adds	r5, #8
 8007db2:	2d0c      	cmp	r5, #12
 8007db4:	bf38      	it	cc
 8007db6:	250c      	movcc	r5, #12
 8007db8:	2d00      	cmp	r5, #0
 8007dba:	4606      	mov	r6, r0
 8007dbc:	db01      	blt.n	8007dc2 <_malloc_r+0x1a>
 8007dbe:	42a9      	cmp	r1, r5
 8007dc0:	d903      	bls.n	8007dca <_malloc_r+0x22>
 8007dc2:	230c      	movs	r3, #12
 8007dc4:	6033      	str	r3, [r6, #0]
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	bd70      	pop	{r4, r5, r6, pc}
 8007dca:	f000 fa41 	bl	8008250 <__malloc_lock>
 8007dce:	4a21      	ldr	r2, [pc, #132]	; (8007e54 <_malloc_r+0xac>)
 8007dd0:	6814      	ldr	r4, [r2, #0]
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	b991      	cbnz	r1, 8007dfc <_malloc_r+0x54>
 8007dd6:	4c20      	ldr	r4, [pc, #128]	; (8007e58 <_malloc_r+0xb0>)
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	b91b      	cbnz	r3, 8007de4 <_malloc_r+0x3c>
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f97b 	bl	80080d8 <_sbrk_r>
 8007de2:	6020      	str	r0, [r4, #0]
 8007de4:	4629      	mov	r1, r5
 8007de6:	4630      	mov	r0, r6
 8007de8:	f000 f976 	bl	80080d8 <_sbrk_r>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d124      	bne.n	8007e3a <_malloc_r+0x92>
 8007df0:	230c      	movs	r3, #12
 8007df2:	4630      	mov	r0, r6
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	f000 fa2c 	bl	8008252 <__malloc_unlock>
 8007dfa:	e7e4      	b.n	8007dc6 <_malloc_r+0x1e>
 8007dfc:	680b      	ldr	r3, [r1, #0]
 8007dfe:	1b5b      	subs	r3, r3, r5
 8007e00:	d418      	bmi.n	8007e34 <_malloc_r+0x8c>
 8007e02:	2b0b      	cmp	r3, #11
 8007e04:	d90f      	bls.n	8007e26 <_malloc_r+0x7e>
 8007e06:	600b      	str	r3, [r1, #0]
 8007e08:	18cc      	adds	r4, r1, r3
 8007e0a:	50cd      	str	r5, [r1, r3]
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f000 fa20 	bl	8008252 <__malloc_unlock>
 8007e12:	f104 000b 	add.w	r0, r4, #11
 8007e16:	1d23      	adds	r3, r4, #4
 8007e18:	f020 0007 	bic.w	r0, r0, #7
 8007e1c:	1ac3      	subs	r3, r0, r3
 8007e1e:	d0d3      	beq.n	8007dc8 <_malloc_r+0x20>
 8007e20:	425a      	negs	r2, r3
 8007e22:	50e2      	str	r2, [r4, r3]
 8007e24:	e7d0      	b.n	8007dc8 <_malloc_r+0x20>
 8007e26:	684b      	ldr	r3, [r1, #4]
 8007e28:	428c      	cmp	r4, r1
 8007e2a:	bf16      	itet	ne
 8007e2c:	6063      	strne	r3, [r4, #4]
 8007e2e:	6013      	streq	r3, [r2, #0]
 8007e30:	460c      	movne	r4, r1
 8007e32:	e7eb      	b.n	8007e0c <_malloc_r+0x64>
 8007e34:	460c      	mov	r4, r1
 8007e36:	6849      	ldr	r1, [r1, #4]
 8007e38:	e7cc      	b.n	8007dd4 <_malloc_r+0x2c>
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d005      	beq.n	8007e50 <_malloc_r+0xa8>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4630      	mov	r0, r6
 8007e48:	f000 f946 	bl	80080d8 <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d0cf      	beq.n	8007df0 <_malloc_r+0x48>
 8007e50:	6025      	str	r5, [r4, #0]
 8007e52:	e7db      	b.n	8007e0c <_malloc_r+0x64>
 8007e54:	20000218 	.word	0x20000218
 8007e58:	2000021c 	.word	0x2000021c

08007e5c <__sfputc_r>:
 8007e5c:	6893      	ldr	r3, [r2, #8]
 8007e5e:	b410      	push	{r4}
 8007e60:	3b01      	subs	r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	6093      	str	r3, [r2, #8]
 8007e66:	da07      	bge.n	8007e78 <__sfputc_r+0x1c>
 8007e68:	6994      	ldr	r4, [r2, #24]
 8007e6a:	42a3      	cmp	r3, r4
 8007e6c:	db01      	blt.n	8007e72 <__sfputc_r+0x16>
 8007e6e:	290a      	cmp	r1, #10
 8007e70:	d102      	bne.n	8007e78 <__sfputc_r+0x1c>
 8007e72:	bc10      	pop	{r4}
 8007e74:	f7fe bb50 	b.w	8006518 <__swbuf_r>
 8007e78:	6813      	ldr	r3, [r2, #0]
 8007e7a:	1c58      	adds	r0, r3, #1
 8007e7c:	6010      	str	r0, [r2, #0]
 8007e7e:	7019      	strb	r1, [r3, #0]
 8007e80:	4608      	mov	r0, r1
 8007e82:	bc10      	pop	{r4}
 8007e84:	4770      	bx	lr

08007e86 <__sfputs_r>:
 8007e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e88:	4606      	mov	r6, r0
 8007e8a:	460f      	mov	r7, r1
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	18d5      	adds	r5, r2, r3
 8007e90:	42ac      	cmp	r4, r5
 8007e92:	d101      	bne.n	8007e98 <__sfputs_r+0x12>
 8007e94:	2000      	movs	r0, #0
 8007e96:	e007      	b.n	8007ea8 <__sfputs_r+0x22>
 8007e98:	463a      	mov	r2, r7
 8007e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f7ff ffdc 	bl	8007e5c <__sfputc_r>
 8007ea4:	1c43      	adds	r3, r0, #1
 8007ea6:	d1f3      	bne.n	8007e90 <__sfputs_r+0xa>
 8007ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007eac <_vfiprintf_r>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	b09d      	sub	sp, #116	; 0x74
 8007eb4:	4617      	mov	r7, r2
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	4606      	mov	r6, r0
 8007eba:	b118      	cbz	r0, 8007ec4 <_vfiprintf_r+0x18>
 8007ebc:	6983      	ldr	r3, [r0, #24]
 8007ebe:	b90b      	cbnz	r3, 8007ec4 <_vfiprintf_r+0x18>
 8007ec0:	f7ff fb1e 	bl	8007500 <__sinit>
 8007ec4:	4b7c      	ldr	r3, [pc, #496]	; (80080b8 <_vfiprintf_r+0x20c>)
 8007ec6:	429c      	cmp	r4, r3
 8007ec8:	d158      	bne.n	8007f7c <_vfiprintf_r+0xd0>
 8007eca:	6874      	ldr	r4, [r6, #4]
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	0718      	lsls	r0, r3, #28
 8007ed0:	d55e      	bpl.n	8007f90 <_vfiprintf_r+0xe4>
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d05b      	beq.n	8007f90 <_vfiprintf_r+0xe4>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9309      	str	r3, [sp, #36]	; 0x24
 8007edc:	2320      	movs	r3, #32
 8007ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ee2:	2330      	movs	r3, #48	; 0x30
 8007ee4:	f04f 0b01 	mov.w	fp, #1
 8007ee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eec:	9503      	str	r5, [sp, #12]
 8007eee:	46b8      	mov	r8, r7
 8007ef0:	4645      	mov	r5, r8
 8007ef2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ef6:	b10b      	cbz	r3, 8007efc <_vfiprintf_r+0x50>
 8007ef8:	2b25      	cmp	r3, #37	; 0x25
 8007efa:	d154      	bne.n	8007fa6 <_vfiprintf_r+0xfa>
 8007efc:	ebb8 0a07 	subs.w	sl, r8, r7
 8007f00:	d00b      	beq.n	8007f1a <_vfiprintf_r+0x6e>
 8007f02:	4653      	mov	r3, sl
 8007f04:	463a      	mov	r2, r7
 8007f06:	4621      	mov	r1, r4
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7ff ffbc 	bl	8007e86 <__sfputs_r>
 8007f0e:	3001      	adds	r0, #1
 8007f10:	f000 80c2 	beq.w	8008098 <_vfiprintf_r+0x1ec>
 8007f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f16:	4453      	add	r3, sl
 8007f18:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1a:	f898 3000 	ldrb.w	r3, [r8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 80ba 	beq.w	8008098 <_vfiprintf_r+0x1ec>
 8007f24:	2300      	movs	r3, #0
 8007f26:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	9307      	str	r3, [sp, #28]
 8007f32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f36:	931a      	str	r3, [sp, #104]	; 0x68
 8007f38:	46a8      	mov	r8, r5
 8007f3a:	2205      	movs	r2, #5
 8007f3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007f40:	485e      	ldr	r0, [pc, #376]	; (80080bc <_vfiprintf_r+0x210>)
 8007f42:	f7ff fbe1 	bl	8007708 <memchr>
 8007f46:	9b04      	ldr	r3, [sp, #16]
 8007f48:	bb78      	cbnz	r0, 8007faa <_vfiprintf_r+0xfe>
 8007f4a:	06d9      	lsls	r1, r3, #27
 8007f4c:	bf44      	itt	mi
 8007f4e:	2220      	movmi	r2, #32
 8007f50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f54:	071a      	lsls	r2, r3, #28
 8007f56:	bf44      	itt	mi
 8007f58:	222b      	movmi	r2, #43	; 0x2b
 8007f5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f5e:	782a      	ldrb	r2, [r5, #0]
 8007f60:	2a2a      	cmp	r2, #42	; 0x2a
 8007f62:	d02a      	beq.n	8007fba <_vfiprintf_r+0x10e>
 8007f64:	46a8      	mov	r8, r5
 8007f66:	2000      	movs	r0, #0
 8007f68:	250a      	movs	r5, #10
 8007f6a:	9a07      	ldr	r2, [sp, #28]
 8007f6c:	4641      	mov	r1, r8
 8007f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f72:	3b30      	subs	r3, #48	; 0x30
 8007f74:	2b09      	cmp	r3, #9
 8007f76:	d969      	bls.n	800804c <_vfiprintf_r+0x1a0>
 8007f78:	b360      	cbz	r0, 8007fd4 <_vfiprintf_r+0x128>
 8007f7a:	e024      	b.n	8007fc6 <_vfiprintf_r+0x11a>
 8007f7c:	4b50      	ldr	r3, [pc, #320]	; (80080c0 <_vfiprintf_r+0x214>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d101      	bne.n	8007f86 <_vfiprintf_r+0xda>
 8007f82:	68b4      	ldr	r4, [r6, #8]
 8007f84:	e7a2      	b.n	8007ecc <_vfiprintf_r+0x20>
 8007f86:	4b4f      	ldr	r3, [pc, #316]	; (80080c4 <_vfiprintf_r+0x218>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	bf08      	it	eq
 8007f8c:	68f4      	ldreq	r4, [r6, #12]
 8007f8e:	e79d      	b.n	8007ecc <_vfiprintf_r+0x20>
 8007f90:	4621      	mov	r1, r4
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7fe fb12 	bl	80065bc <__swsetup_r>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d09d      	beq.n	8007ed8 <_vfiprintf_r+0x2c>
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	b01d      	add	sp, #116	; 0x74
 8007fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa6:	46a8      	mov	r8, r5
 8007fa8:	e7a2      	b.n	8007ef0 <_vfiprintf_r+0x44>
 8007faa:	4a44      	ldr	r2, [pc, #272]	; (80080bc <_vfiprintf_r+0x210>)
 8007fac:	4645      	mov	r5, r8
 8007fae:	1a80      	subs	r0, r0, r2
 8007fb0:	fa0b f000 	lsl.w	r0, fp, r0
 8007fb4:	4318      	orrs	r0, r3
 8007fb6:	9004      	str	r0, [sp, #16]
 8007fb8:	e7be      	b.n	8007f38 <_vfiprintf_r+0x8c>
 8007fba:	9a03      	ldr	r2, [sp, #12]
 8007fbc:	1d11      	adds	r1, r2, #4
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	9103      	str	r1, [sp, #12]
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	db01      	blt.n	8007fca <_vfiprintf_r+0x11e>
 8007fc6:	9207      	str	r2, [sp, #28]
 8007fc8:	e004      	b.n	8007fd4 <_vfiprintf_r+0x128>
 8007fca:	4252      	negs	r2, r2
 8007fcc:	f043 0302 	orr.w	r3, r3, #2
 8007fd0:	9207      	str	r2, [sp, #28]
 8007fd2:	9304      	str	r3, [sp, #16]
 8007fd4:	f898 3000 	ldrb.w	r3, [r8]
 8007fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8007fda:	d10e      	bne.n	8007ffa <_vfiprintf_r+0x14e>
 8007fdc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe2:	d138      	bne.n	8008056 <_vfiprintf_r+0x1aa>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	f108 0802 	add.w	r8, r8, #2
 8007fea:	1d1a      	adds	r2, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	9203      	str	r2, [sp, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	bfb8      	it	lt
 8007ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ff8:	9305      	str	r3, [sp, #20]
 8007ffa:	4d33      	ldr	r5, [pc, #204]	; (80080c8 <_vfiprintf_r+0x21c>)
 8007ffc:	2203      	movs	r2, #3
 8007ffe:	f898 1000 	ldrb.w	r1, [r8]
 8008002:	4628      	mov	r0, r5
 8008004:	f7ff fb80 	bl	8007708 <memchr>
 8008008:	b140      	cbz	r0, 800801c <_vfiprintf_r+0x170>
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	1b40      	subs	r0, r0, r5
 800800e:	fa03 f000 	lsl.w	r0, r3, r0
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	f108 0801 	add.w	r8, r8, #1
 8008018:	4303      	orrs	r3, r0
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	f898 1000 	ldrb.w	r1, [r8]
 8008020:	2206      	movs	r2, #6
 8008022:	482a      	ldr	r0, [pc, #168]	; (80080cc <_vfiprintf_r+0x220>)
 8008024:	f108 0701 	add.w	r7, r8, #1
 8008028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800802c:	f7ff fb6c 	bl	8007708 <memchr>
 8008030:	2800      	cmp	r0, #0
 8008032:	d037      	beq.n	80080a4 <_vfiprintf_r+0x1f8>
 8008034:	4b26      	ldr	r3, [pc, #152]	; (80080d0 <_vfiprintf_r+0x224>)
 8008036:	bb1b      	cbnz	r3, 8008080 <_vfiprintf_r+0x1d4>
 8008038:	9b03      	ldr	r3, [sp, #12]
 800803a:	3307      	adds	r3, #7
 800803c:	f023 0307 	bic.w	r3, r3, #7
 8008040:	3308      	adds	r3, #8
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008046:	444b      	add	r3, r9
 8008048:	9309      	str	r3, [sp, #36]	; 0x24
 800804a:	e750      	b.n	8007eee <_vfiprintf_r+0x42>
 800804c:	fb05 3202 	mla	r2, r5, r2, r3
 8008050:	2001      	movs	r0, #1
 8008052:	4688      	mov	r8, r1
 8008054:	e78a      	b.n	8007f6c <_vfiprintf_r+0xc0>
 8008056:	2300      	movs	r3, #0
 8008058:	250a      	movs	r5, #10
 800805a:	4619      	mov	r1, r3
 800805c:	f108 0801 	add.w	r8, r8, #1
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	4640      	mov	r0, r8
 8008064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008068:	3a30      	subs	r2, #48	; 0x30
 800806a:	2a09      	cmp	r2, #9
 800806c:	d903      	bls.n	8008076 <_vfiprintf_r+0x1ca>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0c3      	beq.n	8007ffa <_vfiprintf_r+0x14e>
 8008072:	9105      	str	r1, [sp, #20]
 8008074:	e7c1      	b.n	8007ffa <_vfiprintf_r+0x14e>
 8008076:	fb05 2101 	mla	r1, r5, r1, r2
 800807a:	2301      	movs	r3, #1
 800807c:	4680      	mov	r8, r0
 800807e:	e7f0      	b.n	8008062 <_vfiprintf_r+0x1b6>
 8008080:	ab03      	add	r3, sp, #12
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4622      	mov	r2, r4
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <_vfiprintf_r+0x228>)
 8008088:	a904      	add	r1, sp, #16
 800808a:	4630      	mov	r0, r6
 800808c:	f7fd fd5c 	bl	8005b48 <_printf_float>
 8008090:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008094:	4681      	mov	r9, r0
 8008096:	d1d5      	bne.n	8008044 <_vfiprintf_r+0x198>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	065b      	lsls	r3, r3, #25
 800809c:	f53f af7e 	bmi.w	8007f9c <_vfiprintf_r+0xf0>
 80080a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a2:	e77d      	b.n	8007fa0 <_vfiprintf_r+0xf4>
 80080a4:	ab03      	add	r3, sp, #12
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	4622      	mov	r2, r4
 80080aa:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <_vfiprintf_r+0x228>)
 80080ac:	a904      	add	r1, sp, #16
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7fd fff6 	bl	80060a0 <_printf_i>
 80080b4:	e7ec      	b.n	8008090 <_vfiprintf_r+0x1e4>
 80080b6:	bf00      	nop
 80080b8:	08008420 	.word	0x08008420
 80080bc:	0800855c 	.word	0x0800855c
 80080c0:	08008440 	.word	0x08008440
 80080c4:	08008400 	.word	0x08008400
 80080c8:	08008562 	.word	0x08008562
 80080cc:	08008566 	.word	0x08008566
 80080d0:	08005b49 	.word	0x08005b49
 80080d4:	08007e87 	.word	0x08007e87

080080d8 <_sbrk_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	2300      	movs	r3, #0
 80080dc:	4c05      	ldr	r4, [pc, #20]	; (80080f4 <_sbrk_r+0x1c>)
 80080de:	4605      	mov	r5, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	6023      	str	r3, [r4, #0]
 80080e4:	f7fc faa6 	bl	8004634 <_sbrk>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_sbrk_r+0x1a>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_sbrk_r+0x1a>
 80080f0:	602b      	str	r3, [r5, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	20000230 	.word	0x20000230

080080f8 <__sread>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	460c      	mov	r4, r1
 80080fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008100:	f000 f8a8 	bl	8008254 <_read_r>
 8008104:	2800      	cmp	r0, #0
 8008106:	bfab      	itete	ge
 8008108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800810a:	89a3      	ldrhlt	r3, [r4, #12]
 800810c:	181b      	addge	r3, r3, r0
 800810e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008112:	bfac      	ite	ge
 8008114:	6563      	strge	r3, [r4, #84]	; 0x54
 8008116:	81a3      	strhlt	r3, [r4, #12]
 8008118:	bd10      	pop	{r4, pc}

0800811a <__swrite>:
 800811a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	461f      	mov	r7, r3
 8008120:	898b      	ldrh	r3, [r1, #12]
 8008122:	4605      	mov	r5, r0
 8008124:	05db      	lsls	r3, r3, #23
 8008126:	460c      	mov	r4, r1
 8008128:	4616      	mov	r6, r2
 800812a:	d505      	bpl.n	8008138 <__swrite+0x1e>
 800812c:	2302      	movs	r3, #2
 800812e:	2200      	movs	r2, #0
 8008130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008134:	f000 f868 	bl	8008208 <_lseek_r>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	4632      	mov	r2, r6
 800813c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008146:	463b      	mov	r3, r7
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800814e:	f000 b817 	b.w	8008180 <_write_r>

08008152 <__sseek>:
 8008152:	b510      	push	{r4, lr}
 8008154:	460c      	mov	r4, r1
 8008156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815a:	f000 f855 	bl	8008208 <_lseek_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	bf15      	itete	ne
 8008164:	6560      	strne	r0, [r4, #84]	; 0x54
 8008166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800816a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800816e:	81a3      	strheq	r3, [r4, #12]
 8008170:	bf18      	it	ne
 8008172:	81a3      	strhne	r3, [r4, #12]
 8008174:	bd10      	pop	{r4, pc}

08008176 <__sclose>:
 8008176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817a:	f000 b813 	b.w	80081a4 <_close_r>
	...

08008180 <_write_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4605      	mov	r5, r0
 8008184:	4608      	mov	r0, r1
 8008186:	4611      	mov	r1, r2
 8008188:	2200      	movs	r2, #0
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <_write_r+0x20>)
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	f7fc fa03 	bl	800459a <_write>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_write_r+0x1e>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	b103      	cbz	r3, 800819e <_write_r+0x1e>
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	20000230 	.word	0x20000230

080081a4 <_close_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	2300      	movs	r3, #0
 80081a8:	4c05      	ldr	r4, [pc, #20]	; (80081c0 <_close_r+0x1c>)
 80081aa:	4605      	mov	r5, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	f7fc fa0f 	bl	80045d2 <_close>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_close_r+0x1a>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	b103      	cbz	r3, 80081be <_close_r+0x1a>
 80081bc:	602b      	str	r3, [r5, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	20000230 	.word	0x20000230

080081c4 <_fstat_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	2300      	movs	r3, #0
 80081c8:	4c06      	ldr	r4, [pc, #24]	; (80081e4 <_fstat_r+0x20>)
 80081ca:	4605      	mov	r5, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	4611      	mov	r1, r2
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	f7fc fa09 	bl	80045e8 <_fstat>
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	d102      	bne.n	80081e0 <_fstat_r+0x1c>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	b103      	cbz	r3, 80081e0 <_fstat_r+0x1c>
 80081de:	602b      	str	r3, [r5, #0]
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
 80081e2:	bf00      	nop
 80081e4:	20000230 	.word	0x20000230

080081e8 <_isatty_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	2300      	movs	r3, #0
 80081ec:	4c05      	ldr	r4, [pc, #20]	; (8008204 <_isatty_r+0x1c>)
 80081ee:	4605      	mov	r5, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	6023      	str	r3, [r4, #0]
 80081f4:	f7fc fa07 	bl	8004606 <_isatty>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d102      	bne.n	8008202 <_isatty_r+0x1a>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	b103      	cbz	r3, 8008202 <_isatty_r+0x1a>
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	20000230 	.word	0x20000230

08008208 <_lseek_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4605      	mov	r5, r0
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	2200      	movs	r2, #0
 8008212:	4c05      	ldr	r4, [pc, #20]	; (8008228 <_lseek_r+0x20>)
 8008214:	6022      	str	r2, [r4, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7fc f9ff 	bl	800461a <_lseek>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_lseek_r+0x1e>
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	b103      	cbz	r3, 8008226 <_lseek_r+0x1e>
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	20000230 	.word	0x20000230

0800822c <__ascii_mbtowc>:
 800822c:	b082      	sub	sp, #8
 800822e:	b901      	cbnz	r1, 8008232 <__ascii_mbtowc+0x6>
 8008230:	a901      	add	r1, sp, #4
 8008232:	b142      	cbz	r2, 8008246 <__ascii_mbtowc+0x1a>
 8008234:	b14b      	cbz	r3, 800824a <__ascii_mbtowc+0x1e>
 8008236:	7813      	ldrb	r3, [r2, #0]
 8008238:	600b      	str	r3, [r1, #0]
 800823a:	7812      	ldrb	r2, [r2, #0]
 800823c:	1c10      	adds	r0, r2, #0
 800823e:	bf18      	it	ne
 8008240:	2001      	movne	r0, #1
 8008242:	b002      	add	sp, #8
 8008244:	4770      	bx	lr
 8008246:	4610      	mov	r0, r2
 8008248:	e7fb      	b.n	8008242 <__ascii_mbtowc+0x16>
 800824a:	f06f 0001 	mvn.w	r0, #1
 800824e:	e7f8      	b.n	8008242 <__ascii_mbtowc+0x16>

08008250 <__malloc_lock>:
 8008250:	4770      	bx	lr

08008252 <__malloc_unlock>:
 8008252:	4770      	bx	lr

08008254 <_read_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4605      	mov	r5, r0
 8008258:	4608      	mov	r0, r1
 800825a:	4611      	mov	r1, r2
 800825c:	2200      	movs	r2, #0
 800825e:	4c05      	ldr	r4, [pc, #20]	; (8008274 <_read_r+0x20>)
 8008260:	6022      	str	r2, [r4, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	f7fc f97c 	bl	8004560 <_read>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_read_r+0x1e>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	b103      	cbz	r3, 8008272 <_read_r+0x1e>
 8008270:	602b      	str	r3, [r5, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	20000230 	.word	0x20000230

08008278 <__ascii_wctomb>:
 8008278:	b149      	cbz	r1, 800828e <__ascii_wctomb+0x16>
 800827a:	2aff      	cmp	r2, #255	; 0xff
 800827c:	bf8b      	itete	hi
 800827e:	238a      	movhi	r3, #138	; 0x8a
 8008280:	700a      	strbls	r2, [r1, #0]
 8008282:	6003      	strhi	r3, [r0, #0]
 8008284:	2001      	movls	r0, #1
 8008286:	bf88      	it	hi
 8008288:	f04f 30ff 	movhi.w	r0, #4294967295
 800828c:	4770      	bx	lr
 800828e:	4608      	mov	r0, r1
 8008290:	4770      	bx	lr
	...

08008294 <_init>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr

080082a0 <_fini>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr


Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005680  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005870  08005870  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005870  08005870  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005870  08005870  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000007c  080058f4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080058f4  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c5a  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c94  00000000  00000000  00029cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002b998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002c450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001582f  00000000  00000000  0002ce20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bc1  00000000  00000000  0004264f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006db39  00000000  00000000  00049210  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6d49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  000b6dc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005778 	.word	0x08005778

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005778 	.word	0x08005778

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	; 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009f8:	f1a2 0201 	sub.w	r2, r2, #1
 80009fc:	d1ed      	bne.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_fmul>:
 8000b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b60:	bf1e      	ittt	ne
 8000b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b66:	ea92 0f0c 	teqne	r2, ip
 8000b6a:	ea93 0f0c 	teqne	r3, ip
 8000b6e:	d06f      	beq.n	8000c50 <__aeabi_fmul+0xf8>
 8000b70:	441a      	add	r2, r3
 8000b72:	ea80 0c01 	eor.w	ip, r0, r1
 8000b76:	0240      	lsls	r0, r0, #9
 8000b78:	bf18      	it	ne
 8000b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7e:	d01e      	beq.n	8000bbe <__aeabi_fmul+0x66>
 8000b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b98:	bf3e      	ittt	cc
 8000b9a:	0049      	lslcc	r1, r1, #1
 8000b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	ea40 0001 	orr.w	r0, r0, r1
 8000ba6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000baa:	2afd      	cmp	r2, #253	; 0xfd
 8000bac:	d81d      	bhi.n	8000bea <__aeabi_fmul+0x92>
 8000bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	4770      	bx	lr
 8000bbe:	f090 0f00 	teq	r0, #0
 8000bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bc6:	bf08      	it	eq
 8000bc8:	0249      	lsleq	r1, r1, #9
 8000bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd2:	3a7f      	subs	r2, #127	; 0x7f
 8000bd4:	bfc2      	ittt	gt
 8000bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bde:	4770      	bxgt	lr
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	dc5d      	bgt.n	8000ca8 <__aeabi_fmul+0x150>
 8000bec:	f112 0f19 	cmn.w	r2, #25
 8000bf0:	bfdc      	itt	le
 8000bf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bxle	lr
 8000bf8:	f1c2 0200 	rsb	r2, r2, #0
 8000bfc:	0041      	lsls	r1, r0, #1
 8000bfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000c02:	f1c2 0220 	rsb	r2, r2, #32
 8000c06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0e:	f140 0000 	adc.w	r0, r0, #0
 8000c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c16:	bf08      	it	eq
 8000c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1c:	4770      	bx	lr
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fmul+0xce>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fmul+0xe6>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e78f      	b.n	8000b70 <__aeabi_fmul+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	bf18      	it	ne
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d00a      	beq.n	8000c76 <__aeabi_fmul+0x11e>
 8000c60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c64:	bf18      	it	ne
 8000c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c6a:	d1d8      	bne.n	8000c1e <__aeabi_fmul+0xc6>
 8000c6c:	ea80 0001 	eor.w	r0, r0, r1
 8000c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f090 0f00 	teq	r0, #0
 8000c7a:	bf17      	itett	ne
 8000c7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c80:	4608      	moveq	r0, r1
 8000c82:	f091 0f00 	teqne	r1, #0
 8000c86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c8a:	d014      	beq.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c8c:	ea92 0f0c 	teq	r2, ip
 8000c90:	d101      	bne.n	8000c96 <__aeabi_fmul+0x13e>
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	d10f      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c96:	ea93 0f0c 	teq	r3, ip
 8000c9a:	d103      	bne.n	8000ca4 <__aeabi_fmul+0x14c>
 8000c9c:	024b      	lsls	r3, r1, #9
 8000c9e:	bf18      	it	ne
 8000ca0:	4608      	movne	r0, r1
 8000ca2:	d108      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000ca4:	ea80 0001 	eor.w	r0, r0, r1
 8000ca8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_fdiv>:
 8000cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc8:	bf1e      	ittt	ne
 8000cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cce:	ea92 0f0c 	teqne	r2, ip
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d069      	beq.n	8000dac <__aeabi_fdiv+0xec>
 8000cd8:	eba2 0203 	sub.w	r2, r2, r3
 8000cdc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce6:	d037      	beq.n	8000d58 <__aeabi_fdiv+0x98>
 8000ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	bf38      	it	cc
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d06:	428b      	cmp	r3, r1
 8000d08:	bf24      	itt	cs
 8000d0a:	1a5b      	subcs	r3, r3, r1
 8000d0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d14:	bf24      	itt	cs
 8000d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d22:	bf24      	itt	cs
 8000d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d30:	bf24      	itt	cs
 8000d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d42:	d1e0      	bne.n	8000d06 <__aeabi_fdiv+0x46>
 8000d44:	2afd      	cmp	r2, #253	; 0xfd
 8000d46:	f63f af50 	bhi.w	8000bea <__aeabi_fmul+0x92>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d60:	327f      	adds	r2, #127	; 0x7f
 8000d62:	bfc2      	ittt	gt
 8000d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6c:	4770      	bxgt	lr
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	3a01      	subs	r2, #1
 8000d78:	e737      	b.n	8000bea <__aeabi_fmul+0x92>
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fdiv+0xc2>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fdiv+0xda>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e795      	b.n	8000cd8 <__aeabi_fdiv+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	d108      	bne.n	8000dc8 <__aeabi_fdiv+0x108>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	f47f af7d 	bne.w	8000cb6 <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	f47f af70 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e776      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	d104      	bne.n	8000dd8 <__aeabi_fdiv+0x118>
 8000dce:	024b      	lsls	r3, r1, #9
 8000dd0:	f43f af4c 	beq.w	8000c6c <__aeabi_fmul+0x114>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e76e      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	d1ca      	bne.n	8000d7a <__aeabi_fdiv+0xba>
 8000de4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000de8:	f47f af5c 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df0:	f47f af3c 	bne.w	8000c6c <__aeabi_fmul+0x114>
 8000df4:	e75f      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000df6:	bf00      	nop

08000df8 <__gesf2>:
 8000df8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dfc:	e006      	b.n	8000e0c <__cmpsf2+0x4>
 8000dfe:	bf00      	nop

08000e00 <__lesf2>:
 8000e00:	f04f 0c01 	mov.w	ip, #1
 8000e04:	e002      	b.n	8000e0c <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__cmpsf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d011      	beq.n	8000e48 <__cmpsf2+0x40>
 8000e24:	b001      	add	sp, #4
 8000e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2a:	bf18      	it	ne
 8000e2c:	ea90 0f01 	teqne	r0, r1
 8000e30:	bf58      	it	pl
 8000e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e36:	bf88      	it	hi
 8000e38:	17c8      	asrhi	r0, r1, #31
 8000e3a:	bf38      	it	cc
 8000e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e40:	bf18      	it	ne
 8000e42:	f040 0001 	orrne.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e4c:	d102      	bne.n	8000e54 <__cmpsf2+0x4c>
 8000e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e52:	d105      	bne.n	8000e60 <__cmpsf2+0x58>
 8000e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e58:	d1e4      	bne.n	8000e24 <__cmpsf2+0x1c>
 8000e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5e:	d0e1      	beq.n	8000e24 <__cmpsf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cfrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	e7ff      	b.n	8000e70 <__aeabi_cfcmpeq>

08000e70 <__aeabi_cfcmpeq>:
 8000e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e72:	f7ff ffc9 	bl	8000e08 <__cmpsf2>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	bf48      	it	mi
 8000e7a:	f110 0f00 	cmnmi.w	r0, #0
 8000e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e80 <__aeabi_fcmpeq>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff fff4 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e88:	bf0c      	ite	eq
 8000e8a:	2001      	moveq	r0, #1
 8000e8c:	2000      	movne	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_fcmplt>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff ffea 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e9c:	bf34      	ite	cc
 8000e9e:	2001      	movcc	r0, #1
 8000ea0:	2000      	movcs	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmple>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffe0 	bl	8000e70 <__aeabi_cfcmpeq>
 8000eb0:	bf94      	ite	ls
 8000eb2:	2001      	movls	r0, #1
 8000eb4:	2000      	movhi	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmpge>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffd2 	bl	8000e68 <__aeabi_cfrcmple>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpgt>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffc8 	bl	8000e68 <__aeabi_cfrcmple>
 8000ed8:	bf34      	ite	cc
 8000eda:	2001      	movcc	r0, #1
 8000edc:	2000      	movcs	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_f2uiz>:
 8000ee4:	0042      	lsls	r2, r0, #1
 8000ee6:	d20e      	bcs.n	8000f06 <__aeabi_f2uiz+0x22>
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eec:	d30b      	bcc.n	8000f06 <__aeabi_f2uiz+0x22>
 8000eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d409      	bmi.n	8000f0c <__aeabi_f2uiz+0x28>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	4770      	bx	lr
 8000f0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f10:	d101      	bne.n	8000f16 <__aeabi_f2uiz+0x32>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d102      	bne.n	8000f1c <__aeabi_f2uiz+0x38>
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	4770      	bx	lr
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1a      	ldr	r2, [r3, #32]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	621a      	str	r2, [r3, #32]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	615a      	str	r2, [r3, #20]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <MotorL_EnablePWM>:
 */
#include "MotorControl.h"


void MotorL_EnablePWM(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <MotorL_EnablePWM+0x10>)
 8000fbc:	f7ff ffb2 	bl	8000f24 <LL_TIM_CC_EnableChannel>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40012c00 	.word	0x40012c00

08000fc8 <MotorR_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void MotorR_EnablePWM(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 8000fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <MotorR_EnablePWM+0x14>)
 8000fd2:	f7ff ffa7 	bl	8000f24 <LL_TIM_CC_EnableChannel>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40012c00 	.word	0x40012c00

08000fe0 <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000fee:	db03      	blt.n	8000ff8 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 8000ff0:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	e005      	b.n	8001004 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8000ffe:	dc01      	bgt.n	8001004 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MotorL_SetPWM+0x60>)
 8001002:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0a      	blt.n	8001020 <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	b29b      	uxth	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MotorL_SetPWM+0x64>)
 8001012:	f7ff ff97 	bl	8000f44 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001016:	490c      	ldr	r1, [pc, #48]	; (8001048 <MotorL_SetPWM+0x68>)
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <MotorL_SetPWM+0x6c>)
 800101a:	f7ff ffbc 	bl	8000f96 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800101e:	e00a      	b.n	8001036 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001026:	4619      	mov	r1, r3
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <MotorL_SetPWM+0x64>)
 800102a:	f7ff ff8b 	bl	8000f44 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800102e:	4906      	ldr	r1, [pc, #24]	; (8001048 <MotorL_SetPWM+0x68>)
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <MotorL_SetPWM+0x6c>)
 8001032:	f7ff ffa1 	bl	8000f78 <LL_GPIO_SetOutputPin>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	ffffe3e0 	.word	0xffffe3e0
 8001044:	40012c00 	.word	0x40012c00
 8001048:	04800080 	.word	0x04800080
 800104c:	40010c00 	.word	0x40010c00

08001050 <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800105e:	db03      	blt.n	8001068 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 8001060:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	e005      	b.n	8001074 <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800106e:	dc01      	bgt.n	8001074 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MotorR_SetPWM+0x60>)
 8001072:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0a      	blt.n	8001090 <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MotorR_SetPWM+0x64>)
 8001082:	f7ff ff6c 	bl	8000f5e <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001086:	490c      	ldr	r1, [pc, #48]	; (80010b8 <MotorR_SetPWM+0x68>)
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <MotorR_SetPWM+0x6c>)
 800108a:	f7ff ff84 	bl	8000f96 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 800108e:	e00a      	b.n	80010a6 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001096:	4619      	mov	r1, r3
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MotorR_SetPWM+0x64>)
 800109a:	f7ff ff60 	bl	8000f5e <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <MotorR_SetPWM+0x68>)
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <MotorR_SetPWM+0x6c>)
 80010a2:	f7ff ff69 	bl	8000f78 <LL_GPIO_SetOutputPin>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	ffffe3e0 	.word	0xffffe3e0
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	04020002 	.word	0x04020002
 80010bc:	40010800 	.word	0x40010800

080010c0 <Servo_SetAngle>:

void Servo_SetAngle(float ServoAngle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90) ServoAngle = 90;
 80010c8:	4911      	ldr	r1, [pc, #68]	; (8001110 <Servo_SetAngle+0x50>)
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff00 	bl	8000ed0 <__aeabi_fcmpgt>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <Servo_SetAngle+0x1c>
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <Servo_SetAngle+0x50>)
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	e008      	b.n	80010ee <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90) ServoAngle = -90;
 80010dc:	490d      	ldr	r1, [pc, #52]	; (8001114 <Servo_SetAngle+0x54>)
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fed8 	bl	8000e94 <__aeabi_fcmplt>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <Servo_SetAngle+0x2e>
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <Servo_SetAngle+0x54>)
 80010ec:	607b      	str	r3, [r7, #4]
	SetServoCompare(15+ServoAngle/18);
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <Servo_SetAngle+0x58>)
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff fde5 	bl	8000cc0 <__aeabi_fdiv>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4908      	ldr	r1, [pc, #32]	; (800111c <Servo_SetAngle+0x5c>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc24 	bl	8000948 <__addsf3>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f932 	bl	800336c <SetServoCompare>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	42b40000 	.word	0x42b40000
 8001114:	c2b40000 	.word	0xc2b40000
 8001118:	41900000 	.word	0x41900000
 800111c:	41700000 	.word	0x41700000

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4906      	ldr	r1, [pc, #24]	; (80011b8 <__NVIC_EnableIRQ+0x34>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001274:	b490      	push	{r4, r7}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	332c      	adds	r3, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800128c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001290:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	fa92 f2a2 	rbit	r2, r2
 8001298:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	fab2 f282 	clz	r2, r2
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	40d3      	lsrs	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	211f      	movs	r1, #31
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	401a      	ands	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 011f 	and.w	r1, r3, #31
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc90      	pop	{r4, r7}
 80012d8:	4770      	bx	lr

080012da <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012fe:	b490      	push	{r4, r7}
 8001300:	b08a      	sub	sp, #40	; 0x28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	4619      	mov	r1, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800131a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	fa92 f2a2 	rbit	r2, r2
 8001322:	613a      	str	r2, [r7, #16]
  return result;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	fab2 f282 	clz	r2, r2
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	40d3      	lsrs	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800133c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001340:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	69f9      	ldr	r1, [r7, #28]
 8001344:	fa91 f1a1 	rbit	r1, r1
 8001348:	61b9      	str	r1, [r7, #24]
  return result;
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	fab1 f181 	clz	r1, r1
 8001350:	b2c9      	uxtb	r1, r1
 8001352:	40cb      	lsrs	r3, r1
 8001354:	2107      	movs	r1, #7
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	401a      	ands	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001364:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001368:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136c:	fa91 f1a1 	rbit	r1, r1
 8001370:	6239      	str	r1, [r7, #32]
  return result;
 8001372:	6a39      	ldr	r1, [r7, #32]
 8001374:	fab1 f181 	clz	r1, r1
 8001378:	b2c9      	uxtb	r1, r1
 800137a:	40cb      	lsrs	r3, r1
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bc90      	pop	{r4, r7}
 800138e:	4770      	bx	lr

08001390 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f043 0204 	orr.w	r2, r3, #4
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b04      	cmp	r3, #4
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LL_DMA_EnableChannel+0x38>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	461a      	mov	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	3a01      	subs	r2, #1
 800142e:	4906      	ldr	r1, [pc, #24]	; (8001448 <LL_DMA_EnableChannel+0x38>)
 8001430:	5c8a      	ldrb	r2, [r1, r2]
 8001432:	4611      	mov	r1, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	440a      	add	r2, r1
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6013      	str	r3, [r2, #0]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	08005798 	.word	0x08005798

0800144c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3b01      	subs	r3, #1
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <LL_DMA_SetDataTransferDirection+0x44>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800146c:	f023 0310 	bic.w	r3, r3, #16
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	3a01      	subs	r2, #1
 8001474:	4906      	ldr	r1, [pc, #24]	; (8001490 <LL_DMA_SetDataTransferDirection+0x44>)
 8001476:	5c8a      	ldrb	r2, [r1, r2]
 8001478:	4611      	mov	r1, r2
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	440a      	add	r2, r1
 800147e:	4611      	mov	r1, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	08005798 	.word	0x08005798

08001494 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LL_DMA_SetMode+0x40>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 0220 	bic.w	r2, r3, #32
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	4906      	ldr	r1, [pc, #24]	; (80014d4 <LL_DMA_SetMode+0x40>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	4619      	mov	r1, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	440b      	add	r3, r1
 80014c2:	4619      	mov	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	08005798 	.word	0x08005798

080014d8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LL_DMA_SetPeriphIncMode+0x40>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	4906      	ldr	r1, [pc, #24]	; (8001518 <LL_DMA_SetPeriphIncMode+0x40>)
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	4619      	mov	r1, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	440b      	add	r3, r1
 8001506:	4619      	mov	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	08005798 	.word	0x08005798

0800151c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LL_DMA_SetMemoryIncMode+0x40>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	461a      	mov	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3b01      	subs	r3, #1
 8001540:	4906      	ldr	r1, [pc, #24]	; (800155c <LL_DMA_SetMemoryIncMode+0x40>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	4619      	mov	r1, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	440b      	add	r3, r1
 800154a:	4619      	mov	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	08005798 	.word	0x08005798

08001560 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <LL_DMA_SetPeriphSize+0x40>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	461a      	mov	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	3b01      	subs	r3, #1
 8001584:	4906      	ldr	r1, [pc, #24]	; (80015a0 <LL_DMA_SetPeriphSize+0x40>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	4619      	mov	r1, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	440b      	add	r3, r1
 800158e:	4619      	mov	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	08005798 	.word	0x08005798

080015a4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <LL_DMA_SetMemorySize+0x40>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	461a      	mov	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <LL_DMA_SetMemorySize+0x40>)
 80015ca:	5ccb      	ldrb	r3, [r1, r3]
 80015cc:	4619      	mov	r1, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	440b      	add	r3, r1
 80015d2:	4619      	mov	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	08005798 	.word	0x08005798

080015e8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	4619      	mov	r1, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	440b      	add	r3, r1
 8001616:	4619      	mov	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	08005798 	.word	0x08005798

0800162c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3b01      	subs	r3, #1
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <LL_DMA_SetDataLength+0x40>)
 800163e:	5cd3      	ldrb	r3, [r2, r3]
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	3a01      	subs	r2, #1
 8001650:	4906      	ldr	r1, [pc, #24]	; (800166c <LL_DMA_SetDataLength+0x40>)
 8001652:	5c8a      	ldrb	r2, [r1, r2]
 8001654:	4611      	mov	r1, r2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	440a      	add	r2, r1
 800165a:	4611      	mov	r1, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	08005798 	.word	0x08005798

08001670 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3b01      	subs	r3, #1
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <LL_DMA_SetMemoryAddress+0x2c>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	08005798 	.word	0x08005798

080016a0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <LL_DMA_SetPeriphAddress+0x2c>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6093      	str	r3, [r2, #8]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	08005798 	.word	0x08005798

080016d0 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f023 0201 	bic.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60da      	str	r2, [r3, #12]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <LL_RCC_HSE_Enable+0x18>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <LL_RCC_HSE_Enable+0x18>)
 8001776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000

08001788 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <LL_RCC_HSE_IsReady+0x20>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001798:	bf0c      	ite	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	2300      	movne	r3, #0
 800179e:	b2db      	uxtb	r3, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000

080017ac <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <LL_RCC_SetSysClkSource+0x24>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 0203 	bic.w	r2, r3, #3
 80017bc:	4904      	ldr	r1, [pc, #16]	; (80017d0 <LL_RCC_SetSysClkSource+0x24>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <LL_RCC_GetSysClkSource+0x14>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000

080017ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <LL_RCC_SetAHBPrescaler+0x24>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	4904      	ldr	r1, [pc, #16]	; (8001810 <LL_RCC_SetAHBPrescaler+0x24>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <LL_RCC_SetAPB1Prescaler+0x24>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800184c:	4904      	ldr	r1, [pc, #16]	; (8001860 <LL_RCC_SetAPB2Prescaler+0x24>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <LL_RCC_SetADCClockSource+0x24>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001874:	4904      	ldr	r1, [pc, #16]	; (8001888 <LL_RCC_SetADCClockSource+0x24>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <LL_RCC_PLL_Enable+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <LL_RCC_PLL_Enable+0x18>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	40021000 	.word	0x40021000

080018a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <LL_RCC_PLL_IsReady+0x20>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000

080018cc <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	430b      	orrs	r3, r1
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000

080018fc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4313      	orrs	r3, r2
 800190e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4013      	ands	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000

0800198c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 0207 	bic.w	r2, r3, #7
 800199c:	4904      	ldr	r1, [pc, #16]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000

080019b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <LL_FLASH_GetLatency+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40022000 	.word	0x40022000

080019cc <LL_TIM_EnableCounter>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	601a      	str	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <LL_TIM_EnableARRPreload>:
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	601a      	str	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <LL_TIM_DisableARRPreload>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <LL_TIM_SetCounter>:
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <LL_TIM_OC_DisableFast>:
{
 8001a40:	b4b0      	push	{r4, r5, r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d01c      	beq.n	8001a8a <LL_TIM_OC_DisableFast+0x4a>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d017      	beq.n	8001a86 <LL_TIM_OC_DisableFast+0x46>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d012      	beq.n	8001a82 <LL_TIM_OC_DisableFast+0x42>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2b40      	cmp	r3, #64	; 0x40
 8001a60:	d00d      	beq.n	8001a7e <LL_TIM_OC_DisableFast+0x3e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a68:	d007      	beq.n	8001a7a <LL_TIM_OC_DisableFast+0x3a>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a70:	d101      	bne.n	8001a76 <LL_TIM_OC_DisableFast+0x36>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e00a      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e008      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3318      	adds	r3, #24
 8001a92:	461a      	mov	r2, r3
 8001a94:	4629      	mov	r1, r5
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <LL_TIM_OC_DisableFast+0x7c>)
 8001a98:	5c5b      	ldrb	r3, [r3, r1]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <LL_TIM_OC_DisableFast+0x80>)
 8001aa4:	5c5b      	ldrb	r3, [r3, r1]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	408b      	lsls	r3, r1
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	6023      	str	r3, [r4, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bcb0      	pop	{r4, r5, r7}
 8001aba:	4770      	bx	lr
 8001abc:	080057a0 	.word	0x080057a0
 8001ac0:	080057a8 	.word	0x080057a8

08001ac4 <LL_TIM_OC_EnablePreload>:
{
 8001ac4:	b4b0      	push	{r4, r5, r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d01c      	beq.n	8001b0e <LL_TIM_OC_EnablePreload+0x4a>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d017      	beq.n	8001b0a <LL_TIM_OC_EnablePreload+0x46>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d012      	beq.n	8001b06 <LL_TIM_OC_EnablePreload+0x42>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b40      	cmp	r3, #64	; 0x40
 8001ae4:	d00d      	beq.n	8001b02 <LL_TIM_OC_EnablePreload+0x3e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aec:	d007      	beq.n	8001afe <LL_TIM_OC_EnablePreload+0x3a>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af4:	d101      	bne.n	8001afa <LL_TIM_OC_EnablePreload+0x36>
 8001af6:	2305      	movs	r3, #5
 8001af8:	e00a      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e008      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e006      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3318      	adds	r3, #24
 8001b16:	461a      	mov	r2, r3
 8001b18:	4629      	mov	r1, r5
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <LL_TIM_OC_EnablePreload+0x7c>)
 8001b1c:	5c5b      	ldrb	r3, [r3, r1]
 8001b1e:	4413      	add	r3, r2
 8001b20:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b22:	6822      	ldr	r2, [r4, #0]
 8001b24:	4629      	mov	r1, r5
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <LL_TIM_OC_EnablePreload+0x80>)
 8001b28:	5c5b      	ldrb	r3, [r3, r1]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	408b      	lsls	r3, r1
 8001b30:	4313      	orrs	r3, r2
 8001b32:	6023      	str	r3, [r4, #0]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bcb0      	pop	{r4, r5, r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	080057a0 	.word	0x080057a0
 8001b44:	080057a8 	.word	0x080057a8

08001b48 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001b48:	b4b0      	push	{r4, r5, r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d01c      	beq.n	8001b94 <LL_TIM_IC_SetActiveInput+0x4c>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d017      	beq.n	8001b90 <LL_TIM_IC_SetActiveInput+0x48>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d012      	beq.n	8001b8c <LL_TIM_IC_SetActiveInput+0x44>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b40      	cmp	r3, #64	; 0x40
 8001b6a:	d00d      	beq.n	8001b88 <LL_TIM_IC_SetActiveInput+0x40>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b72:	d007      	beq.n	8001b84 <LL_TIM_IC_SetActiveInput+0x3c>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7a:	d101      	bne.n	8001b80 <LL_TIM_IC_SetActiveInput+0x38>
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	e00a      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b80:	2306      	movs	r3, #6
 8001b82:	e008      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e006      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e004      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b94:	2300      	movs	r3, #0
 8001b96:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3318      	adds	r3, #24
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001ba2:	5c5b      	ldrb	r3, [r3, r1]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	4629      	mov	r1, r5
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001bae:	5c5b      	ldrb	r3, [r3, r1]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	408b      	lsls	r3, r1
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	401a      	ands	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	4905      	ldr	r1, [pc, #20]	; (8001bd8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001bc2:	5c09      	ldrb	r1, [r1, r0]
 8001bc4:	408b      	lsls	r3, r1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	6023      	str	r3, [r4, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bcb0      	pop	{r4, r5, r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	080057a0 	.word	0x080057a0
 8001bd8:	080057b0 	.word	0x080057b0

08001bdc <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001bdc:	b4b0      	push	{r4, r5, r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d01c      	beq.n	8001c28 <LL_TIM_IC_SetPrescaler+0x4c>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d017      	beq.n	8001c24 <LL_TIM_IC_SetPrescaler+0x48>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d012      	beq.n	8001c20 <LL_TIM_IC_SetPrescaler+0x44>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d00d      	beq.n	8001c1c <LL_TIM_IC_SetPrescaler+0x40>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c06:	d007      	beq.n	8001c18 <LL_TIM_IC_SetPrescaler+0x3c>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d101      	bne.n	8001c14 <LL_TIM_IC_SetPrescaler+0x38>
 8001c10:	2305      	movs	r3, #5
 8001c12:	e00a      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c14:	2306      	movs	r3, #6
 8001c16:	e008      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3318      	adds	r3, #24
 8001c30:	461a      	mov	r2, r3
 8001c32:	4629      	mov	r1, r5
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001c36:	5c5b      	ldrb	r3, [r3, r1]
 8001c38:	4413      	add	r3, r2
 8001c3a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	4629      	mov	r1, r5
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <LL_TIM_IC_SetPrescaler+0x90>)
 8001c42:	5c5b      	ldrb	r3, [r3, r1]
 8001c44:	4619      	mov	r1, r3
 8001c46:	230c      	movs	r3, #12
 8001c48:	408b      	lsls	r3, r1
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	4628      	mov	r0, r5
 8001c54:	4905      	ldr	r1, [pc, #20]	; (8001c6c <LL_TIM_IC_SetPrescaler+0x90>)
 8001c56:	5c09      	ldrb	r1, [r1, r0]
 8001c58:	408b      	lsls	r3, r1
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	6023      	str	r3, [r4, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bcb0      	pop	{r4, r5, r7}
 8001c66:	4770      	bx	lr
 8001c68:	080057a0 	.word	0x080057a0
 8001c6c:	080057b0 	.word	0x080057b0

08001c70 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001c70:	b4b0      	push	{r4, r5, r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d01c      	beq.n	8001cbc <LL_TIM_IC_SetFilter+0x4c>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d017      	beq.n	8001cb8 <LL_TIM_IC_SetFilter+0x48>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d012      	beq.n	8001cb4 <LL_TIM_IC_SetFilter+0x44>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	d00d      	beq.n	8001cb0 <LL_TIM_IC_SetFilter+0x40>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c9a:	d007      	beq.n	8001cac <LL_TIM_IC_SetFilter+0x3c>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca2:	d101      	bne.n	8001ca8 <LL_TIM_IC_SetFilter+0x38>
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	e00a      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001ca8:	2306      	movs	r3, #6
 8001caa:	e008      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e006      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e004      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e002      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3318      	adds	r3, #24
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LL_TIM_IC_SetFilter+0x8c>)
 8001cca:	5c5b      	ldrb	r3, [r3, r1]
 8001ccc:	4413      	add	r3, r2
 8001cce:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001cd0:	6822      	ldr	r2, [r4, #0]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <LL_TIM_IC_SetFilter+0x90>)
 8001cd6:	5c5b      	ldrb	r3, [r3, r1]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	23f0      	movs	r3, #240	; 0xf0
 8001cdc:	408b      	lsls	r3, r1
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	4905      	ldr	r1, [pc, #20]	; (8001d00 <LL_TIM_IC_SetFilter+0x90>)
 8001cea:	5c09      	ldrb	r1, [r1, r0]
 8001cec:	408b      	lsls	r3, r1
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	6023      	str	r3, [r4, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bcb0      	pop	{r4, r5, r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	080057a0 	.word	0x080057a0
 8001d00:	080057b0 	.word	0x080057b0

08001d04 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001d04:	b490      	push	{r4, r7}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d01c      	beq.n	8001d50 <LL_TIM_IC_SetPolarity+0x4c>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d017      	beq.n	8001d4c <LL_TIM_IC_SetPolarity+0x48>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d012      	beq.n	8001d48 <LL_TIM_IC_SetPolarity+0x44>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d00d      	beq.n	8001d44 <LL_TIM_IC_SetPolarity+0x40>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2e:	d007      	beq.n	8001d40 <LL_TIM_IC_SetPolarity+0x3c>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d101      	bne.n	8001d3c <LL_TIM_IC_SetPolarity+0x38>
 8001d38:	2305      	movs	r3, #5
 8001d3a:	e00a      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e008      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e006      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d44:	2303      	movs	r3, #3
 8001d46:	e004      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e002      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d50:	2300      	movs	r3, #0
 8001d52:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4621      	mov	r1, r4
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <LL_TIM_IC_SetPolarity+0x80>)
 8001d5c:	5c5b      	ldrb	r3, [r3, r1]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	230a      	movs	r3, #10
 8001d62:	408b      	lsls	r3, r1
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	4621      	mov	r1, r4
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <LL_TIM_IC_SetPolarity+0x80>)
 8001d6c:	5c5b      	ldrb	r3, [r3, r1]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	408b      	lsls	r3, r1
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc90      	pop	{r4, r7}
 8001d82:	4770      	bx	lr
 8001d84:	080057b8 	.word	0x080057b8

08001d88 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d9a:	f023 0307 	bic.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	609a      	str	r2, [r3, #8]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 0207 	bic.w	r2, r3, #7
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f06f 0201 	mvn.w	r2, #1
 8001e42:	611a      	str	r2, [r3, #16]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60da      	str	r2, [r3, #12]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	615a      	str	r2, [r3, #20]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	605a      	str	r2, [r3, #4]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <LL_GPIO_SetPinMode>:
{
 8001ef4:	b490      	push	{r4, r7}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0e1b      	lsrs	r3, r3, #24
 8001f08:	4413      	add	r3, r2
 8001f0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	613b      	str	r3, [r7, #16]
  return result;
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	210f      	movs	r1, #15
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	61bb      	str	r3, [r7, #24]
  return result;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	6023      	str	r3, [r4, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc90      	pop	{r4, r7}
 8001f56:	4770      	bx	lr

08001f58 <LL_GPIO_ResetOutputPin>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	615a      	str	r2, [r3, #20]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8001f82:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	6053      	str	r3, [r2, #4]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40010000 	.word	0x40010000

08001f98 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8001fa2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	6053      	str	r3, [r2, #4]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40010000 	.word	0x40010000

08001fb8 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8001fc2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fc6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001fca:	6053      	str	r3, [r2, #4]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8001fea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ff2:	6053      	str	r3, [r2, #4]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40010000 	.word	0x40010000

08002000 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800200a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800200e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a03      	ldr	r2, [pc, #12]	; (8002024 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201a:	6053      	str	r3, [r2, #4]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40010000 	.word	0x40010000

08002028 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	3302      	adds	r3, #2
 800203a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	43db      	mvns	r3, r3
 8002044:	ea02 0103 	and.w	r1, r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	60bb      	str	r3, [r7, #8]
  return result;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	fa03 f202 	lsl.w	r2, r3, r2
 8002066:	4806      	ldr	r0, [pc, #24]	; (8002080 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	430a      	orrs	r2, r1
 800206e:	3302      	adds	r3, #2
 8002070:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000

08002084 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 800208c:	bf00      	nop
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <__io_putchar+0x2c>)
 8002090:	f7ff ff10 	bl	8001eb4 <LL_USART_IsActiveFlag_TC>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f9      	beq.n	800208e <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <__io_putchar+0x2c>)
 80020a2:	f7ff ff19 	bl	8001ed8 <LL_USART_TransmitData8>

  	return ch;
 80020a6:	687b      	ldr	r3, [r7, #4]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013800 	.word	0x40013800
 80020b4:	00000000 	.word	0x00000000

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b598      	push	{r3, r4, r7, lr}
 80020ba:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff fc4d 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80020c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80020c6:	f7ff fc31 	bl	800192c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ca:	2003      	movs	r0, #3
 80020cc:	f7ff f828 	bl	8001120 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80020d0:	f7ff f84a 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2200      	movs	r2, #0
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f898 	bl	8001210 <NVIC_EncodePriority>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4619      	mov	r1, r3
 80020e4:	f06f 000b 	mvn.w	r0, #11
 80020e8:	f7ff f868 	bl	80011bc <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80020ec:	f7ff f83c 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2200      	movs	r2, #0
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f88a 	bl	8001210 <NVIC_EncodePriority>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	f06f 000a 	mvn.w	r0, #10
 8002104:	f7ff f85a 	bl	80011bc <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002108:	f7ff f82e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 800210c:	4603      	mov	r3, r0
 800210e:	2200      	movs	r2, #0
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f87c 	bl	8001210 <NVIC_EncodePriority>
 8002118:	4603      	mov	r3, r0
 800211a:	4619      	mov	r1, r3
 800211c:	f06f 0009 	mvn.w	r0, #9
 8002120:	f7ff f84c 	bl	80011bc <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002124:	f7ff f820 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002128:	4603      	mov	r3, r0
 800212a:	2200      	movs	r2, #0
 800212c:	2101      	movs	r1, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f86e 	bl	8001210 <NVIC_EncodePriority>
 8002134:	4603      	mov	r3, r0
 8002136:	4619      	mov	r1, r3
 8002138:	f06f 0004 	mvn.w	r0, #4
 800213c:	f7ff f83e 	bl	80011bc <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002140:	f7ff f812 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002144:	4603      	mov	r3, r0
 8002146:	2200      	movs	r2, #0
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f860 	bl	8001210 <NVIC_EncodePriority>
 8002150:	4603      	mov	r3, r0
 8002152:	4619      	mov	r1, r3
 8002154:	f06f 0003 	mvn.w	r0, #3
 8002158:	f7ff f830 	bl	80011bc <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800215c:	f7ff f804 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002160:	4603      	mov	r3, r0
 8002162:	2200      	movs	r2, #0
 8002164:	2101      	movs	r1, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f852 	bl	8001210 <NVIC_EncodePriority>
 800216c:	4603      	mov	r3, r0
 800216e:	4619      	mov	r1, r3
 8002170:	f06f 0001 	mvn.w	r0, #1
 8002174:	f7ff f822 	bl	80011bc <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002178:	f7fe fff6 	bl	8001168 <__NVIC_GetPriorityGrouping>
 800217c:	4603      	mov	r3, r0
 800217e:	2200      	movs	r2, #0
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f844 	bl	8001210 <NVIC_EncodePriority>
 8002188:	4603      	mov	r3, r0
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f7ff f814 	bl	80011bc <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8002194:	f7ff ff34 	bl	8002000 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 8002198:	4bc5      	ldr	r3, [pc, #788]	; (80024b0 <main+0x3f8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6858      	ldr	r0, [r3, #4]
 800219e:	2300      	movs	r3, #0
 80021a0:	2202      	movs	r2, #2
 80021a2:	2100      	movs	r1, #0
 80021a4:	f002 fb5c 	bl	8004860 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80021a8:	4bc1      	ldr	r3, [pc, #772]	; (80024b0 <main+0x3f8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6898      	ldr	r0, [r3, #8]
 80021ae:	2300      	movs	r3, #0
 80021b0:	2202      	movs	r2, #2
 80021b2:	2100      	movs	r1, #0
 80021b4:	f002 fb54 	bl	8004860 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80021b8:	4bbd      	ldr	r3, [pc, #756]	; (80024b0 <main+0x3f8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68d8      	ldr	r0, [r3, #12]
 80021be:	2300      	movs	r3, #0
 80021c0:	2202      	movs	r2, #2
 80021c2:	2100      	movs	r1, #0
 80021c4:	f002 fb4c 	bl	8004860 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c8:	f000 fa54 	bl	8002674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021cc:	f000 fed6 	bl	8002f7c <MX_GPIO_Init>
  MX_DMA_Init();
 80021d0:	f000 febc 	bl	8002f4c <MX_DMA_Init>
  MX_TIM1_Init();
 80021d4:	f000 fc00 	bl	80029d8 <MX_TIM1_Init>
  MX_ADC1_Init();
 80021d8:	f000 fa8e 	bl	80026f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80021dc:	f000 fba2 	bl	8002924 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021e0:	f000 fe4a 	bl	8002e78 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80021e4:	f000 fcbe 	bl	8002b64 <MX_TIM2_Init>
  MX_TIM3_Init();
 80021e8:	f000 fd6c 	bl	8002cc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021ec:	f000 fdfa 	bl	8002de4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 80021f0:	f7fe fee0 	bl	8000fb4 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 80021f4:	f7fe fee8 	bl	8000fc8 <MotorR_EnablePWM>
  MotorL_SetPWM(0);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7fe fef1 	bl	8000fe0 <MotorL_SetPWM>
  MotorR_SetPWM(0);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe ff26 	bl	8001050 <MotorR_SetPWM>
  Servo_SetAngle(0);
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f7fe ff5a 	bl	80010c0 <Servo_SetAngle>

//  uint32_t Count = LL_TIM_GetCounter(TIM2);

  while (1)
  {
	  LineDetect = 0;
 800220c:	4ba9      	ldr	r3, [pc, #676]	; (80024b4 <main+0x3fc>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
	  Sensor_Convert_A2D();
 8002212:	f000 ff71 	bl	80030f8 <Sensor_Convert_A2D>
//	  LL_mDelay(200);
//	  Servo_SetAngle(20);
//	  LL_mDelay(200);

//	  LL_mDelay(2);
	  if(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000)
 8002216:	4ba7      	ldr	r3, [pc, #668]	; (80024b4 <main+0x3fc>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b18      	cmp	r3, #24
 800221c:	d007      	beq.n	800222e <main+0x176>
 800221e:	4ba5      	ldr	r3, [pc, #660]	; (80024b4 <main+0x3fc>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b1c      	cmp	r3, #28
 8002224:	d003      	beq.n	800222e <main+0x176>
 8002226:	4ba3      	ldr	r3, [pc, #652]	; (80024b4 <main+0x3fc>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b38      	cmp	r3, #56	; 0x38
 800222c:	d111      	bne.n	8002252 <main+0x19a>
	  {
		  CarState = DiThang;
 800222e:	4ba2      	ldr	r3, [pc, #648]	; (80024b8 <main+0x400>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
		  MotorL_SetPWM(MaxSpeed);
 8002234:	4ba1      	ldr	r3, [pc, #644]	; (80024bc <main+0x404>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fed1 	bl	8000fe0 <MotorL_SetPWM>
		  MotorR_SetPWM(MaxSpeed);
 800223e:	4b9f      	ldr	r3, [pc, #636]	; (80024bc <main+0x404>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ff04 	bl	8001050 <MotorR_SetPWM>
		  Servo_SetAngle(0);
 8002248:	f04f 0000 	mov.w	r0, #0
 800224c:	f7fe ff38 	bl	80010c0 <Servo_SetAngle>
		  continue;
 8002250:	e1f5      	b.n	800263e <main+0x586>
	  }

	  if(LineDetect == 0b10000000 || LineDetect == 0b11000000 || LineDetect == 0b11100000 ||
 8002252:	4b98      	ldr	r3, [pc, #608]	; (80024b4 <main+0x3fc>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b80      	cmp	r3, #128	; 0x80
 8002258:	d00f      	beq.n	800227a <main+0x1c2>
 800225a:	4b96      	ldr	r3, [pc, #600]	; (80024b4 <main+0x3fc>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2bc0      	cmp	r3, #192	; 0xc0
 8002260:	d00b      	beq.n	800227a <main+0x1c2>
 8002262:	4b94      	ldr	r3, [pc, #592]	; (80024b4 <main+0x3fc>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2be0      	cmp	r3, #224	; 0xe0
 8002268:	d007      	beq.n	800227a <main+0x1c2>
			  LineDetect == 0b01110000 || LineDetect == 0b00110000)
 800226a:	4b92      	ldr	r3, [pc, #584]	; (80024b4 <main+0x3fc>)
 800226c:	781b      	ldrb	r3, [r3, #0]
	  if(LineDetect == 0b10000000 || LineDetect == 0b11000000 || LineDetect == 0b11100000 ||
 800226e:	2b70      	cmp	r3, #112	; 0x70
 8002270:	d003      	beq.n	800227a <main+0x1c2>
			  LineDetect == 0b01110000 || LineDetect == 0b00110000)
 8002272:	4b90      	ldr	r3, [pc, #576]	; (80024b4 <main+0x3fc>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b30      	cmp	r3, #48	; 0x30
 8002278:	d102      	bne.n	8002280 <main+0x1c8>
	  {
		  CarState = LechPhai;
 800227a:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <main+0x400>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
	  }
	  if (LineDetect == 0b00000001 || LineDetect == 0b00000011 || LineDetect == 0b00000111 ||
 8002280:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <main+0x3fc>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d00f      	beq.n	80022a8 <main+0x1f0>
 8002288:	4b8a      	ldr	r3, [pc, #552]	; (80024b4 <main+0x3fc>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d00b      	beq.n	80022a8 <main+0x1f0>
 8002290:	4b88      	ldr	r3, [pc, #544]	; (80024b4 <main+0x3fc>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b07      	cmp	r3, #7
 8002296:	d007      	beq.n	80022a8 <main+0x1f0>
			  LineDetect == 0b00001110 || LineDetect == 0b00001100)
 8002298:	4b86      	ldr	r3, [pc, #536]	; (80024b4 <main+0x3fc>)
 800229a:	781b      	ldrb	r3, [r3, #0]
	  if (LineDetect == 0b00000001 || LineDetect == 0b00000011 || LineDetect == 0b00000111 ||
 800229c:	2b0e      	cmp	r3, #14
 800229e:	d003      	beq.n	80022a8 <main+0x1f0>
			  LineDetect == 0b00001110 || LineDetect == 0b00001100)
 80022a0:	4b84      	ldr	r3, [pc, #528]	; (80024b4 <main+0x3fc>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	d102      	bne.n	80022ae <main+0x1f6>
	  {
		  CarState = LechTrai;
 80022a8:	4b83      	ldr	r3, [pc, #524]	; (80024b8 <main+0x400>)
 80022aa:	22ff      	movs	r2, #255	; 0xff
 80022ac:	701a      	strb	r2, [r3, #0]
	  }

	  if (CarState == LechTrai)
 80022ae:	4b82      	ldr	r3, [pc, #520]	; (80024b8 <main+0x400>)
 80022b0:	f993 3000 	ldrsb.w	r3, [r3]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	f040 80d7 	bne.w	800246a <main+0x3b2>
	  {
		  switch (LineDetect)
 80022bc:	4b7d      	ldr	r3, [pc, #500]	; (80024b4 <main+0x3fc>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	2b0d      	cmp	r3, #13
 80022c4:	f200 81ba 	bhi.w	800263c <main+0x584>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <main+0x218>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	08002309 	.word	0x08002309
 80022d4:	0800263d 	.word	0x0800263d
 80022d8:	08002361 	.word	0x08002361
 80022dc:	0800263d 	.word	0x0800263d
 80022e0:	0800263d 	.word	0x0800263d
 80022e4:	0800263d 	.word	0x0800263d
 80022e8:	080023b9 	.word	0x080023b9
 80022ec:	0800263d 	.word	0x0800263d
 80022f0:	0800263d 	.word	0x0800263d
 80022f4:	0800263d 	.word	0x0800263d
 80022f8:	0800263d 	.word	0x0800263d
 80022fc:	0800242d 	.word	0x0800242d
 8002300:	0800263d 	.word	0x0800263d
 8002304:	080023f3 	.word	0x080023f3
		  {
			  case	0b00000001:
				  MotorL_SetPWM(MaxSpeed * 0.75);
 8002308:	4b6c      	ldr	r3, [pc, #432]	; (80024bc <main+0x404>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f871 	bl	80003f4 <__aeabi_i2d>
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <main+0x408>)
 8002318:	f7fe f8d6 	bl	80004c8 <__aeabi_dmul>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	4618      	mov	r0, r3
 8002322:	4621      	mov	r1, r4
 8002324:	f7fe fae2 	bl	80008ec <__aeabi_d2iz>
 8002328:	4603      	mov	r3, r0
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fe58 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.9);
 8002330:	4b62      	ldr	r3, [pc, #392]	; (80024bc <main+0x404>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f85d 	bl	80003f4 <__aeabi_i2d>
 800233a:	a355      	add	r3, pc, #340	; (adr r3, 8002490 <main+0x3d8>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f8c2 	bl	80004c8 <__aeabi_dmul>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	4618      	mov	r0, r3
 800234a:	4621      	mov	r1, r4
 800234c:	f7fe face 	bl	80008ec <__aeabi_d2iz>
 8002350:	4603      	mov	r3, r0
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fe7c 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(54);
 8002358:	485a      	ldr	r0, [pc, #360]	; (80024c4 <main+0x40c>)
 800235a:	f7fe feb1 	bl	80010c0 <Servo_SetAngle>
				  break;
 800235e:	e083      	b.n	8002468 <main+0x3b0>
			  case 0b00000011:
				  MotorL_SetPWM(MaxSpeed * 0.8);
 8002360:	4b56      	ldr	r3, [pc, #344]	; (80024bc <main+0x404>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f845 	bl	80003f4 <__aeabi_i2d>
 800236a:	a34b      	add	r3, pc, #300	; (adr r3, 8002498 <main+0x3e0>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f8aa 	bl	80004c8 <__aeabi_dmul>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	4618      	mov	r0, r3
 800237a:	4621      	mov	r1, r4
 800237c:	f7fe fab6 	bl	80008ec <__aeabi_d2iz>
 8002380:	4603      	mov	r3, r0
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fe2c 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.9);
 8002388:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <main+0x404>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe f831 	bl	80003f4 <__aeabi_i2d>
 8002392:	a33f      	add	r3, pc, #252	; (adr r3, 8002490 <main+0x3d8>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f896 	bl	80004c8 <__aeabi_dmul>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	4618      	mov	r0, r3
 80023a2:	4621      	mov	r1, r4
 80023a4:	f7fe faa2 	bl	80008ec <__aeabi_d2iz>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fe50 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(54);
 80023b0:	4844      	ldr	r0, [pc, #272]	; (80024c4 <main+0x40c>)
 80023b2:	f7fe fe85 	bl	80010c0 <Servo_SetAngle>
				  break;
 80023b6:	e057      	b.n	8002468 <main+0x3b0>
			  case 0b00000111:
				  MotorL_SetPWM(MaxSpeed * 0.85);
 80023b8:	4b40      	ldr	r3, [pc, #256]	; (80024bc <main+0x404>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f819 	bl	80003f4 <__aeabi_i2d>
 80023c2:	a337      	add	r3, pc, #220	; (adr r3, 80024a0 <main+0x3e8>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fe f87e 	bl	80004c8 <__aeabi_dmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	4618      	mov	r0, r3
 80023d2:	4621      	mov	r1, r4
 80023d4:	f7fe fa8a 	bl	80008ec <__aeabi_d2iz>
 80023d8:	4603      	mov	r3, r0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fe00 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <main+0x404>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fe33 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(36);
 80023ea:	4837      	ldr	r0, [pc, #220]	; (80024c8 <main+0x410>)
 80023ec:	f7fe fe68 	bl	80010c0 <Servo_SetAngle>
				  break;
 80023f0:	e03a      	b.n	8002468 <main+0x3b0>
			  case 0b00001110:
				  MotorL_SetPWM(MaxSpeed * 0.9);
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <main+0x404>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fd fffc 	bl	80003f4 <__aeabi_i2d>
 80023fc:	a324      	add	r3, pc, #144	; (adr r3, 8002490 <main+0x3d8>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fe f861 	bl	80004c8 <__aeabi_dmul>
 8002406:	4603      	mov	r3, r0
 8002408:	460c      	mov	r4, r1
 800240a:	4618      	mov	r0, r3
 800240c:	4621      	mov	r1, r4
 800240e:	f7fe fa6d 	bl	80008ec <__aeabi_d2iz>
 8002412:	4603      	mov	r3, r0
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fde3 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <main+0x404>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fe16 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(18);
 8002424:	4829      	ldr	r0, [pc, #164]	; (80024cc <main+0x414>)
 8002426:	f7fe fe4b 	bl	80010c0 <Servo_SetAngle>
				  break;
 800242a:	e01d      	b.n	8002468 <main+0x3b0>
			  case 0b00001100:
				  MotorL_SetPWM(MaxSpeed * 0.95);
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <main+0x404>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fd ffdf 	bl	80003f4 <__aeabi_i2d>
 8002436:	a31c      	add	r3, pc, #112	; (adr r3, 80024a8 <main+0x3f0>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fe f844 	bl	80004c8 <__aeabi_dmul>
 8002440:	4603      	mov	r3, r0
 8002442:	460c      	mov	r4, r1
 8002444:	4618      	mov	r0, r3
 8002446:	4621      	mov	r1, r4
 8002448:	f7fe fa50 	bl	80008ec <__aeabi_d2iz>
 800244c:	4603      	mov	r3, r0
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fdc6 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <main+0x404>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fdf9 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(0);
 800245e:	f04f 0000 	mov.w	r0, #0
 8002462:	f7fe fe2d 	bl	80010c0 <Servo_SetAngle>
				  break;
 8002466:	bf00      	nop
		  }
		  continue;
 8002468:	e0e8      	b.n	800263c <main+0x584>
	  }
	  if (CarState == LechPhai)
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <main+0x400>)
 800246c:	f993 3000 	ldrsb.w	r3, [r3]
 8002470:	2b01      	cmp	r3, #1
 8002472:	f47f aecb 	bne.w	800220c <main+0x154>
	  {
		  switch (LineDetect)
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <main+0x3fc>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d02d      	beq.n	80024da <main+0x422>
 800247e:	2b80      	cmp	r3, #128	; 0x80
 8002480:	dc26      	bgt.n	80024d0 <main+0x418>
 8002482:	2b30      	cmp	r3, #48	; 0x30
 8002484:	f000 80bb 	beq.w	80025fe <main+0x546>
 8002488:	2b70      	cmp	r3, #112	; 0x70
 800248a:	f000 809b 	beq.w	80025c4 <main+0x50c>
				  MotorR_SetPWM(MaxSpeed * 0.95);
				  MotorL_SetPWM(MaxSpeed * 1);
				  Servo_SetAngle(-0);
				  break;
		  }
		  continue;
 800248e:	e0d6      	b.n	800263e <main+0x586>
 8002490:	cccccccd 	.word	0xcccccccd
 8002494:	3feccccc 	.word	0x3feccccc
 8002498:	9999999a 	.word	0x9999999a
 800249c:	3fe99999 	.word	0x3fe99999
 80024a0:	33333333 	.word	0x33333333
 80024a4:	3feb3333 	.word	0x3feb3333
 80024a8:	66666666 	.word	0x66666666
 80024ac:	3fee6666 	.word	0x3fee6666
 80024b0:	20000018 	.word	0x20000018
 80024b4:	20000099 	.word	0x20000099
 80024b8:	2000009a 	.word	0x2000009a
 80024bc:	20000010 	.word	0x20000010
 80024c0:	3fe80000 	.word	0x3fe80000
 80024c4:	42580000 	.word	0x42580000
 80024c8:	42100000 	.word	0x42100000
 80024cc:	41900000 	.word	0x41900000
		  switch (LineDetect)
 80024d0:	2bc0      	cmp	r3, #192	; 0xc0
 80024d2:	d02e      	beq.n	8002532 <main+0x47a>
 80024d4:	2be0      	cmp	r3, #224	; 0xe0
 80024d6:	d058      	beq.n	800258a <main+0x4d2>
		  continue;
 80024d8:	e0b1      	b.n	800263e <main+0x586>
				  MotorR_SetPWM(MaxSpeed * 0.75);
 80024da:	4b61      	ldr	r3, [pc, #388]	; (8002660 <main+0x5a8>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fd ff88 	bl	80003f4 <__aeabi_i2d>
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	4b5e      	ldr	r3, [pc, #376]	; (8002664 <main+0x5ac>)
 80024ea:	f7fd ffed 	bl	80004c8 <__aeabi_dmul>
 80024ee:	4603      	mov	r3, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	4618      	mov	r0, r3
 80024f4:	4621      	mov	r1, r4
 80024f6:	f7fe f9f9 	bl	80008ec <__aeabi_d2iz>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fda7 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 0.90);
 8002502:	4b57      	ldr	r3, [pc, #348]	; (8002660 <main+0x5a8>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd ff74 	bl	80003f4 <__aeabi_i2d>
 800250c:	a34c      	add	r3, pc, #304	; (adr r3, 8002640 <main+0x588>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f7fd ffd9 	bl	80004c8 <__aeabi_dmul>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	4618      	mov	r0, r3
 800251c:	4621      	mov	r1, r4
 800251e:	f7fe f9e5 	bl	80008ec <__aeabi_d2iz>
 8002522:	4603      	mov	r3, r0
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fd5b 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(-54);
 800252a:	484f      	ldr	r0, [pc, #316]	; (8002668 <main+0x5b0>)
 800252c:	f7fe fdc8 	bl	80010c0 <Servo_SetAngle>
				  break;
 8002530:	e083      	b.n	800263a <main+0x582>
				  MotorR_SetPWM(MaxSpeed * 0.8);
 8002532:	4b4b      	ldr	r3, [pc, #300]	; (8002660 <main+0x5a8>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fd ff5c 	bl	80003f4 <__aeabi_i2d>
 800253c:	a342      	add	r3, pc, #264	; (adr r3, 8002648 <main+0x590>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fd ffc1 	bl	80004c8 <__aeabi_dmul>
 8002546:	4603      	mov	r3, r0
 8002548:	460c      	mov	r4, r1
 800254a:	4618      	mov	r0, r3
 800254c:	4621      	mov	r1, r4
 800254e:	f7fe f9cd 	bl	80008ec <__aeabi_d2iz>
 8002552:	4603      	mov	r3, r0
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fd7b 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 0.9);
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <main+0x5a8>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ff48 	bl	80003f4 <__aeabi_i2d>
 8002564:	a336      	add	r3, pc, #216	; (adr r3, 8002640 <main+0x588>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fd ffad 	bl	80004c8 <__aeabi_dmul>
 800256e:	4603      	mov	r3, r0
 8002570:	460c      	mov	r4, r1
 8002572:	4618      	mov	r0, r3
 8002574:	4621      	mov	r1, r4
 8002576:	f7fe f9b9 	bl	80008ec <__aeabi_d2iz>
 800257a:	4603      	mov	r3, r0
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fd2f 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(-54);
 8002582:	4839      	ldr	r0, [pc, #228]	; (8002668 <main+0x5b0>)
 8002584:	f7fe fd9c 	bl	80010c0 <Servo_SetAngle>
				  break;
 8002588:	e057      	b.n	800263a <main+0x582>
				  MotorR_SetPWM(MaxSpeed * 0.85);
 800258a:	4b35      	ldr	r3, [pc, #212]	; (8002660 <main+0x5a8>)
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ff30 	bl	80003f4 <__aeabi_i2d>
 8002594:	a32e      	add	r3, pc, #184	; (adr r3, 8002650 <main+0x598>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fd ff95 	bl	80004c8 <__aeabi_dmul>
 800259e:	4603      	mov	r3, r0
 80025a0:	460c      	mov	r4, r1
 80025a2:	4618      	mov	r0, r3
 80025a4:	4621      	mov	r1, r4
 80025a6:	f7fe f9a1 	bl	80008ec <__aeabi_d2iz>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fd4f 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 80025b2:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <main+0x5a8>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fd12 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(-36);
 80025bc:	482b      	ldr	r0, [pc, #172]	; (800266c <main+0x5b4>)
 80025be:	f7fe fd7f 	bl	80010c0 <Servo_SetAngle>
				  break;
 80025c2:	e03a      	b.n	800263a <main+0x582>
				  MotorR_SetPWM(MaxSpeed * 0.90);
 80025c4:	4b26      	ldr	r3, [pc, #152]	; (8002660 <main+0x5a8>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ff13 	bl	80003f4 <__aeabi_i2d>
 80025ce:	a31c      	add	r3, pc, #112	; (adr r3, 8002640 <main+0x588>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fd ff78 	bl	80004c8 <__aeabi_dmul>
 80025d8:	4603      	mov	r3, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	4618      	mov	r0, r3
 80025de:	4621      	mov	r1, r4
 80025e0:	f7fe f984 	bl	80008ec <__aeabi_d2iz>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fd32 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <main+0x5a8>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fcf5 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(-18);
 80025f6:	481e      	ldr	r0, [pc, #120]	; (8002670 <main+0x5b8>)
 80025f8:	f7fe fd62 	bl	80010c0 <Servo_SetAngle>
				  break;
 80025fc:	e01d      	b.n	800263a <main+0x582>
				  MotorR_SetPWM(MaxSpeed * 0.95);
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <main+0x5a8>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fef6 	bl	80003f4 <__aeabi_i2d>
 8002608:	a313      	add	r3, pc, #76	; (adr r3, 8002658 <main+0x5a0>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd ff5b 	bl	80004c8 <__aeabi_dmul>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	4618      	mov	r0, r3
 8002618:	4621      	mov	r1, r4
 800261a:	f7fe f967 	bl	80008ec <__aeabi_d2iz>
 800261e:	4603      	mov	r3, r0
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fd15 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <main+0x5a8>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fcd8 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(-0);
 8002630:	f04f 0000 	mov.w	r0, #0
 8002634:	f7fe fd44 	bl	80010c0 <Servo_SetAngle>
				  break;
 8002638:	bf00      	nop
		  continue;
 800263a:	e000      	b.n	800263e <main+0x586>
		  continue;
 800263c:	bf00      	nop
	  LineDetect = 0;
 800263e:	e5e5      	b.n	800220c <main+0x154>
 8002640:	cccccccd 	.word	0xcccccccd
 8002644:	3feccccc 	.word	0x3feccccc
 8002648:	9999999a 	.word	0x9999999a
 800264c:	3fe99999 	.word	0x3fe99999
 8002650:	33333333 	.word	0x33333333
 8002654:	3feb3333 	.word	0x3feb3333
 8002658:	66666666 	.word	0x66666666
 800265c:	3fee6666 	.word	0x3fee6666
 8002660:	20000010 	.word	0x20000010
 8002664:	3fe80000 	.word	0x3fe80000
 8002668:	c2580000 	.word	0xc2580000
 800266c:	c2100000 	.word	0xc2100000
 8002670:	c1900000 	.word	0xc1900000

08002674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002678:	2002      	movs	r0, #2
 800267a:	f7ff f987 	bl	800198c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800267e:	bf00      	nop
 8002680:	f7ff f998 	bl	80019b4 <LL_FLASH_GetLatency>
 8002684:	4603      	mov	r3, r0
 8002686:	2b02      	cmp	r3, #2
 8002688:	d1fa      	bne.n	8002680 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800268a:	f7ff f86f 	bl	800176c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800268e:	bf00      	nop
 8002690:	f7ff f87a 	bl	8001788 <LL_RCC_HSE_IsReady>
 8002694:	4603      	mov	r3, r0
 8002696:	2b01      	cmp	r3, #1
 8002698:	d1fa      	bne.n	8002690 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800269a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800269e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80026a2:	f7ff f913 	bl	80018cc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80026a6:	f7ff f8f1 	bl	800188c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80026aa:	bf00      	nop
 80026ac:	f7ff f8fc 	bl	80018a8 <LL_RCC_PLL_IsReady>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d1fa      	bne.n	80026ac <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7ff f898 	bl	80017ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80026bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026c0:	f7ff f8a8 	bl	8001814 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7ff f8b9 	bl	800183c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026ca:	2002      	movs	r0, #2
 80026cc:	f7ff f86e 	bl	80017ac <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026d0:	bf00      	nop
 80026d2:	f7ff f87f 	bl	80017d4 <LL_RCC_GetSysClkSource>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d1fa      	bne.n	80026d2 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80026dc:	4805      	ldr	r0, [pc, #20]	; (80026f4 <SystemClock_Config+0x80>)
 80026de:	f002 f859 	bl	8004794 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80026e2:	4804      	ldr	r0, [pc, #16]	; (80026f4 <SystemClock_Config+0x80>)
 80026e4:	f002 f864 	bl	80047b0 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 80026e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026ec:	f7ff f8ba 	bl	8001864 <LL_RCC_SetADCClockSource>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	044aa200 	.word	0x044aa200

080026f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08e      	sub	sp, #56	; 0x38
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80026fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800270c:	f107 0318 	add.w	r3, r7, #24
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800272a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800272e:	f7ff f915 	bl	800195c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002732:	2004      	movs	r0, #4
 8002734:	f7ff f912 	bl	800195c <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8002738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273c:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	4619      	mov	r1, r3
 8002746:	486b      	ldr	r0, [pc, #428]	; (80028f4 <MX_ADC1_Init+0x1fc>)
 8002748:	f001 f9b6 	bl	8003ab8 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800274c:	2200      	movs	r2, #0
 800274e:	2101      	movs	r1, #1
 8002750:	4869      	ldr	r0, [pc, #420]	; (80028f8 <MX_ADC1_Init+0x200>)
 8002752:	f7fe fe7b 	bl	800144c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8002756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800275a:	2101      	movs	r1, #1
 800275c:	4866      	ldr	r0, [pc, #408]	; (80028f8 <MX_ADC1_Init+0x200>)
 800275e:	f7fe ff43 	bl	80015e8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002762:	2220      	movs	r2, #32
 8002764:	2101      	movs	r1, #1
 8002766:	4864      	ldr	r0, [pc, #400]	; (80028f8 <MX_ADC1_Init+0x200>)
 8002768:	f7fe fe94 	bl	8001494 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800276c:	2200      	movs	r2, #0
 800276e:	2101      	movs	r1, #1
 8002770:	4861      	ldr	r0, [pc, #388]	; (80028f8 <MX_ADC1_Init+0x200>)
 8002772:	f7fe feb1 	bl	80014d8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	2101      	movs	r1, #1
 800277a:	485f      	ldr	r0, [pc, #380]	; (80028f8 <MX_ADC1_Init+0x200>)
 800277c:	f7fe fece 	bl	800151c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002784:	2101      	movs	r1, #1
 8002786:	485c      	ldr	r0, [pc, #368]	; (80028f8 <MX_ADC1_Init+0x200>)
 8002788:	f7fe feea 	bl	8001560 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 800278c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002790:	2101      	movs	r1, #1
 8002792:	4859      	ldr	r0, [pc, #356]	; (80028f8 <MX_ADC1_Init+0x200>)
 8002794:	f7fe ff06 	bl	80015a4 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 8002798:	2208      	movs	r2, #8
 800279a:	2101      	movs	r1, #1
 800279c:	4856      	ldr	r0, [pc, #344]	; (80028f8 <MX_ADC1_Init+0x200>)
 800279e:	f7fe ff45 	bl	800162c <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &Sensor_ADC_Value);
 80027a2:	4b56      	ldr	r3, [pc, #344]	; (80028fc <MX_ADC1_Init+0x204>)
 80027a4:	461a      	mov	r2, r3
 80027a6:	2101      	movs	r1, #1
 80027a8:	4853      	ldr	r0, [pc, #332]	; (80028f8 <MX_ADC1_Init+0x200>)
 80027aa:	f7fe ff61 	bl	8001670 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 80027ae:	4a54      	ldr	r2, [pc, #336]	; (8002900 <MX_ADC1_Init+0x208>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	4851      	ldr	r0, [pc, #324]	; (80028f8 <MX_ADC1_Init+0x200>)
 80027b4:	f7fe ff74 	bl	80016a0 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 80027b8:	2101      	movs	r1, #1
 80027ba:	484f      	ldr	r0, [pc, #316]	; (80028f8 <MX_ADC1_Init+0x200>)
 80027bc:	f7fe fe28 	bl	8001410 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80027c0:	2300      	movs	r3, #0
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80027c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80027ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ce:	4619      	mov	r1, r3
 80027d0:	484c      	ldr	r0, [pc, #304]	; (8002904 <MX_ADC1_Init+0x20c>)
 80027d2:	f000 ff3f 	bl	8003654 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80027da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027de:	4619      	mov	r1, r3
 80027e0:	4848      	ldr	r0, [pc, #288]	; (8002904 <MX_ADC1_Init+0x20c>)
 80027e2:	f000 ff05 	bl	80035f0 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80027e6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80027ea:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 80027ec:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 80027f0:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80027f6:	2302      	movs	r3, #2
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80027fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	4619      	mov	r1, r3
 8002806:	483f      	ldr	r0, [pc, #252]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002808:	f000 ff4b 	bl	80036a2 <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 800280c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002814:	483b      	ldr	r0, [pc, #236]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002816:	f7fe fd2d 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800281a:	2202      	movs	r2, #2
 800281c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002820:	4838      	ldr	r0, [pc, #224]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002822:	f7fe fd6c 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002826:	4a38      	ldr	r2, [pc, #224]	; (8002908 <MX_ADC1_Init+0x210>)
 8002828:	f240 2105 	movw	r1, #517	; 0x205
 800282c:	4835      	ldr	r0, [pc, #212]	; (8002904 <MX_ADC1_Init+0x20c>)
 800282e:	f7fe fd21 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8002832:	2202      	movs	r2, #2
 8002834:	4934      	ldr	r1, [pc, #208]	; (8002908 <MX_ADC1_Init+0x210>)
 8002836:	4833      	ldr	r0, [pc, #204]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002838:	f7fe fd61 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 800283c:	4a33      	ldr	r2, [pc, #204]	; (800290c <MX_ADC1_Init+0x214>)
 800283e:	f240 210a 	movw	r1, #522	; 0x20a
 8002842:	4830      	ldr	r0, [pc, #192]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002844:	f7fe fd16 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8002848:	2202      	movs	r2, #2
 800284a:	4930      	ldr	r1, [pc, #192]	; (800290c <MX_ADC1_Init+0x214>)
 800284c:	482d      	ldr	r0, [pc, #180]	; (8002904 <MX_ADC1_Init+0x20c>)
 800284e:	f7fe fd56 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8002852:	4a2f      	ldr	r2, [pc, #188]	; (8002910 <MX_ADC1_Init+0x218>)
 8002854:	f240 210f 	movw	r1, #527	; 0x20f
 8002858:	482a      	ldr	r0, [pc, #168]	; (8002904 <MX_ADC1_Init+0x20c>)
 800285a:	f7fe fd0b 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800285e:	2202      	movs	r2, #2
 8002860:	492b      	ldr	r1, [pc, #172]	; (8002910 <MX_ADC1_Init+0x218>)
 8002862:	4828      	ldr	r0, [pc, #160]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002864:	f7fe fd4b 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8002868:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <MX_ADC1_Init+0x21c>)
 800286a:	f44f 7105 	mov.w	r1, #532	; 0x214
 800286e:	4825      	ldr	r0, [pc, #148]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002870:	f7fe fd00 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 8002874:	2202      	movs	r2, #2
 8002876:	4927      	ldr	r1, [pc, #156]	; (8002914 <MX_ADC1_Init+0x21c>)
 8002878:	4822      	ldr	r0, [pc, #136]	; (8002904 <MX_ADC1_Init+0x20c>)
 800287a:	f7fe fd40 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 800287e:	4a26      	ldr	r2, [pc, #152]	; (8002918 <MX_ADC1_Init+0x220>)
 8002880:	f240 2119 	movw	r1, #537	; 0x219
 8002884:	481f      	ldr	r0, [pc, #124]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002886:	f7fe fcf5 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 800288a:	2202      	movs	r2, #2
 800288c:	4922      	ldr	r1, [pc, #136]	; (8002918 <MX_ADC1_Init+0x220>)
 800288e:	481d      	ldr	r0, [pc, #116]	; (8002904 <MX_ADC1_Init+0x20c>)
 8002890:	f7fe fd35 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8002894:	4a21      	ldr	r2, [pc, #132]	; (800291c <MX_ADC1_Init+0x224>)
 8002896:	f44f 7180 	mov.w	r1, #256	; 0x100
 800289a:	481a      	ldr	r0, [pc, #104]	; (8002904 <MX_ADC1_Init+0x20c>)
 800289c:	f7fe fcea 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80028a0:	2202      	movs	r2, #2
 80028a2:	491e      	ldr	r1, [pc, #120]	; (800291c <MX_ADC1_Init+0x224>)
 80028a4:	4817      	ldr	r0, [pc, #92]	; (8002904 <MX_ADC1_Init+0x20c>)
 80028a6:	f7fe fd2a 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 80028aa:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <MX_ADC1_Init+0x228>)
 80028ac:	f240 1105 	movw	r1, #261	; 0x105
 80028b0:	4814      	ldr	r0, [pc, #80]	; (8002904 <MX_ADC1_Init+0x20c>)
 80028b2:	f7fe fcdf 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_13CYCLES_5);
 80028b6:	2202      	movs	r2, #2
 80028b8:	4919      	ldr	r1, [pc, #100]	; (8002920 <MX_ADC1_Init+0x228>)
 80028ba:	4812      	ldr	r0, [pc, #72]	; (8002904 <MX_ADC1_Init+0x20c>)
 80028bc:	f7fe fd1f 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 80028c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c4:	480f      	ldr	r0, [pc, #60]	; (8002904 <MX_ADC1_Init+0x20c>)
 80028c6:	f7fe fd08 	bl	80012da <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 80028ca:	480e      	ldr	r0, [pc, #56]	; (8002904 <MX_ADC1_Init+0x20c>)
 80028cc:	f7fe fd60 	bl	8001390 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 80028d0:	480c      	ldr	r0, [pc, #48]	; (8002904 <MX_ADC1_Init+0x20c>)
 80028d2:	f7fe fd6c 	bl	80013ae <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 80028d6:	bf00      	nop
 80028d8:	480a      	ldr	r0, [pc, #40]	; (8002904 <MX_ADC1_Init+0x20c>)
 80028da:	f7fe fd77 	bl	80013cc <LL_ADC_IsCalibrationOnGoing>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f9      	bne.n	80028d8 <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 80028e4:	4807      	ldr	r0, [pc, #28]	; (8002904 <MX_ADC1_Init+0x20c>)
 80028e6:	f7fe fd83 	bl	80013f0 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 80028ea:	bf00      	nop
 80028ec:	3738      	adds	r7, #56	; 0x38
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40010800 	.word	0x40010800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	200000b0 	.word	0x200000b0
 8002900:	4001244c 	.word	0x4001244c
 8002904:	40012400 	.word	0x40012400
 8002908:	02300001 	.word	0x02300001
 800290c:	02600002 	.word	0x02600002
 8002910:	02900003 	.word	0x02900003
 8002914:	02c00004 	.word	0x02c00004
 8002918:	02f00005 	.word	0x02f00005
 800291c:	03200006 	.word	0x03200006
 8002920:	03500007 	.word	0x03500007

08002924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800292a:	f107 0318 	add.w	r3, r7, #24
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
 8002938:	611a      	str	r2, [r3, #16]
 800293a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800294a:	2008      	movs	r0, #8
 800294c:	f7ff f806 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_I2C1_Init+0xa4>)
 8002952:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002954:	2309      	movs	r3, #9
 8002956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800295c:	2304      	movs	r3, #4
 800295e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4819      	ldr	r0, [pc, #100]	; (80029cc <MX_I2C1_Init+0xa8>)
 8002966:	f001 f8a7 	bl	8003ab8 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 800296a:	f7ff fb05 	bl	8001f78 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800296e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002972:	f7fe ffdb 	bl	800192c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8002976:	4816      	ldr	r0, [pc, #88]	; (80029d0 <MX_I2C1_Init+0xac>)
 8002978:	f7fe fee9 	bl	800174e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800297c:	4814      	ldr	r0, [pc, #80]	; (80029d0 <MX_I2C1_Init+0xac>)
 800297e:	f7fe fec5 	bl	800170c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002982:	4813      	ldr	r0, [pc, #76]	; (80029d0 <MX_I2C1_Init+0xac>)
 8002984:	f7fe feb3 	bl	80016ee <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_I2C1_Init+0xb0>)
 800298e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800299e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80029a4:	f107 0318 	add.w	r3, r7, #24
 80029a8:	4619      	mov	r1, r3
 80029aa:	4809      	ldr	r0, [pc, #36]	; (80029d0 <MX_I2C1_Init+0xac>)
 80029ac:	f001 f9d0 	bl	8003d50 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80029b0:	2100      	movs	r1, #0
 80029b2:	4807      	ldr	r0, [pc, #28]	; (80029d0 <MX_I2C1_Init+0xac>)
 80029b4:	f7fe feb9 	bl	800172a <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80029b8:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_I2C1_Init+0xac>)
 80029ba:	f7fe fe89 	bl	80016d0 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	3730      	adds	r7, #48	; 0x30
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	04030003 	.word	0x04030003
 80029cc:	40010c00 	.word	0x40010c00
 80029d0:	40005400 	.word	0x40005400
 80029d4:	000186a0 	.word	0x000186a0

080029d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b098      	sub	sp, #96	; 0x60
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80029de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
 80029ec:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80029ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f2:	2220      	movs	r2, #32
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 ff12 	bl	8004820 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
 8002a0c:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0e:	463b      	mov	r3, r7
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002a1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a20:	f7fe ff9c 	bl	800195c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002a24:	f7fe fba0 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fbee 	bl	8001210 <NVIC_EncodePriority>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4619      	mov	r1, r3
 8002a38:	2019      	movs	r0, #25
 8002a3a:	f7fe fbbf 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a3e:	2019      	movs	r0, #25
 8002a40:	f7fe fba0 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 8002a4e:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002a52:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a54:	2300      	movs	r3, #0
 8002a56:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002a5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a62:	4619      	mov	r1, r3
 8002a64:	483c      	ldr	r0, [pc, #240]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002a66:	f001 fb1b 	bl	80040a0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8002a6a:	483b      	ldr	r0, [pc, #236]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002a6c:	f7fe ffbd 	bl	80019ea <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002a70:	2101      	movs	r1, #1
 8002a72:	4839      	ldr	r0, [pc, #228]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002a74:	f7ff f826 	bl	8001ac4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002a78:	2360      	movs	r3, #96	; 0x60
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	482d      	ldr	r0, [pc, #180]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002aa2:	f001 fb5b 	bl	800415c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	482b      	ldr	r0, [pc, #172]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002aaa:	f7fe ffc9 	bl	8001a40 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ab2:	4829      	ldr	r0, [pc, #164]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002ab4:	f7ff f806 	bl	8001ac4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aca:	4823      	ldr	r0, [pc, #140]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002acc:	f001 fb46 	bl	800415c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad4:	4820      	ldr	r0, [pc, #128]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002ad6:	f7fe ffb3 	bl	8001a40 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002ada:	2100      	movs	r1, #0
 8002adc:	481e      	ldr	r0, [pc, #120]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002ade:	f7ff f979 	bl	8001dd4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002ae2:	481d      	ldr	r0, [pc, #116]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002ae4:	f7ff f988 	bl	8001df8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4812      	ldr	r0, [pc, #72]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002b10:	f001 fb5c 	bl	80041cc <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8002b14:	4810      	ldr	r0, [pc, #64]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002b16:	f7ff f99a 	bl	8001e4e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM1,0);
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	480e      	ldr	r0, [pc, #56]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002b1e:	f7fe ff82 	bl	8001a26 <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8002b22:	480d      	ldr	r0, [pc, #52]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002b24:	f7ff f977 	bl	8001e16 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8002b28:	480b      	ldr	r0, [pc, #44]	; (8002b58 <MX_TIM1_Init+0x180>)
 8002b2a:	f7fe ff4f 	bl	80019cc <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002b2e:	2004      	movs	r0, #4
 8002b30:	f7fe ff14 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <MX_TIM1_Init+0x184>)
 8002b36:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b38:	2309      	movs	r3, #9
 8002b3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	463b      	mov	r3, r7
 8002b46:	4619      	mov	r1, r3
 8002b48:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_TIM1_Init+0x188>)
 8002b4a:	f000 ffb5 	bl	8003ab8 <LL_GPIO_Init>

}
 8002b4e:	bf00      	nop
 8002b50:	3760      	adds	r7, #96	; 0x60
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	04050005 	.word	0x04050005
 8002b60:	40010800 	.word	0x40010800

08002b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
 8002b78:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f7fe fecf 	bl	800192c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7fe fee4 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002b94:	2008      	movs	r0, #8
 8002b96:	f7fe fee1 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <MX_TIM2_Init+0x154>)
 8002b9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4845      	ldr	r0, [pc, #276]	; (8002cbc <MX_TIM2_Init+0x158>)
 8002ba8:	f000 ff86 	bl	8003ab8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002bac:	f640 0308 	movw	r3, #2056	; 0x808
 8002bb0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	463b      	mov	r3, r7
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4841      	ldr	r0, [pc, #260]	; (8002cc0 <MX_TIM2_Init+0x15c>)
 8002bbc:	f000 ff7c 	bl	8003ab8 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002bc0:	f7fe fad2 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fb20 	bl	8001210 <NVIC_EncodePriority>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	201c      	movs	r0, #28
 8002bd6:	f7fe faf1 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002bda:	201c      	movs	r0, #28
 8002bdc:	f7fe fad2 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8002be0:	f7ff f9ea 	bl	8001fb8 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8002be4:	2103      	movs	r1, #3
 8002be6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bea:	f7ff f8e1 	bl	8001db0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002bee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002bf8:	f7fe ffa6 	bl	8001b48 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2101      	movs	r1, #1
 8002c00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c04:	f7fe ffea 	bl	8001bdc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c10:	f7ff f82e 	bl	8001c70 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002c14:	2200      	movs	r2, #0
 8002c16:	2101      	movs	r1, #1
 8002c18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c1c:	f7ff f872 	bl	8001d04 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002c20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c24:	2110      	movs	r1, #16
 8002c26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c2a:	f7fe ff8d 	bl	8001b48 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2110      	movs	r1, #16
 8002c32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c36:	f7fe ffd1 	bl	8001bdc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2110      	movs	r1, #16
 8002c3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c42:	f7ff f815 	bl	8001c70 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2110      	movs	r1, #16
 8002c4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c4e:	f7ff f859 	bl	8001d04 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c5e:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c6e:	f001 fa17 	bl	80040a0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002c72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c76:	f7fe fec7 	bl	8001a08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c80:	f7ff f8a8 	bl	8001dd4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002c84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c88:	f7ff f8b6 	bl	8001df8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2,0);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c92:	f7fe fec8 	bl	8001a26 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM2);
 8002c96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c9a:	f7fe fe97 	bl	80019cc <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 8002c9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ca2:	f7ff f8c7 	bl	8001e34 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8002ca6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002caa:	f7ff f8d0 	bl	8001e4e <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM2_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	04800080 	.word	0x04800080
 8002cbc:	40010800 	.word	0x40010800
 8002cc0:	40010c00 	.word	0x40010c00

08002cc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cda:	463b      	mov	r3, r7
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f7fe fe1f 	bl	800192c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002cee:	2008      	movs	r0, #8
 8002cf0:	f7fe fe34 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002cf4:	f243 0330 	movw	r3, #12336	; 0x3030
 8002cf8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfe:	463b      	mov	r3, r7
 8002d00:	4619      	mov	r1, r3
 8002d02:	4836      	ldr	r0, [pc, #216]	; (8002ddc <MX_TIM3_Init+0x118>)
 8002d04:	f000 fed8 	bl	8003ab8 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002d08:	f7fe fa2e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2101      	movs	r1, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fa7c 	bl	8001210 <NVIC_EncodePriority>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	201d      	movs	r0, #29
 8002d1e:	f7fe fa4d 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002d22:	201d      	movs	r0, #29
 8002d24:	f7fe fa2e 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 8002d28:	f7ff f956 	bl	8001fd8 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	482c      	ldr	r0, [pc, #176]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d30:	f7ff f83e 	bl	8001db0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002d34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d38:	2101      	movs	r1, #1
 8002d3a:	4829      	ldr	r0, [pc, #164]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d3c:	f7fe ff04 	bl	8001b48 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2101      	movs	r1, #1
 8002d44:	4826      	ldr	r0, [pc, #152]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d46:	f7fe ff49 	bl	8001bdc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4824      	ldr	r0, [pc, #144]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d50:	f7fe ff8e 	bl	8001c70 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2101      	movs	r1, #1
 8002d58:	4821      	ldr	r0, [pc, #132]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d5a:	f7fe ffd3 	bl	8001d04 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002d5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d62:	2110      	movs	r1, #16
 8002d64:	481e      	ldr	r0, [pc, #120]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d66:	f7fe feef 	bl	8001b48 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2110      	movs	r1, #16
 8002d6e:	481c      	ldr	r0, [pc, #112]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d70:	f7fe ff34 	bl	8001bdc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002d74:	2200      	movs	r2, #0
 8002d76:	2110      	movs	r1, #16
 8002d78:	4819      	ldr	r0, [pc, #100]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d7a:	f7fe ff79 	bl	8001c70 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2110      	movs	r1, #16
 8002d82:	4817      	ldr	r0, [pc, #92]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002d84:	f7fe ffbe 	bl	8001d04 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d94:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4619      	mov	r1, r3
 8002da0:	480f      	ldr	r0, [pc, #60]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002da2:	f001 f97d 	bl	80040a0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002da6:	480e      	ldr	r0, [pc, #56]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002da8:	f7fe fe2e 	bl	8001a08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002dac:	2100      	movs	r1, #0
 8002dae:	480c      	ldr	r0, [pc, #48]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002db0:	f7ff f810 	bl	8001dd4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002db4:	480a      	ldr	r0, [pc, #40]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002db6:	f7ff f81f 	bl	8001df8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3,0);
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4808      	ldr	r0, [pc, #32]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002dbe:	f7fe fe32 	bl	8001a26 <LL_TIM_SetCounter>
   LL_TIM_EnableCounter(TIM3);
 8002dc2:	4807      	ldr	r0, [pc, #28]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002dc4:	f7fe fe02 	bl	80019cc <LL_TIM_EnableCounter>
   LL_TIM_ClearFlag_UPDATE(TIM3);
 8002dc8:	4805      	ldr	r0, [pc, #20]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002dca:	f7ff f833 	bl	8001e34 <LL_TIM_ClearFlag_UPDATE>
   LL_TIM_EnableIT_UPDATE(TIM3);
 8002dce:	4804      	ldr	r0, [pc, #16]	; (8002de0 <MX_TIM3_Init+0x11c>)
 8002dd0:	f7ff f83d 	bl	8001e4e <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8002dd4:	bf00      	nop
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40010c00 	.word	0x40010c00
 8002de0:	40000400 	.word	0x40000400

08002de4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002df8:	2004      	movs	r0, #4
 8002dfa:	f7fe fd97 	bl	800192c <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8002dfe:	f7fe f9b3 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2200      	movs	r2, #0
 8002e06:	2104      	movs	r1, #4
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fa01 	bl	8001210 <NVIC_EncodePriority>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4619      	mov	r1, r3
 8002e12:	201e      	movs	r0, #30
 8002e14:	f7fe f9d2 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002e18:	201e      	movs	r0, #30
 8002e1a:	f7fe f9b3 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 199;
 8002e1e:	23c7      	movs	r3, #199	; 0xc7
 8002e20:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 7199;
 8002e26:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002e2a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	480f      	ldr	r0, [pc, #60]	; (8002e74 <MX_TIM4_Init+0x90>)
 8002e36:	f001 f933 	bl	80040a0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002e3a:	480e      	ldr	r0, [pc, #56]	; (8002e74 <MX_TIM4_Init+0x90>)
 8002e3c:	f7fe fde4 	bl	8001a08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002e40:	2100      	movs	r1, #0
 8002e42:	480c      	ldr	r0, [pc, #48]	; (8002e74 <MX_TIM4_Init+0x90>)
 8002e44:	f7fe ffa0 	bl	8001d88 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002e48:	2100      	movs	r1, #0
 8002e4a:	480a      	ldr	r0, [pc, #40]	; (8002e74 <MX_TIM4_Init+0x90>)
 8002e4c:	f7fe ffc2 	bl	8001dd4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002e50:	4808      	ldr	r0, [pc, #32]	; (8002e74 <MX_TIM4_Init+0x90>)
 8002e52:	f7fe ffd1 	bl	8001df8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM4);
 8002e56:	4807      	ldr	r0, [pc, #28]	; (8002e74 <MX_TIM4_Init+0x90>)
 8002e58:	f7fe fff9 	bl	8001e4e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM4,0);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <MX_TIM4_Init+0x90>)
 8002e60:	f7fe fde1 	bl	8001a26 <LL_TIM_SetCounter>
    LL_TIM_EnableCounter(TIM4);
 8002e64:	4803      	ldr	r0, [pc, #12]	; (8002e74 <MX_TIM4_Init+0x90>)
 8002e66:	f7fe fdb1 	bl	80019cc <LL_TIM_EnableCounter>

  /* USER CODE END TIM4_Init 2 */

}
 8002e6a:	bf00      	nop
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40000800 	.word	0x40000800

08002e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	615a      	str	r2, [r3, #20]
 8002e90:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e92:	463b      	mov	r3, r7
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002ea0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ea4:	f7fe fd5a 	bl	800195c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002ea8:	2008      	movs	r0, #8
 8002eaa:	f7fe fd57 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002eae:	f244 0340 	movw	r3, #16448	; 0x4040
 8002eb2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002eb4:	2309      	movs	r3, #9
 8002eb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	481f      	ldr	r0, [pc, #124]	; (8002f44 <MX_USART1_UART_Init+0xcc>)
 8002ec6:	f000 fdf7 	bl	8003ab8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002eca:	f248 0380 	movw	r3, #32896	; 0x8080
 8002ece:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	481a      	ldr	r0, [pc, #104]	; (8002f44 <MX_USART1_UART_Init+0xcc>)
 8002eda:	f000 fded 	bl	8003ab8 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8002ede:	f7ff f85b 	bl	8001f98 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002ee2:	f7fe f941 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2101      	movs	r1, #1
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f98f 	bl	8001210 <NVIC_EncodePriority>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	2025      	movs	r0, #37	; 0x25
 8002ef8:	f7fe f960 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002efc:	2025      	movs	r0, #37	; 0x25
 8002efe:	f7fe f941 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002f02:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f06:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f16:	230c      	movs	r3, #12
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	4807      	ldr	r0, [pc, #28]	; (8002f48 <MX_USART1_UART_Init+0xd0>)
 8002f2a:	f001 fbb9 	bl	80046a0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002f2e:	4806      	ldr	r0, [pc, #24]	; (8002f48 <MX_USART1_UART_Init+0xd0>)
 8002f30:	f7fe ffab 	bl	8001e8a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002f34:	4804      	ldr	r0, [pc, #16]	; (8002f48 <MX_USART1_UART_Init+0xd0>)
 8002f36:	f7fe ff99 	bl	8001e6c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	3730      	adds	r7, #48	; 0x30
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40010c00 	.word	0x40010c00
 8002f48:	40013800 	.word	0x40013800

08002f4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f7fe fcd3 	bl	80018fc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002f56:	f7fe f907 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe f955 	bl	8001210 <NVIC_EncodePriority>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4619      	mov	r1, r3
 8002f6a:	200b      	movs	r0, #11
 8002f6c:	f7fe f926 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f70:	200b      	movs	r0, #11
 8002f72:	f7fe f907 	bl	8001184 <__NVIC_EnableIRQ>

}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002f82:	f107 0318 	add.w	r3, r7, #24
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
 8002f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8002f9a:	2010      	movs	r0, #16
 8002f9c:	f7fe fcde 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8002fa0:	2020      	movs	r0, #32
 8002fa2:	f7fe fcdb 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002fa6:	2004      	movs	r0, #4
 8002fa8:	f7fe fcd8 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002fac:	2008      	movs	r0, #8
 8002fae:	f7fe fcd5 	bl	800195c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15);
 8002fb2:	4946      	ldr	r1, [pc, #280]	; (80030cc <MX_GPIO_Init+0x150>)
 8002fb4:	4846      	ldr	r0, [pc, #280]	; (80030d0 <MX_GPIO_Init+0x154>)
 8002fb6:	f7fe ffcf 	bl	8001f58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8002fba:	4944      	ldr	r1, [pc, #272]	; (80030cc <MX_GPIO_Init+0x150>)
 8002fbc:	4845      	ldr	r0, [pc, #276]	; (80030d4 <MX_GPIO_Init+0x158>)
 8002fbe:	f7fe ffcb 	bl	8001f58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 8002fc2:	4945      	ldr	r1, [pc, #276]	; (80030d8 <MX_GPIO_Init+0x15c>)
 8002fc4:	4845      	ldr	r0, [pc, #276]	; (80030dc <MX_GPIO_Init+0x160>)
 8002fc6:	f7fe ffc7 	bl	8001f58 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002fca:	4b40      	ldr	r3, [pc, #256]	; (80030cc <MX_GPIO_Init+0x150>)
 8002fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	483c      	ldr	r0, [pc, #240]	; (80030d0 <MX_GPIO_Init+0x154>)
 8002fe0:	f000 fd6a 	bl	8003ab8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002fe4:	4b39      	ldr	r3, [pc, #228]	; (80030cc <MX_GPIO_Init+0x150>)
 8002fe6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002fec:	2303      	movs	r3, #3
 8002fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4836      	ldr	r0, [pc, #216]	; (80030d4 <MX_GPIO_Init+0x158>)
 8002ffa:	f000 fd5d 	bl	8003ab8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_11;
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <MX_GPIO_Init+0x15c>)
 8003000:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003002:	2301      	movs	r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003006:	2303      	movs	r3, #3
 8003008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4832      	ldr	r0, [pc, #200]	; (80030dc <MX_GPIO_Init+0x160>)
 8003014:	f000 fd50 	bl	8003ab8 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 8003018:	4931      	ldr	r1, [pc, #196]	; (80030e0 <MX_GPIO_Init+0x164>)
 800301a:	2001      	movs	r0, #1
 800301c:	f7ff f804 	bl	8002028 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 8003020:	4930      	ldr	r1, [pc, #192]	; (80030e4 <MX_GPIO_Init+0x168>)
 8003022:	2001      	movs	r0, #1
 8003024:	f7ff f800 	bl	8002028 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 8003028:	492f      	ldr	r1, [pc, #188]	; (80030e8 <MX_GPIO_Init+0x16c>)
 800302a:	2001      	movs	r0, #1
 800302c:	f7fe fffc 	bl	8002028 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8003030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003034:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003036:	2301      	movs	r3, #1
 8003038:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800303a:	2300      	movs	r3, #0
 800303c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800303e:	2301      	movs	r3, #1
 8003040:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003042:	f107 0318 	add.w	r3, r7, #24
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fc02 	bl	8003850 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800304c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003050:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003052:	2301      	movs	r3, #1
 8003054:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003056:	2300      	movs	r3, #0
 8003058:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800305a:	2301      	movs	r3, #1
 800305c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800305e:	f107 0318 	add.w	r3, r7, #24
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fbf4 	bl	8003850 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8003068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800306c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800306e:	2301      	movs	r3, #1
 8003070:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003072:	2300      	movs	r3, #0
 8003074:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003076:	2301      	movs	r3, #1
 8003078:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800307a:	f107 0318 	add.w	r3, r7, #24
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fbe6 	bl	8003850 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8003084:	2204      	movs	r2, #4
 8003086:	4919      	ldr	r1, [pc, #100]	; (80030ec <MX_GPIO_Init+0x170>)
 8003088:	4812      	ldr	r0, [pc, #72]	; (80030d4 <MX_GPIO_Init+0x158>)
 800308a:	f7fe ff33 	bl	8001ef4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 800308e:	2204      	movs	r2, #4
 8003090:	4917      	ldr	r1, [pc, #92]	; (80030f0 <MX_GPIO_Init+0x174>)
 8003092:	4810      	ldr	r0, [pc, #64]	; (80030d4 <MX_GPIO_Init+0x158>)
 8003094:	f7fe ff2e 	bl	8001ef4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8003098:	2204      	movs	r2, #4
 800309a:	4916      	ldr	r1, [pc, #88]	; (80030f4 <MX_GPIO_Init+0x178>)
 800309c:	480d      	ldr	r0, [pc, #52]	; (80030d4 <MX_GPIO_Init+0x158>)
 800309e:	f7fe ff29 	bl	8001ef4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80030a2:	f7fe f861 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2200      	movs	r2, #0
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe f8af 	bl	8001210 <NVIC_EncodePriority>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4619      	mov	r1, r3
 80030b6:	2028      	movs	r0, #40	; 0x28
 80030b8:	f7fe f880 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030bc:	2028      	movs	r0, #40	; 0x28
 80030be:	f7fe f861 	bl	8001184 <__NVIC_EnableIRQ>

}
 80030c2:	bf00      	nop
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	04800080 	.word	0x04800080
 80030d0:	40011000 	.word	0x40011000
 80030d4:	40010c00 	.word	0x40010c00
 80030d8:	040a000a 	.word	0x040a000a
 80030dc:	40010800 	.word	0x40010800
 80030e0:	000f0003 	.word	0x000f0003
 80030e4:	00f00003 	.word	0x00f00003
 80030e8:	0f000003 	.word	0x0f000003
 80030ec:	04100010 	.word	0x04100010
 80030f0:	04200020 	.word	0x04200020
 80030f4:	04400040 	.word	0x04400040

080030f8 <Sensor_Convert_A2D>:
	 {
		 Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i])/2;
	 }
}
void Sensor_Convert_A2D()
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; ++i)
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	e01c      	b.n	800313e <Sensor_Convert_A2D+0x46>
	  {
		  if(Sensor_ADC_Value[i] < Sensor_Threshold[i])
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <Sensor_Convert_A2D+0x58>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310c:	b29a      	uxth	r2, r3
 800310e:	4911      	ldr	r1, [pc, #68]	; (8003154 <Sensor_Convert_A2D+0x5c>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003116:	429a      	cmp	r2, r3
 8003118:	d20e      	bcs.n	8003138 <Sensor_Convert_A2D+0x40>
		  {
			  sbi(LineDetect, (7-i));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f1c3 0307 	rsb	r3, r3, #7
 8003120:	2201      	movs	r2, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	b25a      	sxtb	r2, r3
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <Sensor_Convert_A2D+0x60>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b25b      	sxtb	r3, r3
 800312e:	4313      	orrs	r3, r2
 8003130:	b25b      	sxtb	r3, r3
 8003132:	b2da      	uxtb	r2, r3
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <Sensor_Convert_A2D+0x60>)
 8003136:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; ++i)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3301      	adds	r3, #1
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b07      	cmp	r3, #7
 8003142:	dddf      	ble.n	8003104 <Sensor_Convert_A2D+0xc>
//			  printf("0 ");
		  }
	  };
//	printf("\n");
//	LL_mDelay(500);
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	200000b0 	.word	0x200000b0
 8003154:	20000000 	.word	0x20000000
 8003158:	20000099 	.word	0x20000099

0800315c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4013      	ands	r3, r2
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010400 	.word	0x40010400

08003188 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003190:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <LL_EXTI_ClearFlag_0_31+0x18>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6153      	str	r3, [r2, #20]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40010400 	.word	0x40010400

080031a4 <LL_TIM_ClearFlag_UPDATE>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f06f 0201 	mvn.w	r2, #1
 80031b2:	611a      	str	r2, [r3, #16]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <LL_GPIO_SetOutputPin>:
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <LL_GPIO_ResetOutputPin>:
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	0a1b      	lsrs	r3, r3, #8
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	615a      	str	r2, [r3, #20]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800320a:	e7fe      	b.n	800320a <HardFault_Handler+0x4>

0800320c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <MemManage_Handler+0x4>

08003212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003216:	e7fe      	b.n	8003216 <BusFault_Handler+0x4>

08003218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800321c:	e7fe      	b.n	800321c <UsageFault_Handler+0x4>

0800321e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
	...

08003244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <SysTick_Handler+0x18>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	4a03      	ldr	r2, [pc, #12]	; (800325c <SysTick_Handler+0x18>)
 8003250:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	2000009c 	.word	0x2000009c

08003260 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

	++ServoCountValue;
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <TIM1_UP_IRQHandler+0x48>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	b2da      	uxtb	r2, r3
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <TIM1_UP_IRQHandler+0x48>)
 800327a:	701a      	strb	r2, [r3, #0]
	if(ServoCountValue > ServoCompareValue)
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <TIM1_UP_IRQHandler+0x48>)
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <TIM1_UP_IRQHandler+0x4c>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d904      	bls.n	8003292 <TIM1_UP_IRQHandler+0x26>
	{
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003288:	490c      	ldr	r1, [pc, #48]	; (80032bc <TIM1_UP_IRQHandler+0x50>)
 800328a:	480d      	ldr	r0, [pc, #52]	; (80032c0 <TIM1_UP_IRQHandler+0x54>)
 800328c:	f7ff ffa6 	bl	80031dc <LL_GPIO_ResetOutputPin>
 8003290:	e003      	b.n	800329a <TIM1_UP_IRQHandler+0x2e>
	} else
	{
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003292:	490a      	ldr	r1, [pc, #40]	; (80032bc <TIM1_UP_IRQHandler+0x50>)
 8003294:	480a      	ldr	r0, [pc, #40]	; (80032c0 <TIM1_UP_IRQHandler+0x54>)
 8003296:	f7ff ff92 	bl	80031be <LL_GPIO_SetOutputPin>
	};
	if(ServoCountValue >= ServoReloadValue) ServoCountValue = 0;
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <TIM1_UP_IRQHandler+0x48>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2bc7      	cmp	r3, #199	; 0xc7
 80032a0:	d902      	bls.n	80032a8 <TIM1_UP_IRQHandler+0x3c>
 80032a2:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <TIM1_UP_IRQHandler+0x48>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
	LL_TIM_ClearFlag_UPDATE(TIM1);
 80032a8:	4806      	ldr	r0, [pc, #24]	; (80032c4 <TIM1_UP_IRQHandler+0x58>)
 80032aa:	f7ff ff7b 	bl	80031a4 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200000a0 	.word	0x200000a0
 80032b8:	200000a1 	.word	0x200000a1
 80032bc:	04080008 	.word	0x04080008
 80032c0:	40010800 	.word	0x40010800
 80032c4:	40012c00 	.word	0x40012c00

080032c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 80032cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032d0:	f7ff ff68 	bl	80031a4 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <TIM3_IRQHandler+0x10>)
 80032de:	f7ff ff61 	bl	80031a4 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40000400 	.word	0x40000400

080032ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM4);
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <TIM4_IRQHandler+0x10>)
 80032f2:	f7ff ff57 	bl	80031a4 <LL_TIM_ClearFlag_UPDATE>
//  printf ("TIM2 : %d \n", LL_TIM_GetCounter(TIM2));
//  printf ("TIM3 : %d \n", LL_TIM_GetCounter(TIM3));

  /* USER CODE END TIM4_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40000800 	.word	0x40000800

08003300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8003310:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003314:	f7ff ff22 	bl	800315c <LL_EXTI_IsActiveFlag_0_31>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <EXTI15_10_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 800331e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003322:	f7ff ff31 	bl	8003188 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    printf("Hello");
 8003326:	480f      	ldr	r0, [pc, #60]	; (8003364 <EXTI15_10_IRQHandler+0x58>)
 8003328:	f001 fa82 	bl	8004830 <iprintf>
    GetThreshold_Flag = 1;
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <EXTI15_10_IRQHandler+0x5c>)
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8003332:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003336:	f7ff ff11 	bl	800315c <LL_EXTI_IsActiveFlag_0_31>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8003340:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003344:	f7ff ff20 	bl	8003188 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003348:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800334c:	f7ff ff06 	bl	800315c <LL_EXTI_IsActiveFlag_0_31>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <EXTI15_10_IRQHandler+0x52>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8003356:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800335a:	f7ff ff15 	bl	8003188 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	08005790 	.word	0x08005790
 8003368:	20000098 	.word	0x20000098

0800336c <SetServoCompare>:

/* USER CODE BEGIN 1 */
void SetServoCompare(float ServoNewVal)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	if(ServoNewVal != ServoCompareValue)
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <SetServoCompare+0x40>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fb99 	bl	8000ab0 <__aeabi_i2f>
 800337e:	4603      	mov	r3, r0
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd fd7c 	bl	8000e80 <__aeabi_fcmpeq>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d000      	beq.n	8003390 <SetServoCompare+0x24>
	{
		ServoCompareValue = ServoNewVal;
		ServoCountValue = 0;
	}

}
 800338e:	e009      	b.n	80033a4 <SetServoCompare+0x38>
		ServoCompareValue = ServoNewVal;
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fd fda7 	bl	8000ee4 <__aeabi_f2uiz>
 8003396:	4603      	mov	r3, r0
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <SetServoCompare+0x40>)
 800339c:	701a      	strb	r2, [r3, #0]
		ServoCountValue = 0;
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SetServoCompare+0x44>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	200000a1 	.word	0x200000a1
 80033b0:	200000a0 	.word	0x200000a0

080033b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e00a      	b.n	80033dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033c6:	f3af 8000 	nop.w
 80033ca:	4601      	mov	r1, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	60ba      	str	r2, [r7, #8]
 80033d2:	b2ca      	uxtb	r2, r1
 80033d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	3301      	adds	r3, #1
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	dbf0      	blt.n	80033c6 <_read+0x12>
	}

return len;
 80033e4:	687b      	ldr	r3, [r7, #4]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e009      	b.n	8003414 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	60ba      	str	r2, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fe3b 	bl	8002084 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	3301      	adds	r3, #1
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	429a      	cmp	r2, r3
 800341a:	dbf1      	blt.n	8003400 <_write+0x12>
	}
	return len;
 800341c:	687b      	ldr	r3, [r7, #4]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <_close>:

int _close(int file)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
	return -1;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800344c:	605a      	str	r2, [r3, #4]
	return 0;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <_isatty>:

int _isatty(int file)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
	return 1;
 8003462:	2301      	movs	r3, #1
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
	return 0;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr
	...

08003488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <_sbrk+0x5c>)
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <_sbrk+0x60>)
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <_sbrk+0x64>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034a4:	4b11      	ldr	r3, [pc, #68]	; (80034ec <_sbrk+0x64>)
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <_sbrk+0x68>)
 80034a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d207      	bcs.n	80034c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034b8:	f001 f988 	bl	80047cc <__errno>
 80034bc:	4602      	mov	r2, r0
 80034be:	230c      	movs	r3, #12
 80034c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	e009      	b.n	80034dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <_sbrk+0x64>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <_sbrk+0x64>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	4a05      	ldr	r2, [pc, #20]	; (80034ec <_sbrk+0x64>)
 80034d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20005000 	.word	0x20005000
 80034e8:	00000400 	.word	0x00000400
 80034ec:	200000a4 	.word	0x200000a4
 80034f0:	200000c8 	.word	0x200000c8

080034f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80034f8:	4b15      	ldr	r3, [pc, #84]	; (8003550 <SystemInit+0x5c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <SystemInit+0x5c>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003504:	4b12      	ldr	r3, [pc, #72]	; (8003550 <SystemInit+0x5c>)
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	4911      	ldr	r1, [pc, #68]	; (8003550 <SystemInit+0x5c>)
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <SystemInit+0x60>)
 800350c:	4013      	ands	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <SystemInit+0x5c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <SystemInit+0x5c>)
 8003516:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <SystemInit+0x5c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <SystemInit+0x5c>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <SystemInit+0x5c>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <SystemInit+0x5c>)
 8003532:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003536:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <SystemInit+0x5c>)
 800353a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800353e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SystemInit+0x64>)
 8003542:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003546:	609a      	str	r2, [r3, #8]
#endif 
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr
 8003550:	40021000 	.word	0x40021000
 8003554:	f8ff0000 	.word	0xf8ff0000
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800355c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800355e:	e003      	b.n	8003568 <LoopCopyDataInit>

08003560 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003562:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003564:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003566:	3104      	adds	r1, #4

08003568 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003568:	480a      	ldr	r0, [pc, #40]	; (8003594 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800356c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800356e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003570:	d3f6      	bcc.n	8003560 <CopyDataInit>
  ldr r2, =_sbss
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003574:	e002      	b.n	800357c <LoopFillZerobss>

08003576 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003578:	f842 3b04 	str.w	r3, [r2], #4

0800357c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800357e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003580:	d3f9      	bcc.n	8003576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003582:	f7ff ffb7 	bl	80034f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003586:	f001 f927 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800358a:	f7fe fd95 	bl	80020b8 <main>
  bx lr
 800358e:	4770      	bx	lr
  ldr r3, =_sidata
 8003590:	08005878 	.word	0x08005878
  ldr r0, =_sdata
 8003594:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003598:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 800359c:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80035a0:	200000c4 	.word	0x200000c4

080035a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035a4:	e7fe      	b.n	80035a4 <ADC1_2_IRQHandler>

080035a6 <LL_ADC_REG_SetSequencerLength>:
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <LL_ADC_IsEnabled>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
	...

080035f0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80035fe:	4813      	ldr	r0, [pc, #76]	; (800364c <LL_ADC_CommonInit+0x5c>)
 8003600:	f7ff ffe3 	bl	80035ca <LL_ADC_IsEnabled>
 8003604:	4604      	mov	r4, r0
 8003606:	4812      	ldr	r0, [pc, #72]	; (8003650 <LL_ADC_CommonInit+0x60>)
 8003608:	f7ff ffdf 	bl	80035ca <LL_ADC_IsEnabled>
 800360c:	4603      	mov	r3, r0
 800360e:	4323      	orrs	r3, r4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d114      	bne.n	800363e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e008      	b.n	8003642 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	e001      	b.n	8003642 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bd90      	pop	{r4, r7, pc}
 800364c:	40012400 	.word	0x40012400
 8003650:	40012800 	.word	0x40012800

08003654 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffb1 	bl	80035ca <LL_ADC_IsEnabled>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d112      	bne.n	8003694 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	e001      	b.n	8003698 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003698:	7bfb      	ldrb	r3, [r7, #15]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff8a 	bl	80035ca <LL_ADC_IsEnabled>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d131      	bne.n	8003720 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	e008      	b.n	80036f0 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80036f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	6811      	ldr	r1, [r2, #0]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	68d2      	ldr	r2, [r2, #12]
 8003704:	4311      	orrs	r1, r2
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	6912      	ldr	r2, [r2, #16]
 800370a:	430a      	orrs	r2, r1
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4619      	mov	r1, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff44 	bl	80035a6 <LL_ADC_REG_SetSequencerLength>
 800371e:	e001      	b.n	8003724 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <LL_EXTI_EnableIT_0_31>:
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <LL_EXTI_EnableIT_0_31+0x20>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4904      	ldr	r1, [pc, #16]	; (8003750 <LL_EXTI_EnableIT_0_31+0x20>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010400 	.word	0x40010400

08003754 <LL_EXTI_DisableIT_0_31>:
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <LL_EXTI_DisableIT_0_31+0x20>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	43db      	mvns	r3, r3
 8003764:	4903      	ldr	r1, [pc, #12]	; (8003774 <LL_EXTI_DisableIT_0_31+0x20>)
 8003766:	4013      	ands	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	40010400 	.word	0x40010400

08003778 <LL_EXTI_EnableEvent_0_31>:
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4904      	ldr	r1, [pc, #16]	; (8003798 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010400 	.word	0x40010400

0800379c <LL_EXTI_DisableEvent_0_31>:
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <LL_EXTI_DisableEvent_0_31+0x20>)
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <LL_EXTI_DisableEvent_0_31+0x20>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	40010400 	.word	0x40010400

080037c0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4904      	ldr	r1, [pc, #16]	; (80037e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010400 	.word	0x40010400

080037e4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	43db      	mvns	r3, r3
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40010400 	.word	0x40010400

08003808 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	4904      	ldr	r1, [pc, #16]	; (8003828 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4313      	orrs	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010400 	.word	0x40010400

0800382c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	43db      	mvns	r3, r3
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800383e:	4013      	ands	r3, r2
 8003840:	60cb      	str	r3, [r1, #12]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	40010400 	.word	0x40010400

08003850 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d060      	beq.n	8003926 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d067      	beq.n	800393c <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	795b      	ldrb	r3, [r3, #5]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d00e      	beq.n	8003892 <LL_EXTI_Init+0x42>
 8003874:	2b02      	cmp	r3, #2
 8003876:	d017      	beq.n	80038a8 <LL_EXTI_Init+0x58>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d120      	bne.n	80038be <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff8b 	bl	800379c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ff50 	bl	8003730 <LL_EXTI_EnableIT_0_31>
          break;
 8003890:	e018      	b.n	80038c4 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff5c 	bl	8003754 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ff69 	bl	8003778 <LL_EXTI_EnableEvent_0_31>
          break;
 80038a6:	e00d      	b.n	80038c4 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff3f 	bl	8003730 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ff5e 	bl	8003778 <LL_EXTI_EnableEvent_0_31>
          break;
 80038bc:	e002      	b.n	80038c4 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
          break;
 80038c2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	799b      	ldrb	r3, [r3, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d037      	beq.n	800393c <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	799b      	ldrb	r3, [r3, #6]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d00e      	beq.n	80038f2 <LL_EXTI_Init+0xa2>
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d017      	beq.n	8003908 <LL_EXTI_Init+0xb8>
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d120      	bne.n	800391e <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ffa3 	bl	800382c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff68 	bl	80037c0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80038f0:	e025      	b.n	800393e <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff74 	bl	80037e4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff81 	bl	8003808 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003906:	e01a      	b.n	800393e <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff57 	bl	80037c0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ff76 	bl	8003808 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800391c:	e00f      	b.n	800393e <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
            break;
 8003922:	bf00      	nop
 8003924:	e00b      	b.n	800393e <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff12 	bl	8003754 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff31 	bl	800379c <LL_EXTI_DisableEvent_0_31>
 800393a:	e000      	b.n	800393e <LL_EXTI_Init+0xee>
      }
 800393c:	bf00      	nop
  }
  return status;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <LL_GPIO_SetPinMode>:
{
 8003948:	b490      	push	{r4, r7}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	0e1b      	lsrs	r3, r3, #24
 800395c:	4413      	add	r3, r2
 800395e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	613b      	str	r3, [r7, #16]
  return result;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	210f      	movs	r1, #15
 800397a:	fa01 f303 	lsl.w	r3, r1, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	401a      	ands	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	61bb      	str	r3, [r7, #24]
  return result;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	fab3 f383 	clz	r3, r3
 8003994:	b2db      	uxtb	r3, r3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	4313      	orrs	r3, r2
 80039a0:	6023      	str	r3, [r4, #0]
}
 80039a2:	bf00      	nop
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc90      	pop	{r4, r7}
 80039aa:	4770      	bx	lr

080039ac <LL_GPIO_SetPinSpeed>:
{
 80039ac:	b490      	push	{r4, r7}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	0e1b      	lsrs	r3, r3, #24
 80039c0:	4413      	add	r3, r2
 80039c2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	613b      	str	r3, [r7, #16]
  return result;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	2103      	movs	r1, #3
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	401a      	ands	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	61bb      	str	r3, [r7, #24]
  return result;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	4313      	orrs	r3, r2
 8003a04:	6023      	str	r3, [r4, #0]
}
 8003a06:	bf00      	nop
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc90      	pop	{r4, r7}
 8003a0e:	4770      	bx	lr

08003a10 <LL_GPIO_SetPinOutputType>:
{
 8003a10:	b490      	push	{r4, r7}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	0e1b      	lsrs	r3, r3, #24
 8003a24:	4413      	add	r3, r2
 8003a26:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	613b      	str	r3, [r7, #16]
  return result;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	2104      	movs	r1, #4
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	401a      	ands	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	fa93 f3a3 	rbit	r3, r3
 8003a54:	61bb      	str	r3, [r7, #24]
  return result;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	4313      	orrs	r3, r2
 8003a68:	6023      	str	r3, [r4, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc90      	pop	{r4, r7}
 8003a72:	4770      	bx	lr

08003a74 <LL_GPIO_SetPinPull>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	613b      	str	r3, [r7, #16]
  return result;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	408b      	lsls	r3, r1
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	60da      	str	r2, [r3, #12]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
  return result;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003ae2:	e040      	b.n	8003b66 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d036      	beq.n	8003b60 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b07      	cmp	r3, #7
 8003af6:	d806      	bhi.n	8003b06 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003af8:	f240 1201 	movw	r2, #257	; 0x101
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e008      	b.n	8003b18 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3b08      	subs	r3, #8
 8003b0a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b16:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ff11 	bl	8003948 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	69b9      	ldr	r1, [r7, #24]
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ffa0 	bl	8003a74 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d003      	beq.n	8003b44 <LL_GPIO_Init+0x8c>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b09      	cmp	r3, #9
 8003b42:	d10d      	bne.n	8003b60 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	69b9      	ldr	r1, [r7, #24]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff ff2d 	bl	80039ac <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	461a      	mov	r2, r3
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ff58 	bl	8003a10 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	3301      	adds	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1b8      	bne.n	8003ae4 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <LL_I2C_Enable>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <LL_I2C_Disable>:
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <LL_I2C_SetOwnAddress1>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003bcc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	609a      	str	r2, [r3, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
	...

08003be8 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003be8:	b490      	push	{r4, r7}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8003bf6:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8003bf8:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4a3f      	ldr	r2, [pc, #252]	; (8003cfc <LL_I2C_ConfigSpeed+0x114>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c0c:	ea44 0203 	orr.w	r2, r4, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4938      	ldr	r1, [pc, #224]	; (8003d00 <LL_I2C_ConfigSpeed+0x118>)
 8003c20:	428b      	cmp	r3, r1
 8003c22:	d801      	bhi.n	8003c28 <LL_I2C_ConfigSpeed+0x40>
 8003c24:	1c63      	adds	r3, r4, #1
 8003c26:	e008      	b.n	8003c3a <LL_I2C_ConfigSpeed+0x52>
 8003c28:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c2c:	fb03 f304 	mul.w	r3, r3, r4
 8003c30:	4934      	ldr	r1, [pc, #208]	; (8003d04 <LL_I2C_ConfigSpeed+0x11c>)
 8003c32:	fba1 1303 	umull	r1, r3, r1, r3
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	3301      	adds	r3, #1
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a2f      	ldr	r2, [pc, #188]	; (8003d00 <LL_I2C_ConfigSpeed+0x118>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d939      	bls.n	8003cbc <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d117      	bne.n	8003c7e <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	e01d      	b.n	8003cb4 <LL_I2C_ConfigSpeed+0xcc>
 8003c78:	f248 0301 	movw	r3, #32769	; 0x8001
 8003c7c:	e01a      	b.n	8003cb4 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009a      	lsls	r2, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009a      	lsls	r2, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cae:	e001      	b.n	8003cb4 <LL_I2C_ConfigSpeed+0xcc>
 8003cb0:	f248 0301 	movw	r3, #32769	; 0x8001
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	ea43 0402 	orr.w	r4, r3, r2
 8003cba:	e010      	b.n	8003cde <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d905      	bls.n	8003cda <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	e000      	b.n	8003cdc <LL_I2C_ConfigSpeed+0xf4>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cea:	ea44 0203 	orr.w	r2, r4, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	61da      	str	r2, [r3, #28]
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc90      	pop	{r4, r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	431bde83 	.word	0x431bde83
 8003d00:	000186a0 	.word	0x000186a0
 8003d04:	10624dd3 	.word	0x10624dd3

08003d08 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 021a 	bic.w	r2, r3, #26
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff1d 	bl	8003b9a <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003d60:	f107 0308 	add.w	r3, r7, #8
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f87b 	bl	8003e60 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003d6a:	6939      	ldr	r1, [r7, #16]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff37 	bl	8003be8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68d9      	ldr	r1, [r3, #12]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	461a      	mov	r2, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff17 	bl	8003bb8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ffb9 	bl	8003d08 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fef0 	bl	8003b7c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	4619      	mov	r1, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ffc2 	bl	8003d2c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <LL_RCC_GetSysClkSource>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <LL_RCC_GetSysClkSource+0x14>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	40021000 	.word	0x40021000

08003dcc <LL_RCC_GetAHBPrescaler>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <LL_RCC_GetAHBPrescaler+0x14>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	40021000 	.word	0x40021000

08003de4 <LL_RCC_GetAPB1Prescaler>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	40021000 	.word	0x40021000

08003dfc <LL_RCC_GetAPB2Prescaler>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40021000 	.word	0x40021000

08003e14 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <LL_RCC_PLL_GetMainSource+0x14>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40021000 	.word	0x40021000

08003e2c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	40021000 	.word	0x40021000

08003e44 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8003e48:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <LL_RCC_PLL_GetPrediv+0x18>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	0c5b      	lsrs	r3, r3, #17
 8003e4e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000

08003e60 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003e68:	f000 f820 	bl	8003eac <RCC_GetSystemClockFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f83a 	bl	8003ef0 <RCC_GetHCLKClockFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f848 	bl	8003f1c <RCC_GetPCLK1ClockFreq>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f854 	bl	8003f44 <RCC_GetPCLK2ClockFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60da      	str	r2, [r3, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003eb6:	f7ff ff7d 	bl	8003db4 <LL_RCC_GetSysClkSource>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d006      	beq.n	8003ece <RCC_GetSystemClockFreq+0x22>
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d007      	beq.n	8003ed4 <RCC_GetSystemClockFreq+0x28>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <RCC_GetSystemClockFreq+0x40>)
 8003eca:	607b      	str	r3, [r7, #4]
      break;
 8003ecc:	e009      	b.n	8003ee2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <RCC_GetSystemClockFreq+0x40>)
 8003ed0:	607b      	str	r3, [r7, #4]
      break;
 8003ed2:	e006      	b.n	8003ee2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003ed4:	f000 f84a 	bl	8003f6c <RCC_PLL_GetFreqDomain_SYS>
 8003ed8:	6078      	str	r0, [r7, #4]
      break;
 8003eda:	e002      	b.n	8003ee2 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <RCC_GetSystemClockFreq+0x40>)
 8003ede:	607b      	str	r3, [r7, #4]
      break;
 8003ee0:	bf00      	nop
  }

  return frequency;
 8003ee2:	687b      	ldr	r3, [r7, #4]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	007a1200 	.word	0x007a1200

08003ef0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ef8:	f7ff ff68 	bl	8003dcc <LL_RCC_GetAHBPrescaler>
 8003efc:	4603      	mov	r3, r0
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <RCC_GetHCLKClockFreq+0x28>)
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	40d3      	lsrs	r3, r2
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	080057c0 	.word	0x080057c0

08003f1c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003f24:	f7ff ff5e 	bl	8003de4 <LL_RCC_GetAPB1Prescaler>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <RCC_GetPCLK1ClockFreq+0x24>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	461a      	mov	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	40d3      	lsrs	r3, r2
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	080057d0 	.word	0x080057d0

08003f44 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f4c:	f7ff ff56 	bl	8003dfc <LL_RCC_GetAPB2Prescaler>
 8003f50:	4603      	mov	r3, r0
 8003f52:	0adb      	lsrs	r3, r3, #11
 8003f54:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <RCC_GetPCLK2ClockFreq+0x24>)
 8003f56:	5cd3      	ldrb	r3, [r2, r3]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	40d3      	lsrs	r3, r2
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	080057d0 	.word	0x080057d0

08003f6c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	2300      	movs	r3, #0
 8003f78:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003f7a:	f7ff ff4b 	bl	8003e14 <LL_RCC_PLL_GetMainSource>
 8003f7e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8a:	d003      	beq.n	8003f94 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003f8c:	e00b      	b.n	8003fa6 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003f90:	607b      	str	r3, [r7, #4]
      break;
 8003f92:	e00b      	b.n	8003fac <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003f94:	f7ff ff56 	bl	8003e44 <LL_RCC_PLL_GetPrediv>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	607b      	str	r3, [r7, #4]
      break;
 8003fa4:	e002      	b.n	8003fac <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003fa6:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003fa8:	607b      	str	r3, [r7, #4]
      break;
 8003faa:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003fac:	f7ff ff3e 	bl	8003e2c <LL_RCC_PLL_GetMultiplicator>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	0c9b      	lsrs	r3, r3, #18
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	003d0900 	.word	0x003d0900
 8003fc8:	007a1200 	.word	0x007a1200

08003fcc <LL_TIM_SetPrescaler>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <LL_TIM_SetAutoReload>:
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr

08004000 <LL_TIM_SetRepetitionCounter>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <LL_TIM_OC_SetCompareCH1>:
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	635a      	str	r2, [r3, #52]	; 0x34
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <LL_TIM_OC_SetCompareCH2>:
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <LL_TIM_OC_SetCompareCH3>:
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <LL_TIM_OC_SetCompareCH4>:
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	615a      	str	r2, [r3, #20]
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a27      	ldr	r2, [pc, #156]	; (8004150 <LL_TIM_Init+0xb0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <LL_TIM_Init+0x30>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d007      	beq.n	80040d0 <LL_TIM_Init+0x30>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a24      	ldr	r2, [pc, #144]	; (8004154 <LL_TIM_Init+0xb4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <LL_TIM_Init+0x30>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a23      	ldr	r2, [pc, #140]	; (8004158 <LL_TIM_Init+0xb8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d106      	bne.n	80040de <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <LL_TIM_Init+0xb0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00b      	beq.n	80040fe <LL_TIM_Init+0x5e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ec:	d007      	beq.n	80040fe <LL_TIM_Init+0x5e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a18      	ldr	r2, [pc, #96]	; (8004154 <LL_TIM_Init+0xb4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d003      	beq.n	80040fe <LL_TIM_Init+0x5e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a17      	ldr	r2, [pc, #92]	; (8004158 <LL_TIM_Init+0xb8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d106      	bne.n	800410c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff64 	bl	8003fe6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff51 	bl	8003fcc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a08      	ldr	r2, [pc, #32]	; (8004150 <LL_TIM_Init+0xb0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d105      	bne.n	800413e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	7c1b      	ldrb	r3, [r3, #16]
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff61 	bl	8004000 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff ff9f 	bl	8004082 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800

0800415c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b10      	cmp	r3, #16
 8004170:	d012      	beq.n	8004198 <LL_TIM_OC_Init+0x3c>
 8004172:	2b10      	cmp	r3, #16
 8004174:	d802      	bhi.n	800417c <LL_TIM_OC_Init+0x20>
 8004176:	2b01      	cmp	r3, #1
 8004178:	d007      	beq.n	800418a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800417a:	e022      	b.n	80041c2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800417c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004180:	d011      	beq.n	80041a6 <LL_TIM_OC_Init+0x4a>
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004186:	d015      	beq.n	80041b4 <LL_TIM_OC_Init+0x58>
      break;
 8004188:	e01b      	b.n	80041c2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f865 	bl	800425c <OC1Config>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]
      break;
 8004196:	e014      	b.n	80041c2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f8c4 	bl	8004328 <OC2Config>
 80041a0:	4603      	mov	r3, r0
 80041a2:	75fb      	strb	r3, [r7, #23]
      break;
 80041a4:	e00d      	b.n	80041c2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f927 	bl	80043fc <OC3Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	75fb      	strb	r3, [r7, #23]
      break;
 80041b2:	e006      	b.n	80041c2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f98a 	bl	80044d0 <OC4Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	75fb      	strb	r3, [r7, #23]
      break;
 80041c0:	bf00      	nop
  }

  return result;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	7b12      	ldrb	r2, [r2, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	89d2      	ldrh	r2, [r2, #14]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f023 0201 	bic.w	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f023 0202 	bic.w	r2, r3, #2
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 0201 	bic.w	r2, r3, #1
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <OC1Config+0xc8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d11e      	bne.n	80042fc <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0208 	bic.w	r2, r3, #8
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f023 0204 	bic.w	r2, r3, #4
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fe83 	bl	800401a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40012c00 	.word	0x40012c00

08004328 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0210 	bic.w	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0220 	bic.w	r2, r3, #32
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0210 	bic.w	r2, r3, #16
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <OC2Config+0xd0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d11f      	bne.n	80043d0 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	019b      	lsls	r3, r3, #6
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	019b      	lsls	r3, r3, #6
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff fe26 	bl	8004034 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40012c00 	.word	0x40012c00

080043fc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0303 	bic.w	r3, r3, #3
 800442a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <OC3Config+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d11f      	bne.n	80044a2 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	029b      	lsls	r3, r3, #10
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	015b      	lsls	r3, r3, #5
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff fdca 	bl	800404e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00

080044d0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	031b      	lsls	r3, r3, #12
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	031b      	lsls	r3, r3, #12
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <OC4Config+0xa0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d107      	bne.n	8004548 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	019b      	lsls	r3, r3, #6
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4619      	mov	r1, r3
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff fd84 	bl	8004068 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40012c00 	.word	0x40012c00

08004574 <LL_USART_IsEnabled>:
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004588:	bf0c      	ite	eq
 800458a:	2301      	moveq	r3, #1
 800458c:	2300      	movne	r3, #0
 800458e:	b2db      	uxtb	r3, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <LL_USART_SetStopBitsLength>:
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	611a      	str	r2, [r3, #16]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <LL_USART_SetHWFlowCtrl>:
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	615a      	str	r2, [r3, #20]
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
	...

080045e4 <LL_USART_SetBaudRate>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009a      	lsls	r2, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	fbb2 f3f3 	udiv	r3, r2, r3
 8004604:	4a25      	ldr	r2, [pc, #148]	; (800469c <LL_USART_SetBaudRate+0xb8>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	b29b      	uxth	r3, r3
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	b299      	uxth	r1, r3
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	fbb2 f2f3 	udiv	r2, r2, r3
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <LL_USART_SetBaudRate+0xb8>)
 8004628:	fba3 0302 	umull	r0, r3, r3, r2
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	2064      	movs	r0, #100	; 0x64
 8004630:	fb00 f303 	mul.w	r3, r0, r3
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	3332      	adds	r3, #50	; 0x32
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <LL_USART_SetBaudRate+0xb8>)
 800463c:	fba2 2303 	umull	r2, r3, r2, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	b29b      	uxth	r3, r3
 8004644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004648:	b29b      	uxth	r3, r3
 800464a:	440b      	add	r3, r1
 800464c:	b299      	uxth	r1, r3
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009a      	lsls	r2, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004662:	4b0e      	ldr	r3, [pc, #56]	; (800469c <LL_USART_SetBaudRate+0xb8>)
 8004664:	fba3 0302 	umull	r0, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2064      	movs	r0, #100	; 0x64
 800466c:	fb00 f303 	mul.w	r3, r0, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <LL_USART_SetBaudRate+0xb8>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	b29b      	uxth	r3, r3
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	b29b      	uxth	r3, r3
 8004686:	440b      	add	r3, r1
 8004688:	b29b      	uxth	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	51eb851f 	.word	0x51eb851f

080046a0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff ff5e 	bl	8004574 <LL_USART_IsEnabled>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d145      	bne.n	800474a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046c6:	f023 030c 	bic.w	r3, r3, #12
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	6851      	ldr	r1, [r2, #4]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	68d2      	ldr	r2, [r2, #12]
 80046d2:	4311      	orrs	r1, r2
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	6912      	ldr	r2, [r2, #16]
 80046d8:	430a      	orrs	r2, r1
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff ff57 	bl	800459a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7ff ff63 	bl	80045be <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80046f8:	f107 0308 	add.w	r3, r7, #8
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fbaf 	bl	8003e60 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a13      	ldr	r2, [pc, #76]	; (8004754 <LL_USART_Init+0xb4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d102      	bne.n	8004710 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e00c      	b.n	800472a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a11      	ldr	r2, [pc, #68]	; (8004758 <LL_USART_Init+0xb8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d102      	bne.n	800471e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e005      	b.n	800472a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a0e      	ldr	r2, [pc, #56]	; (800475c <LL_USART_Init+0xbc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004738:	2300      	movs	r3, #0
 800473a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff ff4d 	bl	80045e4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800474a:	7ffb      	ldrb	r3, [r7, #31]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40013800 	.word	0x40013800
 8004758:	40004400 	.word	0x40004400
 800475c:	40004800 	.word	0x40004800

08004760 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	4a07      	ldr	r2, [pc, #28]	; (8004790 <LL_InitTick+0x30>)
 8004774:	3b01      	subs	r3, #1
 8004776:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <LL_InitTick+0x30>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <LL_InitTick+0x30>)
 8004780:	2205      	movs	r2, #5
 8004782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000e010 	.word	0xe000e010

08004794 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800479c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ffdd 	bl	8004760 <LL_InitTick>
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80047b8:	4a03      	ldr	r2, [pc, #12]	; (80047c8 <LL_SetSystemCoreClock+0x18>)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	20000014 	.word	0x20000014

080047cc <__errno>:
 80047cc:	4b01      	ldr	r3, [pc, #4]	; (80047d4 <__errno+0x8>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000018 	.word	0x20000018

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	2500      	movs	r5, #0
 80047dc:	4e0c      	ldr	r6, [pc, #48]	; (8004810 <__libc_init_array+0x38>)
 80047de:	4c0d      	ldr	r4, [pc, #52]	; (8004814 <__libc_init_array+0x3c>)
 80047e0:	1ba4      	subs	r4, r4, r6
 80047e2:	10a4      	asrs	r4, r4, #2
 80047e4:	42a5      	cmp	r5, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	f000 ffc6 	bl	8005778 <_init>
 80047ec:	2500      	movs	r5, #0
 80047ee:	4e0a      	ldr	r6, [pc, #40]	; (8004818 <__libc_init_array+0x40>)
 80047f0:	4c0a      	ldr	r4, [pc, #40]	; (800481c <__libc_init_array+0x44>)
 80047f2:	1ba4      	subs	r4, r4, r6
 80047f4:	10a4      	asrs	r4, r4, #2
 80047f6:	42a5      	cmp	r5, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004800:	4798      	blx	r3
 8004802:	3501      	adds	r5, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800480a:	4798      	blx	r3
 800480c:	3501      	adds	r5, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	08005870 	.word	0x08005870
 8004814:	08005870 	.word	0x08005870
 8004818:	08005870 	.word	0x08005870
 800481c:	08005874 	.word	0x08005874

08004820 <memset>:
 8004820:	4603      	mov	r3, r0
 8004822:	4402      	add	r2, r0
 8004824:	4293      	cmp	r3, r2
 8004826:	d100      	bne.n	800482a <memset+0xa>
 8004828:	4770      	bx	lr
 800482a:	f803 1b01 	strb.w	r1, [r3], #1
 800482e:	e7f9      	b.n	8004824 <memset+0x4>

08004830 <iprintf>:
 8004830:	b40f      	push	{r0, r1, r2, r3}
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <iprintf+0x2c>)
 8004834:	b513      	push	{r0, r1, r4, lr}
 8004836:	681c      	ldr	r4, [r3, #0]
 8004838:	b124      	cbz	r4, 8004844 <iprintf+0x14>
 800483a:	69a3      	ldr	r3, [r4, #24]
 800483c:	b913      	cbnz	r3, 8004844 <iprintf+0x14>
 800483e:	4620      	mov	r0, r4
 8004840:	f000 f9ac 	bl	8004b9c <__sinit>
 8004844:	ab05      	add	r3, sp, #20
 8004846:	9a04      	ldr	r2, [sp, #16]
 8004848:	68a1      	ldr	r1, [r4, #8]
 800484a:	4620      	mov	r0, r4
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	f000 fb69 	bl	8004f24 <_vfiprintf_r>
 8004852:	b002      	add	sp, #8
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004858:	b004      	add	sp, #16
 800485a:	4770      	bx	lr
 800485c:	20000018 	.word	0x20000018

08004860 <setvbuf>:
 8004860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004864:	461d      	mov	r5, r3
 8004866:	4b51      	ldr	r3, [pc, #324]	; (80049ac <setvbuf+0x14c>)
 8004868:	4604      	mov	r4, r0
 800486a:	681e      	ldr	r6, [r3, #0]
 800486c:	460f      	mov	r7, r1
 800486e:	4690      	mov	r8, r2
 8004870:	b126      	cbz	r6, 800487c <setvbuf+0x1c>
 8004872:	69b3      	ldr	r3, [r6, #24]
 8004874:	b913      	cbnz	r3, 800487c <setvbuf+0x1c>
 8004876:	4630      	mov	r0, r6
 8004878:	f000 f990 	bl	8004b9c <__sinit>
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <setvbuf+0x150>)
 800487e:	429c      	cmp	r4, r3
 8004880:	d152      	bne.n	8004928 <setvbuf+0xc8>
 8004882:	6874      	ldr	r4, [r6, #4]
 8004884:	f1b8 0f02 	cmp.w	r8, #2
 8004888:	d006      	beq.n	8004898 <setvbuf+0x38>
 800488a:	f1b8 0f01 	cmp.w	r8, #1
 800488e:	f200 8089 	bhi.w	80049a4 <setvbuf+0x144>
 8004892:	2d00      	cmp	r5, #0
 8004894:	f2c0 8086 	blt.w	80049a4 <setvbuf+0x144>
 8004898:	4621      	mov	r1, r4
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f914 	bl	8004ac8 <_fflush_r>
 80048a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048a2:	b141      	cbz	r1, 80048b6 <setvbuf+0x56>
 80048a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048a8:	4299      	cmp	r1, r3
 80048aa:	d002      	beq.n	80048b2 <setvbuf+0x52>
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 fa6b 	bl	8004d88 <_free_r>
 80048b2:	2300      	movs	r3, #0
 80048b4:	6363      	str	r3, [r4, #52]	; 0x34
 80048b6:	2300      	movs	r3, #0
 80048b8:	61a3      	str	r3, [r4, #24]
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	061b      	lsls	r3, r3, #24
 80048c0:	d503      	bpl.n	80048ca <setvbuf+0x6a>
 80048c2:	6921      	ldr	r1, [r4, #16]
 80048c4:	4630      	mov	r0, r6
 80048c6:	f000 fa5f 	bl	8004d88 <_free_r>
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	f1b8 0f02 	cmp.w	r8, #2
 80048d0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80048d4:	f023 0303 	bic.w	r3, r3, #3
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	d05d      	beq.n	8004998 <setvbuf+0x138>
 80048dc:	ab01      	add	r3, sp, #4
 80048de:	466a      	mov	r2, sp
 80048e0:	4621      	mov	r1, r4
 80048e2:	4630      	mov	r0, r6
 80048e4:	f000 f9e4 	bl	8004cb0 <__swhatbuf_r>
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	4318      	orrs	r0, r3
 80048ec:	81a0      	strh	r0, [r4, #12]
 80048ee:	bb2d      	cbnz	r5, 800493c <setvbuf+0xdc>
 80048f0:	9d00      	ldr	r5, [sp, #0]
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 fa40 	bl	8004d78 <malloc>
 80048f8:	4607      	mov	r7, r0
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d14e      	bne.n	800499c <setvbuf+0x13c>
 80048fe:	f8dd 9000 	ldr.w	r9, [sp]
 8004902:	45a9      	cmp	r9, r5
 8004904:	d13c      	bne.n	8004980 <setvbuf+0x120>
 8004906:	f04f 30ff 	mov.w	r0, #4294967295
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	81a3      	strh	r3, [r4, #12]
 8004912:	2300      	movs	r3, #0
 8004914:	60a3      	str	r3, [r4, #8]
 8004916:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	2301      	movs	r3, #1
 8004920:	6163      	str	r3, [r4, #20]
 8004922:	b003      	add	sp, #12
 8004924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004928:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <setvbuf+0x154>)
 800492a:	429c      	cmp	r4, r3
 800492c:	d101      	bne.n	8004932 <setvbuf+0xd2>
 800492e:	68b4      	ldr	r4, [r6, #8]
 8004930:	e7a8      	b.n	8004884 <setvbuf+0x24>
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <setvbuf+0x158>)
 8004934:	429c      	cmp	r4, r3
 8004936:	bf08      	it	eq
 8004938:	68f4      	ldreq	r4, [r6, #12]
 800493a:	e7a3      	b.n	8004884 <setvbuf+0x24>
 800493c:	2f00      	cmp	r7, #0
 800493e:	d0d8      	beq.n	80048f2 <setvbuf+0x92>
 8004940:	69b3      	ldr	r3, [r6, #24]
 8004942:	b913      	cbnz	r3, 800494a <setvbuf+0xea>
 8004944:	4630      	mov	r0, r6
 8004946:	f000 f929 	bl	8004b9c <__sinit>
 800494a:	f1b8 0f01 	cmp.w	r8, #1
 800494e:	bf08      	it	eq
 8004950:	89a3      	ldrheq	r3, [r4, #12]
 8004952:	6027      	str	r7, [r4, #0]
 8004954:	bf04      	itt	eq
 8004956:	f043 0301 	orreq.w	r3, r3, #1
 800495a:	81a3      	strheq	r3, [r4, #12]
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004962:	f013 0008 	ands.w	r0, r3, #8
 8004966:	d01b      	beq.n	80049a0 <setvbuf+0x140>
 8004968:	f013 0001 	ands.w	r0, r3, #1
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	bf1f      	itttt	ne
 8004972:	426d      	negne	r5, r5
 8004974:	60a3      	strne	r3, [r4, #8]
 8004976:	61a5      	strne	r5, [r4, #24]
 8004978:	4618      	movne	r0, r3
 800497a:	bf08      	it	eq
 800497c:	60a5      	streq	r5, [r4, #8]
 800497e:	e7d0      	b.n	8004922 <setvbuf+0xc2>
 8004980:	4648      	mov	r0, r9
 8004982:	f000 f9f9 	bl	8004d78 <malloc>
 8004986:	4607      	mov	r7, r0
 8004988:	2800      	cmp	r0, #0
 800498a:	d0bc      	beq.n	8004906 <setvbuf+0xa6>
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	464d      	mov	r5, r9
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	81a3      	strh	r3, [r4, #12]
 8004996:	e7d3      	b.n	8004940 <setvbuf+0xe0>
 8004998:	2000      	movs	r0, #0
 800499a:	e7b6      	b.n	800490a <setvbuf+0xaa>
 800499c:	46a9      	mov	r9, r5
 800499e:	e7f5      	b.n	800498c <setvbuf+0x12c>
 80049a0:	60a0      	str	r0, [r4, #8]
 80049a2:	e7be      	b.n	8004922 <setvbuf+0xc2>
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	e7bb      	b.n	8004922 <setvbuf+0xc2>
 80049aa:	bf00      	nop
 80049ac:	20000018 	.word	0x20000018
 80049b0:	080057fc 	.word	0x080057fc
 80049b4:	0800581c 	.word	0x0800581c
 80049b8:	080057dc 	.word	0x080057dc

080049bc <__sflush_r>:
 80049bc:	898a      	ldrh	r2, [r1, #12]
 80049be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c2:	4605      	mov	r5, r0
 80049c4:	0710      	lsls	r0, r2, #28
 80049c6:	460c      	mov	r4, r1
 80049c8:	d458      	bmi.n	8004a7c <__sflush_r+0xc0>
 80049ca:	684b      	ldr	r3, [r1, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	dc05      	bgt.n	80049dc <__sflush_r+0x20>
 80049d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dc02      	bgt.n	80049dc <__sflush_r+0x20>
 80049d6:	2000      	movs	r0, #0
 80049d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049de:	2e00      	cmp	r6, #0
 80049e0:	d0f9      	beq.n	80049d6 <__sflush_r+0x1a>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049e8:	682f      	ldr	r7, [r5, #0]
 80049ea:	6a21      	ldr	r1, [r4, #32]
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	d032      	beq.n	8004a56 <__sflush_r+0x9a>
 80049f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049f2:	89a3      	ldrh	r3, [r4, #12]
 80049f4:	075a      	lsls	r2, r3, #29
 80049f6:	d505      	bpl.n	8004a04 <__sflush_r+0x48>
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	1ac0      	subs	r0, r0, r3
 80049fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049fe:	b10b      	cbz	r3, 8004a04 <__sflush_r+0x48>
 8004a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a02:	1ac0      	subs	r0, r0, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	4602      	mov	r2, r0
 8004a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a0a:	6a21      	ldr	r1, [r4, #32]
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b0      	blx	r6
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	d106      	bne.n	8004a24 <__sflush_r+0x68>
 8004a16:	6829      	ldr	r1, [r5, #0]
 8004a18:	291d      	cmp	r1, #29
 8004a1a:	d848      	bhi.n	8004aae <__sflush_r+0xf2>
 8004a1c:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <__sflush_r+0x108>)
 8004a1e:	40ca      	lsrs	r2, r1
 8004a20:	07d6      	lsls	r6, r2, #31
 8004a22:	d544      	bpl.n	8004aae <__sflush_r+0xf2>
 8004a24:	2200      	movs	r2, #0
 8004a26:	6062      	str	r2, [r4, #4]
 8004a28:	6922      	ldr	r2, [r4, #16]
 8004a2a:	04d9      	lsls	r1, r3, #19
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	d504      	bpl.n	8004a3a <__sflush_r+0x7e>
 8004a30:	1c42      	adds	r2, r0, #1
 8004a32:	d101      	bne.n	8004a38 <__sflush_r+0x7c>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b903      	cbnz	r3, 8004a3a <__sflush_r+0x7e>
 8004a38:	6560      	str	r0, [r4, #84]	; 0x54
 8004a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a3c:	602f      	str	r7, [r5, #0]
 8004a3e:	2900      	cmp	r1, #0
 8004a40:	d0c9      	beq.n	80049d6 <__sflush_r+0x1a>
 8004a42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a46:	4299      	cmp	r1, r3
 8004a48:	d002      	beq.n	8004a50 <__sflush_r+0x94>
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f000 f99c 	bl	8004d88 <_free_r>
 8004a50:	2000      	movs	r0, #0
 8004a52:	6360      	str	r0, [r4, #52]	; 0x34
 8004a54:	e7c0      	b.n	80049d8 <__sflush_r+0x1c>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4628      	mov	r0, r5
 8004a5a:	47b0      	blx	r6
 8004a5c:	1c41      	adds	r1, r0, #1
 8004a5e:	d1c8      	bne.n	80049f2 <__sflush_r+0x36>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0c5      	beq.n	80049f2 <__sflush_r+0x36>
 8004a66:	2b1d      	cmp	r3, #29
 8004a68:	d001      	beq.n	8004a6e <__sflush_r+0xb2>
 8004a6a:	2b16      	cmp	r3, #22
 8004a6c:	d101      	bne.n	8004a72 <__sflush_r+0xb6>
 8004a6e:	602f      	str	r7, [r5, #0]
 8004a70:	e7b1      	b.n	80049d6 <__sflush_r+0x1a>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a78:	81a3      	strh	r3, [r4, #12]
 8004a7a:	e7ad      	b.n	80049d8 <__sflush_r+0x1c>
 8004a7c:	690f      	ldr	r7, [r1, #16]
 8004a7e:	2f00      	cmp	r7, #0
 8004a80:	d0a9      	beq.n	80049d6 <__sflush_r+0x1a>
 8004a82:	0793      	lsls	r3, r2, #30
 8004a84:	bf18      	it	ne
 8004a86:	2300      	movne	r3, #0
 8004a88:	680e      	ldr	r6, [r1, #0]
 8004a8a:	bf08      	it	eq
 8004a8c:	694b      	ldreq	r3, [r1, #20]
 8004a8e:	eba6 0807 	sub.w	r8, r6, r7
 8004a92:	600f      	str	r7, [r1, #0]
 8004a94:	608b      	str	r3, [r1, #8]
 8004a96:	f1b8 0f00 	cmp.w	r8, #0
 8004a9a:	dd9c      	ble.n	80049d6 <__sflush_r+0x1a>
 8004a9c:	4643      	mov	r3, r8
 8004a9e:	463a      	mov	r2, r7
 8004aa0:	6a21      	ldr	r1, [r4, #32]
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004aa6:	47b0      	blx	r6
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	dc06      	bgt.n	8004aba <__sflush_r+0xfe>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	e78e      	b.n	80049d8 <__sflush_r+0x1c>
 8004aba:	4407      	add	r7, r0
 8004abc:	eba8 0800 	sub.w	r8, r8, r0
 8004ac0:	e7e9      	b.n	8004a96 <__sflush_r+0xda>
 8004ac2:	bf00      	nop
 8004ac4:	20400001 	.word	0x20400001

08004ac8 <_fflush_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	690b      	ldr	r3, [r1, #16]
 8004acc:	4605      	mov	r5, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	b1db      	cbz	r3, 8004b0a <_fflush_r+0x42>
 8004ad2:	b118      	cbz	r0, 8004adc <_fflush_r+0x14>
 8004ad4:	6983      	ldr	r3, [r0, #24]
 8004ad6:	b90b      	cbnz	r3, 8004adc <_fflush_r+0x14>
 8004ad8:	f000 f860 	bl	8004b9c <__sinit>
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <_fflush_r+0x48>)
 8004ade:	429c      	cmp	r4, r3
 8004ae0:	d109      	bne.n	8004af6 <_fflush_r+0x2e>
 8004ae2:	686c      	ldr	r4, [r5, #4]
 8004ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae8:	b17b      	cbz	r3, 8004b0a <_fflush_r+0x42>
 8004aea:	4621      	mov	r1, r4
 8004aec:	4628      	mov	r0, r5
 8004aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004af2:	f7ff bf63 	b.w	80049bc <__sflush_r>
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <_fflush_r+0x4c>)
 8004af8:	429c      	cmp	r4, r3
 8004afa:	d101      	bne.n	8004b00 <_fflush_r+0x38>
 8004afc:	68ac      	ldr	r4, [r5, #8]
 8004afe:	e7f1      	b.n	8004ae4 <_fflush_r+0x1c>
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <_fflush_r+0x50>)
 8004b02:	429c      	cmp	r4, r3
 8004b04:	bf08      	it	eq
 8004b06:	68ec      	ldreq	r4, [r5, #12]
 8004b08:	e7ec      	b.n	8004ae4 <_fflush_r+0x1c>
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	bf00      	nop
 8004b10:	080057fc 	.word	0x080057fc
 8004b14:	0800581c 	.word	0x0800581c
 8004b18:	080057dc 	.word	0x080057dc

08004b1c <std>:
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	4604      	mov	r4, r0
 8004b22:	e9c0 3300 	strd	r3, r3, [r0]
 8004b26:	6083      	str	r3, [r0, #8]
 8004b28:	8181      	strh	r1, [r0, #12]
 8004b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b2c:	81c2      	strh	r2, [r0, #14]
 8004b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	4619      	mov	r1, r3
 8004b36:	2208      	movs	r2, #8
 8004b38:	305c      	adds	r0, #92	; 0x5c
 8004b3a:	f7ff fe71 	bl	8004820 <memset>
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <std+0x38>)
 8004b40:	6224      	str	r4, [r4, #32]
 8004b42:	6263      	str	r3, [r4, #36]	; 0x24
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <std+0x3c>)
 8004b46:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <std+0x40>)
 8004b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <std+0x44>)
 8004b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004b50:	bd10      	pop	{r4, pc}
 8004b52:	bf00      	nop
 8004b54:	08005481 	.word	0x08005481
 8004b58:	080054a3 	.word	0x080054a3
 8004b5c:	080054db 	.word	0x080054db
 8004b60:	080054ff 	.word	0x080054ff

08004b64 <_cleanup_r>:
 8004b64:	4901      	ldr	r1, [pc, #4]	; (8004b6c <_cleanup_r+0x8>)
 8004b66:	f000 b885 	b.w	8004c74 <_fwalk_reent>
 8004b6a:	bf00      	nop
 8004b6c:	08004ac9 	.word	0x08004ac9

08004b70 <__sfmoreglue>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	2568      	movs	r5, #104	; 0x68
 8004b74:	1e4a      	subs	r2, r1, #1
 8004b76:	4355      	muls	r5, r2
 8004b78:	460e      	mov	r6, r1
 8004b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b7e:	f000 f94f 	bl	8004e20 <_malloc_r>
 8004b82:	4604      	mov	r4, r0
 8004b84:	b140      	cbz	r0, 8004b98 <__sfmoreglue+0x28>
 8004b86:	2100      	movs	r1, #0
 8004b88:	e9c0 1600 	strd	r1, r6, [r0]
 8004b8c:	300c      	adds	r0, #12
 8004b8e:	60a0      	str	r0, [r4, #8]
 8004b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b94:	f7ff fe44 	bl	8004820 <memset>
 8004b98:	4620      	mov	r0, r4
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}

08004b9c <__sinit>:
 8004b9c:	6983      	ldr	r3, [r0, #24]
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	bb33      	cbnz	r3, 8004bf2 <__sinit+0x56>
 8004ba4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ba8:	6503      	str	r3, [r0, #80]	; 0x50
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <__sinit+0x58>)
 8004bac:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <__sinit+0x5c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6282      	str	r2, [r0, #40]	; 0x28
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	bf04      	itt	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	6183      	streq	r3, [r0, #24]
 8004bba:	f000 f81f 	bl	8004bfc <__sfp>
 8004bbe:	6060      	str	r0, [r4, #4]
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f000 f81b 	bl	8004bfc <__sfp>
 8004bc6:	60a0      	str	r0, [r4, #8]
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f000 f817 	bl	8004bfc <__sfp>
 8004bce:	2200      	movs	r2, #0
 8004bd0:	60e0      	str	r0, [r4, #12]
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	6860      	ldr	r0, [r4, #4]
 8004bd6:	f7ff ffa1 	bl	8004b1c <std>
 8004bda:	2201      	movs	r2, #1
 8004bdc:	2109      	movs	r1, #9
 8004bde:	68a0      	ldr	r0, [r4, #8]
 8004be0:	f7ff ff9c 	bl	8004b1c <std>
 8004be4:	2202      	movs	r2, #2
 8004be6:	2112      	movs	r1, #18
 8004be8:	68e0      	ldr	r0, [r4, #12]
 8004bea:	f7ff ff97 	bl	8004b1c <std>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61a3      	str	r3, [r4, #24]
 8004bf2:	bd10      	pop	{r4, pc}
 8004bf4:	080057d8 	.word	0x080057d8
 8004bf8:	08004b65 	.word	0x08004b65

08004bfc <__sfp>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <__sfp+0x70>)
 8004c00:	4607      	mov	r7, r0
 8004c02:	681e      	ldr	r6, [r3, #0]
 8004c04:	69b3      	ldr	r3, [r6, #24]
 8004c06:	b913      	cbnz	r3, 8004c0e <__sfp+0x12>
 8004c08:	4630      	mov	r0, r6
 8004c0a:	f7ff ffc7 	bl	8004b9c <__sinit>
 8004c0e:	3648      	adds	r6, #72	; 0x48
 8004c10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	d503      	bpl.n	8004c20 <__sfp+0x24>
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	b133      	cbz	r3, 8004c2a <__sfp+0x2e>
 8004c1c:	6836      	ldr	r6, [r6, #0]
 8004c1e:	e7f7      	b.n	8004c10 <__sfp+0x14>
 8004c20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c24:	b16d      	cbz	r5, 8004c42 <__sfp+0x46>
 8004c26:	3468      	adds	r4, #104	; 0x68
 8004c28:	e7f4      	b.n	8004c14 <__sfp+0x18>
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	f7ff ff9f 	bl	8004b70 <__sfmoreglue>
 8004c32:	6030      	str	r0, [r6, #0]
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d1f1      	bne.n	8004c1c <__sfp+0x20>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	4620      	mov	r0, r4
 8004c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <__sfp+0x74>)
 8004c44:	6665      	str	r5, [r4, #100]	; 0x64
 8004c46:	e9c4 5500 	strd	r5, r5, [r4]
 8004c4a:	60a5      	str	r5, [r4, #8]
 8004c4c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004c50:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004c54:	2208      	movs	r2, #8
 8004c56:	4629      	mov	r1, r5
 8004c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c5c:	f7ff fde0 	bl	8004820 <memset>
 8004c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c68:	e7e9      	b.n	8004c3e <__sfp+0x42>
 8004c6a:	bf00      	nop
 8004c6c:	080057d8 	.word	0x080057d8
 8004c70:	ffff0001 	.word	0xffff0001

08004c74 <_fwalk_reent>:
 8004c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4689      	mov	r9, r1
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c82:	b914      	cbnz	r4, 8004c8a <_fwalk_reent+0x16>
 8004c84:	4630      	mov	r0, r6
 8004c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c8a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004c8e:	3f01      	subs	r7, #1
 8004c90:	d501      	bpl.n	8004c96 <_fwalk_reent+0x22>
 8004c92:	6824      	ldr	r4, [r4, #0]
 8004c94:	e7f5      	b.n	8004c82 <_fwalk_reent+0xe>
 8004c96:	89ab      	ldrh	r3, [r5, #12]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d907      	bls.n	8004cac <_fwalk_reent+0x38>
 8004c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	d003      	beq.n	8004cac <_fwalk_reent+0x38>
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	47c8      	blx	r9
 8004caa:	4306      	orrs	r6, r0
 8004cac:	3568      	adds	r5, #104	; 0x68
 8004cae:	e7ee      	b.n	8004c8e <_fwalk_reent+0x1a>

08004cb0 <__swhatbuf_r>:
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	460e      	mov	r6, r1
 8004cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb8:	b096      	sub	sp, #88	; 0x58
 8004cba:	2900      	cmp	r1, #0
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	461d      	mov	r5, r3
 8004cc0:	da07      	bge.n	8004cd2 <__swhatbuf_r+0x22>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	89b3      	ldrh	r3, [r6, #12]
 8004cc8:	061a      	lsls	r2, r3, #24
 8004cca:	d410      	bmi.n	8004cee <__swhatbuf_r+0x3e>
 8004ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd0:	e00e      	b.n	8004cf0 <__swhatbuf_r+0x40>
 8004cd2:	466a      	mov	r2, sp
 8004cd4:	f000 fcfa 	bl	80056cc <_fstat_r>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	dbf2      	blt.n	8004cc2 <__swhatbuf_r+0x12>
 8004cdc:	9a01      	ldr	r2, [sp, #4]
 8004cde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ce2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ce6:	425a      	negs	r2, r3
 8004ce8:	415a      	adcs	r2, r3
 8004cea:	602a      	str	r2, [r5, #0]
 8004cec:	e7ee      	b.n	8004ccc <__swhatbuf_r+0x1c>
 8004cee:	2340      	movs	r3, #64	; 0x40
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	b016      	add	sp, #88	; 0x58
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}

08004cf8 <__smakebuf_r>:
 8004cf8:	898b      	ldrh	r3, [r1, #12]
 8004cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cfc:	079d      	lsls	r5, r3, #30
 8004cfe:	4606      	mov	r6, r0
 8004d00:	460c      	mov	r4, r1
 8004d02:	d507      	bpl.n	8004d14 <__smakebuf_r+0x1c>
 8004d04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	6163      	str	r3, [r4, #20]
 8004d10:	b002      	add	sp, #8
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	ab01      	add	r3, sp, #4
 8004d16:	466a      	mov	r2, sp
 8004d18:	f7ff ffca 	bl	8004cb0 <__swhatbuf_r>
 8004d1c:	9900      	ldr	r1, [sp, #0]
 8004d1e:	4605      	mov	r5, r0
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 f87d 	bl	8004e20 <_malloc_r>
 8004d26:	b948      	cbnz	r0, 8004d3c <__smakebuf_r+0x44>
 8004d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d2c:	059a      	lsls	r2, r3, #22
 8004d2e:	d4ef      	bmi.n	8004d10 <__smakebuf_r+0x18>
 8004d30:	f023 0303 	bic.w	r3, r3, #3
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	81a3      	strh	r3, [r4, #12]
 8004d3a:	e7e3      	b.n	8004d04 <__smakebuf_r+0xc>
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <__smakebuf_r+0x7c>)
 8004d3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	6020      	str	r0, [r4, #0]
 8004d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	9b00      	ldr	r3, [sp, #0]
 8004d4c:	6120      	str	r0, [r4, #16]
 8004d4e:	6163      	str	r3, [r4, #20]
 8004d50:	9b01      	ldr	r3, [sp, #4]
 8004d52:	b15b      	cbz	r3, 8004d6c <__smakebuf_r+0x74>
 8004d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f000 fcc9 	bl	80056f0 <_isatty_r>
 8004d5e:	b128      	cbz	r0, 8004d6c <__smakebuf_r+0x74>
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	431d      	orrs	r5, r3
 8004d70:	81a5      	strh	r5, [r4, #12]
 8004d72:	e7cd      	b.n	8004d10 <__smakebuf_r+0x18>
 8004d74:	08004b65 	.word	0x08004b65

08004d78 <malloc>:
 8004d78:	4b02      	ldr	r3, [pc, #8]	; (8004d84 <malloc+0xc>)
 8004d7a:	4601      	mov	r1, r0
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f000 b84f 	b.w	8004e20 <_malloc_r>
 8004d82:	bf00      	nop
 8004d84:	20000018 	.word	0x20000018

08004d88 <_free_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	d043      	beq.n	8004e18 <_free_r+0x90>
 8004d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d94:	1f0c      	subs	r4, r1, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfb8      	it	lt
 8004d9a:	18e4      	addlt	r4, r4, r3
 8004d9c:	f000 fcd8 	bl	8005750 <__malloc_lock>
 8004da0:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <_free_r+0x94>)
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	4610      	mov	r0, r2
 8004da6:	b933      	cbnz	r3, 8004db6 <_free_r+0x2e>
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	6014      	str	r4, [r2, #0]
 8004dac:	4628      	mov	r0, r5
 8004dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db2:	f000 bcce 	b.w	8005752 <__malloc_unlock>
 8004db6:	42a3      	cmp	r3, r4
 8004db8:	d90b      	bls.n	8004dd2 <_free_r+0x4a>
 8004dba:	6821      	ldr	r1, [r4, #0]
 8004dbc:	1862      	adds	r2, r4, r1
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	bf01      	itttt	eq
 8004dc2:	681a      	ldreq	r2, [r3, #0]
 8004dc4:	685b      	ldreq	r3, [r3, #4]
 8004dc6:	1852      	addeq	r2, r2, r1
 8004dc8:	6022      	streq	r2, [r4, #0]
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	6004      	str	r4, [r0, #0]
 8004dce:	e7ed      	b.n	8004dac <_free_r+0x24>
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	b10a      	cbz	r2, 8004dda <_free_r+0x52>
 8004dd6:	42a2      	cmp	r2, r4
 8004dd8:	d9fa      	bls.n	8004dd0 <_free_r+0x48>
 8004dda:	6819      	ldr	r1, [r3, #0]
 8004ddc:	1858      	adds	r0, r3, r1
 8004dde:	42a0      	cmp	r0, r4
 8004de0:	d10b      	bne.n	8004dfa <_free_r+0x72>
 8004de2:	6820      	ldr	r0, [r4, #0]
 8004de4:	4401      	add	r1, r0
 8004de6:	1858      	adds	r0, r3, r1
 8004de8:	4282      	cmp	r2, r0
 8004dea:	6019      	str	r1, [r3, #0]
 8004dec:	d1de      	bne.n	8004dac <_free_r+0x24>
 8004dee:	6810      	ldr	r0, [r2, #0]
 8004df0:	6852      	ldr	r2, [r2, #4]
 8004df2:	4401      	add	r1, r0
 8004df4:	6019      	str	r1, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	e7d8      	b.n	8004dac <_free_r+0x24>
 8004dfa:	d902      	bls.n	8004e02 <_free_r+0x7a>
 8004dfc:	230c      	movs	r3, #12
 8004dfe:	602b      	str	r3, [r5, #0]
 8004e00:	e7d4      	b.n	8004dac <_free_r+0x24>
 8004e02:	6820      	ldr	r0, [r4, #0]
 8004e04:	1821      	adds	r1, r4, r0
 8004e06:	428a      	cmp	r2, r1
 8004e08:	bf01      	itttt	eq
 8004e0a:	6811      	ldreq	r1, [r2, #0]
 8004e0c:	6852      	ldreq	r2, [r2, #4]
 8004e0e:	1809      	addeq	r1, r1, r0
 8004e10:	6021      	streq	r1, [r4, #0]
 8004e12:	6062      	str	r2, [r4, #4]
 8004e14:	605c      	str	r4, [r3, #4]
 8004e16:	e7c9      	b.n	8004dac <_free_r+0x24>
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200000a8 	.word	0x200000a8

08004e20 <_malloc_r>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	1ccd      	adds	r5, r1, #3
 8004e24:	f025 0503 	bic.w	r5, r5, #3
 8004e28:	3508      	adds	r5, #8
 8004e2a:	2d0c      	cmp	r5, #12
 8004e2c:	bf38      	it	cc
 8004e2e:	250c      	movcc	r5, #12
 8004e30:	2d00      	cmp	r5, #0
 8004e32:	4606      	mov	r6, r0
 8004e34:	db01      	blt.n	8004e3a <_malloc_r+0x1a>
 8004e36:	42a9      	cmp	r1, r5
 8004e38:	d903      	bls.n	8004e42 <_malloc_r+0x22>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	6033      	str	r3, [r6, #0]
 8004e3e:	2000      	movs	r0, #0
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	f000 fc85 	bl	8005750 <__malloc_lock>
 8004e46:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <_malloc_r+0xac>)
 8004e48:	6814      	ldr	r4, [r2, #0]
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	b991      	cbnz	r1, 8004e74 <_malloc_r+0x54>
 8004e4e:	4c20      	ldr	r4, [pc, #128]	; (8004ed0 <_malloc_r+0xb0>)
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	b91b      	cbnz	r3, 8004e5c <_malloc_r+0x3c>
 8004e54:	4630      	mov	r0, r6
 8004e56:	f000 fb03 	bl	8005460 <_sbrk_r>
 8004e5a:	6020      	str	r0, [r4, #0]
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f000 fafe 	bl	8005460 <_sbrk_r>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d124      	bne.n	8004eb2 <_malloc_r+0x92>
 8004e68:	230c      	movs	r3, #12
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	6033      	str	r3, [r6, #0]
 8004e6e:	f000 fc70 	bl	8005752 <__malloc_unlock>
 8004e72:	e7e4      	b.n	8004e3e <_malloc_r+0x1e>
 8004e74:	680b      	ldr	r3, [r1, #0]
 8004e76:	1b5b      	subs	r3, r3, r5
 8004e78:	d418      	bmi.n	8004eac <_malloc_r+0x8c>
 8004e7a:	2b0b      	cmp	r3, #11
 8004e7c:	d90f      	bls.n	8004e9e <_malloc_r+0x7e>
 8004e7e:	600b      	str	r3, [r1, #0]
 8004e80:	18cc      	adds	r4, r1, r3
 8004e82:	50cd      	str	r5, [r1, r3]
 8004e84:	4630      	mov	r0, r6
 8004e86:	f000 fc64 	bl	8005752 <__malloc_unlock>
 8004e8a:	f104 000b 	add.w	r0, r4, #11
 8004e8e:	1d23      	adds	r3, r4, #4
 8004e90:	f020 0007 	bic.w	r0, r0, #7
 8004e94:	1ac3      	subs	r3, r0, r3
 8004e96:	d0d3      	beq.n	8004e40 <_malloc_r+0x20>
 8004e98:	425a      	negs	r2, r3
 8004e9a:	50e2      	str	r2, [r4, r3]
 8004e9c:	e7d0      	b.n	8004e40 <_malloc_r+0x20>
 8004e9e:	684b      	ldr	r3, [r1, #4]
 8004ea0:	428c      	cmp	r4, r1
 8004ea2:	bf16      	itet	ne
 8004ea4:	6063      	strne	r3, [r4, #4]
 8004ea6:	6013      	streq	r3, [r2, #0]
 8004ea8:	460c      	movne	r4, r1
 8004eaa:	e7eb      	b.n	8004e84 <_malloc_r+0x64>
 8004eac:	460c      	mov	r4, r1
 8004eae:	6849      	ldr	r1, [r1, #4]
 8004eb0:	e7cc      	b.n	8004e4c <_malloc_r+0x2c>
 8004eb2:	1cc4      	adds	r4, r0, #3
 8004eb4:	f024 0403 	bic.w	r4, r4, #3
 8004eb8:	42a0      	cmp	r0, r4
 8004eba:	d005      	beq.n	8004ec8 <_malloc_r+0xa8>
 8004ebc:	1a21      	subs	r1, r4, r0
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 face 	bl	8005460 <_sbrk_r>
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d0cf      	beq.n	8004e68 <_malloc_r+0x48>
 8004ec8:	6025      	str	r5, [r4, #0]
 8004eca:	e7db      	b.n	8004e84 <_malloc_r+0x64>
 8004ecc:	200000a8 	.word	0x200000a8
 8004ed0:	200000ac 	.word	0x200000ac

08004ed4 <__sfputc_r>:
 8004ed4:	6893      	ldr	r3, [r2, #8]
 8004ed6:	b410      	push	{r4}
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	6093      	str	r3, [r2, #8]
 8004ede:	da07      	bge.n	8004ef0 <__sfputc_r+0x1c>
 8004ee0:	6994      	ldr	r4, [r2, #24]
 8004ee2:	42a3      	cmp	r3, r4
 8004ee4:	db01      	blt.n	8004eea <__sfputc_r+0x16>
 8004ee6:	290a      	cmp	r1, #10
 8004ee8:	d102      	bne.n	8004ef0 <__sfputc_r+0x1c>
 8004eea:	bc10      	pop	{r4}
 8004eec:	f000 bb0c 	b.w	8005508 <__swbuf_r>
 8004ef0:	6813      	ldr	r3, [r2, #0]
 8004ef2:	1c58      	adds	r0, r3, #1
 8004ef4:	6010      	str	r0, [r2, #0]
 8004ef6:	7019      	strb	r1, [r3, #0]
 8004ef8:	4608      	mov	r0, r1
 8004efa:	bc10      	pop	{r4}
 8004efc:	4770      	bx	lr

08004efe <__sfputs_r>:
 8004efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f00:	4606      	mov	r6, r0
 8004f02:	460f      	mov	r7, r1
 8004f04:	4614      	mov	r4, r2
 8004f06:	18d5      	adds	r5, r2, r3
 8004f08:	42ac      	cmp	r4, r5
 8004f0a:	d101      	bne.n	8004f10 <__sfputs_r+0x12>
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e007      	b.n	8004f20 <__sfputs_r+0x22>
 8004f10:	463a      	mov	r2, r7
 8004f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f16:	4630      	mov	r0, r6
 8004f18:	f7ff ffdc 	bl	8004ed4 <__sfputc_r>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d1f3      	bne.n	8004f08 <__sfputs_r+0xa>
 8004f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f24 <_vfiprintf_r>:
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	460c      	mov	r4, r1
 8004f2a:	b09d      	sub	sp, #116	; 0x74
 8004f2c:	4617      	mov	r7, r2
 8004f2e:	461d      	mov	r5, r3
 8004f30:	4606      	mov	r6, r0
 8004f32:	b118      	cbz	r0, 8004f3c <_vfiprintf_r+0x18>
 8004f34:	6983      	ldr	r3, [r0, #24]
 8004f36:	b90b      	cbnz	r3, 8004f3c <_vfiprintf_r+0x18>
 8004f38:	f7ff fe30 	bl	8004b9c <__sinit>
 8004f3c:	4b7c      	ldr	r3, [pc, #496]	; (8005130 <_vfiprintf_r+0x20c>)
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	d158      	bne.n	8004ff4 <_vfiprintf_r+0xd0>
 8004f42:	6874      	ldr	r4, [r6, #4]
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	0718      	lsls	r0, r3, #28
 8004f48:	d55e      	bpl.n	8005008 <_vfiprintf_r+0xe4>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d05b      	beq.n	8005008 <_vfiprintf_r+0xe4>
 8004f50:	2300      	movs	r3, #0
 8004f52:	9309      	str	r3, [sp, #36]	; 0x24
 8004f54:	2320      	movs	r3, #32
 8004f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5a:	2330      	movs	r3, #48	; 0x30
 8004f5c:	f04f 0b01 	mov.w	fp, #1
 8004f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f64:	9503      	str	r5, [sp, #12]
 8004f66:	46b8      	mov	r8, r7
 8004f68:	4645      	mov	r5, r8
 8004f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f6e:	b10b      	cbz	r3, 8004f74 <_vfiprintf_r+0x50>
 8004f70:	2b25      	cmp	r3, #37	; 0x25
 8004f72:	d154      	bne.n	800501e <_vfiprintf_r+0xfa>
 8004f74:	ebb8 0a07 	subs.w	sl, r8, r7
 8004f78:	d00b      	beq.n	8004f92 <_vfiprintf_r+0x6e>
 8004f7a:	4653      	mov	r3, sl
 8004f7c:	463a      	mov	r2, r7
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4630      	mov	r0, r6
 8004f82:	f7ff ffbc 	bl	8004efe <__sfputs_r>
 8004f86:	3001      	adds	r0, #1
 8004f88:	f000 80c2 	beq.w	8005110 <_vfiprintf_r+0x1ec>
 8004f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8e:	4453      	add	r3, sl
 8004f90:	9309      	str	r3, [sp, #36]	; 0x24
 8004f92:	f898 3000 	ldrb.w	r3, [r8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80ba 	beq.w	8005110 <_vfiprintf_r+0x1ec>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa6:	9304      	str	r3, [sp, #16]
 8004fa8:	9307      	str	r3, [sp, #28]
 8004faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fae:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb0:	46a8      	mov	r8, r5
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004fb8:	485e      	ldr	r0, [pc, #376]	; (8005134 <_vfiprintf_r+0x210>)
 8004fba:	f000 fbbb 	bl	8005734 <memchr>
 8004fbe:	9b04      	ldr	r3, [sp, #16]
 8004fc0:	bb78      	cbnz	r0, 8005022 <_vfiprintf_r+0xfe>
 8004fc2:	06d9      	lsls	r1, r3, #27
 8004fc4:	bf44      	itt	mi
 8004fc6:	2220      	movmi	r2, #32
 8004fc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fcc:	071a      	lsls	r2, r3, #28
 8004fce:	bf44      	itt	mi
 8004fd0:	222b      	movmi	r2, #43	; 0x2b
 8004fd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fd6:	782a      	ldrb	r2, [r5, #0]
 8004fd8:	2a2a      	cmp	r2, #42	; 0x2a
 8004fda:	d02a      	beq.n	8005032 <_vfiprintf_r+0x10e>
 8004fdc:	46a8      	mov	r8, r5
 8004fde:	2000      	movs	r0, #0
 8004fe0:	250a      	movs	r5, #10
 8004fe2:	9a07      	ldr	r2, [sp, #28]
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fea:	3b30      	subs	r3, #48	; 0x30
 8004fec:	2b09      	cmp	r3, #9
 8004fee:	d969      	bls.n	80050c4 <_vfiprintf_r+0x1a0>
 8004ff0:	b360      	cbz	r0, 800504c <_vfiprintf_r+0x128>
 8004ff2:	e024      	b.n	800503e <_vfiprintf_r+0x11a>
 8004ff4:	4b50      	ldr	r3, [pc, #320]	; (8005138 <_vfiprintf_r+0x214>)
 8004ff6:	429c      	cmp	r4, r3
 8004ff8:	d101      	bne.n	8004ffe <_vfiprintf_r+0xda>
 8004ffa:	68b4      	ldr	r4, [r6, #8]
 8004ffc:	e7a2      	b.n	8004f44 <_vfiprintf_r+0x20>
 8004ffe:	4b4f      	ldr	r3, [pc, #316]	; (800513c <_vfiprintf_r+0x218>)
 8005000:	429c      	cmp	r4, r3
 8005002:	bf08      	it	eq
 8005004:	68f4      	ldreq	r4, [r6, #12]
 8005006:	e79d      	b.n	8004f44 <_vfiprintf_r+0x20>
 8005008:	4621      	mov	r1, r4
 800500a:	4630      	mov	r0, r6
 800500c:	f000 fae0 	bl	80055d0 <__swsetup_r>
 8005010:	2800      	cmp	r0, #0
 8005012:	d09d      	beq.n	8004f50 <_vfiprintf_r+0x2c>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	b01d      	add	sp, #116	; 0x74
 800501a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800501e:	46a8      	mov	r8, r5
 8005020:	e7a2      	b.n	8004f68 <_vfiprintf_r+0x44>
 8005022:	4a44      	ldr	r2, [pc, #272]	; (8005134 <_vfiprintf_r+0x210>)
 8005024:	4645      	mov	r5, r8
 8005026:	1a80      	subs	r0, r0, r2
 8005028:	fa0b f000 	lsl.w	r0, fp, r0
 800502c:	4318      	orrs	r0, r3
 800502e:	9004      	str	r0, [sp, #16]
 8005030:	e7be      	b.n	8004fb0 <_vfiprintf_r+0x8c>
 8005032:	9a03      	ldr	r2, [sp, #12]
 8005034:	1d11      	adds	r1, r2, #4
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	9103      	str	r1, [sp, #12]
 800503a:	2a00      	cmp	r2, #0
 800503c:	db01      	blt.n	8005042 <_vfiprintf_r+0x11e>
 800503e:	9207      	str	r2, [sp, #28]
 8005040:	e004      	b.n	800504c <_vfiprintf_r+0x128>
 8005042:	4252      	negs	r2, r2
 8005044:	f043 0302 	orr.w	r3, r3, #2
 8005048:	9207      	str	r2, [sp, #28]
 800504a:	9304      	str	r3, [sp, #16]
 800504c:	f898 3000 	ldrb.w	r3, [r8]
 8005050:	2b2e      	cmp	r3, #46	; 0x2e
 8005052:	d10e      	bne.n	8005072 <_vfiprintf_r+0x14e>
 8005054:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005058:	2b2a      	cmp	r3, #42	; 0x2a
 800505a:	d138      	bne.n	80050ce <_vfiprintf_r+0x1aa>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	f108 0802 	add.w	r8, r8, #2
 8005062:	1d1a      	adds	r2, r3, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	9203      	str	r2, [sp, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	bfb8      	it	lt
 800506c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005070:	9305      	str	r3, [sp, #20]
 8005072:	4d33      	ldr	r5, [pc, #204]	; (8005140 <_vfiprintf_r+0x21c>)
 8005074:	2203      	movs	r2, #3
 8005076:	f898 1000 	ldrb.w	r1, [r8]
 800507a:	4628      	mov	r0, r5
 800507c:	f000 fb5a 	bl	8005734 <memchr>
 8005080:	b140      	cbz	r0, 8005094 <_vfiprintf_r+0x170>
 8005082:	2340      	movs	r3, #64	; 0x40
 8005084:	1b40      	subs	r0, r0, r5
 8005086:	fa03 f000 	lsl.w	r0, r3, r0
 800508a:	9b04      	ldr	r3, [sp, #16]
 800508c:	f108 0801 	add.w	r8, r8, #1
 8005090:	4303      	orrs	r3, r0
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	f898 1000 	ldrb.w	r1, [r8]
 8005098:	2206      	movs	r2, #6
 800509a:	482a      	ldr	r0, [pc, #168]	; (8005144 <_vfiprintf_r+0x220>)
 800509c:	f108 0701 	add.w	r7, r8, #1
 80050a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050a4:	f000 fb46 	bl	8005734 <memchr>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d037      	beq.n	800511c <_vfiprintf_r+0x1f8>
 80050ac:	4b26      	ldr	r3, [pc, #152]	; (8005148 <_vfiprintf_r+0x224>)
 80050ae:	bb1b      	cbnz	r3, 80050f8 <_vfiprintf_r+0x1d4>
 80050b0:	9b03      	ldr	r3, [sp, #12]
 80050b2:	3307      	adds	r3, #7
 80050b4:	f023 0307 	bic.w	r3, r3, #7
 80050b8:	3308      	adds	r3, #8
 80050ba:	9303      	str	r3, [sp, #12]
 80050bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050be:	444b      	add	r3, r9
 80050c0:	9309      	str	r3, [sp, #36]	; 0x24
 80050c2:	e750      	b.n	8004f66 <_vfiprintf_r+0x42>
 80050c4:	fb05 3202 	mla	r2, r5, r2, r3
 80050c8:	2001      	movs	r0, #1
 80050ca:	4688      	mov	r8, r1
 80050cc:	e78a      	b.n	8004fe4 <_vfiprintf_r+0xc0>
 80050ce:	2300      	movs	r3, #0
 80050d0:	250a      	movs	r5, #10
 80050d2:	4619      	mov	r1, r3
 80050d4:	f108 0801 	add.w	r8, r8, #1
 80050d8:	9305      	str	r3, [sp, #20]
 80050da:	4640      	mov	r0, r8
 80050dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e0:	3a30      	subs	r2, #48	; 0x30
 80050e2:	2a09      	cmp	r2, #9
 80050e4:	d903      	bls.n	80050ee <_vfiprintf_r+0x1ca>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0c3      	beq.n	8005072 <_vfiprintf_r+0x14e>
 80050ea:	9105      	str	r1, [sp, #20]
 80050ec:	e7c1      	b.n	8005072 <_vfiprintf_r+0x14e>
 80050ee:	fb05 2101 	mla	r1, r5, r1, r2
 80050f2:	2301      	movs	r3, #1
 80050f4:	4680      	mov	r8, r0
 80050f6:	e7f0      	b.n	80050da <_vfiprintf_r+0x1b6>
 80050f8:	ab03      	add	r3, sp, #12
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4622      	mov	r2, r4
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <_vfiprintf_r+0x228>)
 8005100:	a904      	add	r1, sp, #16
 8005102:	4630      	mov	r0, r6
 8005104:	f3af 8000 	nop.w
 8005108:	f1b0 3fff 	cmp.w	r0, #4294967295
 800510c:	4681      	mov	r9, r0
 800510e:	d1d5      	bne.n	80050bc <_vfiprintf_r+0x198>
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	065b      	lsls	r3, r3, #25
 8005114:	f53f af7e 	bmi.w	8005014 <_vfiprintf_r+0xf0>
 8005118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800511a:	e77d      	b.n	8005018 <_vfiprintf_r+0xf4>
 800511c:	ab03      	add	r3, sp, #12
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	4622      	mov	r2, r4
 8005122:	4b0a      	ldr	r3, [pc, #40]	; (800514c <_vfiprintf_r+0x228>)
 8005124:	a904      	add	r1, sp, #16
 8005126:	4630      	mov	r0, r6
 8005128:	f000 f888 	bl	800523c <_printf_i>
 800512c:	e7ec      	b.n	8005108 <_vfiprintf_r+0x1e4>
 800512e:	bf00      	nop
 8005130:	080057fc 	.word	0x080057fc
 8005134:	0800583c 	.word	0x0800583c
 8005138:	0800581c 	.word	0x0800581c
 800513c:	080057dc 	.word	0x080057dc
 8005140:	08005842 	.word	0x08005842
 8005144:	08005846 	.word	0x08005846
 8005148:	00000000 	.word	0x00000000
 800514c:	08004eff 	.word	0x08004eff

08005150 <_printf_common>:
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	4691      	mov	r9, r2
 8005156:	461f      	mov	r7, r3
 8005158:	688a      	ldr	r2, [r1, #8]
 800515a:	690b      	ldr	r3, [r1, #16]
 800515c:	4606      	mov	r6, r0
 800515e:	4293      	cmp	r3, r2
 8005160:	bfb8      	it	lt
 8005162:	4613      	movlt	r3, r2
 8005164:	f8c9 3000 	str.w	r3, [r9]
 8005168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800516c:	460c      	mov	r4, r1
 800516e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005172:	b112      	cbz	r2, 800517a <_printf_common+0x2a>
 8005174:	3301      	adds	r3, #1
 8005176:	f8c9 3000 	str.w	r3, [r9]
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	0699      	lsls	r1, r3, #26
 800517e:	bf42      	ittt	mi
 8005180:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005184:	3302      	addmi	r3, #2
 8005186:	f8c9 3000 	strmi.w	r3, [r9]
 800518a:	6825      	ldr	r5, [r4, #0]
 800518c:	f015 0506 	ands.w	r5, r5, #6
 8005190:	d107      	bne.n	80051a2 <_printf_common+0x52>
 8005192:	f104 0a19 	add.w	sl, r4, #25
 8005196:	68e3      	ldr	r3, [r4, #12]
 8005198:	f8d9 2000 	ldr.w	r2, [r9]
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	42ab      	cmp	r3, r5
 80051a0:	dc29      	bgt.n	80051f6 <_printf_common+0xa6>
 80051a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051a6:	6822      	ldr	r2, [r4, #0]
 80051a8:	3300      	adds	r3, #0
 80051aa:	bf18      	it	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	0692      	lsls	r2, r2, #26
 80051b0:	d42e      	bmi.n	8005210 <_printf_common+0xc0>
 80051b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b6:	4639      	mov	r1, r7
 80051b8:	4630      	mov	r0, r6
 80051ba:	47c0      	blx	r8
 80051bc:	3001      	adds	r0, #1
 80051be:	d021      	beq.n	8005204 <_printf_common+0xb4>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	68e5      	ldr	r5, [r4, #12]
 80051c4:	f003 0306 	and.w	r3, r3, #6
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	bf18      	it	ne
 80051cc:	2500      	movne	r5, #0
 80051ce:	f8d9 2000 	ldr.w	r2, [r9]
 80051d2:	f04f 0900 	mov.w	r9, #0
 80051d6:	bf08      	it	eq
 80051d8:	1aad      	subeq	r5, r5, r2
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	6922      	ldr	r2, [r4, #16]
 80051de:	bf08      	it	eq
 80051e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e4:	4293      	cmp	r3, r2
 80051e6:	bfc4      	itt	gt
 80051e8:	1a9b      	subgt	r3, r3, r2
 80051ea:	18ed      	addgt	r5, r5, r3
 80051ec:	341a      	adds	r4, #26
 80051ee:	454d      	cmp	r5, r9
 80051f0:	d11a      	bne.n	8005228 <_printf_common+0xd8>
 80051f2:	2000      	movs	r0, #0
 80051f4:	e008      	b.n	8005208 <_printf_common+0xb8>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4652      	mov	r2, sl
 80051fa:	4639      	mov	r1, r7
 80051fc:	4630      	mov	r0, r6
 80051fe:	47c0      	blx	r8
 8005200:	3001      	adds	r0, #1
 8005202:	d103      	bne.n	800520c <_printf_common+0xbc>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	3501      	adds	r5, #1
 800520e:	e7c2      	b.n	8005196 <_printf_common+0x46>
 8005210:	2030      	movs	r0, #48	; 0x30
 8005212:	18e1      	adds	r1, r4, r3
 8005214:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800521e:	4422      	add	r2, r4
 8005220:	3302      	adds	r3, #2
 8005222:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005226:	e7c4      	b.n	80051b2 <_printf_common+0x62>
 8005228:	2301      	movs	r3, #1
 800522a:	4622      	mov	r2, r4
 800522c:	4639      	mov	r1, r7
 800522e:	4630      	mov	r0, r6
 8005230:	47c0      	blx	r8
 8005232:	3001      	adds	r0, #1
 8005234:	d0e6      	beq.n	8005204 <_printf_common+0xb4>
 8005236:	f109 0901 	add.w	r9, r9, #1
 800523a:	e7d8      	b.n	80051ee <_printf_common+0x9e>

0800523c <_printf_i>:
 800523c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005240:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005244:	460c      	mov	r4, r1
 8005246:	7e09      	ldrb	r1, [r1, #24]
 8005248:	b085      	sub	sp, #20
 800524a:	296e      	cmp	r1, #110	; 0x6e
 800524c:	4617      	mov	r7, r2
 800524e:	4606      	mov	r6, r0
 8005250:	4698      	mov	r8, r3
 8005252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005254:	f000 80b3 	beq.w	80053be <_printf_i+0x182>
 8005258:	d822      	bhi.n	80052a0 <_printf_i+0x64>
 800525a:	2963      	cmp	r1, #99	; 0x63
 800525c:	d036      	beq.n	80052cc <_printf_i+0x90>
 800525e:	d80a      	bhi.n	8005276 <_printf_i+0x3a>
 8005260:	2900      	cmp	r1, #0
 8005262:	f000 80b9 	beq.w	80053d8 <_printf_i+0x19c>
 8005266:	2958      	cmp	r1, #88	; 0x58
 8005268:	f000 8083 	beq.w	8005372 <_printf_i+0x136>
 800526c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005270:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005274:	e032      	b.n	80052dc <_printf_i+0xa0>
 8005276:	2964      	cmp	r1, #100	; 0x64
 8005278:	d001      	beq.n	800527e <_printf_i+0x42>
 800527a:	2969      	cmp	r1, #105	; 0x69
 800527c:	d1f6      	bne.n	800526c <_printf_i+0x30>
 800527e:	6820      	ldr	r0, [r4, #0]
 8005280:	6813      	ldr	r3, [r2, #0]
 8005282:	0605      	lsls	r5, r0, #24
 8005284:	f103 0104 	add.w	r1, r3, #4
 8005288:	d52a      	bpl.n	80052e0 <_printf_i+0xa4>
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6011      	str	r1, [r2, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	da03      	bge.n	800529a <_printf_i+0x5e>
 8005292:	222d      	movs	r2, #45	; 0x2d
 8005294:	425b      	negs	r3, r3
 8005296:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800529a:	486f      	ldr	r0, [pc, #444]	; (8005458 <_printf_i+0x21c>)
 800529c:	220a      	movs	r2, #10
 800529e:	e039      	b.n	8005314 <_printf_i+0xd8>
 80052a0:	2973      	cmp	r1, #115	; 0x73
 80052a2:	f000 809d 	beq.w	80053e0 <_printf_i+0x1a4>
 80052a6:	d808      	bhi.n	80052ba <_printf_i+0x7e>
 80052a8:	296f      	cmp	r1, #111	; 0x6f
 80052aa:	d020      	beq.n	80052ee <_printf_i+0xb2>
 80052ac:	2970      	cmp	r1, #112	; 0x70
 80052ae:	d1dd      	bne.n	800526c <_printf_i+0x30>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	f043 0320 	orr.w	r3, r3, #32
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	e003      	b.n	80052c2 <_printf_i+0x86>
 80052ba:	2975      	cmp	r1, #117	; 0x75
 80052bc:	d017      	beq.n	80052ee <_printf_i+0xb2>
 80052be:	2978      	cmp	r1, #120	; 0x78
 80052c0:	d1d4      	bne.n	800526c <_printf_i+0x30>
 80052c2:	2378      	movs	r3, #120	; 0x78
 80052c4:	4865      	ldr	r0, [pc, #404]	; (800545c <_printf_i+0x220>)
 80052c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ca:	e055      	b.n	8005378 <_printf_i+0x13c>
 80052cc:	6813      	ldr	r3, [r2, #0]
 80052ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d2:	1d19      	adds	r1, r3, #4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6011      	str	r1, [r2, #0]
 80052d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052dc:	2301      	movs	r3, #1
 80052de:	e08c      	b.n	80053fa <_printf_i+0x1be>
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052e6:	6011      	str	r1, [r2, #0]
 80052e8:	bf18      	it	ne
 80052ea:	b21b      	sxthne	r3, r3
 80052ec:	e7cf      	b.n	800528e <_printf_i+0x52>
 80052ee:	6813      	ldr	r3, [r2, #0]
 80052f0:	6825      	ldr	r5, [r4, #0]
 80052f2:	1d18      	adds	r0, r3, #4
 80052f4:	6010      	str	r0, [r2, #0]
 80052f6:	0628      	lsls	r0, r5, #24
 80052f8:	d501      	bpl.n	80052fe <_printf_i+0xc2>
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	e002      	b.n	8005304 <_printf_i+0xc8>
 80052fe:	0668      	lsls	r0, r5, #25
 8005300:	d5fb      	bpl.n	80052fa <_printf_i+0xbe>
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	296f      	cmp	r1, #111	; 0x6f
 8005306:	bf14      	ite	ne
 8005308:	220a      	movne	r2, #10
 800530a:	2208      	moveq	r2, #8
 800530c:	4852      	ldr	r0, [pc, #328]	; (8005458 <_printf_i+0x21c>)
 800530e:	2100      	movs	r1, #0
 8005310:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005314:	6865      	ldr	r5, [r4, #4]
 8005316:	2d00      	cmp	r5, #0
 8005318:	60a5      	str	r5, [r4, #8]
 800531a:	f2c0 8095 	blt.w	8005448 <_printf_i+0x20c>
 800531e:	6821      	ldr	r1, [r4, #0]
 8005320:	f021 0104 	bic.w	r1, r1, #4
 8005324:	6021      	str	r1, [r4, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d13d      	bne.n	80053a6 <_printf_i+0x16a>
 800532a:	2d00      	cmp	r5, #0
 800532c:	f040 808e 	bne.w	800544c <_printf_i+0x210>
 8005330:	4665      	mov	r5, ip
 8005332:	2a08      	cmp	r2, #8
 8005334:	d10b      	bne.n	800534e <_printf_i+0x112>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	07db      	lsls	r3, r3, #31
 800533a:	d508      	bpl.n	800534e <_printf_i+0x112>
 800533c:	6923      	ldr	r3, [r4, #16]
 800533e:	6862      	ldr	r2, [r4, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	bfde      	ittt	le
 8005344:	2330      	movle	r3, #48	; 0x30
 8005346:	f805 3c01 	strble.w	r3, [r5, #-1]
 800534a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800534e:	ebac 0305 	sub.w	r3, ip, r5
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	f8cd 8000 	str.w	r8, [sp]
 8005358:	463b      	mov	r3, r7
 800535a:	aa03      	add	r2, sp, #12
 800535c:	4621      	mov	r1, r4
 800535e:	4630      	mov	r0, r6
 8005360:	f7ff fef6 	bl	8005150 <_printf_common>
 8005364:	3001      	adds	r0, #1
 8005366:	d14d      	bne.n	8005404 <_printf_i+0x1c8>
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	b005      	add	sp, #20
 800536e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005372:	4839      	ldr	r0, [pc, #228]	; (8005458 <_printf_i+0x21c>)
 8005374:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005378:	6813      	ldr	r3, [r2, #0]
 800537a:	6821      	ldr	r1, [r4, #0]
 800537c:	1d1d      	adds	r5, r3, #4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6015      	str	r5, [r2, #0]
 8005382:	060a      	lsls	r2, r1, #24
 8005384:	d50b      	bpl.n	800539e <_printf_i+0x162>
 8005386:	07ca      	lsls	r2, r1, #31
 8005388:	bf44      	itt	mi
 800538a:	f041 0120 	orrmi.w	r1, r1, #32
 800538e:	6021      	strmi	r1, [r4, #0]
 8005390:	b91b      	cbnz	r3, 800539a <_printf_i+0x15e>
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	f022 0220 	bic.w	r2, r2, #32
 8005398:	6022      	str	r2, [r4, #0]
 800539a:	2210      	movs	r2, #16
 800539c:	e7b7      	b.n	800530e <_printf_i+0xd2>
 800539e:	064d      	lsls	r5, r1, #25
 80053a0:	bf48      	it	mi
 80053a2:	b29b      	uxthmi	r3, r3
 80053a4:	e7ef      	b.n	8005386 <_printf_i+0x14a>
 80053a6:	4665      	mov	r5, ip
 80053a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80053ac:	fb02 3311 	mls	r3, r2, r1, r3
 80053b0:	5cc3      	ldrb	r3, [r0, r3]
 80053b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053b6:	460b      	mov	r3, r1
 80053b8:	2900      	cmp	r1, #0
 80053ba:	d1f5      	bne.n	80053a8 <_printf_i+0x16c>
 80053bc:	e7b9      	b.n	8005332 <_printf_i+0xf6>
 80053be:	6813      	ldr	r3, [r2, #0]
 80053c0:	6825      	ldr	r5, [r4, #0]
 80053c2:	1d18      	adds	r0, r3, #4
 80053c4:	6961      	ldr	r1, [r4, #20]
 80053c6:	6010      	str	r0, [r2, #0]
 80053c8:	0628      	lsls	r0, r5, #24
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	d501      	bpl.n	80053d2 <_printf_i+0x196>
 80053ce:	6019      	str	r1, [r3, #0]
 80053d0:	e002      	b.n	80053d8 <_printf_i+0x19c>
 80053d2:	066a      	lsls	r2, r5, #25
 80053d4:	d5fb      	bpl.n	80053ce <_printf_i+0x192>
 80053d6:	8019      	strh	r1, [r3, #0]
 80053d8:	2300      	movs	r3, #0
 80053da:	4665      	mov	r5, ip
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	e7b9      	b.n	8005354 <_printf_i+0x118>
 80053e0:	6813      	ldr	r3, [r2, #0]
 80053e2:	1d19      	adds	r1, r3, #4
 80053e4:	6011      	str	r1, [r2, #0]
 80053e6:	681d      	ldr	r5, [r3, #0]
 80053e8:	6862      	ldr	r2, [r4, #4]
 80053ea:	2100      	movs	r1, #0
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f9a1 	bl	8005734 <memchr>
 80053f2:	b108      	cbz	r0, 80053f8 <_printf_i+0x1bc>
 80053f4:	1b40      	subs	r0, r0, r5
 80053f6:	6060      	str	r0, [r4, #4]
 80053f8:	6863      	ldr	r3, [r4, #4]
 80053fa:	6123      	str	r3, [r4, #16]
 80053fc:	2300      	movs	r3, #0
 80053fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005402:	e7a7      	b.n	8005354 <_printf_i+0x118>
 8005404:	6923      	ldr	r3, [r4, #16]
 8005406:	462a      	mov	r2, r5
 8005408:	4639      	mov	r1, r7
 800540a:	4630      	mov	r0, r6
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d0aa      	beq.n	8005368 <_printf_i+0x12c>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	079b      	lsls	r3, r3, #30
 8005416:	d413      	bmi.n	8005440 <_printf_i+0x204>
 8005418:	68e0      	ldr	r0, [r4, #12]
 800541a:	9b03      	ldr	r3, [sp, #12]
 800541c:	4298      	cmp	r0, r3
 800541e:	bfb8      	it	lt
 8005420:	4618      	movlt	r0, r3
 8005422:	e7a3      	b.n	800536c <_printf_i+0x130>
 8005424:	2301      	movs	r3, #1
 8005426:	464a      	mov	r2, r9
 8005428:	4639      	mov	r1, r7
 800542a:	4630      	mov	r0, r6
 800542c:	47c0      	blx	r8
 800542e:	3001      	adds	r0, #1
 8005430:	d09a      	beq.n	8005368 <_printf_i+0x12c>
 8005432:	3501      	adds	r5, #1
 8005434:	68e3      	ldr	r3, [r4, #12]
 8005436:	9a03      	ldr	r2, [sp, #12]
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	42ab      	cmp	r3, r5
 800543c:	dcf2      	bgt.n	8005424 <_printf_i+0x1e8>
 800543e:	e7eb      	b.n	8005418 <_printf_i+0x1dc>
 8005440:	2500      	movs	r5, #0
 8005442:	f104 0919 	add.w	r9, r4, #25
 8005446:	e7f5      	b.n	8005434 <_printf_i+0x1f8>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1ac      	bne.n	80053a6 <_printf_i+0x16a>
 800544c:	7803      	ldrb	r3, [r0, #0]
 800544e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005452:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005456:	e76c      	b.n	8005332 <_printf_i+0xf6>
 8005458:	0800584d 	.word	0x0800584d
 800545c:	0800585e 	.word	0x0800585e

08005460 <_sbrk_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	2300      	movs	r3, #0
 8005464:	4c05      	ldr	r4, [pc, #20]	; (800547c <_sbrk_r+0x1c>)
 8005466:	4605      	mov	r5, r0
 8005468:	4608      	mov	r0, r1
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	f7fe f80c 	bl	8003488 <_sbrk>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_sbrk_r+0x1a>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	b103      	cbz	r3, 800547a <_sbrk_r+0x1a>
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	200000c0 	.word	0x200000c0

08005480 <__sread>:
 8005480:	b510      	push	{r4, lr}
 8005482:	460c      	mov	r4, r1
 8005484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005488:	f000 f964 	bl	8005754 <_read_r>
 800548c:	2800      	cmp	r0, #0
 800548e:	bfab      	itete	ge
 8005490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005492:	89a3      	ldrhlt	r3, [r4, #12]
 8005494:	181b      	addge	r3, r3, r0
 8005496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800549a:	bfac      	ite	ge
 800549c:	6563      	strge	r3, [r4, #84]	; 0x54
 800549e:	81a3      	strhlt	r3, [r4, #12]
 80054a0:	bd10      	pop	{r4, pc}

080054a2 <__swrite>:
 80054a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	461f      	mov	r7, r3
 80054a8:	898b      	ldrh	r3, [r1, #12]
 80054aa:	4605      	mov	r5, r0
 80054ac:	05db      	lsls	r3, r3, #23
 80054ae:	460c      	mov	r4, r1
 80054b0:	4616      	mov	r6, r2
 80054b2:	d505      	bpl.n	80054c0 <__swrite+0x1e>
 80054b4:	2302      	movs	r3, #2
 80054b6:	2200      	movs	r2, #0
 80054b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054bc:	f000 f928 	bl	8005710 <_lseek_r>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	4632      	mov	r2, r6
 80054c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ce:	463b      	mov	r3, r7
 80054d0:	4628      	mov	r0, r5
 80054d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054d6:	f000 b869 	b.w	80055ac <_write_r>

080054da <__sseek>:
 80054da:	b510      	push	{r4, lr}
 80054dc:	460c      	mov	r4, r1
 80054de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e2:	f000 f915 	bl	8005710 <_lseek_r>
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	bf15      	itete	ne
 80054ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054f6:	81a3      	strheq	r3, [r4, #12]
 80054f8:	bf18      	it	ne
 80054fa:	81a3      	strhne	r3, [r4, #12]
 80054fc:	bd10      	pop	{r4, pc}

080054fe <__sclose>:
 80054fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005502:	f000 b8d3 	b.w	80056ac <_close_r>
	...

08005508 <__swbuf_r>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	460e      	mov	r6, r1
 800550c:	4614      	mov	r4, r2
 800550e:	4605      	mov	r5, r0
 8005510:	b118      	cbz	r0, 800551a <__swbuf_r+0x12>
 8005512:	6983      	ldr	r3, [r0, #24]
 8005514:	b90b      	cbnz	r3, 800551a <__swbuf_r+0x12>
 8005516:	f7ff fb41 	bl	8004b9c <__sinit>
 800551a:	4b21      	ldr	r3, [pc, #132]	; (80055a0 <__swbuf_r+0x98>)
 800551c:	429c      	cmp	r4, r3
 800551e:	d12a      	bne.n	8005576 <__swbuf_r+0x6e>
 8005520:	686c      	ldr	r4, [r5, #4]
 8005522:	69a3      	ldr	r3, [r4, #24]
 8005524:	60a3      	str	r3, [r4, #8]
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	071a      	lsls	r2, r3, #28
 800552a:	d52e      	bpl.n	800558a <__swbuf_r+0x82>
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	b363      	cbz	r3, 800558a <__swbuf_r+0x82>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	6820      	ldr	r0, [r4, #0]
 8005534:	b2f6      	uxtb	r6, r6
 8005536:	1ac0      	subs	r0, r0, r3
 8005538:	6963      	ldr	r3, [r4, #20]
 800553a:	4637      	mov	r7, r6
 800553c:	4283      	cmp	r3, r0
 800553e:	dc04      	bgt.n	800554a <__swbuf_r+0x42>
 8005540:	4621      	mov	r1, r4
 8005542:	4628      	mov	r0, r5
 8005544:	f7ff fac0 	bl	8004ac8 <_fflush_r>
 8005548:	bb28      	cbnz	r0, 8005596 <__swbuf_r+0x8e>
 800554a:	68a3      	ldr	r3, [r4, #8]
 800554c:	3001      	adds	r0, #1
 800554e:	3b01      	subs	r3, #1
 8005550:	60a3      	str	r3, [r4, #8]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	6022      	str	r2, [r4, #0]
 8005558:	701e      	strb	r6, [r3, #0]
 800555a:	6963      	ldr	r3, [r4, #20]
 800555c:	4283      	cmp	r3, r0
 800555e:	d004      	beq.n	800556a <__swbuf_r+0x62>
 8005560:	89a3      	ldrh	r3, [r4, #12]
 8005562:	07db      	lsls	r3, r3, #31
 8005564:	d519      	bpl.n	800559a <__swbuf_r+0x92>
 8005566:	2e0a      	cmp	r6, #10
 8005568:	d117      	bne.n	800559a <__swbuf_r+0x92>
 800556a:	4621      	mov	r1, r4
 800556c:	4628      	mov	r0, r5
 800556e:	f7ff faab 	bl	8004ac8 <_fflush_r>
 8005572:	b190      	cbz	r0, 800559a <__swbuf_r+0x92>
 8005574:	e00f      	b.n	8005596 <__swbuf_r+0x8e>
 8005576:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <__swbuf_r+0x9c>)
 8005578:	429c      	cmp	r4, r3
 800557a:	d101      	bne.n	8005580 <__swbuf_r+0x78>
 800557c:	68ac      	ldr	r4, [r5, #8]
 800557e:	e7d0      	b.n	8005522 <__swbuf_r+0x1a>
 8005580:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <__swbuf_r+0xa0>)
 8005582:	429c      	cmp	r4, r3
 8005584:	bf08      	it	eq
 8005586:	68ec      	ldreq	r4, [r5, #12]
 8005588:	e7cb      	b.n	8005522 <__swbuf_r+0x1a>
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 f81f 	bl	80055d0 <__swsetup_r>
 8005592:	2800      	cmp	r0, #0
 8005594:	d0cc      	beq.n	8005530 <__swbuf_r+0x28>
 8005596:	f04f 37ff 	mov.w	r7, #4294967295
 800559a:	4638      	mov	r0, r7
 800559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559e:	bf00      	nop
 80055a0:	080057fc 	.word	0x080057fc
 80055a4:	0800581c 	.word	0x0800581c
 80055a8:	080057dc 	.word	0x080057dc

080055ac <_write_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4605      	mov	r5, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	2200      	movs	r2, #0
 80055b6:	4c05      	ldr	r4, [pc, #20]	; (80055cc <_write_r+0x20>)
 80055b8:	6022      	str	r2, [r4, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f7fd ff17 	bl	80033ee <_write>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_write_r+0x1e>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_write_r+0x1e>
 80055c8:	602b      	str	r3, [r5, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	200000c0 	.word	0x200000c0

080055d0 <__swsetup_r>:
 80055d0:	4b32      	ldr	r3, [pc, #200]	; (800569c <__swsetup_r+0xcc>)
 80055d2:	b570      	push	{r4, r5, r6, lr}
 80055d4:	681d      	ldr	r5, [r3, #0]
 80055d6:	4606      	mov	r6, r0
 80055d8:	460c      	mov	r4, r1
 80055da:	b125      	cbz	r5, 80055e6 <__swsetup_r+0x16>
 80055dc:	69ab      	ldr	r3, [r5, #24]
 80055de:	b913      	cbnz	r3, 80055e6 <__swsetup_r+0x16>
 80055e0:	4628      	mov	r0, r5
 80055e2:	f7ff fadb 	bl	8004b9c <__sinit>
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <__swsetup_r+0xd0>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d10f      	bne.n	800560c <__swsetup_r+0x3c>
 80055ec:	686c      	ldr	r4, [r5, #4]
 80055ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	0715      	lsls	r5, r2, #28
 80055f6:	d42c      	bmi.n	8005652 <__swsetup_r+0x82>
 80055f8:	06d0      	lsls	r0, r2, #27
 80055fa:	d411      	bmi.n	8005620 <__swsetup_r+0x50>
 80055fc:	2209      	movs	r2, #9
 80055fe:	6032      	str	r2, [r6, #0]
 8005600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	f04f 30ff 	mov.w	r0, #4294967295
 800560a:	e03e      	b.n	800568a <__swsetup_r+0xba>
 800560c:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <__swsetup_r+0xd4>)
 800560e:	429c      	cmp	r4, r3
 8005610:	d101      	bne.n	8005616 <__swsetup_r+0x46>
 8005612:	68ac      	ldr	r4, [r5, #8]
 8005614:	e7eb      	b.n	80055ee <__swsetup_r+0x1e>
 8005616:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <__swsetup_r+0xd8>)
 8005618:	429c      	cmp	r4, r3
 800561a:	bf08      	it	eq
 800561c:	68ec      	ldreq	r4, [r5, #12]
 800561e:	e7e6      	b.n	80055ee <__swsetup_r+0x1e>
 8005620:	0751      	lsls	r1, r2, #29
 8005622:	d512      	bpl.n	800564a <__swsetup_r+0x7a>
 8005624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005626:	b141      	cbz	r1, 800563a <__swsetup_r+0x6a>
 8005628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800562c:	4299      	cmp	r1, r3
 800562e:	d002      	beq.n	8005636 <__swsetup_r+0x66>
 8005630:	4630      	mov	r0, r6
 8005632:	f7ff fba9 	bl	8004d88 <_free_r>
 8005636:	2300      	movs	r3, #0
 8005638:	6363      	str	r3, [r4, #52]	; 0x34
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	2300      	movs	r3, #0
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	f043 0308 	orr.w	r3, r3, #8
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	b94b      	cbnz	r3, 800566a <__swsetup_r+0x9a>
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800565c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005660:	d003      	beq.n	800566a <__swsetup_r+0x9a>
 8005662:	4621      	mov	r1, r4
 8005664:	4630      	mov	r0, r6
 8005666:	f7ff fb47 	bl	8004cf8 <__smakebuf_r>
 800566a:	89a2      	ldrh	r2, [r4, #12]
 800566c:	f012 0301 	ands.w	r3, r2, #1
 8005670:	d00c      	beq.n	800568c <__swsetup_r+0xbc>
 8005672:	2300      	movs	r3, #0
 8005674:	60a3      	str	r3, [r4, #8]
 8005676:	6963      	ldr	r3, [r4, #20]
 8005678:	425b      	negs	r3, r3
 800567a:	61a3      	str	r3, [r4, #24]
 800567c:	6923      	ldr	r3, [r4, #16]
 800567e:	b953      	cbnz	r3, 8005696 <__swsetup_r+0xc6>
 8005680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005684:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005688:	d1ba      	bne.n	8005600 <__swsetup_r+0x30>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	0792      	lsls	r2, r2, #30
 800568e:	bf58      	it	pl
 8005690:	6963      	ldrpl	r3, [r4, #20]
 8005692:	60a3      	str	r3, [r4, #8]
 8005694:	e7f2      	b.n	800567c <__swsetup_r+0xac>
 8005696:	2000      	movs	r0, #0
 8005698:	e7f7      	b.n	800568a <__swsetup_r+0xba>
 800569a:	bf00      	nop
 800569c:	20000018 	.word	0x20000018
 80056a0:	080057fc 	.word	0x080057fc
 80056a4:	0800581c 	.word	0x0800581c
 80056a8:	080057dc 	.word	0x080057dc

080056ac <_close_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	2300      	movs	r3, #0
 80056b0:	4c05      	ldr	r4, [pc, #20]	; (80056c8 <_close_r+0x1c>)
 80056b2:	4605      	mov	r5, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	f7fd feb5 	bl	8003426 <_close>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d102      	bne.n	80056c6 <_close_r+0x1a>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	b103      	cbz	r3, 80056c6 <_close_r+0x1a>
 80056c4:	602b      	str	r3, [r5, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	200000c0 	.word	0x200000c0

080056cc <_fstat_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	2300      	movs	r3, #0
 80056d0:	4c06      	ldr	r4, [pc, #24]	; (80056ec <_fstat_r+0x20>)
 80056d2:	4605      	mov	r5, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	f7fd feaf 	bl	800343c <_fstat>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d102      	bne.n	80056e8 <_fstat_r+0x1c>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	b103      	cbz	r3, 80056e8 <_fstat_r+0x1c>
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	bd38      	pop	{r3, r4, r5, pc}
 80056ea:	bf00      	nop
 80056ec:	200000c0 	.word	0x200000c0

080056f0 <_isatty_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	2300      	movs	r3, #0
 80056f4:	4c05      	ldr	r4, [pc, #20]	; (800570c <_isatty_r+0x1c>)
 80056f6:	4605      	mov	r5, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	f7fd fead 	bl	800345a <_isatty>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_isatty_r+0x1a>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	b103      	cbz	r3, 800570a <_isatty_r+0x1a>
 8005708:	602b      	str	r3, [r5, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	200000c0 	.word	0x200000c0

08005710 <_lseek_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4605      	mov	r5, r0
 8005714:	4608      	mov	r0, r1
 8005716:	4611      	mov	r1, r2
 8005718:	2200      	movs	r2, #0
 800571a:	4c05      	ldr	r4, [pc, #20]	; (8005730 <_lseek_r+0x20>)
 800571c:	6022      	str	r2, [r4, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f7fd fea5 	bl	800346e <_lseek>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_lseek_r+0x1e>
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	b103      	cbz	r3, 800572e <_lseek_r+0x1e>
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	200000c0 	.word	0x200000c0

08005734 <memchr>:
 8005734:	b510      	push	{r4, lr}
 8005736:	b2c9      	uxtb	r1, r1
 8005738:	4402      	add	r2, r0
 800573a:	4290      	cmp	r0, r2
 800573c:	4603      	mov	r3, r0
 800573e:	d101      	bne.n	8005744 <memchr+0x10>
 8005740:	2300      	movs	r3, #0
 8005742:	e003      	b.n	800574c <memchr+0x18>
 8005744:	781c      	ldrb	r4, [r3, #0]
 8005746:	3001      	adds	r0, #1
 8005748:	428c      	cmp	r4, r1
 800574a:	d1f6      	bne.n	800573a <memchr+0x6>
 800574c:	4618      	mov	r0, r3
 800574e:	bd10      	pop	{r4, pc}

08005750 <__malloc_lock>:
 8005750:	4770      	bx	lr

08005752 <__malloc_unlock>:
 8005752:	4770      	bx	lr

08005754 <_read_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4605      	mov	r5, r0
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	2200      	movs	r2, #0
 800575e:	4c05      	ldr	r4, [pc, #20]	; (8005774 <_read_r+0x20>)
 8005760:	6022      	str	r2, [r4, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	f7fd fe26 	bl	80033b4 <_read>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_read_r+0x1e>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	b103      	cbz	r3, 8005772 <_read_r+0x1e>
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	200000c0 	.word	0x200000c0

08005778 <_init>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr

08005784 <_fini>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr


Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005368  08005368  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005368  08005368  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005368  08005368  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000006c  080053dc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080053dc  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e7a  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ce9  00000000  00000000  00029f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b18  00000000  00000000  0002bbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002c710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015835  00000000  00000000  0002d140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d75  00000000  00000000  00042975  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dc13  00000000  00000000  000496ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b72fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e8  00000000  00000000  000b7378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080052ac 	.word	0x080052ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080052ac 	.word	0x080052ac

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	; 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009f8:	f1a2 0201 	sub.w	r2, r2, #1
 80009fc:	d1ed      	bne.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_fmul>:
 8000b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b60:	bf1e      	ittt	ne
 8000b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b66:	ea92 0f0c 	teqne	r2, ip
 8000b6a:	ea93 0f0c 	teqne	r3, ip
 8000b6e:	d06f      	beq.n	8000c50 <__aeabi_fmul+0xf8>
 8000b70:	441a      	add	r2, r3
 8000b72:	ea80 0c01 	eor.w	ip, r0, r1
 8000b76:	0240      	lsls	r0, r0, #9
 8000b78:	bf18      	it	ne
 8000b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7e:	d01e      	beq.n	8000bbe <__aeabi_fmul+0x66>
 8000b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b98:	bf3e      	ittt	cc
 8000b9a:	0049      	lslcc	r1, r1, #1
 8000b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	ea40 0001 	orr.w	r0, r0, r1
 8000ba6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000baa:	2afd      	cmp	r2, #253	; 0xfd
 8000bac:	d81d      	bhi.n	8000bea <__aeabi_fmul+0x92>
 8000bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	4770      	bx	lr
 8000bbe:	f090 0f00 	teq	r0, #0
 8000bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bc6:	bf08      	it	eq
 8000bc8:	0249      	lsleq	r1, r1, #9
 8000bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd2:	3a7f      	subs	r2, #127	; 0x7f
 8000bd4:	bfc2      	ittt	gt
 8000bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bde:	4770      	bxgt	lr
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	dc5d      	bgt.n	8000ca8 <__aeabi_fmul+0x150>
 8000bec:	f112 0f19 	cmn.w	r2, #25
 8000bf0:	bfdc      	itt	le
 8000bf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bxle	lr
 8000bf8:	f1c2 0200 	rsb	r2, r2, #0
 8000bfc:	0041      	lsls	r1, r0, #1
 8000bfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000c02:	f1c2 0220 	rsb	r2, r2, #32
 8000c06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0e:	f140 0000 	adc.w	r0, r0, #0
 8000c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c16:	bf08      	it	eq
 8000c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1c:	4770      	bx	lr
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fmul+0xce>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fmul+0xe6>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e78f      	b.n	8000b70 <__aeabi_fmul+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	bf18      	it	ne
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d00a      	beq.n	8000c76 <__aeabi_fmul+0x11e>
 8000c60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c64:	bf18      	it	ne
 8000c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c6a:	d1d8      	bne.n	8000c1e <__aeabi_fmul+0xc6>
 8000c6c:	ea80 0001 	eor.w	r0, r0, r1
 8000c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f090 0f00 	teq	r0, #0
 8000c7a:	bf17      	itett	ne
 8000c7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c80:	4608      	moveq	r0, r1
 8000c82:	f091 0f00 	teqne	r1, #0
 8000c86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c8a:	d014      	beq.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c8c:	ea92 0f0c 	teq	r2, ip
 8000c90:	d101      	bne.n	8000c96 <__aeabi_fmul+0x13e>
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	d10f      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c96:	ea93 0f0c 	teq	r3, ip
 8000c9a:	d103      	bne.n	8000ca4 <__aeabi_fmul+0x14c>
 8000c9c:	024b      	lsls	r3, r1, #9
 8000c9e:	bf18      	it	ne
 8000ca0:	4608      	movne	r0, r1
 8000ca2:	d108      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000ca4:	ea80 0001 	eor.w	r0, r0, r1
 8000ca8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_fdiv>:
 8000cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc8:	bf1e      	ittt	ne
 8000cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cce:	ea92 0f0c 	teqne	r2, ip
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d069      	beq.n	8000dac <__aeabi_fdiv+0xec>
 8000cd8:	eba2 0203 	sub.w	r2, r2, r3
 8000cdc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce6:	d037      	beq.n	8000d58 <__aeabi_fdiv+0x98>
 8000ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	bf38      	it	cc
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d06:	428b      	cmp	r3, r1
 8000d08:	bf24      	itt	cs
 8000d0a:	1a5b      	subcs	r3, r3, r1
 8000d0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d14:	bf24      	itt	cs
 8000d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d22:	bf24      	itt	cs
 8000d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d30:	bf24      	itt	cs
 8000d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d42:	d1e0      	bne.n	8000d06 <__aeabi_fdiv+0x46>
 8000d44:	2afd      	cmp	r2, #253	; 0xfd
 8000d46:	f63f af50 	bhi.w	8000bea <__aeabi_fmul+0x92>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d60:	327f      	adds	r2, #127	; 0x7f
 8000d62:	bfc2      	ittt	gt
 8000d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6c:	4770      	bxgt	lr
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	3a01      	subs	r2, #1
 8000d78:	e737      	b.n	8000bea <__aeabi_fmul+0x92>
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fdiv+0xc2>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fdiv+0xda>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e795      	b.n	8000cd8 <__aeabi_fdiv+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	d108      	bne.n	8000dc8 <__aeabi_fdiv+0x108>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	f47f af7d 	bne.w	8000cb6 <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	f47f af70 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e776      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	d104      	bne.n	8000dd8 <__aeabi_fdiv+0x118>
 8000dce:	024b      	lsls	r3, r1, #9
 8000dd0:	f43f af4c 	beq.w	8000c6c <__aeabi_fmul+0x114>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e76e      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	d1ca      	bne.n	8000d7a <__aeabi_fdiv+0xba>
 8000de4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000de8:	f47f af5c 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df0:	f47f af3c 	bne.w	8000c6c <__aeabi_fmul+0x114>
 8000df4:	e75f      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000df6:	bf00      	nop

08000df8 <__gesf2>:
 8000df8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dfc:	e006      	b.n	8000e0c <__cmpsf2+0x4>
 8000dfe:	bf00      	nop

08000e00 <__lesf2>:
 8000e00:	f04f 0c01 	mov.w	ip, #1
 8000e04:	e002      	b.n	8000e0c <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__cmpsf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d011      	beq.n	8000e48 <__cmpsf2+0x40>
 8000e24:	b001      	add	sp, #4
 8000e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2a:	bf18      	it	ne
 8000e2c:	ea90 0f01 	teqne	r0, r1
 8000e30:	bf58      	it	pl
 8000e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e36:	bf88      	it	hi
 8000e38:	17c8      	asrhi	r0, r1, #31
 8000e3a:	bf38      	it	cc
 8000e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e40:	bf18      	it	ne
 8000e42:	f040 0001 	orrne.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e4c:	d102      	bne.n	8000e54 <__cmpsf2+0x4c>
 8000e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e52:	d105      	bne.n	8000e60 <__cmpsf2+0x58>
 8000e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e58:	d1e4      	bne.n	8000e24 <__cmpsf2+0x1c>
 8000e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5e:	d0e1      	beq.n	8000e24 <__cmpsf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cfrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	e7ff      	b.n	8000e70 <__aeabi_cfcmpeq>

08000e70 <__aeabi_cfcmpeq>:
 8000e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e72:	f7ff ffc9 	bl	8000e08 <__cmpsf2>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	bf48      	it	mi
 8000e7a:	f110 0f00 	cmnmi.w	r0, #0
 8000e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e80 <__aeabi_fcmpeq>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff fff4 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e88:	bf0c      	ite	eq
 8000e8a:	2001      	moveq	r0, #1
 8000e8c:	2000      	movne	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_fcmplt>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff ffea 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e9c:	bf34      	ite	cc
 8000e9e:	2001      	movcc	r0, #1
 8000ea0:	2000      	movcs	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmple>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffe0 	bl	8000e70 <__aeabi_cfcmpeq>
 8000eb0:	bf94      	ite	ls
 8000eb2:	2001      	movls	r0, #1
 8000eb4:	2000      	movhi	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmpge>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffd2 	bl	8000e68 <__aeabi_cfrcmple>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpgt>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffc8 	bl	8000e68 <__aeabi_cfrcmple>
 8000ed8:	bf34      	ite	cc
 8000eda:	2001      	movcc	r0, #1
 8000edc:	2000      	movcs	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_f2uiz>:
 8000ee4:	0042      	lsls	r2, r0, #1
 8000ee6:	d20e      	bcs.n	8000f06 <__aeabi_f2uiz+0x22>
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eec:	d30b      	bcc.n	8000f06 <__aeabi_f2uiz+0x22>
 8000eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d409      	bmi.n	8000f0c <__aeabi_f2uiz+0x28>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	4770      	bx	lr
 8000f0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f10:	d101      	bne.n	8000f16 <__aeabi_f2uiz+0x32>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d102      	bne.n	8000f1c <__aeabi_f2uiz+0x38>
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	4770      	bx	lr
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr

08000f3e <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	621a      	str	r2, [r3, #32]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	611a      	str	r2, [r3, #16]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	615a      	str	r2, [r3, #20]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
	...

08000fd0 <MotorL_EnablePWM>:
 */
#include "MotorControl.h"


void MotorL_EnablePWM(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <MotorL_EnablePWM+0x10>)
 8000fd8:	f7ff ffb1 	bl	8000f3e <LL_TIM_CC_EnableChannel>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40012c00 	.word	0x40012c00

08000fe4 <MotorR_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void MotorR_EnablePWM(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 8000fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <MotorR_EnablePWM+0x14>)
 8000fee:	f7ff ffa6 	bl	8000f3e <LL_TIM_CC_EnableChannel>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40012c00 	.word	0x40012c00

08000ffc <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800100a:	db03      	blt.n	8001014 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 800100c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	e005      	b.n	8001020 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800101a:	dc01      	bgt.n	8001020 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MotorL_SetPWM+0x60>)
 800101e:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0a      	blt.n	800103c <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	b29b      	uxth	r3, r3
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MotorL_SetPWM+0x64>)
 800102e:	f7ff ff96 	bl	8000f5e <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001032:	490c      	ldr	r1, [pc, #48]	; (8001064 <MotorL_SetPWM+0x68>)
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MotorL_SetPWM+0x6c>)
 8001036:	f7ff ffbb 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800103a:	e00a      	b.n	8001052 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001042:	4619      	mov	r1, r3
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <MotorL_SetPWM+0x64>)
 8001046:	f7ff ff8a 	bl	8000f5e <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800104a:	4906      	ldr	r1, [pc, #24]	; (8001064 <MotorL_SetPWM+0x68>)
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <MotorL_SetPWM+0x6c>)
 800104e:	f7ff ffa0 	bl	8000f92 <LL_GPIO_SetOutputPin>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	ffffe3e0 	.word	0xffffe3e0
 8001060:	40012c00 	.word	0x40012c00
 8001064:	04800080 	.word	0x04800080
 8001068:	40010c00 	.word	0x40010c00

0800106c <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800107a:	db03      	blt.n	8001084 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 800107c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	e005      	b.n	8001090 <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800108a:	dc01      	bgt.n	8001090 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MotorR_SetPWM+0x60>)
 800108e:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0a      	blt.n	80010ac <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MotorR_SetPWM+0x64>)
 800109e:	f7ff ff6b 	bl	8000f78 <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80010a2:	490c      	ldr	r1, [pc, #48]	; (80010d4 <MotorR_SetPWM+0x68>)
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MotorR_SetPWM+0x6c>)
 80010a6:	f7ff ff83 	bl	8000fb0 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 80010aa:	e00a      	b.n	80010c2 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MotorR_SetPWM+0x64>)
 80010b6:	f7ff ff5f 	bl	8000f78 <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80010ba:	4906      	ldr	r1, [pc, #24]	; (80010d4 <MotorR_SetPWM+0x68>)
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <MotorR_SetPWM+0x6c>)
 80010be:	f7ff ff68 	bl	8000f92 <LL_GPIO_SetOutputPin>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	ffffe3e0 	.word	0xffffe3e0
 80010d0:	40012c00 	.word	0x40012c00
 80010d4:	04020002 	.word	0x04020002
 80010d8:	40010800 	.word	0x40010800

080010dc <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90) ServoAngle = 90;
 80010e4:	4918      	ldr	r1, [pc, #96]	; (8001148 <Servo_SetAngle+0x6c>)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fef2 	bl	8000ed0 <__aeabi_fcmpgt>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <Servo_SetAngle+0x1c>
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <Servo_SetAngle+0x6c>)
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	e008      	b.n	800110a <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90) ServoAngle = -90;
 80010f8:	4914      	ldr	r1, [pc, #80]	; (800114c <Servo_SetAngle+0x70>)
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff feca 	bl	8000e94 <__aeabi_fcmplt>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <Servo_SetAngle+0x2e>
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <Servo_SetAngle+0x70>)
 8001108:	607b      	str	r3, [r7, #4]
//	uint16_t ServoCPR = 540 + ServoAngle*2;
	LL_TIM_OC_SetCompareCH1(TIM4, 4500 + ServoAngle*50/3);
 800110a:	4911      	ldr	r1, [pc, #68]	; (8001150 <Servo_SetAngle+0x74>)
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fd23 	bl	8000b58 <__aeabi_fmul>
 8001112:	4603      	mov	r3, r0
 8001114:	490f      	ldr	r1, [pc, #60]	; (8001154 <Servo_SetAngle+0x78>)
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fdd2 	bl	8000cc0 <__aeabi_fdiv>
 800111c:	4603      	mov	r3, r0
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <Servo_SetAngle+0x7c>)
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fc11 	bl	8000948 <__addsf3>
 8001126:	4603      	mov	r3, r0
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fedb 	bl	8000ee4 <__aeabi_f2uiz>
 800112e:	4603      	mov	r3, r0
 8001130:	4619      	mov	r1, r3
 8001132:	480a      	ldr	r0, [pc, #40]	; (800115c <Servo_SetAngle+0x80>)
 8001134:	f7ff ff13 	bl	8000f5e <LL_TIM_OC_SetCompareCH1>
	LL_TIM_SetCounter(TIM4, 0);
 8001138:	2100      	movs	r1, #0
 800113a:	4808      	ldr	r0, [pc, #32]	; (800115c <Servo_SetAngle+0x80>)
 800113c:	f7ff fef2 	bl	8000f24 <LL_TIM_SetCounter>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	42b40000 	.word	0x42b40000
 800114c:	c2b40000 	.word	0xc2b40000
 8001150:	42480000 	.word	0x42480000
 8001154:	40400000 	.word	0x40400000
 8001158:	458ca000 	.word	0x458ca000
 800115c:	40000800 	.word	0x40000800

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4906      	ldr	r1, [pc, #24]	; (80011f8 <__NVIC_EnableIRQ+0x34>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012b4:	b490      	push	{r4, r7}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	332c      	adds	r3, #44	; 0x2c
 80012c4:	4619      	mov	r1, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012d0:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	fa92 f2a2 	rbit	r2, r2
 80012d8:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	fab2 f282 	clz	r2, r2
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	40d3      	lsrs	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80012ea:	6822      	ldr	r2, [r4, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f003 031f 	and.w	r3, r3, #31
 80012f2:	211f      	movs	r1, #31
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 011f 	and.w	r1, r3, #31
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bc90      	pop	{r4, r7}
 8001318:	4770      	bx	lr

0800131a <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800133e:	b490      	push	{r4, r7}
 8001340:	b08a      	sub	sp, #40	; 0x28
 8001342:	af00      	add	r7, sp, #0
 8001344:	60f8      	str	r0, [r7, #12]
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	330c      	adds	r3, #12
 800134e:	4619      	mov	r1, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800135a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	fa92 f2a2 	rbit	r2, r2
 8001362:	613a      	str	r2, [r7, #16]
  return result;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	fab2 f282 	clz	r2, r2
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	40d3      	lsrs	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001374:	6822      	ldr	r2, [r4, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800137c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001380:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	69f9      	ldr	r1, [r7, #28]
 8001384:	fa91 f1a1 	rbit	r1, r1
 8001388:	61b9      	str	r1, [r7, #24]
  return result;
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	fab1 f181 	clz	r1, r1
 8001390:	b2c9      	uxtb	r1, r1
 8001392:	40cb      	lsrs	r3, r1
 8001394:	2107      	movs	r1, #7
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	401a      	ands	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80013a4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80013a8:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ac:	fa91 f1a1 	rbit	r1, r1
 80013b0:	6239      	str	r1, [r7, #32]
  return result;
 80013b2:	6a39      	ldr	r1, [r7, #32]
 80013b4:	fab1 f181 	clz	r1, r1
 80013b8:	b2c9      	uxtb	r1, r1
 80013ba:	40cb      	lsrs	r3, r1
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc90      	pop	{r4, r7}
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f043 0204 	orr.w	r2, r3, #4
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	609a      	str	r2, [r3, #8]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b04      	cmp	r3, #4
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	609a      	str	r2, [r3, #8]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
	...

08001450 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LL_DMA_EnableChannel+0x38>)
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	461a      	mov	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	3a01      	subs	r2, #1
 800146e:	4906      	ldr	r1, [pc, #24]	; (8001488 <LL_DMA_EnableChannel+0x38>)
 8001470:	5c8a      	ldrb	r2, [r1, r2]
 8001472:	4611      	mov	r1, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	440a      	add	r2, r1
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	080052c4 	.word	0x080052c4

0800148c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	3b01      	subs	r3, #1
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <LL_DMA_SetDataTransferDirection+0x44>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014ac:	f023 0310 	bic.w	r3, r3, #16
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	3a01      	subs	r2, #1
 80014b4:	4906      	ldr	r1, [pc, #24]	; (80014d0 <LL_DMA_SetDataTransferDirection+0x44>)
 80014b6:	5c8a      	ldrb	r2, [r1, r2]
 80014b8:	4611      	mov	r1, r2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	440a      	add	r2, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	080052c4 	.word	0x080052c4

080014d4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LL_DMA_SetMode+0x40>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f023 0220 	bic.w	r2, r3, #32
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <LL_DMA_SetMode+0x40>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	4619      	mov	r1, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	440b      	add	r3, r1
 8001502:	4619      	mov	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
             Mode);
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	080052c4 	.word	0x080052c4

08001518 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	3b01      	subs	r3, #1
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LL_DMA_SetPeriphIncMode+0x40>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	3b01      	subs	r3, #1
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <LL_DMA_SetPeriphIncMode+0x40>)
 800153e:	5ccb      	ldrb	r3, [r1, r3]
 8001540:	4619      	mov	r1, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	440b      	add	r3, r1
 8001546:	4619      	mov	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	080052c4 	.word	0x080052c4

0800155c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	3b01      	subs	r3, #1
 800156c:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LL_DMA_SetMemoryIncMode+0x40>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3b01      	subs	r3, #1
 8001580:	4906      	ldr	r1, [pc, #24]	; (800159c <LL_DMA_SetMemoryIncMode+0x40>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	4619      	mov	r1, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	440b      	add	r3, r1
 800158a:	4619      	mov	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	080052c4 	.word	0x080052c4

080015a0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LL_DMA_SetPeriphSize+0x40>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	4906      	ldr	r1, [pc, #24]	; (80015e0 <LL_DMA_SetPeriphSize+0x40>)
 80015c6:	5ccb      	ldrb	r3, [r1, r3]
 80015c8:	4619      	mov	r1, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	440b      	add	r3, r1
 80015ce:	4619      	mov	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	080052c4 	.word	0x080052c4

080015e4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LL_DMA_SetMemorySize+0x40>)
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	461a      	mov	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	3b01      	subs	r3, #1
 8001608:	4906      	ldr	r1, [pc, #24]	; (8001624 <LL_DMA_SetMemorySize+0x40>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	4619      	mov	r1, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	440b      	add	r3, r1
 8001612:	4619      	mov	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	080052c4 	.word	0x080052c4

08001628 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3b01      	subs	r3, #1
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800163a:	5cd3      	ldrb	r3, [r2, r3]
 800163c:	461a      	mov	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3b01      	subs	r3, #1
 800164c:	4906      	ldr	r1, [pc, #24]	; (8001668 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800164e:	5ccb      	ldrb	r3, [r1, r3]
 8001650:	4619      	mov	r1, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	440b      	add	r3, r1
 8001656:	4619      	mov	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	080052c4 	.word	0x080052c4

0800166c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3b01      	subs	r3, #1
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <LL_DMA_SetDataLength+0x40>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	461a      	mov	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4413      	add	r3, r2
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	3a01      	subs	r2, #1
 8001690:	4906      	ldr	r1, [pc, #24]	; (80016ac <LL_DMA_SetDataLength+0x40>)
 8001692:	5c8a      	ldrb	r2, [r1, r2]
 8001694:	4611      	mov	r1, r2
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	440a      	add	r2, r1
 800169a:	4611      	mov	r1, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	080052c4 	.word	0x080052c4

080016b0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3b01      	subs	r3, #1
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <LL_DMA_SetMemoryAddress+0x2c>)
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	461a      	mov	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4413      	add	r3, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	080052c4 	.word	0x080052c4

080016e0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <LL_DMA_SetPeriphAddress+0x2c>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6093      	str	r3, [r2, #8]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	080052c4 	.word	0x080052c4

08001710 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	601a      	str	r2, [r3, #0]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	60da      	str	r2, [r3, #12]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f023 0201 	bic.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60da      	str	r2, [r3, #12]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <LL_RCC_HSE_Enable+0x18>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a03      	ldr	r2, [pc, #12]	; (80017c4 <LL_RCC_HSE_Enable+0x18>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <LL_RCC_HSE_IsReady+0x20>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017d8:	bf0c      	ite	eq
 80017da:	2301      	moveq	r3, #1
 80017dc:	2300      	movne	r3, #0
 80017de:	b2db      	uxtb	r3, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000

080017ec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <LL_RCC_SetSysClkSource+0x24>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 0203 	bic.w	r2, r3, #3
 80017fc:	4904      	ldr	r1, [pc, #16]	; (8001810 <LL_RCC_SetSysClkSource+0x24>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <LL_RCC_GetSysClkSource+0x14>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000

0800182c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <LL_RCC_SetAHBPrescaler+0x24>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	4904      	ldr	r1, [pc, #16]	; (8001850 <LL_RCC_SetAHBPrescaler+0x24>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000

08001854 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <LL_RCC_SetAPB1Prescaler+0x24>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001864:	4904      	ldr	r1, [pc, #16]	; (8001878 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800188c:	4904      	ldr	r1, [pc, #16]	; (80018a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <LL_RCC_SetADCClockSource+0x24>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018b4:	4904      	ldr	r1, [pc, #16]	; (80018c8 <LL_RCC_SetADCClockSource+0x24>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000

080018cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <LL_RCC_PLL_Enable+0x18>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <LL_RCC_PLL_Enable+0x18>)
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000

080018e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <LL_RCC_PLL_IsReady+0x20>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	40021000 	.word	0x40021000

0800190c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	430b      	orrs	r3, r1
 8001928:	4903      	ldr	r1, [pc, #12]	; (8001938 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	40021000 	.word	0x40021000

0800193c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001976:	69da      	ldr	r2, [r3, #28]
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <LL_APB1_GRP1_EnableClock+0x2c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4313      	orrs	r3, r2
 800197e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001982:	69da      	ldr	r2, [r3, #28]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4013      	ands	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019a6:	699a      	ldr	r2, [r3, #24]
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <LL_FLASH_SetLatency+0x24>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 0207 	bic.w	r2, r3, #7
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <LL_FLASH_SetLatency+0x24>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40022000 	.word	0x40022000

080019f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <LL_FLASH_GetLatency+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40022000 	.word	0x40022000

08001a0c <LL_TIM_EnableCounter>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <LL_TIM_DisableARRPreload>:
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <LL_TIM_SetCounter>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <LL_TIM_OC_DisableFast>:
{
 8001a64:	b4b0      	push	{r4, r5, r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d01c      	beq.n	8001aae <LL_TIM_OC_DisableFast+0x4a>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d017      	beq.n	8001aaa <LL_TIM_OC_DisableFast+0x46>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d012      	beq.n	8001aa6 <LL_TIM_OC_DisableFast+0x42>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b40      	cmp	r3, #64	; 0x40
 8001a84:	d00d      	beq.n	8001aa2 <LL_TIM_OC_DisableFast+0x3e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a8c:	d007      	beq.n	8001a9e <LL_TIM_OC_DisableFast+0x3a>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a94:	d101      	bne.n	8001a9a <LL_TIM_OC_DisableFast+0x36>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e00a      	b.n	8001ab0 <LL_TIM_OC_DisableFast+0x4c>
 8001a9a:	2306      	movs	r3, #6
 8001a9c:	e008      	b.n	8001ab0 <LL_TIM_OC_DisableFast+0x4c>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	e006      	b.n	8001ab0 <LL_TIM_OC_DisableFast+0x4c>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e004      	b.n	8001ab0 <LL_TIM_OC_DisableFast+0x4c>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <LL_TIM_OC_DisableFast+0x4c>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_TIM_OC_DisableFast+0x4c>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3318      	adds	r3, #24
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <LL_TIM_OC_DisableFast+0x7c>)
 8001abc:	5c5b      	ldrb	r3, [r3, r1]
 8001abe:	4413      	add	r3, r2
 8001ac0:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <LL_TIM_OC_DisableFast+0x80>)
 8001ac8:	5c5b      	ldrb	r3, [r3, r1]
 8001aca:	4619      	mov	r1, r3
 8001acc:	2304      	movs	r3, #4
 8001ace:	408b      	lsls	r3, r1
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	6023      	str	r3, [r4, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bcb0      	pop	{r4, r5, r7}
 8001ade:	4770      	bx	lr
 8001ae0:	080052cc 	.word	0x080052cc
 8001ae4:	080052d4 	.word	0x080052d4

08001ae8 <LL_TIM_OC_EnablePreload>:
{
 8001ae8:	b4b0      	push	{r4, r5, r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d01c      	beq.n	8001b32 <LL_TIM_OC_EnablePreload+0x4a>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d017      	beq.n	8001b2e <LL_TIM_OC_EnablePreload+0x46>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b10      	cmp	r3, #16
 8001b02:	d012      	beq.n	8001b2a <LL_TIM_OC_EnablePreload+0x42>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b40      	cmp	r3, #64	; 0x40
 8001b08:	d00d      	beq.n	8001b26 <LL_TIM_OC_EnablePreload+0x3e>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b10:	d007      	beq.n	8001b22 <LL_TIM_OC_EnablePreload+0x3a>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b18:	d101      	bne.n	8001b1e <LL_TIM_OC_EnablePreload+0x36>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e00a      	b.n	8001b34 <LL_TIM_OC_EnablePreload+0x4c>
 8001b1e:	2306      	movs	r3, #6
 8001b20:	e008      	b.n	8001b34 <LL_TIM_OC_EnablePreload+0x4c>
 8001b22:	2304      	movs	r3, #4
 8001b24:	e006      	b.n	8001b34 <LL_TIM_OC_EnablePreload+0x4c>
 8001b26:	2303      	movs	r3, #3
 8001b28:	e004      	b.n	8001b34 <LL_TIM_OC_EnablePreload+0x4c>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <LL_TIM_OC_EnablePreload+0x4c>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_TIM_OC_EnablePreload+0x4c>
 8001b32:	2300      	movs	r3, #0
 8001b34:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3318      	adds	r3, #24
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <LL_TIM_OC_EnablePreload+0x7c>)
 8001b40:	5c5b      	ldrb	r3, [r3, r1]
 8001b42:	4413      	add	r3, r2
 8001b44:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b46:	6822      	ldr	r2, [r4, #0]
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <LL_TIM_OC_EnablePreload+0x80>)
 8001b4c:	5c5b      	ldrb	r3, [r3, r1]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	2308      	movs	r3, #8
 8001b52:	408b      	lsls	r3, r1
 8001b54:	4313      	orrs	r3, r2
 8001b56:	6023      	str	r3, [r4, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bcb0      	pop	{r4, r5, r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	080052cc 	.word	0x080052cc
 8001b68:	080052d4 	.word	0x080052d4

08001b6c <LL_TIM_OC_DisablePreload>:
{
 8001b6c:	b4b0      	push	{r4, r5, r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d01c      	beq.n	8001bb6 <LL_TIM_OC_DisablePreload+0x4a>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d017      	beq.n	8001bb2 <LL_TIM_OC_DisablePreload+0x46>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d012      	beq.n	8001bae <LL_TIM_OC_DisablePreload+0x42>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d00d      	beq.n	8001baa <LL_TIM_OC_DisablePreload+0x3e>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b94:	d007      	beq.n	8001ba6 <LL_TIM_OC_DisablePreload+0x3a>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9c:	d101      	bne.n	8001ba2 <LL_TIM_OC_DisablePreload+0x36>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e00a      	b.n	8001bb8 <LL_TIM_OC_DisablePreload+0x4c>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e008      	b.n	8001bb8 <LL_TIM_OC_DisablePreload+0x4c>
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	e006      	b.n	8001bb8 <LL_TIM_OC_DisablePreload+0x4c>
 8001baa:	2303      	movs	r3, #3
 8001bac:	e004      	b.n	8001bb8 <LL_TIM_OC_DisablePreload+0x4c>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e002      	b.n	8001bb8 <LL_TIM_OC_DisablePreload+0x4c>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_TIM_OC_DisablePreload+0x4c>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3318      	adds	r3, #24
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <LL_TIM_OC_DisablePreload+0x7c>)
 8001bc4:	5c5b      	ldrb	r3, [r3, r1]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	4629      	mov	r1, r5
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <LL_TIM_OC_DisablePreload+0x80>)
 8001bd0:	5c5b      	ldrb	r3, [r3, r1]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	408b      	lsls	r3, r1
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	6023      	str	r3, [r4, #0]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bcb0      	pop	{r4, r5, r7}
 8001be6:	4770      	bx	lr
 8001be8:	080052cc 	.word	0x080052cc
 8001bec:	080052d4 	.word	0x080052d4

08001bf0 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001bf0:	b4b0      	push	{r4, r5, r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d01c      	beq.n	8001c3c <LL_TIM_IC_SetActiveInput+0x4c>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d017      	beq.n	8001c38 <LL_TIM_IC_SetActiveInput+0x48>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d012      	beq.n	8001c34 <LL_TIM_IC_SetActiveInput+0x44>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d00d      	beq.n	8001c30 <LL_TIM_IC_SetActiveInput+0x40>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c1a:	d007      	beq.n	8001c2c <LL_TIM_IC_SetActiveInput+0x3c>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d101      	bne.n	8001c28 <LL_TIM_IC_SetActiveInput+0x38>
 8001c24:	2305      	movs	r3, #5
 8001c26:	e00a      	b.n	8001c3e <LL_TIM_IC_SetActiveInput+0x4e>
 8001c28:	2306      	movs	r3, #6
 8001c2a:	e008      	b.n	8001c3e <LL_TIM_IC_SetActiveInput+0x4e>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	e006      	b.n	8001c3e <LL_TIM_IC_SetActiveInput+0x4e>
 8001c30:	2303      	movs	r3, #3
 8001c32:	e004      	b.n	8001c3e <LL_TIM_IC_SetActiveInput+0x4e>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <LL_TIM_IC_SetActiveInput+0x4e>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_TIM_IC_SetActiveInput+0x4e>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3318      	adds	r3, #24
 8001c44:	461a      	mov	r2, r3
 8001c46:	4629      	mov	r1, r5
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LL_TIM_IC_SetActiveInput+0x8c>)
 8001c4a:	5c5b      	ldrb	r3, [r3, r1]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001c50:	6822      	ldr	r2, [r4, #0]
 8001c52:	4629      	mov	r1, r5
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <LL_TIM_IC_SetActiveInput+0x90>)
 8001c56:	5c5b      	ldrb	r3, [r3, r1]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	408b      	lsls	r3, r1
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0c1b      	lsrs	r3, r3, #16
 8001c66:	4628      	mov	r0, r5
 8001c68:	4905      	ldr	r1, [pc, #20]	; (8001c80 <LL_TIM_IC_SetActiveInput+0x90>)
 8001c6a:	5c09      	ldrb	r1, [r1, r0]
 8001c6c:	408b      	lsls	r3, r1
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	6023      	str	r3, [r4, #0]
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bcb0      	pop	{r4, r5, r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	080052cc 	.word	0x080052cc
 8001c80:	080052dc 	.word	0x080052dc

08001c84 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001c84:	b4b0      	push	{r4, r5, r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d01c      	beq.n	8001cd0 <LL_TIM_IC_SetPrescaler+0x4c>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d017      	beq.n	8001ccc <LL_TIM_IC_SetPrescaler+0x48>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d012      	beq.n	8001cc8 <LL_TIM_IC_SetPrescaler+0x44>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d00d      	beq.n	8001cc4 <LL_TIM_IC_SetPrescaler+0x40>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cae:	d007      	beq.n	8001cc0 <LL_TIM_IC_SetPrescaler+0x3c>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb6:	d101      	bne.n	8001cbc <LL_TIM_IC_SetPrescaler+0x38>
 8001cb8:	2305      	movs	r3, #5
 8001cba:	e00a      	b.n	8001cd2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	e008      	b.n	8001cd2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	e006      	b.n	8001cd2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e004      	b.n	8001cd2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e002      	b.n	8001cd2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_TIM_IC_SetPrescaler+0x4e>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3318      	adds	r3, #24
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4629      	mov	r1, r5
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001cde:	5c5b      	ldrb	r3, [r3, r1]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001ce4:	6822      	ldr	r2, [r4, #0]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <LL_TIM_IC_SetPrescaler+0x90>)
 8001cea:	5c5b      	ldrb	r3, [r3, r1]
 8001cec:	4619      	mov	r1, r3
 8001cee:	230c      	movs	r3, #12
 8001cf0:	408b      	lsls	r3, r1
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	4628      	mov	r0, r5
 8001cfc:	4905      	ldr	r1, [pc, #20]	; (8001d14 <LL_TIM_IC_SetPrescaler+0x90>)
 8001cfe:	5c09      	ldrb	r1, [r1, r0]
 8001d00:	408b      	lsls	r3, r1
 8001d02:	4313      	orrs	r3, r2
 8001d04:	6023      	str	r3, [r4, #0]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bcb0      	pop	{r4, r5, r7}
 8001d0e:	4770      	bx	lr
 8001d10:	080052cc 	.word	0x080052cc
 8001d14:	080052dc 	.word	0x080052dc

08001d18 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001d18:	b4b0      	push	{r4, r5, r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d01c      	beq.n	8001d64 <LL_TIM_IC_SetFilter+0x4c>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d017      	beq.n	8001d60 <LL_TIM_IC_SetFilter+0x48>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d012      	beq.n	8001d5c <LL_TIM_IC_SetFilter+0x44>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d00d      	beq.n	8001d58 <LL_TIM_IC_SetFilter+0x40>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d42:	d007      	beq.n	8001d54 <LL_TIM_IC_SetFilter+0x3c>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d101      	bne.n	8001d50 <LL_TIM_IC_SetFilter+0x38>
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	e00a      	b.n	8001d66 <LL_TIM_IC_SetFilter+0x4e>
 8001d50:	2306      	movs	r3, #6
 8001d52:	e008      	b.n	8001d66 <LL_TIM_IC_SetFilter+0x4e>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e006      	b.n	8001d66 <LL_TIM_IC_SetFilter+0x4e>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e004      	b.n	8001d66 <LL_TIM_IC_SetFilter+0x4e>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <LL_TIM_IC_SetFilter+0x4e>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <LL_TIM_IC_SetFilter+0x4e>
 8001d64:	2300      	movs	r3, #0
 8001d66:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4629      	mov	r1, r5
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <LL_TIM_IC_SetFilter+0x8c>)
 8001d72:	5c5b      	ldrb	r3, [r3, r1]
 8001d74:	4413      	add	r3, r2
 8001d76:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d78:	6822      	ldr	r2, [r4, #0]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <LL_TIM_IC_SetFilter+0x90>)
 8001d7e:	5c5b      	ldrb	r3, [r3, r1]
 8001d80:	4619      	mov	r1, r3
 8001d82:	23f0      	movs	r3, #240	; 0xf0
 8001d84:	408b      	lsls	r3, r1
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	4628      	mov	r0, r5
 8001d90:	4905      	ldr	r1, [pc, #20]	; (8001da8 <LL_TIM_IC_SetFilter+0x90>)
 8001d92:	5c09      	ldrb	r1, [r1, r0]
 8001d94:	408b      	lsls	r3, r1
 8001d96:	4313      	orrs	r3, r2
 8001d98:	6023      	str	r3, [r4, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bcb0      	pop	{r4, r5, r7}
 8001da2:	4770      	bx	lr
 8001da4:	080052cc 	.word	0x080052cc
 8001da8:	080052dc 	.word	0x080052dc

08001dac <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001dac:	b490      	push	{r4, r7}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d01c      	beq.n	8001df8 <LL_TIM_IC_SetPolarity+0x4c>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d017      	beq.n	8001df4 <LL_TIM_IC_SetPolarity+0x48>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d012      	beq.n	8001df0 <LL_TIM_IC_SetPolarity+0x44>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d00d      	beq.n	8001dec <LL_TIM_IC_SetPolarity+0x40>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd6:	d007      	beq.n	8001de8 <LL_TIM_IC_SetPolarity+0x3c>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dde:	d101      	bne.n	8001de4 <LL_TIM_IC_SetPolarity+0x38>
 8001de0:	2305      	movs	r3, #5
 8001de2:	e00a      	b.n	8001dfa <LL_TIM_IC_SetPolarity+0x4e>
 8001de4:	2306      	movs	r3, #6
 8001de6:	e008      	b.n	8001dfa <LL_TIM_IC_SetPolarity+0x4e>
 8001de8:	2304      	movs	r3, #4
 8001dea:	e006      	b.n	8001dfa <LL_TIM_IC_SetPolarity+0x4e>
 8001dec:	2303      	movs	r3, #3
 8001dee:	e004      	b.n	8001dfa <LL_TIM_IC_SetPolarity+0x4e>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <LL_TIM_IC_SetPolarity+0x4e>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_TIM_IC_SetPolarity+0x4e>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a1a      	ldr	r2, [r3, #32]
 8001e00:	4621      	mov	r1, r4
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <LL_TIM_IC_SetPolarity+0x80>)
 8001e04:	5c5b      	ldrb	r3, [r3, r1]
 8001e06:	4619      	mov	r1, r3
 8001e08:	230a      	movs	r3, #10
 8001e0a:	408b      	lsls	r3, r1
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	4621      	mov	r1, r4
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <LL_TIM_IC_SetPolarity+0x80>)
 8001e14:	5c5b      	ldrb	r3, [r3, r1]
 8001e16:	4619      	mov	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	408b      	lsls	r3, r1
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc90      	pop	{r4, r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	080052e4 	.word	0x080052e4

08001e30 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e42:	f023 0307 	bic.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f023 0207 	bic.w	r2, r3, #7
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	609a      	str	r2, [r3, #8]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	605a      	str	r2, [r3, #4]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f06f 0201 	mvn.w	r2, #1
 8001eea:	611a      	str	r2, [r3, #16]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f06f 0202 	mvn.w	r2, #2
 8001f04:	611a      	str	r2, [r3, #16]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f06f 0204 	mvn.w	r2, #4
 8001f1e:	611a      	str	r2, [r3, #16]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60da      	str	r2, [r3, #12]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f043 0202 	orr.w	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f043 0204 	orr.w	r2, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60da      	str	r2, [r3, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	615a      	str	r2, [r3, #20]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	605a      	str	r2, [r3, #4]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <LL_GPIO_SetPinMode>:
{
 800200c:	b490      	push	{r4, r7}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	461a      	mov	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	0e1b      	lsrs	r3, r3, #24
 8002020:	4413      	add	r3, r2
 8002022:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002024:	6822      	ldr	r2, [r4, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	613b      	str	r3, [r7, #16]
  return result;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	210f      	movs	r1, #15
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	401a      	ands	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	61bb      	str	r3, [r7, #24]
  return result;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	6023      	str	r3, [r4, #0]
}
 8002066:	bf00      	nop
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bc90      	pop	{r4, r7}
 800206e:	4770      	bx	lr

08002070 <LL_GPIO_ResetOutputPin>:
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	615a      	str	r2, [r3, #20]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800209a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	6053      	str	r3, [r2, #4]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40010000 	.word	0x40010000

080020b0 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80020ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6053      	str	r3, [r2, #4]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	40010000 	.word	0x40010000

080020d0 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80020da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020e2:	6053      	str	r3, [r2, #4]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40010000 	.word	0x40010000

080020f0 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8002102:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002106:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800210a:	6053      	str	r3, [r2, #4]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40010000 	.word	0x40010000

08002118 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002126:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a03      	ldr	r2, [pc, #12]	; (800213c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800212e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002132:	6053      	str	r3, [r2, #4]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40010000 	.word	0x40010000

08002140 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <LL_GPIO_AF_SetEXTISource+0x58>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	3302      	adds	r3, #2
 8002152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	43db      	mvns	r3, r3
 800215c:	ea02 0103 	and.w	r1, r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	0c1b      	lsrs	r3, r3, #16
 8002164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	60bb      	str	r3, [r7, #8]
  return result;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	fa03 f202 	lsl.w	r2, r3, r2
 800217e:	4806      	ldr	r0, [pc, #24]	; (8002198 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	430a      	orrs	r2, r1
 8002186:	3302      	adds	r3, #2
 8002188:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40010000 	.word	0x40010000

0800219c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 80021a4:	bf00      	nop
 80021a6:	4808      	ldr	r0, [pc, #32]	; (80021c8 <__io_putchar+0x2c>)
 80021a8:	f7ff ff10 	bl	8001fcc <LL_USART_IsActiveFlag_TC>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f9      	beq.n	80021a6 <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4619      	mov	r1, r3
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <__io_putchar+0x2c>)
 80021ba:	f7ff ff19 	bl	8001ff0 <LL_USART_TransmitData8>

  	return ch;
 80021be:	687b      	ldr	r3, [r7, #4]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40013800 	.word	0x40013800
 80021cc:	00000000 	.word	0x00000000

080021d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d0:	b598      	push	{r3, r4, r7, lr}
 80021d2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff fbe1 	bl	800199c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80021da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80021de:	f7ff fbc5 	bl	800196c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e2:	2003      	movs	r0, #3
 80021e4:	f7fe ffbc 	bl	8001160 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80021e8:	f7fe ffde 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2200      	movs	r2, #0
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f82c 	bl	8001250 <NVIC_EncodePriority>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4619      	mov	r1, r3
 80021fc:	f06f 000b 	mvn.w	r0, #11
 8002200:	f7fe fffc 	bl	80011fc <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002204:	f7fe ffd0 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8002208:	4603      	mov	r3, r0
 800220a:	2200      	movs	r2, #0
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f81e 	bl	8001250 <NVIC_EncodePriority>
 8002214:	4603      	mov	r3, r0
 8002216:	4619      	mov	r1, r3
 8002218:	f06f 000a 	mvn.w	r0, #10
 800221c:	f7fe ffee 	bl	80011fc <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002220:	f7fe ffc2 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8002224:	4603      	mov	r3, r0
 8002226:	2200      	movs	r2, #0
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f810 	bl	8001250 <NVIC_EncodePriority>
 8002230:	4603      	mov	r3, r0
 8002232:	4619      	mov	r1, r3
 8002234:	f06f 0009 	mvn.w	r0, #9
 8002238:	f7fe ffe0 	bl	80011fc <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800223c:	f7fe ffb4 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8002240:	4603      	mov	r3, r0
 8002242:	2200      	movs	r2, #0
 8002244:	2101      	movs	r1, #1
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff f802 	bl	8001250 <NVIC_EncodePriority>
 800224c:	4603      	mov	r3, r0
 800224e:	4619      	mov	r1, r3
 8002250:	f06f 0004 	mvn.w	r0, #4
 8002254:	f7fe ffd2 	bl	80011fc <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002258:	f7fe ffa6 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800225c:	4603      	mov	r3, r0
 800225e:	2200      	movs	r2, #0
 8002260:	2101      	movs	r1, #1
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fff4 	bl	8001250 <NVIC_EncodePriority>
 8002268:	4603      	mov	r3, r0
 800226a:	4619      	mov	r1, r3
 800226c:	f06f 0003 	mvn.w	r0, #3
 8002270:	f7fe ffc4 	bl	80011fc <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002274:	f7fe ff98 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8002278:	4603      	mov	r3, r0
 800227a:	2200      	movs	r2, #0
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ffe6 	bl	8001250 <NVIC_EncodePriority>
 8002284:	4603      	mov	r3, r0
 8002286:	4619      	mov	r1, r3
 8002288:	f06f 0001 	mvn.w	r0, #1
 800228c:	f7fe ffb6 	bl	80011fc <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002290:	f7fe ff8a 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8002294:	4603      	mov	r3, r0
 8002296:	2200      	movs	r2, #0
 8002298:	2101      	movs	r1, #1
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe ffd8 	bl	8001250 <NVIC_EncodePriority>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7fe ffa8 	bl	80011fc <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80022ac:	f7ff ff34 	bl	8002118 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 80022b0:	4ba7      	ldr	r3, [pc, #668]	; (8002550 <main+0x380>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6858      	ldr	r0, [r3, #4]
 80022b6:	2300      	movs	r3, #0
 80022b8:	2202      	movs	r2, #2
 80022ba:	2100      	movs	r1, #0
 80022bc:	f002 fc4e 	bl	8004b5c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80022c0:	4ba3      	ldr	r3, [pc, #652]	; (8002550 <main+0x380>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6898      	ldr	r0, [r3, #8]
 80022c6:	2300      	movs	r3, #0
 80022c8:	2202      	movs	r2, #2
 80022ca:	2100      	movs	r1, #0
 80022cc:	f002 fc46 	bl	8004b5c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80022d0:	4b9f      	ldr	r3, [pc, #636]	; (8002550 <main+0x380>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68d8      	ldr	r0, [r3, #12]
 80022d6:	2300      	movs	r3, #0
 80022d8:	2202      	movs	r2, #2
 80022da:	2100      	movs	r1, #0
 80022dc:	f002 fc3e 	bl	8004b5c <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e0:	f000 faee 	bl	80028c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022e4:	f000 ffa4 	bl	8003230 <MX_GPIO_Init>
  MX_DMA_Init();
 80022e8:	f000 ff8a 	bl	8003200 <MX_DMA_Init>
  MX_TIM1_Init();
 80022ec:	f000 fc9a 	bl	8002c24 <MX_TIM1_Init>
  MX_ADC1_Init();
 80022f0:	f000 fb28 	bl	8002944 <MX_ADC1_Init>
  MX_I2C1_Init();
 80022f4:	f000 fc3c 	bl	8002b70 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80022f8:	f000 ff18 	bl	800312c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80022fc:	f000 fd48 	bl	8002d90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002300:	f000 fdf6 	bl	8002ef0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002304:	f000 fe84 	bl	8003010 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 8002308:	f7fe fe62 	bl	8000fd0 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 800230c:	f7fe fe6a 	bl	8000fe4 <MotorR_EnablePWM>
  MotorL_SetPWM(0);
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fe73 	bl	8000ffc <MotorL_SetPWM>
  MotorR_SetPWM(0);
 8002316:	2000      	movs	r0, #0
 8002318:	f7fe fea8 	bl	800106c <MotorR_SetPWM>
  Servo_SetAngle(0);
 800231c:	f04f 0000 	mov.w	r0, #0
 8002320:	f7fe fedc 	bl	80010dc <Servo_SetAngle>
  OC2_IT_Setmillis(2.5);
 8002324:	488b      	ldr	r0, [pc, #556]	; (8002554 <main+0x384>)
 8002326:	f001 f9c3 	bl	80036b0 <OC2_IT_Setmillis>

//  uint32_t Count = LL_TIM_GetCounter(TIM2);

  while (1)
  {
	  LineDetect = 0;
 800232a:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <main+0x388>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
//	  Sensor_Convert_A2D();
//	  Sensor_Print_Thres();
//	  Sensor_PrintValue();
//	  Sensor_Print_LineDetect();

	  if(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000)
 8002330:	4b89      	ldr	r3, [pc, #548]	; (8002558 <main+0x388>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b18      	cmp	r3, #24
 8002336:	d007      	beq.n	8002348 <main+0x178>
 8002338:	4b87      	ldr	r3, [pc, #540]	; (8002558 <main+0x388>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b1c      	cmp	r3, #28
 800233e:	d003      	beq.n	8002348 <main+0x178>
 8002340:	4b85      	ldr	r3, [pc, #532]	; (8002558 <main+0x388>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b38      	cmp	r3, #56	; 0x38
 8002346:	d111      	bne.n	800236c <main+0x19c>
	  {
		  CarState = DiThang;
 8002348:	4b84      	ldr	r3, [pc, #528]	; (800255c <main+0x38c>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
		  MotorL_SetPWM(MaxSpeed);
 800234e:	4b84      	ldr	r3, [pc, #528]	; (8002560 <main+0x390>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fe52 	bl	8000ffc <MotorL_SetPWM>
		  MotorR_SetPWM(MaxSpeed);
 8002358:	4b81      	ldr	r3, [pc, #516]	; (8002560 <main+0x390>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fe85 	bl	800106c <MotorR_SetPWM>
		  Servo_SetAngle(0);
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	f7fe feb9 	bl	80010dc <Servo_SetAngle>
		  continue;
 800236a:	e27d      	b.n	8002868 <main+0x698>
//		  MotorL_Brake();
//		  MotorR_Brake();
//		  MotorL_DisablePWM();
//		  MotorR_DisablePWM();
//	  }
	  if(LineDetect == 0b10000000 || LineDetect == 0b11000000 || LineDetect == 0b11100000 ||
 800236c:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <main+0x388>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b80      	cmp	r3, #128	; 0x80
 8002372:	d00f      	beq.n	8002394 <main+0x1c4>
 8002374:	4b78      	ldr	r3, [pc, #480]	; (8002558 <main+0x388>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2bc0      	cmp	r3, #192	; 0xc0
 800237a:	d00b      	beq.n	8002394 <main+0x1c4>
 800237c:	4b76      	ldr	r3, [pc, #472]	; (8002558 <main+0x388>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2be0      	cmp	r3, #224	; 0xe0
 8002382:	d007      	beq.n	8002394 <main+0x1c4>
			  LineDetect == 0b01110000 || LineDetect == 0b00110000)
 8002384:	4b74      	ldr	r3, [pc, #464]	; (8002558 <main+0x388>)
 8002386:	781b      	ldrb	r3, [r3, #0]
	  if(LineDetect == 0b10000000 || LineDetect == 0b11000000 || LineDetect == 0b11100000 ||
 8002388:	2b70      	cmp	r3, #112	; 0x70
 800238a:	d003      	beq.n	8002394 <main+0x1c4>
			  LineDetect == 0b01110000 || LineDetect == 0b00110000)
 800238c:	4b72      	ldr	r3, [pc, #456]	; (8002558 <main+0x388>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b30      	cmp	r3, #48	; 0x30
 8002392:	d103      	bne.n	800239c <main+0x1cc>
	  {
		  CarState = LechPhai;
 8002394:	4b71      	ldr	r3, [pc, #452]	; (800255c <main+0x38c>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e036      	b.n	800240a <main+0x23a>
	  }
	  else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 || LineDetect == 0b00000111 ||
 800239c:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <main+0x388>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d00f      	beq.n	80023c4 <main+0x1f4>
 80023a4:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <main+0x388>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d00b      	beq.n	80023c4 <main+0x1f4>
 80023ac:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <main+0x388>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b07      	cmp	r3, #7
 80023b2:	d007      	beq.n	80023c4 <main+0x1f4>
			  LineDetect == 0b00001110 || LineDetect == 0b00001100)
 80023b4:	4b68      	ldr	r3, [pc, #416]	; (8002558 <main+0x388>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
	  else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 || LineDetect == 0b00000111 ||
 80023b8:	2b0e      	cmp	r3, #14
 80023ba:	d003      	beq.n	80023c4 <main+0x1f4>
			  LineDetect == 0b00001110 || LineDetect == 0b00001100)
 80023bc:	4b66      	ldr	r3, [pc, #408]	; (8002558 <main+0x388>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d103      	bne.n	80023cc <main+0x1fc>
	  {
		  CarState = LechTrai;
 80023c4:	4b65      	ldr	r3, [pc, #404]	; (800255c <main+0x38c>)
 80023c6:	22ff      	movs	r2, #255	; 0xff
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	e01e      	b.n	800240a <main+0x23a>
	  }

	  else if( LineDetect == 0b00111111 ||LineDetect == 0b00011111 || LineDetect == 0b00001111 )
 80023cc:	4b62      	ldr	r3, [pc, #392]	; (8002558 <main+0x388>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b3f      	cmp	r3, #63	; 0x3f
 80023d2:	d007      	beq.n	80023e4 <main+0x214>
 80023d4:	4b60      	ldr	r3, [pc, #384]	; (8002558 <main+0x388>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b1f      	cmp	r3, #31
 80023da:	d003      	beq.n	80023e4 <main+0x214>
 80023dc:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <main+0x388>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b0f      	cmp	r3, #15
 80023e2:	d103      	bne.n	80023ec <main+0x21c>
	  {
		  ChuyenLaneFlag = ChuyenLanePhai;
 80023e4:	4b5f      	ldr	r3, [pc, #380]	; (8002564 <main+0x394>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e00e      	b.n	800240a <main+0x23a>
	  }
	  else if(LineDetect == 0b11110000 || LineDetect == 0b11111000 || LineDetect == 0b11111100)
 80023ec:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <main+0x388>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2bf0      	cmp	r3, #240	; 0xf0
 80023f2:	d007      	beq.n	8002404 <main+0x234>
 80023f4:	4b58      	ldr	r3, [pc, #352]	; (8002558 <main+0x388>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2bf8      	cmp	r3, #248	; 0xf8
 80023fa:	d003      	beq.n	8002404 <main+0x234>
 80023fc:	4b56      	ldr	r3, [pc, #344]	; (8002558 <main+0x388>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2bfc      	cmp	r3, #252	; 0xfc
 8002402:	d102      	bne.n	800240a <main+0x23a>
	  {
		  ChuyenLaneFlag = ChuyenLaneTrai;
 8002404:	4b57      	ldr	r3, [pc, #348]	; (8002564 <main+0x394>)
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	701a      	strb	r2, [r3, #0]
	  }

	  if(LineDetect == 0)
 800240a:	4b53      	ldr	r3, [pc, #332]	; (8002558 <main+0x388>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d16d      	bne.n	80024ee <main+0x31e>
	  {
		  if (ChuyenLaneFlag == ChuyenLaneTrai)
 8002412:	4b54      	ldr	r3, [pc, #336]	; (8002564 <main+0x394>)
 8002414:	f993 3000 	ldrsb.w	r3, [r3]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d131      	bne.n	8002482 <main+0x2b2>
		  {
			  ChuyenLaneFlag = 0;
 800241e:	4b51      	ldr	r3, [pc, #324]	; (8002564 <main+0x394>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
			  MotorR_SetPWM(MaxSpeed * 0.75);
 8002424:	4b4e      	ldr	r3, [pc, #312]	; (8002560 <main+0x390>)
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ffe3 	bl	80003f4 <__aeabi_i2d>
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <main+0x398>)
 8002434:	f7fe f848 	bl	80004c8 <__aeabi_dmul>
 8002438:	4603      	mov	r3, r0
 800243a:	460c      	mov	r4, r1
 800243c:	4618      	mov	r0, r3
 800243e:	4621      	mov	r1, r4
 8002440:	f7fe fa54 	bl	80008ec <__aeabi_d2iz>
 8002444:	4603      	mov	r3, r0
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fe10 	bl	800106c <MotorR_SetPWM>
			  MotorL_SetPWM(MaxSpeed * 0.4);
 800244c:	4b44      	ldr	r3, [pc, #272]	; (8002560 <main+0x390>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd ffcf 	bl	80003f4 <__aeabi_i2d>
 8002456:	a33c      	add	r3, pc, #240	; (adr r3, 8002548 <main+0x378>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f834 	bl	80004c8 <__aeabi_dmul>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	4618      	mov	r0, r3
 8002466:	4621      	mov	r1, r4
 8002468:	f7fe fa40 	bl	80008ec <__aeabi_d2iz>
 800246c:	4603      	mov	r3, r0
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fdc4 	bl	8000ffc <MotorL_SetPWM>
			  Servo_SetAngle(-54);
 8002474:	483d      	ldr	r0, [pc, #244]	; (800256c <main+0x39c>)
 8002476:	f7fe fe31 	bl	80010dc <Servo_SetAngle>
			  CarState = LechPhai;
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <main+0x38c>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
 8002480:	e035      	b.n	80024ee <main+0x31e>

		  } else if (ChuyenLaneFlag == ChuyenLanePhai)
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <main+0x394>)
 8002484:	f993 3000 	ldrsb.w	r3, [r3]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d130      	bne.n	80024ee <main+0x31e>
		  {
			  ChuyenLaneFlag = 0;
 800248c:	4b35      	ldr	r3, [pc, #212]	; (8002564 <main+0x394>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
			  MotorL_SetPWM(MaxSpeed * 0.75);
 8002492:	4b33      	ldr	r3, [pc, #204]	; (8002560 <main+0x390>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd ffac 	bl	80003f4 <__aeabi_i2d>
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b31      	ldr	r3, [pc, #196]	; (8002568 <main+0x398>)
 80024a2:	f7fe f811 	bl	80004c8 <__aeabi_dmul>
 80024a6:	4603      	mov	r3, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	4618      	mov	r0, r3
 80024ac:	4621      	mov	r1, r4
 80024ae:	f7fe fa1d 	bl	80008ec <__aeabi_d2iz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fda1 	bl	8000ffc <MotorL_SetPWM>
			  MotorR_SetPWM(MaxSpeed * 0.4);
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <main+0x390>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd ff98 	bl	80003f4 <__aeabi_i2d>
 80024c4:	a320      	add	r3, pc, #128	; (adr r3, 8002548 <main+0x378>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fd fffd 	bl	80004c8 <__aeabi_dmul>
 80024ce:	4603      	mov	r3, r0
 80024d0:	460c      	mov	r4, r1
 80024d2:	4618      	mov	r0, r3
 80024d4:	4621      	mov	r1, r4
 80024d6:	f7fe fa09 	bl	80008ec <__aeabi_d2iz>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fdc5 	bl	800106c <MotorR_SetPWM>
			  Servo_SetAngle(54);
 80024e2:	4823      	ldr	r0, [pc, #140]	; (8002570 <main+0x3a0>)
 80024e4:	f7fe fdfa 	bl	80010dc <Servo_SetAngle>
			  CarState = LechTrai;
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <main+0x38c>)
 80024ea:	22ff      	movs	r2, #255	; 0xff
 80024ec:	701a      	strb	r2, [r3, #0]

		  }
//		  continue;
	  }
	  if (CarState == LechTrai)
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <main+0x38c>)
 80024f0:	f993 3000 	ldrsb.w	r3, [r3]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	f040 80ed 	bne.w	80026d6 <main+0x506>
	  {
		  switch (LineDetect)
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <main+0x388>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	3b01      	subs	r3, #1
 8002502:	2b0d      	cmp	r3, #13
 8002504:	f200 81af 	bhi.w	8002866 <main+0x696>
 8002508:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <main+0x340>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002575 	.word	0x08002575
 8002514:	08002867 	.word	0x08002867
 8002518:	080025cd 	.word	0x080025cd
 800251c:	08002867 	.word	0x08002867
 8002520:	08002867 	.word	0x08002867
 8002524:	08002867 	.word	0x08002867
 8002528:	08002625 	.word	0x08002625
 800252c:	08002867 	.word	0x08002867
 8002530:	08002867 	.word	0x08002867
 8002534:	08002867 	.word	0x08002867
 8002538:	08002867 	.word	0x08002867
 800253c:	08002699 	.word	0x08002699
 8002540:	08002867 	.word	0x08002867
 8002544:	0800265f 	.word	0x0800265f
 8002548:	9999999a 	.word	0x9999999a
 800254c:	3fd99999 	.word	0x3fd99999
 8002550:	20000008 	.word	0x20000008
 8002554:	40200000 	.word	0x40200000
 8002558:	20000089 	.word	0x20000089
 800255c:	2000008a 	.word	0x2000008a
 8002560:	20000000 	.word	0x20000000
 8002564:	2000008b 	.word	0x2000008b
 8002568:	3fe80000 	.word	0x3fe80000
 800256c:	c2580000 	.word	0xc2580000
 8002570:	42580000 	.word	0x42580000
		  {
			  case	0b00000001:
				  MotorR_SetPWM(MaxSpeed * 0.60);
 8002574:	4bc8      	ldr	r3, [pc, #800]	; (8002898 <main+0x6c8>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ff3b 	bl	80003f4 <__aeabi_i2d>
 800257e:	a3bc      	add	r3, pc, #752	; (adr r3, 8002870 <main+0x6a0>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fd ffa0 	bl	80004c8 <__aeabi_dmul>
 8002588:	4603      	mov	r3, r0
 800258a:	460c      	mov	r4, r1
 800258c:	4618      	mov	r0, r3
 800258e:	4621      	mov	r1, r4
 8002590:	f7fe f9ac 	bl	80008ec <__aeabi_d2iz>
 8002594:	4603      	mov	r3, r0
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fd68 	bl	800106c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 0.85);
 800259c:	4bbe      	ldr	r3, [pc, #760]	; (8002898 <main+0x6c8>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ff27 	bl	80003f4 <__aeabi_i2d>
 80025a6:	a3b4      	add	r3, pc, #720	; (adr r3, 8002878 <main+0x6a8>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fd ff8c 	bl	80004c8 <__aeabi_dmul>
 80025b0:	4603      	mov	r3, r0
 80025b2:	460c      	mov	r4, r1
 80025b4:	4618      	mov	r0, r3
 80025b6:	4621      	mov	r1, r4
 80025b8:	f7fe f998 	bl	80008ec <__aeabi_d2iz>
 80025bc:	4603      	mov	r3, r0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fd1c 	bl	8000ffc <MotorL_SetPWM>
				  Servo_SetAngle(54);
 80025c4:	48b5      	ldr	r0, [pc, #724]	; (800289c <main+0x6cc>)
 80025c6:	f7fe fd89 	bl	80010dc <Servo_SetAngle>
				  break;
 80025ca:	e083      	b.n	80026d4 <main+0x504>
			  case 0b00000011:
				  MotorR_SetPWM(MaxSpeed * 0.75);
 80025cc:	4bb2      	ldr	r3, [pc, #712]	; (8002898 <main+0x6c8>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ff0f 	bl	80003f4 <__aeabi_i2d>
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	4bb1      	ldr	r3, [pc, #708]	; (80028a0 <main+0x6d0>)
 80025dc:	f7fd ff74 	bl	80004c8 <__aeabi_dmul>
 80025e0:	4603      	mov	r3, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	4618      	mov	r0, r3
 80025e6:	4621      	mov	r1, r4
 80025e8:	f7fe f980 	bl	80008ec <__aeabi_d2iz>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fd3c 	bl	800106c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 0.9);
 80025f4:	4ba8      	ldr	r3, [pc, #672]	; (8002898 <main+0x6c8>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd fefb 	bl	80003f4 <__aeabi_i2d>
 80025fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8002880 <main+0x6b0>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd ff60 	bl	80004c8 <__aeabi_dmul>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4618      	mov	r0, r3
 800260e:	4621      	mov	r1, r4
 8002610:	f7fe f96c 	bl	80008ec <__aeabi_d2iz>
 8002614:	4603      	mov	r3, r0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fcf0 	bl	8000ffc <MotorL_SetPWM>
				  Servo_SetAngle(36);
 800261c:	48a1      	ldr	r0, [pc, #644]	; (80028a4 <main+0x6d4>)
 800261e:	f7fe fd5d 	bl	80010dc <Servo_SetAngle>
				  break;
 8002622:	e057      	b.n	80026d4 <main+0x504>
			  case 0b00000111:
				  MotorR_SetPWM(MaxSpeed * 0.84);
 8002624:	4b9c      	ldr	r3, [pc, #624]	; (8002898 <main+0x6c8>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd fee3 	bl	80003f4 <__aeabi_i2d>
 800262e:	a396      	add	r3, pc, #600	; (adr r3, 8002888 <main+0x6b8>)
 8002630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002634:	f7fd ff48 	bl	80004c8 <__aeabi_dmul>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	4618      	mov	r0, r3
 800263e:	4621      	mov	r1, r4
 8002640:	f7fe f954 	bl	80008ec <__aeabi_d2iz>
 8002644:	4603      	mov	r3, r0
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fd10 	bl	800106c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 800264c:	4b92      	ldr	r3, [pc, #584]	; (8002898 <main+0x6c8>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fcd3 	bl	8000ffc <MotorL_SetPWM>
				  Servo_SetAngle(18);
 8002656:	4894      	ldr	r0, [pc, #592]	; (80028a8 <main+0x6d8>)
 8002658:	f7fe fd40 	bl	80010dc <Servo_SetAngle>
				  break;
 800265c:	e03a      	b.n	80026d4 <main+0x504>
			  case 0b00001110:
				  MotorR_SetPWM(MaxSpeed * 0.87);
 800265e:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <main+0x6c8>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fec6 	bl	80003f4 <__aeabi_i2d>
 8002668:	a389      	add	r3, pc, #548	; (adr r3, 8002890 <main+0x6c0>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ff2b 	bl	80004c8 <__aeabi_dmul>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	4618      	mov	r0, r3
 8002678:	4621      	mov	r1, r4
 800267a:	f7fe f937 	bl	80008ec <__aeabi_d2iz>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fcf3 	bl	800106c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002686:	4b84      	ldr	r3, [pc, #528]	; (8002898 <main+0x6c8>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fcb6 	bl	8000ffc <MotorL_SetPWM>
				  Servo_SetAngle(18);
 8002690:	4885      	ldr	r0, [pc, #532]	; (80028a8 <main+0x6d8>)
 8002692:	f7fe fd23 	bl	80010dc <Servo_SetAngle>
				  break;
 8002696:	e01d      	b.n	80026d4 <main+0x504>
			  case 0b00001100:
				  MotorR_SetPWM(MaxSpeed * 0.9);
 8002698:	4b7f      	ldr	r3, [pc, #508]	; (8002898 <main+0x6c8>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd fea9 	bl	80003f4 <__aeabi_i2d>
 80026a2:	a377      	add	r3, pc, #476	; (adr r3, 8002880 <main+0x6b0>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fd ff0e 	bl	80004c8 <__aeabi_dmul>
 80026ac:	4603      	mov	r3, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	4618      	mov	r0, r3
 80026b2:	4621      	mov	r1, r4
 80026b4:	f7fe f91a 	bl	80008ec <__aeabi_d2iz>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fcd6 	bl	800106c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 80026c0:	4b75      	ldr	r3, [pc, #468]	; (8002898 <main+0x6c8>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fc99 	bl	8000ffc <MotorL_SetPWM>
				  Servo_SetAngle(0);
 80026ca:	f04f 0000 	mov.w	r0, #0
 80026ce:	f7fe fd05 	bl	80010dc <Servo_SetAngle>
				  break;
 80026d2:	bf00      	nop
//			  case 0b00011100:
//				  MotorR_SetPWM(MaxSpeed * 0.95);
//				  MotorL_SetPWM(MaxSpeed * 1);
//				  Servo_SetAngle(0);
		  }
		  continue;
 80026d4:	e0c7      	b.n	8002866 <main+0x696>
	  }
	  if (CarState == LechPhai)
 80026d6:	4b75      	ldr	r3, [pc, #468]	; (80028ac <main+0x6dc>)
 80026d8:	f993 3000 	ldrsb.w	r3, [r3]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	f47f ae24 	bne.w	800232a <main+0x15a>
	  {
		  switch (LineDetect)
 80026e2:	4b73      	ldr	r3, [pc, #460]	; (80028b0 <main+0x6e0>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d00c      	beq.n	8002704 <main+0x534>
 80026ea:	2b80      	cmp	r3, #128	; 0x80
 80026ec:	dc05      	bgt.n	80026fa <main+0x52a>
 80026ee:	2b30      	cmp	r3, #48	; 0x30
 80026f0:	f000 809a 	beq.w	8002828 <main+0x658>
 80026f4:	2b70      	cmp	r3, #112	; 0x70
 80026f6:	d07a      	beq.n	80027ee <main+0x61e>
//			  case 0b00111000:
//				  MotorL_SetPWM(MaxSpeed * 0.95);
//				  MotorR_SetPWM(MaxSpeed * 1);
//				  Servo_SetAngle(-0);
		  }
		  continue;
 80026f8:	e0b6      	b.n	8002868 <main+0x698>
		  switch (LineDetect)
 80026fa:	2bc0      	cmp	r3, #192	; 0xc0
 80026fc:	d02e      	beq.n	800275c <main+0x58c>
 80026fe:	2be0      	cmp	r3, #224	; 0xe0
 8002700:	d058      	beq.n	80027b4 <main+0x5e4>
		  continue;
 8002702:	e0b1      	b.n	8002868 <main+0x698>
				  MotorL_SetPWM(MaxSpeed * 0.60);
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <main+0x6c8>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fe73 	bl	80003f4 <__aeabi_i2d>
 800270e:	a358      	add	r3, pc, #352	; (adr r3, 8002870 <main+0x6a0>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fd fed8 	bl	80004c8 <__aeabi_dmul>
 8002718:	4603      	mov	r3, r0
 800271a:	460c      	mov	r4, r1
 800271c:	4618      	mov	r0, r3
 800271e:	4621      	mov	r1, r4
 8002720:	f7fe f8e4 	bl	80008ec <__aeabi_d2iz>
 8002724:	4603      	mov	r3, r0
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fc68 	bl	8000ffc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.85);
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <main+0x6c8>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd fe5f 	bl	80003f4 <__aeabi_i2d>
 8002736:	a350      	add	r3, pc, #320	; (adr r3, 8002878 <main+0x6a8>)
 8002738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273c:	f7fd fec4 	bl	80004c8 <__aeabi_dmul>
 8002740:	4603      	mov	r3, r0
 8002742:	460c      	mov	r4, r1
 8002744:	4618      	mov	r0, r3
 8002746:	4621      	mov	r1, r4
 8002748:	f7fe f8d0 	bl	80008ec <__aeabi_d2iz>
 800274c:	4603      	mov	r3, r0
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fc8c 	bl	800106c <MotorR_SetPWM>
				  Servo_SetAngle(-54);
 8002754:	4857      	ldr	r0, [pc, #348]	; (80028b4 <main+0x6e4>)
 8002756:	f7fe fcc1 	bl	80010dc <Servo_SetAngle>
				  break;
 800275a:	e083      	b.n	8002864 <main+0x694>
				  MotorL_SetPWM(MaxSpeed * 0.75);
 800275c:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <main+0x6c8>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fe47 	bl	80003f4 <__aeabi_i2d>
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4b4d      	ldr	r3, [pc, #308]	; (80028a0 <main+0x6d0>)
 800276c:	f7fd feac 	bl	80004c8 <__aeabi_dmul>
 8002770:	4603      	mov	r3, r0
 8002772:	460c      	mov	r4, r1
 8002774:	4618      	mov	r0, r3
 8002776:	4621      	mov	r1, r4
 8002778:	f7fe f8b8 	bl	80008ec <__aeabi_d2iz>
 800277c:	4603      	mov	r3, r0
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fc3c 	bl	8000ffc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.9);
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <main+0x6c8>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fe33 	bl	80003f4 <__aeabi_i2d>
 800278e:	a33c      	add	r3, pc, #240	; (adr r3, 8002880 <main+0x6b0>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd fe98 	bl	80004c8 <__aeabi_dmul>
 8002798:	4603      	mov	r3, r0
 800279a:	460c      	mov	r4, r1
 800279c:	4618      	mov	r0, r3
 800279e:	4621      	mov	r1, r4
 80027a0:	f7fe f8a4 	bl	80008ec <__aeabi_d2iz>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fc60 	bl	800106c <MotorR_SetPWM>
				  Servo_SetAngle(-36);
 80027ac:	4842      	ldr	r0, [pc, #264]	; (80028b8 <main+0x6e8>)
 80027ae:	f7fe fc95 	bl	80010dc <Servo_SetAngle>
				  break;
 80027b2:	e057      	b.n	8002864 <main+0x694>
				  MotorL_SetPWM(MaxSpeed * 0.84);
 80027b4:	4b38      	ldr	r3, [pc, #224]	; (8002898 <main+0x6c8>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fe1b 	bl	80003f4 <__aeabi_i2d>
 80027be:	a332      	add	r3, pc, #200	; (adr r3, 8002888 <main+0x6b8>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd fe80 	bl	80004c8 <__aeabi_dmul>
 80027c8:	4603      	mov	r3, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4618      	mov	r0, r3
 80027ce:	4621      	mov	r1, r4
 80027d0:	f7fe f88c 	bl	80008ec <__aeabi_d2iz>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fc10 	bl	8000ffc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 80027dc:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <main+0x6c8>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fc43 	bl	800106c <MotorR_SetPWM>
				  Servo_SetAngle(-18);
 80027e6:	4835      	ldr	r0, [pc, #212]	; (80028bc <main+0x6ec>)
 80027e8:	f7fe fc78 	bl	80010dc <Servo_SetAngle>
				  break;
 80027ec:	e03a      	b.n	8002864 <main+0x694>
				  MotorL_SetPWM(MaxSpeed * 0.87);
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <main+0x6c8>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fdfe 	bl	80003f4 <__aeabi_i2d>
 80027f8:	a325      	add	r3, pc, #148	; (adr r3, 8002890 <main+0x6c0>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	f7fd fe63 	bl	80004c8 <__aeabi_dmul>
 8002802:	4603      	mov	r3, r0
 8002804:	460c      	mov	r4, r1
 8002806:	4618      	mov	r0, r3
 8002808:	4621      	mov	r1, r4
 800280a:	f7fe f86f 	bl	80008ec <__aeabi_d2iz>
 800280e:	4603      	mov	r3, r0
 8002810:	4618      	mov	r0, r3
 8002812:	f7fe fbf3 	bl	8000ffc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <main+0x6c8>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fc26 	bl	800106c <MotorR_SetPWM>
				  Servo_SetAngle(-18);
 8002820:	4826      	ldr	r0, [pc, #152]	; (80028bc <main+0x6ec>)
 8002822:	f7fe fc5b 	bl	80010dc <Servo_SetAngle>
				  break;
 8002826:	e01d      	b.n	8002864 <main+0x694>
				  MotorL_SetPWM(MaxSpeed * 0.9);
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <main+0x6c8>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fde1 	bl	80003f4 <__aeabi_i2d>
 8002832:	a313      	add	r3, pc, #76	; (adr r3, 8002880 <main+0x6b0>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd fe46 	bl	80004c8 <__aeabi_dmul>
 800283c:	4603      	mov	r3, r0
 800283e:	460c      	mov	r4, r1
 8002840:	4618      	mov	r0, r3
 8002842:	4621      	mov	r1, r4
 8002844:	f7fe f852 	bl	80008ec <__aeabi_d2iz>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fbd6 	bl	8000ffc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <main+0x6c8>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe fc09 	bl	800106c <MotorR_SetPWM>
				  Servo_SetAngle(-0);
 800285a:	f04f 0000 	mov.w	r0, #0
 800285e:	f7fe fc3d 	bl	80010dc <Servo_SetAngle>
				  break;
 8002862:	bf00      	nop
		  continue;
 8002864:	e000      	b.n	8002868 <main+0x698>
		  continue;
 8002866:	bf00      	nop
	  LineDetect = 0;
 8002868:	e55f      	b.n	800232a <main+0x15a>
 800286a:	bf00      	nop
 800286c:	f3af 8000 	nop.w
 8002870:	33333333 	.word	0x33333333
 8002874:	3fe33333 	.word	0x3fe33333
 8002878:	33333333 	.word	0x33333333
 800287c:	3feb3333 	.word	0x3feb3333
 8002880:	cccccccd 	.word	0xcccccccd
 8002884:	3feccccc 	.word	0x3feccccc
 8002888:	ae147ae1 	.word	0xae147ae1
 800288c:	3feae147 	.word	0x3feae147
 8002890:	3d70a3d7 	.word	0x3d70a3d7
 8002894:	3febd70a 	.word	0x3febd70a
 8002898:	20000000 	.word	0x20000000
 800289c:	42580000 	.word	0x42580000
 80028a0:	3fe80000 	.word	0x3fe80000
 80028a4:	42100000 	.word	0x42100000
 80028a8:	41900000 	.word	0x41900000
 80028ac:	2000008a 	.word	0x2000008a
 80028b0:	20000089 	.word	0x20000089
 80028b4:	c2580000 	.word	0xc2580000
 80028b8:	c2100000 	.word	0xc2100000
 80028bc:	c1900000 	.word	0xc1900000

080028c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80028c4:	2002      	movs	r0, #2
 80028c6:	f7ff f881 	bl	80019cc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80028ca:	bf00      	nop
 80028cc:	f7ff f892 	bl	80019f4 <LL_FLASH_GetLatency>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d1fa      	bne.n	80028cc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80028d6:	f7fe ff69 	bl	80017ac <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80028da:	bf00      	nop
 80028dc:	f7fe ff74 	bl	80017c8 <LL_RCC_HSE_IsReady>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d1fa      	bne.n	80028dc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80028e6:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80028ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80028ee:	f7ff f80d 	bl	800190c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80028f2:	f7fe ffeb 	bl	80018cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80028f6:	bf00      	nop
 80028f8:	f7fe fff6 	bl	80018e8 <LL_RCC_PLL_IsReady>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d1fa      	bne.n	80028f8 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe ff92 	bl	800182c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002908:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800290c:	f7fe ffa2 	bl	8001854 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fe ffb3 	bl	800187c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002916:	2002      	movs	r0, #2
 8002918:	f7fe ff68 	bl	80017ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800291c:	bf00      	nop
 800291e:	f7fe ff79 	bl	8001814 <LL_RCC_GetSysClkSource>
 8002922:	4603      	mov	r3, r0
 8002924:	2b08      	cmp	r3, #8
 8002926:	d1fa      	bne.n	800291e <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <SystemClock_Config+0x80>)
 800292a:	f002 f8c9 	bl	8004ac0 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 800292e:	4804      	ldr	r0, [pc, #16]	; (8002940 <SystemClock_Config+0x80>)
 8002930:	f002 f8d4 	bl	8004adc <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8002934:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002938:	f7fe ffb4 	bl	80018a4 <LL_RCC_SetADCClockSource>
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	044aa200 	.word	0x044aa200

08002944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800294a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002958:	f107 0318 	add.w	r3, r7, #24
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002976:	f44f 7000 	mov.w	r0, #512	; 0x200
 800297a:	f7ff f80f 	bl	800199c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800297e:	2004      	movs	r0, #4
 8002980:	f7ff f80c 	bl	800199c <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8002984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002988:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4619      	mov	r1, r3
 8002992:	486b      	ldr	r0, [pc, #428]	; (8002b40 <MX_ADC1_Init+0x1fc>)
 8002994:	f001 fa26 	bl	8003de4 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002998:	2200      	movs	r2, #0
 800299a:	2101      	movs	r1, #1
 800299c:	4869      	ldr	r0, [pc, #420]	; (8002b44 <MX_ADC1_Init+0x200>)
 800299e:	f7fe fd75 	bl	800148c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 80029a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a6:	2101      	movs	r1, #1
 80029a8:	4866      	ldr	r0, [pc, #408]	; (8002b44 <MX_ADC1_Init+0x200>)
 80029aa:	f7fe fe3d 	bl	8001628 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80029ae:	2220      	movs	r2, #32
 80029b0:	2101      	movs	r1, #1
 80029b2:	4864      	ldr	r0, [pc, #400]	; (8002b44 <MX_ADC1_Init+0x200>)
 80029b4:	f7fe fd8e 	bl	80014d4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2101      	movs	r1, #1
 80029bc:	4861      	ldr	r0, [pc, #388]	; (8002b44 <MX_ADC1_Init+0x200>)
 80029be:	f7fe fdab 	bl	8001518 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	2101      	movs	r1, #1
 80029c6:	485f      	ldr	r0, [pc, #380]	; (8002b44 <MX_ADC1_Init+0x200>)
 80029c8:	f7fe fdc8 	bl	800155c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80029cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029d0:	2101      	movs	r1, #1
 80029d2:	485c      	ldr	r0, [pc, #368]	; (8002b44 <MX_ADC1_Init+0x200>)
 80029d4:	f7fe fde4 	bl	80015a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80029d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029dc:	2101      	movs	r1, #1
 80029de:	4859      	ldr	r0, [pc, #356]	; (8002b44 <MX_ADC1_Init+0x200>)
 80029e0:	f7fe fe00 	bl	80015e4 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 80029e4:	2208      	movs	r2, #8
 80029e6:	2101      	movs	r1, #1
 80029e8:	4856      	ldr	r0, [pc, #344]	; (8002b44 <MX_ADC1_Init+0x200>)
 80029ea:	f7fe fe3f 	bl	800166c <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &Sensor_ADC_Value);
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <MX_ADC1_Init+0x204>)
 80029f0:	461a      	mov	r2, r3
 80029f2:	2101      	movs	r1, #1
 80029f4:	4853      	ldr	r0, [pc, #332]	; (8002b44 <MX_ADC1_Init+0x200>)
 80029f6:	f7fe fe5b 	bl	80016b0 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 80029fa:	4a54      	ldr	r2, [pc, #336]	; (8002b4c <MX_ADC1_Init+0x208>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	4851      	ldr	r0, [pc, #324]	; (8002b44 <MX_ADC1_Init+0x200>)
 8002a00:	f7fe fe6e 	bl	80016e0 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8002a04:	2101      	movs	r1, #1
 8002a06:	484f      	ldr	r0, [pc, #316]	; (8002b44 <MX_ADC1_Init+0x200>)
 8002a08:	f7fe fd22 	bl	8001450 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	484c      	ldr	r0, [pc, #304]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a1e:	f000 ffaf 	bl	8003980 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4848      	ldr	r0, [pc, #288]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a2e:	f000 ff75 	bl	800391c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002a32:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8002a36:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8002a38:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8002a3c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002a42:	2302      	movs	r3, #2
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002a4c:	f107 0318 	add.w	r3, r7, #24
 8002a50:	4619      	mov	r1, r3
 8002a52:	483f      	ldr	r0, [pc, #252]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a54:	f000 ffbb 	bl	80039ce <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8002a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a60:	483b      	ldr	r0, [pc, #236]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a62:	f7fe fc27 	bl	80012b4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002a66:	2203      	movs	r2, #3
 8002a68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a6c:	4838      	ldr	r0, [pc, #224]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a6e:	f7fe fc66 	bl	800133e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002a72:	4a38      	ldr	r2, [pc, #224]	; (8002b54 <MX_ADC1_Init+0x210>)
 8002a74:	f240 2105 	movw	r1, #517	; 0x205
 8002a78:	4835      	ldr	r0, [pc, #212]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a7a:	f7fe fc1b 	bl	80012b4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002a7e:	2203      	movs	r2, #3
 8002a80:	4934      	ldr	r1, [pc, #208]	; (8002b54 <MX_ADC1_Init+0x210>)
 8002a82:	4833      	ldr	r0, [pc, #204]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a84:	f7fe fc5b 	bl	800133e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8002a88:	4a33      	ldr	r2, [pc, #204]	; (8002b58 <MX_ADC1_Init+0x214>)
 8002a8a:	f240 210a 	movw	r1, #522	; 0x20a
 8002a8e:	4830      	ldr	r0, [pc, #192]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a90:	f7fe fc10 	bl	80012b4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002a94:	2203      	movs	r2, #3
 8002a96:	4930      	ldr	r1, [pc, #192]	; (8002b58 <MX_ADC1_Init+0x214>)
 8002a98:	482d      	ldr	r0, [pc, #180]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002a9a:	f7fe fc50 	bl	800133e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8002a9e:	4a2f      	ldr	r2, [pc, #188]	; (8002b5c <MX_ADC1_Init+0x218>)
 8002aa0:	f240 210f 	movw	r1, #527	; 0x20f
 8002aa4:	482a      	ldr	r0, [pc, #168]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002aa6:	f7fe fc05 	bl	80012b4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002aaa:	2203      	movs	r2, #3
 8002aac:	492b      	ldr	r1, [pc, #172]	; (8002b5c <MX_ADC1_Init+0x218>)
 8002aae:	4828      	ldr	r0, [pc, #160]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002ab0:	f7fe fc45 	bl	800133e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8002ab4:	4a2a      	ldr	r2, [pc, #168]	; (8002b60 <MX_ADC1_Init+0x21c>)
 8002ab6:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002aba:	4825      	ldr	r0, [pc, #148]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002abc:	f7fe fbfa 	bl	80012b4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	4927      	ldr	r1, [pc, #156]	; (8002b60 <MX_ADC1_Init+0x21c>)
 8002ac4:	4822      	ldr	r0, [pc, #136]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002ac6:	f7fe fc3a 	bl	800133e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8002aca:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <MX_ADC1_Init+0x220>)
 8002acc:	f240 2119 	movw	r1, #537	; 0x219
 8002ad0:	481f      	ldr	r0, [pc, #124]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002ad2:	f7fe fbef 	bl	80012b4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	4922      	ldr	r1, [pc, #136]	; (8002b64 <MX_ADC1_Init+0x220>)
 8002ada:	481d      	ldr	r0, [pc, #116]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002adc:	f7fe fc2f 	bl	800133e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8002ae0:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <MX_ADC1_Init+0x224>)
 8002ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ae6:	481a      	ldr	r0, [pc, #104]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002ae8:	f7fe fbe4 	bl	80012b4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002aec:	2203      	movs	r2, #3
 8002aee:	491e      	ldr	r1, [pc, #120]	; (8002b68 <MX_ADC1_Init+0x224>)
 8002af0:	4817      	ldr	r0, [pc, #92]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002af2:	f7fe fc24 	bl	800133e <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <MX_ADC1_Init+0x228>)
 8002af8:	f240 1105 	movw	r1, #261	; 0x105
 8002afc:	4814      	ldr	r0, [pc, #80]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002afe:	f7fe fbd9 	bl	80012b4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002b02:	2203      	movs	r2, #3
 8002b04:	4919      	ldr	r1, [pc, #100]	; (8002b6c <MX_ADC1_Init+0x228>)
 8002b06:	4812      	ldr	r0, [pc, #72]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002b08:	f7fe fc19 	bl	800133e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8002b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b10:	480f      	ldr	r0, [pc, #60]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002b12:	f7fe fc02 	bl	800131a <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 8002b16:	480e      	ldr	r0, [pc, #56]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002b18:	f7fe fc5a 	bl	80013d0 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 8002b1c:	480c      	ldr	r0, [pc, #48]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002b1e:	f7fe fc66 	bl	80013ee <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8002b22:	bf00      	nop
 8002b24:	480a      	ldr	r0, [pc, #40]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002b26:	f7fe fc71 	bl	800140c <LL_ADC_IsCalibrationOnGoing>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f9      	bne.n	8002b24 <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 8002b30:	4807      	ldr	r0, [pc, #28]	; (8002b50 <MX_ADC1_Init+0x20c>)
 8002b32:	f7fe fc7d 	bl	8001430 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8002b36:	bf00      	nop
 8002b38:	3738      	adds	r7, #56	; 0x38
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40010800 	.word	0x40010800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	200000a0 	.word	0x200000a0
 8002b4c:	4001244c 	.word	0x4001244c
 8002b50:	40012400 	.word	0x40012400
 8002b54:	02300001 	.word	0x02300001
 8002b58:	02600002 	.word	0x02600002
 8002b5c:	02900003 	.word	0x02900003
 8002b60:	02c00004 	.word	0x02c00004
 8002b64:	02f00005 	.word	0x02f00005
 8002b68:	03200006 	.word	0x03200006
 8002b6c:	03500007 	.word	0x03500007

08002b70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002b76:	f107 0318 	add.w	r3, r7, #24
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002b96:	2008      	movs	r0, #8
 8002b98:	f7fe ff00 	bl	800199c <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <MX_I2C1_Init+0xa4>)
 8002b9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ba0:	2309      	movs	r3, #9
 8002ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4819      	ldr	r0, [pc, #100]	; (8002c18 <MX_I2C1_Init+0xa8>)
 8002bb2:	f001 f917 	bl	8003de4 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 8002bb6:	f7ff fa6b 	bl	8002090 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002bba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002bbe:	f7fe fed5 	bl	800196c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8002bc2:	4816      	ldr	r0, [pc, #88]	; (8002c1c <MX_I2C1_Init+0xac>)
 8002bc4:	f7fe fde3 	bl	800178e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002bc8:	4814      	ldr	r0, [pc, #80]	; (8002c1c <MX_I2C1_Init+0xac>)
 8002bca:	f7fe fdbf 	bl	800174c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002bce:	4813      	ldr	r0, [pc, #76]	; (8002c1c <MX_I2C1_Init+0xac>)
 8002bd0:	f7fe fdad 	bl	800172e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <MX_I2C1_Init+0xb0>)
 8002bda:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002bea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002bf0:	f107 0318 	add.w	r3, r7, #24
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4809      	ldr	r0, [pc, #36]	; (8002c1c <MX_I2C1_Init+0xac>)
 8002bf8:	f001 fa40 	bl	800407c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4807      	ldr	r0, [pc, #28]	; (8002c1c <MX_I2C1_Init+0xac>)
 8002c00:	f7fe fdb3 	bl	800176a <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8002c04:	4805      	ldr	r0, [pc, #20]	; (8002c1c <MX_I2C1_Init+0xac>)
 8002c06:	f7fe fd83 	bl	8001710 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	3730      	adds	r7, #48	; 0x30
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	04030003 	.word	0x04030003
 8002c18:	40010c00 	.word	0x40010c00
 8002c1c:	40005400 	.word	0x40005400
 8002c20:	000186a0 	.word	0x000186a0

08002c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b098      	sub	sp, #96	; 0x60
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c3e:	2220      	movs	r2, #32
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 ff82 	bl	8004b4c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
 8002c58:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5a:	463b      	mov	r3, r7
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002c68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c6c:	f7fe fe96 	bl	800199c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c76:	2300      	movs	r3, #0
 8002c78:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 8002c7a:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c80:	2300      	movs	r3, #0
 8002c82:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002c8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c8e:	4619      	mov	r1, r3
 8002c90:	483c      	ldr	r0, [pc, #240]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002c92:	f001 fb9b 	bl	80043cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002c96:	483b      	ldr	r0, [pc, #236]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002c98:	f7fe fec7 	bl	8001a2a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4839      	ldr	r0, [pc, #228]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002ca0:	f7fe ff22 	bl	8001ae8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002ca4:	2360      	movs	r3, #96	; 0x60
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2101      	movs	r1, #1
 8002ccc:	482d      	ldr	r0, [pc, #180]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002cce:	f001 fbdb 	bl	8004488 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	482b      	ldr	r0, [pc, #172]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002cd6:	f7fe fec5 	bl	8001a64 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cde:	4829      	ldr	r0, [pc, #164]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002ce0:	f7fe ff02 	bl	8001ae8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cf6:	4823      	ldr	r0, [pc, #140]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002cf8:	f001 fbc6 	bl	8004488 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d00:	4820      	ldr	r0, [pc, #128]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002d02:	f7fe feaf 	bl	8001a64 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002d06:	2100      	movs	r1, #0
 8002d08:	481e      	ldr	r0, [pc, #120]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002d0a:	f7ff f8b7 	bl	8001e7c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002d0e:	481d      	ldr	r0, [pc, #116]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002d10:	f7ff f8c6 	bl	8001ea0 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4812      	ldr	r0, [pc, #72]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002d3c:	f001 fbdc 	bl	80044f8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8002d40:	4810      	ldr	r0, [pc, #64]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002d42:	f7ff f8f2 	bl	8001f2a <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM1,0);
 8002d46:	2100      	movs	r1, #0
 8002d48:	480e      	ldr	r0, [pc, #56]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002d4a:	f7fe fe7d 	bl	8001a48 <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8002d4e:	480d      	ldr	r0, [pc, #52]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002d50:	f7ff f8b5 	bl	8001ebe <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8002d54:	480b      	ldr	r0, [pc, #44]	; (8002d84 <MX_TIM1_Init+0x160>)
 8002d56:	f7fe fe59 	bl	8001a0c <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002d5a:	2004      	movs	r0, #4
 8002d5c:	f7fe fe1e 	bl	800199c <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <MX_TIM1_Init+0x164>)
 8002d62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d64:	2309      	movs	r3, #9
 8002d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	463b      	mov	r3, r7
 8002d72:	4619      	mov	r1, r3
 8002d74:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_TIM1_Init+0x168>)
 8002d76:	f001 f835 	bl	8003de4 <LL_GPIO_Init>

}
 8002d7a:	bf00      	nop
 8002d7c:	3760      	adds	r7, #96	; 0x60
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	04050005 	.word	0x04050005
 8002d8c:	40010800 	.word	0x40010800

08002d90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da6:	463b      	mov	r3, r7
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f7fe fdd9 	bl	800196c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002dba:	2004      	movs	r0, #4
 8002dbc:	f7fe fdee 	bl	800199c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002dc0:	2008      	movs	r0, #8
 8002dc2:	f7fe fdeb 	bl	800199c <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <MX_TIM2_Init+0x154>)
 8002dc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002dca:	2304      	movs	r3, #4
 8002dcc:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	463b      	mov	r3, r7
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4845      	ldr	r0, [pc, #276]	; (8002ee8 <MX_TIM2_Init+0x158>)
 8002dd4:	f001 f806 	bl	8003de4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002dd8:	f640 0308 	movw	r3, #2056	; 0x808
 8002ddc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002dde:	2304      	movs	r3, #4
 8002de0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de2:	463b      	mov	r3, r7
 8002de4:	4619      	mov	r1, r3
 8002de6:	4841      	ldr	r0, [pc, #260]	; (8002eec <MX_TIM2_Init+0x15c>)
 8002de8:	f000 fffc 	bl	8003de4 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002dec:	f7fe f9dc 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2200      	movs	r2, #0
 8002df4:	2102      	movs	r1, #2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fa2a 	bl	8001250 <NVIC_EncodePriority>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4619      	mov	r1, r3
 8002e00:	201c      	movs	r0, #28
 8002e02:	f7fe f9fb 	bl	80011fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002e06:	201c      	movs	r0, #28
 8002e08:	f7fe f9dc 	bl	80011c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8002e0c:	f7ff f960 	bl	80020d0 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8002e10:	2103      	movs	r1, #3
 8002e12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e16:	f7ff f81f 	bl	8001e58 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002e1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e1e:	2101      	movs	r1, #1
 8002e20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e24:	f7fe fee4 	bl	8001bf0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e30:	f7fe ff28 	bl	8001c84 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2101      	movs	r1, #1
 8002e38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e3c:	f7fe ff6c 	bl	8001d18 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002e40:	2200      	movs	r2, #0
 8002e42:	2101      	movs	r1, #1
 8002e44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e48:	f7fe ffb0 	bl	8001dac <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002e4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e50:	2110      	movs	r1, #16
 8002e52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e56:	f7fe fecb 	bl	8001bf0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e62:	f7fe ff0f 	bl	8001c84 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2110      	movs	r1, #16
 8002e6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e6e:	f7fe ff53 	bl	8001d18 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2110      	movs	r1, #16
 8002e76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e7a:	f7fe ff97 	bl	8001dac <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e8a:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	4619      	mov	r1, r3
 8002e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e9a:	f001 fa97 	bl	80043cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002e9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ea2:	f7fe fdc2 	bl	8001a2a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eac:	f7fe ffe6 	bl	8001e7c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002eb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eb4:	f7fe fff4 	bl	8001ea0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2,0);
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ebe:	f7fe fdc3 	bl	8001a48 <LL_TIM_SetCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 8002ec2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ec6:	f7ff f809 	bl	8001edc <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8002eca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ece:	f7ff f82c 	bl	8001f2a <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8002ed2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ed6:	f7fe fd99 	bl	8001a0c <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	04800080 	.word	0x04800080
 8002ee8:	40010800 	.word	0x40010800
 8002eec:	40010c00 	.word	0x40010c00

08002ef0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f06:	463b      	mov	r3, r7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002f14:	2002      	movs	r0, #2
 8002f16:	f7fe fd29 	bl	800196c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002f1a:	2008      	movs	r0, #8
 8002f1c:	f7fe fd3e 	bl	800199c <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002f20:	f243 0330 	movw	r3, #12336	; 0x3030
 8002f24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002f26:	2304      	movs	r3, #4
 8002f28:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	463b      	mov	r3, r7
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4836      	ldr	r0, [pc, #216]	; (8003008 <MX_TIM3_Init+0x118>)
 8002f30:	f000 ff58 	bl	8003de4 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002f34:	f7fe f938 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f986 	bl	8001250 <NVIC_EncodePriority>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4619      	mov	r1, r3
 8002f48:	201d      	movs	r0, #29
 8002f4a:	f7fe f957 	bl	80011fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002f4e:	201d      	movs	r0, #29
 8002f50:	f7fe f938 	bl	80011c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 8002f54:	f7ff f8cc 	bl	80020f0 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002f58:	2103      	movs	r1, #3
 8002f5a:	482c      	ldr	r0, [pc, #176]	; (800300c <MX_TIM3_Init+0x11c>)
 8002f5c:	f7fe ff7c 	bl	8001e58 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002f60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f64:	2101      	movs	r1, #1
 8002f66:	4829      	ldr	r0, [pc, #164]	; (800300c <MX_TIM3_Init+0x11c>)
 8002f68:	f7fe fe42 	bl	8001bf0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2101      	movs	r1, #1
 8002f70:	4826      	ldr	r0, [pc, #152]	; (800300c <MX_TIM3_Init+0x11c>)
 8002f72:	f7fe fe87 	bl	8001c84 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4824      	ldr	r0, [pc, #144]	; (800300c <MX_TIM3_Init+0x11c>)
 8002f7c:	f7fe fecc 	bl	8001d18 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2101      	movs	r1, #1
 8002f84:	4821      	ldr	r0, [pc, #132]	; (800300c <MX_TIM3_Init+0x11c>)
 8002f86:	f7fe ff11 	bl	8001dac <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002f8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f8e:	2110      	movs	r1, #16
 8002f90:	481e      	ldr	r0, [pc, #120]	; (800300c <MX_TIM3_Init+0x11c>)
 8002f92:	f7fe fe2d 	bl	8001bf0 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2110      	movs	r1, #16
 8002f9a:	481c      	ldr	r0, [pc, #112]	; (800300c <MX_TIM3_Init+0x11c>)
 8002f9c:	f7fe fe72 	bl	8001c84 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2110      	movs	r1, #16
 8002fa4:	4819      	ldr	r0, [pc, #100]	; (800300c <MX_TIM3_Init+0x11c>)
 8002fa6:	f7fe feb7 	bl	8001d18 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2110      	movs	r1, #16
 8002fae:	4817      	ldr	r0, [pc, #92]	; (800300c <MX_TIM3_Init+0x11c>)
 8002fb0:	f7fe fefc 	bl	8001dac <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fc0:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	480f      	ldr	r0, [pc, #60]	; (800300c <MX_TIM3_Init+0x11c>)
 8002fce:	f001 f9fd 	bl	80043cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002fd2:	480e      	ldr	r0, [pc, #56]	; (800300c <MX_TIM3_Init+0x11c>)
 8002fd4:	f7fe fd29 	bl	8001a2a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002fd8:	2100      	movs	r1, #0
 8002fda:	480c      	ldr	r0, [pc, #48]	; (800300c <MX_TIM3_Init+0x11c>)
 8002fdc:	f7fe ff4e 	bl	8001e7c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002fe0:	480a      	ldr	r0, [pc, #40]	; (800300c <MX_TIM3_Init+0x11c>)
 8002fe2:	f7fe ff5d 	bl	8001ea0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3,0);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4808      	ldr	r0, [pc, #32]	; (800300c <MX_TIM3_Init+0x11c>)
 8002fea:	f7fe fd2d 	bl	8001a48 <LL_TIM_SetCounter>
   LL_TIM_EnableCounter(TIM3);
 8002fee:	4807      	ldr	r0, [pc, #28]	; (800300c <MX_TIM3_Init+0x11c>)
 8002ff0:	f7fe fd0c 	bl	8001a0c <LL_TIM_EnableCounter>
   LL_TIM_ClearFlag_UPDATE(TIM3);
 8002ff4:	4805      	ldr	r0, [pc, #20]	; (800300c <MX_TIM3_Init+0x11c>)
 8002ff6:	f7fe ff71 	bl	8001edc <LL_TIM_ClearFlag_UPDATE>
   LL_TIM_EnableIT_UPDATE(TIM3);
 8002ffa:	4804      	ldr	r0, [pc, #16]	; (800300c <MX_TIM3_Init+0x11c>)
 8002ffc:	f7fe ff95 	bl	8001f2a <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	3728      	adds	r7, #40	; 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40010c00 	.word	0x40010c00
 800300c:	40000400 	.word	0x40000400

08003010 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08e      	sub	sp, #56	; 0x38
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
 8003024:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003026:	1d3b      	adds	r3, r7, #4
 8003028:	2220      	movs	r2, #32
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f001 fd8d 	bl	8004b4c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003032:	2004      	movs	r0, #4
 8003034:	f7fe fc9a 	bl	800196c <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003038:	f7fe f8b6 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800303c:	4603      	mov	r3, r0
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f904 	bl	8001250 <NVIC_EncodePriority>
 8003048:	4603      	mov	r3, r0
 800304a:	4619      	mov	r1, r3
 800304c:	201e      	movs	r0, #30
 800304e:	f7fe f8d5 	bl	80011fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8003052:	201e      	movs	r0, #30
 8003054:	f7fe f8b6 	bl	80011c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 24;
 8003058:	2318      	movs	r3, #24
 800305a:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800305c:	2300      	movs	r3, #0
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 59999;
 8003060:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003066:	2300      	movs	r3, #0
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800306a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306e:	4619      	mov	r1, r3
 8003070:	482d      	ldr	r0, [pc, #180]	; (8003128 <MX_TIM4_Init+0x118>)
 8003072:	f001 f9ab 	bl	80043cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8003076:	482c      	ldr	r0, [pc, #176]	; (8003128 <MX_TIM4_Init+0x118>)
 8003078:	f7fe fcd7 	bl	8001a2a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 800307c:	2100      	movs	r1, #0
 800307e:	482a      	ldr	r0, [pc, #168]	; (8003128 <MX_TIM4_Init+0x118>)
 8003080:	f7fe fed6 	bl	8001e30 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8003084:	2101      	movs	r1, #1
 8003086:	4828      	ldr	r0, [pc, #160]	; (8003128 <MX_TIM4_Init+0x118>)
 8003088:	f7fe fd2e 	bl	8001ae8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800308c:	2360      	movs	r3, #96	; 0x60
 800308e:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 4500;
 8003098:	f241 1394 	movw	r3, #4500	; 0x1194
 800309c:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	461a      	mov	r2, r3
 80030a6:	2101      	movs	r1, #1
 80030a8:	481f      	ldr	r0, [pc, #124]	; (8003128 <MX_TIM4_Init+0x118>)
 80030aa:	f001 f9ed 	bl	8004488 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 80030ae:	2101      	movs	r1, #1
 80030b0:	481d      	ldr	r0, [pc, #116]	; (8003128 <MX_TIM4_Init+0x118>)
 80030b2:	f7fe fcd7 	bl	8001a64 <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	461a      	mov	r2, r3
 80030c6:	2110      	movs	r1, #16
 80030c8:	4817      	ldr	r0, [pc, #92]	; (8003128 <MX_TIM4_Init+0x118>)
 80030ca:	f001 f9dd 	bl	8004488 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 80030ce:	2110      	movs	r1, #16
 80030d0:	4815      	ldr	r0, [pc, #84]	; (8003128 <MX_TIM4_Init+0x118>)
 80030d2:	f7fe fcc7 	bl	8001a64 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80030d6:	2100      	movs	r1, #0
 80030d8:	4813      	ldr	r0, [pc, #76]	; (8003128 <MX_TIM4_Init+0x118>)
 80030da:	f7fe fecf 	bl	8001e7c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <MX_TIM4_Init+0x118>)
 80030e0:	f7fe fede 	bl	8001ea0 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 80030e4:	2101      	movs	r1, #1
 80030e6:	4810      	ldr	r0, [pc, #64]	; (8003128 <MX_TIM4_Init+0x118>)
 80030e8:	f7fe fd40 	bl	8001b6c <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM4_Init 2 */

  LL_TIM_EnableIT_UPDATE(TIM4);
 80030ec:	480e      	ldr	r0, [pc, #56]	; (8003128 <MX_TIM4_Init+0x118>)
 80030ee:	f7fe ff1c 	bl	8001f2a <LL_TIM_EnableIT_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM4);
 80030f2:	480d      	ldr	r0, [pc, #52]	; (8003128 <MX_TIM4_Init+0x118>)
 80030f4:	f7fe fef2 	bl	8001edc <LL_TIM_ClearFlag_UPDATE>

  LL_TIM_EnableIT_CC1(TIM4);
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <MX_TIM4_Init+0x118>)
 80030fa:	f7fe ff25 	bl	8001f48 <LL_TIM_EnableIT_CC1>
  LL_TIM_ClearFlag_CC1(TIM4);
 80030fe:	480a      	ldr	r0, [pc, #40]	; (8003128 <MX_TIM4_Init+0x118>)
 8003100:	f7fe fef9 	bl	8001ef6 <LL_TIM_ClearFlag_CC1>
//
  LL_TIM_EnableIT_CC2(TIM4);
 8003104:	4808      	ldr	r0, [pc, #32]	; (8003128 <MX_TIM4_Init+0x118>)
 8003106:	f7fe ff2e 	bl	8001f66 <LL_TIM_EnableIT_CC2>
  LL_TIM_ClearFlag_CC2(TIM4);
 800310a:	4807      	ldr	r0, [pc, #28]	; (8003128 <MX_TIM4_Init+0x118>)
 800310c:	f7fe ff00 	bl	8001f10 <LL_TIM_ClearFlag_CC2>


  LL_TIM_SetCounter(TIM4,0);
 8003110:	2100      	movs	r1, #0
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <MX_TIM4_Init+0x118>)
 8003114:	f7fe fc98 	bl	8001a48 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM4);
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <MX_TIM4_Init+0x118>)
 800311a:	f7fe fc77 	bl	8001a0c <LL_TIM_EnableCounter>


  /* USER CODE END TIM4_Init 2 */

}
 800311e:	bf00      	nop
 8003120:	3738      	adds	r7, #56	; 0x38
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40000800 	.word	0x40000800

0800312c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08c      	sub	sp, #48	; 0x30
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	611a      	str	r2, [r3, #16]
 8003142:	615a      	str	r2, [r3, #20]
 8003144:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003146:	463b      	mov	r3, r7
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003154:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003158:	f7fe fc20 	bl	800199c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800315c:	2008      	movs	r0, #8
 800315e:	f7fe fc1d 	bl	800199c <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8003162:	f244 0340 	movw	r3, #16448	; 0x4040
 8003166:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003168:	2309      	movs	r3, #9
 800316a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800316c:	2303      	movs	r3, #3
 800316e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	463b      	mov	r3, r7
 8003176:	4619      	mov	r1, r3
 8003178:	481f      	ldr	r0, [pc, #124]	; (80031f8 <MX_USART1_UART_Init+0xcc>)
 800317a:	f000 fe33 	bl	8003de4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800317e:	f248 0380 	movw	r3, #32896	; 0x8080
 8003182:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003184:	2304      	movs	r3, #4
 8003186:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003188:	463b      	mov	r3, r7
 800318a:	4619      	mov	r1, r3
 800318c:	481a      	ldr	r0, [pc, #104]	; (80031f8 <MX_USART1_UART_Init+0xcc>)
 800318e:	f000 fe29 	bl	8003de4 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8003192:	f7fe ff8d 	bl	80020b0 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003196:	f7fe f807 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800319a:	4603      	mov	r3, r0
 800319c:	2200      	movs	r2, #0
 800319e:	2102      	movs	r1, #2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe f855 	bl	8001250 <NVIC_EncodePriority>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4619      	mov	r1, r3
 80031aa:	2025      	movs	r0, #37	; 0x25
 80031ac:	f7fe f826 	bl	80011fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80031b0:	2025      	movs	r0, #37	; 0x25
 80031b2:	f7fe f807 	bl	80011c4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80031b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031ba:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 80031bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c0:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80031ca:	230c      	movs	r3, #12
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	4807      	ldr	r0, [pc, #28]	; (80031fc <MX_USART1_UART_Init+0xd0>)
 80031de:	f001 fbf5 	bl	80049cc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80031e2:	4806      	ldr	r0, [pc, #24]	; (80031fc <MX_USART1_UART_Init+0xd0>)
 80031e4:	f7fe fedd 	bl	8001fa2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80031e8:	4804      	ldr	r0, [pc, #16]	; (80031fc <MX_USART1_UART_Init+0xd0>)
 80031ea:	f7fe fecb 	bl	8001f84 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ee:	bf00      	nop
 80031f0:	3730      	adds	r7, #48	; 0x30
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40010c00 	.word	0x40010c00
 80031fc:	40013800 	.word	0x40013800

08003200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003204:	2001      	movs	r0, #1
 8003206:	f7fe fb99 	bl	800193c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800320a:	f7fd ffcd 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800320e:	4603      	mov	r3, r0
 8003210:	2200      	movs	r2, #0
 8003212:	2101      	movs	r1, #1
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe f81b 	bl	8001250 <NVIC_EncodePriority>
 800321a:	4603      	mov	r3, r0
 800321c:	4619      	mov	r1, r3
 800321e:	200b      	movs	r0, #11
 8003220:	f7fd ffec 	bl	80011fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003224:	200b      	movs	r0, #11
 8003226:	f7fd ffcd 	bl	80011c4 <__NVIC_EnableIRQ>

}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8003236:	f107 0318 	add.w	r3, r7, #24
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 800324e:	2010      	movs	r0, #16
 8003250:	f7fe fba4 	bl	800199c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003254:	2020      	movs	r0, #32
 8003256:	f7fe fba1 	bl	800199c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800325a:	2004      	movs	r0, #4
 800325c:	f7fe fb9e 	bl	800199c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003260:	2008      	movs	r0, #8
 8003262:	f7fe fb9b 	bl	800199c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8003266:	494c      	ldr	r1, [pc, #304]	; (8003398 <MX_GPIO_Init+0x168>)
 8003268:	484c      	ldr	r0, [pc, #304]	; (800339c <MX_GPIO_Init+0x16c>)
 800326a:	f7fe ff01 	bl	8002070 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800326e:	494c      	ldr	r1, [pc, #304]	; (80033a0 <MX_GPIO_Init+0x170>)
 8003270:	484c      	ldr	r0, [pc, #304]	; (80033a4 <MX_GPIO_Init+0x174>)
 8003272:	f7fe fefd 	bl	8002070 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 8003276:	494c      	ldr	r1, [pc, #304]	; (80033a8 <MX_GPIO_Init+0x178>)
 8003278:	484c      	ldr	r0, [pc, #304]	; (80033ac <MX_GPIO_Init+0x17c>)
 800327a:	f7fe fef9 	bl	8002070 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <MX_GPIO_Init+0x168>)
 8003280:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003282:	2301      	movs	r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003286:	2302      	movs	r3, #2
 8003288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4842      	ldr	r0, [pc, #264]	; (800339c <MX_GPIO_Init+0x16c>)
 8003294:	f000 fda6 	bl	8003de4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003298:	4b41      	ldr	r3, [pc, #260]	; (80033a0 <MX_GPIO_Init+0x170>)
 800329a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800329c:	2301      	movs	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	483d      	ldr	r0, [pc, #244]	; (80033a4 <MX_GPIO_Init+0x174>)
 80032ae:	f000 fd99 	bl	8003de4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80032b2:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <MX_GPIO_Init+0x180>)
 80032b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032b6:	2301      	movs	r3, #1
 80032b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80032ba:	2302      	movs	r3, #2
 80032bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4839      	ldr	r0, [pc, #228]	; (80033ac <MX_GPIO_Init+0x17c>)
 80032c8:	f000 fd8c 	bl	8003de4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80032cc:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <MX_GPIO_Init+0x184>)
 80032ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032d0:	2301      	movs	r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4832      	ldr	r0, [pc, #200]	; (80033ac <MX_GPIO_Init+0x17c>)
 80032e2:	f000 fd7f 	bl	8003de4 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 80032e6:	4934      	ldr	r1, [pc, #208]	; (80033b8 <MX_GPIO_Init+0x188>)
 80032e8:	2001      	movs	r0, #1
 80032ea:	f7fe ff29 	bl	8002140 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 80032ee:	4933      	ldr	r1, [pc, #204]	; (80033bc <MX_GPIO_Init+0x18c>)
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7fe ff25 	bl	8002140 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 80032f6:	4932      	ldr	r1, [pc, #200]	; (80033c0 <MX_GPIO_Init+0x190>)
 80032f8:	2001      	movs	r0, #1
 80032fa:	f7fe ff21 	bl	8002140 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80032fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003302:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003304:	2301      	movs	r3, #1
 8003306:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003308:	2300      	movs	r3, #0
 800330a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800330c:	2301      	movs	r3, #1
 800330e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003310:	f107 0318 	add.w	r3, r7, #24
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fc31 	bl	8003b7c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800331a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800331e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003320:	2301      	movs	r3, #1
 8003322:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003324:	2300      	movs	r3, #0
 8003326:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003328:	2301      	movs	r3, #1
 800332a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800332c:	f107 0318 	add.w	r3, r7, #24
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fc23 	bl	8003b7c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8003336:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800333a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800333c:	2301      	movs	r3, #1
 800333e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003340:	2300      	movs	r3, #0
 8003342:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003344:	2301      	movs	r3, #1
 8003346:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003348:	f107 0318 	add.w	r3, r7, #24
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fc15 	bl	8003b7c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8003352:	2204      	movs	r2, #4
 8003354:	491b      	ldr	r1, [pc, #108]	; (80033c4 <MX_GPIO_Init+0x194>)
 8003356:	4813      	ldr	r0, [pc, #76]	; (80033a4 <MX_GPIO_Init+0x174>)
 8003358:	f7fe fe58 	bl	800200c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 800335c:	2204      	movs	r2, #4
 800335e:	490e      	ldr	r1, [pc, #56]	; (8003398 <MX_GPIO_Init+0x168>)
 8003360:	4810      	ldr	r0, [pc, #64]	; (80033a4 <MX_GPIO_Init+0x174>)
 8003362:	f7fe fe53 	bl	800200c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8003366:	2204      	movs	r2, #4
 8003368:	4917      	ldr	r1, [pc, #92]	; (80033c8 <MX_GPIO_Init+0x198>)
 800336a:	480e      	ldr	r0, [pc, #56]	; (80033a4 <MX_GPIO_Init+0x174>)
 800336c:	f7fe fe4e 	bl	800200c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003370:	f7fd ff1a 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8003374:	4603      	mov	r3, r0
 8003376:	2200      	movs	r2, #0
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd ff68 	bl	8001250 <NVIC_EncodePriority>
 8003380:	4603      	mov	r3, r0
 8003382:	4619      	mov	r1, r3
 8003384:	2028      	movs	r0, #40	; 0x28
 8003386:	f7fd ff39 	bl	80011fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800338a:	2028      	movs	r0, #40	; 0x28
 800338c:	f7fd ff1a 	bl	80011c4 <__NVIC_EnableIRQ>

}
 8003390:	bf00      	nop
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	04200020 	.word	0x04200020
 800339c:	40011000 	.word	0x40011000
 80033a0:	04800080 	.word	0x04800080
 80033a4:	40010c00 	.word	0x40010c00
 80033a8:	040a000a 	.word	0x040a000a
 80033ac:	40010800 	.word	0x40010800
 80033b0:	04020002 	.word	0x04020002
 80033b4:	04080008 	.word	0x04080008
 80033b8:	000f0003 	.word	0x000f0003
 80033bc:	00f00003 	.word	0x00f00003
 80033c0:	0f000003 	.word	0x0f000003
 80033c4:	04100010 	.word	0x04100010
 80033c8:	04400040 	.word	0x04400040

080033cc <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4013      	ands	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	429a      	cmp	r2, r3
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40010400 	.word	0x40010400

080033f8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003400:	4a03      	ldr	r2, [pc, #12]	; (8003410 <LL_EXTI_ClearFlag_0_31+0x18>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6153      	str	r3, [r2, #20]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40010400 	.word	0x40010400

08003414 <LL_TIM_ClearFlag_UPDATE>:
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f06f 0201 	mvn.w	r2, #1
 8003422:	611a      	str	r2, [r3, #16]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <LL_TIM_IsActiveFlag_UPDATE>:
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <LL_TIM_ClearFlag_CC1>:
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f06f 0202 	mvn.w	r2, #2
 8003460:	611a      	str	r2, [r3, #16]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <LL_TIM_IsActiveFlag_CC1>:
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d101      	bne.n	8003484 <LL_TIM_IsActiveFlag_CC1+0x18>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <LL_TIM_ClearFlag_CC2>:
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f06f 0204 	mvn.w	r2, #4
 800349e:	611a      	str	r2, [r3, #16]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <LL_TIM_IsActiveFlag_CC2>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d101      	bne.n	80034c2 <LL_TIM_IsActiveFlag_CC2+0x18>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <LL_GPIO_SetOutputPin>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	611a      	str	r2, [r3, #16]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <LL_GPIO_ResetOutputPin>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	615a      	str	r2, [r3, #20]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <LL_GPIO_TogglePin>:
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	b29b      	uxth	r3, r3
 800351e:	405a      	eors	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800353e:	e7fe      	b.n	800353e <HardFault_Handler+0x4>

08003540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003544:	e7fe      	b.n	8003544 <MemManage_Handler+0x4>

08003546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003546:	b480      	push	{r7}
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800354a:	e7fe      	b.n	800354a <BusFault_Handler+0x4>

0800354c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003550:	e7fe      	b.n	8003550 <UsageFault_Handler+0x4>

08003552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
	...

08003578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <SysTick_Handler+0x18>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	4a03      	ldr	r2, [pc, #12]	; (8003590 <SysTick_Handler+0x18>)
 8003584:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000008c 	.word	0x2000008c

08003594 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr

080035a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 80035a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035a8:	f7ff ff34 	bl	8003414 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <TIM3_IRQHandler+0x10>)
 80035b6:	f7ff ff2d 	bl	8003414 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40000400 	.word	0x40000400

080035c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 80035ca:	481b      	ldr	r0, [pc, #108]	; (8003638 <TIM4_IRQHandler+0x74>)
 80035cc:	f7ff ff4e 	bl	800346c <LL_TIM_IsActiveFlag_CC1>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <TIM4_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 80035d6:	4818      	ldr	r0, [pc, #96]	; (8003638 <TIM4_IRQHandler+0x74>)
 80035d8:	f7ff ff3b 	bl	8003452 <LL_TIM_ClearFlag_CC1>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80035dc:	4917      	ldr	r1, [pc, #92]	; (800363c <TIM4_IRQHandler+0x78>)
 80035de:	4818      	ldr	r0, [pc, #96]	; (8003640 <TIM4_IRQHandler+0x7c>)
 80035e0:	f7ff ff84 	bl	80034ec <LL_GPIO_ResetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 80035e4:	4814      	ldr	r0, [pc, #80]	; (8003638 <TIM4_IRQHandler+0x74>)
 80035e6:	f7ff ff22 	bl	800342e <LL_TIM_IsActiveFlag_UPDATE>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d006      	beq.n	80035fe <TIM4_IRQHandler+0x3a>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 80035f0:	4811      	ldr	r0, [pc, #68]	; (8003638 <TIM4_IRQHandler+0x74>)
 80035f2:	f7ff ff0f 	bl	8003414 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80035f6:	4911      	ldr	r1, [pc, #68]	; (800363c <TIM4_IRQHandler+0x78>)
 80035f8:	4811      	ldr	r0, [pc, #68]	; (8003640 <TIM4_IRQHandler+0x7c>)
 80035fa:	f7ff ff68 	bl	80034ce <LL_GPIO_SetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_CC2(TIM4))
 80035fe:	480e      	ldr	r0, [pc, #56]	; (8003638 <TIM4_IRQHandler+0x74>)
 8003600:	f7ff ff53 	bl	80034aa <LL_TIM_IsActiveFlag_CC2>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <TIM4_IRQHandler+0x6c>
	{
		LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
 800360a:	490e      	ldr	r1, [pc, #56]	; (8003644 <TIM4_IRQHandler+0x80>)
 800360c:	480e      	ldr	r0, [pc, #56]	; (8003648 <TIM4_IRQHandler+0x84>)
 800360e:	f7ff ff7c 	bl	800350a <LL_GPIO_TogglePin>
		uint16_t newCPR = TIM4->CNT + AddCPRTime - 1;
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <TIM4_IRQHandler+0x74>)
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	b29a      	uxth	r2, r3
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <TIM4_IRQHandler+0x88>)
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	4413      	add	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	80fb      	strh	r3, [r7, #6]
		TIM4->CCR2 = newCPR;
 8003624:	4a04      	ldr	r2, [pc, #16]	; (8003638 <TIM4_IRQHandler+0x74>)
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	6393      	str	r3, [r2, #56]	; 0x38
		LL_TIM_ClearFlag_CC2(TIM4);
 800362a:	4803      	ldr	r0, [pc, #12]	; (8003638 <TIM4_IRQHandler+0x74>)
 800362c:	f7ff ff30 	bl	8003490 <LL_TIM_ClearFlag_CC2>
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40000800 	.word	0x40000800
 800363c:	04080008 	.word	0x04080008
 8003640:	40010800 	.word	0x40010800
 8003644:	04200020 	.word	0x04200020
 8003648:	40011000 	.word	0x40011000
 800364c:	20000090 	.word	0x20000090

08003650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8003660:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003664:	f7ff feb2 	bl	80033cc <LL_EXTI_IsActiveFlag_0_31>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d006      	beq.n	800367c <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 800366e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003672:	f7ff fec1 	bl	80033f8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <EXTI15_10_IRQHandler+0x50>)
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 800367c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003680:	f7ff fea4 	bl	80033cc <LL_EXTI_IsActiveFlag_0_31>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <EXTI15_10_IRQHandler+0x36>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 800368a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800368e:	f7ff feb3 	bl	80033f8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003692:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003696:	f7ff fe99 	bl	80033cc <LL_EXTI_IsActiveFlag_0_31>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <EXTI15_10_IRQHandler+0x4c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80036a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80036a4:	f7ff fea8 	bl	80033f8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000088 	.word	0x20000088

080036b0 <OC2_IT_Setmillis>:
{
	return RunTimeMillis;
}

void OC2_IT_Setmillis(float newTime)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	AddCPRTime = newTime * 3000;
 80036b8:	490b      	ldr	r1, [pc, #44]	; (80036e8 <OC2_IT_Setmillis+0x38>)
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd fa4c 	bl	8000b58 <__aeabi_fmul>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fc0e 	bl	8000ee4 <__aeabi_f2uiz>
 80036c8:	4603      	mov	r3, r0
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <OC2_IT_Setmillis+0x3c>)
 80036ce:	801a      	strh	r2, [r3, #0]
	TIM4->CNT = 0;
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <OC2_IT_Setmillis+0x40>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CCR2 = AddCPRTime;
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <OC2_IT_Setmillis+0x3c>)
 80036d8:	881a      	ldrh	r2, [r3, #0]
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <OC2_IT_Setmillis+0x40>)
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	453b8000 	.word	0x453b8000
 80036ec:	20000090 	.word	0x20000090
 80036f0:	40000800 	.word	0x40000800

080036f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e00a      	b.n	800371c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003706:	f3af 8000 	nop.w
 800370a:	4601      	mov	r1, r0
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	60ba      	str	r2, [r7, #8]
 8003712:	b2ca      	uxtb	r2, r1
 8003714:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	dbf0      	blt.n	8003706 <_read+0x12>
	}

return len;
 8003724:	687b      	ldr	r3, [r7, #4]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e009      	b.n	8003754 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	60ba      	str	r2, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fd27 	bl	800219c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	3301      	adds	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	dbf1      	blt.n	8003740 <_write+0x12>
	}
	return len;
 800375c:	687b      	ldr	r3, [r7, #4]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <_close>:

int _close(int file)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
	return -1;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800378c:	605a      	str	r2, [r3, #4]
	return 0;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
	return 0;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
	...

080037b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <_sbrk+0x5c>)
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <_sbrk+0x60>)
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <_sbrk+0x64>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <_sbrk+0x64>)
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <_sbrk+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <_sbrk+0x64>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d207      	bcs.n	80037f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e4:	f001 f988 	bl	8004af8 <__errno>
 80037e8:	4602      	mov	r2, r0
 80037ea:	230c      	movs	r3, #12
 80037ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	e009      	b.n	8003808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <_sbrk+0x64>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <_sbrk+0x64>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <_sbrk+0x64>)
 8003804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20005000 	.word	0x20005000
 8003814:	00000400 	.word	0x00000400
 8003818:	20000094 	.word	0x20000094
 800381c:	200000b8 	.word	0x200000b8

08003820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003824:	4b15      	ldr	r3, [pc, #84]	; (800387c <SystemInit+0x5c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a14      	ldr	r2, [pc, #80]	; (800387c <SystemInit+0x5c>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <SystemInit+0x5c>)
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4911      	ldr	r1, [pc, #68]	; (800387c <SystemInit+0x5c>)
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <SystemInit+0x60>)
 8003838:	4013      	ands	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <SystemInit+0x5c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0e      	ldr	r2, [pc, #56]	; (800387c <SystemInit+0x5c>)
 8003842:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <SystemInit+0x5c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <SystemInit+0x5c>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <SystemInit+0x5c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a07      	ldr	r2, [pc, #28]	; (800387c <SystemInit+0x5c>)
 800385e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003862:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <SystemInit+0x5c>)
 8003866:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800386a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SystemInit+0x64>)
 800386e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003872:	609a      	str	r2, [r3, #8]
#endif 
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40021000 	.word	0x40021000
 8003880:	f8ff0000 	.word	0xf8ff0000
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003888:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800388a:	e003      	b.n	8003894 <LoopCopyDataInit>

0800388c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800388e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003890:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003892:	3104      	adds	r1, #4

08003894 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003894:	480a      	ldr	r0, [pc, #40]	; (80038c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003898:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800389a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800389c:	d3f6      	bcc.n	800388c <CopyDataInit>
  ldr r2, =_sbss
 800389e:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038a0:	e002      	b.n	80038a8 <LoopFillZerobss>

080038a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038a4:	f842 3b04 	str.w	r3, [r2], #4

080038a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038ac:	d3f9      	bcc.n	80038a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038ae:	f7ff ffb7 	bl	8003820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038b2:	f001 f927 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038b6:	f7fe fc8b 	bl	80021d0 <main>
  bx lr
 80038ba:	4770      	bx	lr
  ldr r3, =_sidata
 80038bc:	08005370 	.word	0x08005370
  ldr r0, =_sdata
 80038c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80038c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 80038c8:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 80038cc:	200000b4 	.word	0x200000b4

080038d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038d0:	e7fe      	b.n	80038d0 <ADC1_2_IRQHandler>

080038d2 <LL_ADC_REG_SetSequencerLength>:
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <LL_ADC_IsEnabled>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b01      	cmp	r3, #1
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
	...

0800391c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800392a:	4813      	ldr	r0, [pc, #76]	; (8003978 <LL_ADC_CommonInit+0x5c>)
 800392c:	f7ff ffe3 	bl	80038f6 <LL_ADC_IsEnabled>
 8003930:	4604      	mov	r4, r0
 8003932:	4812      	ldr	r0, [pc, #72]	; (800397c <LL_ADC_CommonInit+0x60>)
 8003934:	f7ff ffdf 	bl	80038f6 <LL_ADC_IsEnabled>
 8003938:	4603      	mov	r3, r0
 800393a:	4323      	orrs	r3, r4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d114      	bne.n	800396a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	e008      	b.n	800396e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	e001      	b.n	800396e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bd90      	pop	{r4, r7, pc}
 8003978:	40012400 	.word	0x40012400
 800397c:	40012800 	.word	0x40012800

08003980 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffb1 	bl	80038f6 <LL_ADC_IsEnabled>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d112      	bne.n	80039c0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	e001      	b.n	80039c4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff8a 	bl	80038f6 <LL_ADC_IsEnabled>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d131      	bne.n	8003a4c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00c      	beq.n	8003a0a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6859      	ldr	r1, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	e008      	b.n	8003a1c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8003a24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	6811      	ldr	r1, [r2, #0]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	68d2      	ldr	r2, [r2, #12]
 8003a30:	4311      	orrs	r1, r2
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	6912      	ldr	r2, [r2, #16]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ff44 	bl	80038d2 <LL_ADC_REG_SetSequencerLength>
 8003a4a:	e001      	b.n	8003a50 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <LL_EXTI_EnableIT_0_31>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <LL_EXTI_EnableIT_0_31+0x20>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4904      	ldr	r1, [pc, #16]	; (8003a7c <LL_EXTI_EnableIT_0_31+0x20>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010400 	.word	0x40010400

08003a80 <LL_EXTI_DisableIT_0_31>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <LL_EXTI_DisableIT_0_31+0x20>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	4903      	ldr	r1, [pc, #12]	; (8003aa0 <LL_EXTI_DisableIT_0_31+0x20>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <LL_EXTI_EnableEvent_0_31>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4904      	ldr	r1, [pc, #16]	; (8003ac4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <LL_EXTI_DisableEvent_0_31>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	4903      	ldr	r1, [pc, #12]	; (8003ae8 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40010400 	.word	0x40010400

08003aec <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010400 	.word	0x40010400

08003b10 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	4903      	ldr	r1, [pc, #12]	; (8003b30 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	40010400 	.word	0x40010400

08003b34 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	4904      	ldr	r1, [pc, #16]	; (8003b54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60cb      	str	r3, [r1, #12]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40010400 	.word	0x40010400

08003b58 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	4903      	ldr	r1, [pc, #12]	; (8003b78 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40010400 	.word	0x40010400

08003b7c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d060      	beq.n	8003c52 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d067      	beq.n	8003c68 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	795b      	ldrb	r3, [r3, #5]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d00e      	beq.n	8003bbe <LL_EXTI_Init+0x42>
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d017      	beq.n	8003bd4 <LL_EXTI_Init+0x58>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d120      	bne.n	8003bea <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff8b 	bl	8003ac8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ff50 	bl	8003a5c <LL_EXTI_EnableIT_0_31>
          break;
 8003bbc:	e018      	b.n	8003bf0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ff5c 	bl	8003a80 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff69 	bl	8003aa4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003bd2:	e00d      	b.n	8003bf0 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff3f 	bl	8003a5c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff5e 	bl	8003aa4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003be8:	e002      	b.n	8003bf0 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
          break;
 8003bee:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	799b      	ldrb	r3, [r3, #6]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d037      	beq.n	8003c68 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	799b      	ldrb	r3, [r3, #6]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d00e      	beq.n	8003c1e <LL_EXTI_Init+0xa2>
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d017      	beq.n	8003c34 <LL_EXTI_Init+0xb8>
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d120      	bne.n	8003c4a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ffa3 	bl	8003b58 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ff68 	bl	8003aec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003c1c:	e025      	b.n	8003c6a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ff74 	bl	8003b10 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ff81 	bl	8003b34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003c32:	e01a      	b.n	8003c6a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff57 	bl	8003aec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ff76 	bl	8003b34 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003c48:	e00f      	b.n	8003c6a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
            break;
 8003c4e:	bf00      	nop
 8003c50:	e00b      	b.n	8003c6a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff ff12 	bl	8003a80 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff31 	bl	8003ac8 <LL_EXTI_DisableEvent_0_31>
 8003c66:	e000      	b.n	8003c6a <LL_EXTI_Init+0xee>
      }
 8003c68:	bf00      	nop
  }
  return status;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <LL_GPIO_SetPinMode>:
{
 8003c74:	b490      	push	{r4, r7}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	0e1b      	lsrs	r3, r3, #24
 8003c88:	4413      	add	r3, r2
 8003c8a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003c8c:	6822      	ldr	r2, [r4, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	613b      	str	r3, [r7, #16]
  return result;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	210f      	movs	r1, #15
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	401a      	ands	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	61bb      	str	r3, [r7, #24]
  return result;
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	fab3 f383 	clz	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	6023      	str	r3, [r4, #0]
}
 8003cce:	bf00      	nop
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc90      	pop	{r4, r7}
 8003cd6:	4770      	bx	lr

08003cd8 <LL_GPIO_SetPinSpeed>:
{
 8003cd8:	b490      	push	{r4, r7}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	0e1b      	lsrs	r3, r3, #24
 8003cec:	4413      	add	r3, r2
 8003cee:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	613b      	str	r3, [r7, #16]
  return result;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	2103      	movs	r1, #3
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	6023      	str	r3, [r4, #0]
}
 8003d32:	bf00      	nop
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc90      	pop	{r4, r7}
 8003d3a:	4770      	bx	lr

08003d3c <LL_GPIO_SetPinOutputType>:
{
 8003d3c:	b490      	push	{r4, r7}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	0e1b      	lsrs	r3, r3, #24
 8003d50:	4413      	add	r3, r2
 8003d52:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	613b      	str	r3, [r7, #16]
  return result;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	2104      	movs	r1, #4
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	401a      	ands	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	61bb      	str	r3, [r7, #24]
  return result;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	6023      	str	r3, [r4, #0]
}
 8003d96:	bf00      	nop
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc90      	pop	{r4, r7}
 8003d9e:	4770      	bx	lr

08003da0 <LL_GPIO_SetPinPull>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	43db      	mvns	r3, r3
 8003db6:	401a      	ands	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	613b      	str	r3, [r7, #16]
  return result;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	4619      	mov	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	408b      	lsls	r3, r1
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	60da      	str	r2, [r3, #12]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	60fb      	str	r3, [r7, #12]
  return result;
 8003e04:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003e0e:	e040      	b.n	8003e92 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003e10:	2201      	movs	r2, #1
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	409a      	lsls	r2, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d036      	beq.n	8003e8c <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b07      	cmp	r3, #7
 8003e22:	d806      	bhi.n	8003e32 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003e24:	f240 1201 	movw	r2, #257	; 0x101
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	e008      	b.n	8003e44 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3b08      	subs	r3, #8
 8003e36:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e42:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff11 	bl	8003c74 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	461a      	mov	r2, r3
 8003e58:	69b9      	ldr	r1, [r7, #24]
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ffa0 	bl	8003da0 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d003      	beq.n	8003e70 <LL_GPIO_Init+0x8c>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b09      	cmp	r3, #9
 8003e6e:	d10d      	bne.n	8003e8c <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	461a      	mov	r2, r3
 8003e76:	69b9      	ldr	r1, [r7, #24]
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff2d 	bl	8003cd8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	461a      	mov	r2, r3
 8003e84:	69b9      	ldr	r1, [r7, #24]
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff ff58 	bl	8003d3c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1b8      	bne.n	8003e10 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <LL_I2C_Enable>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f043 0201 	orr.w	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	601a      	str	r2, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <LL_I2C_Disable>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 0201 	bic.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <LL_I2C_SetOwnAddress1>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ef8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	431a      	orrs	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
	...

08003f14 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003f14:	b490      	push	{r4, r7}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8003f22:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8003f24:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4a3f      	ldr	r2, [pc, #252]	; (8004028 <LL_I2C_ConfigSpeed+0x114>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f38:	ea44 0203 	orr.w	r2, r4, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4938      	ldr	r1, [pc, #224]	; (800402c <LL_I2C_ConfigSpeed+0x118>)
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	d801      	bhi.n	8003f54 <LL_I2C_ConfigSpeed+0x40>
 8003f50:	1c63      	adds	r3, r4, #1
 8003f52:	e008      	b.n	8003f66 <LL_I2C_ConfigSpeed+0x52>
 8003f54:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003f58:	fb03 f304 	mul.w	r3, r3, r4
 8003f5c:	4934      	ldr	r1, [pc, #208]	; (8004030 <LL_I2C_ConfigSpeed+0x11c>)
 8003f5e:	fba1 1303 	umull	r1, r3, r1, r3
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	3301      	adds	r3, #1
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a2f      	ldr	r2, [pc, #188]	; (800402c <LL_I2C_ConfigSpeed+0x118>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d939      	bls.n	8003fe8 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d117      	bne.n	8003faa <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa2:	e01d      	b.n	8003fe0 <LL_I2C_ConfigSpeed+0xcc>
 8003fa4:	f248 0301 	movw	r3, #32769	; 0x8001
 8003fa8:	e01a      	b.n	8003fe0 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009a      	lsls	r2, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009a      	lsls	r2, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fda:	e001      	b.n	8003fe0 <LL_I2C_ConfigSpeed+0xcc>
 8003fdc:	f248 0301 	movw	r3, #32769	; 0x8001
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	ea43 0402 	orr.w	r4, r3, r2
 8003fe6:	e010      	b.n	800400a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d905      	bls.n	8004006 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	e000      	b.n	8004008 <LL_I2C_ConfigSpeed+0xf4>
 8004006:	2304      	movs	r3, #4
 8004008:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004016:	ea44 0203 	orr.w	r2, r4, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	61da      	str	r2, [r3, #28]
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bc90      	pop	{r4, r7}
 8004026:	4770      	bx	lr
 8004028:	431bde83 	.word	0x431bde83
 800402c:	000186a0 	.word	0x000186a0
 8004030:	10624dd3 	.word	0x10624dd3

08004034 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 021a 	bic.w	r2, r3, #26
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff ff1d 	bl	8003ec6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800408c:	f107 0308 	add.w	r3, r7, #8
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f87b 	bl	800418c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004096:	6939      	ldr	r1, [r7, #16]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff37 	bl	8003f14 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68d9      	ldr	r1, [r3, #12]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	461a      	mov	r2, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff17 	bl	8003ee4 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ffb9 	bl	8004034 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fef0 	bl	8003ea8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ffc2 	bl	8004058 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <LL_RCC_GetSysClkSource>:
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <LL_RCC_GetSysClkSource+0x14>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 030c 	and.w	r3, r3, #12
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	40021000 	.word	0x40021000

080040f8 <LL_RCC_GetAHBPrescaler>:
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <LL_RCC_GetAHBPrescaler+0x14>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	40021000 	.word	0x40021000

08004110 <LL_RCC_GetAPB1Prescaler>:
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	40021000 	.word	0x40021000

08004128 <LL_RCC_GetAPB2Prescaler>:
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <LL_RCC_GetAPB2Prescaler+0x14>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	40021000 	.word	0x40021000

08004140 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <LL_RCC_PLL_GetMainSource+0x14>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	40021000 	.word	0x40021000

08004158 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	40021000 	.word	0x40021000

08004170 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <LL_RCC_PLL_GetPrediv+0x18>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0c5b      	lsrs	r3, r3, #17
 800417a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000

0800418c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004194:	f000 f820 	bl	80041d8 <RCC_GetSystemClockFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f83a 	bl	800421c <RCC_GetHCLKClockFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f848 	bl	8004248 <RCC_GetPCLK1ClockFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f854 	bl	8004270 <RCC_GetPCLK2ClockFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60da      	str	r2, [r3, #12]
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80041e2:	f7ff ff7d 	bl	80040e0 <LL_RCC_GetSysClkSource>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d006      	beq.n	80041fa <RCC_GetSystemClockFreq+0x22>
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d007      	beq.n	8004200 <RCC_GetSystemClockFreq+0x28>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <RCC_GetSystemClockFreq+0x40>)
 80041f6:	607b      	str	r3, [r7, #4]
      break;
 80041f8:	e009      	b.n	800420e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80041fa:	4b07      	ldr	r3, [pc, #28]	; (8004218 <RCC_GetSystemClockFreq+0x40>)
 80041fc:	607b      	str	r3, [r7, #4]
      break;
 80041fe:	e006      	b.n	800420e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004200:	f000 f84a 	bl	8004298 <RCC_PLL_GetFreqDomain_SYS>
 8004204:	6078      	str	r0, [r7, #4]
      break;
 8004206:	e002      	b.n	800420e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <RCC_GetSystemClockFreq+0x40>)
 800420a:	607b      	str	r3, [r7, #4]
      break;
 800420c:	bf00      	nop
  }

  return frequency;
 800420e:	687b      	ldr	r3, [r7, #4]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	007a1200 	.word	0x007a1200

0800421c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004224:	f7ff ff68 	bl	80040f8 <LL_RCC_GetAHBPrescaler>
 8004228:	4603      	mov	r3, r0
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <RCC_GetHCLKClockFreq+0x28>)
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	40d3      	lsrs	r3, r2
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	080052ec 	.word	0x080052ec

08004248 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004250:	f7ff ff5e 	bl	8004110 <LL_RCC_GetAPB1Prescaler>
 8004254:	4603      	mov	r3, r0
 8004256:	0a1b      	lsrs	r3, r3, #8
 8004258:	4a04      	ldr	r2, [pc, #16]	; (800426c <RCC_GetPCLK1ClockFreq+0x24>)
 800425a:	5cd3      	ldrb	r3, [r2, r3]
 800425c:	461a      	mov	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	40d3      	lsrs	r3, r2
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	080052fc 	.word	0x080052fc

08004270 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004278:	f7ff ff56 	bl	8004128 <LL_RCC_GetAPB2Prescaler>
 800427c:	4603      	mov	r3, r0
 800427e:	0adb      	lsrs	r3, r3, #11
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <RCC_GetPCLK2ClockFreq+0x24>)
 8004282:	5cd3      	ldrb	r3, [r2, r3]
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	40d3      	lsrs	r3, r2
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	080052fc 	.word	0x080052fc

08004298 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	2300      	movs	r3, #0
 80042a4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80042a6:	f7ff ff4b 	bl	8004140 <LL_RCC_PLL_GetMainSource>
 80042aa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <RCC_PLL_GetFreqDomain_SYS+0x22>
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b6:	d003      	beq.n	80042c0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80042b8:	e00b      	b.n	80042d2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80042bc:	607b      	str	r3, [r7, #4]
      break;
 80042be:	e00b      	b.n	80042d8 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80042c0:	f7ff ff56 	bl	8004170 <LL_RCC_PLL_GetPrediv>
 80042c4:	4603      	mov	r3, r0
 80042c6:	3301      	adds	r3, #1
 80042c8:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	607b      	str	r3, [r7, #4]
      break;
 80042d0:	e002      	b.n	80042d8 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80042d4:	607b      	str	r3, [r7, #4]
      break;
 80042d6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80042d8:	f7ff ff3e 	bl	8004158 <LL_RCC_PLL_GetMultiplicator>
 80042dc:	4603      	mov	r3, r0
 80042de:	0c9b      	lsrs	r3, r3, #18
 80042e0:	3302      	adds	r3, #2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	fb02 f303 	mul.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	003d0900 	.word	0x003d0900
 80042f4:	007a1200 	.word	0x007a1200

080042f8 <LL_TIM_SetPrescaler>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr

08004312 <LL_TIM_SetAutoReload>:
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <LL_TIM_SetRepetitionCounter>:
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <LL_TIM_OC_SetCompareCH1>:
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <LL_TIM_OC_SetCompareCH2>:
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <LL_TIM_OC_SetCompareCH3>:
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <LL_TIM_OC_SetCompareCH4>:
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f043 0201 	orr.w	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	615a      	str	r2, [r3, #20]
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a27      	ldr	r2, [pc, #156]	; (800447c <LL_TIM_Init+0xb0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00b      	beq.n	80043fc <LL_TIM_Init+0x30>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ea:	d007      	beq.n	80043fc <LL_TIM_Init+0x30>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a24      	ldr	r2, [pc, #144]	; (8004480 <LL_TIM_Init+0xb4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <LL_TIM_Init+0x30>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a23      	ldr	r2, [pc, #140]	; (8004484 <LL_TIM_Init+0xb8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d106      	bne.n	800440a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1b      	ldr	r2, [pc, #108]	; (800447c <LL_TIM_Init+0xb0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00b      	beq.n	800442a <LL_TIM_Init+0x5e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004418:	d007      	beq.n	800442a <LL_TIM_Init+0x5e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a18      	ldr	r2, [pc, #96]	; (8004480 <LL_TIM_Init+0xb4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d003      	beq.n	800442a <LL_TIM_Init+0x5e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <LL_TIM_Init+0xb8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d106      	bne.n	8004438 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff64 	bl	8004312 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff ff51 	bl	80042f8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <LL_TIM_Init+0xb0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d105      	bne.n	800446a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	7c1b      	ldrb	r3, [r3, #16]
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff ff61 	bl	800432c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ff9f 	bl	80043ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800

08004488 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b10      	cmp	r3, #16
 800449c:	d012      	beq.n	80044c4 <LL_TIM_OC_Init+0x3c>
 800449e:	2b10      	cmp	r3, #16
 80044a0:	d802      	bhi.n	80044a8 <LL_TIM_OC_Init+0x20>
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d007      	beq.n	80044b6 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80044a6:	e022      	b.n	80044ee <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80044a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ac:	d011      	beq.n	80044d2 <LL_TIM_OC_Init+0x4a>
 80044ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b2:	d015      	beq.n	80044e0 <LL_TIM_OC_Init+0x58>
      break;
 80044b4:	e01b      	b.n	80044ee <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f865 	bl	8004588 <OC1Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]
      break;
 80044c2:	e014      	b.n	80044ee <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f8c4 	bl	8004654 <OC2Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	75fb      	strb	r3, [r7, #23]
      break;
 80044d0:	e00d      	b.n	80044ee <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f927 	bl	8004728 <OC3Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]
      break;
 80044de:	e006      	b.n	80044ee <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f98a 	bl	80047fc <OC4Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	75fb      	strb	r3, [r7, #23]
      break;
 80044ec:	bf00      	nop
  }

  return result;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	7b12      	ldrb	r2, [r2, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	89d2      	ldrh	r2, [r2, #14]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0201 	bic.w	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 0202 	bic.w	r2, r3, #2
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <OC1Config+0xc8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d11e      	bne.n	8004628 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 0208 	bic.w	r2, r3, #8
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 0204 	bic.w	r2, r3, #4
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4619      	mov	r1, r3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fe83 	bl	8004346 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40012c00 	.word	0x40012c00

08004654 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f023 0210 	bic.w	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0220 	bic.w	r2, r3, #32
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0210 	bic.w	r2, r3, #16
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <OC2Config+0xd0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d11f      	bne.n	80046fc <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	019b      	lsls	r3, r3, #6
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	019b      	lsls	r3, r3, #6
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff fe26 	bl	8004360 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40012c00 	.word	0x40012c00

08004728 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <OC3Config+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d11f      	bne.n	80047ce <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	015b      	lsls	r3, r3, #5
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fdca 	bl	800437a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40012c00 	.word	0x40012c00

080047fc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	031b      	lsls	r3, r3, #12
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	031b      	lsls	r3, r3, #12
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a0f      	ldr	r2, [pc, #60]	; (800489c <OC4Config+0xa0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d107      	bne.n	8004874 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	019b      	lsls	r3, r3, #6
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4619      	mov	r1, r3
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fd84 	bl	8004394 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40012c00 	.word	0x40012c00

080048a0 <LL_USART_IsEnabled>:
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <LL_USART_SetStopBitsLength>:
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	611a      	str	r2, [r3, #16]
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <LL_USART_SetHWFlowCtrl>:
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	615a      	str	r2, [r3, #20]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
	...

08004910 <LL_USART_SetBaudRate>:
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	009a      	lsls	r2, r3, #2
 8004926:	441a      	add	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <LL_USART_SetBaudRate+0xb8>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	b29b      	uxth	r3, r3
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	b299      	uxth	r1, r3
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009a      	lsls	r2, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <LL_USART_SetBaudRate+0xb8>)
 8004954:	fba3 0302 	umull	r0, r3, r3, r2
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	2064      	movs	r0, #100	; 0x64
 800495c:	fb00 f303 	mul.w	r3, r0, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	3332      	adds	r3, #50	; 0x32
 8004966:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <LL_USART_SetBaudRate+0xb8>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	b29b      	uxth	r3, r3
 8004970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004974:	b29b      	uxth	r3, r3
 8004976:	440b      	add	r3, r1
 8004978:	b299      	uxth	r1, r3
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009a      	lsls	r2, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	fbb2 f2f3 	udiv	r2, r2, r3
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <LL_USART_SetBaudRate+0xb8>)
 8004990:	fba3 0302 	umull	r0, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2064      	movs	r0, #100	; 0x64
 8004998:	fb00 f303 	mul.w	r3, r0, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	3332      	adds	r3, #50	; 0x32
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <LL_USART_SetBaudRate+0xb8>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	440b      	add	r3, r1
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	51eb851f 	.word	0x51eb851f

080049cc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80049da:	2300      	movs	r3, #0
 80049dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff5e 	bl	80048a0 <LL_USART_IsEnabled>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d145      	bne.n	8004a76 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049f2:	f023 030c 	bic.w	r3, r3, #12
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	6851      	ldr	r1, [r2, #4]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	68d2      	ldr	r2, [r2, #12]
 80049fe:	4311      	orrs	r1, r2
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	6912      	ldr	r2, [r2, #16]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ff57 	bl	80048c6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ff63 	bl	80048ea <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004a24:	f107 0308 	add.w	r3, r7, #8
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fbaf 	bl	800418c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <LL_USART_Init+0xb4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d102      	bne.n	8004a3c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	e00c      	b.n	8004a56 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <LL_USART_Init+0xb8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d102      	bne.n	8004a4a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	e005      	b.n	8004a56 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <LL_USART_Init+0xbc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00c      	beq.n	8004a76 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004a64:	2300      	movs	r3, #0
 8004a66:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ff4d 	bl	8004910 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40013800 	.word	0x40013800
 8004a84:	40004400 	.word	0x40004400
 8004a88:	40004800 	.word	0x40004800

08004a8c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	4a07      	ldr	r2, [pc, #28]	; (8004abc <LL_InitTick+0x30>)
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <LL_InitTick+0x30>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aaa:	4b04      	ldr	r3, [pc, #16]	; (8004abc <LL_InitTick+0x30>)
 8004aac:	2205      	movs	r2, #5
 8004aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	e000e010 	.word	0xe000e010

08004ac0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff ffdd 	bl	8004a8c <LL_InitTick>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004ae4:	4a03      	ldr	r2, [pc, #12]	; (8004af4 <LL_SetSystemCoreClock+0x18>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6013      	str	r3, [r2, #0]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr
 8004af4:	20000004 	.word	0x20000004

08004af8 <__errno>:
 8004af8:	4b01      	ldr	r3, [pc, #4]	; (8004b00 <__errno+0x8>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000008 	.word	0x20000008

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	2500      	movs	r5, #0
 8004b08:	4e0c      	ldr	r6, [pc, #48]	; (8004b3c <__libc_init_array+0x38>)
 8004b0a:	4c0d      	ldr	r4, [pc, #52]	; (8004b40 <__libc_init_array+0x3c>)
 8004b0c:	1ba4      	subs	r4, r4, r6
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	42a5      	cmp	r5, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	f000 fbca 	bl	80052ac <_init>
 8004b18:	2500      	movs	r5, #0
 8004b1a:	4e0a      	ldr	r6, [pc, #40]	; (8004b44 <__libc_init_array+0x40>)
 8004b1c:	4c0a      	ldr	r4, [pc, #40]	; (8004b48 <__libc_init_array+0x44>)
 8004b1e:	1ba4      	subs	r4, r4, r6
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	42a5      	cmp	r5, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b2c:	4798      	blx	r3
 8004b2e:	3501      	adds	r5, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b36:	4798      	blx	r3
 8004b38:	3501      	adds	r5, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	08005368 	.word	0x08005368
 8004b40:	08005368 	.word	0x08005368
 8004b44:	08005368 	.word	0x08005368
 8004b48:	0800536c 	.word	0x0800536c

08004b4c <memset>:
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4402      	add	r2, r0
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d100      	bne.n	8004b56 <memset+0xa>
 8004b54:	4770      	bx	lr
 8004b56:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5a:	e7f9      	b.n	8004b50 <memset+0x4>

08004b5c <setvbuf>:
 8004b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b60:	461d      	mov	r5, r3
 8004b62:	4b51      	ldr	r3, [pc, #324]	; (8004ca8 <setvbuf+0x14c>)
 8004b64:	4604      	mov	r4, r0
 8004b66:	681e      	ldr	r6, [r3, #0]
 8004b68:	460f      	mov	r7, r1
 8004b6a:	4690      	mov	r8, r2
 8004b6c:	b126      	cbz	r6, 8004b78 <setvbuf+0x1c>
 8004b6e:	69b3      	ldr	r3, [r6, #24]
 8004b70:	b913      	cbnz	r3, 8004b78 <setvbuf+0x1c>
 8004b72:	4630      	mov	r0, r6
 8004b74:	f000 f990 	bl	8004e98 <__sinit>
 8004b78:	4b4c      	ldr	r3, [pc, #304]	; (8004cac <setvbuf+0x150>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d152      	bne.n	8004c24 <setvbuf+0xc8>
 8004b7e:	6874      	ldr	r4, [r6, #4]
 8004b80:	f1b8 0f02 	cmp.w	r8, #2
 8004b84:	d006      	beq.n	8004b94 <setvbuf+0x38>
 8004b86:	f1b8 0f01 	cmp.w	r8, #1
 8004b8a:	f200 8089 	bhi.w	8004ca0 <setvbuf+0x144>
 8004b8e:	2d00      	cmp	r5, #0
 8004b90:	f2c0 8086 	blt.w	8004ca0 <setvbuf+0x144>
 8004b94:	4621      	mov	r1, r4
 8004b96:	4630      	mov	r0, r6
 8004b98:	f000 f914 	bl	8004dc4 <_fflush_r>
 8004b9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b9e:	b141      	cbz	r1, 8004bb2 <setvbuf+0x56>
 8004ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	d002      	beq.n	8004bae <setvbuf+0x52>
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 fa2b 	bl	8005004 <_free_r>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6363      	str	r3, [r4, #52]	; 0x34
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61a3      	str	r3, [r4, #24]
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	061b      	lsls	r3, r3, #24
 8004bbc:	d503      	bpl.n	8004bc6 <setvbuf+0x6a>
 8004bbe:	6921      	ldr	r1, [r4, #16]
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 fa1f 	bl	8005004 <_free_r>
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f1b8 0f02 	cmp.w	r8, #2
 8004bcc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004bd0:	f023 0303 	bic.w	r3, r3, #3
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	d05d      	beq.n	8004c94 <setvbuf+0x138>
 8004bd8:	ab01      	add	r3, sp, #4
 8004bda:	466a      	mov	r2, sp
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4630      	mov	r0, r6
 8004be0:	f000 f9e4 	bl	8004fac <__swhatbuf_r>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	4318      	orrs	r0, r3
 8004be8:	81a0      	strh	r0, [r4, #12]
 8004bea:	bb2d      	cbnz	r5, 8004c38 <setvbuf+0xdc>
 8004bec:	9d00      	ldr	r5, [sp, #0]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 fa00 	bl	8004ff4 <malloc>
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d14e      	bne.n	8004c98 <setvbuf+0x13c>
 8004bfa:	f8dd 9000 	ldr.w	r9, [sp]
 8004bfe:	45a9      	cmp	r9, r5
 8004c00:	d13c      	bne.n	8004c7c <setvbuf+0x120>
 8004c02:	f04f 30ff 	mov.w	r0, #4294967295
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60a3      	str	r3, [r4, #8]
 8004c12:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	6163      	str	r3, [r4, #20]
 8004c1e:	b003      	add	sp, #12
 8004c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c24:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <setvbuf+0x154>)
 8004c26:	429c      	cmp	r4, r3
 8004c28:	d101      	bne.n	8004c2e <setvbuf+0xd2>
 8004c2a:	68b4      	ldr	r4, [r6, #8]
 8004c2c:	e7a8      	b.n	8004b80 <setvbuf+0x24>
 8004c2e:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <setvbuf+0x158>)
 8004c30:	429c      	cmp	r4, r3
 8004c32:	bf08      	it	eq
 8004c34:	68f4      	ldreq	r4, [r6, #12]
 8004c36:	e7a3      	b.n	8004b80 <setvbuf+0x24>
 8004c38:	2f00      	cmp	r7, #0
 8004c3a:	d0d8      	beq.n	8004bee <setvbuf+0x92>
 8004c3c:	69b3      	ldr	r3, [r6, #24]
 8004c3e:	b913      	cbnz	r3, 8004c46 <setvbuf+0xea>
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 f929 	bl	8004e98 <__sinit>
 8004c46:	f1b8 0f01 	cmp.w	r8, #1
 8004c4a:	bf08      	it	eq
 8004c4c:	89a3      	ldrheq	r3, [r4, #12]
 8004c4e:	6027      	str	r7, [r4, #0]
 8004c50:	bf04      	itt	eq
 8004c52:	f043 0301 	orreq.w	r3, r3, #1
 8004c56:	81a3      	strheq	r3, [r4, #12]
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004c5e:	f013 0008 	ands.w	r0, r3, #8
 8004c62:	d01b      	beq.n	8004c9c <setvbuf+0x140>
 8004c64:	f013 0001 	ands.w	r0, r3, #1
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	bf1f      	itttt	ne
 8004c6e:	426d      	negne	r5, r5
 8004c70:	60a3      	strne	r3, [r4, #8]
 8004c72:	61a5      	strne	r5, [r4, #24]
 8004c74:	4618      	movne	r0, r3
 8004c76:	bf08      	it	eq
 8004c78:	60a5      	streq	r5, [r4, #8]
 8004c7a:	e7d0      	b.n	8004c1e <setvbuf+0xc2>
 8004c7c:	4648      	mov	r0, r9
 8004c7e:	f000 f9b9 	bl	8004ff4 <malloc>
 8004c82:	4607      	mov	r7, r0
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d0bc      	beq.n	8004c02 <setvbuf+0xa6>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	464d      	mov	r5, r9
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	e7d3      	b.n	8004c3c <setvbuf+0xe0>
 8004c94:	2000      	movs	r0, #0
 8004c96:	e7b6      	b.n	8004c06 <setvbuf+0xaa>
 8004c98:	46a9      	mov	r9, r5
 8004c9a:	e7f5      	b.n	8004c88 <setvbuf+0x12c>
 8004c9c:	60a0      	str	r0, [r4, #8]
 8004c9e:	e7be      	b.n	8004c1e <setvbuf+0xc2>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	e7bb      	b.n	8004c1e <setvbuf+0xc2>
 8004ca6:	bf00      	nop
 8004ca8:	20000008 	.word	0x20000008
 8004cac:	08005328 	.word	0x08005328
 8004cb0:	08005348 	.word	0x08005348
 8004cb4:	08005308 	.word	0x08005308

08004cb8 <__sflush_r>:
 8004cb8:	898a      	ldrh	r2, [r1, #12]
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	0710      	lsls	r0, r2, #28
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	d458      	bmi.n	8004d78 <__sflush_r+0xc0>
 8004cc6:	684b      	ldr	r3, [r1, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dc05      	bgt.n	8004cd8 <__sflush_r+0x20>
 8004ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	dc02      	bgt.n	8004cd8 <__sflush_r+0x20>
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	d0f9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce4:	682f      	ldr	r7, [r5, #0]
 8004ce6:	6a21      	ldr	r1, [r4, #32]
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	d032      	beq.n	8004d52 <__sflush_r+0x9a>
 8004cec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	075a      	lsls	r2, r3, #29
 8004cf2:	d505      	bpl.n	8004d00 <__sflush_r+0x48>
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	1ac0      	subs	r0, r0, r3
 8004cf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cfa:	b10b      	cbz	r3, 8004d00 <__sflush_r+0x48>
 8004cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cfe:	1ac0      	subs	r0, r0, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	4602      	mov	r2, r0
 8004d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d06:	6a21      	ldr	r1, [r4, #32]
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b0      	blx	r6
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	d106      	bne.n	8004d20 <__sflush_r+0x68>
 8004d12:	6829      	ldr	r1, [r5, #0]
 8004d14:	291d      	cmp	r1, #29
 8004d16:	d848      	bhi.n	8004daa <__sflush_r+0xf2>
 8004d18:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <__sflush_r+0x108>)
 8004d1a:	40ca      	lsrs	r2, r1
 8004d1c:	07d6      	lsls	r6, r2, #31
 8004d1e:	d544      	bpl.n	8004daa <__sflush_r+0xf2>
 8004d20:	2200      	movs	r2, #0
 8004d22:	6062      	str	r2, [r4, #4]
 8004d24:	6922      	ldr	r2, [r4, #16]
 8004d26:	04d9      	lsls	r1, r3, #19
 8004d28:	6022      	str	r2, [r4, #0]
 8004d2a:	d504      	bpl.n	8004d36 <__sflush_r+0x7e>
 8004d2c:	1c42      	adds	r2, r0, #1
 8004d2e:	d101      	bne.n	8004d34 <__sflush_r+0x7c>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b903      	cbnz	r3, 8004d36 <__sflush_r+0x7e>
 8004d34:	6560      	str	r0, [r4, #84]	; 0x54
 8004d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d38:	602f      	str	r7, [r5, #0]
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	d0c9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d42:	4299      	cmp	r1, r3
 8004d44:	d002      	beq.n	8004d4c <__sflush_r+0x94>
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f95c 	bl	8005004 <_free_r>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	6360      	str	r0, [r4, #52]	; 0x34
 8004d50:	e7c0      	b.n	8004cd4 <__sflush_r+0x1c>
 8004d52:	2301      	movs	r3, #1
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b0      	blx	r6
 8004d58:	1c41      	adds	r1, r0, #1
 8004d5a:	d1c8      	bne.n	8004cee <__sflush_r+0x36>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0c5      	beq.n	8004cee <__sflush_r+0x36>
 8004d62:	2b1d      	cmp	r3, #29
 8004d64:	d001      	beq.n	8004d6a <__sflush_r+0xb2>
 8004d66:	2b16      	cmp	r3, #22
 8004d68:	d101      	bne.n	8004d6e <__sflush_r+0xb6>
 8004d6a:	602f      	str	r7, [r5, #0]
 8004d6c:	e7b1      	b.n	8004cd2 <__sflush_r+0x1a>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	e7ad      	b.n	8004cd4 <__sflush_r+0x1c>
 8004d78:	690f      	ldr	r7, [r1, #16]
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	d0a9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004d7e:	0793      	lsls	r3, r2, #30
 8004d80:	bf18      	it	ne
 8004d82:	2300      	movne	r3, #0
 8004d84:	680e      	ldr	r6, [r1, #0]
 8004d86:	bf08      	it	eq
 8004d88:	694b      	ldreq	r3, [r1, #20]
 8004d8a:	eba6 0807 	sub.w	r8, r6, r7
 8004d8e:	600f      	str	r7, [r1, #0]
 8004d90:	608b      	str	r3, [r1, #8]
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	dd9c      	ble.n	8004cd2 <__sflush_r+0x1a>
 8004d98:	4643      	mov	r3, r8
 8004d9a:	463a      	mov	r2, r7
 8004d9c:	6a21      	ldr	r1, [r4, #32]
 8004d9e:	4628      	mov	r0, r5
 8004da0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004da2:	47b0      	blx	r6
 8004da4:	2800      	cmp	r0, #0
 8004da6:	dc06      	bgt.n	8004db6 <__sflush_r+0xfe>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e78e      	b.n	8004cd4 <__sflush_r+0x1c>
 8004db6:	4407      	add	r7, r0
 8004db8:	eba8 0800 	sub.w	r8, r8, r0
 8004dbc:	e7e9      	b.n	8004d92 <__sflush_r+0xda>
 8004dbe:	bf00      	nop
 8004dc0:	20400001 	.word	0x20400001

08004dc4 <_fflush_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	b1db      	cbz	r3, 8004e06 <_fflush_r+0x42>
 8004dce:	b118      	cbz	r0, 8004dd8 <_fflush_r+0x14>
 8004dd0:	6983      	ldr	r3, [r0, #24]
 8004dd2:	b90b      	cbnz	r3, 8004dd8 <_fflush_r+0x14>
 8004dd4:	f000 f860 	bl	8004e98 <__sinit>
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <_fflush_r+0x48>)
 8004dda:	429c      	cmp	r4, r3
 8004ddc:	d109      	bne.n	8004df2 <_fflush_r+0x2e>
 8004dde:	686c      	ldr	r4, [r5, #4]
 8004de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de4:	b17b      	cbz	r3, 8004e06 <_fflush_r+0x42>
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dee:	f7ff bf63 	b.w	8004cb8 <__sflush_r>
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <_fflush_r+0x4c>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d101      	bne.n	8004dfc <_fflush_r+0x38>
 8004df8:	68ac      	ldr	r4, [r5, #8]
 8004dfa:	e7f1      	b.n	8004de0 <_fflush_r+0x1c>
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <_fflush_r+0x50>)
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	bf08      	it	eq
 8004e02:	68ec      	ldreq	r4, [r5, #12]
 8004e04:	e7ec      	b.n	8004de0 <_fflush_r+0x1c>
 8004e06:	2000      	movs	r0, #0
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08005328 	.word	0x08005328
 8004e10:	08005348 	.word	0x08005348
 8004e14:	08005308 	.word	0x08005308

08004e18 <std>:
 8004e18:	2300      	movs	r3, #0
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e22:	6083      	str	r3, [r0, #8]
 8004e24:	8181      	strh	r1, [r0, #12]
 8004e26:	6643      	str	r3, [r0, #100]	; 0x64
 8004e28:	81c2      	strh	r2, [r0, #14]
 8004e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e2e:	6183      	str	r3, [r0, #24]
 8004e30:	4619      	mov	r1, r3
 8004e32:	2208      	movs	r2, #8
 8004e34:	305c      	adds	r0, #92	; 0x5c
 8004e36:	f7ff fe89 	bl	8004b4c <memset>
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <std+0x38>)
 8004e3c:	6224      	str	r4, [r4, #32]
 8004e3e:	6263      	str	r3, [r4, #36]	; 0x24
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <std+0x3c>)
 8004e42:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <std+0x40>)
 8004e46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <std+0x44>)
 8004e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	bf00      	nop
 8004e50:	08005171 	.word	0x08005171
 8004e54:	08005193 	.word	0x08005193
 8004e58:	080051cb 	.word	0x080051cb
 8004e5c:	080051ef 	.word	0x080051ef

08004e60 <_cleanup_r>:
 8004e60:	4901      	ldr	r1, [pc, #4]	; (8004e68 <_cleanup_r+0x8>)
 8004e62:	f000 b885 	b.w	8004f70 <_fwalk_reent>
 8004e66:	bf00      	nop
 8004e68:	08004dc5 	.word	0x08004dc5

08004e6c <__sfmoreglue>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	2568      	movs	r5, #104	; 0x68
 8004e70:	1e4a      	subs	r2, r1, #1
 8004e72:	4355      	muls	r5, r2
 8004e74:	460e      	mov	r6, r1
 8004e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e7a:	f000 f90f 	bl	800509c <_malloc_r>
 8004e7e:	4604      	mov	r4, r0
 8004e80:	b140      	cbz	r0, 8004e94 <__sfmoreglue+0x28>
 8004e82:	2100      	movs	r1, #0
 8004e84:	e9c0 1600 	strd	r1, r6, [r0]
 8004e88:	300c      	adds	r0, #12
 8004e8a:	60a0      	str	r0, [r4, #8]
 8004e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e90:	f7ff fe5c 	bl	8004b4c <memset>
 8004e94:	4620      	mov	r0, r4
 8004e96:	bd70      	pop	{r4, r5, r6, pc}

08004e98 <__sinit>:
 8004e98:	6983      	ldr	r3, [r0, #24]
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	bb33      	cbnz	r3, 8004eee <__sinit+0x56>
 8004ea0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ea4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <__sinit+0x58>)
 8004ea8:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <__sinit+0x5c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6282      	str	r2, [r0, #40]	; 0x28
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	bf04      	itt	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	6183      	streq	r3, [r0, #24]
 8004eb6:	f000 f81f 	bl	8004ef8 <__sfp>
 8004eba:	6060      	str	r0, [r4, #4]
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f000 f81b 	bl	8004ef8 <__sfp>
 8004ec2:	60a0      	str	r0, [r4, #8]
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 f817 	bl	8004ef8 <__sfp>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	60e0      	str	r0, [r4, #12]
 8004ece:	2104      	movs	r1, #4
 8004ed0:	6860      	ldr	r0, [r4, #4]
 8004ed2:	f7ff ffa1 	bl	8004e18 <std>
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2109      	movs	r1, #9
 8004eda:	68a0      	ldr	r0, [r4, #8]
 8004edc:	f7ff ff9c 	bl	8004e18 <std>
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	2112      	movs	r1, #18
 8004ee4:	68e0      	ldr	r0, [r4, #12]
 8004ee6:	f7ff ff97 	bl	8004e18 <std>
 8004eea:	2301      	movs	r3, #1
 8004eec:	61a3      	str	r3, [r4, #24]
 8004eee:	bd10      	pop	{r4, pc}
 8004ef0:	08005304 	.word	0x08005304
 8004ef4:	08004e61 	.word	0x08004e61

08004ef8 <__sfp>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <__sfp+0x70>)
 8004efc:	4607      	mov	r7, r0
 8004efe:	681e      	ldr	r6, [r3, #0]
 8004f00:	69b3      	ldr	r3, [r6, #24]
 8004f02:	b913      	cbnz	r3, 8004f0a <__sfp+0x12>
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff ffc7 	bl	8004e98 <__sinit>
 8004f0a:	3648      	adds	r6, #72	; 0x48
 8004f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	d503      	bpl.n	8004f1c <__sfp+0x24>
 8004f14:	6833      	ldr	r3, [r6, #0]
 8004f16:	b133      	cbz	r3, 8004f26 <__sfp+0x2e>
 8004f18:	6836      	ldr	r6, [r6, #0]
 8004f1a:	e7f7      	b.n	8004f0c <__sfp+0x14>
 8004f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f20:	b16d      	cbz	r5, 8004f3e <__sfp+0x46>
 8004f22:	3468      	adds	r4, #104	; 0x68
 8004f24:	e7f4      	b.n	8004f10 <__sfp+0x18>
 8004f26:	2104      	movs	r1, #4
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f7ff ff9f 	bl	8004e6c <__sfmoreglue>
 8004f2e:	6030      	str	r0, [r6, #0]
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d1f1      	bne.n	8004f18 <__sfp+0x20>
 8004f34:	230c      	movs	r3, #12
 8004f36:	4604      	mov	r4, r0
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <__sfp+0x74>)
 8004f40:	6665      	str	r5, [r4, #100]	; 0x64
 8004f42:	e9c4 5500 	strd	r5, r5, [r4]
 8004f46:	60a5      	str	r5, [r4, #8]
 8004f48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004f4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004f50:	2208      	movs	r2, #8
 8004f52:	4629      	mov	r1, r5
 8004f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f58:	f7ff fdf8 	bl	8004b4c <memset>
 8004f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f64:	e7e9      	b.n	8004f3a <__sfp+0x42>
 8004f66:	bf00      	nop
 8004f68:	08005304 	.word	0x08005304
 8004f6c:	ffff0001 	.word	0xffff0001

08004f70 <_fwalk_reent>:
 8004f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f74:	4680      	mov	r8, r0
 8004f76:	4689      	mov	r9, r1
 8004f78:	2600      	movs	r6, #0
 8004f7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f7e:	b914      	cbnz	r4, 8004f86 <_fwalk_reent+0x16>
 8004f80:	4630      	mov	r0, r6
 8004f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004f8a:	3f01      	subs	r7, #1
 8004f8c:	d501      	bpl.n	8004f92 <_fwalk_reent+0x22>
 8004f8e:	6824      	ldr	r4, [r4, #0]
 8004f90:	e7f5      	b.n	8004f7e <_fwalk_reent+0xe>
 8004f92:	89ab      	ldrh	r3, [r5, #12]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d907      	bls.n	8004fa8 <_fwalk_reent+0x38>
 8004f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	d003      	beq.n	8004fa8 <_fwalk_reent+0x38>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	47c8      	blx	r9
 8004fa6:	4306      	orrs	r6, r0
 8004fa8:	3568      	adds	r5, #104	; 0x68
 8004faa:	e7ee      	b.n	8004f8a <_fwalk_reent+0x1a>

08004fac <__swhatbuf_r>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	460e      	mov	r6, r1
 8004fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb4:	b096      	sub	sp, #88	; 0x58
 8004fb6:	2900      	cmp	r1, #0
 8004fb8:	4614      	mov	r4, r2
 8004fba:	461d      	mov	r5, r3
 8004fbc:	da07      	bge.n	8004fce <__swhatbuf_r+0x22>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	89b3      	ldrh	r3, [r6, #12]
 8004fc4:	061a      	lsls	r2, r3, #24
 8004fc6:	d410      	bmi.n	8004fea <__swhatbuf_r+0x3e>
 8004fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fcc:	e00e      	b.n	8004fec <__swhatbuf_r+0x40>
 8004fce:	466a      	mov	r2, sp
 8004fd0:	f000 f934 	bl	800523c <_fstat_r>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	dbf2      	blt.n	8004fbe <__swhatbuf_r+0x12>
 8004fd8:	9a01      	ldr	r2, [sp, #4]
 8004fda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fe2:	425a      	negs	r2, r3
 8004fe4:	415a      	adcs	r2, r3
 8004fe6:	602a      	str	r2, [r5, #0]
 8004fe8:	e7ee      	b.n	8004fc8 <__swhatbuf_r+0x1c>
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	2000      	movs	r0, #0
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	b016      	add	sp, #88	; 0x58
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}

08004ff4 <malloc>:
 8004ff4:	4b02      	ldr	r3, [pc, #8]	; (8005000 <malloc+0xc>)
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f000 b84f 	b.w	800509c <_malloc_r>
 8004ffe:	bf00      	nop
 8005000:	20000008 	.word	0x20000008

08005004 <_free_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4605      	mov	r5, r0
 8005008:	2900      	cmp	r1, #0
 800500a:	d043      	beq.n	8005094 <_free_r+0x90>
 800500c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005010:	1f0c      	subs	r4, r1, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	bfb8      	it	lt
 8005016:	18e4      	addlt	r4, r4, r3
 8005018:	f000 f934 	bl	8005284 <__malloc_lock>
 800501c:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <_free_r+0x94>)
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	4610      	mov	r0, r2
 8005022:	b933      	cbnz	r3, 8005032 <_free_r+0x2e>
 8005024:	6063      	str	r3, [r4, #4]
 8005026:	6014      	str	r4, [r2, #0]
 8005028:	4628      	mov	r0, r5
 800502a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800502e:	f000 b92a 	b.w	8005286 <__malloc_unlock>
 8005032:	42a3      	cmp	r3, r4
 8005034:	d90b      	bls.n	800504e <_free_r+0x4a>
 8005036:	6821      	ldr	r1, [r4, #0]
 8005038:	1862      	adds	r2, r4, r1
 800503a:	4293      	cmp	r3, r2
 800503c:	bf01      	itttt	eq
 800503e:	681a      	ldreq	r2, [r3, #0]
 8005040:	685b      	ldreq	r3, [r3, #4]
 8005042:	1852      	addeq	r2, r2, r1
 8005044:	6022      	streq	r2, [r4, #0]
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	6004      	str	r4, [r0, #0]
 800504a:	e7ed      	b.n	8005028 <_free_r+0x24>
 800504c:	4613      	mov	r3, r2
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	b10a      	cbz	r2, 8005056 <_free_r+0x52>
 8005052:	42a2      	cmp	r2, r4
 8005054:	d9fa      	bls.n	800504c <_free_r+0x48>
 8005056:	6819      	ldr	r1, [r3, #0]
 8005058:	1858      	adds	r0, r3, r1
 800505a:	42a0      	cmp	r0, r4
 800505c:	d10b      	bne.n	8005076 <_free_r+0x72>
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	4401      	add	r1, r0
 8005062:	1858      	adds	r0, r3, r1
 8005064:	4282      	cmp	r2, r0
 8005066:	6019      	str	r1, [r3, #0]
 8005068:	d1de      	bne.n	8005028 <_free_r+0x24>
 800506a:	6810      	ldr	r0, [r2, #0]
 800506c:	6852      	ldr	r2, [r2, #4]
 800506e:	4401      	add	r1, r0
 8005070:	6019      	str	r1, [r3, #0]
 8005072:	605a      	str	r2, [r3, #4]
 8005074:	e7d8      	b.n	8005028 <_free_r+0x24>
 8005076:	d902      	bls.n	800507e <_free_r+0x7a>
 8005078:	230c      	movs	r3, #12
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	e7d4      	b.n	8005028 <_free_r+0x24>
 800507e:	6820      	ldr	r0, [r4, #0]
 8005080:	1821      	adds	r1, r4, r0
 8005082:	428a      	cmp	r2, r1
 8005084:	bf01      	itttt	eq
 8005086:	6811      	ldreq	r1, [r2, #0]
 8005088:	6852      	ldreq	r2, [r2, #4]
 800508a:	1809      	addeq	r1, r1, r0
 800508c:	6021      	streq	r1, [r4, #0]
 800508e:	6062      	str	r2, [r4, #4]
 8005090:	605c      	str	r4, [r3, #4]
 8005092:	e7c9      	b.n	8005028 <_free_r+0x24>
 8005094:	bd38      	pop	{r3, r4, r5, pc}
 8005096:	bf00      	nop
 8005098:	20000098 	.word	0x20000098

0800509c <_malloc_r>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	1ccd      	adds	r5, r1, #3
 80050a0:	f025 0503 	bic.w	r5, r5, #3
 80050a4:	3508      	adds	r5, #8
 80050a6:	2d0c      	cmp	r5, #12
 80050a8:	bf38      	it	cc
 80050aa:	250c      	movcc	r5, #12
 80050ac:	2d00      	cmp	r5, #0
 80050ae:	4606      	mov	r6, r0
 80050b0:	db01      	blt.n	80050b6 <_malloc_r+0x1a>
 80050b2:	42a9      	cmp	r1, r5
 80050b4:	d903      	bls.n	80050be <_malloc_r+0x22>
 80050b6:	230c      	movs	r3, #12
 80050b8:	6033      	str	r3, [r6, #0]
 80050ba:	2000      	movs	r0, #0
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	f000 f8e1 	bl	8005284 <__malloc_lock>
 80050c2:	4a21      	ldr	r2, [pc, #132]	; (8005148 <_malloc_r+0xac>)
 80050c4:	6814      	ldr	r4, [r2, #0]
 80050c6:	4621      	mov	r1, r4
 80050c8:	b991      	cbnz	r1, 80050f0 <_malloc_r+0x54>
 80050ca:	4c20      	ldr	r4, [pc, #128]	; (800514c <_malloc_r+0xb0>)
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	b91b      	cbnz	r3, 80050d8 <_malloc_r+0x3c>
 80050d0:	4630      	mov	r0, r6
 80050d2:	f000 f83d 	bl	8005150 <_sbrk_r>
 80050d6:	6020      	str	r0, [r4, #0]
 80050d8:	4629      	mov	r1, r5
 80050da:	4630      	mov	r0, r6
 80050dc:	f000 f838 	bl	8005150 <_sbrk_r>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d124      	bne.n	800512e <_malloc_r+0x92>
 80050e4:	230c      	movs	r3, #12
 80050e6:	4630      	mov	r0, r6
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	f000 f8cc 	bl	8005286 <__malloc_unlock>
 80050ee:	e7e4      	b.n	80050ba <_malloc_r+0x1e>
 80050f0:	680b      	ldr	r3, [r1, #0]
 80050f2:	1b5b      	subs	r3, r3, r5
 80050f4:	d418      	bmi.n	8005128 <_malloc_r+0x8c>
 80050f6:	2b0b      	cmp	r3, #11
 80050f8:	d90f      	bls.n	800511a <_malloc_r+0x7e>
 80050fa:	600b      	str	r3, [r1, #0]
 80050fc:	18cc      	adds	r4, r1, r3
 80050fe:	50cd      	str	r5, [r1, r3]
 8005100:	4630      	mov	r0, r6
 8005102:	f000 f8c0 	bl	8005286 <__malloc_unlock>
 8005106:	f104 000b 	add.w	r0, r4, #11
 800510a:	1d23      	adds	r3, r4, #4
 800510c:	f020 0007 	bic.w	r0, r0, #7
 8005110:	1ac3      	subs	r3, r0, r3
 8005112:	d0d3      	beq.n	80050bc <_malloc_r+0x20>
 8005114:	425a      	negs	r2, r3
 8005116:	50e2      	str	r2, [r4, r3]
 8005118:	e7d0      	b.n	80050bc <_malloc_r+0x20>
 800511a:	684b      	ldr	r3, [r1, #4]
 800511c:	428c      	cmp	r4, r1
 800511e:	bf16      	itet	ne
 8005120:	6063      	strne	r3, [r4, #4]
 8005122:	6013      	streq	r3, [r2, #0]
 8005124:	460c      	movne	r4, r1
 8005126:	e7eb      	b.n	8005100 <_malloc_r+0x64>
 8005128:	460c      	mov	r4, r1
 800512a:	6849      	ldr	r1, [r1, #4]
 800512c:	e7cc      	b.n	80050c8 <_malloc_r+0x2c>
 800512e:	1cc4      	adds	r4, r0, #3
 8005130:	f024 0403 	bic.w	r4, r4, #3
 8005134:	42a0      	cmp	r0, r4
 8005136:	d005      	beq.n	8005144 <_malloc_r+0xa8>
 8005138:	1a21      	subs	r1, r4, r0
 800513a:	4630      	mov	r0, r6
 800513c:	f000 f808 	bl	8005150 <_sbrk_r>
 8005140:	3001      	adds	r0, #1
 8005142:	d0cf      	beq.n	80050e4 <_malloc_r+0x48>
 8005144:	6025      	str	r5, [r4, #0]
 8005146:	e7db      	b.n	8005100 <_malloc_r+0x64>
 8005148:	20000098 	.word	0x20000098
 800514c:	2000009c 	.word	0x2000009c

08005150 <_sbrk_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	2300      	movs	r3, #0
 8005154:	4c05      	ldr	r4, [pc, #20]	; (800516c <_sbrk_r+0x1c>)
 8005156:	4605      	mov	r5, r0
 8005158:	4608      	mov	r0, r1
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	f7fe fb2a 	bl	80037b4 <_sbrk>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_sbrk_r+0x1a>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	b103      	cbz	r3, 800516a <_sbrk_r+0x1a>
 8005168:	602b      	str	r3, [r5, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	200000b0 	.word	0x200000b0

08005170 <__sread>:
 8005170:	b510      	push	{r4, lr}
 8005172:	460c      	mov	r4, r1
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	f000 f886 	bl	8005288 <_read_r>
 800517c:	2800      	cmp	r0, #0
 800517e:	bfab      	itete	ge
 8005180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005182:	89a3      	ldrhlt	r3, [r4, #12]
 8005184:	181b      	addge	r3, r3, r0
 8005186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800518a:	bfac      	ite	ge
 800518c:	6563      	strge	r3, [r4, #84]	; 0x54
 800518e:	81a3      	strhlt	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__swrite>:
 8005192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	461f      	mov	r7, r3
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	4605      	mov	r5, r0
 800519c:	05db      	lsls	r3, r3, #23
 800519e:	460c      	mov	r4, r1
 80051a0:	4616      	mov	r6, r2
 80051a2:	d505      	bpl.n	80051b0 <__swrite+0x1e>
 80051a4:	2302      	movs	r3, #2
 80051a6:	2200      	movs	r2, #0
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	f000 f858 	bl	8005260 <_lseek_r>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	4632      	mov	r2, r6
 80051b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051be:	463b      	mov	r3, r7
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	f000 b817 	b.w	80051f8 <_write_r>

080051ca <__sseek>:
 80051ca:	b510      	push	{r4, lr}
 80051cc:	460c      	mov	r4, r1
 80051ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d2:	f000 f845 	bl	8005260 <_lseek_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	bf15      	itete	ne
 80051dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80051de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80051e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051e6:	81a3      	strheq	r3, [r4, #12]
 80051e8:	bf18      	it	ne
 80051ea:	81a3      	strhne	r3, [r4, #12]
 80051ec:	bd10      	pop	{r4, pc}

080051ee <__sclose>:
 80051ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f2:	f000 b813 	b.w	800521c <_close_r>
	...

080051f8 <_write_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	4605      	mov	r5, r0
 80051fc:	4608      	mov	r0, r1
 80051fe:	4611      	mov	r1, r2
 8005200:	2200      	movs	r2, #0
 8005202:	4c05      	ldr	r4, [pc, #20]	; (8005218 <_write_r+0x20>)
 8005204:	6022      	str	r2, [r4, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	f7fe fa91 	bl	800372e <_write>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d102      	bne.n	8005216 <_write_r+0x1e>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	b103      	cbz	r3, 8005216 <_write_r+0x1e>
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	200000b0 	.word	0x200000b0

0800521c <_close_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	2300      	movs	r3, #0
 8005220:	4c05      	ldr	r4, [pc, #20]	; (8005238 <_close_r+0x1c>)
 8005222:	4605      	mov	r5, r0
 8005224:	4608      	mov	r0, r1
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	f7fe fa9d 	bl	8003766 <_close>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_close_r+0x1a>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	b103      	cbz	r3, 8005236 <_close_r+0x1a>
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	200000b0 	.word	0x200000b0

0800523c <_fstat_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	2300      	movs	r3, #0
 8005240:	4c06      	ldr	r4, [pc, #24]	; (800525c <_fstat_r+0x20>)
 8005242:	4605      	mov	r5, r0
 8005244:	4608      	mov	r0, r1
 8005246:	4611      	mov	r1, r2
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	f7fe fa97 	bl	800377c <_fstat>
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	d102      	bne.n	8005258 <_fstat_r+0x1c>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	b103      	cbz	r3, 8005258 <_fstat_r+0x1c>
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	bd38      	pop	{r3, r4, r5, pc}
 800525a:	bf00      	nop
 800525c:	200000b0 	.word	0x200000b0

08005260 <_lseek_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4605      	mov	r5, r0
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	2200      	movs	r2, #0
 800526a:	4c05      	ldr	r4, [pc, #20]	; (8005280 <_lseek_r+0x20>)
 800526c:	6022      	str	r2, [r4, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	f7fe fa93 	bl	800379a <_lseek>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_lseek_r+0x1e>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	b103      	cbz	r3, 800527e <_lseek_r+0x1e>
 800527c:	602b      	str	r3, [r5, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	200000b0 	.word	0x200000b0

08005284 <__malloc_lock>:
 8005284:	4770      	bx	lr

08005286 <__malloc_unlock>:
 8005286:	4770      	bx	lr

08005288 <_read_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4605      	mov	r5, r0
 800528c:	4608      	mov	r0, r1
 800528e:	4611      	mov	r1, r2
 8005290:	2200      	movs	r2, #0
 8005292:	4c05      	ldr	r4, [pc, #20]	; (80052a8 <_read_r+0x20>)
 8005294:	6022      	str	r2, [r4, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	f7fe fa2c 	bl	80036f4 <_read>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_read_r+0x1e>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_read_r+0x1e>
 80052a4:	602b      	str	r3, [r5, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	200000b0 	.word	0x200000b0

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr

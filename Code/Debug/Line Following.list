
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aac  08004aac  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004aac  08004aac  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aac  08004aac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000078  08004b2c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08004b2c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a2c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c3d  00000000  00000000  00029acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a88  00000000  00000000  0002b710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a0  00000000  00000000  0002c198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015720  00000000  00000000  0002cb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000069a8  00000000  00000000  00042258  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d9ca  00000000  00000000  00048c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b65ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  000b6648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080049b0 	.word	0x080049b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080049b0 	.word	0x080049b0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6a1a      	ldr	r2, [r3, #32]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	431a      	orrs	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	621a      	str	r2, [r3, #32]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <MotorL_EnablePWM>:
 */
#include "MotorControl.h"


void MotorL_EnablePWM(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 8000758:	2101      	movs	r1, #1
 800075a:	4802      	ldr	r0, [pc, #8]	; (8000764 <MotorL_EnablePWM+0x10>)
 800075c:	f7ff ffea 	bl	8000734 <LL_TIM_CC_EnableChannel>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40012c00 	.word	0x40012c00

08000768 <MotorR_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void MotorR_EnablePWM(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 800076c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <MotorR_EnablePWM+0x14>)
 8000772:	f7ff ffdf 	bl	8000734 <LL_TIM_CC_EnableChannel>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40012c00 	.word	0x40012c00

08000780 <Servo_SetAngle>:
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}

void Servo_SetAngle(float ServoAngle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if (ServoAngle > 90) ServoAngle = 90;
 8000788:	4911      	ldr	r1, [pc, #68]	; (80007d0 <Servo_SetAngle+0x50>)
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ffa8 	bl	80006e0 <__aeabi_fcmpgt>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <Servo_SetAngle+0x1c>
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <Servo_SetAngle+0x50>)
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	e008      	b.n	80007ae <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90) ServoAngle = -90;
 800079c:	490d      	ldr	r1, [pc, #52]	; (80007d4 <Servo_SetAngle+0x54>)
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff80 	bl	80006a4 <__aeabi_fcmplt>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <Servo_SetAngle+0x2e>
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <Servo_SetAngle+0x54>)
 80007ac:	607b      	str	r3, [r7, #4]
	SetServoCompare(15+ServoAngle/18);
 80007ae:	490a      	ldr	r1, [pc, #40]	; (80007d8 <Servo_SetAngle+0x58>)
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe8d 	bl	80004d0 <__aeabi_fdiv>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4908      	ldr	r1, [pc, #32]	; (80007dc <Servo_SetAngle+0x5c>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fccc 	bl	8000158 <__addsf3>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fe92 	bl	80024ec <SetServoCompare>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	42b40000 	.word	0x42b40000
 80007d4:	c2b40000 	.word	0xc2b40000
 80007d8:	41900000 	.word	0x41900000
 80007dc:	41700000 	.word	0x41700000

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db0b      	blt.n	800086e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 021f 	and.w	r2, r3, #31
 800085c:	4906      	ldr	r1, [pc, #24]	; (8000878 <__NVIC_EnableIRQ+0x34>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	2001      	movs	r0, #1
 8000866:	fa00 f202 	lsl.w	r2, r0, r2
 800086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	e000e100 	.word	0xe000e100

0800087c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	db0a      	blt.n	80008a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	b2da      	uxtb	r2, r3
 8000894:	490c      	ldr	r1, [pc, #48]	; (80008c8 <__NVIC_SetPriority+0x4c>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	440b      	add	r3, r1
 80008a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a4:	e00a      	b.n	80008bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4908      	ldr	r1, [pc, #32]	; (80008cc <__NVIC_SetPriority+0x50>)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	3b04      	subs	r3, #4
 80008b4:	0112      	lsls	r2, r2, #4
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	440b      	add	r3, r1
 80008ba:	761a      	strb	r2, [r3, #24]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000e100 	.word	0xe000e100
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	f1c3 0307 	rsb	r3, r3, #7
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	bf28      	it	cs
 80008ee:	2304      	movcs	r3, #4
 80008f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3304      	adds	r3, #4
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d902      	bls.n	8000900 <NVIC_EncodePriority+0x30>
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3b03      	subs	r3, #3
 80008fe:	e000      	b.n	8000902 <NVIC_EncodePriority+0x32>
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43da      	mvns	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	401a      	ands	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	43d9      	mvns	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	4313      	orrs	r3, r2
         );
}
 800092a:	4618      	mov	r0, r3
 800092c:	3724      	adds	r7, #36	; 0x24
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000934:	b490      	push	{r4, r7}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	332c      	adds	r3, #44	; 0x2c
 8000944:	4619      	mov	r1, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800094c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000950:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	fa92 f2a2 	rbit	r2, r2
 8000958:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	fab2 f282 	clz	r2, r2
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	40d3      	lsrs	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800096a:	6822      	ldr	r2, [r4, #0]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	211f      	movs	r1, #31
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	401a      	ands	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 011f 	and.w	r1, r3, #31
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	f003 031f 	and.w	r3, r3, #31
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bc90      	pop	{r4, r7}
 8000998:	4770      	bx	lr

0800099a <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	431a      	orrs	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	609a      	str	r2, [r3, #8]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009be:	b490      	push	{r4, r7}
 80009c0:	b08a      	sub	sp, #40	; 0x28
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	330c      	adds	r3, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	fa92 f2a2 	rbit	r2, r2
 80009e2:	613a      	str	r2, [r7, #16]
  return result;
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	40d3      	lsrs	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	440b      	add	r3, r1
 80009f2:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80009f4:	6822      	ldr	r2, [r4, #0]
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80009fc:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000a00:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a02:	69f9      	ldr	r1, [r7, #28]
 8000a04:	fa91 f1a1 	rbit	r1, r1
 8000a08:	61b9      	str	r1, [r7, #24]
  return result;
 8000a0a:	69b9      	ldr	r1, [r7, #24]
 8000a0c:	fab1 f181 	clz	r1, r1
 8000a10:	b2c9      	uxtb	r1, r1
 8000a12:	40cb      	lsrs	r3, r1
 8000a14:	2107      	movs	r1, #7
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000a24:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000a28:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a2c:	fa91 f1a1 	rbit	r1, r1
 8000a30:	6239      	str	r1, [r7, #32]
  return result;
 8000a32:	6a39      	ldr	r1, [r7, #32]
 8000a34:	fab1 f181 	clz	r1, r1
 8000a38:	b2c9      	uxtb	r1, r1
 8000a3a:	40cb      	lsrs	r3, r1
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	4313      	orrs	r3, r2
 8000a44:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc90      	pop	{r4, r7}
 8000a4e:	4770      	bx	lr

08000a50 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f043 0201 	orr.w	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	609a      	str	r2, [r3, #8]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f043 0204 	orr.w	r2, r3, #4
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	609a      	str	r2, [r3, #8]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	bf0c      	ite	eq
 8000aa0:	2301      	moveq	r3, #1
 8000aa2:	2300      	movne	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
	...

08000ad0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LL_DMA_EnableChannel+0x38>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	3a01      	subs	r2, #1
 8000aee:	4906      	ldr	r1, [pc, #24]	; (8000b08 <LL_DMA_EnableChannel+0x38>)
 8000af0:	5c8a      	ldrb	r2, [r1, r2]
 8000af2:	4611      	mov	r1, r2
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	440a      	add	r2, r1
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	080049d4 	.word	0x080049d4

08000b0c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <LL_DMA_SetDataTransferDirection+0x44>)
 8000b1e:	5cd3      	ldrb	r3, [r2, r3]
 8000b20:	461a      	mov	r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4413      	add	r3, r2
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b2c:	f023 0310 	bic.w	r3, r3, #16
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	3a01      	subs	r2, #1
 8000b34:	4906      	ldr	r1, [pc, #24]	; (8000b50 <LL_DMA_SetDataTransferDirection+0x44>)
 8000b36:	5c8a      	ldrb	r2, [r1, r2]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	440a      	add	r2, r1
 8000b3e:	4611      	mov	r1, r2
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	080049d4 	.word	0x080049d4

08000b54 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <LL_DMA_SetMode+0x40>)
 8000b66:	5cd3      	ldrb	r3, [r2, r3]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f023 0220 	bic.w	r2, r3, #32
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	4906      	ldr	r1, [pc, #24]	; (8000b94 <LL_DMA_SetMode+0x40>)
 8000b7a:	5ccb      	ldrb	r3, [r1, r3]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	440b      	add	r3, r1
 8000b82:	4619      	mov	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	080049d4 	.word	0x080049d4

08000b98 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <LL_DMA_SetPeriphIncMode+0x40>)
 8000baa:	5cd3      	ldrb	r3, [r2, r3]
 8000bac:	461a      	mov	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	4906      	ldr	r1, [pc, #24]	; (8000bd8 <LL_DMA_SetPeriphIncMode+0x40>)
 8000bbe:	5ccb      	ldrb	r3, [r1, r3]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	080049d4 	.word	0x080049d4

08000bdc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LL_DMA_SetMemoryIncMode+0x40>)
 8000bee:	5cd3      	ldrb	r3, [r2, r3]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	4906      	ldr	r1, [pc, #24]	; (8000c1c <LL_DMA_SetMemoryIncMode+0x40>)
 8000c02:	5ccb      	ldrb	r3, [r1, r3]
 8000c04:	4619      	mov	r1, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	440b      	add	r3, r1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	080049d4 	.word	0x080049d4

08000c20 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LL_DMA_SetPeriphSize+0x40>)
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	461a      	mov	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	4906      	ldr	r1, [pc, #24]	; (8000c60 <LL_DMA_SetPeriphSize+0x40>)
 8000c46:	5ccb      	ldrb	r3, [r1, r3]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	080049d4 	.word	0x080049d4

08000c64 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LL_DMA_SetMemorySize+0x40>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	4906      	ldr	r1, [pc, #24]	; (8000ca4 <LL_DMA_SetMemorySize+0x40>)
 8000c8a:	5ccb      	ldrb	r3, [r1, r3]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	440b      	add	r3, r1
 8000c92:	4619      	mov	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	080049d4 	.word	0x080049d4

08000ca8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000cce:	5ccb      	ldrb	r3, [r1, r3]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	440b      	add	r3, r1
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	080049d4 	.word	0x080049d4

08000cec <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LL_DMA_SetDataLength+0x40>)
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	461a      	mov	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4413      	add	r3, r2
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	0c1b      	lsrs	r3, r3, #16
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	3a01      	subs	r2, #1
 8000d10:	4906      	ldr	r1, [pc, #24]	; (8000d2c <LL_DMA_SetDataLength+0x40>)
 8000d12:	5c8a      	ldrb	r2, [r1, r2]
 8000d14:	4611      	mov	r1, r2
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	440a      	add	r2, r1
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	080049d4 	.word	0x080049d4

08000d30 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <LL_DMA_SetMemoryAddress+0x2c>)
 8000d42:	5cd3      	ldrb	r3, [r2, r3]
 8000d44:	461a      	mov	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	080049d4 	.word	0x080049d4

08000d60 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <LL_DMA_SetPeriphAddress+0x2c>)
 8000d72:	5cd3      	ldrb	r3, [r2, r3]
 8000d74:	461a      	mov	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6093      	str	r3, [r2, #8]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	080049d4 	.word	0x080049d4

08000d90 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60da      	str	r2, [r3, #12]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f023 0201 	bic.w	r2, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	60da      	str	r2, [r3, #12]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
	...

08000e10 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <LL_RCC_HSE_Enable+0x18>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <LL_RCC_HSE_Enable+0x18>)
 8000e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000

08000e2c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <LL_RCC_HSE_IsReady+0x20>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	40021000 	.word	0x40021000

08000e50 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <LL_RCC_SetSysClkSource+0x24>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f023 0203 	bic.w	r2, r3, #3
 8000e60:	4904      	ldr	r1, [pc, #16]	; (8000e74 <LL_RCC_SetSysClkSource+0x24>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <LL_RCC_GetSysClkSource+0x14>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 030c 	and.w	r3, r3, #12
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000

08000e90 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ea0:	4904      	ldr	r1, [pc, #16]	; (8000eb4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ec8:	4904      	ldr	r1, [pc, #16]	; (8000edc <LL_RCC_SetAPB1Prescaler+0x24>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ef0:	4904      	ldr	r1, [pc, #16]	; (8000f04 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	604b      	str	r3, [r1, #4]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <LL_RCC_SetADCClockSource+0x24>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000f18:	4904      	ldr	r1, [pc, #16]	; (8000f2c <LL_RCC_SetADCClockSource+0x24>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	604b      	str	r3, [r1, #4]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <LL_RCC_PLL_Enable+0x18>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a03      	ldr	r2, [pc, #12]	; (8000f48 <LL_RCC_PLL_Enable+0x18>)
 8000f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <LL_RCC_PLL_IsReady+0x20>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000f5c:	bf0c      	ite	eq
 8000f5e:	2301      	moveq	r3, #1
 8000f60:	2300      	movne	r3, #0
 8000f62:	b2db      	uxtb	r3, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000

08000f70 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	4903      	ldr	r1, [pc, #12]	; (8000f9c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fda:	69da      	ldr	r2, [r3, #28]
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fe6:	69da      	ldr	r2, [r3, #28]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <LL_APB2_GRP1_EnableClock+0x2c>)
 800100a:	699a      	ldr	r2, [r3, #24]
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <LL_APB2_GRP1_EnableClock+0x2c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001016:	699a      	ldr	r2, [r3, #24]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <LL_FLASH_SetLatency+0x24>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 0207 	bic.w	r2, r3, #7
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <LL_FLASH_SetLatency+0x24>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40022000 	.word	0x40022000

08001058 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <LL_FLASH_GetLatency+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0307 	and.w	r3, r3, #7
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40022000 	.word	0x40022000

08001070 <LL_TIM_EnableCounter>:
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <LL_TIM_EnableARRPreload>:
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <LL_TIM_DisableARRPreload>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <LL_TIM_SetCounter>:
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <LL_TIM_GetCounter>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80010fc:	b4b0      	push	{r4, r5, r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d01c      	beq.n	8001146 <LL_TIM_OC_DisableFast+0x4a>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d017      	beq.n	8001142 <LL_TIM_OC_DisableFast+0x46>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b10      	cmp	r3, #16
 8001116:	d012      	beq.n	800113e <LL_TIM_OC_DisableFast+0x42>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b40      	cmp	r3, #64	; 0x40
 800111c:	d00d      	beq.n	800113a <LL_TIM_OC_DisableFast+0x3e>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001124:	d007      	beq.n	8001136 <LL_TIM_OC_DisableFast+0x3a>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112c:	d101      	bne.n	8001132 <LL_TIM_OC_DisableFast+0x36>
 800112e:	2305      	movs	r3, #5
 8001130:	e00a      	b.n	8001148 <LL_TIM_OC_DisableFast+0x4c>
 8001132:	2306      	movs	r3, #6
 8001134:	e008      	b.n	8001148 <LL_TIM_OC_DisableFast+0x4c>
 8001136:	2304      	movs	r3, #4
 8001138:	e006      	b.n	8001148 <LL_TIM_OC_DisableFast+0x4c>
 800113a:	2303      	movs	r3, #3
 800113c:	e004      	b.n	8001148 <LL_TIM_OC_DisableFast+0x4c>
 800113e:	2302      	movs	r3, #2
 8001140:	e002      	b.n	8001148 <LL_TIM_OC_DisableFast+0x4c>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <LL_TIM_OC_DisableFast+0x4c>
 8001146:	2300      	movs	r3, #0
 8001148:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3318      	adds	r3, #24
 800114e:	461a      	mov	r2, r3
 8001150:	4629      	mov	r1, r5
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <LL_TIM_OC_DisableFast+0x7c>)
 8001154:	5c5b      	ldrb	r3, [r3, r1]
 8001156:	4413      	add	r3, r2
 8001158:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800115a:	6822      	ldr	r2, [r4, #0]
 800115c:	4629      	mov	r1, r5
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <LL_TIM_OC_DisableFast+0x80>)
 8001160:	5c5b      	ldrb	r3, [r3, r1]
 8001162:	4619      	mov	r1, r3
 8001164:	2304      	movs	r3, #4
 8001166:	408b      	lsls	r3, r1
 8001168:	43db      	mvns	r3, r3
 800116a:	4013      	ands	r3, r2
 800116c:	6023      	str	r3, [r4, #0]

}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bcb0      	pop	{r4, r5, r7}
 8001176:	4770      	bx	lr
 8001178:	080049dc 	.word	0x080049dc
 800117c:	080049e4 	.word	0x080049e4

08001180 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001180:	b4b0      	push	{r4, r5, r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d01c      	beq.n	80011ca <LL_TIM_OC_EnablePreload+0x4a>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b04      	cmp	r3, #4
 8001194:	d017      	beq.n	80011c6 <LL_TIM_OC_EnablePreload+0x46>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b10      	cmp	r3, #16
 800119a:	d012      	beq.n	80011c2 <LL_TIM_OC_EnablePreload+0x42>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b40      	cmp	r3, #64	; 0x40
 80011a0:	d00d      	beq.n	80011be <LL_TIM_OC_EnablePreload+0x3e>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a8:	d007      	beq.n	80011ba <LL_TIM_OC_EnablePreload+0x3a>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b0:	d101      	bne.n	80011b6 <LL_TIM_OC_EnablePreload+0x36>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e00a      	b.n	80011cc <LL_TIM_OC_EnablePreload+0x4c>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e008      	b.n	80011cc <LL_TIM_OC_EnablePreload+0x4c>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e006      	b.n	80011cc <LL_TIM_OC_EnablePreload+0x4c>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <LL_TIM_OC_EnablePreload+0x4c>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <LL_TIM_OC_EnablePreload+0x4c>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <LL_TIM_OC_EnablePreload+0x4c>
 80011ca:	2300      	movs	r3, #0
 80011cc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3318      	adds	r3, #24
 80011d2:	461a      	mov	r2, r3
 80011d4:	4629      	mov	r1, r5
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <LL_TIM_OC_EnablePreload+0x7c>)
 80011d8:	5c5b      	ldrb	r3, [r3, r1]
 80011da:	4413      	add	r3, r2
 80011dc:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	4629      	mov	r1, r5
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <LL_TIM_OC_EnablePreload+0x80>)
 80011e4:	5c5b      	ldrb	r3, [r3, r1]
 80011e6:	4619      	mov	r1, r3
 80011e8:	2308      	movs	r3, #8
 80011ea:	408b      	lsls	r3, r1
 80011ec:	4313      	orrs	r3, r2
 80011ee:	6023      	str	r3, [r4, #0]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bcb0      	pop	{r4, r5, r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	080049dc 	.word	0x080049dc
 8001200:	080049e4 	.word	0x080049e4

08001204 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001204:	b4b0      	push	{r4, r5, r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d01c      	beq.n	8001250 <LL_TIM_IC_SetActiveInput+0x4c>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d017      	beq.n	800124c <LL_TIM_IC_SetActiveInput+0x48>
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d012      	beq.n	8001248 <LL_TIM_IC_SetActiveInput+0x44>
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b40      	cmp	r3, #64	; 0x40
 8001226:	d00d      	beq.n	8001244 <LL_TIM_IC_SetActiveInput+0x40>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800122e:	d007      	beq.n	8001240 <LL_TIM_IC_SetActiveInput+0x3c>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001236:	d101      	bne.n	800123c <LL_TIM_IC_SetActiveInput+0x38>
 8001238:	2305      	movs	r3, #5
 800123a:	e00a      	b.n	8001252 <LL_TIM_IC_SetActiveInput+0x4e>
 800123c:	2306      	movs	r3, #6
 800123e:	e008      	b.n	8001252 <LL_TIM_IC_SetActiveInput+0x4e>
 8001240:	2304      	movs	r3, #4
 8001242:	e006      	b.n	8001252 <LL_TIM_IC_SetActiveInput+0x4e>
 8001244:	2303      	movs	r3, #3
 8001246:	e004      	b.n	8001252 <LL_TIM_IC_SetActiveInput+0x4e>
 8001248:	2302      	movs	r3, #2
 800124a:	e002      	b.n	8001252 <LL_TIM_IC_SetActiveInput+0x4e>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <LL_TIM_IC_SetActiveInput+0x4e>
 8001250:	2300      	movs	r3, #0
 8001252:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3318      	adds	r3, #24
 8001258:	461a      	mov	r2, r3
 800125a:	4629      	mov	r1, r5
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <LL_TIM_IC_SetActiveInput+0x8c>)
 800125e:	5c5b      	ldrb	r3, [r3, r1]
 8001260:	4413      	add	r3, r2
 8001262:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	4629      	mov	r1, r5
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <LL_TIM_IC_SetActiveInput+0x90>)
 800126a:	5c5b      	ldrb	r3, [r3, r1]
 800126c:	4619      	mov	r1, r3
 800126e:	2303      	movs	r3, #3
 8001270:	408b      	lsls	r3, r1
 8001272:	43db      	mvns	r3, r3
 8001274:	401a      	ands	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	0c1b      	lsrs	r3, r3, #16
 800127a:	4628      	mov	r0, r5
 800127c:	4905      	ldr	r1, [pc, #20]	; (8001294 <LL_TIM_IC_SetActiveInput+0x90>)
 800127e:	5c09      	ldrb	r1, [r1, r0]
 8001280:	408b      	lsls	r3, r1
 8001282:	4313      	orrs	r3, r2
 8001284:	6023      	str	r3, [r4, #0]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bcb0      	pop	{r4, r5, r7}
 800128e:	4770      	bx	lr
 8001290:	080049dc 	.word	0x080049dc
 8001294:	080049ec 	.word	0x080049ec

08001298 <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001298:	b4b0      	push	{r4, r5, r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d01c      	beq.n	80012e4 <LL_TIM_IC_SetPrescaler+0x4c>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d017      	beq.n	80012e0 <LL_TIM_IC_SetPrescaler+0x48>
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	d012      	beq.n	80012dc <LL_TIM_IC_SetPrescaler+0x44>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b40      	cmp	r3, #64	; 0x40
 80012ba:	d00d      	beq.n	80012d8 <LL_TIM_IC_SetPrescaler+0x40>
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c2:	d007      	beq.n	80012d4 <LL_TIM_IC_SetPrescaler+0x3c>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ca:	d101      	bne.n	80012d0 <LL_TIM_IC_SetPrescaler+0x38>
 80012cc:	2305      	movs	r3, #5
 80012ce:	e00a      	b.n	80012e6 <LL_TIM_IC_SetPrescaler+0x4e>
 80012d0:	2306      	movs	r3, #6
 80012d2:	e008      	b.n	80012e6 <LL_TIM_IC_SetPrescaler+0x4e>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e006      	b.n	80012e6 <LL_TIM_IC_SetPrescaler+0x4e>
 80012d8:	2303      	movs	r3, #3
 80012da:	e004      	b.n	80012e6 <LL_TIM_IC_SetPrescaler+0x4e>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <LL_TIM_IC_SetPrescaler+0x4e>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <LL_TIM_IC_SetPrescaler+0x4e>
 80012e4:	2300      	movs	r3, #0
 80012e6:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3318      	adds	r3, #24
 80012ec:	461a      	mov	r2, r3
 80012ee:	4629      	mov	r1, r5
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <LL_TIM_IC_SetPrescaler+0x8c>)
 80012f2:	5c5b      	ldrb	r3, [r3, r1]
 80012f4:	4413      	add	r3, r2
 80012f6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80012f8:	6822      	ldr	r2, [r4, #0]
 80012fa:	4629      	mov	r1, r5
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <LL_TIM_IC_SetPrescaler+0x90>)
 80012fe:	5c5b      	ldrb	r3, [r3, r1]
 8001300:	4619      	mov	r1, r3
 8001302:	230c      	movs	r3, #12
 8001304:	408b      	lsls	r3, r1
 8001306:	43db      	mvns	r3, r3
 8001308:	401a      	ands	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	0c1b      	lsrs	r3, r3, #16
 800130e:	4628      	mov	r0, r5
 8001310:	4905      	ldr	r1, [pc, #20]	; (8001328 <LL_TIM_IC_SetPrescaler+0x90>)
 8001312:	5c09      	ldrb	r1, [r1, r0]
 8001314:	408b      	lsls	r3, r1
 8001316:	4313      	orrs	r3, r2
 8001318:	6023      	str	r3, [r4, #0]
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bcb0      	pop	{r4, r5, r7}
 8001322:	4770      	bx	lr
 8001324:	080049dc 	.word	0x080049dc
 8001328:	080049ec 	.word	0x080049ec

0800132c <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 800132c:	b4b0      	push	{r4, r5, r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d01c      	beq.n	8001378 <LL_TIM_IC_SetFilter+0x4c>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d017      	beq.n	8001374 <LL_TIM_IC_SetFilter+0x48>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b10      	cmp	r3, #16
 8001348:	d012      	beq.n	8001370 <LL_TIM_IC_SetFilter+0x44>
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b40      	cmp	r3, #64	; 0x40
 800134e:	d00d      	beq.n	800136c <LL_TIM_IC_SetFilter+0x40>
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001356:	d007      	beq.n	8001368 <LL_TIM_IC_SetFilter+0x3c>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135e:	d101      	bne.n	8001364 <LL_TIM_IC_SetFilter+0x38>
 8001360:	2305      	movs	r3, #5
 8001362:	e00a      	b.n	800137a <LL_TIM_IC_SetFilter+0x4e>
 8001364:	2306      	movs	r3, #6
 8001366:	e008      	b.n	800137a <LL_TIM_IC_SetFilter+0x4e>
 8001368:	2304      	movs	r3, #4
 800136a:	e006      	b.n	800137a <LL_TIM_IC_SetFilter+0x4e>
 800136c:	2303      	movs	r3, #3
 800136e:	e004      	b.n	800137a <LL_TIM_IC_SetFilter+0x4e>
 8001370:	2302      	movs	r3, #2
 8001372:	e002      	b.n	800137a <LL_TIM_IC_SetFilter+0x4e>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_TIM_IC_SetFilter+0x4e>
 8001378:	2300      	movs	r3, #0
 800137a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3318      	adds	r3, #24
 8001380:	461a      	mov	r2, r3
 8001382:	4629      	mov	r1, r5
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <LL_TIM_IC_SetFilter+0x8c>)
 8001386:	5c5b      	ldrb	r3, [r3, r1]
 8001388:	4413      	add	r3, r2
 800138a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800138c:	6822      	ldr	r2, [r4, #0]
 800138e:	4629      	mov	r1, r5
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <LL_TIM_IC_SetFilter+0x90>)
 8001392:	5c5b      	ldrb	r3, [r3, r1]
 8001394:	4619      	mov	r1, r3
 8001396:	23f0      	movs	r3, #240	; 0xf0
 8001398:	408b      	lsls	r3, r1
 800139a:	43db      	mvns	r3, r3
 800139c:	401a      	ands	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	4628      	mov	r0, r5
 80013a4:	4905      	ldr	r1, [pc, #20]	; (80013bc <LL_TIM_IC_SetFilter+0x90>)
 80013a6:	5c09      	ldrb	r1, [r1, r0]
 80013a8:	408b      	lsls	r3, r1
 80013aa:	4313      	orrs	r3, r2
 80013ac:	6023      	str	r3, [r4, #0]
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bcb0      	pop	{r4, r5, r7}
 80013b6:	4770      	bx	lr
 80013b8:	080049dc 	.word	0x080049dc
 80013bc:	080049ec 	.word	0x080049ec

080013c0 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 80013c0:	b490      	push	{r4, r7}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d01c      	beq.n	800140c <LL_TIM_IC_SetPolarity+0x4c>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d017      	beq.n	8001408 <LL_TIM_IC_SetPolarity+0x48>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d012      	beq.n	8001404 <LL_TIM_IC_SetPolarity+0x44>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b40      	cmp	r3, #64	; 0x40
 80013e2:	d00d      	beq.n	8001400 <LL_TIM_IC_SetPolarity+0x40>
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013ea:	d007      	beq.n	80013fc <LL_TIM_IC_SetPolarity+0x3c>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f2:	d101      	bne.n	80013f8 <LL_TIM_IC_SetPolarity+0x38>
 80013f4:	2305      	movs	r3, #5
 80013f6:	e00a      	b.n	800140e <LL_TIM_IC_SetPolarity+0x4e>
 80013f8:	2306      	movs	r3, #6
 80013fa:	e008      	b.n	800140e <LL_TIM_IC_SetPolarity+0x4e>
 80013fc:	2304      	movs	r3, #4
 80013fe:	e006      	b.n	800140e <LL_TIM_IC_SetPolarity+0x4e>
 8001400:	2303      	movs	r3, #3
 8001402:	e004      	b.n	800140e <LL_TIM_IC_SetPolarity+0x4e>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <LL_TIM_IC_SetPolarity+0x4e>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_TIM_IC_SetPolarity+0x4e>
 800140c:	2300      	movs	r3, #0
 800140e:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	4621      	mov	r1, r4
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <LL_TIM_IC_SetPolarity+0x80>)
 8001418:	5c5b      	ldrb	r3, [r3, r1]
 800141a:	4619      	mov	r1, r3
 800141c:	230a      	movs	r3, #10
 800141e:	408b      	lsls	r3, r1
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	4621      	mov	r1, r4
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <LL_TIM_IC_SetPolarity+0x80>)
 8001428:	5c5b      	ldrb	r3, [r3, r1]
 800142a:	4619      	mov	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	408b      	lsls	r3, r1
 8001430:	431a      	orrs	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bc90      	pop	{r4, r7}
 800143e:	4770      	bx	lr
 8001440:	080049f4 	.word	0x080049f4

08001444 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001456:	f023 0307 	bic.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	609a      	str	r2, [r3, #8]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f023 0207 	bic.w	r2, r3, #7
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	609a      	str	r2, [r3, #8]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	605a      	str	r2, [r3, #4]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f06f 0201 	mvn.w	r2, #1
 80014fe:	611a      	str	r2, [r3, #16]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60da      	str	r2, [r3, #12]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	615a      	str	r2, [r3, #20]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001580:	2b40      	cmp	r3, #64	; 0x40
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	605a      	str	r2, [r3, #4]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80015b0:	b490      	push	{r4, r7}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	0e1b      	lsrs	r3, r3, #24
 80015c4:	4413      	add	r3, r2
 80015c6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80015c8:	6822      	ldr	r2, [r4, #0]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	613b      	str	r3, [r7, #16]
  return result;
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fab3 f383 	clz	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	210f      	movs	r1, #15
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	401a      	ands	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	61bb      	str	r3, [r7, #24]
  return result;
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	6023      	str	r3, [r4, #0]
}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bc90      	pop	{r4, r7}
 8001612:	4770      	bx	lr

08001614 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	615a      	str	r2, [r3, #20]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
	...

08001634 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800163e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	6053      	str	r3, [r2, #4]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	40010000 	.word	0x40010000

08001654 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 800165e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001662:	f043 0304 	orr.w	r3, r3, #4
 8001666:	6053      	str	r3, [r2, #4]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40010000 	.word	0x40010000

08001674 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 800167e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001682:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001686:	6053      	str	r3, [r2, #4]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40010000 	.word	0x40010000

08001694 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80016a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ae:	6053      	str	r3, [r2, #4]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40010000 	.word	0x40010000

080016bc <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80016c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ca:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80016d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d6:	6053      	str	r3, [r2, #4]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40010000 	.word	0x40010000

080016e4 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <LL_GPIO_AF_SetEXTISource+0x58>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	43db      	mvns	r3, r3
 8001700:	ea02 0103 	and.w	r1, r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	0c1b      	lsrs	r3, r3, #16
 8001708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	60bb      	str	r3, [r7, #8]
  return result;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	fa03 f202 	lsl.w	r2, r3, r2
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	430a      	orrs	r2, r1
 800172a:	3302      	adds	r3, #2
 800172c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40010000 	.word	0x40010000

08001740 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 8001748:	bf00      	nop
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <__io_putchar+0x2c>)
 800174c:	f7ff ff10 	bl	8001570 <LL_USART_IsActiveFlag_TC>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f9      	beq.n	800174a <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4619      	mov	r1, r3
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <__io_putchar+0x2c>)
 800175e:	f7ff ff19 	bl	8001594 <LL_USART_TransmitData8>

  	return ch;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013800 	.word	0x40013800

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff fc42 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800177c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001780:	f7ff fc26 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f7ff f82b 	bl	80007e0 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 800178a:	f7ff ff97 	bl	80016bc <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 800178e:	4b37      	ldr	r3, [pc, #220]	; (800186c <main+0xfc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6858      	ldr	r0, [r3, #4]
 8001794:	2300      	movs	r3, #0
 8001796:	2202      	movs	r2, #2
 8001798:	2100      	movs	r1, #0
 800179a:	f002 f947 	bl	8003a2c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <main+0xfc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6898      	ldr	r0, [r3, #8]
 80017a4:	2300      	movs	r3, #0
 80017a6:	2202      	movs	r2, #2
 80017a8:	2100      	movs	r1, #0
 80017aa:	f002 f93f 	bl	8003a2c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80017ae:	4b2f      	ldr	r3, [pc, #188]	; (800186c <main+0xfc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68d8      	ldr	r0, [r3, #12]
 80017b4:	2300      	movs	r3, #0
 80017b6:	2202      	movs	r2, #2
 80017b8:	2100      	movs	r1, #0
 80017ba:	f002 f937 	bl	8003a2c <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017be:	f000 f861 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c2:	f000 fcdf 	bl	8002184 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c6:	f000 fcc5 	bl	8002154 <MX_DMA_Init>
  MX_TIM1_Init();
 80017ca:	f000 fa09 	bl	8001be0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80017ce:	f000 f89b 	bl	8001908 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017d2:	f000 f9af 	bl	8001b34 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017d6:	f000 fc53 	bl	8002080 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017da:	f000 fac7 	bl	8001d6c <MX_TIM2_Init>
  MX_TIM3_Init();
 80017de:	f000 fb75 	bl	8001ecc <MX_TIM3_Init>
  MX_TIM4_Init();
 80017e2:	f000 fc03 	bl	8001fec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 80017e6:	f7fe ffb5 	bl	8000754 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 80017ea:	f7fe ffbd 	bl	8000768 <MotorR_EnablePWM>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  USR1_Motor1_SetPWM(-1800);
//  USR1_Motor2_SetPWM(3600);
  Servo_SetAngle(0);
 80017ee:	f04f 0000 	mov.w	r0, #0
 80017f2:	f7fe ffc5 	bl	8000780 <Servo_SetAngle>
  uint32_t Count = LL_TIM_GetCounter(TIM2);
 80017f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017fa:	f7ff fc73 	bl	80010e4 <LL_TIM_GetCounter>
 80017fe:	6078      	str	r0, [r7, #4]
  while (1)
  {

//	  USR1_Motor1_SetPWM(7200);
//	  USR1_Motor2_SetPWM(7200);
	  for(int i = 0; i < 8; ++i)
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e014      	b.n	8001830 <main+0xc0>
	  {
		  if(Sensor_Threshold[i] < Sensor_ADC_Value[i])
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <main+0x100>)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800180e:	4919      	ldr	r1, [pc, #100]	; (8001874 <main+0x104>)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001816:	b29b      	uxth	r3, r3
 8001818:	429a      	cmp	r2, r3
 800181a:	d203      	bcs.n	8001824 <main+0xb4>
			  printf("1 ");
 800181c:	4816      	ldr	r0, [pc, #88]	; (8001878 <main+0x108>)
 800181e:	f002 f8d9 	bl	80039d4 <iprintf>
 8001822:	e002      	b.n	800182a <main+0xba>
		  else
			  printf("0 ");
 8001824:	4815      	ldr	r0, [pc, #84]	; (800187c <main+0x10c>)
 8001826:	f002 f8d5 	bl	80039d4 <iprintf>
	  for(int i = 0; i < 8; ++i)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3301      	adds	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b07      	cmp	r3, #7
 8001834:	dde7      	ble.n	8001806 <main+0x96>
	  }
	  for(int i =0; i < 8;++i)
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	e00b      	b.n	8001854 <main+0xe4>
	  {
		  printf("%d " , Sensor_ADC_Value[i]);
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <main+0x104>)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <main+0x110>)
 800184a:	f002 f8c3 	bl	80039d4 <iprintf>
	  for(int i =0; i < 8;++i)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3301      	adds	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b07      	cmp	r3, #7
 8001858:	ddf0      	ble.n	800183c <main+0xcc>
	  }
	  printf("\n");
 800185a:	200a      	movs	r0, #10
 800185c:	f002 f8d2 	bl	8003a04 <putchar>
	  LL_mDelay(500);
 8001860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001864:	f002 f852 	bl	800390c <LL_mDelay>
	  for(int i = 0; i < 8; ++i)
 8001868:	e7ca      	b.n	8001800 <main+0x90>
 800186a:	bf00      	nop
 800186c:	20000014 	.word	0x20000014
 8001870:	20000000 	.word	0x20000000
 8001874:	200000a4 	.word	0x200000a4
 8001878:	080049c8 	.word	0x080049c8
 800187c:	080049cc 	.word	0x080049cc
 8001880:	080049d0 	.word	0x080049d0

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff fbd1 	bl	8001030 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800188e:	bf00      	nop
 8001890:	f7ff fbe2 	bl	8001058 <LL_FLASH_GetLatency>
 8001894:	4603      	mov	r3, r0
 8001896:	2b02      	cmp	r3, #2
 8001898:	d1fa      	bne.n	8001890 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800189a:	f7ff fab9 	bl	8000e10 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800189e:	bf00      	nop
 80018a0:	f7ff fac4 	bl	8000e2c <LL_RCC_HSE_IsReady>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d1fa      	bne.n	80018a0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80018aa:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80018ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80018b2:	f7ff fb5d 	bl	8000f70 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80018b6:	f7ff fb3b 	bl	8000f30 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80018ba:	bf00      	nop
 80018bc:	f7ff fb46 	bl	8000f4c <LL_RCC_PLL_IsReady>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d1fa      	bne.n	80018bc <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff fae2 	bl	8000e90 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80018cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018d0:	f7ff faf2 	bl	8000eb8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fb03 	bl	8000ee0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80018da:	2002      	movs	r0, #2
 80018dc:	f7ff fab8 	bl	8000e50 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80018e0:	bf00      	nop
 80018e2:	f7ff fac9 	bl	8000e78 <LL_RCC_GetSysClkSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d1fa      	bne.n	80018e2 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <SystemClock_Config+0x80>)
 80018ee:	f001 ffff 	bl	80038f0 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <SystemClock_Config+0x80>)
 80018f4:	f002 f82e 	bl	8003954 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 80018f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018fc:	f7ff fb04 	bl	8000f08 <LL_RCC_SetADCClockSource>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	044aa200 	.word	0x044aa200

08001908 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	; 0x38
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800190e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800193a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800193e:	f7ff fb5f 	bl	8001000 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001942:	2004      	movs	r0, #4
 8001944:	f7ff fb5c 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8001948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194c:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	486b      	ldr	r0, [pc, #428]	; (8001b04 <MX_ADC1_Init+0x1fc>)
 8001958:	f001 f95c 	bl	8002c14 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800195c:	2200      	movs	r2, #0
 800195e:	2101      	movs	r1, #1
 8001960:	4869      	ldr	r0, [pc, #420]	; (8001b08 <MX_ADC1_Init+0x200>)
 8001962:	f7ff f8d3 	bl	8000b0c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	2101      	movs	r1, #1
 800196c:	4866      	ldr	r0, [pc, #408]	; (8001b08 <MX_ADC1_Init+0x200>)
 800196e:	f7ff f99b 	bl	8000ca8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001972:	2220      	movs	r2, #32
 8001974:	2101      	movs	r1, #1
 8001976:	4864      	ldr	r0, [pc, #400]	; (8001b08 <MX_ADC1_Init+0x200>)
 8001978:	f7ff f8ec 	bl	8000b54 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800197c:	2200      	movs	r2, #0
 800197e:	2101      	movs	r1, #1
 8001980:	4861      	ldr	r0, [pc, #388]	; (8001b08 <MX_ADC1_Init+0x200>)
 8001982:	f7ff f909 	bl	8000b98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	2101      	movs	r1, #1
 800198a:	485f      	ldr	r0, [pc, #380]	; (8001b08 <MX_ADC1_Init+0x200>)
 800198c:	f7ff f926 	bl	8000bdc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001994:	2101      	movs	r1, #1
 8001996:	485c      	ldr	r0, [pc, #368]	; (8001b08 <MX_ADC1_Init+0x200>)
 8001998:	f7ff f942 	bl	8000c20 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 800199c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a0:	2101      	movs	r1, #1
 80019a2:	4859      	ldr	r0, [pc, #356]	; (8001b08 <MX_ADC1_Init+0x200>)
 80019a4:	f7ff f95e 	bl	8000c64 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 80019a8:	2208      	movs	r2, #8
 80019aa:	2101      	movs	r1, #1
 80019ac:	4856      	ldr	r0, [pc, #344]	; (8001b08 <MX_ADC1_Init+0x200>)
 80019ae:	f7ff f99d 	bl	8000cec <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &Sensor_ADC_Value);
 80019b2:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <MX_ADC1_Init+0x204>)
 80019b4:	461a      	mov	r2, r3
 80019b6:	2101      	movs	r1, #1
 80019b8:	4853      	ldr	r0, [pc, #332]	; (8001b08 <MX_ADC1_Init+0x200>)
 80019ba:	f7ff f9b9 	bl	8000d30 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 80019be:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <MX_ADC1_Init+0x208>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	4851      	ldr	r0, [pc, #324]	; (8001b08 <MX_ADC1_Init+0x200>)
 80019c4:	f7ff f9cc 	bl	8000d60 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 80019c8:	2101      	movs	r1, #1
 80019ca:	484f      	ldr	r0, [pc, #316]	; (8001b08 <MX_ADC1_Init+0x200>)
 80019cc:	f7ff f880 	bl	8000ad0 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80019d0:	2300      	movs	r3, #0
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80019d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80019da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019de:	4619      	mov	r1, r3
 80019e0:	484c      	ldr	r0, [pc, #304]	; (8001b14 <MX_ADC1_Init+0x20c>)
 80019e2:	f000 fee5 	bl	80027b0 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80019ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ee:	4619      	mov	r1, r3
 80019f0:	4848      	ldr	r0, [pc, #288]	; (8001b14 <MX_ADC1_Init+0x20c>)
 80019f2:	f000 feab 	bl	800274c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80019f6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80019fa:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 80019fc:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 8001a00:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001a06:	2302      	movs	r3, #2
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	4619      	mov	r1, r3
 8001a16:	483f      	ldr	r0, [pc, #252]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a18:	f000 fef1 	bl	80027fe <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a24:	483b      	ldr	r0, [pc, #236]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a26:	f7fe ff85 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a30:	4838      	ldr	r0, [pc, #224]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a32:	f7fe ffc4 	bl	80009be <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8001a36:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <MX_ADC1_Init+0x210>)
 8001a38:	f240 2105 	movw	r1, #517	; 0x205
 8001a3c:	4835      	ldr	r0, [pc, #212]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a3e:	f7fe ff79 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001a42:	2200      	movs	r2, #0
 8001a44:	4934      	ldr	r1, [pc, #208]	; (8001b18 <MX_ADC1_Init+0x210>)
 8001a46:	4833      	ldr	r0, [pc, #204]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a48:	f7fe ffb9 	bl	80009be <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8001a4c:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <MX_ADC1_Init+0x214>)
 8001a4e:	f240 210a 	movw	r1, #522	; 0x20a
 8001a52:	4830      	ldr	r0, [pc, #192]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a54:	f7fe ff6e 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4930      	ldr	r1, [pc, #192]	; (8001b1c <MX_ADC1_Init+0x214>)
 8001a5c:	482d      	ldr	r0, [pc, #180]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a5e:	f7fe ffae 	bl	80009be <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8001a62:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <MX_ADC1_Init+0x218>)
 8001a64:	f240 210f 	movw	r1, #527	; 0x20f
 8001a68:	482a      	ldr	r0, [pc, #168]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a6a:	f7fe ff63 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	492b      	ldr	r1, [pc, #172]	; (8001b20 <MX_ADC1_Init+0x218>)
 8001a72:	4828      	ldr	r0, [pc, #160]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a74:	f7fe ffa3 	bl	80009be <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <MX_ADC1_Init+0x21c>)
 8001a7a:	f44f 7105 	mov.w	r1, #532	; 0x214
 8001a7e:	4825      	ldr	r0, [pc, #148]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a80:	f7fe ff58 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001a84:	2200      	movs	r2, #0
 8001a86:	4927      	ldr	r1, [pc, #156]	; (8001b24 <MX_ADC1_Init+0x21c>)
 8001a88:	4822      	ldr	r0, [pc, #136]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a8a:	f7fe ff98 	bl	80009be <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8001a8e:	4a26      	ldr	r2, [pc, #152]	; (8001b28 <MX_ADC1_Init+0x220>)
 8001a90:	f240 2119 	movw	r1, #537	; 0x219
 8001a94:	481f      	ldr	r0, [pc, #124]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001a96:	f7fe ff4d 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4922      	ldr	r1, [pc, #136]	; (8001b28 <MX_ADC1_Init+0x220>)
 8001a9e:	481d      	ldr	r0, [pc, #116]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001aa0:	f7fe ff8d 	bl	80009be <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8001aa4:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <MX_ADC1_Init+0x224>)
 8001aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aaa:	481a      	ldr	r0, [pc, #104]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001aac:	f7fe ff42 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	491e      	ldr	r1, [pc, #120]	; (8001b2c <MX_ADC1_Init+0x224>)
 8001ab4:	4817      	ldr	r0, [pc, #92]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001ab6:	f7fe ff82 	bl	80009be <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <MX_ADC1_Init+0x228>)
 8001abc:	f240 1105 	movw	r1, #261	; 0x105
 8001ac0:	4814      	ldr	r0, [pc, #80]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001ac2:	f7fe ff37 	bl	8000934 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4919      	ldr	r1, [pc, #100]	; (8001b30 <MX_ADC1_Init+0x228>)
 8001aca:	4812      	ldr	r0, [pc, #72]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001acc:	f7fe ff77 	bl	80009be <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8001ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad4:	480f      	ldr	r0, [pc, #60]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001ad6:	f7fe ff60 	bl	800099a <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 8001ada:	480e      	ldr	r0, [pc, #56]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001adc:	f7fe ffb8 	bl	8000a50 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001ae2:	f7fe ffc4 	bl	8000a6e <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8001ae6:	bf00      	nop
 8001ae8:	480a      	ldr	r0, [pc, #40]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001aea:	f7fe ffcf 	bl	8000a8c <LL_ADC_IsCalibrationOnGoing>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f9      	bne.n	8001ae8 <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 8001af4:	4807      	ldr	r0, [pc, #28]	; (8001b14 <MX_ADC1_Init+0x20c>)
 8001af6:	f7fe ffdb 	bl	8000ab0 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3738      	adds	r7, #56	; 0x38
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	200000a4 	.word	0x200000a4
 8001b10:	4001244c 	.word	0x4001244c
 8001b14:	40012400 	.word	0x40012400
 8001b18:	02300001 	.word	0x02300001
 8001b1c:	02600002 	.word	0x02600002
 8001b20:	02900003 	.word	0x02900003
 8001b24:	02c00004 	.word	0x02c00004
 8001b28:	02f00005 	.word	0x02f00005
 8001b2c:	03200006 	.word	0x03200006
 8001b30:	03500007 	.word	0x03500007

08001b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001b5a:	2008      	movs	r0, #8
 8001b5c:	f7ff fa50 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <MX_I2C1_Init+0x9c>)
 8001b62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b64:	2309      	movs	r3, #9
 8001b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <MX_I2C1_Init+0xa0>)
 8001b76:	f001 f84d 	bl	8002c14 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 8001b7a:	f7ff fd5b 	bl	8001634 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001b7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001b82:	f7ff fa25 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001b86:	4814      	ldr	r0, [pc, #80]	; (8001bd8 <MX_I2C1_Init+0xa4>)
 8001b88:	f7ff f932 	bl	8000df0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001b8c:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <MX_I2C1_Init+0xa4>)
 8001b8e:	f7ff f90e 	bl	8000dae <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001b92:	4811      	ldr	r0, [pc, #68]	; (8001bd8 <MX_I2C1_Init+0xa4>)
 8001b94:	f7ff f8fc 	bl	8000d90 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_I2C1_Init+0xa8>)
 8001b9e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001bae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <MX_I2C1_Init+0xa4>)
 8001bbc:	f001 f976 	bl	8002eac <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_I2C1_Init+0xa4>)
 8001bc4:	f7ff f902 	bl	8000dcc <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	04030003 	.word	0x04030003
 8001bd4:	40010c00 	.word	0x40010c00
 8001bd8:	40005400 	.word	0x40005400
 8001bdc:	000186a0 	.word	0x000186a0

08001be0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b098      	sub	sp, #96	; 0x60
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001be6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fee0 	bl	80039c4 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c16:	463b      	mov	r3, r7
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001c24:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c28:	f7ff f9ea 	bl	8001000 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c2c:	f7fe fdfc 	bl	8000828 <__NVIC_GetPriorityGrouping>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fe4a 	bl	80008d0 <NVIC_EncodePriority>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	2019      	movs	r0, #25
 8001c42:	f7fe fe1b 	bl	800087c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c46:	2019      	movs	r0, #25
 8001c48:	f7fe fdfc 	bl	8000844 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c52:	2300      	movs	r3, #0
 8001c54:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 8001c56:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001c5a:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001c66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	483c      	ldr	r0, [pc, #240]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001c6e:	f001 fac5 	bl	80031fc <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8001c72:	483b      	ldr	r0, [pc, #236]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001c74:	f7ff fa0b 	bl	800108e <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4839      	ldr	r0, [pc, #228]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001c7c:	f7ff fa80 	bl	8001180 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001c80:	2360      	movs	r3, #96	; 0x60
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c90:	2300      	movs	r3, #0
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c94:	2300      	movs	r3, #0
 8001c96:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	482d      	ldr	r0, [pc, #180]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001caa:	f001 fb05 	bl	80032b8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001cae:	2101      	movs	r1, #1
 8001cb0:	482b      	ldr	r0, [pc, #172]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001cb2:	f7ff fa23 	bl	80010fc <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8001cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cba:	4829      	ldr	r0, [pc, #164]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001cbc:	f7ff fa60 	bl	8001180 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8001cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cd2:	4823      	ldr	r0, [pc, #140]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001cd4:	f001 faf0 	bl	80032b8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8001cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cdc:	4820      	ldr	r0, [pc, #128]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001cde:	f7ff fa0d 	bl	80010fc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	481e      	ldr	r0, [pc, #120]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001ce6:	f7ff fbd3 	bl	8001490 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001cea:	481d      	ldr	r0, [pc, #116]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001cec:	f7ff fbe2 	bl	80014b4 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001d06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001d18:	f001 fb06 	bl	8003328 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8001d1c:	4810      	ldr	r0, [pc, #64]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001d1e:	f7ff fbf4 	bl	800150a <LL_TIM_EnableIT_UPDATE>
    LL_TIM_SetCounter(TIM1,0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	480e      	ldr	r0, [pc, #56]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001d26:	f7ff f9d0 	bl	80010ca <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001d2c:	f7ff fbd1 	bl	80014d2 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <MX_TIM1_Init+0x180>)
 8001d32:	f7ff f99d 	bl	8001070 <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001d36:	2004      	movs	r0, #4
 8001d38:	f7ff f962 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_TIM1_Init+0x184>)
 8001d3e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d40:	2309      	movs	r3, #9
 8001d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_TIM1_Init+0x188>)
 8001d52:	f000 ff5f 	bl	8002c14 <LL_GPIO_Init>

}
 8001d56:	bf00      	nop
 8001d58:	3760      	adds	r7, #96	; 0x60
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	04050005 	.word	0x04050005
 8001d68:	40010800 	.word	0x40010800

08001d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	463b      	mov	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f7ff f91d 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001d96:	2004      	movs	r0, #4
 8001d98:	f7ff f932 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	f7ff f92f 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <MX_TIM2_Init+0x154>)
 8001da4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001da6:	2304      	movs	r3, #4
 8001da8:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	463b      	mov	r3, r7
 8001dac:	4619      	mov	r1, r3
 8001dae:	4845      	ldr	r0, [pc, #276]	; (8001ec4 <MX_TIM2_Init+0x158>)
 8001db0:	f000 ff30 	bl	8002c14 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001db4:	f640 0308 	movw	r3, #2056	; 0x808
 8001db8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4841      	ldr	r0, [pc, #260]	; (8001ec8 <MX_TIM2_Init+0x15c>)
 8001dc4:	f000 ff26 	bl	8002c14 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001dc8:	f7fe fd2e 	bl	8000828 <__NVIC_GetPriorityGrouping>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fd7c 	bl	80008d0 <NVIC_EncodePriority>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	201c      	movs	r0, #28
 8001dde:	f7fe fd4d 	bl	800087c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001de2:	201c      	movs	r0, #28
 8001de4:	f7fe fd2e 	bl	8000844 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8001de8:	f7ff fc44 	bl	8001674 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8001dec:	2103      	movs	r1, #3
 8001dee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001df2:	f7ff fb3b 	bl	800146c <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e00:	f7ff fa00 	bl	8001204 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2101      	movs	r1, #1
 8001e08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e0c:	f7ff fa44 	bl	8001298 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2101      	movs	r1, #1
 8001e14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e18:	f7ff fa88 	bl	800132c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2101      	movs	r1, #1
 8001e20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e24:	f7ff facc 	bl	80013c0 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001e28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e32:	f7ff f9e7 	bl	8001204 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2110      	movs	r1, #16
 8001e3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e3e:	f7ff fa2b 	bl	8001298 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2110      	movs	r1, #16
 8001e46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e4a:	f7ff fa6f 	bl	800132c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2110      	movs	r1, #16
 8001e52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e56:	f7ff fab3 	bl	80013c0 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8001e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e66:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e76:	f001 f9c1 	bl	80031fc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001e7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e7e:	f7ff f915 	bl	80010ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001e82:	2100      	movs	r1, #0
 8001e84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e88:	f7ff fb02 	bl	8001490 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001e8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e90:	f7ff fb10 	bl	80014b4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2,0);
 8001e94:	2100      	movs	r1, #0
 8001e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e9a:	f7ff f916 	bl	80010ca <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM2);
 8001e9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ea2:	f7ff f8e5 	bl	8001070 <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 8001ea6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eaa:	f7ff fb21 	bl	80014f0 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8001eae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001eb2:	f7ff fb2a 	bl	800150a <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM2_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	04800080 	.word	0x04800080
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00

08001ecc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f7ff f86d 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8001ef6:	2008      	movs	r0, #8
 8001ef8:	f7ff f882 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001efc:	f243 0330 	movw	r3, #12336	; 0x3030
 8001f00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001f02:	2304      	movs	r3, #4
 8001f04:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	463b      	mov	r3, r7
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4836      	ldr	r0, [pc, #216]	; (8001fe4 <MX_TIM3_Init+0x118>)
 8001f0c:	f000 fe82 	bl	8002c14 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f10:	f7fe fc8a 	bl	8000828 <__NVIC_GetPriorityGrouping>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fcd8 	bl	80008d0 <NVIC_EncodePriority>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4619      	mov	r1, r3
 8001f24:	201d      	movs	r0, #29
 8001f26:	f7fe fca9 	bl	800087c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8001f2a:	201d      	movs	r0, #29
 8001f2c:	f7fe fc8a 	bl	8000844 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 8001f30:	f7ff fbb0 	bl	8001694 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8001f34:	2103      	movs	r1, #3
 8001f36:	482c      	ldr	r0, [pc, #176]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f38:	f7ff fa98 	bl	800146c <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f40:	2101      	movs	r1, #1
 8001f42:	4829      	ldr	r0, [pc, #164]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f44:	f7ff f95e 	bl	8001204 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4826      	ldr	r0, [pc, #152]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f4e:	f7ff f9a3 	bl	8001298 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2101      	movs	r1, #1
 8001f56:	4824      	ldr	r0, [pc, #144]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f58:	f7ff f9e8 	bl	800132c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4821      	ldr	r0, [pc, #132]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f62:	f7ff fa2d 	bl	80013c0 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8001f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f6a:	2110      	movs	r1, #16
 8001f6c:	481e      	ldr	r0, [pc, #120]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f6e:	f7ff f949 	bl	8001204 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2110      	movs	r1, #16
 8001f76:	481c      	ldr	r0, [pc, #112]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f78:	f7ff f98e 	bl	8001298 <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2110      	movs	r1, #16
 8001f80:	4819      	ldr	r0, [pc, #100]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f82:	f7ff f9d3 	bl	800132c <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2110      	movs	r1, #16
 8001f8a:	4817      	ldr	r0, [pc, #92]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001f8c:	f7ff fa18 	bl	80013c0 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8001f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f9c:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480f      	ldr	r0, [pc, #60]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001faa:	f001 f927 	bl	80031fc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001fae:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001fb0:	f7ff f87c 	bl	80010ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001fb8:	f7ff fa6a 	bl	8001490 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001fbc:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001fbe:	f7ff fa79 	bl	80014b4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3,0);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001fc6:	f7ff f880 	bl	80010ca <LL_TIM_SetCounter>
   LL_TIM_EnableCounter(TIM3);
 8001fca:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001fcc:	f7ff f850 	bl	8001070 <LL_TIM_EnableCounter>
   LL_TIM_ClearFlag_UPDATE(TIM3);
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001fd2:	f7ff fa8d 	bl	80014f0 <LL_TIM_ClearFlag_UPDATE>
   LL_TIM_EnableIT_UPDATE(TIM3);
 8001fd6:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <MX_TIM3_Init+0x11c>)
 8001fd8:	f7ff fa97 	bl	800150a <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40010c00 	.word	0x40010c00
 8001fe8:	40000400 	.word	0x40000400

08001fec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ff2:	1d3b      	adds	r3, r7, #4
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002000:	2004      	movs	r0, #4
 8002002:	f7fe ffe5 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8002006:	f7fe fc0f 	bl	8000828 <__NVIC_GetPriorityGrouping>
 800200a:	4603      	mov	r3, r0
 800200c:	2200      	movs	r2, #0
 800200e:	2104      	movs	r1, #4
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fc5d 	bl	80008d0 <NVIC_EncodePriority>
 8002016:	4603      	mov	r3, r0
 8002018:	4619      	mov	r1, r3
 800201a:	201e      	movs	r0, #30
 800201c:	f7fe fc2e 	bl	800087c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002020:	201e      	movs	r0, #30
 8002022:	f7fe fc0f 	bl	8000844 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 199;
 8002026:	23c7      	movs	r3, #199	; 0xc7
 8002028:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 17999;
 800202e:	f244 634f 	movw	r3, #17999	; 0x464f
 8002032:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV4;
 8002034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002038:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	4619      	mov	r1, r3
 800203e:	480f      	ldr	r0, [pc, #60]	; (800207c <MX_TIM4_Init+0x90>)
 8002040:	f001 f8dc 	bl	80031fc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002044:	480d      	ldr	r0, [pc, #52]	; (800207c <MX_TIM4_Init+0x90>)
 8002046:	f7ff f831 	bl	80010ac <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 800204a:	2100      	movs	r1, #0
 800204c:	480b      	ldr	r0, [pc, #44]	; (800207c <MX_TIM4_Init+0x90>)
 800204e:	f7ff f9f9 	bl	8001444 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002052:	2100      	movs	r1, #0
 8002054:	4809      	ldr	r0, [pc, #36]	; (800207c <MX_TIM4_Init+0x90>)
 8002056:	f7ff fa1b 	bl	8001490 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 800205a:	4808      	ldr	r0, [pc, #32]	; (800207c <MX_TIM4_Init+0x90>)
 800205c:	f7ff fa2a 	bl	80014b4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM4);
 8002060:	4806      	ldr	r0, [pc, #24]	; (800207c <MX_TIM4_Init+0x90>)
 8002062:	f7ff fa52 	bl	800150a <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM4,0);
 8002066:	2100      	movs	r1, #0
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <MX_TIM4_Init+0x90>)
 800206a:	f7ff f82e 	bl	80010ca <LL_TIM_SetCounter>
    LL_TIM_EnableCounter(TIM4);
 800206e:	4803      	ldr	r0, [pc, #12]	; (800207c <MX_TIM4_Init+0x90>)
 8002070:	f7fe fffe 	bl	8001070 <LL_TIM_EnableCounter>

  /* USER CODE END TIM4_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40000800 	.word	0x40000800

08002080 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	615a      	str	r2, [r3, #20]
 8002098:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209a:	463b      	mov	r3, r7
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80020a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ac:	f7fe ffa8 	bl	8001000 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80020b0:	2008      	movs	r0, #8
 80020b2:	f7fe ffa5 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80020b6:	f244 0340 	movw	r3, #16448	; 0x4040
 80020ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020bc:	2309      	movs	r3, #9
 80020be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	463b      	mov	r3, r7
 80020ca:	4619      	mov	r1, r3
 80020cc:	481f      	ldr	r0, [pc, #124]	; (800214c <MX_USART1_UART_Init+0xcc>)
 80020ce:	f000 fda1 	bl	8002c14 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80020d2:	f248 0380 	movw	r3, #32896	; 0x8080
 80020d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80020d8:	2304      	movs	r3, #4
 80020da:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	463b      	mov	r3, r7
 80020de:	4619      	mov	r1, r3
 80020e0:	481a      	ldr	r0, [pc, #104]	; (800214c <MX_USART1_UART_Init+0xcc>)
 80020e2:	f000 fd97 	bl	8002c14 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 80020e6:	f7ff fab5 	bl	8001654 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020ea:	f7fe fb9d 	bl	8000828 <__NVIC_GetPriorityGrouping>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fbeb 	bl	80008d0 <NVIC_EncodePriority>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4619      	mov	r1, r3
 80020fe:	2025      	movs	r0, #37	; 0x25
 8002100:	f7fe fbbc 	bl	800087c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002104:	2025      	movs	r0, #37	; 0x25
 8002106:	f7fe fb9d 	bl	8000844 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800210a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800210e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002114:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800211e:	230c      	movs	r3, #12
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002126:	2300      	movs	r3, #0
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <MX_USART1_UART_Init+0xd0>)
 8002132:	f001 fb63 	bl	80037fc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <MX_USART1_UART_Init+0xd0>)
 8002138:	f7ff fa05 	bl	8001546 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_USART1_UART_Init+0xd0>)
 800213e:	f7ff f9f3 	bl	8001528 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	3730      	adds	r7, #48	; 0x30
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40010c00 	.word	0x40010c00
 8002150:	40013800 	.word	0x40013800

08002154 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002158:	2001      	movs	r0, #1
 800215a:	f7fe ff21 	bl	8000fa0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800215e:	f7fe fb63 	bl	8000828 <__NVIC_GetPriorityGrouping>
 8002162:	4603      	mov	r3, r0
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fbb1 	bl	80008d0 <NVIC_EncodePriority>
 800216e:	4603      	mov	r3, r0
 8002170:	4619      	mov	r1, r3
 8002172:	200b      	movs	r0, #11
 8002174:	f7fe fb82 	bl	800087c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002178:	200b      	movs	r0, #11
 800217a:	f7fe fb63 	bl	8000844 <__NVIC_EnableIRQ>

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800218a:	f107 0318 	add.w	r3, r7, #24
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80021a2:	2010      	movs	r0, #16
 80021a4:	f7fe ff2c 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80021a8:	2020      	movs	r0, #32
 80021aa:	f7fe ff29 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80021ae:	2004      	movs	r0, #4
 80021b0:	f7fe ff26 	bl	8001000 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80021b4:	2008      	movs	r0, #8
 80021b6:	f7fe ff23 	bl	8001000 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15);
 80021ba:	4946      	ldr	r1, [pc, #280]	; (80022d4 <MX_GPIO_Init+0x150>)
 80021bc:	4846      	ldr	r0, [pc, #280]	; (80022d8 <MX_GPIO_Init+0x154>)
 80021be:	f7ff fa29 	bl	8001614 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80021c2:	4944      	ldr	r1, [pc, #272]	; (80022d4 <MX_GPIO_Init+0x150>)
 80021c4:	4845      	ldr	r0, [pc, #276]	; (80022dc <MX_GPIO_Init+0x158>)
 80021c6:	f7ff fa25 	bl	8001614 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 80021ca:	4945      	ldr	r1, [pc, #276]	; (80022e0 <MX_GPIO_Init+0x15c>)
 80021cc:	4845      	ldr	r0, [pc, #276]	; (80022e4 <MX_GPIO_Init+0x160>)
 80021ce:	f7ff fa21 	bl	8001614 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE13);
 80021d2:	4945      	ldr	r1, [pc, #276]	; (80022e8 <MX_GPIO_Init+0x164>)
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7ff fa85 	bl	80016e4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTC, LL_GPIO_AF_EXTI_LINE14);
 80021da:	4944      	ldr	r1, [pc, #272]	; (80022ec <MX_GPIO_Init+0x168>)
 80021dc:	2002      	movs	r0, #2
 80021de:	f7ff fa81 	bl	80016e4 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 80021e2:	4943      	ldr	r1, [pc, #268]	; (80022f0 <MX_GPIO_Init+0x16c>)
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff fa7d 	bl	80016e4 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80021ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80021f4:	2300      	movs	r3, #0
 80021f6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80021f8:	2301      	movs	r3, #1
 80021fa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80021fc:	f107 0318 	add.w	r3, r7, #24
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fbd3 	bl	80029ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8002206:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800220a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800220c:	2301      	movs	r3, #1
 800220e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002210:	2300      	movs	r3, #0
 8002212:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002214:	2301      	movs	r3, #1
 8002216:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002218:	f107 0318 	add.w	r3, r7, #24
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fbc5 	bl	80029ac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8002222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002226:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002228:	2301      	movs	r3, #1
 800222a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800222c:	2300      	movs	r3, #0
 800222e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002230:	2301      	movs	r3, #1
 8002232:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fbb7 	bl	80029ac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 800223e:	2204      	movs	r2, #4
 8002240:	492c      	ldr	r1, [pc, #176]	; (80022f4 <MX_GPIO_Init+0x170>)
 8002242:	4825      	ldr	r0, [pc, #148]	; (80022d8 <MX_GPIO_Init+0x154>)
 8002244:	f7ff f9b4 	bl	80015b0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8002248:	2204      	movs	r2, #4
 800224a:	492b      	ldr	r1, [pc, #172]	; (80022f8 <MX_GPIO_Init+0x174>)
 800224c:	4822      	ldr	r0, [pc, #136]	; (80022d8 <MX_GPIO_Init+0x154>)
 800224e:	f7ff f9af 	bl	80015b0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8002252:	2204      	movs	r2, #4
 8002254:	4929      	ldr	r1, [pc, #164]	; (80022fc <MX_GPIO_Init+0x178>)
 8002256:	4821      	ldr	r0, [pc, #132]	; (80022dc <MX_GPIO_Init+0x158>)
 8002258:	f7ff f9aa 	bl	80015b0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <MX_GPIO_Init+0x150>)
 800225e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002260:	2301      	movs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002264:	2302      	movs	r3, #2
 8002266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4819      	ldr	r0, [pc, #100]	; (80022d8 <MX_GPIO_Init+0x154>)
 8002272:	f000 fccf 	bl	8002c14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <MX_GPIO_Init+0x150>)
 8002278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800227a:	2301      	movs	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4814      	ldr	r0, [pc, #80]	; (80022dc <MX_GPIO_Init+0x158>)
 800228c:	f000 fcc2 	bl	8002c14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_11;
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_GPIO_Init+0x15c>)
 8002292:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002294:	2301      	movs	r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	4619      	mov	r1, r3
 80022a4:	480f      	ldr	r0, [pc, #60]	; (80022e4 <MX_GPIO_Init+0x160>)
 80022a6:	f000 fcb5 	bl	8002c14 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022aa:	f7fe fabd 	bl	8000828 <__NVIC_GetPriorityGrouping>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fb0b 	bl	80008d0 <NVIC_EncodePriority>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4619      	mov	r1, r3
 80022be:	2028      	movs	r0, #40	; 0x28
 80022c0:	f7fe fadc 	bl	800087c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022c4:	2028      	movs	r0, #40	; 0x28
 80022c6:	f7fe fabd 	bl	8000844 <__NVIC_EnableIRQ>

}
 80022ca:	bf00      	nop
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	04800080 	.word	0x04800080
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40010c00 	.word	0x40010c00
 80022e0:	040a000a 	.word	0x040a000a
 80022e4:	40010800 	.word	0x40010800
 80022e8:	00f00003 	.word	0x00f00003
 80022ec:	0f000003 	.word	0x0f000003
 80022f0:	000f0003 	.word	0x000f0003
 80022f4:	04200020 	.word	0x04200020
 80022f8:	04400040 	.word	0x04400040
 80022fc:	04100010 	.word	0x04100010

08002300 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4013      	ands	r3, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40010400 	.word	0x40010400

0800232c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002334:	4a03      	ldr	r2, [pc, #12]	; (8002344 <LL_EXTI_ClearFlag_0_31+0x18>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6153      	str	r3, [r2, #20]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40010400 	.word	0x40010400

08002348 <LL_TIM_ClearFlag_UPDATE>:
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f06f 0201 	mvn.w	r2, #1
 8002356:	611a      	str	r2, [r3, #16]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <LL_GPIO_SetOutputPin>:
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	611a      	str	r2, [r3, #16]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <LL_GPIO_ResetOutputPin>:
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29a      	uxth	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	615a      	str	r2, [r3, #20]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

	++ServoCountValue;
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <TIM1_UP_IRQHandler+0x48>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <TIM1_UP_IRQHandler+0x48>)
 800240e:	701a      	strb	r2, [r3, #0]
	if(ServoCountValue > ServoCompareValue)
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <TIM1_UP_IRQHandler+0x48>)
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <TIM1_UP_IRQHandler+0x4c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d904      	bls.n	8002426 <TIM1_UP_IRQHandler+0x26>
	{
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <TIM1_UP_IRQHandler+0x50>)
 800241e:	480d      	ldr	r0, [pc, #52]	; (8002454 <TIM1_UP_IRQHandler+0x54>)
 8002420:	f7ff ffae 	bl	8002380 <LL_GPIO_ResetOutputPin>
 8002424:	e003      	b.n	800242e <TIM1_UP_IRQHandler+0x2e>
	} else
	{
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8002426:	490a      	ldr	r1, [pc, #40]	; (8002450 <TIM1_UP_IRQHandler+0x50>)
 8002428:	480a      	ldr	r0, [pc, #40]	; (8002454 <TIM1_UP_IRQHandler+0x54>)
 800242a:	f7ff ff9a 	bl	8002362 <LL_GPIO_SetOutputPin>
	};
	if(ServoCountValue >= ServoReloadValue) ServoCountValue = 0;
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <TIM1_UP_IRQHandler+0x48>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2bc7      	cmp	r3, #199	; 0xc7
 8002434:	d902      	bls.n	800243c <TIM1_UP_IRQHandler+0x3c>
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <TIM1_UP_IRQHandler+0x48>)
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
	LL_TIM_ClearFlag_UPDATE(TIM1);
 800243c:	4806      	ldr	r0, [pc, #24]	; (8002458 <TIM1_UP_IRQHandler+0x58>)
 800243e:	f7ff ff83 	bl	8002348 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000094 	.word	0x20000094
 800244c:	20000095 	.word	0x20000095
 8002450:	04080008 	.word	0x04080008
 8002454:	40010800 	.word	0x40010800
 8002458:	40012c00 	.word	0x40012c00

0800245c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002460:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002464:	f7ff ff70 	bl	8002348 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <TIM3_IRQHandler+0x10>)
 8002472:	f7ff ff69 	bl	8002348 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40000400 	.word	0x40000400

08002480 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM4);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <TIM4_IRQHandler+0x10>)
 8002486:	f7ff ff5f 	bl	8002348 <LL_TIM_ClearFlag_UPDATE>
//  printf ("TIM2 : %d \n", LL_TIM_GetCounter(TIM2));
//  printf ("TIM3 : %d \n", LL_TIM_GetCounter(TIM3));

  /* USER CODE END TIM4_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40000800 	.word	0x40000800

08002494 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 80024a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024a8:	f7ff ff2a 	bl	8002300 <LL_EXTI_IsActiveFlag_0_31>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 80024b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80024b6:	f7ff ff39 	bl	800232c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */

    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80024ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024be:	f7ff ff1f 	bl	8002300 <LL_EXTI_IsActiveFlag_0_31>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80024c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024cc:	f7ff ff2e 	bl	800232c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80024d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024d4:	f7ff ff14 	bl	8002300 <LL_EXTI_IsActiveFlag_0_31>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80024de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024e2:	f7ff ff23 	bl	800232c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <SetServoCompare>:

/* USER CODE BEGIN 1 */
void SetServoCompare(float ServoNewVal)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	ServoCompareValue = ServoNewVal;
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fe f8fd 	bl	80006f4 <__aeabi_f2uiz>
 80024fa:	4603      	mov	r3, r0
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b03      	ldr	r3, [pc, #12]	; (800250c <SetServoCompare+0x20>)
 8002500:	701a      	strb	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000095 	.word	0x20000095

08002510 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e00a      	b.n	8002538 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002522:	f3af 8000 	nop.w
 8002526:	4601      	mov	r1, r0
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	60ba      	str	r2, [r7, #8]
 800252e:	b2ca      	uxtb	r2, r1
 8002530:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3301      	adds	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	dbf0      	blt.n	8002522 <_read+0x12>
	}

return len;
 8002540:	687b      	ldr	r3, [r7, #4]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e009      	b.n	8002570 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	60ba      	str	r2, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff f8eb 	bl	8001740 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	dbf1      	blt.n	800255c <_write+0x12>
	}
	return len;
 8002578:	687b      	ldr	r3, [r7, #4]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_close>:

int _close(int file)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
	return -1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a8:	605a      	str	r2, [r3, #4]
	return 0;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <_isatty>:

int _isatty(int file)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
	return 1;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
	return 0;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
	...

080025e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <_sbrk+0x5c>)
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <_sbrk+0x60>)
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <_sbrk+0x64>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <_sbrk+0x64>)
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <_sbrk+0x68>)
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	429a      	cmp	r2, r3
 8002612:	d207      	bcs.n	8002624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002614:	f001 f9ac 	bl	8003970 <__errno>
 8002618:	4602      	mov	r2, r0
 800261a:	230c      	movs	r3, #12
 800261c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	e009      	b.n	8002638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <_sbrk+0x64>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <_sbrk+0x64>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	4a05      	ldr	r2, [pc, #20]	; (8002648 <_sbrk+0x64>)
 8002634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002636:	68fb      	ldr	r3, [r7, #12]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20005000 	.word	0x20005000
 8002644:	00000400 	.word	0x00000400
 8002648:	20000098 	.word	0x20000098
 800264c:	200000b8 	.word	0x200000b8

08002650 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <SystemInit+0x5c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <SystemInit+0x5c>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <SystemInit+0x5c>)
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4911      	ldr	r1, [pc, #68]	; (80026ac <SystemInit+0x5c>)
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <SystemInit+0x60>)
 8002668:	4013      	ands	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <SystemInit+0x5c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <SystemInit+0x5c>)
 8002672:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <SystemInit+0x5c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <SystemInit+0x5c>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002686:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <SystemInit+0x5c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a07      	ldr	r2, [pc, #28]	; (80026ac <SystemInit+0x5c>)
 800268e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002692:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SystemInit+0x5c>)
 8002696:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800269a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <SystemInit+0x64>)
 800269e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40021000 	.word	0x40021000
 80026b0:	f8ff0000 	.word	0xf8ff0000
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026ba:	e003      	b.n	80026c4 <LoopCopyDataInit>

080026bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026c2:	3104      	adds	r1, #4

080026c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026c4:	480a      	ldr	r0, [pc, #40]	; (80026f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026cc:	d3f6      	bcc.n	80026bc <CopyDataInit>
  ldr r2, =_sbss
 80026ce:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026d0:	e002      	b.n	80026d8 <LoopFillZerobss>

080026d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026d4:	f842 3b04 	str.w	r3, [r2], #4

080026d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026dc:	d3f9      	bcc.n	80026d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026de:	f7ff ffb7 	bl	8002650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f001 f94b 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026e6:	f7ff f843 	bl	8001770 <main>
  bx lr
 80026ea:	4770      	bx	lr
  ldr r3, =_sidata
 80026ec:	08004ab4 	.word	0x08004ab4
  ldr r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026f4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80026f8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80026fc:	200000b8 	.word	0x200000b8

08002700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC1_2_IRQHandler>

08002702 <LL_ADC_REG_SetSequencerLength>:
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <LL_ADC_IsEnabled>:
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
	...

0800274c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800275a:	4813      	ldr	r0, [pc, #76]	; (80027a8 <LL_ADC_CommonInit+0x5c>)
 800275c:	f7ff ffe3 	bl	8002726 <LL_ADC_IsEnabled>
 8002760:	4604      	mov	r4, r0
 8002762:	4812      	ldr	r0, [pc, #72]	; (80027ac <LL_ADC_CommonInit+0x60>)
 8002764:	f7ff ffdf 	bl	8002726 <LL_ADC_IsEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	4323      	orrs	r3, r4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d114      	bne.n	800279a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d009      	beq.n	800278c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	e008      	b.n	800279e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	e001      	b.n	800279e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	40012400 	.word	0x40012400
 80027ac:	40012800 	.word	0x40012800

080027b0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffb1 	bl	8002726 <LL_ADC_IsEnabled>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d112      	bne.n	80027f0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	e001      	b.n	80027f4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff8a 	bl	8002726 <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d131      	bne.n	800287c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	430b      	orrs	r3, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	e008      	b.n	800284c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8002854:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	6811      	ldr	r1, [r2, #0]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	68d2      	ldr	r2, [r2, #12]
 8002860:	4311      	orrs	r1, r2
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6912      	ldr	r2, [r2, #16]
 8002866:	430a      	orrs	r2, r1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4619      	mov	r1, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff44 	bl	8002702 <LL_ADC_REG_SetSequencerLength>
 800287a:	e001      	b.n	8002880 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <LL_EXTI_EnableIT_0_31>:
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <LL_EXTI_EnableIT_0_31+0x20>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4904      	ldr	r1, [pc, #16]	; (80028ac <LL_EXTI_EnableIT_0_31+0x20>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40010400 	.word	0x40010400

080028b0 <LL_EXTI_DisableIT_0_31>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <LL_EXTI_DisableIT_0_31+0x20>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	43db      	mvns	r3, r3
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <LL_EXTI_DisableIT_0_31+0x20>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40010400 	.word	0x40010400

080028d4 <LL_EXTI_EnableEvent_0_31>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4904      	ldr	r1, [pc, #16]	; (80028f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40010400 	.word	0x40010400

080028f8 <LL_EXTI_DisableEvent_0_31>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	43db      	mvns	r3, r3
 8002908:	4903      	ldr	r1, [pc, #12]	; (8002918 <LL_EXTI_DisableEvent_0_31+0x20>)
 800290a:	4013      	ands	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40010400 	.word	0x40010400

0800291c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4904      	ldr	r1, [pc, #16]	; (800293c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010400 	.word	0x40010400

08002940 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	43db      	mvns	r3, r3
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002952:	4013      	ands	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40010400 	.word	0x40010400

08002964 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4904      	ldr	r1, [pc, #16]	; (8002984 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4313      	orrs	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010400 	.word	0x40010400

08002988 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	43db      	mvns	r3, r3
 8002998:	4903      	ldr	r1, [pc, #12]	; (80029a8 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800299a:	4013      	ands	r3, r2
 800299c:	60cb      	str	r3, [r1, #12]
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40010400 	.word	0x40010400

080029ac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	791b      	ldrb	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d060      	beq.n	8002a82 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d067      	beq.n	8002a98 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	795b      	ldrb	r3, [r3, #5]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d00e      	beq.n	80029ee <LL_EXTI_Init+0x42>
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d017      	beq.n	8002a04 <LL_EXTI_Init+0x58>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d120      	bne.n	8002a1a <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff8b 	bl	80028f8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff50 	bl	800288c <LL_EXTI_EnableIT_0_31>
          break;
 80029ec:	e018      	b.n	8002a20 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff5c 	bl	80028b0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff69 	bl	80028d4 <LL_EXTI_EnableEvent_0_31>
          break;
 8002a02:	e00d      	b.n	8002a20 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff3f 	bl	800288c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff5e 	bl	80028d4 <LL_EXTI_EnableEvent_0_31>
          break;
 8002a18:	e002      	b.n	8002a20 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a1e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	799b      	ldrb	r3, [r3, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d037      	beq.n	8002a98 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	799b      	ldrb	r3, [r3, #6]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d00e      	beq.n	8002a4e <LL_EXTI_Init+0xa2>
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d017      	beq.n	8002a64 <LL_EXTI_Init+0xb8>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d120      	bne.n	8002a7a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ffa3 	bl	8002988 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff68 	bl	800291c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002a4c:	e025      	b.n	8002a9a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff ff74 	bl	8002940 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff81 	bl	8002964 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002a62:	e01a      	b.n	8002a9a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff57 	bl	800291c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff76 	bl	8002964 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002a78:	e00f      	b.n	8002a9a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
            break;
 8002a7e:	bf00      	nop
 8002a80:	e00b      	b.n	8002a9a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff12 	bl	80028b0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff31 	bl	80028f8 <LL_EXTI_DisableEvent_0_31>
 8002a96:	e000      	b.n	8002a9a <LL_EXTI_Init+0xee>
      }
 8002a98:	bf00      	nop
  }
  return status;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <LL_GPIO_SetPinMode>:
{
 8002aa4:	b490      	push	{r4, r7}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0e1b      	lsrs	r3, r3, #24
 8002ab8:	4413      	add	r3, r2
 8002aba:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002abc:	6822      	ldr	r2, [r4, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	613b      	str	r3, [r7, #16]
  return result;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	401a      	ands	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	61bb      	str	r3, [r7, #24]
  return result;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	4313      	orrs	r3, r2
 8002afc:	6023      	str	r3, [r4, #0]
}
 8002afe:	bf00      	nop
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc90      	pop	{r4, r7}
 8002b06:	4770      	bx	lr

08002b08 <LL_GPIO_SetPinSpeed>:
{
 8002b08:	b490      	push	{r4, r7}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	0e1b      	lsrs	r3, r3, #24
 8002b1c:	4413      	add	r3, r2
 8002b1e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002b20:	6822      	ldr	r2, [r4, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	613b      	str	r3, [r7, #16]
  return result;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	2103      	movs	r1, #3
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	401a      	ands	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	61bb      	str	r3, [r7, #24]
  return result;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	6023      	str	r3, [r4, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc90      	pop	{r4, r7}
 8002b6a:	4770      	bx	lr

08002b6c <LL_GPIO_SetPinOutputType>:
{
 8002b6c:	b490      	push	{r4, r7}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	0e1b      	lsrs	r3, r3, #24
 8002b80:	4413      	add	r3, r2
 8002b82:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002b84:	6822      	ldr	r2, [r4, #0]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	fa93 f3a3 	rbit	r3, r3
 8002b90:	613b      	str	r3, [r7, #16]
  return result;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	61bb      	str	r3, [r7, #24]
  return result;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	6023      	str	r3, [r4, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc90      	pop	{r4, r7}
 8002bce:	4770      	bx	lr

08002bd0 <LL_GPIO_SetPinPull>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	43db      	mvns	r3, r3
 8002be6:	401a      	ands	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	613b      	str	r3, [r7, #16]
  return result;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4619      	mov	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	408b      	lsls	r3, r1
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	60da      	str	r2, [r3, #12]
}
 8002c0a:	bf00      	nop
 8002c0c:	371c      	adds	r7, #28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	60fb      	str	r3, [r7, #12]
  return result;
 8002c34:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002c3e:	e040      	b.n	8002cc2 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	409a      	lsls	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d036      	beq.n	8002cbc <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	2b07      	cmp	r3, #7
 8002c52:	d806      	bhi.n	8002c62 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002c54:	f240 1201 	movw	r2, #257	; 0x101
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	e008      	b.n	8002c74 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b08      	subs	r3, #8
 8002c66:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c72:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	69b9      	ldr	r1, [r7, #24]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff11 	bl	8002aa4 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	461a      	mov	r2, r3
 8002c88:	69b9      	ldr	r1, [r7, #24]
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffa0 	bl	8002bd0 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d003      	beq.n	8002ca0 <LL_GPIO_Init+0x8c>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	d10d      	bne.n	8002cbc <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	69b9      	ldr	r1, [r7, #24]
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff2d 	bl	8002b08 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	69b9      	ldr	r1, [r7, #24]
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ff58 	bl	8002b6c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1b8      	bne.n	8002c40 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <LL_I2C_Enable>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <LL_I2C_Disable>:
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 0201 	bic.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	601a      	str	r2, [r3, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <LL_I2C_SetOwnAddress1>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d28:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	609a      	str	r2, [r3, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
	...

08002d44 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002d44:	b490      	push	{r4, r7}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8002d52:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8002d54:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <LL_I2C_ConfigSpeed+0x114>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d68:	ea44 0203 	orr.w	r2, r4, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4938      	ldr	r1, [pc, #224]	; (8002e5c <LL_I2C_ConfigSpeed+0x118>)
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d801      	bhi.n	8002d84 <LL_I2C_ConfigSpeed+0x40>
 8002d80:	1c63      	adds	r3, r4, #1
 8002d82:	e008      	b.n	8002d96 <LL_I2C_ConfigSpeed+0x52>
 8002d84:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002d88:	fb03 f304 	mul.w	r3, r3, r4
 8002d8c:	4934      	ldr	r1, [pc, #208]	; (8002e60 <LL_I2C_ConfigSpeed+0x11c>)
 8002d8e:	fba1 1303 	umull	r1, r3, r1, r3
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	3301      	adds	r3, #1
 8002d96:	431a      	orrs	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <LL_I2C_ConfigSpeed+0x118>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d939      	bls.n	8002e18 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d117      	bne.n	8002dda <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	e01d      	b.n	8002e10 <LL_I2C_ConfigSpeed+0xcc>
 8002dd4:	f248 0301 	movw	r3, #32769	; 0x8001
 8002dd8:	e01a      	b.n	8002e10 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009a      	lsls	r2, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009a      	lsls	r2, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0a:	e001      	b.n	8002e10 <LL_I2C_ConfigSpeed+0xcc>
 8002e0c:	f248 0301 	movw	r3, #32769	; 0x8001
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	ea43 0402 	orr.w	r4, r3, r2
 8002e16:	e010      	b.n	8002e3a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d905      	bls.n	8002e36 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	e000      	b.n	8002e38 <LL_I2C_ConfigSpeed+0xf4>
 8002e36:	2304      	movs	r3, #4
 8002e38:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	ea44 0203 	orr.w	r2, r4, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	61da      	str	r2, [r3, #28]
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc90      	pop	{r4, r7}
 8002e56:	4770      	bx	lr
 8002e58:	431bde83 	.word	0x431bde83
 8002e5c:	000186a0 	.word	0x000186a0
 8002e60:	10624dd3 	.word	0x10624dd3

08002e64 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 021a 	bic.w	r2, r3, #26
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	601a      	str	r2, [r3, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	601a      	str	r2, [r3, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff1d 	bl	8002cf6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 f87b 	bl	8002fbc <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002ec6:	6939      	ldr	r1, [r7, #16]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff37 	bl	8002d44 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68d9      	ldr	r1, [r3, #12]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff17 	bl	8002d14 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ffb9 	bl	8002e64 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fef0 	bl	8002cd8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ffc2 	bl	8002e88 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <LL_RCC_GetSysClkSource>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <LL_RCC_GetSysClkSource+0x14>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 030c 	and.w	r3, r3, #12
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40021000 	.word	0x40021000

08002f28 <LL_RCC_GetAHBPrescaler>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <LL_RCC_GetAHBPrescaler+0x14>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	40021000 	.word	0x40021000

08002f40 <LL_RCC_GetAPB1Prescaler>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40021000 	.word	0x40021000

08002f58 <LL_RCC_GetAPB2Prescaler>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <LL_RCC_GetAPB2Prescaler+0x14>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	40021000 	.word	0x40021000

08002f70 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <LL_RCC_PLL_GetMainSource+0x14>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40021000 	.word	0x40021000

08002f88 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <LL_RCC_PLL_GetPrediv+0x18>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0c5b      	lsrs	r3, r3, #17
 8002faa:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000

08002fbc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002fc4:	f000 f820 	bl	8003008 <RCC_GetSystemClockFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f83a 	bl	800304c <RCC_GetHCLKClockFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f848 	bl	8003078 <RCC_GetPCLK1ClockFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f854 	bl	80030a0 <RCC_GetPCLK2ClockFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60da      	str	r2, [r3, #12]
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003012:	f7ff ff7d 	bl	8002f10 <LL_RCC_GetSysClkSource>
 8003016:	4603      	mov	r3, r0
 8003018:	2b04      	cmp	r3, #4
 800301a:	d006      	beq.n	800302a <RCC_GetSystemClockFreq+0x22>
 800301c:	2b08      	cmp	r3, #8
 800301e:	d007      	beq.n	8003030 <RCC_GetSystemClockFreq+0x28>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <RCC_GetSystemClockFreq+0x40>)
 8003026:	607b      	str	r3, [r7, #4]
      break;
 8003028:	e009      	b.n	800303e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <RCC_GetSystemClockFreq+0x40>)
 800302c:	607b      	str	r3, [r7, #4]
      break;
 800302e:	e006      	b.n	800303e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003030:	f000 f84a 	bl	80030c8 <RCC_PLL_GetFreqDomain_SYS>
 8003034:	6078      	str	r0, [r7, #4]
      break;
 8003036:	e002      	b.n	800303e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <RCC_GetSystemClockFreq+0x40>)
 800303a:	607b      	str	r3, [r7, #4]
      break;
 800303c:	bf00      	nop
  }

  return frequency;
 800303e:	687b      	ldr	r3, [r7, #4]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	007a1200 	.word	0x007a1200

0800304c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003054:	f7ff ff68 	bl	8002f28 <LL_RCC_GetAHBPrescaler>
 8003058:	4603      	mov	r3, r0
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <RCC_GetHCLKClockFreq+0x28>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	40d3      	lsrs	r3, r2
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	080049fc 	.word	0x080049fc

08003078 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003080:	f7ff ff5e 	bl	8002f40 <LL_RCC_GetAPB1Prescaler>
 8003084:	4603      	mov	r3, r0
 8003086:	0a1b      	lsrs	r3, r3, #8
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <RCC_GetPCLK1ClockFreq+0x24>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	461a      	mov	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	40d3      	lsrs	r3, r2
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	08004a0c 	.word	0x08004a0c

080030a0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80030a8:	f7ff ff56 	bl	8002f58 <LL_RCC_GetAPB2Prescaler>
 80030ac:	4603      	mov	r3, r0
 80030ae:	0adb      	lsrs	r3, r3, #11
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <RCC_GetPCLK2ClockFreq+0x24>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	40d3      	lsrs	r3, r2
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	08004a0c 	.word	0x08004a0c

080030c8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	2300      	movs	r3, #0
 80030d4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80030d6:	f7ff ff4b 	bl	8002f70 <LL_RCC_PLL_GetMainSource>
 80030da:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <RCC_PLL_GetFreqDomain_SYS+0x22>
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e6:	d003      	beq.n	80030f0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80030e8:	e00b      	b.n	8003102 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80030ec:	607b      	str	r3, [r7, #4]
      break;
 80030ee:	e00b      	b.n	8003108 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80030f0:	f7ff ff56 	bl	8002fa0 <LL_RCC_PLL_GetPrediv>
 80030f4:	4603      	mov	r3, r0
 80030f6:	3301      	adds	r3, #1
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	607b      	str	r3, [r7, #4]
      break;
 8003100:	e002      	b.n	8003108 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003102:	4b07      	ldr	r3, [pc, #28]	; (8003120 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003104:	607b      	str	r3, [r7, #4]
      break;
 8003106:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003108:	f7ff ff3e 	bl	8002f88 <LL_RCC_PLL_GetMultiplicator>
 800310c:	4603      	mov	r3, r0
 800310e:	0c9b      	lsrs	r3, r3, #18
 8003110:	3302      	adds	r3, #2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	fb02 f303 	mul.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	003d0900 	.word	0x003d0900
 8003124:	007a1200 	.word	0x007a1200

08003128 <LL_TIM_SetPrescaler>:
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <LL_TIM_SetAutoReload>:
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <LL_TIM_SetRepetitionCounter>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <LL_TIM_OC_SetCompareCH1>:
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <LL_TIM_OC_SetCompareCH2>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <LL_TIM_OC_SetCompareCH3>:
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <LL_TIM_OC_SetCompareCH4>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	615a      	str	r2, [r3, #20]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a27      	ldr	r2, [pc, #156]	; (80032ac <LL_TIM_Init+0xb0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <LL_TIM_Init+0x30>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d007      	beq.n	800322c <LL_TIM_Init+0x30>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <LL_TIM_Init+0xb4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <LL_TIM_Init+0x30>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <LL_TIM_Init+0xb8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d106      	bne.n	800323a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <LL_TIM_Init+0xb0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00b      	beq.n	800325a <LL_TIM_Init+0x5e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d007      	beq.n	800325a <LL_TIM_Init+0x5e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <LL_TIM_Init+0xb4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d003      	beq.n	800325a <LL_TIM_Init+0x5e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <LL_TIM_Init+0xb8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d106      	bne.n	8003268 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff64 	bl	8003142 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff51 	bl	8003128 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a08      	ldr	r2, [pc, #32]	; (80032ac <LL_TIM_Init+0xb0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d105      	bne.n	800329a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	7c1b      	ldrb	r3, [r3, #16]
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff61 	bl	800315c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ff9f 	bl	80031de <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800

080032b8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d012      	beq.n	80032f4 <LL_TIM_OC_Init+0x3c>
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d802      	bhi.n	80032d8 <LL_TIM_OC_Init+0x20>
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d007      	beq.n	80032e6 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80032d6:	e022      	b.n	800331e <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80032d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032dc:	d011      	beq.n	8003302 <LL_TIM_OC_Init+0x4a>
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d015      	beq.n	8003310 <LL_TIM_OC_Init+0x58>
      break;
 80032e4:	e01b      	b.n	800331e <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f865 	bl	80033b8 <OC1Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]
      break;
 80032f2:	e014      	b.n	800331e <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f8c4 	bl	8003484 <OC2Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003300:	e00d      	b.n	800331e <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f927 	bl	8003558 <OC3Config>
 800330a:	4603      	mov	r3, r0
 800330c:	75fb      	strb	r3, [r7, #23]
      break;
 800330e:	e006      	b.n	800331e <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f98a 	bl	800362c <OC4Config>
 8003318:	4603      	mov	r3, r0
 800331a:	75fb      	strb	r3, [r7, #23]
      break;
 800331c:	bf00      	nop
  }

  return result;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	7b12      	ldrb	r2, [r2, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	89d2      	ldrh	r2, [r2, #14]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0201 	bic.w	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 0202 	bic.w	r2, r3, #2
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0201 	bic.w	r2, r3, #1
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <OC1Config+0xc8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d11e      	bne.n	8003458 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 0208 	bic.w	r2, r3, #8
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f023 0204 	bic.w	r2, r3, #4
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fe83 	bl	8003176 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40012c00 	.word	0x40012c00

08003484 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f023 0210 	bic.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0220 	bic.w	r2, r3, #32
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0210 	bic.w	r2, r3, #16
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	; (8003554 <OC2Config+0xd0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d11f      	bne.n	800352c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	019b      	lsls	r3, r3, #6
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	019b      	lsls	r3, r3, #6
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fe26 	bl	8003190 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40012c00 	.word	0x40012c00

08003558 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <OC3Config+0xd0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d11f      	bne.n	80035fe <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	029b      	lsls	r3, r3, #10
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	015b      	lsls	r3, r3, #5
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4619      	mov	r1, r3
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fdca 	bl	80031aa <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00

0800362c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	031b      	lsls	r3, r3, #12
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	031b      	lsls	r3, r3, #12
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <OC4Config+0xa0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d107      	bne.n	80036a4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	019b      	lsls	r3, r3, #6
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fd84 	bl	80031c4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40012c00 	.word	0x40012c00

080036d0 <LL_USART_IsEnabled>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <LL_USART_SetStopBitsLength>:
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	611a      	str	r2, [r3, #16]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <LL_USART_SetHWFlowCtrl>:
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	615a      	str	r2, [r3, #20]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <LL_USART_SetBaudRate>:
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009a      	lsls	r2, r3, #2
 8003756:	441a      	add	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <LL_USART_SetBaudRate+0xb8>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	b29b      	uxth	r3, r3
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	b299      	uxth	r1, r3
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009a      	lsls	r2, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <LL_USART_SetBaudRate+0xb8>)
 8003784:	fba3 0302 	umull	r0, r3, r3, r2
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	2064      	movs	r0, #100	; 0x64
 800378c:	fb00 f303 	mul.w	r3, r0, r3
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	3332      	adds	r3, #50	; 0x32
 8003796:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <LL_USART_SetBaudRate+0xb8>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	b29b      	uxth	r3, r3
 80037a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	440b      	add	r3, r1
 80037a8:	b299      	uxth	r1, r3
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <LL_USART_SetBaudRate+0xb8>)
 80037c0:	fba3 0302 	umull	r0, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2064      	movs	r0, #100	; 0x64
 80037c8:	fb00 f303 	mul.w	r3, r0, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <LL_USART_SetBaudRate+0xb8>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	440b      	add	r3, r1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	51eb851f 	.word	0x51eb851f

080037fc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff5e 	bl	80036d0 <LL_USART_IsEnabled>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d145      	bne.n	80038a6 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003822:	f023 030c 	bic.w	r3, r3, #12
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	6851      	ldr	r1, [r2, #4]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	4311      	orrs	r1, r2
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	6912      	ldr	r2, [r2, #16]
 8003834:	430a      	orrs	r2, r1
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff57 	bl	80036f6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff63 	bl	800371a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fbaf 	bl	8002fbc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <LL_USART_Init+0xb4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d102      	bne.n	800386c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	e00c      	b.n	8003886 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a11      	ldr	r2, [pc, #68]	; (80038b4 <LL_USART_Init+0xb8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d102      	bne.n	800387a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e005      	b.n	8003886 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <LL_USART_Init+0xbc>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	69b9      	ldr	r1, [r7, #24]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff ff4d 	bl	8003740 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80038a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40013800 	.word	0x40013800
 80038b4:	40004400 	.word	0x40004400
 80038b8:	40004800 	.word	0x40004800

080038bc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	4a07      	ldr	r2, [pc, #28]	; (80038ec <LL_InitTick+0x30>)
 80038d0:	3b01      	subs	r3, #1
 80038d2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <LL_InitTick+0x30>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <LL_InitTick+0x30>)
 80038dc:	2205      	movs	r2, #5
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80038f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ffdd 	bl	80038bc <LL_InitTick>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <LL_mDelay+0x44>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800391a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d00c      	beq.n	800393e <LL_mDelay+0x32>
  {
    Delay++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3301      	adds	r3, #1
 8003928:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800392a:	e008      	b.n	800393e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <LL_mDelay+0x44>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <LL_mDelay+0x32>
    {
      Delay--;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f3      	bne.n	800392c <LL_mDelay+0x20>
    }
  }
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010

08003954 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800395c:	4a03      	ldr	r2, [pc, #12]	; (800396c <LL_SetSystemCoreClock+0x18>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6013      	str	r3, [r2, #0]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	20000010 	.word	0x20000010

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000014 	.word	0x20000014

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	2500      	movs	r5, #0
 8003980:	4e0c      	ldr	r6, [pc, #48]	; (80039b4 <__libc_init_array+0x38>)
 8003982:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003984:	1ba4      	subs	r4, r4, r6
 8003986:	10a4      	asrs	r4, r4, #2
 8003988:	42a5      	cmp	r5, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	f001 f810 	bl	80049b0 <_init>
 8003990:	2500      	movs	r5, #0
 8003992:	4e0a      	ldr	r6, [pc, #40]	; (80039bc <__libc_init_array+0x40>)
 8003994:	4c0a      	ldr	r4, [pc, #40]	; (80039c0 <__libc_init_array+0x44>)
 8003996:	1ba4      	subs	r4, r4, r6
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	42a5      	cmp	r5, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a4:	4798      	blx	r3
 80039a6:	3501      	adds	r5, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039ae:	4798      	blx	r3
 80039b0:	3501      	adds	r5, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08004aac 	.word	0x08004aac
 80039b8:	08004aac 	.word	0x08004aac
 80039bc:	08004aac 	.word	0x08004aac
 80039c0:	08004ab0 	.word	0x08004ab0

080039c4 <memset>:
 80039c4:	4603      	mov	r3, r0
 80039c6:	4402      	add	r2, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	f803 1b01 	strb.w	r1, [r3], #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <iprintf>:
 80039d4:	b40f      	push	{r0, r1, r2, r3}
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <iprintf+0x2c>)
 80039d8:	b513      	push	{r0, r1, r4, lr}
 80039da:	681c      	ldr	r4, [r3, #0]
 80039dc:	b124      	cbz	r4, 80039e8 <iprintf+0x14>
 80039de:	69a3      	ldr	r3, [r4, #24]
 80039e0:	b913      	cbnz	r3, 80039e8 <iprintf+0x14>
 80039e2:	4620      	mov	r0, r4
 80039e4:	f000 f9c0 	bl	8003d68 <__sinit>
 80039e8:	ab05      	add	r3, sp, #20
 80039ea:	9a04      	ldr	r2, [sp, #16]
 80039ec:	68a1      	ldr	r1, [r4, #8]
 80039ee:	4620      	mov	r0, r4
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	f000 fb7d 	bl	80040f0 <_vfiprintf_r>
 80039f6:	b002      	add	sp, #8
 80039f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039fc:	b004      	add	sp, #16
 80039fe:	4770      	bx	lr
 8003a00:	20000014 	.word	0x20000014

08003a04 <putchar>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <putchar+0x24>)
 8003a08:	4605      	mov	r5, r0
 8003a0a:	681c      	ldr	r4, [r3, #0]
 8003a0c:	b124      	cbz	r4, 8003a18 <putchar+0x14>
 8003a0e:	69a3      	ldr	r3, [r4, #24]
 8003a10:	b913      	cbnz	r3, 8003a18 <putchar+0x14>
 8003a12:	4620      	mov	r0, r4
 8003a14:	f000 f9a8 	bl	8003d68 <__sinit>
 8003a18:	68a2      	ldr	r2, [r4, #8]
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a22:	f000 be03 	b.w	800462c <_putc_r>
 8003a26:	bf00      	nop
 8003a28:	20000014 	.word	0x20000014

08003a2c <setvbuf>:
 8003a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a30:	461d      	mov	r5, r3
 8003a32:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <setvbuf+0x14c>)
 8003a34:	4604      	mov	r4, r0
 8003a36:	681e      	ldr	r6, [r3, #0]
 8003a38:	460f      	mov	r7, r1
 8003a3a:	4690      	mov	r8, r2
 8003a3c:	b126      	cbz	r6, 8003a48 <setvbuf+0x1c>
 8003a3e:	69b3      	ldr	r3, [r6, #24]
 8003a40:	b913      	cbnz	r3, 8003a48 <setvbuf+0x1c>
 8003a42:	4630      	mov	r0, r6
 8003a44:	f000 f990 	bl	8003d68 <__sinit>
 8003a48:	4b4c      	ldr	r3, [pc, #304]	; (8003b7c <setvbuf+0x150>)
 8003a4a:	429c      	cmp	r4, r3
 8003a4c:	d152      	bne.n	8003af4 <setvbuf+0xc8>
 8003a4e:	6874      	ldr	r4, [r6, #4]
 8003a50:	f1b8 0f02 	cmp.w	r8, #2
 8003a54:	d006      	beq.n	8003a64 <setvbuf+0x38>
 8003a56:	f1b8 0f01 	cmp.w	r8, #1
 8003a5a:	f200 8089 	bhi.w	8003b70 <setvbuf+0x144>
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	f2c0 8086 	blt.w	8003b70 <setvbuf+0x144>
 8003a64:	4621      	mov	r1, r4
 8003a66:	4630      	mov	r0, r6
 8003a68:	f000 f914 	bl	8003c94 <_fflush_r>
 8003a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a6e:	b141      	cbz	r1, 8003a82 <setvbuf+0x56>
 8003a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a74:	4299      	cmp	r1, r3
 8003a76:	d002      	beq.n	8003a7e <setvbuf+0x52>
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f000 fa6b 	bl	8003f54 <_free_r>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6363      	str	r3, [r4, #52]	; 0x34
 8003a82:	2300      	movs	r3, #0
 8003a84:	61a3      	str	r3, [r4, #24]
 8003a86:	6063      	str	r3, [r4, #4]
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	d503      	bpl.n	8003a96 <setvbuf+0x6a>
 8003a8e:	6921      	ldr	r1, [r4, #16]
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 fa5f 	bl	8003f54 <_free_r>
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f1b8 0f02 	cmp.w	r8, #2
 8003a9c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003aa0:	f023 0303 	bic.w	r3, r3, #3
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	d05d      	beq.n	8003b64 <setvbuf+0x138>
 8003aa8:	ab01      	add	r3, sp, #4
 8003aaa:	466a      	mov	r2, sp
 8003aac:	4621      	mov	r1, r4
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f000 f9e4 	bl	8003e7c <__swhatbuf_r>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	4318      	orrs	r0, r3
 8003ab8:	81a0      	strh	r0, [r4, #12]
 8003aba:	bb2d      	cbnz	r5, 8003b08 <setvbuf+0xdc>
 8003abc:	9d00      	ldr	r5, [sp, #0]
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f000 fa40 	bl	8003f44 <malloc>
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d14e      	bne.n	8003b68 <setvbuf+0x13c>
 8003aca:	f8dd 9000 	ldr.w	r9, [sp]
 8003ace:	45a9      	cmp	r9, r5
 8003ad0:	d13c      	bne.n	8003b4c <setvbuf+0x120>
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	f043 0302 	orr.w	r3, r3, #2
 8003adc:	81a3      	strh	r3, [r4, #12]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60a3      	str	r3, [r4, #8]
 8003ae2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	6123      	str	r3, [r4, #16]
 8003aea:	2301      	movs	r3, #1
 8003aec:	6163      	str	r3, [r4, #20]
 8003aee:	b003      	add	sp, #12
 8003af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <setvbuf+0x154>)
 8003af6:	429c      	cmp	r4, r3
 8003af8:	d101      	bne.n	8003afe <setvbuf+0xd2>
 8003afa:	68b4      	ldr	r4, [r6, #8]
 8003afc:	e7a8      	b.n	8003a50 <setvbuf+0x24>
 8003afe:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <setvbuf+0x158>)
 8003b00:	429c      	cmp	r4, r3
 8003b02:	bf08      	it	eq
 8003b04:	68f4      	ldreq	r4, [r6, #12]
 8003b06:	e7a3      	b.n	8003a50 <setvbuf+0x24>
 8003b08:	2f00      	cmp	r7, #0
 8003b0a:	d0d8      	beq.n	8003abe <setvbuf+0x92>
 8003b0c:	69b3      	ldr	r3, [r6, #24]
 8003b0e:	b913      	cbnz	r3, 8003b16 <setvbuf+0xea>
 8003b10:	4630      	mov	r0, r6
 8003b12:	f000 f929 	bl	8003d68 <__sinit>
 8003b16:	f1b8 0f01 	cmp.w	r8, #1
 8003b1a:	bf08      	it	eq
 8003b1c:	89a3      	ldrheq	r3, [r4, #12]
 8003b1e:	6027      	str	r7, [r4, #0]
 8003b20:	bf04      	itt	eq
 8003b22:	f043 0301 	orreq.w	r3, r3, #1
 8003b26:	81a3      	strheq	r3, [r4, #12]
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003b2e:	f013 0008 	ands.w	r0, r3, #8
 8003b32:	d01b      	beq.n	8003b6c <setvbuf+0x140>
 8003b34:	f013 0001 	ands.w	r0, r3, #1
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	bf1f      	itttt	ne
 8003b3e:	426d      	negne	r5, r5
 8003b40:	60a3      	strne	r3, [r4, #8]
 8003b42:	61a5      	strne	r5, [r4, #24]
 8003b44:	4618      	movne	r0, r3
 8003b46:	bf08      	it	eq
 8003b48:	60a5      	streq	r5, [r4, #8]
 8003b4a:	e7d0      	b.n	8003aee <setvbuf+0xc2>
 8003b4c:	4648      	mov	r0, r9
 8003b4e:	f000 f9f9 	bl	8003f44 <malloc>
 8003b52:	4607      	mov	r7, r0
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d0bc      	beq.n	8003ad2 <setvbuf+0xa6>
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	464d      	mov	r5, r9
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	e7d3      	b.n	8003b0c <setvbuf+0xe0>
 8003b64:	2000      	movs	r0, #0
 8003b66:	e7b6      	b.n	8003ad6 <setvbuf+0xaa>
 8003b68:	46a9      	mov	r9, r5
 8003b6a:	e7f5      	b.n	8003b58 <setvbuf+0x12c>
 8003b6c:	60a0      	str	r0, [r4, #8]
 8003b6e:	e7be      	b.n	8003aee <setvbuf+0xc2>
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	e7bb      	b.n	8003aee <setvbuf+0xc2>
 8003b76:	bf00      	nop
 8003b78:	20000014 	.word	0x20000014
 8003b7c:	08004a38 	.word	0x08004a38
 8003b80:	08004a58 	.word	0x08004a58
 8003b84:	08004a18 	.word	0x08004a18

08003b88 <__sflush_r>:
 8003b88:	898a      	ldrh	r2, [r1, #12]
 8003b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8e:	4605      	mov	r5, r0
 8003b90:	0710      	lsls	r0, r2, #28
 8003b92:	460c      	mov	r4, r1
 8003b94:	d458      	bmi.n	8003c48 <__sflush_r+0xc0>
 8003b96:	684b      	ldr	r3, [r1, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	dc05      	bgt.n	8003ba8 <__sflush_r+0x20>
 8003b9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	dc02      	bgt.n	8003ba8 <__sflush_r+0x20>
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003baa:	2e00      	cmp	r6, #0
 8003bac:	d0f9      	beq.n	8003ba2 <__sflush_r+0x1a>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bb4:	682f      	ldr	r7, [r5, #0]
 8003bb6:	6a21      	ldr	r1, [r4, #32]
 8003bb8:	602b      	str	r3, [r5, #0]
 8003bba:	d032      	beq.n	8003c22 <__sflush_r+0x9a>
 8003bbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	075a      	lsls	r2, r3, #29
 8003bc2:	d505      	bpl.n	8003bd0 <__sflush_r+0x48>
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	1ac0      	subs	r0, r0, r3
 8003bc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bca:	b10b      	cbz	r3, 8003bd0 <__sflush_r+0x48>
 8003bcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bce:	1ac0      	subs	r0, r0, r3
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bd6:	6a21      	ldr	r1, [r4, #32]
 8003bd8:	4628      	mov	r0, r5
 8003bda:	47b0      	blx	r6
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	d106      	bne.n	8003bf0 <__sflush_r+0x68>
 8003be2:	6829      	ldr	r1, [r5, #0]
 8003be4:	291d      	cmp	r1, #29
 8003be6:	d848      	bhi.n	8003c7a <__sflush_r+0xf2>
 8003be8:	4a29      	ldr	r2, [pc, #164]	; (8003c90 <__sflush_r+0x108>)
 8003bea:	40ca      	lsrs	r2, r1
 8003bec:	07d6      	lsls	r6, r2, #31
 8003bee:	d544      	bpl.n	8003c7a <__sflush_r+0xf2>
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	6062      	str	r2, [r4, #4]
 8003bf4:	6922      	ldr	r2, [r4, #16]
 8003bf6:	04d9      	lsls	r1, r3, #19
 8003bf8:	6022      	str	r2, [r4, #0]
 8003bfa:	d504      	bpl.n	8003c06 <__sflush_r+0x7e>
 8003bfc:	1c42      	adds	r2, r0, #1
 8003bfe:	d101      	bne.n	8003c04 <__sflush_r+0x7c>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b903      	cbnz	r3, 8003c06 <__sflush_r+0x7e>
 8003c04:	6560      	str	r0, [r4, #84]	; 0x54
 8003c06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c08:	602f      	str	r7, [r5, #0]
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d0c9      	beq.n	8003ba2 <__sflush_r+0x1a>
 8003c0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c12:	4299      	cmp	r1, r3
 8003c14:	d002      	beq.n	8003c1c <__sflush_r+0x94>
 8003c16:	4628      	mov	r0, r5
 8003c18:	f000 f99c 	bl	8003f54 <_free_r>
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	6360      	str	r0, [r4, #52]	; 0x34
 8003c20:	e7c0      	b.n	8003ba4 <__sflush_r+0x1c>
 8003c22:	2301      	movs	r3, #1
 8003c24:	4628      	mov	r0, r5
 8003c26:	47b0      	blx	r6
 8003c28:	1c41      	adds	r1, r0, #1
 8003c2a:	d1c8      	bne.n	8003bbe <__sflush_r+0x36>
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0c5      	beq.n	8003bbe <__sflush_r+0x36>
 8003c32:	2b1d      	cmp	r3, #29
 8003c34:	d001      	beq.n	8003c3a <__sflush_r+0xb2>
 8003c36:	2b16      	cmp	r3, #22
 8003c38:	d101      	bne.n	8003c3e <__sflush_r+0xb6>
 8003c3a:	602f      	str	r7, [r5, #0]
 8003c3c:	e7b1      	b.n	8003ba2 <__sflush_r+0x1a>
 8003c3e:	89a3      	ldrh	r3, [r4, #12]
 8003c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c44:	81a3      	strh	r3, [r4, #12]
 8003c46:	e7ad      	b.n	8003ba4 <__sflush_r+0x1c>
 8003c48:	690f      	ldr	r7, [r1, #16]
 8003c4a:	2f00      	cmp	r7, #0
 8003c4c:	d0a9      	beq.n	8003ba2 <__sflush_r+0x1a>
 8003c4e:	0793      	lsls	r3, r2, #30
 8003c50:	bf18      	it	ne
 8003c52:	2300      	movne	r3, #0
 8003c54:	680e      	ldr	r6, [r1, #0]
 8003c56:	bf08      	it	eq
 8003c58:	694b      	ldreq	r3, [r1, #20]
 8003c5a:	eba6 0807 	sub.w	r8, r6, r7
 8003c5e:	600f      	str	r7, [r1, #0]
 8003c60:	608b      	str	r3, [r1, #8]
 8003c62:	f1b8 0f00 	cmp.w	r8, #0
 8003c66:	dd9c      	ble.n	8003ba2 <__sflush_r+0x1a>
 8003c68:	4643      	mov	r3, r8
 8003c6a:	463a      	mov	r2, r7
 8003c6c:	6a21      	ldr	r1, [r4, #32]
 8003c6e:	4628      	mov	r0, r5
 8003c70:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c72:	47b0      	blx	r6
 8003c74:	2800      	cmp	r0, #0
 8003c76:	dc06      	bgt.n	8003c86 <__sflush_r+0xfe>
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	e78e      	b.n	8003ba4 <__sflush_r+0x1c>
 8003c86:	4407      	add	r7, r0
 8003c88:	eba8 0800 	sub.w	r8, r8, r0
 8003c8c:	e7e9      	b.n	8003c62 <__sflush_r+0xda>
 8003c8e:	bf00      	nop
 8003c90:	20400001 	.word	0x20400001

08003c94 <_fflush_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	690b      	ldr	r3, [r1, #16]
 8003c98:	4605      	mov	r5, r0
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	b1db      	cbz	r3, 8003cd6 <_fflush_r+0x42>
 8003c9e:	b118      	cbz	r0, 8003ca8 <_fflush_r+0x14>
 8003ca0:	6983      	ldr	r3, [r0, #24]
 8003ca2:	b90b      	cbnz	r3, 8003ca8 <_fflush_r+0x14>
 8003ca4:	f000 f860 	bl	8003d68 <__sinit>
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <_fflush_r+0x48>)
 8003caa:	429c      	cmp	r4, r3
 8003cac:	d109      	bne.n	8003cc2 <_fflush_r+0x2e>
 8003cae:	686c      	ldr	r4, [r5, #4]
 8003cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cb4:	b17b      	cbz	r3, 8003cd6 <_fflush_r+0x42>
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	4628      	mov	r0, r5
 8003cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cbe:	f7ff bf63 	b.w	8003b88 <__sflush_r>
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <_fflush_r+0x4c>)
 8003cc4:	429c      	cmp	r4, r3
 8003cc6:	d101      	bne.n	8003ccc <_fflush_r+0x38>
 8003cc8:	68ac      	ldr	r4, [r5, #8]
 8003cca:	e7f1      	b.n	8003cb0 <_fflush_r+0x1c>
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <_fflush_r+0x50>)
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	bf08      	it	eq
 8003cd2:	68ec      	ldreq	r4, [r5, #12]
 8003cd4:	e7ec      	b.n	8003cb0 <_fflush_r+0x1c>
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	bd38      	pop	{r3, r4, r5, pc}
 8003cda:	bf00      	nop
 8003cdc:	08004a38 	.word	0x08004a38
 8003ce0:	08004a58 	.word	0x08004a58
 8003ce4:	08004a18 	.word	0x08004a18

08003ce8 <std>:
 8003ce8:	2300      	movs	r3, #0
 8003cea:	b510      	push	{r4, lr}
 8003cec:	4604      	mov	r4, r0
 8003cee:	e9c0 3300 	strd	r3, r3, [r0]
 8003cf2:	6083      	str	r3, [r0, #8]
 8003cf4:	8181      	strh	r1, [r0, #12]
 8003cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8003cf8:	81c2      	strh	r2, [r0, #14]
 8003cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cfe:	6183      	str	r3, [r0, #24]
 8003d00:	4619      	mov	r1, r3
 8003d02:	2208      	movs	r2, #8
 8003d04:	305c      	adds	r0, #92	; 0x5c
 8003d06:	f7ff fe5d 	bl	80039c4 <memset>
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <std+0x38>)
 8003d0c:	6224      	str	r4, [r4, #32]
 8003d0e:	6263      	str	r3, [r4, #36]	; 0x24
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <std+0x3c>)
 8003d12:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <std+0x40>)
 8003d16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <std+0x44>)
 8003d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d1c:	bd10      	pop	{r4, pc}
 8003d1e:	bf00      	nop
 8003d20:	080046b9 	.word	0x080046b9
 8003d24:	080046db 	.word	0x080046db
 8003d28:	08004713 	.word	0x08004713
 8003d2c:	08004737 	.word	0x08004737

08003d30 <_cleanup_r>:
 8003d30:	4901      	ldr	r1, [pc, #4]	; (8003d38 <_cleanup_r+0x8>)
 8003d32:	f000 b885 	b.w	8003e40 <_fwalk_reent>
 8003d36:	bf00      	nop
 8003d38:	08003c95 	.word	0x08003c95

08003d3c <__sfmoreglue>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	2568      	movs	r5, #104	; 0x68
 8003d40:	1e4a      	subs	r2, r1, #1
 8003d42:	4355      	muls	r5, r2
 8003d44:	460e      	mov	r6, r1
 8003d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d4a:	f000 f94f 	bl	8003fec <_malloc_r>
 8003d4e:	4604      	mov	r4, r0
 8003d50:	b140      	cbz	r0, 8003d64 <__sfmoreglue+0x28>
 8003d52:	2100      	movs	r1, #0
 8003d54:	e9c0 1600 	strd	r1, r6, [r0]
 8003d58:	300c      	adds	r0, #12
 8003d5a:	60a0      	str	r0, [r4, #8]
 8003d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d60:	f7ff fe30 	bl	80039c4 <memset>
 8003d64:	4620      	mov	r0, r4
 8003d66:	bd70      	pop	{r4, r5, r6, pc}

08003d68 <__sinit>:
 8003d68:	6983      	ldr	r3, [r0, #24]
 8003d6a:	b510      	push	{r4, lr}
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	bb33      	cbnz	r3, 8003dbe <__sinit+0x56>
 8003d70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003d74:	6503      	str	r3, [r0, #80]	; 0x50
 8003d76:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <__sinit+0x58>)
 8003d78:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <__sinit+0x5c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6282      	str	r2, [r0, #40]	; 0x28
 8003d7e:	4298      	cmp	r0, r3
 8003d80:	bf04      	itt	eq
 8003d82:	2301      	moveq	r3, #1
 8003d84:	6183      	streq	r3, [r0, #24]
 8003d86:	f000 f81f 	bl	8003dc8 <__sfp>
 8003d8a:	6060      	str	r0, [r4, #4]
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f000 f81b 	bl	8003dc8 <__sfp>
 8003d92:	60a0      	str	r0, [r4, #8]
 8003d94:	4620      	mov	r0, r4
 8003d96:	f000 f817 	bl	8003dc8 <__sfp>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	60e0      	str	r0, [r4, #12]
 8003d9e:	2104      	movs	r1, #4
 8003da0:	6860      	ldr	r0, [r4, #4]
 8003da2:	f7ff ffa1 	bl	8003ce8 <std>
 8003da6:	2201      	movs	r2, #1
 8003da8:	2109      	movs	r1, #9
 8003daa:	68a0      	ldr	r0, [r4, #8]
 8003dac:	f7ff ff9c 	bl	8003ce8 <std>
 8003db0:	2202      	movs	r2, #2
 8003db2:	2112      	movs	r1, #18
 8003db4:	68e0      	ldr	r0, [r4, #12]
 8003db6:	f7ff ff97 	bl	8003ce8 <std>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61a3      	str	r3, [r4, #24]
 8003dbe:	bd10      	pop	{r4, pc}
 8003dc0:	08004a14 	.word	0x08004a14
 8003dc4:	08003d31 	.word	0x08003d31

08003dc8 <__sfp>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <__sfp+0x70>)
 8003dcc:	4607      	mov	r7, r0
 8003dce:	681e      	ldr	r6, [r3, #0]
 8003dd0:	69b3      	ldr	r3, [r6, #24]
 8003dd2:	b913      	cbnz	r3, 8003dda <__sfp+0x12>
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f7ff ffc7 	bl	8003d68 <__sinit>
 8003dda:	3648      	adds	r6, #72	; 0x48
 8003ddc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	d503      	bpl.n	8003dec <__sfp+0x24>
 8003de4:	6833      	ldr	r3, [r6, #0]
 8003de6:	b133      	cbz	r3, 8003df6 <__sfp+0x2e>
 8003de8:	6836      	ldr	r6, [r6, #0]
 8003dea:	e7f7      	b.n	8003ddc <__sfp+0x14>
 8003dec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003df0:	b16d      	cbz	r5, 8003e0e <__sfp+0x46>
 8003df2:	3468      	adds	r4, #104	; 0x68
 8003df4:	e7f4      	b.n	8003de0 <__sfp+0x18>
 8003df6:	2104      	movs	r1, #4
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f7ff ff9f 	bl	8003d3c <__sfmoreglue>
 8003dfe:	6030      	str	r0, [r6, #0]
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d1f1      	bne.n	8003de8 <__sfp+0x20>
 8003e04:	230c      	movs	r3, #12
 8003e06:	4604      	mov	r4, r0
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <__sfp+0x74>)
 8003e10:	6665      	str	r5, [r4, #100]	; 0x64
 8003e12:	e9c4 5500 	strd	r5, r5, [r4]
 8003e16:	60a5      	str	r5, [r4, #8]
 8003e18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e20:	2208      	movs	r2, #8
 8003e22:	4629      	mov	r1, r5
 8003e24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e28:	f7ff fdcc 	bl	80039c4 <memset>
 8003e2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e34:	e7e9      	b.n	8003e0a <__sfp+0x42>
 8003e36:	bf00      	nop
 8003e38:	08004a14 	.word	0x08004a14
 8003e3c:	ffff0001 	.word	0xffff0001

08003e40 <_fwalk_reent>:
 8003e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e44:	4680      	mov	r8, r0
 8003e46:	4689      	mov	r9, r1
 8003e48:	2600      	movs	r6, #0
 8003e4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e4e:	b914      	cbnz	r4, 8003e56 <_fwalk_reent+0x16>
 8003e50:	4630      	mov	r0, r6
 8003e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003e5a:	3f01      	subs	r7, #1
 8003e5c:	d501      	bpl.n	8003e62 <_fwalk_reent+0x22>
 8003e5e:	6824      	ldr	r4, [r4, #0]
 8003e60:	e7f5      	b.n	8003e4e <_fwalk_reent+0xe>
 8003e62:	89ab      	ldrh	r3, [r5, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d907      	bls.n	8003e78 <_fwalk_reent+0x38>
 8003e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	d003      	beq.n	8003e78 <_fwalk_reent+0x38>
 8003e70:	4629      	mov	r1, r5
 8003e72:	4640      	mov	r0, r8
 8003e74:	47c8      	blx	r9
 8003e76:	4306      	orrs	r6, r0
 8003e78:	3568      	adds	r5, #104	; 0x68
 8003e7a:	e7ee      	b.n	8003e5a <_fwalk_reent+0x1a>

08003e7c <__swhatbuf_r>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	460e      	mov	r6, r1
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	b096      	sub	sp, #88	; 0x58
 8003e86:	2900      	cmp	r1, #0
 8003e88:	4614      	mov	r4, r2
 8003e8a:	461d      	mov	r5, r3
 8003e8c:	da07      	bge.n	8003e9e <__swhatbuf_r+0x22>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	602b      	str	r3, [r5, #0]
 8003e92:	89b3      	ldrh	r3, [r6, #12]
 8003e94:	061a      	lsls	r2, r3, #24
 8003e96:	d410      	bmi.n	8003eba <__swhatbuf_r+0x3e>
 8003e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9c:	e00e      	b.n	8003ebc <__swhatbuf_r+0x40>
 8003e9e:	466a      	mov	r2, sp
 8003ea0:	f000 fd30 	bl	8004904 <_fstat_r>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	dbf2      	blt.n	8003e8e <__swhatbuf_r+0x12>
 8003ea8:	9a01      	ldr	r2, [sp, #4]
 8003eaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003eae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003eb2:	425a      	negs	r2, r3
 8003eb4:	415a      	adcs	r2, r3
 8003eb6:	602a      	str	r2, [r5, #0]
 8003eb8:	e7ee      	b.n	8003e98 <__swhatbuf_r+0x1c>
 8003eba:	2340      	movs	r3, #64	; 0x40
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	6023      	str	r3, [r4, #0]
 8003ec0:	b016      	add	sp, #88	; 0x58
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}

08003ec4 <__smakebuf_r>:
 8003ec4:	898b      	ldrh	r3, [r1, #12]
 8003ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ec8:	079d      	lsls	r5, r3, #30
 8003eca:	4606      	mov	r6, r0
 8003ecc:	460c      	mov	r4, r1
 8003ece:	d507      	bpl.n	8003ee0 <__smakebuf_r+0x1c>
 8003ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	6123      	str	r3, [r4, #16]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	6163      	str	r3, [r4, #20]
 8003edc:	b002      	add	sp, #8
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	ab01      	add	r3, sp, #4
 8003ee2:	466a      	mov	r2, sp
 8003ee4:	f7ff ffca 	bl	8003e7c <__swhatbuf_r>
 8003ee8:	9900      	ldr	r1, [sp, #0]
 8003eea:	4605      	mov	r5, r0
 8003eec:	4630      	mov	r0, r6
 8003eee:	f000 f87d 	bl	8003fec <_malloc_r>
 8003ef2:	b948      	cbnz	r0, 8003f08 <__smakebuf_r+0x44>
 8003ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ef8:	059a      	lsls	r2, r3, #22
 8003efa:	d4ef      	bmi.n	8003edc <__smakebuf_r+0x18>
 8003efc:	f023 0303 	bic.w	r3, r3, #3
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	e7e3      	b.n	8003ed0 <__smakebuf_r+0xc>
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <__smakebuf_r+0x7c>)
 8003f0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	6020      	str	r0, [r4, #0]
 8003f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f14:	81a3      	strh	r3, [r4, #12]
 8003f16:	9b00      	ldr	r3, [sp, #0]
 8003f18:	6120      	str	r0, [r4, #16]
 8003f1a:	6163      	str	r3, [r4, #20]
 8003f1c:	9b01      	ldr	r3, [sp, #4]
 8003f1e:	b15b      	cbz	r3, 8003f38 <__smakebuf_r+0x74>
 8003f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 fcff 	bl	8004928 <_isatty_r>
 8003f2a:	b128      	cbz	r0, 8003f38 <__smakebuf_r+0x74>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	f023 0303 	bic.w	r3, r3, #3
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	81a3      	strh	r3, [r4, #12]
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	431d      	orrs	r5, r3
 8003f3c:	81a5      	strh	r5, [r4, #12]
 8003f3e:	e7cd      	b.n	8003edc <__smakebuf_r+0x18>
 8003f40:	08003d31 	.word	0x08003d31

08003f44 <malloc>:
 8003f44:	4b02      	ldr	r3, [pc, #8]	; (8003f50 <malloc+0xc>)
 8003f46:	4601      	mov	r1, r0
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	f000 b84f 	b.w	8003fec <_malloc_r>
 8003f4e:	bf00      	nop
 8003f50:	20000014 	.word	0x20000014

08003f54 <_free_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4605      	mov	r5, r0
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	d043      	beq.n	8003fe4 <_free_r+0x90>
 8003f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f60:	1f0c      	subs	r4, r1, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bfb8      	it	lt
 8003f66:	18e4      	addlt	r4, r4, r3
 8003f68:	f000 fd0e 	bl	8004988 <__malloc_lock>
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <_free_r+0x94>)
 8003f6e:	6813      	ldr	r3, [r2, #0]
 8003f70:	4610      	mov	r0, r2
 8003f72:	b933      	cbnz	r3, 8003f82 <_free_r+0x2e>
 8003f74:	6063      	str	r3, [r4, #4]
 8003f76:	6014      	str	r4, [r2, #0]
 8003f78:	4628      	mov	r0, r5
 8003f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f7e:	f000 bd04 	b.w	800498a <__malloc_unlock>
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	d90b      	bls.n	8003f9e <_free_r+0x4a>
 8003f86:	6821      	ldr	r1, [r4, #0]
 8003f88:	1862      	adds	r2, r4, r1
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	bf01      	itttt	eq
 8003f8e:	681a      	ldreq	r2, [r3, #0]
 8003f90:	685b      	ldreq	r3, [r3, #4]
 8003f92:	1852      	addeq	r2, r2, r1
 8003f94:	6022      	streq	r2, [r4, #0]
 8003f96:	6063      	str	r3, [r4, #4]
 8003f98:	6004      	str	r4, [r0, #0]
 8003f9a:	e7ed      	b.n	8003f78 <_free_r+0x24>
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	b10a      	cbz	r2, 8003fa6 <_free_r+0x52>
 8003fa2:	42a2      	cmp	r2, r4
 8003fa4:	d9fa      	bls.n	8003f9c <_free_r+0x48>
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	1858      	adds	r0, r3, r1
 8003faa:	42a0      	cmp	r0, r4
 8003fac:	d10b      	bne.n	8003fc6 <_free_r+0x72>
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	4401      	add	r1, r0
 8003fb2:	1858      	adds	r0, r3, r1
 8003fb4:	4282      	cmp	r2, r0
 8003fb6:	6019      	str	r1, [r3, #0]
 8003fb8:	d1de      	bne.n	8003f78 <_free_r+0x24>
 8003fba:	6810      	ldr	r0, [r2, #0]
 8003fbc:	6852      	ldr	r2, [r2, #4]
 8003fbe:	4401      	add	r1, r0
 8003fc0:	6019      	str	r1, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	e7d8      	b.n	8003f78 <_free_r+0x24>
 8003fc6:	d902      	bls.n	8003fce <_free_r+0x7a>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	e7d4      	b.n	8003f78 <_free_r+0x24>
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	1821      	adds	r1, r4, r0
 8003fd2:	428a      	cmp	r2, r1
 8003fd4:	bf01      	itttt	eq
 8003fd6:	6811      	ldreq	r1, [r2, #0]
 8003fd8:	6852      	ldreq	r2, [r2, #4]
 8003fda:	1809      	addeq	r1, r1, r0
 8003fdc:	6021      	streq	r1, [r4, #0]
 8003fde:	6062      	str	r2, [r4, #4]
 8003fe0:	605c      	str	r4, [r3, #4]
 8003fe2:	e7c9      	b.n	8003f78 <_free_r+0x24>
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000009c 	.word	0x2000009c

08003fec <_malloc_r>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	1ccd      	adds	r5, r1, #3
 8003ff0:	f025 0503 	bic.w	r5, r5, #3
 8003ff4:	3508      	adds	r5, #8
 8003ff6:	2d0c      	cmp	r5, #12
 8003ff8:	bf38      	it	cc
 8003ffa:	250c      	movcc	r5, #12
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	4606      	mov	r6, r0
 8004000:	db01      	blt.n	8004006 <_malloc_r+0x1a>
 8004002:	42a9      	cmp	r1, r5
 8004004:	d903      	bls.n	800400e <_malloc_r+0x22>
 8004006:	230c      	movs	r3, #12
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	2000      	movs	r0, #0
 800400c:	bd70      	pop	{r4, r5, r6, pc}
 800400e:	f000 fcbb 	bl	8004988 <__malloc_lock>
 8004012:	4a21      	ldr	r2, [pc, #132]	; (8004098 <_malloc_r+0xac>)
 8004014:	6814      	ldr	r4, [r2, #0]
 8004016:	4621      	mov	r1, r4
 8004018:	b991      	cbnz	r1, 8004040 <_malloc_r+0x54>
 800401a:	4c20      	ldr	r4, [pc, #128]	; (800409c <_malloc_r+0xb0>)
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	b91b      	cbnz	r3, 8004028 <_malloc_r+0x3c>
 8004020:	4630      	mov	r0, r6
 8004022:	f000 fb39 	bl	8004698 <_sbrk_r>
 8004026:	6020      	str	r0, [r4, #0]
 8004028:	4629      	mov	r1, r5
 800402a:	4630      	mov	r0, r6
 800402c:	f000 fb34 	bl	8004698 <_sbrk_r>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d124      	bne.n	800407e <_malloc_r+0x92>
 8004034:	230c      	movs	r3, #12
 8004036:	4630      	mov	r0, r6
 8004038:	6033      	str	r3, [r6, #0]
 800403a:	f000 fca6 	bl	800498a <__malloc_unlock>
 800403e:	e7e4      	b.n	800400a <_malloc_r+0x1e>
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	1b5b      	subs	r3, r3, r5
 8004044:	d418      	bmi.n	8004078 <_malloc_r+0x8c>
 8004046:	2b0b      	cmp	r3, #11
 8004048:	d90f      	bls.n	800406a <_malloc_r+0x7e>
 800404a:	600b      	str	r3, [r1, #0]
 800404c:	18cc      	adds	r4, r1, r3
 800404e:	50cd      	str	r5, [r1, r3]
 8004050:	4630      	mov	r0, r6
 8004052:	f000 fc9a 	bl	800498a <__malloc_unlock>
 8004056:	f104 000b 	add.w	r0, r4, #11
 800405a:	1d23      	adds	r3, r4, #4
 800405c:	f020 0007 	bic.w	r0, r0, #7
 8004060:	1ac3      	subs	r3, r0, r3
 8004062:	d0d3      	beq.n	800400c <_malloc_r+0x20>
 8004064:	425a      	negs	r2, r3
 8004066:	50e2      	str	r2, [r4, r3]
 8004068:	e7d0      	b.n	800400c <_malloc_r+0x20>
 800406a:	684b      	ldr	r3, [r1, #4]
 800406c:	428c      	cmp	r4, r1
 800406e:	bf16      	itet	ne
 8004070:	6063      	strne	r3, [r4, #4]
 8004072:	6013      	streq	r3, [r2, #0]
 8004074:	460c      	movne	r4, r1
 8004076:	e7eb      	b.n	8004050 <_malloc_r+0x64>
 8004078:	460c      	mov	r4, r1
 800407a:	6849      	ldr	r1, [r1, #4]
 800407c:	e7cc      	b.n	8004018 <_malloc_r+0x2c>
 800407e:	1cc4      	adds	r4, r0, #3
 8004080:	f024 0403 	bic.w	r4, r4, #3
 8004084:	42a0      	cmp	r0, r4
 8004086:	d005      	beq.n	8004094 <_malloc_r+0xa8>
 8004088:	1a21      	subs	r1, r4, r0
 800408a:	4630      	mov	r0, r6
 800408c:	f000 fb04 	bl	8004698 <_sbrk_r>
 8004090:	3001      	adds	r0, #1
 8004092:	d0cf      	beq.n	8004034 <_malloc_r+0x48>
 8004094:	6025      	str	r5, [r4, #0]
 8004096:	e7db      	b.n	8004050 <_malloc_r+0x64>
 8004098:	2000009c 	.word	0x2000009c
 800409c:	200000a0 	.word	0x200000a0

080040a0 <__sfputc_r>:
 80040a0:	6893      	ldr	r3, [r2, #8]
 80040a2:	b410      	push	{r4}
 80040a4:	3b01      	subs	r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	6093      	str	r3, [r2, #8]
 80040aa:	da07      	bge.n	80040bc <__sfputc_r+0x1c>
 80040ac:	6994      	ldr	r4, [r2, #24]
 80040ae:	42a3      	cmp	r3, r4
 80040b0:	db01      	blt.n	80040b6 <__sfputc_r+0x16>
 80040b2:	290a      	cmp	r1, #10
 80040b4:	d102      	bne.n	80040bc <__sfputc_r+0x1c>
 80040b6:	bc10      	pop	{r4}
 80040b8:	f000 bb42 	b.w	8004740 <__swbuf_r>
 80040bc:	6813      	ldr	r3, [r2, #0]
 80040be:	1c58      	adds	r0, r3, #1
 80040c0:	6010      	str	r0, [r2, #0]
 80040c2:	7019      	strb	r1, [r3, #0]
 80040c4:	4608      	mov	r0, r1
 80040c6:	bc10      	pop	{r4}
 80040c8:	4770      	bx	lr

080040ca <__sfputs_r>:
 80040ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040cc:	4606      	mov	r6, r0
 80040ce:	460f      	mov	r7, r1
 80040d0:	4614      	mov	r4, r2
 80040d2:	18d5      	adds	r5, r2, r3
 80040d4:	42ac      	cmp	r4, r5
 80040d6:	d101      	bne.n	80040dc <__sfputs_r+0x12>
 80040d8:	2000      	movs	r0, #0
 80040da:	e007      	b.n	80040ec <__sfputs_r+0x22>
 80040dc:	463a      	mov	r2, r7
 80040de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e2:	4630      	mov	r0, r6
 80040e4:	f7ff ffdc 	bl	80040a0 <__sfputc_r>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d1f3      	bne.n	80040d4 <__sfputs_r+0xa>
 80040ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040f0 <_vfiprintf_r>:
 80040f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f4:	460c      	mov	r4, r1
 80040f6:	b09d      	sub	sp, #116	; 0x74
 80040f8:	4617      	mov	r7, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	4606      	mov	r6, r0
 80040fe:	b118      	cbz	r0, 8004108 <_vfiprintf_r+0x18>
 8004100:	6983      	ldr	r3, [r0, #24]
 8004102:	b90b      	cbnz	r3, 8004108 <_vfiprintf_r+0x18>
 8004104:	f7ff fe30 	bl	8003d68 <__sinit>
 8004108:	4b7c      	ldr	r3, [pc, #496]	; (80042fc <_vfiprintf_r+0x20c>)
 800410a:	429c      	cmp	r4, r3
 800410c:	d158      	bne.n	80041c0 <_vfiprintf_r+0xd0>
 800410e:	6874      	ldr	r4, [r6, #4]
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	0718      	lsls	r0, r3, #28
 8004114:	d55e      	bpl.n	80041d4 <_vfiprintf_r+0xe4>
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d05b      	beq.n	80041d4 <_vfiprintf_r+0xe4>
 800411c:	2300      	movs	r3, #0
 800411e:	9309      	str	r3, [sp, #36]	; 0x24
 8004120:	2320      	movs	r3, #32
 8004122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004126:	2330      	movs	r3, #48	; 0x30
 8004128:	f04f 0b01 	mov.w	fp, #1
 800412c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004130:	9503      	str	r5, [sp, #12]
 8004132:	46b8      	mov	r8, r7
 8004134:	4645      	mov	r5, r8
 8004136:	f815 3b01 	ldrb.w	r3, [r5], #1
 800413a:	b10b      	cbz	r3, 8004140 <_vfiprintf_r+0x50>
 800413c:	2b25      	cmp	r3, #37	; 0x25
 800413e:	d154      	bne.n	80041ea <_vfiprintf_r+0xfa>
 8004140:	ebb8 0a07 	subs.w	sl, r8, r7
 8004144:	d00b      	beq.n	800415e <_vfiprintf_r+0x6e>
 8004146:	4653      	mov	r3, sl
 8004148:	463a      	mov	r2, r7
 800414a:	4621      	mov	r1, r4
 800414c:	4630      	mov	r0, r6
 800414e:	f7ff ffbc 	bl	80040ca <__sfputs_r>
 8004152:	3001      	adds	r0, #1
 8004154:	f000 80c2 	beq.w	80042dc <_vfiprintf_r+0x1ec>
 8004158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800415a:	4453      	add	r3, sl
 800415c:	9309      	str	r3, [sp, #36]	; 0x24
 800415e:	f898 3000 	ldrb.w	r3, [r8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80ba 	beq.w	80042dc <_vfiprintf_r+0x1ec>
 8004168:	2300      	movs	r3, #0
 800416a:	f04f 32ff 	mov.w	r2, #4294967295
 800416e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004172:	9304      	str	r3, [sp, #16]
 8004174:	9307      	str	r3, [sp, #28]
 8004176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800417a:	931a      	str	r3, [sp, #104]	; 0x68
 800417c:	46a8      	mov	r8, r5
 800417e:	2205      	movs	r2, #5
 8004180:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004184:	485e      	ldr	r0, [pc, #376]	; (8004300 <_vfiprintf_r+0x210>)
 8004186:	f000 fbf1 	bl	800496c <memchr>
 800418a:	9b04      	ldr	r3, [sp, #16]
 800418c:	bb78      	cbnz	r0, 80041ee <_vfiprintf_r+0xfe>
 800418e:	06d9      	lsls	r1, r3, #27
 8004190:	bf44      	itt	mi
 8004192:	2220      	movmi	r2, #32
 8004194:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004198:	071a      	lsls	r2, r3, #28
 800419a:	bf44      	itt	mi
 800419c:	222b      	movmi	r2, #43	; 0x2b
 800419e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041a2:	782a      	ldrb	r2, [r5, #0]
 80041a4:	2a2a      	cmp	r2, #42	; 0x2a
 80041a6:	d02a      	beq.n	80041fe <_vfiprintf_r+0x10e>
 80041a8:	46a8      	mov	r8, r5
 80041aa:	2000      	movs	r0, #0
 80041ac:	250a      	movs	r5, #10
 80041ae:	9a07      	ldr	r2, [sp, #28]
 80041b0:	4641      	mov	r1, r8
 80041b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041b6:	3b30      	subs	r3, #48	; 0x30
 80041b8:	2b09      	cmp	r3, #9
 80041ba:	d969      	bls.n	8004290 <_vfiprintf_r+0x1a0>
 80041bc:	b360      	cbz	r0, 8004218 <_vfiprintf_r+0x128>
 80041be:	e024      	b.n	800420a <_vfiprintf_r+0x11a>
 80041c0:	4b50      	ldr	r3, [pc, #320]	; (8004304 <_vfiprintf_r+0x214>)
 80041c2:	429c      	cmp	r4, r3
 80041c4:	d101      	bne.n	80041ca <_vfiprintf_r+0xda>
 80041c6:	68b4      	ldr	r4, [r6, #8]
 80041c8:	e7a2      	b.n	8004110 <_vfiprintf_r+0x20>
 80041ca:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <_vfiprintf_r+0x218>)
 80041cc:	429c      	cmp	r4, r3
 80041ce:	bf08      	it	eq
 80041d0:	68f4      	ldreq	r4, [r6, #12]
 80041d2:	e79d      	b.n	8004110 <_vfiprintf_r+0x20>
 80041d4:	4621      	mov	r1, r4
 80041d6:	4630      	mov	r0, r6
 80041d8:	f000 fb16 	bl	8004808 <__swsetup_r>
 80041dc:	2800      	cmp	r0, #0
 80041de:	d09d      	beq.n	800411c <_vfiprintf_r+0x2c>
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	b01d      	add	sp, #116	; 0x74
 80041e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ea:	46a8      	mov	r8, r5
 80041ec:	e7a2      	b.n	8004134 <_vfiprintf_r+0x44>
 80041ee:	4a44      	ldr	r2, [pc, #272]	; (8004300 <_vfiprintf_r+0x210>)
 80041f0:	4645      	mov	r5, r8
 80041f2:	1a80      	subs	r0, r0, r2
 80041f4:	fa0b f000 	lsl.w	r0, fp, r0
 80041f8:	4318      	orrs	r0, r3
 80041fa:	9004      	str	r0, [sp, #16]
 80041fc:	e7be      	b.n	800417c <_vfiprintf_r+0x8c>
 80041fe:	9a03      	ldr	r2, [sp, #12]
 8004200:	1d11      	adds	r1, r2, #4
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	9103      	str	r1, [sp, #12]
 8004206:	2a00      	cmp	r2, #0
 8004208:	db01      	blt.n	800420e <_vfiprintf_r+0x11e>
 800420a:	9207      	str	r2, [sp, #28]
 800420c:	e004      	b.n	8004218 <_vfiprintf_r+0x128>
 800420e:	4252      	negs	r2, r2
 8004210:	f043 0302 	orr.w	r3, r3, #2
 8004214:	9207      	str	r2, [sp, #28]
 8004216:	9304      	str	r3, [sp, #16]
 8004218:	f898 3000 	ldrb.w	r3, [r8]
 800421c:	2b2e      	cmp	r3, #46	; 0x2e
 800421e:	d10e      	bne.n	800423e <_vfiprintf_r+0x14e>
 8004220:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004224:	2b2a      	cmp	r3, #42	; 0x2a
 8004226:	d138      	bne.n	800429a <_vfiprintf_r+0x1aa>
 8004228:	9b03      	ldr	r3, [sp, #12]
 800422a:	f108 0802 	add.w	r8, r8, #2
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	9203      	str	r2, [sp, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	bfb8      	it	lt
 8004238:	f04f 33ff 	movlt.w	r3, #4294967295
 800423c:	9305      	str	r3, [sp, #20]
 800423e:	4d33      	ldr	r5, [pc, #204]	; (800430c <_vfiprintf_r+0x21c>)
 8004240:	2203      	movs	r2, #3
 8004242:	f898 1000 	ldrb.w	r1, [r8]
 8004246:	4628      	mov	r0, r5
 8004248:	f000 fb90 	bl	800496c <memchr>
 800424c:	b140      	cbz	r0, 8004260 <_vfiprintf_r+0x170>
 800424e:	2340      	movs	r3, #64	; 0x40
 8004250:	1b40      	subs	r0, r0, r5
 8004252:	fa03 f000 	lsl.w	r0, r3, r0
 8004256:	9b04      	ldr	r3, [sp, #16]
 8004258:	f108 0801 	add.w	r8, r8, #1
 800425c:	4303      	orrs	r3, r0
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	f898 1000 	ldrb.w	r1, [r8]
 8004264:	2206      	movs	r2, #6
 8004266:	482a      	ldr	r0, [pc, #168]	; (8004310 <_vfiprintf_r+0x220>)
 8004268:	f108 0701 	add.w	r7, r8, #1
 800426c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004270:	f000 fb7c 	bl	800496c <memchr>
 8004274:	2800      	cmp	r0, #0
 8004276:	d037      	beq.n	80042e8 <_vfiprintf_r+0x1f8>
 8004278:	4b26      	ldr	r3, [pc, #152]	; (8004314 <_vfiprintf_r+0x224>)
 800427a:	bb1b      	cbnz	r3, 80042c4 <_vfiprintf_r+0x1d4>
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	3307      	adds	r3, #7
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	3308      	adds	r3, #8
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428a:	444b      	add	r3, r9
 800428c:	9309      	str	r3, [sp, #36]	; 0x24
 800428e:	e750      	b.n	8004132 <_vfiprintf_r+0x42>
 8004290:	fb05 3202 	mla	r2, r5, r2, r3
 8004294:	2001      	movs	r0, #1
 8004296:	4688      	mov	r8, r1
 8004298:	e78a      	b.n	80041b0 <_vfiprintf_r+0xc0>
 800429a:	2300      	movs	r3, #0
 800429c:	250a      	movs	r5, #10
 800429e:	4619      	mov	r1, r3
 80042a0:	f108 0801 	add.w	r8, r8, #1
 80042a4:	9305      	str	r3, [sp, #20]
 80042a6:	4640      	mov	r0, r8
 80042a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042ac:	3a30      	subs	r2, #48	; 0x30
 80042ae:	2a09      	cmp	r2, #9
 80042b0:	d903      	bls.n	80042ba <_vfiprintf_r+0x1ca>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0c3      	beq.n	800423e <_vfiprintf_r+0x14e>
 80042b6:	9105      	str	r1, [sp, #20]
 80042b8:	e7c1      	b.n	800423e <_vfiprintf_r+0x14e>
 80042ba:	fb05 2101 	mla	r1, r5, r1, r2
 80042be:	2301      	movs	r3, #1
 80042c0:	4680      	mov	r8, r0
 80042c2:	e7f0      	b.n	80042a6 <_vfiprintf_r+0x1b6>
 80042c4:	ab03      	add	r3, sp, #12
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4622      	mov	r2, r4
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <_vfiprintf_r+0x228>)
 80042cc:	a904      	add	r1, sp, #16
 80042ce:	4630      	mov	r0, r6
 80042d0:	f3af 8000 	nop.w
 80042d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80042d8:	4681      	mov	r9, r0
 80042da:	d1d5      	bne.n	8004288 <_vfiprintf_r+0x198>
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	065b      	lsls	r3, r3, #25
 80042e0:	f53f af7e 	bmi.w	80041e0 <_vfiprintf_r+0xf0>
 80042e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042e6:	e77d      	b.n	80041e4 <_vfiprintf_r+0xf4>
 80042e8:	ab03      	add	r3, sp, #12
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4622      	mov	r2, r4
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <_vfiprintf_r+0x228>)
 80042f0:	a904      	add	r1, sp, #16
 80042f2:	4630      	mov	r0, r6
 80042f4:	f000 f888 	bl	8004408 <_printf_i>
 80042f8:	e7ec      	b.n	80042d4 <_vfiprintf_r+0x1e4>
 80042fa:	bf00      	nop
 80042fc:	08004a38 	.word	0x08004a38
 8004300:	08004a78 	.word	0x08004a78
 8004304:	08004a58 	.word	0x08004a58
 8004308:	08004a18 	.word	0x08004a18
 800430c:	08004a7e 	.word	0x08004a7e
 8004310:	08004a82 	.word	0x08004a82
 8004314:	00000000 	.word	0x00000000
 8004318:	080040cb 	.word	0x080040cb

0800431c <_printf_common>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	4691      	mov	r9, r2
 8004322:	461f      	mov	r7, r3
 8004324:	688a      	ldr	r2, [r1, #8]
 8004326:	690b      	ldr	r3, [r1, #16]
 8004328:	4606      	mov	r6, r0
 800432a:	4293      	cmp	r3, r2
 800432c:	bfb8      	it	lt
 800432e:	4613      	movlt	r3, r2
 8004330:	f8c9 3000 	str.w	r3, [r9]
 8004334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004338:	460c      	mov	r4, r1
 800433a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800433e:	b112      	cbz	r2, 8004346 <_printf_common+0x2a>
 8004340:	3301      	adds	r3, #1
 8004342:	f8c9 3000 	str.w	r3, [r9]
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0699      	lsls	r1, r3, #26
 800434a:	bf42      	ittt	mi
 800434c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004350:	3302      	addmi	r3, #2
 8004352:	f8c9 3000 	strmi.w	r3, [r9]
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	f015 0506 	ands.w	r5, r5, #6
 800435c:	d107      	bne.n	800436e <_printf_common+0x52>
 800435e:	f104 0a19 	add.w	sl, r4, #25
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	f8d9 2000 	ldr.w	r2, [r9]
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	42ab      	cmp	r3, r5
 800436c:	dc29      	bgt.n	80043c2 <_printf_common+0xa6>
 800436e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	3300      	adds	r3, #0
 8004376:	bf18      	it	ne
 8004378:	2301      	movne	r3, #1
 800437a:	0692      	lsls	r2, r2, #26
 800437c:	d42e      	bmi.n	80043dc <_printf_common+0xc0>
 800437e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004382:	4639      	mov	r1, r7
 8004384:	4630      	mov	r0, r6
 8004386:	47c0      	blx	r8
 8004388:	3001      	adds	r0, #1
 800438a:	d021      	beq.n	80043d0 <_printf_common+0xb4>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	68e5      	ldr	r5, [r4, #12]
 8004390:	f003 0306 	and.w	r3, r3, #6
 8004394:	2b04      	cmp	r3, #4
 8004396:	bf18      	it	ne
 8004398:	2500      	movne	r5, #0
 800439a:	f8d9 2000 	ldr.w	r2, [r9]
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	bf08      	it	eq
 80043a4:	1aad      	subeq	r5, r5, r2
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	bf08      	it	eq
 80043ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bfc4      	itt	gt
 80043b4:	1a9b      	subgt	r3, r3, r2
 80043b6:	18ed      	addgt	r5, r5, r3
 80043b8:	341a      	adds	r4, #26
 80043ba:	454d      	cmp	r5, r9
 80043bc:	d11a      	bne.n	80043f4 <_printf_common+0xd8>
 80043be:	2000      	movs	r0, #0
 80043c0:	e008      	b.n	80043d4 <_printf_common+0xb8>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4652      	mov	r2, sl
 80043c6:	4639      	mov	r1, r7
 80043c8:	4630      	mov	r0, r6
 80043ca:	47c0      	blx	r8
 80043cc:	3001      	adds	r0, #1
 80043ce:	d103      	bne.n	80043d8 <_printf_common+0xbc>
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d8:	3501      	adds	r5, #1
 80043da:	e7c2      	b.n	8004362 <_printf_common+0x46>
 80043dc:	2030      	movs	r0, #48	; 0x30
 80043de:	18e1      	adds	r1, r4, r3
 80043e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ea:	4422      	add	r2, r4
 80043ec:	3302      	adds	r3, #2
 80043ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f2:	e7c4      	b.n	800437e <_printf_common+0x62>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4622      	mov	r2, r4
 80043f8:	4639      	mov	r1, r7
 80043fa:	4630      	mov	r0, r6
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d0e6      	beq.n	80043d0 <_printf_common+0xb4>
 8004402:	f109 0901 	add.w	r9, r9, #1
 8004406:	e7d8      	b.n	80043ba <_printf_common+0x9e>

08004408 <_printf_i>:
 8004408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800440c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004410:	460c      	mov	r4, r1
 8004412:	7e09      	ldrb	r1, [r1, #24]
 8004414:	b085      	sub	sp, #20
 8004416:	296e      	cmp	r1, #110	; 0x6e
 8004418:	4617      	mov	r7, r2
 800441a:	4606      	mov	r6, r0
 800441c:	4698      	mov	r8, r3
 800441e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004420:	f000 80b3 	beq.w	800458a <_printf_i+0x182>
 8004424:	d822      	bhi.n	800446c <_printf_i+0x64>
 8004426:	2963      	cmp	r1, #99	; 0x63
 8004428:	d036      	beq.n	8004498 <_printf_i+0x90>
 800442a:	d80a      	bhi.n	8004442 <_printf_i+0x3a>
 800442c:	2900      	cmp	r1, #0
 800442e:	f000 80b9 	beq.w	80045a4 <_printf_i+0x19c>
 8004432:	2958      	cmp	r1, #88	; 0x58
 8004434:	f000 8083 	beq.w	800453e <_printf_i+0x136>
 8004438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800443c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004440:	e032      	b.n	80044a8 <_printf_i+0xa0>
 8004442:	2964      	cmp	r1, #100	; 0x64
 8004444:	d001      	beq.n	800444a <_printf_i+0x42>
 8004446:	2969      	cmp	r1, #105	; 0x69
 8004448:	d1f6      	bne.n	8004438 <_printf_i+0x30>
 800444a:	6820      	ldr	r0, [r4, #0]
 800444c:	6813      	ldr	r3, [r2, #0]
 800444e:	0605      	lsls	r5, r0, #24
 8004450:	f103 0104 	add.w	r1, r3, #4
 8004454:	d52a      	bpl.n	80044ac <_printf_i+0xa4>
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	da03      	bge.n	8004466 <_printf_i+0x5e>
 800445e:	222d      	movs	r2, #45	; 0x2d
 8004460:	425b      	negs	r3, r3
 8004462:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004466:	486f      	ldr	r0, [pc, #444]	; (8004624 <_printf_i+0x21c>)
 8004468:	220a      	movs	r2, #10
 800446a:	e039      	b.n	80044e0 <_printf_i+0xd8>
 800446c:	2973      	cmp	r1, #115	; 0x73
 800446e:	f000 809d 	beq.w	80045ac <_printf_i+0x1a4>
 8004472:	d808      	bhi.n	8004486 <_printf_i+0x7e>
 8004474:	296f      	cmp	r1, #111	; 0x6f
 8004476:	d020      	beq.n	80044ba <_printf_i+0xb2>
 8004478:	2970      	cmp	r1, #112	; 0x70
 800447a:	d1dd      	bne.n	8004438 <_printf_i+0x30>
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f043 0320 	orr.w	r3, r3, #32
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	e003      	b.n	800448e <_printf_i+0x86>
 8004486:	2975      	cmp	r1, #117	; 0x75
 8004488:	d017      	beq.n	80044ba <_printf_i+0xb2>
 800448a:	2978      	cmp	r1, #120	; 0x78
 800448c:	d1d4      	bne.n	8004438 <_printf_i+0x30>
 800448e:	2378      	movs	r3, #120	; 0x78
 8004490:	4865      	ldr	r0, [pc, #404]	; (8004628 <_printf_i+0x220>)
 8004492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004496:	e055      	b.n	8004544 <_printf_i+0x13c>
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800449e:	1d19      	adds	r1, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6011      	str	r1, [r2, #0]
 80044a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044a8:	2301      	movs	r3, #1
 80044aa:	e08c      	b.n	80045c6 <_printf_i+0x1be>
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044b2:	6011      	str	r1, [r2, #0]
 80044b4:	bf18      	it	ne
 80044b6:	b21b      	sxthne	r3, r3
 80044b8:	e7cf      	b.n	800445a <_printf_i+0x52>
 80044ba:	6813      	ldr	r3, [r2, #0]
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	1d18      	adds	r0, r3, #4
 80044c0:	6010      	str	r0, [r2, #0]
 80044c2:	0628      	lsls	r0, r5, #24
 80044c4:	d501      	bpl.n	80044ca <_printf_i+0xc2>
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	e002      	b.n	80044d0 <_printf_i+0xc8>
 80044ca:	0668      	lsls	r0, r5, #25
 80044cc:	d5fb      	bpl.n	80044c6 <_printf_i+0xbe>
 80044ce:	881b      	ldrh	r3, [r3, #0]
 80044d0:	296f      	cmp	r1, #111	; 0x6f
 80044d2:	bf14      	ite	ne
 80044d4:	220a      	movne	r2, #10
 80044d6:	2208      	moveq	r2, #8
 80044d8:	4852      	ldr	r0, [pc, #328]	; (8004624 <_printf_i+0x21c>)
 80044da:	2100      	movs	r1, #0
 80044dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044e0:	6865      	ldr	r5, [r4, #4]
 80044e2:	2d00      	cmp	r5, #0
 80044e4:	60a5      	str	r5, [r4, #8]
 80044e6:	f2c0 8095 	blt.w	8004614 <_printf_i+0x20c>
 80044ea:	6821      	ldr	r1, [r4, #0]
 80044ec:	f021 0104 	bic.w	r1, r1, #4
 80044f0:	6021      	str	r1, [r4, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d13d      	bne.n	8004572 <_printf_i+0x16a>
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	f040 808e 	bne.w	8004618 <_printf_i+0x210>
 80044fc:	4665      	mov	r5, ip
 80044fe:	2a08      	cmp	r2, #8
 8004500:	d10b      	bne.n	800451a <_printf_i+0x112>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	07db      	lsls	r3, r3, #31
 8004506:	d508      	bpl.n	800451a <_printf_i+0x112>
 8004508:	6923      	ldr	r3, [r4, #16]
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	bfde      	ittt	le
 8004510:	2330      	movle	r3, #48	; 0x30
 8004512:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004516:	f105 35ff 	addle.w	r5, r5, #4294967295
 800451a:	ebac 0305 	sub.w	r3, ip, r5
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	f8cd 8000 	str.w	r8, [sp]
 8004524:	463b      	mov	r3, r7
 8004526:	aa03      	add	r2, sp, #12
 8004528:	4621      	mov	r1, r4
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff fef6 	bl	800431c <_printf_common>
 8004530:	3001      	adds	r0, #1
 8004532:	d14d      	bne.n	80045d0 <_printf_i+0x1c8>
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	b005      	add	sp, #20
 800453a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800453e:	4839      	ldr	r0, [pc, #228]	; (8004624 <_printf_i+0x21c>)
 8004540:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004544:	6813      	ldr	r3, [r2, #0]
 8004546:	6821      	ldr	r1, [r4, #0]
 8004548:	1d1d      	adds	r5, r3, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6015      	str	r5, [r2, #0]
 800454e:	060a      	lsls	r2, r1, #24
 8004550:	d50b      	bpl.n	800456a <_printf_i+0x162>
 8004552:	07ca      	lsls	r2, r1, #31
 8004554:	bf44      	itt	mi
 8004556:	f041 0120 	orrmi.w	r1, r1, #32
 800455a:	6021      	strmi	r1, [r4, #0]
 800455c:	b91b      	cbnz	r3, 8004566 <_printf_i+0x15e>
 800455e:	6822      	ldr	r2, [r4, #0]
 8004560:	f022 0220 	bic.w	r2, r2, #32
 8004564:	6022      	str	r2, [r4, #0]
 8004566:	2210      	movs	r2, #16
 8004568:	e7b7      	b.n	80044da <_printf_i+0xd2>
 800456a:	064d      	lsls	r5, r1, #25
 800456c:	bf48      	it	mi
 800456e:	b29b      	uxthmi	r3, r3
 8004570:	e7ef      	b.n	8004552 <_printf_i+0x14a>
 8004572:	4665      	mov	r5, ip
 8004574:	fbb3 f1f2 	udiv	r1, r3, r2
 8004578:	fb02 3311 	mls	r3, r2, r1, r3
 800457c:	5cc3      	ldrb	r3, [r0, r3]
 800457e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004582:	460b      	mov	r3, r1
 8004584:	2900      	cmp	r1, #0
 8004586:	d1f5      	bne.n	8004574 <_printf_i+0x16c>
 8004588:	e7b9      	b.n	80044fe <_printf_i+0xf6>
 800458a:	6813      	ldr	r3, [r2, #0]
 800458c:	6825      	ldr	r5, [r4, #0]
 800458e:	1d18      	adds	r0, r3, #4
 8004590:	6961      	ldr	r1, [r4, #20]
 8004592:	6010      	str	r0, [r2, #0]
 8004594:	0628      	lsls	r0, r5, #24
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	d501      	bpl.n	800459e <_printf_i+0x196>
 800459a:	6019      	str	r1, [r3, #0]
 800459c:	e002      	b.n	80045a4 <_printf_i+0x19c>
 800459e:	066a      	lsls	r2, r5, #25
 80045a0:	d5fb      	bpl.n	800459a <_printf_i+0x192>
 80045a2:	8019      	strh	r1, [r3, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	4665      	mov	r5, ip
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	e7b9      	b.n	8004520 <_printf_i+0x118>
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	1d19      	adds	r1, r3, #4
 80045b0:	6011      	str	r1, [r2, #0]
 80045b2:	681d      	ldr	r5, [r3, #0]
 80045b4:	6862      	ldr	r2, [r4, #4]
 80045b6:	2100      	movs	r1, #0
 80045b8:	4628      	mov	r0, r5
 80045ba:	f000 f9d7 	bl	800496c <memchr>
 80045be:	b108      	cbz	r0, 80045c4 <_printf_i+0x1bc>
 80045c0:	1b40      	subs	r0, r0, r5
 80045c2:	6060      	str	r0, [r4, #4]
 80045c4:	6863      	ldr	r3, [r4, #4]
 80045c6:	6123      	str	r3, [r4, #16]
 80045c8:	2300      	movs	r3, #0
 80045ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ce:	e7a7      	b.n	8004520 <_printf_i+0x118>
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	462a      	mov	r2, r5
 80045d4:	4639      	mov	r1, r7
 80045d6:	4630      	mov	r0, r6
 80045d8:	47c0      	blx	r8
 80045da:	3001      	adds	r0, #1
 80045dc:	d0aa      	beq.n	8004534 <_printf_i+0x12c>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	079b      	lsls	r3, r3, #30
 80045e2:	d413      	bmi.n	800460c <_printf_i+0x204>
 80045e4:	68e0      	ldr	r0, [r4, #12]
 80045e6:	9b03      	ldr	r3, [sp, #12]
 80045e8:	4298      	cmp	r0, r3
 80045ea:	bfb8      	it	lt
 80045ec:	4618      	movlt	r0, r3
 80045ee:	e7a3      	b.n	8004538 <_printf_i+0x130>
 80045f0:	2301      	movs	r3, #1
 80045f2:	464a      	mov	r2, r9
 80045f4:	4639      	mov	r1, r7
 80045f6:	4630      	mov	r0, r6
 80045f8:	47c0      	blx	r8
 80045fa:	3001      	adds	r0, #1
 80045fc:	d09a      	beq.n	8004534 <_printf_i+0x12c>
 80045fe:	3501      	adds	r5, #1
 8004600:	68e3      	ldr	r3, [r4, #12]
 8004602:	9a03      	ldr	r2, [sp, #12]
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	42ab      	cmp	r3, r5
 8004608:	dcf2      	bgt.n	80045f0 <_printf_i+0x1e8>
 800460a:	e7eb      	b.n	80045e4 <_printf_i+0x1dc>
 800460c:	2500      	movs	r5, #0
 800460e:	f104 0919 	add.w	r9, r4, #25
 8004612:	e7f5      	b.n	8004600 <_printf_i+0x1f8>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ac      	bne.n	8004572 <_printf_i+0x16a>
 8004618:	7803      	ldrb	r3, [r0, #0]
 800461a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800461e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004622:	e76c      	b.n	80044fe <_printf_i+0xf6>
 8004624:	08004a89 	.word	0x08004a89
 8004628:	08004a9a 	.word	0x08004a9a

0800462c <_putc_r>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	460d      	mov	r5, r1
 8004630:	4614      	mov	r4, r2
 8004632:	4606      	mov	r6, r0
 8004634:	b118      	cbz	r0, 800463e <_putc_r+0x12>
 8004636:	6983      	ldr	r3, [r0, #24]
 8004638:	b90b      	cbnz	r3, 800463e <_putc_r+0x12>
 800463a:	f7ff fb95 	bl	8003d68 <__sinit>
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <_putc_r+0x60>)
 8004640:	429c      	cmp	r4, r3
 8004642:	d112      	bne.n	800466a <_putc_r+0x3e>
 8004644:	6874      	ldr	r4, [r6, #4]
 8004646:	68a3      	ldr	r3, [r4, #8]
 8004648:	3b01      	subs	r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	60a3      	str	r3, [r4, #8]
 800464e:	da16      	bge.n	800467e <_putc_r+0x52>
 8004650:	69a2      	ldr	r2, [r4, #24]
 8004652:	4293      	cmp	r3, r2
 8004654:	db02      	blt.n	800465c <_putc_r+0x30>
 8004656:	b2eb      	uxtb	r3, r5
 8004658:	2b0a      	cmp	r3, #10
 800465a:	d110      	bne.n	800467e <_putc_r+0x52>
 800465c:	4622      	mov	r2, r4
 800465e:	4629      	mov	r1, r5
 8004660:	4630      	mov	r0, r6
 8004662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004666:	f000 b86b 	b.w	8004740 <__swbuf_r>
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <_putc_r+0x64>)
 800466c:	429c      	cmp	r4, r3
 800466e:	d101      	bne.n	8004674 <_putc_r+0x48>
 8004670:	68b4      	ldr	r4, [r6, #8]
 8004672:	e7e8      	b.n	8004646 <_putc_r+0x1a>
 8004674:	4b07      	ldr	r3, [pc, #28]	; (8004694 <_putc_r+0x68>)
 8004676:	429c      	cmp	r4, r3
 8004678:	bf08      	it	eq
 800467a:	68f4      	ldreq	r4, [r6, #12]
 800467c:	e7e3      	b.n	8004646 <_putc_r+0x1a>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	b2e8      	uxtb	r0, r5
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	6022      	str	r2, [r4, #0]
 8004686:	701d      	strb	r5, [r3, #0]
 8004688:	bd70      	pop	{r4, r5, r6, pc}
 800468a:	bf00      	nop
 800468c:	08004a38 	.word	0x08004a38
 8004690:	08004a58 	.word	0x08004a58
 8004694:	08004a18 	.word	0x08004a18

08004698 <_sbrk_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	2300      	movs	r3, #0
 800469c:	4c05      	ldr	r4, [pc, #20]	; (80046b4 <_sbrk_r+0x1c>)
 800469e:	4605      	mov	r5, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	f7fd ff9e 	bl	80025e4 <_sbrk>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d102      	bne.n	80046b2 <_sbrk_r+0x1a>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	b103      	cbz	r3, 80046b2 <_sbrk_r+0x1a>
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	200000b4 	.word	0x200000b4

080046b8 <__sread>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	460c      	mov	r4, r1
 80046bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c0:	f000 f964 	bl	800498c <_read_r>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	bfab      	itete	ge
 80046c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046ca:	89a3      	ldrhlt	r3, [r4, #12]
 80046cc:	181b      	addge	r3, r3, r0
 80046ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046d2:	bfac      	ite	ge
 80046d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80046d6:	81a3      	strhlt	r3, [r4, #12]
 80046d8:	bd10      	pop	{r4, pc}

080046da <__swrite>:
 80046da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046de:	461f      	mov	r7, r3
 80046e0:	898b      	ldrh	r3, [r1, #12]
 80046e2:	4605      	mov	r5, r0
 80046e4:	05db      	lsls	r3, r3, #23
 80046e6:	460c      	mov	r4, r1
 80046e8:	4616      	mov	r6, r2
 80046ea:	d505      	bpl.n	80046f8 <__swrite+0x1e>
 80046ec:	2302      	movs	r3, #2
 80046ee:	2200      	movs	r2, #0
 80046f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f4:	f000 f928 	bl	8004948 <_lseek_r>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	4632      	mov	r2, r6
 80046fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004706:	463b      	mov	r3, r7
 8004708:	4628      	mov	r0, r5
 800470a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	f000 b869 	b.w	80047e4 <_write_r>

08004712 <__sseek>:
 8004712:	b510      	push	{r4, lr}
 8004714:	460c      	mov	r4, r1
 8004716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471a:	f000 f915 	bl	8004948 <_lseek_r>
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	bf15      	itete	ne
 8004724:	6560      	strne	r0, [r4, #84]	; 0x54
 8004726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800472a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800472e:	81a3      	strheq	r3, [r4, #12]
 8004730:	bf18      	it	ne
 8004732:	81a3      	strhne	r3, [r4, #12]
 8004734:	bd10      	pop	{r4, pc}

08004736 <__sclose>:
 8004736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473a:	f000 b8d3 	b.w	80048e4 <_close_r>
	...

08004740 <__swbuf_r>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	460e      	mov	r6, r1
 8004744:	4614      	mov	r4, r2
 8004746:	4605      	mov	r5, r0
 8004748:	b118      	cbz	r0, 8004752 <__swbuf_r+0x12>
 800474a:	6983      	ldr	r3, [r0, #24]
 800474c:	b90b      	cbnz	r3, 8004752 <__swbuf_r+0x12>
 800474e:	f7ff fb0b 	bl	8003d68 <__sinit>
 8004752:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <__swbuf_r+0x98>)
 8004754:	429c      	cmp	r4, r3
 8004756:	d12a      	bne.n	80047ae <__swbuf_r+0x6e>
 8004758:	686c      	ldr	r4, [r5, #4]
 800475a:	69a3      	ldr	r3, [r4, #24]
 800475c:	60a3      	str	r3, [r4, #8]
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	071a      	lsls	r2, r3, #28
 8004762:	d52e      	bpl.n	80047c2 <__swbuf_r+0x82>
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	b363      	cbz	r3, 80047c2 <__swbuf_r+0x82>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	b2f6      	uxtb	r6, r6
 800476e:	1ac0      	subs	r0, r0, r3
 8004770:	6963      	ldr	r3, [r4, #20]
 8004772:	4637      	mov	r7, r6
 8004774:	4283      	cmp	r3, r0
 8004776:	dc04      	bgt.n	8004782 <__swbuf_r+0x42>
 8004778:	4621      	mov	r1, r4
 800477a:	4628      	mov	r0, r5
 800477c:	f7ff fa8a 	bl	8003c94 <_fflush_r>
 8004780:	bb28      	cbnz	r0, 80047ce <__swbuf_r+0x8e>
 8004782:	68a3      	ldr	r3, [r4, #8]
 8004784:	3001      	adds	r0, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	60a3      	str	r3, [r4, #8]
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	6022      	str	r2, [r4, #0]
 8004790:	701e      	strb	r6, [r3, #0]
 8004792:	6963      	ldr	r3, [r4, #20]
 8004794:	4283      	cmp	r3, r0
 8004796:	d004      	beq.n	80047a2 <__swbuf_r+0x62>
 8004798:	89a3      	ldrh	r3, [r4, #12]
 800479a:	07db      	lsls	r3, r3, #31
 800479c:	d519      	bpl.n	80047d2 <__swbuf_r+0x92>
 800479e:	2e0a      	cmp	r6, #10
 80047a0:	d117      	bne.n	80047d2 <__swbuf_r+0x92>
 80047a2:	4621      	mov	r1, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7ff fa75 	bl	8003c94 <_fflush_r>
 80047aa:	b190      	cbz	r0, 80047d2 <__swbuf_r+0x92>
 80047ac:	e00f      	b.n	80047ce <__swbuf_r+0x8e>
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <__swbuf_r+0x9c>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	d101      	bne.n	80047b8 <__swbuf_r+0x78>
 80047b4:	68ac      	ldr	r4, [r5, #8]
 80047b6:	e7d0      	b.n	800475a <__swbuf_r+0x1a>
 80047b8:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <__swbuf_r+0xa0>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	bf08      	it	eq
 80047be:	68ec      	ldreq	r4, [r5, #12]
 80047c0:	e7cb      	b.n	800475a <__swbuf_r+0x1a>
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 f81f 	bl	8004808 <__swsetup_r>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d0cc      	beq.n	8004768 <__swbuf_r+0x28>
 80047ce:	f04f 37ff 	mov.w	r7, #4294967295
 80047d2:	4638      	mov	r0, r7
 80047d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047d6:	bf00      	nop
 80047d8:	08004a38 	.word	0x08004a38
 80047dc:	08004a58 	.word	0x08004a58
 80047e0:	08004a18 	.word	0x08004a18

080047e4 <_write_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4605      	mov	r5, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	4611      	mov	r1, r2
 80047ec:	2200      	movs	r2, #0
 80047ee:	4c05      	ldr	r4, [pc, #20]	; (8004804 <_write_r+0x20>)
 80047f0:	6022      	str	r2, [r4, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7fd fea9 	bl	800254a <_write>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_write_r+0x1e>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_write_r+0x1e>
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	200000b4 	.word	0x200000b4

08004808 <__swsetup_r>:
 8004808:	4b32      	ldr	r3, [pc, #200]	; (80048d4 <__swsetup_r+0xcc>)
 800480a:	b570      	push	{r4, r5, r6, lr}
 800480c:	681d      	ldr	r5, [r3, #0]
 800480e:	4606      	mov	r6, r0
 8004810:	460c      	mov	r4, r1
 8004812:	b125      	cbz	r5, 800481e <__swsetup_r+0x16>
 8004814:	69ab      	ldr	r3, [r5, #24]
 8004816:	b913      	cbnz	r3, 800481e <__swsetup_r+0x16>
 8004818:	4628      	mov	r0, r5
 800481a:	f7ff faa5 	bl	8003d68 <__sinit>
 800481e:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <__swsetup_r+0xd0>)
 8004820:	429c      	cmp	r4, r3
 8004822:	d10f      	bne.n	8004844 <__swsetup_r+0x3c>
 8004824:	686c      	ldr	r4, [r5, #4]
 8004826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482a:	b29a      	uxth	r2, r3
 800482c:	0715      	lsls	r5, r2, #28
 800482e:	d42c      	bmi.n	800488a <__swsetup_r+0x82>
 8004830:	06d0      	lsls	r0, r2, #27
 8004832:	d411      	bmi.n	8004858 <__swsetup_r+0x50>
 8004834:	2209      	movs	r2, #9
 8004836:	6032      	str	r2, [r6, #0]
 8004838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	f04f 30ff 	mov.w	r0, #4294967295
 8004842:	e03e      	b.n	80048c2 <__swsetup_r+0xba>
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <__swsetup_r+0xd4>)
 8004846:	429c      	cmp	r4, r3
 8004848:	d101      	bne.n	800484e <__swsetup_r+0x46>
 800484a:	68ac      	ldr	r4, [r5, #8]
 800484c:	e7eb      	b.n	8004826 <__swsetup_r+0x1e>
 800484e:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <__swsetup_r+0xd8>)
 8004850:	429c      	cmp	r4, r3
 8004852:	bf08      	it	eq
 8004854:	68ec      	ldreq	r4, [r5, #12]
 8004856:	e7e6      	b.n	8004826 <__swsetup_r+0x1e>
 8004858:	0751      	lsls	r1, r2, #29
 800485a:	d512      	bpl.n	8004882 <__swsetup_r+0x7a>
 800485c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800485e:	b141      	cbz	r1, 8004872 <__swsetup_r+0x6a>
 8004860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004864:	4299      	cmp	r1, r3
 8004866:	d002      	beq.n	800486e <__swsetup_r+0x66>
 8004868:	4630      	mov	r0, r6
 800486a:	f7ff fb73 	bl	8003f54 <_free_r>
 800486e:	2300      	movs	r3, #0
 8004870:	6363      	str	r3, [r4, #52]	; 0x34
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	2300      	movs	r3, #0
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f043 0308 	orr.w	r3, r3, #8
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	b94b      	cbnz	r3, 80048a2 <__swsetup_r+0x9a>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004898:	d003      	beq.n	80048a2 <__swsetup_r+0x9a>
 800489a:	4621      	mov	r1, r4
 800489c:	4630      	mov	r0, r6
 800489e:	f7ff fb11 	bl	8003ec4 <__smakebuf_r>
 80048a2:	89a2      	ldrh	r2, [r4, #12]
 80048a4:	f012 0301 	ands.w	r3, r2, #1
 80048a8:	d00c      	beq.n	80048c4 <__swsetup_r+0xbc>
 80048aa:	2300      	movs	r3, #0
 80048ac:	60a3      	str	r3, [r4, #8]
 80048ae:	6963      	ldr	r3, [r4, #20]
 80048b0:	425b      	negs	r3, r3
 80048b2:	61a3      	str	r3, [r4, #24]
 80048b4:	6923      	ldr	r3, [r4, #16]
 80048b6:	b953      	cbnz	r3, 80048ce <__swsetup_r+0xc6>
 80048b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80048c0:	d1ba      	bne.n	8004838 <__swsetup_r+0x30>
 80048c2:	bd70      	pop	{r4, r5, r6, pc}
 80048c4:	0792      	lsls	r2, r2, #30
 80048c6:	bf58      	it	pl
 80048c8:	6963      	ldrpl	r3, [r4, #20]
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	e7f2      	b.n	80048b4 <__swsetup_r+0xac>
 80048ce:	2000      	movs	r0, #0
 80048d0:	e7f7      	b.n	80048c2 <__swsetup_r+0xba>
 80048d2:	bf00      	nop
 80048d4:	20000014 	.word	0x20000014
 80048d8:	08004a38 	.word	0x08004a38
 80048dc:	08004a58 	.word	0x08004a58
 80048e0:	08004a18 	.word	0x08004a18

080048e4 <_close_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	2300      	movs	r3, #0
 80048e8:	4c05      	ldr	r4, [pc, #20]	; (8004900 <_close_r+0x1c>)
 80048ea:	4605      	mov	r5, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	f7fd fe47 	bl	8002582 <_close>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_close_r+0x1a>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_close_r+0x1a>
 80048fc:	602b      	str	r3, [r5, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	200000b4 	.word	0x200000b4

08004904 <_fstat_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	2300      	movs	r3, #0
 8004908:	4c06      	ldr	r4, [pc, #24]	; (8004924 <_fstat_r+0x20>)
 800490a:	4605      	mov	r5, r0
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	f7fd fe41 	bl	8002598 <_fstat>
 8004916:	1c43      	adds	r3, r0, #1
 8004918:	d102      	bne.n	8004920 <_fstat_r+0x1c>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	b103      	cbz	r3, 8004920 <_fstat_r+0x1c>
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	bf00      	nop
 8004924:	200000b4 	.word	0x200000b4

08004928 <_isatty_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	2300      	movs	r3, #0
 800492c:	4c05      	ldr	r4, [pc, #20]	; (8004944 <_isatty_r+0x1c>)
 800492e:	4605      	mov	r5, r0
 8004930:	4608      	mov	r0, r1
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	f7fd fe3f 	bl	80025b6 <_isatty>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_isatty_r+0x1a>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	b103      	cbz	r3, 8004942 <_isatty_r+0x1a>
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	200000b4 	.word	0x200000b4

08004948 <_lseek_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4605      	mov	r5, r0
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	2200      	movs	r2, #0
 8004952:	4c05      	ldr	r4, [pc, #20]	; (8004968 <_lseek_r+0x20>)
 8004954:	6022      	str	r2, [r4, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fd fe37 	bl	80025ca <_lseek>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_lseek_r+0x1e>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	b103      	cbz	r3, 8004966 <_lseek_r+0x1e>
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	200000b4 	.word	0x200000b4

0800496c <memchr>:
 800496c:	b510      	push	{r4, lr}
 800496e:	b2c9      	uxtb	r1, r1
 8004970:	4402      	add	r2, r0
 8004972:	4290      	cmp	r0, r2
 8004974:	4603      	mov	r3, r0
 8004976:	d101      	bne.n	800497c <memchr+0x10>
 8004978:	2300      	movs	r3, #0
 800497a:	e003      	b.n	8004984 <memchr+0x18>
 800497c:	781c      	ldrb	r4, [r3, #0]
 800497e:	3001      	adds	r0, #1
 8004980:	428c      	cmp	r4, r1
 8004982:	d1f6      	bne.n	8004972 <memchr+0x6>
 8004984:	4618      	mov	r0, r3
 8004986:	bd10      	pop	{r4, pc}

08004988 <__malloc_lock>:
 8004988:	4770      	bx	lr

0800498a <__malloc_unlock>:
 800498a:	4770      	bx	lr

0800498c <_read_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4605      	mov	r5, r0
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	2200      	movs	r2, #0
 8004996:	4c05      	ldr	r4, [pc, #20]	; (80049ac <_read_r+0x20>)
 8004998:	6022      	str	r2, [r4, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	f7fd fdb8 	bl	8002510 <_read>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_read_r+0x1e>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_read_r+0x1e>
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	200000b4 	.word	0x200000b4

080049b0 <_init>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr

080049bc <_fini>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr


Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080070f0  080070f0  000170f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b0  080074b0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080074b0  080074b0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074b0  080074b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080074b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  200001e4  0800769c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  0800769c  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ec6  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cf4  00000000  00000000  0002a0d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0002bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  0002c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001589b  00000000  00000000  0002d330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006dca  00000000  00000000  00042bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006de99  00000000  00000000  00049995  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b782e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e90  00000000  00000000  000b78ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080070d4 	.word	0x080070d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080070d4 	.word	0x080070d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	621a      	str	r2, [r3, #32]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	611a      	str	r2, [r3, #16]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29a      	uxth	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	615a      	str	r2, [r3, #20]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <MotorL_EnablePWM>:
 *      Author: vanti
 */
#include "MotorControl.h"

void MotorL_EnablePWM(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 80011a4:	2101      	movs	r1, #1
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <MotorL_EnablePWM+0x10>)
 80011a8:	f7ff ffb2 	bl	8001110 <LL_TIM_CC_EnableChannel>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40012c00 	.word	0x40012c00

080011b4 <MotorR_EnablePWM>:
{
	LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorR_EnablePWM(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <MotorR_EnablePWM+0x14>)
 80011be:	f7ff ffa7 	bl	8001110 <LL_TIM_CC_EnableChannel>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012c00 	.word	0x40012c00

080011cc <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011da:	db03      	blt.n	80011e4 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 80011dc:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	e005      	b.n	80011f0 <MotorL_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80011ea:	dc01      	bgt.n	80011f0 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MotorL_SetPWM+0x60>)
 80011ee:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0a      	blt.n	800120c <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MotorL_SetPWM+0x64>)
 80011fe:	f7ff ff97 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001202:	490c      	ldr	r1, [pc, #48]	; (8001234 <MotorL_SetPWM+0x68>)
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MotorL_SetPWM+0x6c>)
 8001206:	f7ff ffbc 	bl	8001182 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800120a:	e00a      	b.n	8001222 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001212:	4619      	mov	r1, r3
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <MotorL_SetPWM+0x64>)
 8001216:	f7ff ff8b 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800121a:	4906      	ldr	r1, [pc, #24]	; (8001234 <MotorL_SetPWM+0x68>)
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <MotorL_SetPWM+0x6c>)
 800121e:	f7ff ffa1 	bl	8001164 <LL_GPIO_SetOutputPin>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	ffffe3e0 	.word	0xffffe3e0
 8001230:	40012c00 	.word	0x40012c00
 8001234:	04800080 	.word	0x04800080
 8001238:	40010c00 	.word	0x40010c00

0800123c <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800124a:	db03      	blt.n	8001254 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 800124c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	e005      	b.n	8001260 <MotorR_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800125a:	dc01      	bgt.n	8001260 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MotorR_SetPWM+0x60>)
 800125e:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0a      	blt.n	800127c <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MotorR_SetPWM+0x64>)
 800126e:	f7ff ff6c 	bl	800114a <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001272:	490c      	ldr	r1, [pc, #48]	; (80012a4 <MotorR_SetPWM+0x68>)
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MotorR_SetPWM+0x6c>)
 8001276:	f7ff ff84 	bl	8001182 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 800127a:	e00a      	b.n	8001292 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001282:	4619      	mov	r1, r3
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MotorR_SetPWM+0x64>)
 8001286:	f7ff ff60 	bl	800114a <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <MotorR_SetPWM+0x68>)
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MotorR_SetPWM+0x6c>)
 800128e:	f7ff ff69 	bl	8001164 <LL_GPIO_SetOutputPin>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	ffffe3e0 	.word	0xffffe3e0
 80012a0:	40012c00 	.word	0x40012c00
 80012a4:	04020002 	.word	0x04020002
 80012a8:	40010800 	.word	0x40010800

080012ac <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90)
 80012b4:	4916      	ldr	r1, [pc, #88]	; (8001310 <Servo_SetAngle+0x64>)
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff00 	bl	80010bc <__aeabi_fcmpgt>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <Servo_SetAngle+0x1c>
		ServoAngle = 90;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <Servo_SetAngle+0x64>)
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	e008      	b.n	80012da <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90)
 80012c8:	4912      	ldr	r1, [pc, #72]	; (8001314 <Servo_SetAngle+0x68>)
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fed8 	bl	8001080 <__aeabi_fcmplt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <Servo_SetAngle+0x2e>
		ServoAngle = -90;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <Servo_SetAngle+0x68>)
 80012d8:	607b      	str	r3, [r7, #4]
	//	uint16_t ServoCPR = 540 + ServoAngle*2;
	LL_TIM_OC_SetCompareCH1(TIM4, 4400 + ServoAngle * 50 / 3);
 80012da:	490f      	ldr	r1, [pc, #60]	; (8001318 <Servo_SetAngle+0x6c>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fd31 	bl	8000d44 <__aeabi_fmul>
 80012e2:	4603      	mov	r3, r0
 80012e4:	490d      	ldr	r1, [pc, #52]	; (800131c <Servo_SetAngle+0x70>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fde0 	bl	8000eac <__aeabi_fdiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	490c      	ldr	r1, [pc, #48]	; (8001320 <Servo_SetAngle+0x74>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fc1f 	bl	8000b34 <__addsf3>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fee9 	bl	80010d0 <__aeabi_f2uiz>
 80012fe:	4603      	mov	r3, r0
 8001300:	4619      	mov	r1, r3
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <Servo_SetAngle+0x78>)
 8001304:	f7ff ff14 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	42b40000 	.word	0x42b40000
 8001314:	c2b40000 	.word	0xc2b40000
 8001318:	42480000 	.word	0x42480000
 800131c:	40400000 	.word	0x40400000
 8001320:	45898000 	.word	0x45898000
 8001324:	40000800 	.word	0x40000800

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4906      	ldr	r1, [pc, #24]	; (80013c0 <__NVIC_EnableIRQ+0x34>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800147c:	b490      	push	{r4, r7}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	332c      	adds	r3, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001494:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001498:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	fa92 f2a2 	rbit	r2, r2
 80014a0:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	fab2 f282 	clz	r2, r2
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	40d3      	lsrs	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	211f      	movs	r1, #31
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 011f 	and.w	r1, r3, #31
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc90      	pop	{r4, r7}
 80014e0:	4770      	bx	lr

080014e2 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001506:	b490      	push	{r4, r7}
 8001508:	b08a      	sub	sp, #40	; 0x28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	330c      	adds	r3, #12
 8001516:	4619      	mov	r1, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	613a      	str	r2, [r7, #16]
  return result;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	fab2 f282 	clz	r2, r2
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	40d3      	lsrs	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001544:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001548:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	69f9      	ldr	r1, [r7, #28]
 800154c:	fa91 f1a1 	rbit	r1, r1
 8001550:	61b9      	str	r1, [r7, #24]
  return result;
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	fab1 f181 	clz	r1, r1
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	40cb      	lsrs	r3, r1
 800155c:	2107      	movs	r1, #7
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	401a      	ands	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800156c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001570:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001574:	fa91 f1a1 	rbit	r1, r1
 8001578:	6239      	str	r1, [r7, #32]
  return result;
 800157a:	6a39      	ldr	r1, [r7, #32]
 800157c:	fab1 f181 	clz	r1, r1
 8001580:	b2c9      	uxtb	r1, r1
 8001582:	40cb      	lsrs	r3, r1
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bc90      	pop	{r4, r7}
 8001596:	4770      	bx	lr

08001598 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f043 0204 	orr.w	r2, r3, #4
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
	...

08001618 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LL_DMA_EnableChannel+0x38>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	3a01      	subs	r2, #1
 8001636:	4906      	ldr	r1, [pc, #24]	; (8001650 <LL_DMA_EnableChannel+0x38>)
 8001638:	5c8a      	ldrb	r2, [r1, r2]
 800163a:	4611      	mov	r1, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	440a      	add	r2, r1
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	0800718c 	.word	0x0800718c

08001654 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <LL_DMA_SetDataTransferDirection+0x44>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	461a      	mov	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001674:	f023 0310 	bic.w	r3, r3, #16
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	3a01      	subs	r2, #1
 800167c:	4906      	ldr	r1, [pc, #24]	; (8001698 <LL_DMA_SetDataTransferDirection+0x44>)
 800167e:	5c8a      	ldrb	r2, [r1, r2]
 8001680:	4611      	mov	r1, r2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	440a      	add	r2, r1
 8001686:	4611      	mov	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	0800718c 	.word	0x0800718c

0800169c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LL_DMA_SetMode+0x40>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	461a      	mov	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 0220 	bic.w	r2, r3, #32
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3b01      	subs	r3, #1
 80016c0:	4906      	ldr	r1, [pc, #24]	; (80016dc <LL_DMA_SetMode+0x40>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	4619      	mov	r1, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	440b      	add	r3, r1
 80016ca:	4619      	mov	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
             Mode);
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	0800718c 	.word	0x0800718c

080016e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LL_DMA_SetPeriphIncMode+0x40>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3b01      	subs	r3, #1
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <LL_DMA_SetPeriphIncMode+0x40>)
 8001706:	5ccb      	ldrb	r3, [r1, r3]
 8001708:	4619      	mov	r1, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	440b      	add	r3, r1
 800170e:	4619      	mov	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	0800718c 	.word	0x0800718c

08001724 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3b01      	subs	r3, #1
 8001734:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LL_DMA_SetMemoryIncMode+0x40>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	461a      	mov	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	3b01      	subs	r3, #1
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <LL_DMA_SetMemoryIncMode+0x40>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	4619      	mov	r1, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	440b      	add	r3, r1
 8001752:	4619      	mov	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	0800718c 	.word	0x0800718c

08001768 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3b01      	subs	r3, #1
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LL_DMA_SetPeriphSize+0x40>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3b01      	subs	r3, #1
 800178c:	4906      	ldr	r1, [pc, #24]	; (80017a8 <LL_DMA_SetPeriphSize+0x40>)
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	4619      	mov	r1, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	440b      	add	r3, r1
 8001796:	4619      	mov	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	0800718c 	.word	0x0800718c

080017ac <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LL_DMA_SetMemorySize+0x40>)
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4906      	ldr	r1, [pc, #24]	; (80017ec <LL_DMA_SetMemorySize+0x40>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	440b      	add	r3, r1
 80017da:	4619      	mov	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	0800718c 	.word	0x0800718c

080017f0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	461a      	mov	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3b01      	subs	r3, #1
 8001814:	4906      	ldr	r1, [pc, #24]	; (8001830 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	4619      	mov	r1, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	440b      	add	r3, r1
 800181e:	4619      	mov	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	0800718c 	.word	0x0800718c

08001834 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3b01      	subs	r3, #1
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LL_DMA_SetDataLength+0x40>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	461a      	mov	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	3a01      	subs	r2, #1
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <LL_DMA_SetDataLength+0x40>)
 800185a:	5c8a      	ldrb	r2, [r1, r2]
 800185c:	4611      	mov	r1, r2
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	440a      	add	r2, r1
 8001862:	4611      	mov	r1, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	0800718c 	.word	0x0800718c

08001878 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <LL_DMA_SetMemoryAddress+0x2c>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	0800718c 	.word	0x0800718c

080018a8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <LL_DMA_SetPeriphAddress+0x2c>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	461a      	mov	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6093      	str	r3, [r2, #8]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	0800718c 	.word	0x0800718c

080018d8 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60da      	str	r2, [r3, #12]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f023 0201 	bic.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60da      	str	r2, [r3, #12]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <LL_RCC_HSE_Enable+0x18>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <LL_RCC_HSE_Enable+0x18>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000

08001990 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_RCC_HSE_IsReady+0x20>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000

080019b4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <LL_RCC_SetSysClkSource+0x24>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 0203 	bic.w	r2, r3, #3
 80019c4:	4904      	ldr	r1, [pc, #16]	; (80019d8 <LL_RCC_SetSysClkSource+0x24>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <LL_RCC_GetSysClkSource+0x14>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <LL_RCC_SetAHBPrescaler+0x24>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	4904      	ldr	r1, [pc, #16]	; (8001a18 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a54:	4904      	ldr	r1, [pc, #16]	; (8001a68 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <LL_RCC_SetADCClockSource+0x24>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a7c:	4904      	ldr	r1, [pc, #16]	; (8001a90 <LL_RCC_SetADCClockSource+0x24>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <LL_RCC_PLL_Enable+0x18>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <LL_RCC_PLL_Enable+0x18>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40021000 	.word	0x40021000

08001ab0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <LL_RCC_PLL_IsReady+0x20>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ac0:	bf0c      	ite	eq
 8001ac2:	2301      	moveq	r3, #1
 8001ac4:	2300      	movne	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000

08001b04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <LL_FLASH_SetLatency+0x24>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 0207 	bic.w	r2, r3, #7
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <LL_FLASH_SetLatency+0x24>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000

08001bbc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <LL_FLASH_GetLatency+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <LL_TIM_EnableCounter>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <LL_TIM_DisableARRPreload>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <LL_TIM_SetCounter>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <LL_TIM_OC_DisableFast>:
{
 8001c2c:	b4b0      	push	{r4, r5, r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d01c      	beq.n	8001c76 <LL_TIM_OC_DisableFast+0x4a>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d017      	beq.n	8001c72 <LL_TIM_OC_DisableFast+0x46>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d012      	beq.n	8001c6e <LL_TIM_OC_DisableFast+0x42>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d00d      	beq.n	8001c6a <LL_TIM_OC_DisableFast+0x3e>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c54:	d007      	beq.n	8001c66 <LL_TIM_OC_DisableFast+0x3a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d101      	bne.n	8001c62 <LL_TIM_OC_DisableFast+0x36>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e00a      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e008      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e006      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e004      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e002      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c76:	2300      	movs	r3, #0
 8001c78:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3318      	adds	r3, #24
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4629      	mov	r1, r5
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <LL_TIM_OC_DisableFast+0x7c>)
 8001c84:	5c5b      	ldrb	r3, [r3, r1]
 8001c86:	4413      	add	r3, r2
 8001c88:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001c8a:	6822      	ldr	r2, [r4, #0]
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <LL_TIM_OC_DisableFast+0x80>)
 8001c90:	5c5b      	ldrb	r3, [r3, r1]
 8001c92:	4619      	mov	r1, r3
 8001c94:	2304      	movs	r3, #4
 8001c96:	408b      	lsls	r3, r1
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	6023      	str	r3, [r4, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bcb0      	pop	{r4, r5, r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	08007194 	.word	0x08007194
 8001cac:	0800719c 	.word	0x0800719c

08001cb0 <LL_TIM_OC_EnablePreload>:
{
 8001cb0:	b4b0      	push	{r4, r5, r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d01c      	beq.n	8001cfa <LL_TIM_OC_EnablePreload+0x4a>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d017      	beq.n	8001cf6 <LL_TIM_OC_EnablePreload+0x46>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d012      	beq.n	8001cf2 <LL_TIM_OC_EnablePreload+0x42>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d00d      	beq.n	8001cee <LL_TIM_OC_EnablePreload+0x3e>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d007      	beq.n	8001cea <LL_TIM_OC_EnablePreload+0x3a>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce0:	d101      	bne.n	8001ce6 <LL_TIM_OC_EnablePreload+0x36>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e00a      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e008      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3318      	adds	r3, #24
 8001d02:	461a      	mov	r2, r3
 8001d04:	4629      	mov	r1, r5
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <LL_TIM_OC_EnablePreload+0x7c>)
 8001d08:	5c5b      	ldrb	r3, [r3, r1]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	4629      	mov	r1, r5
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <LL_TIM_OC_EnablePreload+0x80>)
 8001d14:	5c5b      	ldrb	r3, [r3, r1]
 8001d16:	4619      	mov	r1, r3
 8001d18:	2308      	movs	r3, #8
 8001d1a:	408b      	lsls	r3, r1
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	6023      	str	r3, [r4, #0]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bcb0      	pop	{r4, r5, r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	08007194 	.word	0x08007194
 8001d30:	0800719c 	.word	0x0800719c

08001d34 <LL_TIM_OC_DisablePreload>:
{
 8001d34:	b4b0      	push	{r4, r5, r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d01c      	beq.n	8001d7e <LL_TIM_OC_DisablePreload+0x4a>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d017      	beq.n	8001d7a <LL_TIM_OC_DisablePreload+0x46>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d012      	beq.n	8001d76 <LL_TIM_OC_DisablePreload+0x42>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d00d      	beq.n	8001d72 <LL_TIM_OC_DisablePreload+0x3e>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d007      	beq.n	8001d6e <LL_TIM_OC_DisablePreload+0x3a>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	d101      	bne.n	8001d6a <LL_TIM_OC_DisablePreload+0x36>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e00a      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	e008      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e006      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3318      	adds	r3, #24
 8001d86:	461a      	mov	r2, r3
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <LL_TIM_OC_DisablePreload+0x7c>)
 8001d8c:	5c5b      	ldrb	r3, [r3, r1]
 8001d8e:	4413      	add	r3, r2
 8001d90:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	4629      	mov	r1, r5
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <LL_TIM_OC_DisablePreload+0x80>)
 8001d98:	5c5b      	ldrb	r3, [r3, r1]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	408b      	lsls	r3, r1
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4013      	ands	r3, r2
 8001da4:	6023      	str	r3, [r4, #0]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bcb0      	pop	{r4, r5, r7}
 8001dae:	4770      	bx	lr
 8001db0:	08007194 	.word	0x08007194
 8001db4:	0800719c 	.word	0x0800719c

08001db8 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001db8:	b4b0      	push	{r4, r5, r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d01c      	beq.n	8001e04 <LL_TIM_IC_SetActiveInput+0x4c>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d017      	beq.n	8001e00 <LL_TIM_IC_SetActiveInput+0x48>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d012      	beq.n	8001dfc <LL_TIM_IC_SetActiveInput+0x44>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d00d      	beq.n	8001df8 <LL_TIM_IC_SetActiveInput+0x40>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de2:	d007      	beq.n	8001df4 <LL_TIM_IC_SetActiveInput+0x3c>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d101      	bne.n	8001df0 <LL_TIM_IC_SetActiveInput+0x38>
 8001dec:	2305      	movs	r3, #5
 8001dee:	e00a      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df0:	2306      	movs	r3, #6
 8001df2:	e008      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df4:	2304      	movs	r3, #4
 8001df6:	e006      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e004      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e002      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001e04:	2300      	movs	r3, #0
 8001e06:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001e12:	5c5b      	ldrb	r3, [r3, r1]
 8001e14:	4413      	add	r3, r2
 8001e16:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <LL_TIM_IC_SetActiveInput+0x90>)
 8001e1e:	5c5b      	ldrb	r3, [r3, r1]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2303      	movs	r3, #3
 8001e24:	408b      	lsls	r3, r1
 8001e26:	43db      	mvns	r3, r3
 8001e28:	401a      	ands	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	4628      	mov	r0, r5
 8001e30:	4905      	ldr	r1, [pc, #20]	; (8001e48 <LL_TIM_IC_SetActiveInput+0x90>)
 8001e32:	5c09      	ldrb	r1, [r1, r0]
 8001e34:	408b      	lsls	r3, r1
 8001e36:	4313      	orrs	r3, r2
 8001e38:	6023      	str	r3, [r4, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bcb0      	pop	{r4, r5, r7}
 8001e42:	4770      	bx	lr
 8001e44:	08007194 	.word	0x08007194
 8001e48:	080071a4 	.word	0x080071a4

08001e4c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001e4c:	b4b0      	push	{r4, r5, r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d01c      	beq.n	8001e98 <LL_TIM_IC_SetPrescaler+0x4c>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d017      	beq.n	8001e94 <LL_TIM_IC_SetPrescaler+0x48>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d012      	beq.n	8001e90 <LL_TIM_IC_SetPrescaler+0x44>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d00d      	beq.n	8001e8c <LL_TIM_IC_SetPrescaler+0x40>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d007      	beq.n	8001e88 <LL_TIM_IC_SetPrescaler+0x3c>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d101      	bne.n	8001e84 <LL_TIM_IC_SetPrescaler+0x38>
 8001e80:	2305      	movs	r3, #5
 8001e82:	e00a      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e84:	2306      	movs	r3, #6
 8001e86:	e008      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e006      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e004      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001ea6:	5c5b      	ldrb	r3, [r3, r1]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001eac:	6822      	ldr	r2, [r4, #0]
 8001eae:	4629      	mov	r1, r5
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <LL_TIM_IC_SetPrescaler+0x90>)
 8001eb2:	5c5b      	ldrb	r3, [r3, r1]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	408b      	lsls	r3, r1
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	4905      	ldr	r1, [pc, #20]	; (8001edc <LL_TIM_IC_SetPrescaler+0x90>)
 8001ec6:	5c09      	ldrb	r1, [r1, r0]
 8001ec8:	408b      	lsls	r3, r1
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	6023      	str	r3, [r4, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bcb0      	pop	{r4, r5, r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	08007194 	.word	0x08007194
 8001edc:	080071a4 	.word	0x080071a4

08001ee0 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001ee0:	b4b0      	push	{r4, r5, r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d01c      	beq.n	8001f2c <LL_TIM_IC_SetFilter+0x4c>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d017      	beq.n	8001f28 <LL_TIM_IC_SetFilter+0x48>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d012      	beq.n	8001f24 <LL_TIM_IC_SetFilter+0x44>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b40      	cmp	r3, #64	; 0x40
 8001f02:	d00d      	beq.n	8001f20 <LL_TIM_IC_SetFilter+0x40>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	d007      	beq.n	8001f1c <LL_TIM_IC_SetFilter+0x3c>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f12:	d101      	bne.n	8001f18 <LL_TIM_IC_SetFilter+0x38>
 8001f14:	2305      	movs	r3, #5
 8001f16:	e00a      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f18:	2306      	movs	r3, #6
 8001f1a:	e008      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e006      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e004      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e002      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3318      	adds	r3, #24
 8001f34:	461a      	mov	r2, r3
 8001f36:	4629      	mov	r1, r5
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <LL_TIM_IC_SetFilter+0x8c>)
 8001f3a:	5c5b      	ldrb	r3, [r3, r1]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	4629      	mov	r1, r5
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <LL_TIM_IC_SetFilter+0x90>)
 8001f46:	5c5b      	ldrb	r3, [r3, r1]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	23f0      	movs	r3, #240	; 0xf0
 8001f4c:	408b      	lsls	r3, r1
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	4628      	mov	r0, r5
 8001f58:	4905      	ldr	r1, [pc, #20]	; (8001f70 <LL_TIM_IC_SetFilter+0x90>)
 8001f5a:	5c09      	ldrb	r1, [r1, r0]
 8001f5c:	408b      	lsls	r3, r1
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	6023      	str	r3, [r4, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bcb0      	pop	{r4, r5, r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	08007194 	.word	0x08007194
 8001f70:	080071a4 	.word	0x080071a4

08001f74 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001f74:	b490      	push	{r4, r7}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d01c      	beq.n	8001fc0 <LL_TIM_IC_SetPolarity+0x4c>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d017      	beq.n	8001fbc <LL_TIM_IC_SetPolarity+0x48>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d012      	beq.n	8001fb8 <LL_TIM_IC_SetPolarity+0x44>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d00d      	beq.n	8001fb4 <LL_TIM_IC_SetPolarity+0x40>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f9e:	d007      	beq.n	8001fb0 <LL_TIM_IC_SetPolarity+0x3c>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa6:	d101      	bne.n	8001fac <LL_TIM_IC_SetPolarity+0x38>
 8001fa8:	2305      	movs	r3, #5
 8001faa:	e00a      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fac:	2306      	movs	r3, #6
 8001fae:	e008      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e006      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e004      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	4621      	mov	r1, r4
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <LL_TIM_IC_SetPolarity+0x80>)
 8001fcc:	5c5b      	ldrb	r3, [r3, r1]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	408b      	lsls	r3, r1
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	4621      	mov	r1, r4
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <LL_TIM_IC_SetPolarity+0x80>)
 8001fdc:	5c5b      	ldrb	r3, [r3, r1]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	408b      	lsls	r3, r1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc90      	pop	{r4, r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	080071ac 	.word	0x080071ac

08001ff8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200a:	f023 0307 	bic.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	605a      	str	r2, [r3, #4]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f06f 0201 	mvn.w	r2, #1
 80020b2:	611a      	str	r2, [r3, #16]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f06f 0202 	mvn.w	r2, #2
 80020cc:	611a      	str	r2, [r3, #16]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f043 0202 	orr.w	r2, r3, #2
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60da      	str	r2, [r3, #12]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr

08002114 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	615a      	str	r2, [r3, #20]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	2b40      	cmp	r3, #64	; 0x40
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <LL_GPIO_SetPinMode>:
{
 800219c:	b490      	push	{r4, r7}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	0e1b      	lsrs	r3, r3, #24
 80021b0:	4413      	add	r3, r2
 80021b2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80021b4:	6822      	ldr	r2, [r4, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	613b      	str	r3, [r7, #16]
  return result;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	210f      	movs	r1, #15
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	401a      	ands	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	61bb      	str	r3, [r7, #24]
  return result;
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	6023      	str	r3, [r4, #0]
}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc90      	pop	{r4, r7}
 80021fe:	4770      	bx	lr

08002200 <LL_GPIO_ResetOutputPin>:
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	b29a      	uxth	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	615a      	str	r2, [r3, #20]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800222a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800222e:	f043 0302 	orr.w	r3, r3, #2
 8002232:	6053      	str	r3, [r2, #4]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40010000 	.word	0x40010000

08002240 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a04      	ldr	r2, [pc, #16]	; (800225c <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 800224a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6053      	str	r3, [r2, #4]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40010000 	.word	0x40010000

08002260 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 800226a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800226e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002272:	6053      	str	r3, [r2, #4]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	40010000 	.word	0x40010000

08002280 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800228c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8002292:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002296:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800229a:	6053      	str	r3, [r2, #4]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	40010000 	.word	0x40010000

080022a8 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a06      	ldr	r2, [pc, #24]	; (80022cc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022b6:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a03      	ldr	r2, [pc, #12]	; (80022cc <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c2:	6053      	str	r3, [r2, #4]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40010000 	.word	0x40010000

080022d0 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80022da:	4a13      	ldr	r2, [pc, #76]	; (8002328 <LL_GPIO_AF_SetEXTISource+0x58>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	43db      	mvns	r3, r3
 80022ec:	ea02 0103 	and.w	r1, r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	0c1b      	lsrs	r3, r3, #16
 80022f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	60bb      	str	r3, [r7, #8]
  return result;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	fa03 f202 	lsl.w	r2, r3, r2
 800230e:	4806      	ldr	r0, [pc, #24]	; (8002328 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	430a      	orrs	r2, r1
 8002316:	3302      	adds	r3, #2
 8002318:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000

0800232c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  while (LL_USART_IsActiveFlag_TC(USART1) == 0)
 8002334:	bf00      	nop
 8002336:	4808      	ldr	r0, [pc, #32]	; (8002358 <__io_putchar+0x2c>)
 8002338:	f7ff ff10 	bl	800215c <LL_USART_IsActiveFlag_TC>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f9      	beq.n	8002336 <__io_putchar+0xa>
  {
  }
  LL_USART_TransmitData8(USART1, (uint8_t)ch);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <__io_putchar+0x2c>)
 800234a:	f7ff ff19 	bl	8002180 <LL_USART_TransmitData8>

  return ch;
 800234e:	687b      	ldr	r3, [r7, #4]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40013800 	.word	0x40013800

0800235c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8002360:	2001      	movs	r0, #1
 8002362:	f7ff fbff 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002366:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800236a:	f7ff fbe3 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236e:	2003      	movs	r0, #3
 8002370:	f7fe ffda 	bl	8001328 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002374:	f7fe fffc 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002378:	4603      	mov	r3, r0
 800237a:	2200      	movs	r2, #0
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f84a 	bl	8001418 <NVIC_EncodePriority>
 8002384:	4603      	mov	r3, r0
 8002386:	4619      	mov	r1, r3
 8002388:	f06f 000b 	mvn.w	r0, #11
 800238c:	f7ff f81a 	bl	80013c4 <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002390:	f7fe ffee 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002394:	4603      	mov	r3, r0
 8002396:	2200      	movs	r2, #0
 8002398:	2101      	movs	r1, #1
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f83c 	bl	8001418 <NVIC_EncodePriority>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4619      	mov	r1, r3
 80023a4:	f06f 000a 	mvn.w	r0, #10
 80023a8:	f7ff f80c 	bl	80013c4 <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023ac:	f7fe ffe0 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f82e 	bl	8001418 <NVIC_EncodePriority>
 80023bc:	4603      	mov	r3, r0
 80023be:	4619      	mov	r1, r3
 80023c0:	f06f 0009 	mvn.w	r0, #9
 80023c4:	f7fe fffe 	bl	80013c4 <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023c8:	f7fe ffd2 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2200      	movs	r2, #0
 80023d0:	2101      	movs	r1, #1
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f820 	bl	8001418 <NVIC_EncodePriority>
 80023d8:	4603      	mov	r3, r0
 80023da:	4619      	mov	r1, r3
 80023dc:	f06f 0004 	mvn.w	r0, #4
 80023e0:	f7fe fff0 	bl	80013c4 <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023e4:	f7fe ffc4 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2200      	movs	r2, #0
 80023ec:	2101      	movs	r1, #1
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f812 	bl	8001418 <NVIC_EncodePriority>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4619      	mov	r1, r3
 80023f8:	f06f 0003 	mvn.w	r0, #3
 80023fc:	f7fe ffe2 	bl	80013c4 <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002400:	f7fe ffb6 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002404:	4603      	mov	r3, r0
 8002406:	2200      	movs	r2, #0
 8002408:	2101      	movs	r1, #1
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff f804 	bl	8001418 <NVIC_EncodePriority>
 8002410:	4603      	mov	r3, r0
 8002412:	4619      	mov	r1, r3
 8002414:	f06f 0001 	mvn.w	r0, #1
 8002418:	f7fe ffd4 	bl	80013c4 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800241c:	f7fe ffa8 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002420:	4603      	mov	r3, r0
 8002422:	2200      	movs	r2, #0
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fff6 	bl	8001418 <NVIC_EncodePriority>
 800242c:	4603      	mov	r3, r0
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f7fe ffc6 	bl	80013c4 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8002438:	f7ff ff36 	bl	80022a8 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <main+0x160>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6858      	ldr	r0, [r3, #4]
 8002442:	2300      	movs	r3, #0
 8002444:	2202      	movs	r2, #2
 8002446:	2100      	movs	r1, #0
 8002448:	f002 fe9a 	bl	8005180 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800244c:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <main+0x160>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6898      	ldr	r0, [r3, #8]
 8002452:	2300      	movs	r3, #0
 8002454:	2202      	movs	r2, #2
 8002456:	2100      	movs	r1, #0
 8002458:	f002 fe92 	bl	8005180 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <main+0x160>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68d8      	ldr	r0, [r3, #12]
 8002462:	2300      	movs	r3, #0
 8002464:	2202      	movs	r2, #2
 8002466:	2100      	movs	r1, #0
 8002468:	f002 fe8a 	bl	8005180 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800246c:	f000 f828 	bl	80024c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002470:	f000 fcc6 	bl	8002e00 <MX_GPIO_Init>
  MX_DMA_Init();
 8002474:	f000 fcac 	bl	8002dd0 <MX_DMA_Init>
  MX_TIM1_Init();
 8002478:	f000 f9d4 	bl	8002824 <MX_TIM1_Init>
  MX_ADC1_Init();
 800247c:	f000 f862 	bl	8002544 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002480:	f000 f976 	bl	8002770 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002484:	f000 fc4c 	bl	8002d20 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002488:	f000 fa82 	bl	8002990 <MX_TIM2_Init>
  MX_TIM3_Init();
 800248c:	f000 fb30 	bl	8002af0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002490:	f000 fbbe 	bl	8002c10 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 8002494:	f7fe fe84 	bl	80011a0 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 8002498:	f7fe fe8c 	bl	80011b4 <MotorR_EnablePWM>
  MotorL_SetPWM(0);
 800249c:	2000      	movs	r0, #0
 800249e:	f7fe fe95 	bl	80011cc <MotorL_SetPWM>
  MotorR_SetPWM(0);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f7fe feca 	bl	800123c <MotorR_SetPWM>
  Servo_SetAngle(0);
 80024a8:	f04f 0000 	mov.w	r0, #0
 80024ac:	f7fe fefe 	bl	80012ac <Servo_SetAngle>

  //  uint32_t Count = LL_TIM_GetCounter(TIM2);

  while (1)
  {
    Sensor_Convert_A2D();
 80024b0:	f000 fd84 	bl	8002fbc <Sensor_Convert_A2D>
//    LL_GPIO_TogglePin(Debug_GPIO_GPIO_Port, Debug_GPIO_Pin);
#if NormalRun == 0
    BTN_Process();
 80024b4:	f000 fdd4 	bl	8003060 <BTN_Process>
    Sensor_Convert_A2D();
 80024b8:	e7fa      	b.n	80024b0 <main+0x154>
 80024ba:	bf00      	nop
 80024bc:	20000014 	.word	0x20000014

080024c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80024c4:	2002      	movs	r0, #2
 80024c6:	f7ff fb65 	bl	8001b94 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80024ca:	bf00      	nop
 80024cc:	f7ff fb76 	bl	8001bbc <LL_FLASH_GetLatency>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d1fa      	bne.n	80024cc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80024d6:	f7ff fa4d 	bl	8001974 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80024da:	bf00      	nop
 80024dc:	f7ff fa58 	bl	8001990 <LL_RCC_HSE_IsReady>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d1fa      	bne.n	80024dc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80024e6:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80024ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80024ee:	f7ff faf1 	bl	8001ad4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80024f2:	f7ff facf 	bl	8001a94 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80024f6:	bf00      	nop
 80024f8:	f7ff fada 	bl	8001ab0 <LL_RCC_PLL_IsReady>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d1fa      	bne.n	80024f8 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002502:	2000      	movs	r0, #0
 8002504:	f7ff fa76 	bl	80019f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002508:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800250c:	f7ff fa86 	bl	8001a1c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff fa97 	bl	8001a44 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002516:	2002      	movs	r0, #2
 8002518:	f7ff fa4c 	bl	80019b4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800251c:	bf00      	nop
 800251e:	f7ff fa5d 	bl	80019dc <LL_RCC_GetSysClkSource>
 8002522:	4603      	mov	r3, r0
 8002524:	2b08      	cmp	r3, #8
 8002526:	d1fa      	bne.n	800251e <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <SystemClock_Config+0x80>)
 800252a:	f002 f959 	bl	80047e0 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 800252e:	4804      	ldr	r0, [pc, #16]	; (8002540 <SystemClock_Config+0x80>)
 8002530:	f002 f964 	bl	80047fc <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8002534:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002538:	f7ff fa98 	bl	8001a6c <LL_RCC_SetADCClockSource>
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	044aa200 	.word	0x044aa200

08002544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08e      	sub	sp, #56	; 0x38
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800254a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002554:	2300      	movs	r3, #0
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002576:	f44f 7000 	mov.w	r0, #512	; 0x200
 800257a:	f7ff faf3 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800257e:	2004      	movs	r0, #4
 8002580:	f7ff faf0 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 8002584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002588:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	4619      	mov	r1, r3
 8002592:	486b      	ldr	r0, [pc, #428]	; (8002740 <MX_ADC1_Init+0x1fc>)
 8002594:	f001 fab6 	bl	8003b04 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002598:	2200      	movs	r2, #0
 800259a:	2101      	movs	r1, #1
 800259c:	4869      	ldr	r0, [pc, #420]	; (8002744 <MX_ADC1_Init+0x200>)
 800259e:	f7ff f859 	bl	8001654 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 80025a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025a6:	2101      	movs	r1, #1
 80025a8:	4866      	ldr	r0, [pc, #408]	; (8002744 <MX_ADC1_Init+0x200>)
 80025aa:	f7ff f921 	bl	80017f0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80025ae:	2220      	movs	r2, #32
 80025b0:	2101      	movs	r1, #1
 80025b2:	4864      	ldr	r0, [pc, #400]	; (8002744 <MX_ADC1_Init+0x200>)
 80025b4:	f7ff f872 	bl	800169c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2101      	movs	r1, #1
 80025bc:	4861      	ldr	r0, [pc, #388]	; (8002744 <MX_ADC1_Init+0x200>)
 80025be:	f7ff f88f 	bl	80016e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	2101      	movs	r1, #1
 80025c6:	485f      	ldr	r0, [pc, #380]	; (8002744 <MX_ADC1_Init+0x200>)
 80025c8:	f7ff f8ac 	bl	8001724 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80025cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d0:	2101      	movs	r1, #1
 80025d2:	485c      	ldr	r0, [pc, #368]	; (8002744 <MX_ADC1_Init+0x200>)
 80025d4:	f7ff f8c8 	bl	8001768 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80025d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025dc:	2101      	movs	r1, #1
 80025de:	4859      	ldr	r0, [pc, #356]	; (8002744 <MX_ADC1_Init+0x200>)
 80025e0:	f7ff f8e4 	bl	80017ac <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 8);
 80025e4:	2208      	movs	r2, #8
 80025e6:	2101      	movs	r1, #1
 80025e8:	4856      	ldr	r0, [pc, #344]	; (8002744 <MX_ADC1_Init+0x200>)
 80025ea:	f7ff f923 	bl	8001834 <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t)&Sensor_ADC_Value);
 80025ee:	4b56      	ldr	r3, [pc, #344]	; (8002748 <MX_ADC1_Init+0x204>)
 80025f0:	461a      	mov	r2, r3
 80025f2:	2101      	movs	r1, #1
 80025f4:	4853      	ldr	r0, [pc, #332]	; (8002744 <MX_ADC1_Init+0x200>)
 80025f6:	f7ff f93f 	bl	8001878 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, ADC1_DR_Address);
 80025fa:	4a54      	ldr	r2, [pc, #336]	; (800274c <MX_ADC1_Init+0x208>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	4851      	ldr	r0, [pc, #324]	; (8002744 <MX_ADC1_Init+0x200>)
 8002600:	f7ff f952 	bl	80018a8 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002604:	2101      	movs	r1, #1
 8002606:	484f      	ldr	r0, [pc, #316]	; (8002744 <MX_ADC1_Init+0x200>)
 8002608:	f7ff f806 	bl	8001618 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800260c:	2300      	movs	r3, #0
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800261a:	4619      	mov	r1, r3
 800261c:	484c      	ldr	r0, [pc, #304]	; (8002750 <MX_ADC1_Init+0x20c>)
 800261e:	f001 f83f 	bl	80036a0 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262a:	4619      	mov	r1, r3
 800262c:	4848      	ldr	r0, [pc, #288]	; (8002750 <MX_ADC1_Init+0x20c>)
 800262e:	f001 f805 	bl	800363c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002632:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8002636:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8002638:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800263c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002642:	2302      	movs	r3, #2
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800264c:	f107 0318 	add.w	r3, r7, #24
 8002650:	4619      	mov	r1, r3
 8002652:	483f      	ldr	r0, [pc, #252]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002654:	f001 f84b 	bl	80036ee <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8002658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002660:	483b      	ldr	r0, [pc, #236]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002662:	f7fe ff0b 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002666:	2200      	movs	r2, #0
 8002668:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800266c:	4838      	ldr	r0, [pc, #224]	; (8002750 <MX_ADC1_Init+0x20c>)
 800266e:	f7fe ff4a 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 8002672:	4a38      	ldr	r2, [pc, #224]	; (8002754 <MX_ADC1_Init+0x210>)
 8002674:	f240 2105 	movw	r1, #517	; 0x205
 8002678:	4835      	ldr	r0, [pc, #212]	; (8002750 <MX_ADC1_Init+0x20c>)
 800267a:	f7fe feff 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 800267e:	2200      	movs	r2, #0
 8002680:	4934      	ldr	r1, [pc, #208]	; (8002754 <MX_ADC1_Init+0x210>)
 8002682:	4833      	ldr	r0, [pc, #204]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002684:	f7fe ff3f 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 8002688:	4a33      	ldr	r2, [pc, #204]	; (8002758 <MX_ADC1_Init+0x214>)
 800268a:	f240 210a 	movw	r1, #522	; 0x20a
 800268e:	4830      	ldr	r0, [pc, #192]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002690:	f7fe fef4 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002694:	2200      	movs	r2, #0
 8002696:	4930      	ldr	r1, [pc, #192]	; (8002758 <MX_ADC1_Init+0x214>)
 8002698:	482d      	ldr	r0, [pc, #180]	; (8002750 <MX_ADC1_Init+0x20c>)
 800269a:	f7fe ff34 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 800269e:	4a2f      	ldr	r2, [pc, #188]	; (800275c <MX_ADC1_Init+0x218>)
 80026a0:	f240 210f 	movw	r1, #527	; 0x20f
 80026a4:	482a      	ldr	r0, [pc, #168]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026a6:	f7fe fee9 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80026aa:	2200      	movs	r2, #0
 80026ac:	492b      	ldr	r1, [pc, #172]	; (800275c <MX_ADC1_Init+0x218>)
 80026ae:	4828      	ldr	r0, [pc, #160]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026b0:	f7fe ff29 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 80026b4:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <MX_ADC1_Init+0x21c>)
 80026b6:	f44f 7105 	mov.w	r1, #532	; 0x214
 80026ba:	4825      	ldr	r0, [pc, #148]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026bc:	f7fe fede 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80026c0:	2200      	movs	r2, #0
 80026c2:	4927      	ldr	r1, [pc, #156]	; (8002760 <MX_ADC1_Init+0x21c>)
 80026c4:	4822      	ldr	r0, [pc, #136]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026c6:	f7fe ff1e 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 80026ca:	4a26      	ldr	r2, [pc, #152]	; (8002764 <MX_ADC1_Init+0x220>)
 80026cc:	f240 2119 	movw	r1, #537	; 0x219
 80026d0:	481f      	ldr	r0, [pc, #124]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026d2:	f7fe fed3 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80026d6:	2200      	movs	r2, #0
 80026d8:	4922      	ldr	r1, [pc, #136]	; (8002764 <MX_ADC1_Init+0x220>)
 80026da:	481d      	ldr	r0, [pc, #116]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026dc:	f7fe ff13 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 80026e0:	4a21      	ldr	r2, [pc, #132]	; (8002768 <MX_ADC1_Init+0x224>)
 80026e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e6:	481a      	ldr	r0, [pc, #104]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026e8:	f7fe fec8 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80026ec:	2200      	movs	r2, #0
 80026ee:	491e      	ldr	r1, [pc, #120]	; (8002768 <MX_ADC1_Init+0x224>)
 80026f0:	4817      	ldr	r0, [pc, #92]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026f2:	f7fe ff08 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <MX_ADC1_Init+0x228>)
 80026f8:	f240 1105 	movw	r1, #261	; 0x105
 80026fc:	4814      	ldr	r0, [pc, #80]	; (8002750 <MX_ADC1_Init+0x20c>)
 80026fe:	f7fe febd 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8002702:	2200      	movs	r2, #0
 8002704:	4919      	ldr	r1, [pc, #100]	; (800276c <MX_ADC1_Init+0x228>)
 8002706:	4812      	ldr	r0, [pc, #72]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002708:	f7fe fefd 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 800270c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002710:	480f      	ldr	r0, [pc, #60]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002712:	f7fe fee6 	bl	80014e2 <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 8002716:	480e      	ldr	r0, [pc, #56]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002718:	f7fe ff3e 	bl	8001598 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <MX_ADC1_Init+0x20c>)
 800271e:	f7fe ff4a 	bl	80015b6 <LL_ADC_StartCalibration>

  /* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while (LL_ADC_IsCalibrationOnGoing(ADC1))
 8002722:	bf00      	nop
 8002724:	480a      	ldr	r0, [pc, #40]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002726:	f7fe ff55 	bl	80015d4 <LL_ADC_IsCalibrationOnGoing>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <MX_ADC1_Init+0x1e0>
    ;

  /* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart(ADC1);
 8002730:	4807      	ldr	r0, [pc, #28]	; (8002750 <MX_ADC1_Init+0x20c>)
 8002732:	f7fe ff61 	bl	80015f8 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	3738      	adds	r7, #56	; 0x38
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40010800 	.word	0x40010800
 8002744:	40020000 	.word	0x40020000
 8002748:	20000220 	.word	0x20000220
 800274c:	4001244c 	.word	0x4001244c
 8002750:	40012400 	.word	0x40012400
 8002754:	02300001 	.word	0x02300001
 8002758:	02600002 	.word	0x02600002
 800275c:	02900003 	.word	0x02900003
 8002760:	02c00004 	.word	0x02c00004
 8002764:	02f00005 	.word	0x02f00005
 8002768:	03200006 	.word	0x03200006
 800276c:	03500007 	.word	0x03500007

08002770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002776:	f107 0318 	add.w	r3, r7, #24
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002796:	2008      	movs	r0, #8
 8002798:	f7ff f9e4 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <MX_I2C1_Init+0xa4>)
 800279e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027a0:	2309      	movs	r3, #9
 80027a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80027a8:	2304      	movs	r3, #4
 80027aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	4619      	mov	r1, r3
 80027b0:	4819      	ldr	r0, [pc, #100]	; (8002818 <MX_I2C1_Init+0xa8>)
 80027b2:	f001 f9a7 	bl	8003b04 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 80027b6:	f7ff fd33 	bl	8002220 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80027ba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80027be:	f7ff f9b9 	bl	8001b34 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80027c2:	4816      	ldr	r0, [pc, #88]	; (800281c <MX_I2C1_Init+0xac>)
 80027c4:	f7ff f8c7 	bl	8001956 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80027c8:	4814      	ldr	r0, [pc, #80]	; (800281c <MX_I2C1_Init+0xac>)
 80027ca:	f7ff f8a3 	bl	8001914 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80027ce:	4813      	ldr	r0, [pc, #76]	; (800281c <MX_I2C1_Init+0xac>)
 80027d0:	f7ff f891 	bl	80018f6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <MX_I2C1_Init+0xb0>)
 80027da:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80027e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80027ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80027f0:	f107 0318 	add.w	r3, r7, #24
 80027f4:	4619      	mov	r1, r3
 80027f6:	4809      	ldr	r0, [pc, #36]	; (800281c <MX_I2C1_Init+0xac>)
 80027f8:	f001 fad0 	bl	8003d9c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80027fc:	2100      	movs	r1, #0
 80027fe:	4807      	ldr	r0, [pc, #28]	; (800281c <MX_I2C1_Init+0xac>)
 8002800:	f7ff f897 	bl	8001932 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <MX_I2C1_Init+0xac>)
 8002806:	f7ff f867 	bl	80018d8 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 800280a:	bf00      	nop
 800280c:	3730      	adds	r7, #48	; 0x30
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	04030003 	.word	0x04030003
 8002818:	40010c00 	.word	0x40010c00
 800281c:	40005400 	.word	0x40005400
 8002820:	000186a0 	.word	0x000186a0

08002824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b098      	sub	sp, #96	; 0x60
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800282a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800283a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283e:	2220      	movs	r2, #32
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f002 f82c 	bl	80048a0 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
 8002858:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285a:	463b      	mov	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002868:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800286c:	f7ff f97a 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002876:	2300      	movs	r3, #0
 8002878:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 800287a:	f641 431f 	movw	r3, #7199	; 0x1c1f
 800287e:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002880:	2300      	movs	r3, #0
 8002882:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800288a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800288e:	4619      	mov	r1, r3
 8002890:	483c      	ldr	r0, [pc, #240]	; (8002984 <MX_TIM1_Init+0x160>)
 8002892:	f001 fc2b 	bl	80040ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002896:	483b      	ldr	r0, [pc, #236]	; (8002984 <MX_TIM1_Init+0x160>)
 8002898:	f7ff f9ab 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 800289c:	2101      	movs	r1, #1
 800289e:	4839      	ldr	r0, [pc, #228]	; (8002984 <MX_TIM1_Init+0x160>)
 80028a0:	f7ff fa06 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80028a4:	2360      	movs	r3, #96	; 0x60
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80028b4:	2300      	movs	r3, #0
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 80028b8:	2300      	movs	r3, #0
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80028c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c8:	461a      	mov	r2, r3
 80028ca:	2101      	movs	r1, #1
 80028cc:	482d      	ldr	r0, [pc, #180]	; (8002984 <MX_TIM1_Init+0x160>)
 80028ce:	f001 fc6b 	bl	80041a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80028d2:	2101      	movs	r1, #1
 80028d4:	482b      	ldr	r0, [pc, #172]	; (8002984 <MX_TIM1_Init+0x160>)
 80028d6:	f7ff f9a9 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 80028da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028de:	4829      	ldr	r0, [pc, #164]	; (8002984 <MX_TIM1_Init+0x160>)
 80028e0:	f7ff f9e6 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80028ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f0:	461a      	mov	r2, r3
 80028f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f6:	4823      	ldr	r0, [pc, #140]	; (8002984 <MX_TIM1_Init+0x160>)
 80028f8:	f001 fc56 	bl	80041a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 80028fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002900:	4820      	ldr	r0, [pc, #128]	; (8002984 <MX_TIM1_Init+0x160>)
 8002902:	f7ff f993 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002906:	2100      	movs	r1, #0
 8002908:	481e      	ldr	r0, [pc, #120]	; (8002984 <MX_TIM1_Init+0x160>)
 800290a:	f7ff fb9b 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800290e:	481d      	ldr	r0, [pc, #116]	; (8002984 <MX_TIM1_Init+0x160>)
 8002910:	f7ff fbaa 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800292a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4812      	ldr	r0, [pc, #72]	; (8002984 <MX_TIM1_Init+0x160>)
 800293c:	f001 fc6c 	bl	8004218 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8002940:	4810      	ldr	r0, [pc, #64]	; (8002984 <MX_TIM1_Init+0x160>)
 8002942:	f7ff fbc9 	bl	80020d8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM1, 0);
 8002946:	2100      	movs	r1, #0
 8002948:	480e      	ldr	r0, [pc, #56]	; (8002984 <MX_TIM1_Init+0x160>)
 800294a:	f7ff f961 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 800294e:	480d      	ldr	r0, [pc, #52]	; (8002984 <MX_TIM1_Init+0x160>)
 8002950:	f7ff fb99 	bl	8002086 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8002954:	480b      	ldr	r0, [pc, #44]	; (8002984 <MX_TIM1_Init+0x160>)
 8002956:	f7ff f93d 	bl	8001bd4 <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800295a:	2004      	movs	r0, #4
 800295c:	f7ff f902 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_TIM1_Init+0x164>)
 8002962:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002964:	2309      	movs	r3, #9
 8002966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	463b      	mov	r3, r7
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_TIM1_Init+0x168>)
 8002976:	f001 f8c5 	bl	8003b04 <LL_GPIO_Init>

}
 800297a:	bf00      	nop
 800297c:	3760      	adds	r7, #96	; 0x60
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00
 8002988:	04050005 	.word	0x04050005
 800298c:	40010800 	.word	0x40010800

08002990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	463b      	mov	r3, r7
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80029b4:	2001      	movs	r0, #1
 80029b6:	f7ff f8bd 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80029ba:	2004      	movs	r0, #4
 80029bc:	f7ff f8d2 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80029c0:	2008      	movs	r0, #8
 80029c2:	f7ff f8cf 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <MX_TIM2_Init+0x154>)
 80029c8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80029ca:	2304      	movs	r3, #4
 80029cc:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	463b      	mov	r3, r7
 80029d0:	4619      	mov	r1, r3
 80029d2:	4845      	ldr	r0, [pc, #276]	; (8002ae8 <MX_TIM2_Init+0x158>)
 80029d4:	f001 f896 	bl	8003b04 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80029d8:	f640 0308 	movw	r3, #2056	; 0x808
 80029dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80029de:	2304      	movs	r3, #4
 80029e0:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e2:	463b      	mov	r3, r7
 80029e4:	4619      	mov	r1, r3
 80029e6:	4841      	ldr	r0, [pc, #260]	; (8002aec <MX_TIM2_Init+0x15c>)
 80029e8:	f001 f88c 	bl	8003b04 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80029ec:	f7fe fcc0 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2200      	movs	r2, #0
 80029f4:	2102      	movs	r1, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe fd0e 	bl	8001418 <NVIC_EncodePriority>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4619      	mov	r1, r3
 8002a00:	201c      	movs	r0, #28
 8002a02:	f7fe fcdf 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002a06:	201c      	movs	r0, #28
 8002a08:	f7fe fcc0 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8002a0c:	f7ff fc28 	bl	8002260 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8002a10:	2103      	movs	r1, #3
 8002a12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a16:	f7ff fb03 	bl	8002020 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002a1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a1e:	2101      	movs	r1, #1
 8002a20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a24:	f7ff f9c8 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a30:	f7ff fa0c 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2101      	movs	r1, #1
 8002a38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a3c:	f7ff fa50 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2101      	movs	r1, #1
 8002a44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a48:	f7ff fa94 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002a4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a50:	2110      	movs	r1, #16
 8002a52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a56:	f7ff f9af 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a62:	f7ff f9f3 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2110      	movs	r1, #16
 8002a6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a6e:	f7ff fa37 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2110      	movs	r1, #16
 8002a76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a7a:	f7ff fa7b 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8a:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a9a:	f001 fb27 	bl	80040ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002a9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002aa2:	f7ff f8a6 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002aac:	f7ff faca 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002ab0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ab4:	f7ff fad8 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  //  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
  //  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2, 0);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002abe:	f7ff f8a7 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 8002ac2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ac6:	f7ff faed 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8002aca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ace:	f7ff fb03 	bl	80020d8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8002ad2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ad6:	f7ff f87d 	bl	8001bd4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	; 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	04800080 	.word	0x04800080
 8002ae8:	40010800 	.word	0x40010800
 8002aec:	40010c00 	.word	0x40010c00

08002af0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
 8002b04:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b06:	463b      	mov	r3, r7
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002b14:	2002      	movs	r0, #2
 8002b16:	f7ff f80d 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002b1a:	2008      	movs	r0, #8
 8002b1c:	f7ff f822 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002b20:	f243 0330 	movw	r3, #12336	; 0x3030
 8002b24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002b26:	2304      	movs	r3, #4
 8002b28:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4836      	ldr	r0, [pc, #216]	; (8002c08 <MX_TIM3_Init+0x118>)
 8002b30:	f000 ffe8 	bl	8003b04 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002b34:	f7fe fc1c 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fc6a 	bl	8001418 <NVIC_EncodePriority>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4619      	mov	r1, r3
 8002b48:	201d      	movs	r0, #29
 8002b4a:	f7fe fc3b 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002b4e:	201d      	movs	r0, #29
 8002b50:	f7fe fc1c 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 8002b54:	f7ff fb94 	bl	8002280 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002b58:	2103      	movs	r1, #3
 8002b5a:	482c      	ldr	r0, [pc, #176]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002b5c:	f7ff fa60 	bl	8002020 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002b60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b64:	2101      	movs	r1, #1
 8002b66:	4829      	ldr	r0, [pc, #164]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002b68:	f7ff f926 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4826      	ldr	r0, [pc, #152]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002b72:	f7ff f96b 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4824      	ldr	r0, [pc, #144]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002b7c:	f7ff f9b0 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002b80:	2200      	movs	r2, #0
 8002b82:	2101      	movs	r1, #1
 8002b84:	4821      	ldr	r0, [pc, #132]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002b86:	f7ff f9f5 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b8e:	2110      	movs	r1, #16
 8002b90:	481e      	ldr	r0, [pc, #120]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002b92:	f7ff f911 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2110      	movs	r1, #16
 8002b9a:	481c      	ldr	r0, [pc, #112]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002b9c:	f7ff f956 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2110      	movs	r1, #16
 8002ba4:	4819      	ldr	r0, [pc, #100]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002ba6:	f7ff f99b 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2110      	movs	r1, #16
 8002bae:	4817      	ldr	r0, [pc, #92]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002bb0:	f7ff f9e0 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bc0:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	4619      	mov	r1, r3
 8002bcc:	480f      	ldr	r0, [pc, #60]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002bce:	f001 fa8d 	bl	80040ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002bd2:	480e      	ldr	r0, [pc, #56]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002bd4:	f7ff f80d 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002bd8:	2100      	movs	r1, #0
 8002bda:	480c      	ldr	r0, [pc, #48]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002bdc:	f7ff fa32 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002be0:	480a      	ldr	r0, [pc, #40]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002be2:	f7ff fa41 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3, 0);
 8002be6:	2100      	movs	r1, #0
 8002be8:	4808      	ldr	r0, [pc, #32]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002bea:	f7ff f811 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM3);
 8002bee:	4807      	ldr	r0, [pc, #28]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002bf0:	f7fe fff0 	bl	8001bd4 <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM3);
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002bf6:	f7ff fa55 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM3);
 8002bfa:	4804      	ldr	r0, [pc, #16]	; (8002c0c <MX_TIM3_Init+0x11c>)
 8002bfc:	f7ff fa6c 	bl	80020d8 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	3728      	adds	r7, #40	; 0x28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40010c00 	.word	0x40010c00
 8002c0c:	40000400 	.word	0x40000400

08002c10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08e      	sub	sp, #56	; 0x38
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	2220      	movs	r2, #32
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fe37 	bl	80048a0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002c32:	2004      	movs	r0, #4
 8002c34:	f7fe ff7e 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002c38:	f7fe fb9a 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fbe8 	bl	8001418 <NVIC_EncodePriority>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	201e      	movs	r0, #30
 8002c4e:	f7fe fbb9 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002c52:	201e      	movs	r0, #30
 8002c54:	f7fe fb9a 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 23;
 8002c58:	2317      	movs	r3, #23
 8002c5a:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 59999;
 8002c60:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002c66:	2300      	movs	r3, #0
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6e:	4619      	mov	r1, r3
 8002c70:	482a      	ldr	r0, [pc, #168]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002c72:	f001 fa3b 	bl	80040ec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002c76:	4829      	ldr	r0, [pc, #164]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002c78:	f7fe ffbb 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4827      	ldr	r0, [pc, #156]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002c80:	f7ff f9ba 	bl	8001ff8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002c84:	2101      	movs	r1, #1
 8002c86:	4825      	ldr	r0, [pc, #148]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002c88:	f7ff f812 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002c8c:	2360      	movs	r3, #96	; 0x60
 8002c8e:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 4500;
 8002c98:	f241 1394 	movw	r3, #4500	; 0x1194
 8002c9c:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002ca2:	1d3b      	adds	r3, r7, #4
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	481c      	ldr	r0, [pc, #112]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002caa:	f001 fa7d 	bl	80041a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8002cae:	2101      	movs	r1, #1
 8002cb0:	481a      	ldr	r0, [pc, #104]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002cb2:	f7fe ffbb 	bl	8001c2c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	2110      	movs	r1, #16
 8002cc8:	4814      	ldr	r0, [pc, #80]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002cca:	f001 fa6d 	bl	80041a8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8002cce:	2110      	movs	r1, #16
 8002cd0:	4812      	ldr	r0, [pc, #72]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002cd2:	f7fe ffab 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4810      	ldr	r0, [pc, #64]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002cda:	f7ff f9b3 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002cde:	480f      	ldr	r0, [pc, #60]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002ce0:	f7ff f9c2 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	480d      	ldr	r0, [pc, #52]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002ce8:	f7ff f824 	bl	8001d34 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM4_Init 2 */

  LL_TIM_EnableIT_UPDATE(TIM4);
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002cee:	f7ff f9f3 	bl	80020d8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM4);
 8002cf2:	480a      	ldr	r0, [pc, #40]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002cf4:	f7ff f9d6 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>

  LL_TIM_EnableIT_CC1(TIM4);
 8002cf8:	4808      	ldr	r0, [pc, #32]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002cfa:	f7ff f9fc 	bl	80020f6 <LL_TIM_EnableIT_CC1>
  LL_TIM_ClearFlag_CC1(TIM4);
 8002cfe:	4807      	ldr	r0, [pc, #28]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002d00:	f7ff f9dd 	bl	80020be <LL_TIM_ClearFlag_CC1>

//  LL_TIM_EnableIT_CC2(TIM4);
//  LL_TIM_ClearFlag_CC2(TIM4);

  LL_TIM_SetCounter(TIM4, 0);
 8002d04:	2100      	movs	r1, #0
 8002d06:	4805      	ldr	r0, [pc, #20]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002d08:	f7fe ff82 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM4);
 8002d0c:	4803      	ldr	r0, [pc, #12]	; (8002d1c <MX_TIM4_Init+0x10c>)
 8002d0e:	f7fe ff61 	bl	8001bd4 <LL_TIM_EnableCounter>


  /* USER CODE END TIM4_Init 2 */

}
 8002d12:	bf00      	nop
 8002d14:	3738      	adds	r7, #56	; 0x38
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40000800 	.word	0x40000800

08002d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08c      	sub	sp, #48	; 0x30
 8002d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002d48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d4c:	f7fe ff0a 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002d50:	2008      	movs	r0, #8
 8002d52:	f7fe ff07 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002d56:	f244 0340 	movw	r3, #16448	; 0x4040
 8002d5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d5c:	2309      	movs	r3, #9
 8002d5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d68:	463b      	mov	r3, r7
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4816      	ldr	r0, [pc, #88]	; (8002dc8 <MX_USART1_UART_Init+0xa8>)
 8002d6e:	f000 fec9 	bl	8003b04 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002d72:	f248 0380 	movw	r3, #32896	; 0x8080
 8002d76:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002d78:	2304      	movs	r3, #4
 8002d7a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4811      	ldr	r0, [pc, #68]	; (8002dc8 <MX_USART1_UART_Init+0xa8>)
 8002d82:	f000 febf 	bl	8003b04 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8002d86:	f7ff fa5b 	bl	8002240 <LL_GPIO_AF_EnableRemap_USART1>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002d8a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d8e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX;
 8002d9c:	2308      	movs	r3, #8
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4619      	mov	r1, r3
 8002dae:	4807      	ldr	r0, [pc, #28]	; (8002dcc <MX_USART1_UART_Init+0xac>)
 8002db0:	f001 fc9c 	bl	80046ec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002db4:	4805      	ldr	r0, [pc, #20]	; (8002dcc <MX_USART1_UART_Init+0xac>)
 8002db6:	f7ff f9bc 	bl	8002132 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002dba:	4804      	ldr	r0, [pc, #16]	; (8002dcc <MX_USART1_UART_Init+0xac>)
 8002dbc:	f7ff f9aa 	bl	8002114 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dc0:	bf00      	nop
 8002dc2:	3730      	adds	r7, #48	; 0x30
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40010c00 	.word	0x40010c00
 8002dcc:	40013800 	.word	0x40013800

08002dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7fe fe95 	bl	8001b04 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002dda:	f7fe fac9 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2200      	movs	r2, #0
 8002de2:	2101      	movs	r1, #1
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe fb17 	bl	8001418 <NVIC_EncodePriority>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4619      	mov	r1, r3
 8002dee:	200b      	movs	r0, #11
 8002df0:	f7fe fae8 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002df4:	200b      	movs	r0, #11
 8002df6:	f7fe fac9 	bl	800138c <__NVIC_EnableIRQ>

}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002e06:	f107 0318 	add.w	r3, r7, #24
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8002e1e:	2010      	movs	r0, #16
 8002e20:	f7fe fea0 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8002e24:	2020      	movs	r0, #32
 8002e26:	f7fe fe9d 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002e2a:	2004      	movs	r0, #4
 8002e2c:	f7fe fe9a 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002e30:	2008      	movs	r0, #8
 8002e32:	f7fe fe97 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, Debug_Led_Pin|Debug_GPIO_Pin);
 8002e36:	4953      	ldr	r1, [pc, #332]	; (8002f84 <MX_GPIO_Init+0x184>)
 8002e38:	4853      	ldr	r0, [pc, #332]	; (8002f88 <MX_GPIO_Init+0x188>)
 8002e3a:	f7ff f9e1 	bl	8002200 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8002e3e:	4953      	ldr	r1, [pc, #332]	; (8002f8c <MX_GPIO_Init+0x18c>)
 8002e40:	4853      	ldr	r0, [pc, #332]	; (8002f90 <MX_GPIO_Init+0x190>)
 8002e42:	f7ff f9dd 	bl	8002200 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 8002e46:	4953      	ldr	r1, [pc, #332]	; (8002f94 <MX_GPIO_Init+0x194>)
 8002e48:	4853      	ldr	r0, [pc, #332]	; (8002f98 <MX_GPIO_Init+0x198>)
 8002e4a:	f7ff f9d9 	bl	8002200 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Debug_Led_Pin;
 8002e4e:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <MX_GPIO_Init+0x19c>)
 8002e50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e52:	2301      	movs	r3, #1
 8002e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e56:	2302      	movs	r3, #2
 8002e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Debug_Led_GPIO_Port, &GPIO_InitStruct);
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4849      	ldr	r0, [pc, #292]	; (8002f88 <MX_GPIO_Init+0x188>)
 8002e64:	f000 fe4e 	bl	8003b04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Debug_GPIO_Pin;
 8002e68:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <MX_GPIO_Init+0x1a0>)
 8002e6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Debug_GPIO_GPIO_Port, &GPIO_InitStruct);
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4842      	ldr	r0, [pc, #264]	; (8002f88 <MX_GPIO_Init+0x188>)
 8002e7e:	f000 fe41 	bl	8003b04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002e82:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <MX_GPIO_Init+0x18c>)
 8002e84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e86:	2301      	movs	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	483e      	ldr	r0, [pc, #248]	; (8002f90 <MX_GPIO_Init+0x190>)
 8002e98:	f000 fe34 	bl	8003b04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002e9c:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <MX_GPIO_Init+0x1a4>)
 8002e9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4839      	ldr	r0, [pc, #228]	; (8002f98 <MX_GPIO_Init+0x198>)
 8002eb2:	f000 fe27 	bl	8003b04 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8002eb6:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <MX_GPIO_Init+0x1a8>)
 8002eb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4833      	ldr	r0, [pc, #204]	; (8002f98 <MX_GPIO_Init+0x198>)
 8002ecc:	f000 fe1a 	bl	8003b04 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 8002ed0:	4936      	ldr	r1, [pc, #216]	; (8002fac <MX_GPIO_Init+0x1ac>)
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f7ff f9fc 	bl	80022d0 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 8002ed8:	4935      	ldr	r1, [pc, #212]	; (8002fb0 <MX_GPIO_Init+0x1b0>)
 8002eda:	2001      	movs	r0, #1
 8002edc:	f7ff f9f8 	bl	80022d0 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 8002ee0:	4934      	ldr	r1, [pc, #208]	; (8002fb4 <MX_GPIO_Init+0x1b4>)
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f7ff f9f4 	bl	80022d0 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8002ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eec:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002efa:	f107 0318 	add.w	r3, r7, #24
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fccc 	bl	800389c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8002f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f08:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002f12:	2301      	movs	r3, #1
 8002f14:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002f16:	f107 0318 	add.w	r3, r7, #24
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fcbe 	bl	800389c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8002f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f24:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002f32:	f107 0318 	add.w	r3, r7, #24
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fcb0 	bl	800389c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	491e      	ldr	r1, [pc, #120]	; (8002fb8 <MX_GPIO_Init+0x1b8>)
 8002f40:	4813      	ldr	r0, [pc, #76]	; (8002f90 <MX_GPIO_Init+0x190>)
 8002f42:	f7ff f92b 	bl	800219c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8002f46:	2204      	movs	r2, #4
 8002f48:	4914      	ldr	r1, [pc, #80]	; (8002f9c <MX_GPIO_Init+0x19c>)
 8002f4a:	4811      	ldr	r0, [pc, #68]	; (8002f90 <MX_GPIO_Init+0x190>)
 8002f4c:	f7ff f926 	bl	800219c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8002f50:	2204      	movs	r2, #4
 8002f52:	4913      	ldr	r1, [pc, #76]	; (8002fa0 <MX_GPIO_Init+0x1a0>)
 8002f54:	480e      	ldr	r0, [pc, #56]	; (8002f90 <MX_GPIO_Init+0x190>)
 8002f56:	f7ff f921 	bl	800219c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8002f5a:	f7fe fa09 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2200      	movs	r2, #0
 8002f62:	2102      	movs	r1, #2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe fa57 	bl	8001418 <NVIC_EncodePriority>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	2028      	movs	r0, #40	; 0x28
 8002f70:	f7fe fa28 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f74:	2028      	movs	r0, #40	; 0x28
 8002f76:	f7fe fa09 	bl	800138c <__NVIC_EnableIRQ>

}
 8002f7a:	bf00      	nop
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	04600060 	.word	0x04600060
 8002f88:	40011000 	.word	0x40011000
 8002f8c:	04800080 	.word	0x04800080
 8002f90:	40010c00 	.word	0x40010c00
 8002f94:	040a000a 	.word	0x040a000a
 8002f98:	40010800 	.word	0x40010800
 8002f9c:	04200020 	.word	0x04200020
 8002fa0:	04400040 	.word	0x04400040
 8002fa4:	04020002 	.word	0x04020002
 8002fa8:	04080008 	.word	0x04080008
 8002fac:	000f0003 	.word	0x000f0003
 8002fb0:	00f00003 	.word	0x00f00003
 8002fb4:	0f000003 	.word	0x0f000003
 8002fb8:	04100010 	.word	0x04100010

08002fbc <Sensor_Convert_A2D>:
  {
    Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i]) / 2;
  }
}
void Sensor_Convert_A2D()
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
  LineDetect = 0;
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <Sensor_Convert_A2D+0x5c>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; ++i)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	e01c      	b.n	8003008 <Sensor_Convert_A2D+0x4c>
  {
    if (Sensor_ADC_Value[i] < Sensor_Threshold[i])
 8002fce:	4a13      	ldr	r2, [pc, #76]	; (800301c <Sensor_Convert_A2D+0x60>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4911      	ldr	r1, [pc, #68]	; (8003020 <Sensor_Convert_A2D+0x64>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d20e      	bcs.n	8003002 <Sensor_Convert_A2D+0x46>
    {
      sbi(LineDetect, (7 - i));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2201      	movs	r2, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	b25a      	sxtb	r2, r3
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <Sensor_Convert_A2D+0x5c>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	b25b      	sxtb	r3, r3
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b25b      	sxtb	r3, r3
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <Sensor_Convert_A2D+0x5c>)
 8003000:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; ++i)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3301      	adds	r3, #1
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b07      	cmp	r3, #7
 800300c:	dddf      	ble.n	8002fce <Sensor_Convert_A2D+0x12>
      //			  printf("1 ");
    }
  };
  //	printf("\n");
  //	LL_mDelay(500);
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	20000209 	.word	0x20000209
 800301c:	20000220 	.word	0x20000220
 8003020:	20000000 	.word	0x20000000

08003024 <Sensor_Print_LineDetect>:
  };
  printf("\n");
}

void Sensor_Print_LineDetect()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
  //	if(PrevLine != LineDetect)
  //	{
  char buffer[8];
  itoa(LineDetect, buffer, 2);
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <Sensor_Print_LineDetect+0x30>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	463b      	mov	r3, r7
 8003032:	2202      	movs	r2, #2
 8003034:	4619      	mov	r1, r3
 8003036:	f001 fc31 	bl	800489c <itoa>
  printf("binary: %s\n", buffer);
 800303a:	463b      	mov	r3, r7
 800303c:	4619      	mov	r1, r3
 800303e:	4806      	ldr	r0, [pc, #24]	; (8003058 <Sensor_Print_LineDetect+0x34>)
 8003040:	f002 f886 	bl	8005150 <iprintf>
  PrevLine = LineDetect;
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <Sensor_Print_LineDetect+0x30>)
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <Sensor_Print_LineDetect+0x38>)
 800304a:	701a      	strb	r2, [r3, #0]
  //	}
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000209 	.word	0x20000209
 8003058:	08007158 	.word	0x08007158
 800305c:	20000208 	.word	0x20000208

08003060 <BTN_Process>:
void BTN_Process()
{
 8003060:	b598      	push	{r3, r4, r7, lr}
 8003062:	af00      	add	r7, sp, #0
  if (GetThreshold_Flag == 1)
 8003064:	4b32      	ldr	r3, [pc, #200]	; (8003130 <BTN_Process+0xd0>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d104      	bne.n	8003076 <BTN_Process+0x16>
  {
    GetThreshold_Flag = 0;
 800306c:	4b30      	ldr	r3, [pc, #192]	; (8003130 <BTN_Process+0xd0>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
    Sensor_Print_LineDetect();
 8003072:	f7ff ffd7 	bl	8003024 <Sensor_Print_LineDetect>
  }

  if (BTN2_Flag == 1)
 8003076:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <BTN_Process+0xd4>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d126      	bne.n	80030cc <BTN_Process+0x6c>
  {
    BTN2_Flag = 0;
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <BTN_Process+0xd4>)
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
    ServoAngle = ServoAngle - BTN_Servo_Step;
 8003084:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <BTN_Process+0xd8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd f9cd 	bl	8000428 <__aeabi_f2d>
 800308e:	a326      	add	r3, pc, #152	; (adr r3, 8003128 <BTN_Process+0xc8>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd f868 	bl	8000168 <__aeabi_dsub>
 8003098:	4603      	mov	r3, r0
 800309a:	460c      	mov	r4, r1
 800309c:	4618      	mov	r0, r3
 800309e:	4621      	mov	r1, r4
 80030a0:	f7fd fcf2 	bl	8000a88 <__aeabi_d2f>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <BTN_Process+0xd8>)
 80030a8:	601a      	str	r2, [r3, #0]
    Servo_SetAngle(ServoAngle);
 80030aa:	4b23      	ldr	r3, [pc, #140]	; (8003138 <BTN_Process+0xd8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe f8fc 	bl	80012ac <Servo_SetAngle>
    printf("Servo Angle: %g  \n", ServoAngle);
 80030b4:	4b20      	ldr	r3, [pc, #128]	; (8003138 <BTN_Process+0xd8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd f9b5 	bl	8000428 <__aeabi_f2d>
 80030be:	4603      	mov	r3, r0
 80030c0:	460c      	mov	r4, r1
 80030c2:	461a      	mov	r2, r3
 80030c4:	4623      	mov	r3, r4
 80030c6:	481d      	ldr	r0, [pc, #116]	; (800313c <BTN_Process+0xdc>)
 80030c8:	f002 f842 	bl	8005150 <iprintf>
  }

  if (BTN3_Flag == 1)
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <BTN_Process+0xe0>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d126      	bne.n	8003122 <BTN_Process+0xc2>
  {
    BTN3_Flag = 0;
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <BTN_Process+0xe0>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
    ServoAngle = ServoAngle + BTN_Servo_Step;
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <BTN_Process+0xd8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f9a2 	bl	8000428 <__aeabi_f2d>
 80030e4:	a310      	add	r3, pc, #64	; (adr r3, 8003128 <BTN_Process+0xc8>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f7fd f83f 	bl	800016c <__adddf3>
 80030ee:	4603      	mov	r3, r0
 80030f0:	460c      	mov	r4, r1
 80030f2:	4618      	mov	r0, r3
 80030f4:	4621      	mov	r1, r4
 80030f6:	f7fd fcc7 	bl	8000a88 <__aeabi_d2f>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <BTN_Process+0xd8>)
 80030fe:	601a      	str	r2, [r3, #0]
    Servo_SetAngle(ServoAngle);
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <BTN_Process+0xd8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe f8d1 	bl	80012ac <Servo_SetAngle>
    printf("Servo Angle: %g \n", ServoAngle);
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <BTN_Process+0xd8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd f98a 	bl	8000428 <__aeabi_f2d>
 8003114:	4603      	mov	r3, r0
 8003116:	460c      	mov	r4, r1
 8003118:	461a      	mov	r2, r3
 800311a:	4623      	mov	r3, r4
 800311c:	4809      	ldr	r0, [pc, #36]	; (8003144 <BTN_Process+0xe4>)
 800311e:	f002 f817 	bl	8005150 <iprintf>
  }
}
 8003122:	bf00      	nop
 8003124:	bd98      	pop	{r3, r4, r7, pc}
 8003126:	bf00      	nop
 8003128:	33333333 	.word	0x33333333
 800312c:	3fe33333 	.word	0x3fe33333
 8003130:	20000200 	.word	0x20000200
 8003134:	20000212 	.word	0x20000212
 8003138:	20000204 	.word	0x20000204
 800313c:	08007164 	.word	0x08007164
 8003140:	20000213 	.word	0x20000213
 8003144:	08007178 	.word	0x08007178

08003148 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4013      	ands	r3, r2
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40010400 	.word	0x40010400

08003174 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800317c:	4a03      	ldr	r2, [pc, #12]	; (800318c <LL_EXTI_ClearFlag_0_31+0x18>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6153      	str	r3, [r2, #20]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40010400 	.word	0x40010400

08003190 <LL_TIM_ClearFlag_UPDATE>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f06f 0201 	mvn.w	r2, #1
 800319e:	611a      	str	r2, [r3, #16]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <LL_TIM_IsActiveFlag_UPDATE>:
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <LL_TIM_ClearFlag_CC1>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f06f 0202 	mvn.w	r2, #2
 80031dc:	611a      	str	r2, [r3, #16]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <LL_TIM_IsActiveFlag_CC1>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d101      	bne.n	8003200 <LL_TIM_IsActiveFlag_CC1+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <LL_TIM_ClearFlag_CC2>:
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f06f 0204 	mvn.w	r2, #4
 800321a:	611a      	str	r2, [r3, #16]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <LL_TIM_IsActiveFlag_CC2>:
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b04      	cmp	r3, #4
 8003238:	d101      	bne.n	800323e <LL_TIM_IsActiveFlag_CC2+0x18>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <LL_TIM_IsActiveFlag_CC2+0x1a>
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <LL_GPIO_SetOutputPin>:
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	611a      	str	r2, [r3, #16]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <LL_GPIO_ResetOutputPin>:
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	615a      	str	r2, [r3, #20]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003296:	e7fe      	b.n	8003296 <HardFault_Handler+0x4>

08003298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800329c:	e7fe      	b.n	800329c <MemManage_Handler+0x4>

0800329e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a2:	e7fe      	b.n	80032a2 <BusFault_Handler+0x4>

080032a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a8:	e7fe      	b.n	80032a8 <UsageFault_Handler+0x4>

080032aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
	...

080032d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <SysTick_Handler+0x18>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <SysTick_Handler+0x18>)
 80032dc:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	2000020c 	.word	0x2000020c

080032ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 80032fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003300:	f7ff ff46 	bl	8003190 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}

08003308 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <TIM3_IRQHandler+0x10>)
 800330e:	f7ff ff3f 	bl	8003190 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40000400 	.word	0x40000400

0800331c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 8003322:	4819      	ldr	r0, [pc, #100]	; (8003388 <TIM4_IRQHandler+0x6c>)
 8003324:	f7ff ff60 	bl	80031e8 <LL_TIM_IsActiveFlag_CC1>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d006      	beq.n	800333c <TIM4_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 800332e:	4816      	ldr	r0, [pc, #88]	; (8003388 <TIM4_IRQHandler+0x6c>)
 8003330:	f7ff ff4d 	bl	80031ce <LL_TIM_ClearFlag_CC1>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003334:	4915      	ldr	r1, [pc, #84]	; (800338c <TIM4_IRQHandler+0x70>)
 8003336:	4816      	ldr	r0, [pc, #88]	; (8003390 <TIM4_IRQHandler+0x74>)
 8003338:	f7ff ff96 	bl	8003268 <LL_GPIO_ResetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 800333c:	4812      	ldr	r0, [pc, #72]	; (8003388 <TIM4_IRQHandler+0x6c>)
 800333e:	f7ff ff34 	bl	80031aa <LL_TIM_IsActiveFlag_UPDATE>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <TIM4_IRQHandler+0x3a>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8003348:	480f      	ldr	r0, [pc, #60]	; (8003388 <TIM4_IRQHandler+0x6c>)
 800334a:	f7ff ff21 	bl	8003190 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800334e:	490f      	ldr	r1, [pc, #60]	; (800338c <TIM4_IRQHandler+0x70>)
 8003350:	480f      	ldr	r0, [pc, #60]	; (8003390 <TIM4_IRQHandler+0x74>)
 8003352:	f7ff ff7a 	bl	800324a <LL_GPIO_SetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_CC2(TIM4))
 8003356:	480c      	ldr	r0, [pc, #48]	; (8003388 <TIM4_IRQHandler+0x6c>)
 8003358:	f7ff ff65 	bl	8003226 <LL_TIM_IsActiveFlag_CC2>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00e      	beq.n	8003380 <TIM4_IRQHandler+0x64>
	{
//		LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
		uint16_t newCPR = TIM4->CNT + AddCPRTime - 1;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <TIM4_IRQHandler+0x6c>)
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <TIM4_IRQHandler+0x78>)
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	4413      	add	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	80fb      	strh	r3, [r7, #6]
		TIM4->CCR2 = newCPR;
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <TIM4_IRQHandler+0x6c>)
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	6393      	str	r3, [r2, #56]	; 0x38
		LL_TIM_ClearFlag_CC2(TIM4);
 800337a:	4803      	ldr	r0, [pc, #12]	; (8003388 <TIM4_IRQHandler+0x6c>)
 800337c:	f7ff ff46 	bl	800320c <LL_TIM_ClearFlag_CC2>
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40000800 	.word	0x40000800
 800338c:	04080008 	.word	0x04080008
 8003390:	40010800 	.word	0x40010800
 8003394:	20000210 	.word	0x20000210

08003398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 800339c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033a0:	f7ff fed2 	bl	8003148 <LL_EXTI_IsActiveFlag_0_31>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d006      	beq.n	80033b8 <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 80033aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033ae:	f7ff fee1 	bl	8003174 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <EXTI15_10_IRQHandler+0x5c>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80033b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033bc:	f7ff fec4 	bl	8003148 <LL_EXTI_IsActiveFlag_0_31>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80033c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033ca:	f7ff fed3 	bl	8003174 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BTN2_Flag = 1;
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <EXTI15_10_IRQHandler+0x60>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80033d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80033d8:	f7ff feb6 	bl	8003148 <LL_EXTI_IsActiveFlag_0_31>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <EXTI15_10_IRQHandler+0x58>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80033e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80033e6:	f7ff fec5 	bl	8003174 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    BTN3_Flag = 1;
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <EXTI15_10_IRQHandler+0x64>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000200 	.word	0x20000200
 80033f8:	20000212 	.word	0x20000212
 80033fc:	20000213 	.word	0x20000213

08003400 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e00a      	b.n	8003428 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003412:	f3af 8000 	nop.w
 8003416:	4601      	mov	r1, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	60ba      	str	r2, [r7, #8]
 800341e:	b2ca      	uxtb	r2, r1
 8003420:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3301      	adds	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	dbf0      	blt.n	8003412 <_read+0x12>
	}

return len;
 8003430:	687b      	ldr	r3, [r7, #4]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e009      	b.n	8003460 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	60ba      	str	r2, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe ff69 	bl	800232c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3301      	adds	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	dbf1      	blt.n	800344c <_write+0x12>
	}
	return len;
 8003468:	687b      	ldr	r3, [r7, #4]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_close>:

int _close(int file)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
	return -1;
 800347a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003498:	605a      	str	r2, [r3, #4]
	return 0;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <_isatty>:

int _isatty(int file)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
	return 1;
 80034ae:	2301      	movs	r3, #1
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
	return 0;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
	...

080034d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034dc:	4a14      	ldr	r2, [pc, #80]	; (8003530 <_sbrk+0x5c>)
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <_sbrk+0x60>)
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <_sbrk+0x64>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <_sbrk+0x64>)
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <_sbrk+0x68>)
 80034f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <_sbrk+0x64>)
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	429a      	cmp	r2, r3
 8003502:	d207      	bcs.n	8003514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003504:	f001 f988 	bl	8004818 <__errno>
 8003508:	4602      	mov	r2, r0
 800350a:	230c      	movs	r3, #12
 800350c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	e009      	b.n	8003528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <_sbrk+0x64>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800351a:	4b07      	ldr	r3, [pc, #28]	; (8003538 <_sbrk+0x64>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	4a05      	ldr	r2, [pc, #20]	; (8003538 <_sbrk+0x64>)
 8003524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003526:	68fb      	ldr	r3, [r7, #12]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20005000 	.word	0x20005000
 8003534:	00000400 	.word	0x00000400
 8003538:	20000214 	.word	0x20000214
 800353c:	20000238 	.word	0x20000238

08003540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003544:	4b15      	ldr	r3, [pc, #84]	; (800359c <SystemInit+0x5c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <SystemInit+0x5c>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <SystemInit+0x5c>)
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4911      	ldr	r1, [pc, #68]	; (800359c <SystemInit+0x5c>)
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <SystemInit+0x60>)
 8003558:	4013      	ands	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <SystemInit+0x5c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0e      	ldr	r2, [pc, #56]	; (800359c <SystemInit+0x5c>)
 8003562:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <SystemInit+0x5c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <SystemInit+0x5c>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003576:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <SystemInit+0x5c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <SystemInit+0x5c>)
 800357e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003582:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <SystemInit+0x5c>)
 8003586:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800358a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <SystemInit+0x64>)
 800358e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003592:	609a      	str	r2, [r3, #8]
#endif 
}
 8003594:	bf00      	nop
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40021000 	.word	0x40021000
 80035a0:	f8ff0000 	.word	0xf8ff0000
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80035a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80035aa:	e003      	b.n	80035b4 <LoopCopyDataInit>

080035ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80035ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80035b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80035b2:	3104      	adds	r1, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80035b4:	480a      	ldr	r0, [pc, #40]	; (80035e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80035b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80035ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80035bc:	d3f6      	bcc.n	80035ac <CopyDataInit>
  ldr r2, =_sbss
 80035be:	4a0a      	ldr	r2, [pc, #40]	; (80035e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80035c0:	e002      	b.n	80035c8 <LoopFillZerobss>

080035c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80035c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80035c4:	f842 3b04 	str.w	r3, [r2], #4

080035c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80035ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80035cc:	d3f9      	bcc.n	80035c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035ce:	f7ff ffb7 	bl	8003540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035d2:	f001 f927 	bl	8004824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035d6:	f7fe fec1 	bl	800235c <main>
  bx lr
 80035da:	4770      	bx	lr
  ldr r3, =_sidata
 80035dc:	080074b8 	.word	0x080074b8
  ldr r0, =_sdata
 80035e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80035e4:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80035e8:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80035ec:	20000234 	.word	0x20000234

080035f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035f0:	e7fe      	b.n	80035f0 <ADC1_2_IRQHandler>

080035f2 <LL_ADC_REG_SetSequencerLength>:
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr

08003616 <LL_ADC_IsEnabled>:
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr
	...

0800363c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800364a:	4813      	ldr	r0, [pc, #76]	; (8003698 <LL_ADC_CommonInit+0x5c>)
 800364c:	f7ff ffe3 	bl	8003616 <LL_ADC_IsEnabled>
 8003650:	4604      	mov	r4, r0
 8003652:	4812      	ldr	r0, [pc, #72]	; (800369c <LL_ADC_CommonInit+0x60>)
 8003654:	f7ff ffdf 	bl	8003616 <LL_ADC_IsEnabled>
 8003658:	4603      	mov	r3, r0
 800365a:	4323      	orrs	r3, r4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d114      	bne.n	800368a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e008      	b.n	800368e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	e001      	b.n	800368e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bd90      	pop	{r4, r7, pc}
 8003698:	40012400 	.word	0x40012400
 800369c:	40012800 	.word	0x40012800

080036a0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ffb1 	bl	8003616 <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d112      	bne.n	80036e0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	e001      	b.n	80036e4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ff8a 	bl	8003616 <LL_ADC_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d131      	bne.n	800376c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	430b      	orrs	r3, r1
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	e008      	b.n	800373c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8003744:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	6811      	ldr	r1, [r2, #0]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	68d2      	ldr	r2, [r2, #12]
 8003750:	4311      	orrs	r1, r2
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	6912      	ldr	r2, [r2, #16]
 8003756:	430a      	orrs	r2, r1
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff44 	bl	80035f2 <LL_ADC_REG_SetSequencerLength>
 800376a:	e001      	b.n	8003770 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <LL_EXTI_EnableIT_0_31>:
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <LL_EXTI_EnableIT_0_31+0x20>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4904      	ldr	r1, [pc, #16]	; (800379c <LL_EXTI_EnableIT_0_31+0x20>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40010400 	.word	0x40010400

080037a0 <LL_EXTI_DisableIT_0_31>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <LL_EXTI_DisableIT_0_31+0x20>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <LL_EXTI_DisableIT_0_31+0x20>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40010400 	.word	0x40010400

080037c4 <LL_EXTI_EnableEvent_0_31>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	4904      	ldr	r1, [pc, #16]	; (80037e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40010400 	.word	0x40010400

080037e8 <LL_EXTI_DisableEvent_0_31>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <LL_EXTI_DisableEvent_0_31+0x20>)
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <LL_EXTI_DisableEvent_0_31+0x20>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40010400 	.word	0x40010400

0800380c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	4904      	ldr	r1, [pc, #16]	; (800382c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4313      	orrs	r3, r2
 800381e:	608b      	str	r3, [r1, #8]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40010400 	.word	0x40010400

08003830 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	43db      	mvns	r3, r3
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003842:	4013      	ands	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	40010400 	.word	0x40010400

08003854 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	4904      	ldr	r1, [pc, #16]	; (8003874 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4313      	orrs	r3, r2
 8003866:	60cb      	str	r3, [r1, #12]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010400 	.word	0x40010400

08003878 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	43db      	mvns	r3, r3
 8003888:	4903      	ldr	r1, [pc, #12]	; (8003898 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800388a:	4013      	ands	r3, r2
 800388c:	60cb      	str	r3, [r1, #12]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	40010400 	.word	0x40010400

0800389c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	791b      	ldrb	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d060      	beq.n	8003972 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d067      	beq.n	8003988 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	795b      	ldrb	r3, [r3, #5]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d00e      	beq.n	80038de <LL_EXTI_Init+0x42>
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d017      	beq.n	80038f4 <LL_EXTI_Init+0x58>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d120      	bne.n	800390a <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff8b 	bl	80037e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff ff50 	bl	800377c <LL_EXTI_EnableIT_0_31>
          break;
 80038dc:	e018      	b.n	8003910 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff5c 	bl	80037a0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff69 	bl	80037c4 <LL_EXTI_EnableEvent_0_31>
          break;
 80038f2:	e00d      	b.n	8003910 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff3f 	bl	800377c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff5e 	bl	80037c4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003908:	e002      	b.n	8003910 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
          break;
 800390e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	799b      	ldrb	r3, [r3, #6]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d037      	beq.n	8003988 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	799b      	ldrb	r3, [r3, #6]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d00e      	beq.n	800393e <LL_EXTI_Init+0xa2>
 8003920:	2b03      	cmp	r3, #3
 8003922:	d017      	beq.n	8003954 <LL_EXTI_Init+0xb8>
 8003924:	2b01      	cmp	r3, #1
 8003926:	d120      	bne.n	800396a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ffa3 	bl	8003878 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff68 	bl	800380c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800393c:	e025      	b.n	800398a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ff74 	bl	8003830 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff81 	bl	8003854 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003952:	e01a      	b.n	800398a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff57 	bl	800380c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff76 	bl	8003854 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003968:	e00f      	b.n	800398a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
            break;
 800396e:	bf00      	nop
 8003970:	e00b      	b.n	800398a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff12 	bl	80037a0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff31 	bl	80037e8 <LL_EXTI_DisableEvent_0_31>
 8003986:	e000      	b.n	800398a <LL_EXTI_Init+0xee>
      }
 8003988:	bf00      	nop
  }
  return status;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <LL_GPIO_SetPinMode>:
{
 8003994:	b490      	push	{r4, r7}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	0e1b      	lsrs	r3, r3, #24
 80039a8:	4413      	add	r3, r2
 80039aa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80039ac:	6822      	ldr	r2, [r4, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	613b      	str	r3, [r7, #16]
  return result;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	210f      	movs	r1, #15
 80039c6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	401a      	ands	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	fa93 f3a3 	rbit	r3, r3
 80039d8:	61bb      	str	r3, [r7, #24]
  return result;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	4313      	orrs	r3, r2
 80039ec:	6023      	str	r3, [r4, #0]
}
 80039ee:	bf00      	nop
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc90      	pop	{r4, r7}
 80039f6:	4770      	bx	lr

080039f8 <LL_GPIO_SetPinSpeed>:
{
 80039f8:	b490      	push	{r4, r7}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	0e1b      	lsrs	r3, r3, #24
 8003a0c:	4413      	add	r3, r2
 8003a0e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003a10:	6822      	ldr	r2, [r4, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	613b      	str	r3, [r7, #16]
  return result;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	2103      	movs	r1, #3
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	401a      	ands	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	61bb      	str	r3, [r7, #24]
  return result;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	6023      	str	r3, [r4, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc90      	pop	{r4, r7}
 8003a5a:	4770      	bx	lr

08003a5c <LL_GPIO_SetPinOutputType>:
{
 8003a5c:	b490      	push	{r4, r7}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	0e1b      	lsrs	r3, r3, #24
 8003a70:	4413      	add	r3, r2
 8003a72:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	613b      	str	r3, [r7, #16]
  return result;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	401a      	ands	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	61bb      	str	r3, [r7, #24]
  return result;
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	6023      	str	r3, [r4, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc90      	pop	{r4, r7}
 8003abe:	4770      	bx	lr

08003ac0 <LL_GPIO_SetPinPull>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	fa93 f3a3 	rbit	r3, r3
 8003ae4:	613b      	str	r3, [r7, #16]
  return result;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	fab3 f383 	clz	r3, r3
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	4619      	mov	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	408b      	lsls	r3, r1
 8003af4:	431a      	orrs	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	60da      	str	r2, [r3, #12]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	fa93 f3a3 	rbit	r3, r3
 8003b22:	60fb      	str	r3, [r7, #12]
  return result;
 8003b24:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003b2e:	e040      	b.n	8003bb2 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003b30:	2201      	movs	r2, #1
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	409a      	lsls	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d036      	beq.n	8003bac <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b07      	cmp	r3, #7
 8003b42:	d806      	bhi.n	8003b52 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003b44:	f240 1201 	movw	r2, #257	; 0x101
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e008      	b.n	8003b64 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3b08      	subs	r3, #8
 8003b56:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b62:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff11 	bl	8003994 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	461a      	mov	r2, r3
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff ffa0 	bl	8003ac0 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d003      	beq.n	8003b90 <LL_GPIO_Init+0x8c>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d10d      	bne.n	8003bac <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	461a      	mov	r2, r3
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff ff2d 	bl	80039f8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff ff58 	bl	8003a5c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1b8      	bne.n	8003b30 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <LL_I2C_Enable>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f043 0201 	orr.w	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <LL_I2C_Disable>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0201 	bic.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	601a      	str	r2, [r3, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <LL_I2C_SetOwnAddress1>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	431a      	orrs	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
	...

08003c34 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003c34:	b490      	push	{r4, r7}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8003c42:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8003c44:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4a3f      	ldr	r2, [pc, #252]	; (8003d48 <LL_I2C_ConfigSpeed+0x114>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c58:	ea44 0203 	orr.w	r2, r4, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4938      	ldr	r1, [pc, #224]	; (8003d4c <LL_I2C_ConfigSpeed+0x118>)
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	d801      	bhi.n	8003c74 <LL_I2C_ConfigSpeed+0x40>
 8003c70:	1c63      	adds	r3, r4, #1
 8003c72:	e008      	b.n	8003c86 <LL_I2C_ConfigSpeed+0x52>
 8003c74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c78:	fb03 f304 	mul.w	r3, r3, r4
 8003c7c:	4934      	ldr	r1, [pc, #208]	; (8003d50 <LL_I2C_ConfigSpeed+0x11c>)
 8003c7e:	fba1 1303 	umull	r1, r3, r1, r3
 8003c82:	099b      	lsrs	r3, r3, #6
 8003c84:	3301      	adds	r3, #1
 8003c86:	431a      	orrs	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a2f      	ldr	r2, [pc, #188]	; (8003d4c <LL_I2C_ConfigSpeed+0x118>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d939      	bls.n	8003d08 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d117      	bne.n	8003cca <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	e01d      	b.n	8003d00 <LL_I2C_ConfigSpeed+0xcc>
 8003cc4:	f248 0301 	movw	r3, #32769	; 0x8001
 8003cc8:	e01a      	b.n	8003d00 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009a      	lsls	r2, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009a      	lsls	r2, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfa:	e001      	b.n	8003d00 <LL_I2C_ConfigSpeed+0xcc>
 8003cfc:	f248 0301 	movw	r3, #32769	; 0x8001
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	ea43 0402 	orr.w	r4, r3, r2
 8003d06:	e010      	b.n	8003d2a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d905      	bls.n	8003d26 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	e000      	b.n	8003d28 <LL_I2C_ConfigSpeed+0xf4>
 8003d26:	2304      	movs	r3, #4
 8003d28:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d36:	ea44 0203 	orr.w	r2, r4, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	61da      	str	r2, [r3, #28]
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc90      	pop	{r4, r7}
 8003d46:	4770      	bx	lr
 8003d48:	431bde83 	.word	0x431bde83
 8003d4c:	000186a0 	.word	0x000186a0
 8003d50:	10624dd3 	.word	0x10624dd3

08003d54 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 021a 	bic.w	r2, r3, #26
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	601a      	str	r2, [r3, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ff1d 	bl	8003be6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003dac:	f107 0308 	add.w	r3, r7, #8
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f87b 	bl	8003eac <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003db6:	6939      	ldr	r1, [r7, #16]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff37 	bl	8003c34 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68d9      	ldr	r1, [r3, #12]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff17 	bl	8003c04 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ffb9 	bl	8003d54 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff fef0 	bl	8003bc8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffc2 	bl	8003d78 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <LL_RCC_GetSysClkSource>:
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <LL_RCC_GetSysClkSource+0x14>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 030c 	and.w	r3, r3, #12
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	40021000 	.word	0x40021000

08003e18 <LL_RCC_GetAHBPrescaler>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <LL_RCC_GetAHBPrescaler+0x14>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	40021000 	.word	0x40021000

08003e30 <LL_RCC_GetAPB1Prescaler>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	40021000 	.word	0x40021000

08003e48 <LL_RCC_GetAPB2Prescaler>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <LL_RCC_GetAPB2Prescaler+0x14>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	40021000 	.word	0x40021000

08003e60 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <LL_RCC_PLL_GetMainSource+0x14>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	40021000 	.word	0x40021000

08003e78 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	40021000 	.word	0x40021000

08003e90 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <LL_RCC_PLL_GetPrediv+0x18>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0c5b      	lsrs	r3, r3, #17
 8003e9a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003eb4:	f000 f820 	bl	8003ef8 <RCC_GetSystemClockFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f83a 	bl	8003f3c <RCC_GetHCLKClockFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f848 	bl	8003f68 <RCC_GetPCLK1ClockFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f854 	bl	8003f90 <RCC_GetPCLK2ClockFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60da      	str	r2, [r3, #12]
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003f02:	f7ff ff7d 	bl	8003e00 <LL_RCC_GetSysClkSource>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d006      	beq.n	8003f1a <RCC_GetSystemClockFreq+0x22>
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d007      	beq.n	8003f20 <RCC_GetSystemClockFreq+0x28>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003f14:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <RCC_GetSystemClockFreq+0x40>)
 8003f16:	607b      	str	r3, [r7, #4]
      break;
 8003f18:	e009      	b.n	8003f2e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <RCC_GetSystemClockFreq+0x40>)
 8003f1c:	607b      	str	r3, [r7, #4]
      break;
 8003f1e:	e006      	b.n	8003f2e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003f20:	f000 f84a 	bl	8003fb8 <RCC_PLL_GetFreqDomain_SYS>
 8003f24:	6078      	str	r0, [r7, #4]
      break;
 8003f26:	e002      	b.n	8003f2e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <RCC_GetSystemClockFreq+0x40>)
 8003f2a:	607b      	str	r3, [r7, #4]
      break;
 8003f2c:	bf00      	nop
  }

  return frequency;
 8003f2e:	687b      	ldr	r3, [r7, #4]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	007a1200 	.word	0x007a1200

08003f3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003f44:	f7ff ff68 	bl	8003e18 <LL_RCC_GetAHBPrescaler>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <RCC_GetHCLKClockFreq+0x28>)
 8003f52:	5cd3      	ldrb	r3, [r2, r3]
 8003f54:	461a      	mov	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	40d3      	lsrs	r3, r2
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	080071b4 	.word	0x080071b4

08003f68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003f70:	f7ff ff5e 	bl	8003e30 <LL_RCC_GetAPB1Prescaler>
 8003f74:	4603      	mov	r3, r0
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <RCC_GetPCLK1ClockFreq+0x24>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	40d3      	lsrs	r3, r2
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	080071c4 	.word	0x080071c4

08003f90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003f98:	f7ff ff56 	bl	8003e48 <LL_RCC_GetAPB2Prescaler>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	0adb      	lsrs	r3, r3, #11
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <RCC_GetPCLK2ClockFreq+0x24>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	40d3      	lsrs	r3, r2
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	080071c4 	.word	0x080071c4

08003fb8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003fc6:	f7ff ff4b 	bl	8003e60 <LL_RCC_PLL_GetMainSource>
 8003fca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <RCC_PLL_GetFreqDomain_SYS+0x22>
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd6:	d003      	beq.n	8003fe0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003fd8:	e00b      	b.n	8003ff2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003fda:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003fdc:	607b      	str	r3, [r7, #4]
      break;
 8003fde:	e00b      	b.n	8003ff8 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003fe0:	f7ff ff56 	bl	8003e90 <LL_RCC_PLL_GetPrediv>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	607b      	str	r3, [r7, #4]
      break;
 8003ff0:	e002      	b.n	8003ff8 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8003ff4:	607b      	str	r3, [r7, #4]
      break;
 8003ff6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003ff8:	f7ff ff3e 	bl	8003e78 <LL_RCC_PLL_GetMultiplicator>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	0c9b      	lsrs	r3, r3, #18
 8004000:	3302      	adds	r3, #2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	fb02 f303 	mul.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	003d0900 	.word	0x003d0900
 8004014:	007a1200 	.word	0x007a1200

08004018 <LL_TIM_SetPrescaler>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <LL_TIM_SetAutoReload>:
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <LL_TIM_SetRepetitionCounter>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <LL_TIM_OC_SetCompareCH1>:
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <LL_TIM_OC_SetCompareCH2>:
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <LL_TIM_OC_SetCompareCH3>:
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <LL_TIM_OC_SetCompareCH4>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr

080040ce <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f043 0201 	orr.w	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	615a      	str	r2, [r3, #20]
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a27      	ldr	r2, [pc, #156]	; (800419c <LL_TIM_Init+0xb0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <LL_TIM_Init+0x30>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d007      	beq.n	800411c <LL_TIM_Init+0x30>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a24      	ldr	r2, [pc, #144]	; (80041a0 <LL_TIM_Init+0xb4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <LL_TIM_Init+0x30>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a23      	ldr	r2, [pc, #140]	; (80041a4 <LL_TIM_Init+0xb8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d106      	bne.n	800412a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1b      	ldr	r2, [pc, #108]	; (800419c <LL_TIM_Init+0xb0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00b      	beq.n	800414a <LL_TIM_Init+0x5e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d007      	beq.n	800414a <LL_TIM_Init+0x5e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <LL_TIM_Init+0xb4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <LL_TIM_Init+0x5e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <LL_TIM_Init+0xb8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d106      	bne.n	8004158 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff64 	bl	8004032 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ff51 	bl	8004018 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a08      	ldr	r2, [pc, #32]	; (800419c <LL_TIM_Init+0xb0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d105      	bne.n	800418a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	7c1b      	ldrb	r3, [r3, #16]
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff61 	bl	800404c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff ff9f 	bl	80040ce <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800

080041a8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b10      	cmp	r3, #16
 80041bc:	d012      	beq.n	80041e4 <LL_TIM_OC_Init+0x3c>
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d802      	bhi.n	80041c8 <LL_TIM_OC_Init+0x20>
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d007      	beq.n	80041d6 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80041c6:	e022      	b.n	800420e <LL_TIM_OC_Init+0x66>
  switch (Channel)
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041cc:	d011      	beq.n	80041f2 <LL_TIM_OC_Init+0x4a>
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	d015      	beq.n	8004200 <LL_TIM_OC_Init+0x58>
      break;
 80041d4:	e01b      	b.n	800420e <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f865 	bl	80042a8 <OC1Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]
      break;
 80041e2:	e014      	b.n	800420e <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f8c4 	bl	8004374 <OC2Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]
      break;
 80041f0:	e00d      	b.n	800420e <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f927 	bl	8004448 <OC3Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]
      break;
 80041fe:	e006      	b.n	800420e <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f98a 	bl	800451c <OC4Config>
 8004208:	4603      	mov	r3, r0
 800420a:	75fb      	strb	r3, [r7, #23]
      break;
 800420c:	bf00      	nop
  }

  return result;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	7b12      	ldrb	r2, [r2, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	89d2      	ldrh	r2, [r2, #14]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f023 0201 	bic.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 0202 	bic.w	r2, r3, #2
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0201 	bic.w	r2, r3, #1
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1a      	ldr	r2, [pc, #104]	; (8004370 <OC1Config+0xc8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d11e      	bne.n	8004348 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 0208 	bic.w	r2, r3, #8
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 0204 	bic.w	r2, r3, #4
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fe83 	bl	8004066 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40012c00 	.word	0x40012c00

08004374 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	f023 0210 	bic.w	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	021b      	lsls	r3, r3, #8
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0220 	bic.w	r2, r3, #32
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0210 	bic.w	r2, r3, #16
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <OC2Config+0xd0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d11f      	bne.n	800441c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	019b      	lsls	r3, r3, #6
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	019b      	lsls	r3, r3, #6
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff fe26 	bl	8004080 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40012c00 	.word	0x40012c00

08004448 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0303 	bic.w	r3, r3, #3
 8004476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <OC3Config+0xd0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d11f      	bne.n	80044ee <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	029b      	lsls	r3, r3, #10
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	015b      	lsls	r3, r3, #5
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fdca 	bl	800409a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40012c00 	.word	0x40012c00

0800451c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	031b      	lsls	r3, r3, #12
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	031b      	lsls	r3, r3, #12
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <OC4Config+0xa0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d107      	bne.n	8004594 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	019b      	lsls	r3, r3, #6
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff fd84 	bl	80040b4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40012c00 	.word	0x40012c00

080045c0 <LL_USART_IsEnabled>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <LL_USART_SetStopBitsLength>:
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	611a      	str	r2, [r3, #16]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <LL_USART_SetHWFlowCtrl>:
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	615a      	str	r2, [r3, #20]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
	...

08004630 <LL_USART_SetBaudRate>:
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009a      	lsls	r2, r3, #2
 8004646:	441a      	add	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <LL_USART_SetBaudRate+0xb8>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	b29b      	uxth	r3, r3
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	b299      	uxth	r1, r3
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009a      	lsls	r2, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004672:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <LL_USART_SetBaudRate+0xb8>)
 8004674:	fba3 0302 	umull	r0, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2064      	movs	r0, #100	; 0x64
 800467c:	fb00 f303 	mul.w	r3, r0, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <LL_USART_SetBaudRate+0xb8>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	b29b      	uxth	r3, r3
 8004690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004694:	b29b      	uxth	r3, r3
 8004696:	440b      	add	r3, r1
 8004698:	b299      	uxth	r1, r3
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <LL_USART_SetBaudRate+0xb8>)
 80046b0:	fba3 0302 	umull	r0, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2064      	movs	r0, #100	; 0x64
 80046b8:	fb00 f303 	mul.w	r3, r0, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	3332      	adds	r3, #50	; 0x32
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <LL_USART_SetBaudRate+0xb8>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	440b      	add	r3, r1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	51eb851f 	.word	0x51eb851f

080046ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ff5e 	bl	80045c0 <LL_USART_IsEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d145      	bne.n	8004796 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004712:	f023 030c 	bic.w	r3, r3, #12
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	6851      	ldr	r1, [r2, #4]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68d2      	ldr	r2, [r2, #12]
 800471e:	4311      	orrs	r1, r2
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	6912      	ldr	r2, [r2, #16]
 8004724:	430a      	orrs	r2, r1
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff ff57 	bl	80045e6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ff63 	bl	800460a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004744:	f107 0308 	add.w	r3, r7, #8
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fbaf 	bl	8003eac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a13      	ldr	r2, [pc, #76]	; (80047a0 <LL_USART_Init+0xb4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d102      	bne.n	800475c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e00c      	b.n	8004776 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a11      	ldr	r2, [pc, #68]	; (80047a4 <LL_USART_Init+0xb8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d102      	bne.n	800476a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	e005      	b.n	8004776 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <LL_USART_Init+0xbc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d101      	bne.n	8004776 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00c      	beq.n	8004796 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	69b9      	ldr	r1, [r7, #24]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff4d 	bl	8004630 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004796:	7ffb      	ldrb	r3, [r7, #31]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40013800 	.word	0x40013800
 80047a4:	40004400 	.word	0x40004400
 80047a8:	40004800 	.word	0x40004800

080047ac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	4a07      	ldr	r2, [pc, #28]	; (80047dc <LL_InitTick+0x30>)
 80047c0:	3b01      	subs	r3, #1
 80047c2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <LL_InitTick+0x30>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <LL_InitTick+0x30>)
 80047cc:	2205      	movs	r2, #5
 80047ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000e010 	.word	0xe000e010

080047e0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80047e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ffdd 	bl	80047ac <LL_InitTick>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004804:	4a03      	ldr	r2, [pc, #12]	; (8004814 <LL_SetSystemCoreClock+0x18>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6013      	str	r3, [r2, #0]
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr
 8004814:	20000010 	.word	0x20000010

08004818 <__errno>:
 8004818:	4b01      	ldr	r3, [pc, #4]	; (8004820 <__errno+0x8>)
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	20000014 	.word	0x20000014

08004824 <__libc_init_array>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	2500      	movs	r5, #0
 8004828:	4e0c      	ldr	r6, [pc, #48]	; (800485c <__libc_init_array+0x38>)
 800482a:	4c0d      	ldr	r4, [pc, #52]	; (8004860 <__libc_init_array+0x3c>)
 800482c:	1ba4      	subs	r4, r4, r6
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	42a5      	cmp	r5, r4
 8004832:	d109      	bne.n	8004848 <__libc_init_array+0x24>
 8004834:	f002 fc4e 	bl	80070d4 <_init>
 8004838:	2500      	movs	r5, #0
 800483a:	4e0a      	ldr	r6, [pc, #40]	; (8004864 <__libc_init_array+0x40>)
 800483c:	4c0a      	ldr	r4, [pc, #40]	; (8004868 <__libc_init_array+0x44>)
 800483e:	1ba4      	subs	r4, r4, r6
 8004840:	10a4      	asrs	r4, r4, #2
 8004842:	42a5      	cmp	r5, r4
 8004844:	d105      	bne.n	8004852 <__libc_init_array+0x2e>
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800484c:	4798      	blx	r3
 800484e:	3501      	adds	r5, #1
 8004850:	e7ee      	b.n	8004830 <__libc_init_array+0xc>
 8004852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004856:	4798      	blx	r3
 8004858:	3501      	adds	r5, #1
 800485a:	e7f2      	b.n	8004842 <__libc_init_array+0x1e>
 800485c:	080074b0 	.word	0x080074b0
 8004860:	080074b0 	.word	0x080074b0
 8004864:	080074b0 	.word	0x080074b0
 8004868:	080074b4 	.word	0x080074b4

0800486c <__itoa>:
 800486c:	1e93      	subs	r3, r2, #2
 800486e:	2b22      	cmp	r3, #34	; 0x22
 8004870:	b510      	push	{r4, lr}
 8004872:	460c      	mov	r4, r1
 8004874:	d904      	bls.n	8004880 <__itoa+0x14>
 8004876:	2300      	movs	r3, #0
 8004878:	461c      	mov	r4, r3
 800487a:	700b      	strb	r3, [r1, #0]
 800487c:	4620      	mov	r0, r4
 800487e:	bd10      	pop	{r4, pc}
 8004880:	2a0a      	cmp	r2, #10
 8004882:	d109      	bne.n	8004898 <__itoa+0x2c>
 8004884:	2800      	cmp	r0, #0
 8004886:	da07      	bge.n	8004898 <__itoa+0x2c>
 8004888:	232d      	movs	r3, #45	; 0x2d
 800488a:	700b      	strb	r3, [r1, #0]
 800488c:	2101      	movs	r1, #1
 800488e:	4240      	negs	r0, r0
 8004890:	4421      	add	r1, r4
 8004892:	f000 fd23 	bl	80052dc <__utoa>
 8004896:	e7f1      	b.n	800487c <__itoa+0x10>
 8004898:	2100      	movs	r1, #0
 800489a:	e7f9      	b.n	8004890 <__itoa+0x24>

0800489c <itoa>:
 800489c:	f7ff bfe6 	b.w	800486c <__itoa>

080048a0 <memset>:
 80048a0:	4603      	mov	r3, r0
 80048a2:	4402      	add	r2, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <__cvt>:
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b6:	461e      	mov	r6, r3
 80048b8:	bfbb      	ittet	lt
 80048ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048be:	461e      	movlt	r6, r3
 80048c0:	2300      	movge	r3, #0
 80048c2:	232d      	movlt	r3, #45	; 0x2d
 80048c4:	b088      	sub	sp, #32
 80048c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80048c8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80048cc:	f027 0720 	bic.w	r7, r7, #32
 80048d0:	2f46      	cmp	r7, #70	; 0x46
 80048d2:	4614      	mov	r4, r2
 80048d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048d6:	700b      	strb	r3, [r1, #0]
 80048d8:	d004      	beq.n	80048e4 <__cvt+0x34>
 80048da:	2f45      	cmp	r7, #69	; 0x45
 80048dc:	d100      	bne.n	80048e0 <__cvt+0x30>
 80048de:	3501      	adds	r5, #1
 80048e0:	2302      	movs	r3, #2
 80048e2:	e000      	b.n	80048e6 <__cvt+0x36>
 80048e4:	2303      	movs	r3, #3
 80048e6:	aa07      	add	r2, sp, #28
 80048e8:	9204      	str	r2, [sp, #16]
 80048ea:	aa06      	add	r2, sp, #24
 80048ec:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048f0:	e9cd 3500 	strd	r3, r5, [sp]
 80048f4:	4622      	mov	r2, r4
 80048f6:	4633      	mov	r3, r6
 80048f8:	f000 fdbe 	bl	8005478 <_dtoa_r>
 80048fc:	2f47      	cmp	r7, #71	; 0x47
 80048fe:	4680      	mov	r8, r0
 8004900:	d102      	bne.n	8004908 <__cvt+0x58>
 8004902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004904:	07db      	lsls	r3, r3, #31
 8004906:	d526      	bpl.n	8004956 <__cvt+0xa6>
 8004908:	2f46      	cmp	r7, #70	; 0x46
 800490a:	eb08 0905 	add.w	r9, r8, r5
 800490e:	d111      	bne.n	8004934 <__cvt+0x84>
 8004910:	f898 3000 	ldrb.w	r3, [r8]
 8004914:	2b30      	cmp	r3, #48	; 0x30
 8004916:	d10a      	bne.n	800492e <__cvt+0x7e>
 8004918:	2200      	movs	r2, #0
 800491a:	2300      	movs	r3, #0
 800491c:	4620      	mov	r0, r4
 800491e:	4631      	mov	r1, r6
 8004920:	f7fc f842 	bl	80009a8 <__aeabi_dcmpeq>
 8004924:	b918      	cbnz	r0, 800492e <__cvt+0x7e>
 8004926:	f1c5 0501 	rsb	r5, r5, #1
 800492a:	f8ca 5000 	str.w	r5, [sl]
 800492e:	f8da 3000 	ldr.w	r3, [sl]
 8004932:	4499      	add	r9, r3
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	4620      	mov	r0, r4
 800493a:	4631      	mov	r1, r6
 800493c:	f7fc f834 	bl	80009a8 <__aeabi_dcmpeq>
 8004940:	b938      	cbnz	r0, 8004952 <__cvt+0xa2>
 8004942:	2230      	movs	r2, #48	; 0x30
 8004944:	9b07      	ldr	r3, [sp, #28]
 8004946:	454b      	cmp	r3, r9
 8004948:	d205      	bcs.n	8004956 <__cvt+0xa6>
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	9107      	str	r1, [sp, #28]
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	e7f8      	b.n	8004944 <__cvt+0x94>
 8004952:	f8cd 901c 	str.w	r9, [sp, #28]
 8004956:	4640      	mov	r0, r8
 8004958:	9b07      	ldr	r3, [sp, #28]
 800495a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800495c:	eba3 0308 	sub.w	r3, r3, r8
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	b008      	add	sp, #32
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004968 <__exponent>:
 8004968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800496a:	2900      	cmp	r1, #0
 800496c:	bfb4      	ite	lt
 800496e:	232d      	movlt	r3, #45	; 0x2d
 8004970:	232b      	movge	r3, #43	; 0x2b
 8004972:	4604      	mov	r4, r0
 8004974:	bfb8      	it	lt
 8004976:	4249      	neglt	r1, r1
 8004978:	2909      	cmp	r1, #9
 800497a:	f804 2b02 	strb.w	r2, [r4], #2
 800497e:	7043      	strb	r3, [r0, #1]
 8004980:	dd21      	ble.n	80049c6 <__exponent+0x5e>
 8004982:	f10d 0307 	add.w	r3, sp, #7
 8004986:	461f      	mov	r7, r3
 8004988:	260a      	movs	r6, #10
 800498a:	fb91 f5f6 	sdiv	r5, r1, r6
 800498e:	fb06 1115 	mls	r1, r6, r5, r1
 8004992:	2d09      	cmp	r5, #9
 8004994:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004998:	f803 1c01 	strb.w	r1, [r3, #-1]
 800499c:	f103 32ff 	add.w	r2, r3, #4294967295
 80049a0:	4629      	mov	r1, r5
 80049a2:	dc09      	bgt.n	80049b8 <__exponent+0x50>
 80049a4:	3130      	adds	r1, #48	; 0x30
 80049a6:	3b02      	subs	r3, #2
 80049a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049ac:	42bb      	cmp	r3, r7
 80049ae:	4622      	mov	r2, r4
 80049b0:	d304      	bcc.n	80049bc <__exponent+0x54>
 80049b2:	1a10      	subs	r0, r2, r0
 80049b4:	b003      	add	sp, #12
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b8:	4613      	mov	r3, r2
 80049ba:	e7e6      	b.n	800498a <__exponent+0x22>
 80049bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049c0:	f804 2b01 	strb.w	r2, [r4], #1
 80049c4:	e7f2      	b.n	80049ac <__exponent+0x44>
 80049c6:	2330      	movs	r3, #48	; 0x30
 80049c8:	4419      	add	r1, r3
 80049ca:	7083      	strb	r3, [r0, #2]
 80049cc:	1d02      	adds	r2, r0, #4
 80049ce:	70c1      	strb	r1, [r0, #3]
 80049d0:	e7ef      	b.n	80049b2 <__exponent+0x4a>
	...

080049d4 <_printf_float>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	b091      	sub	sp, #68	; 0x44
 80049da:	460c      	mov	r4, r1
 80049dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80049de:	4693      	mov	fp, r2
 80049e0:	461e      	mov	r6, r3
 80049e2:	4605      	mov	r5, r0
 80049e4:	f001 fc76 	bl	80062d4 <_localeconv_r>
 80049e8:	6803      	ldr	r3, [r0, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	9309      	str	r3, [sp, #36]	; 0x24
 80049ee:	f7fb fbaf 	bl	8000150 <strlen>
 80049f2:	2300      	movs	r3, #0
 80049f4:	930e      	str	r3, [sp, #56]	; 0x38
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	900a      	str	r0, [sp, #40]	; 0x28
 80049fa:	3307      	adds	r3, #7
 80049fc:	f023 0307 	bic.w	r3, r3, #7
 8004a00:	f103 0208 	add.w	r2, r3, #8
 8004a04:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004a08:	f8d4 a000 	ldr.w	sl, [r4]
 8004a0c:	603a      	str	r2, [r7, #0]
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a16:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004a1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a20:	f04f 32ff 	mov.w	r2, #4294967295
 8004a24:	4ba6      	ldr	r3, [pc, #664]	; (8004cc0 <_printf_float+0x2ec>)
 8004a26:	4638      	mov	r0, r7
 8004a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a2a:	f7fb ffef 	bl	8000a0c <__aeabi_dcmpun>
 8004a2e:	bb68      	cbnz	r0, 8004a8c <_printf_float+0xb8>
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295
 8004a34:	4ba2      	ldr	r3, [pc, #648]	; (8004cc0 <_printf_float+0x2ec>)
 8004a36:	4638      	mov	r0, r7
 8004a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a3a:	f7fb ffc9 	bl	80009d0 <__aeabi_dcmple>
 8004a3e:	bb28      	cbnz	r0, 8004a8c <_printf_float+0xb8>
 8004a40:	2200      	movs	r2, #0
 8004a42:	2300      	movs	r3, #0
 8004a44:	4638      	mov	r0, r7
 8004a46:	4649      	mov	r1, r9
 8004a48:	f7fb ffb8 	bl	80009bc <__aeabi_dcmplt>
 8004a4c:	b110      	cbz	r0, 8004a54 <_printf_float+0x80>
 8004a4e:	232d      	movs	r3, #45	; 0x2d
 8004a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a54:	4f9b      	ldr	r7, [pc, #620]	; (8004cc4 <_printf_float+0x2f0>)
 8004a56:	4b9c      	ldr	r3, [pc, #624]	; (8004cc8 <_printf_float+0x2f4>)
 8004a58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a5c:	bf98      	it	ls
 8004a5e:	461f      	movls	r7, r3
 8004a60:	2303      	movs	r3, #3
 8004a62:	f04f 0900 	mov.w	r9, #0
 8004a66:	6123      	str	r3, [r4, #16]
 8004a68:	f02a 0304 	bic.w	r3, sl, #4
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	9600      	str	r6, [sp, #0]
 8004a70:	465b      	mov	r3, fp
 8004a72:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a74:	4621      	mov	r1, r4
 8004a76:	4628      	mov	r0, r5
 8004a78:	f000 f9e2 	bl	8004e40 <_printf_common>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f040 8090 	bne.w	8004ba2 <_printf_float+0x1ce>
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	b011      	add	sp, #68	; 0x44
 8004a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8c:	463a      	mov	r2, r7
 8004a8e:	464b      	mov	r3, r9
 8004a90:	4638      	mov	r0, r7
 8004a92:	4649      	mov	r1, r9
 8004a94:	f7fb ffba 	bl	8000a0c <__aeabi_dcmpun>
 8004a98:	b110      	cbz	r0, 8004aa0 <_printf_float+0xcc>
 8004a9a:	4f8c      	ldr	r7, [pc, #560]	; (8004ccc <_printf_float+0x2f8>)
 8004a9c:	4b8c      	ldr	r3, [pc, #560]	; (8004cd0 <_printf_float+0x2fc>)
 8004a9e:	e7db      	b.n	8004a58 <_printf_float+0x84>
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004aa6:	1c59      	adds	r1, r3, #1
 8004aa8:	a80d      	add	r0, sp, #52	; 0x34
 8004aaa:	a90e      	add	r1, sp, #56	; 0x38
 8004aac:	d140      	bne.n	8004b30 <_printf_float+0x15c>
 8004aae:	2306      	movs	r3, #6
 8004ab0:	6063      	str	r3, [r4, #4]
 8004ab2:	f04f 0c00 	mov.w	ip, #0
 8004ab6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004aba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004abe:	6863      	ldr	r3, [r4, #4]
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	463a      	mov	r2, r7
 8004aca:	464b      	mov	r3, r9
 8004acc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f7ff feed 	bl	80048b0 <__cvt>
 8004ad6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004ada:	2b47      	cmp	r3, #71	; 0x47
 8004adc:	4607      	mov	r7, r0
 8004ade:	d109      	bne.n	8004af4 <_printf_float+0x120>
 8004ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ae2:	1cd8      	adds	r0, r3, #3
 8004ae4:	db02      	blt.n	8004aec <_printf_float+0x118>
 8004ae6:	6862      	ldr	r2, [r4, #4]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	dd47      	ble.n	8004b7c <_printf_float+0x1a8>
 8004aec:	f1a8 0802 	sub.w	r8, r8, #2
 8004af0:	fa5f f888 	uxtb.w	r8, r8
 8004af4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004af8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004afa:	d824      	bhi.n	8004b46 <_printf_float+0x172>
 8004afc:	3901      	subs	r1, #1
 8004afe:	4642      	mov	r2, r8
 8004b00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b04:	910d      	str	r1, [sp, #52]	; 0x34
 8004b06:	f7ff ff2f 	bl	8004968 <__exponent>
 8004b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b0c:	4681      	mov	r9, r0
 8004b0e:	1813      	adds	r3, r2, r0
 8004b10:	2a01      	cmp	r2, #1
 8004b12:	6123      	str	r3, [r4, #16]
 8004b14:	dc02      	bgt.n	8004b1c <_printf_float+0x148>
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	07d1      	lsls	r1, r2, #31
 8004b1a:	d501      	bpl.n	8004b20 <_printf_float+0x14c>
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0a2      	beq.n	8004a6e <_printf_float+0x9a>
 8004b28:	232d      	movs	r3, #45	; 0x2d
 8004b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2e:	e79e      	b.n	8004a6e <_printf_float+0x9a>
 8004b30:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004b34:	f000 816e 	beq.w	8004e14 <_printf_float+0x440>
 8004b38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b3c:	d1b9      	bne.n	8004ab2 <_printf_float+0xde>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1b7      	bne.n	8004ab2 <_printf_float+0xde>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e7b4      	b.n	8004ab0 <_printf_float+0xdc>
 8004b46:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004b4a:	d119      	bne.n	8004b80 <_printf_float+0x1ac>
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	6863      	ldr	r3, [r4, #4]
 8004b50:	dd0c      	ble.n	8004b6c <_printf_float+0x198>
 8004b52:	6121      	str	r1, [r4, #16]
 8004b54:	b913      	cbnz	r3, 8004b5c <_printf_float+0x188>
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	07d2      	lsls	r2, r2, #31
 8004b5a:	d502      	bpl.n	8004b62 <_printf_float+0x18e>
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	440b      	add	r3, r1
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b64:	f04f 0900 	mov.w	r9, #0
 8004b68:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b6a:	e7d9      	b.n	8004b20 <_printf_float+0x14c>
 8004b6c:	b913      	cbnz	r3, 8004b74 <_printf_float+0x1a0>
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	07d0      	lsls	r0, r2, #31
 8004b72:	d501      	bpl.n	8004b78 <_printf_float+0x1a4>
 8004b74:	3302      	adds	r3, #2
 8004b76:	e7f3      	b.n	8004b60 <_printf_float+0x18c>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e7f1      	b.n	8004b60 <_printf_float+0x18c>
 8004b7c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004b80:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004b84:	4293      	cmp	r3, r2
 8004b86:	db05      	blt.n	8004b94 <_printf_float+0x1c0>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	6123      	str	r3, [r4, #16]
 8004b8c:	07d1      	lsls	r1, r2, #31
 8004b8e:	d5e8      	bpl.n	8004b62 <_printf_float+0x18e>
 8004b90:	3301      	adds	r3, #1
 8004b92:	e7e5      	b.n	8004b60 <_printf_float+0x18c>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bfcc      	ite	gt
 8004b98:	2301      	movgt	r3, #1
 8004b9a:	f1c3 0302 	rsble	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	e7de      	b.n	8004b60 <_printf_float+0x18c>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	055a      	lsls	r2, r3, #21
 8004ba6:	d407      	bmi.n	8004bb8 <_printf_float+0x1e4>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	463a      	mov	r2, r7
 8004bac:	4659      	mov	r1, fp
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b0      	blx	r6
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d129      	bne.n	8004c0a <_printf_float+0x236>
 8004bb6:	e764      	b.n	8004a82 <_printf_float+0xae>
 8004bb8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004bbc:	f240 80d7 	bls.w	8004d6e <_printf_float+0x39a>
 8004bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f7fb feee 	bl	80009a8 <__aeabi_dcmpeq>
 8004bcc:	b388      	cbz	r0, 8004c32 <_printf_float+0x25e>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4a40      	ldr	r2, [pc, #256]	; (8004cd4 <_printf_float+0x300>)
 8004bd2:	4659      	mov	r1, fp
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b0      	blx	r6
 8004bd8:	3001      	adds	r0, #1
 8004bda:	f43f af52 	beq.w	8004a82 <_printf_float+0xae>
 8004bde:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004be2:	429a      	cmp	r2, r3
 8004be4:	db02      	blt.n	8004bec <_printf_float+0x218>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	07d8      	lsls	r0, r3, #31
 8004bea:	d50e      	bpl.n	8004c0a <_printf_float+0x236>
 8004bec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bf0:	4659      	mov	r1, fp
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	47b0      	blx	r6
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	f43f af43 	beq.w	8004a82 <_printf_float+0xae>
 8004bfc:	2700      	movs	r7, #0
 8004bfe:	f104 081a 	add.w	r8, r4, #26
 8004c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c04:	3b01      	subs	r3, #1
 8004c06:	42bb      	cmp	r3, r7
 8004c08:	dc09      	bgt.n	8004c1e <_printf_float+0x24a>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	079f      	lsls	r7, r3, #30
 8004c0e:	f100 80fd 	bmi.w	8004e0c <_printf_float+0x438>
 8004c12:	68e0      	ldr	r0, [r4, #12]
 8004c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c16:	4298      	cmp	r0, r3
 8004c18:	bfb8      	it	lt
 8004c1a:	4618      	movlt	r0, r3
 8004c1c:	e733      	b.n	8004a86 <_printf_float+0xb2>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4642      	mov	r2, r8
 8004c22:	4659      	mov	r1, fp
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b0      	blx	r6
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f af2a 	beq.w	8004a82 <_printf_float+0xae>
 8004c2e:	3701      	adds	r7, #1
 8004c30:	e7e7      	b.n	8004c02 <_printf_float+0x22e>
 8004c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	dc2b      	bgt.n	8004c90 <_printf_float+0x2bc>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4a26      	ldr	r2, [pc, #152]	; (8004cd4 <_printf_float+0x300>)
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b0      	blx	r6
 8004c42:	3001      	adds	r0, #1
 8004c44:	f43f af1d 	beq.w	8004a82 <_printf_float+0xae>
 8004c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c4a:	b923      	cbnz	r3, 8004c56 <_printf_float+0x282>
 8004c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c4e:	b913      	cbnz	r3, 8004c56 <_printf_float+0x282>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	07d9      	lsls	r1, r3, #31
 8004c54:	d5d9      	bpl.n	8004c0a <_printf_float+0x236>
 8004c56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c5a:	4659      	mov	r1, fp
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	47b0      	blx	r6
 8004c60:	3001      	adds	r0, #1
 8004c62:	f43f af0e 	beq.w	8004a82 <_printf_float+0xae>
 8004c66:	f04f 0800 	mov.w	r8, #0
 8004c6a:	f104 091a 	add.w	r9, r4, #26
 8004c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c70:	425b      	negs	r3, r3
 8004c72:	4543      	cmp	r3, r8
 8004c74:	dc01      	bgt.n	8004c7a <_printf_float+0x2a6>
 8004c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c78:	e797      	b.n	8004baa <_printf_float+0x1d6>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	464a      	mov	r2, r9
 8004c7e:	4659      	mov	r1, fp
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b0      	blx	r6
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f aefc 	beq.w	8004a82 <_printf_float+0xae>
 8004c8a:	f108 0801 	add.w	r8, r8, #1
 8004c8e:	e7ee      	b.n	8004c6e <_printf_float+0x29a>
 8004c90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c94:	429a      	cmp	r2, r3
 8004c96:	bfa8      	it	ge
 8004c98:	461a      	movge	r2, r3
 8004c9a:	2a00      	cmp	r2, #0
 8004c9c:	4690      	mov	r8, r2
 8004c9e:	dd07      	ble.n	8004cb0 <_printf_float+0x2dc>
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	4659      	mov	r1, fp
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	47b0      	blx	r6
 8004caa:	3001      	adds	r0, #1
 8004cac:	f43f aee9 	beq.w	8004a82 <_printf_float+0xae>
 8004cb0:	f104 031a 	add.w	r3, r4, #26
 8004cb4:	f04f 0a00 	mov.w	sl, #0
 8004cb8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cbe:	e015      	b.n	8004cec <_printf_float+0x318>
 8004cc0:	7fefffff 	.word	0x7fefffff
 8004cc4:	080071d4 	.word	0x080071d4
 8004cc8:	080071d0 	.word	0x080071d0
 8004ccc:	080071dc 	.word	0x080071dc
 8004cd0:	080071d8 	.word	0x080071d8
 8004cd4:	080071e0 	.word	0x080071e0
 8004cd8:	2301      	movs	r3, #1
 8004cda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cdc:	4659      	mov	r1, fp
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b0      	blx	r6
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f aecd 	beq.w	8004a82 <_printf_float+0xae>
 8004ce8:	f10a 0a01 	add.w	sl, sl, #1
 8004cec:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004cf0:	eba9 0308 	sub.w	r3, r9, r8
 8004cf4:	4553      	cmp	r3, sl
 8004cf6:	dcef      	bgt.n	8004cd8 <_printf_float+0x304>
 8004cf8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	444f      	add	r7, r9
 8004d00:	db14      	blt.n	8004d2c <_printf_float+0x358>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	07da      	lsls	r2, r3, #31
 8004d06:	d411      	bmi.n	8004d2c <_printf_float+0x358>
 8004d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d0c:	eba3 0209 	sub.w	r2, r3, r9
 8004d10:	eba3 0901 	sub.w	r9, r3, r1
 8004d14:	4591      	cmp	r9, r2
 8004d16:	bfa8      	it	ge
 8004d18:	4691      	movge	r9, r2
 8004d1a:	f1b9 0f00 	cmp.w	r9, #0
 8004d1e:	dc0d      	bgt.n	8004d3c <_printf_float+0x368>
 8004d20:	2700      	movs	r7, #0
 8004d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d26:	f104 081a 	add.w	r8, r4, #26
 8004d2a:	e018      	b.n	8004d5e <_printf_float+0x38a>
 8004d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d30:	4659      	mov	r1, fp
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b0      	blx	r6
 8004d36:	3001      	adds	r0, #1
 8004d38:	d1e6      	bne.n	8004d08 <_printf_float+0x334>
 8004d3a:	e6a2      	b.n	8004a82 <_printf_float+0xae>
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	463a      	mov	r2, r7
 8004d40:	4659      	mov	r1, fp
 8004d42:	4628      	mov	r0, r5
 8004d44:	47b0      	blx	r6
 8004d46:	3001      	adds	r0, #1
 8004d48:	d1ea      	bne.n	8004d20 <_printf_float+0x34c>
 8004d4a:	e69a      	b.n	8004a82 <_printf_float+0xae>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4642      	mov	r2, r8
 8004d50:	4659      	mov	r1, fp
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b0      	blx	r6
 8004d56:	3001      	adds	r0, #1
 8004d58:	f43f ae93 	beq.w	8004a82 <_printf_float+0xae>
 8004d5c:	3701      	adds	r7, #1
 8004d5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	eba3 0309 	sub.w	r3, r3, r9
 8004d68:	42bb      	cmp	r3, r7
 8004d6a:	dcef      	bgt.n	8004d4c <_printf_float+0x378>
 8004d6c:	e74d      	b.n	8004c0a <_printf_float+0x236>
 8004d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d70:	2a01      	cmp	r2, #1
 8004d72:	dc01      	bgt.n	8004d78 <_printf_float+0x3a4>
 8004d74:	07db      	lsls	r3, r3, #31
 8004d76:	d538      	bpl.n	8004dea <_printf_float+0x416>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	463a      	mov	r2, r7
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b0      	blx	r6
 8004d82:	3001      	adds	r0, #1
 8004d84:	f43f ae7d 	beq.w	8004a82 <_printf_float+0xae>
 8004d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b0      	blx	r6
 8004d92:	3001      	adds	r0, #1
 8004d94:	f107 0701 	add.w	r7, r7, #1
 8004d98:	f43f ae73 	beq.w	8004a82 <_printf_float+0xae>
 8004d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004da2:	2200      	movs	r2, #0
 8004da4:	f103 38ff 	add.w	r8, r3, #4294967295
 8004da8:	2300      	movs	r3, #0
 8004daa:	f7fb fdfd 	bl	80009a8 <__aeabi_dcmpeq>
 8004dae:	b9c0      	cbnz	r0, 8004de2 <_printf_float+0x40e>
 8004db0:	4643      	mov	r3, r8
 8004db2:	463a      	mov	r2, r7
 8004db4:	4659      	mov	r1, fp
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b0      	blx	r6
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d10d      	bne.n	8004dda <_printf_float+0x406>
 8004dbe:	e660      	b.n	8004a82 <_printf_float+0xae>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4642      	mov	r2, r8
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	47b0      	blx	r6
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f43f ae59 	beq.w	8004a82 <_printf_float+0xae>
 8004dd0:	3701      	adds	r7, #1
 8004dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	42bb      	cmp	r3, r7
 8004dd8:	dcf2      	bgt.n	8004dc0 <_printf_float+0x3ec>
 8004dda:	464b      	mov	r3, r9
 8004ddc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004de0:	e6e4      	b.n	8004bac <_printf_float+0x1d8>
 8004de2:	2700      	movs	r7, #0
 8004de4:	f104 081a 	add.w	r8, r4, #26
 8004de8:	e7f3      	b.n	8004dd2 <_printf_float+0x3fe>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e7e1      	b.n	8004db2 <_printf_float+0x3de>
 8004dee:	2301      	movs	r3, #1
 8004df0:	4642      	mov	r2, r8
 8004df2:	4659      	mov	r1, fp
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b0      	blx	r6
 8004df8:	3001      	adds	r0, #1
 8004dfa:	f43f ae42 	beq.w	8004a82 <_printf_float+0xae>
 8004dfe:	3701      	adds	r7, #1
 8004e00:	68e3      	ldr	r3, [r4, #12]
 8004e02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	42bb      	cmp	r3, r7
 8004e08:	dcf1      	bgt.n	8004dee <_printf_float+0x41a>
 8004e0a:	e702      	b.n	8004c12 <_printf_float+0x23e>
 8004e0c:	2700      	movs	r7, #0
 8004e0e:	f104 0819 	add.w	r8, r4, #25
 8004e12:	e7f5      	b.n	8004e00 <_printf_float+0x42c>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f43f ae94 	beq.w	8004b42 <_printf_float+0x16e>
 8004e1a:	f04f 0c00 	mov.w	ip, #0
 8004e1e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004e22:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004e26:	6022      	str	r2, [r4, #0]
 8004e28:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004e2c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	463a      	mov	r2, r7
 8004e34:	464b      	mov	r3, r9
 8004e36:	4628      	mov	r0, r5
 8004e38:	f7ff fd3a 	bl	80048b0 <__cvt>
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	e64f      	b.n	8004ae0 <_printf_float+0x10c>

08004e40 <_printf_common>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	4691      	mov	r9, r2
 8004e46:	461f      	mov	r7, r3
 8004e48:	688a      	ldr	r2, [r1, #8]
 8004e4a:	690b      	ldr	r3, [r1, #16]
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	bfb8      	it	lt
 8004e52:	4613      	movlt	r3, r2
 8004e54:	f8c9 3000 	str.w	r3, [r9]
 8004e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e62:	b112      	cbz	r2, 8004e6a <_printf_common+0x2a>
 8004e64:	3301      	adds	r3, #1
 8004e66:	f8c9 3000 	str.w	r3, [r9]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	0699      	lsls	r1, r3, #26
 8004e6e:	bf42      	ittt	mi
 8004e70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e74:	3302      	addmi	r3, #2
 8004e76:	f8c9 3000 	strmi.w	r3, [r9]
 8004e7a:	6825      	ldr	r5, [r4, #0]
 8004e7c:	f015 0506 	ands.w	r5, r5, #6
 8004e80:	d107      	bne.n	8004e92 <_printf_common+0x52>
 8004e82:	f104 0a19 	add.w	sl, r4, #25
 8004e86:	68e3      	ldr	r3, [r4, #12]
 8004e88:	f8d9 2000 	ldr.w	r2, [r9]
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	42ab      	cmp	r3, r5
 8004e90:	dc29      	bgt.n	8004ee6 <_printf_common+0xa6>
 8004e92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	3300      	adds	r3, #0
 8004e9a:	bf18      	it	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	0692      	lsls	r2, r2, #26
 8004ea0:	d42e      	bmi.n	8004f00 <_printf_common+0xc0>
 8004ea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	47c0      	blx	r8
 8004eac:	3001      	adds	r0, #1
 8004eae:	d021      	beq.n	8004ef4 <_printf_common+0xb4>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	68e5      	ldr	r5, [r4, #12]
 8004eb4:	f003 0306 	and.w	r3, r3, #6
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	bf18      	it	ne
 8004ebc:	2500      	movne	r5, #0
 8004ebe:	f8d9 2000 	ldr.w	r2, [r9]
 8004ec2:	f04f 0900 	mov.w	r9, #0
 8004ec6:	bf08      	it	eq
 8004ec8:	1aad      	subeq	r5, r5, r2
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	bf08      	it	eq
 8004ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	bfc4      	itt	gt
 8004ed8:	1a9b      	subgt	r3, r3, r2
 8004eda:	18ed      	addgt	r5, r5, r3
 8004edc:	341a      	adds	r4, #26
 8004ede:	454d      	cmp	r5, r9
 8004ee0:	d11a      	bne.n	8004f18 <_printf_common+0xd8>
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	e008      	b.n	8004ef8 <_printf_common+0xb8>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4652      	mov	r2, sl
 8004eea:	4639      	mov	r1, r7
 8004eec:	4630      	mov	r0, r6
 8004eee:	47c0      	blx	r8
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d103      	bne.n	8004efc <_printf_common+0xbc>
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efc:	3501      	adds	r5, #1
 8004efe:	e7c2      	b.n	8004e86 <_printf_common+0x46>
 8004f00:	2030      	movs	r0, #48	; 0x30
 8004f02:	18e1      	adds	r1, r4, r3
 8004f04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f0e:	4422      	add	r2, r4
 8004f10:	3302      	adds	r3, #2
 8004f12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f16:	e7c4      	b.n	8004ea2 <_printf_common+0x62>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4622      	mov	r2, r4
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	47c0      	blx	r8
 8004f22:	3001      	adds	r0, #1
 8004f24:	d0e6      	beq.n	8004ef4 <_printf_common+0xb4>
 8004f26:	f109 0901 	add.w	r9, r9, #1
 8004f2a:	e7d8      	b.n	8004ede <_printf_common+0x9e>

08004f2c <_printf_i>:
 8004f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f34:	460c      	mov	r4, r1
 8004f36:	7e09      	ldrb	r1, [r1, #24]
 8004f38:	b085      	sub	sp, #20
 8004f3a:	296e      	cmp	r1, #110	; 0x6e
 8004f3c:	4617      	mov	r7, r2
 8004f3e:	4606      	mov	r6, r0
 8004f40:	4698      	mov	r8, r3
 8004f42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f44:	f000 80b3 	beq.w	80050ae <_printf_i+0x182>
 8004f48:	d822      	bhi.n	8004f90 <_printf_i+0x64>
 8004f4a:	2963      	cmp	r1, #99	; 0x63
 8004f4c:	d036      	beq.n	8004fbc <_printf_i+0x90>
 8004f4e:	d80a      	bhi.n	8004f66 <_printf_i+0x3a>
 8004f50:	2900      	cmp	r1, #0
 8004f52:	f000 80b9 	beq.w	80050c8 <_printf_i+0x19c>
 8004f56:	2958      	cmp	r1, #88	; 0x58
 8004f58:	f000 8083 	beq.w	8005062 <_printf_i+0x136>
 8004f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f64:	e032      	b.n	8004fcc <_printf_i+0xa0>
 8004f66:	2964      	cmp	r1, #100	; 0x64
 8004f68:	d001      	beq.n	8004f6e <_printf_i+0x42>
 8004f6a:	2969      	cmp	r1, #105	; 0x69
 8004f6c:	d1f6      	bne.n	8004f5c <_printf_i+0x30>
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	6813      	ldr	r3, [r2, #0]
 8004f72:	0605      	lsls	r5, r0, #24
 8004f74:	f103 0104 	add.w	r1, r3, #4
 8004f78:	d52a      	bpl.n	8004fd0 <_printf_i+0xa4>
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6011      	str	r1, [r2, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	da03      	bge.n	8004f8a <_printf_i+0x5e>
 8004f82:	222d      	movs	r2, #45	; 0x2d
 8004f84:	425b      	negs	r3, r3
 8004f86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f8a:	486f      	ldr	r0, [pc, #444]	; (8005148 <_printf_i+0x21c>)
 8004f8c:	220a      	movs	r2, #10
 8004f8e:	e039      	b.n	8005004 <_printf_i+0xd8>
 8004f90:	2973      	cmp	r1, #115	; 0x73
 8004f92:	f000 809d 	beq.w	80050d0 <_printf_i+0x1a4>
 8004f96:	d808      	bhi.n	8004faa <_printf_i+0x7e>
 8004f98:	296f      	cmp	r1, #111	; 0x6f
 8004f9a:	d020      	beq.n	8004fde <_printf_i+0xb2>
 8004f9c:	2970      	cmp	r1, #112	; 0x70
 8004f9e:	d1dd      	bne.n	8004f5c <_printf_i+0x30>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	f043 0320 	orr.w	r3, r3, #32
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	e003      	b.n	8004fb2 <_printf_i+0x86>
 8004faa:	2975      	cmp	r1, #117	; 0x75
 8004fac:	d017      	beq.n	8004fde <_printf_i+0xb2>
 8004fae:	2978      	cmp	r1, #120	; 0x78
 8004fb0:	d1d4      	bne.n	8004f5c <_printf_i+0x30>
 8004fb2:	2378      	movs	r3, #120	; 0x78
 8004fb4:	4865      	ldr	r0, [pc, #404]	; (800514c <_printf_i+0x220>)
 8004fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fba:	e055      	b.n	8005068 <_printf_i+0x13c>
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc2:	1d19      	adds	r1, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6011      	str	r1, [r2, #0]
 8004fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e08c      	b.n	80050ea <_printf_i+0x1be>
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fd6:	6011      	str	r1, [r2, #0]
 8004fd8:	bf18      	it	ne
 8004fda:	b21b      	sxthne	r3, r3
 8004fdc:	e7cf      	b.n	8004f7e <_printf_i+0x52>
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	6825      	ldr	r5, [r4, #0]
 8004fe2:	1d18      	adds	r0, r3, #4
 8004fe4:	6010      	str	r0, [r2, #0]
 8004fe6:	0628      	lsls	r0, r5, #24
 8004fe8:	d501      	bpl.n	8004fee <_printf_i+0xc2>
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	e002      	b.n	8004ff4 <_printf_i+0xc8>
 8004fee:	0668      	lsls	r0, r5, #25
 8004ff0:	d5fb      	bpl.n	8004fea <_printf_i+0xbe>
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	296f      	cmp	r1, #111	; 0x6f
 8004ff6:	bf14      	ite	ne
 8004ff8:	220a      	movne	r2, #10
 8004ffa:	2208      	moveq	r2, #8
 8004ffc:	4852      	ldr	r0, [pc, #328]	; (8005148 <_printf_i+0x21c>)
 8004ffe:	2100      	movs	r1, #0
 8005000:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005004:	6865      	ldr	r5, [r4, #4]
 8005006:	2d00      	cmp	r5, #0
 8005008:	60a5      	str	r5, [r4, #8]
 800500a:	f2c0 8095 	blt.w	8005138 <_printf_i+0x20c>
 800500e:	6821      	ldr	r1, [r4, #0]
 8005010:	f021 0104 	bic.w	r1, r1, #4
 8005014:	6021      	str	r1, [r4, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d13d      	bne.n	8005096 <_printf_i+0x16a>
 800501a:	2d00      	cmp	r5, #0
 800501c:	f040 808e 	bne.w	800513c <_printf_i+0x210>
 8005020:	4665      	mov	r5, ip
 8005022:	2a08      	cmp	r2, #8
 8005024:	d10b      	bne.n	800503e <_printf_i+0x112>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	07db      	lsls	r3, r3, #31
 800502a:	d508      	bpl.n	800503e <_printf_i+0x112>
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	bfde      	ittt	le
 8005034:	2330      	movle	r3, #48	; 0x30
 8005036:	f805 3c01 	strble.w	r3, [r5, #-1]
 800503a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800503e:	ebac 0305 	sub.w	r3, ip, r5
 8005042:	6123      	str	r3, [r4, #16]
 8005044:	f8cd 8000 	str.w	r8, [sp]
 8005048:	463b      	mov	r3, r7
 800504a:	aa03      	add	r2, sp, #12
 800504c:	4621      	mov	r1, r4
 800504e:	4630      	mov	r0, r6
 8005050:	f7ff fef6 	bl	8004e40 <_printf_common>
 8005054:	3001      	adds	r0, #1
 8005056:	d14d      	bne.n	80050f4 <_printf_i+0x1c8>
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	b005      	add	sp, #20
 800505e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005062:	4839      	ldr	r0, [pc, #228]	; (8005148 <_printf_i+0x21c>)
 8005064:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005068:	6813      	ldr	r3, [r2, #0]
 800506a:	6821      	ldr	r1, [r4, #0]
 800506c:	1d1d      	adds	r5, r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6015      	str	r5, [r2, #0]
 8005072:	060a      	lsls	r2, r1, #24
 8005074:	d50b      	bpl.n	800508e <_printf_i+0x162>
 8005076:	07ca      	lsls	r2, r1, #31
 8005078:	bf44      	itt	mi
 800507a:	f041 0120 	orrmi.w	r1, r1, #32
 800507e:	6021      	strmi	r1, [r4, #0]
 8005080:	b91b      	cbnz	r3, 800508a <_printf_i+0x15e>
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	f022 0220 	bic.w	r2, r2, #32
 8005088:	6022      	str	r2, [r4, #0]
 800508a:	2210      	movs	r2, #16
 800508c:	e7b7      	b.n	8004ffe <_printf_i+0xd2>
 800508e:	064d      	lsls	r5, r1, #25
 8005090:	bf48      	it	mi
 8005092:	b29b      	uxthmi	r3, r3
 8005094:	e7ef      	b.n	8005076 <_printf_i+0x14a>
 8005096:	4665      	mov	r5, ip
 8005098:	fbb3 f1f2 	udiv	r1, r3, r2
 800509c:	fb02 3311 	mls	r3, r2, r1, r3
 80050a0:	5cc3      	ldrb	r3, [r0, r3]
 80050a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050a6:	460b      	mov	r3, r1
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d1f5      	bne.n	8005098 <_printf_i+0x16c>
 80050ac:	e7b9      	b.n	8005022 <_printf_i+0xf6>
 80050ae:	6813      	ldr	r3, [r2, #0]
 80050b0:	6825      	ldr	r5, [r4, #0]
 80050b2:	1d18      	adds	r0, r3, #4
 80050b4:	6961      	ldr	r1, [r4, #20]
 80050b6:	6010      	str	r0, [r2, #0]
 80050b8:	0628      	lsls	r0, r5, #24
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	d501      	bpl.n	80050c2 <_printf_i+0x196>
 80050be:	6019      	str	r1, [r3, #0]
 80050c0:	e002      	b.n	80050c8 <_printf_i+0x19c>
 80050c2:	066a      	lsls	r2, r5, #25
 80050c4:	d5fb      	bpl.n	80050be <_printf_i+0x192>
 80050c6:	8019      	strh	r1, [r3, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	4665      	mov	r5, ip
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	e7b9      	b.n	8005044 <_printf_i+0x118>
 80050d0:	6813      	ldr	r3, [r2, #0]
 80050d2:	1d19      	adds	r1, r3, #4
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	681d      	ldr	r5, [r3, #0]
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	2100      	movs	r1, #0
 80050dc:	4628      	mov	r0, r5
 80050de:	f001 f973 	bl	80063c8 <memchr>
 80050e2:	b108      	cbz	r0, 80050e8 <_printf_i+0x1bc>
 80050e4:	1b40      	subs	r0, r0, r5
 80050e6:	6060      	str	r0, [r4, #4]
 80050e8:	6863      	ldr	r3, [r4, #4]
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	2300      	movs	r3, #0
 80050ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f2:	e7a7      	b.n	8005044 <_printf_i+0x118>
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	462a      	mov	r2, r5
 80050f8:	4639      	mov	r1, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	47c0      	blx	r8
 80050fe:	3001      	adds	r0, #1
 8005100:	d0aa      	beq.n	8005058 <_printf_i+0x12c>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	079b      	lsls	r3, r3, #30
 8005106:	d413      	bmi.n	8005130 <_printf_i+0x204>
 8005108:	68e0      	ldr	r0, [r4, #12]
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	4298      	cmp	r0, r3
 800510e:	bfb8      	it	lt
 8005110:	4618      	movlt	r0, r3
 8005112:	e7a3      	b.n	800505c <_printf_i+0x130>
 8005114:	2301      	movs	r3, #1
 8005116:	464a      	mov	r2, r9
 8005118:	4639      	mov	r1, r7
 800511a:	4630      	mov	r0, r6
 800511c:	47c0      	blx	r8
 800511e:	3001      	adds	r0, #1
 8005120:	d09a      	beq.n	8005058 <_printf_i+0x12c>
 8005122:	3501      	adds	r5, #1
 8005124:	68e3      	ldr	r3, [r4, #12]
 8005126:	9a03      	ldr	r2, [sp, #12]
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	42ab      	cmp	r3, r5
 800512c:	dcf2      	bgt.n	8005114 <_printf_i+0x1e8>
 800512e:	e7eb      	b.n	8005108 <_printf_i+0x1dc>
 8005130:	2500      	movs	r5, #0
 8005132:	f104 0919 	add.w	r9, r4, #25
 8005136:	e7f5      	b.n	8005124 <_printf_i+0x1f8>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ac      	bne.n	8005096 <_printf_i+0x16a>
 800513c:	7803      	ldrb	r3, [r0, #0]
 800513e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005142:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005146:	e76c      	b.n	8005022 <_printf_i+0xf6>
 8005148:	080071e2 	.word	0x080071e2
 800514c:	080071f3 	.word	0x080071f3

08005150 <iprintf>:
 8005150:	b40f      	push	{r0, r1, r2, r3}
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <iprintf+0x2c>)
 8005154:	b513      	push	{r0, r1, r4, lr}
 8005156:	681c      	ldr	r4, [r3, #0]
 8005158:	b124      	cbz	r4, 8005164 <iprintf+0x14>
 800515a:	69a3      	ldr	r3, [r4, #24]
 800515c:	b913      	cbnz	r3, 8005164 <iprintf+0x14>
 800515e:	4620      	mov	r0, r4
 8005160:	f001 f82e 	bl	80061c0 <__sinit>
 8005164:	ab05      	add	r3, sp, #20
 8005166:	9a04      	ldr	r2, [sp, #16]
 8005168:	68a1      	ldr	r1, [r4, #8]
 800516a:	4620      	mov	r0, r4
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	f001 fcfd 	bl	8006b6c <_vfiprintf_r>
 8005172:	b002      	add	sp, #8
 8005174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005178:	b004      	add	sp, #16
 800517a:	4770      	bx	lr
 800517c:	20000014 	.word	0x20000014

08005180 <setvbuf>:
 8005180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005184:	461d      	mov	r5, r3
 8005186:	4b51      	ldr	r3, [pc, #324]	; (80052cc <setvbuf+0x14c>)
 8005188:	4604      	mov	r4, r0
 800518a:	681e      	ldr	r6, [r3, #0]
 800518c:	460f      	mov	r7, r1
 800518e:	4690      	mov	r8, r2
 8005190:	b126      	cbz	r6, 800519c <setvbuf+0x1c>
 8005192:	69b3      	ldr	r3, [r6, #24]
 8005194:	b913      	cbnz	r3, 800519c <setvbuf+0x1c>
 8005196:	4630      	mov	r0, r6
 8005198:	f001 f812 	bl	80061c0 <__sinit>
 800519c:	4b4c      	ldr	r3, [pc, #304]	; (80052d0 <setvbuf+0x150>)
 800519e:	429c      	cmp	r4, r3
 80051a0:	d152      	bne.n	8005248 <setvbuf+0xc8>
 80051a2:	6874      	ldr	r4, [r6, #4]
 80051a4:	f1b8 0f02 	cmp.w	r8, #2
 80051a8:	d006      	beq.n	80051b8 <setvbuf+0x38>
 80051aa:	f1b8 0f01 	cmp.w	r8, #1
 80051ae:	f200 8089 	bhi.w	80052c4 <setvbuf+0x144>
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	f2c0 8086 	blt.w	80052c4 <setvbuf+0x144>
 80051b8:	4621      	mov	r1, r4
 80051ba:	4630      	mov	r0, r6
 80051bc:	f000 ff96 	bl	80060ec <_fflush_r>
 80051c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051c2:	b141      	cbz	r1, 80051d6 <setvbuf+0x56>
 80051c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051c8:	4299      	cmp	r1, r3
 80051ca:	d002      	beq.n	80051d2 <setvbuf+0x52>
 80051cc:	4630      	mov	r0, r6
 80051ce:	f001 fbff 	bl	80069d0 <_free_r>
 80051d2:	2300      	movs	r3, #0
 80051d4:	6363      	str	r3, [r4, #52]	; 0x34
 80051d6:	2300      	movs	r3, #0
 80051d8:	61a3      	str	r3, [r4, #24]
 80051da:	6063      	str	r3, [r4, #4]
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	d503      	bpl.n	80051ea <setvbuf+0x6a>
 80051e2:	6921      	ldr	r1, [r4, #16]
 80051e4:	4630      	mov	r0, r6
 80051e6:	f001 fbf3 	bl	80069d0 <_free_r>
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f1b8 0f02 	cmp.w	r8, #2
 80051f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80051f4:	f023 0303 	bic.w	r3, r3, #3
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	d05d      	beq.n	80052b8 <setvbuf+0x138>
 80051fc:	ab01      	add	r3, sp, #4
 80051fe:	466a      	mov	r2, sp
 8005200:	4621      	mov	r1, r4
 8005202:	4630      	mov	r0, r6
 8005204:	f001 f874 	bl	80062f0 <__swhatbuf_r>
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	4318      	orrs	r0, r3
 800520c:	81a0      	strh	r0, [r4, #12]
 800520e:	bb2d      	cbnz	r5, 800525c <setvbuf+0xdc>
 8005210:	9d00      	ldr	r5, [sp, #0]
 8005212:	4628      	mov	r0, r5
 8005214:	f001 f8d0 	bl	80063b8 <malloc>
 8005218:	4607      	mov	r7, r0
 800521a:	2800      	cmp	r0, #0
 800521c:	d14e      	bne.n	80052bc <setvbuf+0x13c>
 800521e:	f8dd 9000 	ldr.w	r9, [sp]
 8005222:	45a9      	cmp	r9, r5
 8005224:	d13c      	bne.n	80052a0 <setvbuf+0x120>
 8005226:	f04f 30ff 	mov.w	r0, #4294967295
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	f043 0302 	orr.w	r3, r3, #2
 8005230:	81a3      	strh	r3, [r4, #12]
 8005232:	2300      	movs	r3, #0
 8005234:	60a3      	str	r3, [r4, #8]
 8005236:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	6123      	str	r3, [r4, #16]
 800523e:	2301      	movs	r3, #1
 8005240:	6163      	str	r3, [r4, #20]
 8005242:	b003      	add	sp, #12
 8005244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005248:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <setvbuf+0x154>)
 800524a:	429c      	cmp	r4, r3
 800524c:	d101      	bne.n	8005252 <setvbuf+0xd2>
 800524e:	68b4      	ldr	r4, [r6, #8]
 8005250:	e7a8      	b.n	80051a4 <setvbuf+0x24>
 8005252:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <setvbuf+0x158>)
 8005254:	429c      	cmp	r4, r3
 8005256:	bf08      	it	eq
 8005258:	68f4      	ldreq	r4, [r6, #12]
 800525a:	e7a3      	b.n	80051a4 <setvbuf+0x24>
 800525c:	2f00      	cmp	r7, #0
 800525e:	d0d8      	beq.n	8005212 <setvbuf+0x92>
 8005260:	69b3      	ldr	r3, [r6, #24]
 8005262:	b913      	cbnz	r3, 800526a <setvbuf+0xea>
 8005264:	4630      	mov	r0, r6
 8005266:	f000 ffab 	bl	80061c0 <__sinit>
 800526a:	f1b8 0f01 	cmp.w	r8, #1
 800526e:	bf08      	it	eq
 8005270:	89a3      	ldrheq	r3, [r4, #12]
 8005272:	6027      	str	r7, [r4, #0]
 8005274:	bf04      	itt	eq
 8005276:	f043 0301 	orreq.w	r3, r3, #1
 800527a:	81a3      	strheq	r3, [r4, #12]
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005282:	f013 0008 	ands.w	r0, r3, #8
 8005286:	d01b      	beq.n	80052c0 <setvbuf+0x140>
 8005288:	f013 0001 	ands.w	r0, r3, #1
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	bf1f      	itttt	ne
 8005292:	426d      	negne	r5, r5
 8005294:	60a3      	strne	r3, [r4, #8]
 8005296:	61a5      	strne	r5, [r4, #24]
 8005298:	4618      	movne	r0, r3
 800529a:	bf08      	it	eq
 800529c:	60a5      	streq	r5, [r4, #8]
 800529e:	e7d0      	b.n	8005242 <setvbuf+0xc2>
 80052a0:	4648      	mov	r0, r9
 80052a2:	f001 f889 	bl	80063b8 <malloc>
 80052a6:	4607      	mov	r7, r0
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d0bc      	beq.n	8005226 <setvbuf+0xa6>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	464d      	mov	r5, r9
 80052b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b4:	81a3      	strh	r3, [r4, #12]
 80052b6:	e7d3      	b.n	8005260 <setvbuf+0xe0>
 80052b8:	2000      	movs	r0, #0
 80052ba:	e7b6      	b.n	800522a <setvbuf+0xaa>
 80052bc:	46a9      	mov	r9, r5
 80052be:	e7f5      	b.n	80052ac <setvbuf+0x12c>
 80052c0:	60a0      	str	r0, [r4, #8]
 80052c2:	e7be      	b.n	8005242 <setvbuf+0xc2>
 80052c4:	f04f 30ff 	mov.w	r0, #4294967295
 80052c8:	e7bb      	b.n	8005242 <setvbuf+0xc2>
 80052ca:	bf00      	nop
 80052cc:	20000014 	.word	0x20000014
 80052d0:	08007258 	.word	0x08007258
 80052d4:	08007278 	.word	0x08007278
 80052d8:	08007238 	.word	0x08007238

080052dc <__utoa>:
 80052dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052de:	b08b      	sub	sp, #44	; 0x2c
 80052e0:	4605      	mov	r5, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	466e      	mov	r6, sp
 80052e6:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <__utoa+0x78>)
 80052e8:	f103 0c20 	add.w	ip, r3, #32
 80052ec:	4637      	mov	r7, r6
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	6859      	ldr	r1, [r3, #4]
 80052f2:	3308      	adds	r3, #8
 80052f4:	c703      	stmia	r7!, {r0, r1}
 80052f6:	4563      	cmp	r3, ip
 80052f8:	463e      	mov	r6, r7
 80052fa:	d1f7      	bne.n	80052ec <__utoa+0x10>
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	791b      	ldrb	r3, [r3, #4]
 8005300:	6038      	str	r0, [r7, #0]
 8005302:	713b      	strb	r3, [r7, #4]
 8005304:	1e93      	subs	r3, r2, #2
 8005306:	2b22      	cmp	r3, #34	; 0x22
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	d904      	bls.n	8005318 <__utoa+0x3c>
 800530e:	7023      	strb	r3, [r4, #0]
 8005310:	461c      	mov	r4, r3
 8005312:	4620      	mov	r0, r4
 8005314:	b00b      	add	sp, #44	; 0x2c
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005318:	1e66      	subs	r6, r4, #1
 800531a:	fbb5 f0f2 	udiv	r0, r5, r2
 800531e:	fb02 5510 	mls	r5, r2, r0, r5
 8005322:	af0a      	add	r7, sp, #40	; 0x28
 8005324:	443d      	add	r5, r7
 8005326:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005330:	4605      	mov	r5, r0
 8005332:	b968      	cbnz	r0, 8005350 <__utoa+0x74>
 8005334:	4622      	mov	r2, r4
 8005336:	5460      	strb	r0, [r4, r1]
 8005338:	4423      	add	r3, r4
 800533a:	1b19      	subs	r1, r3, r4
 800533c:	1b10      	subs	r0, r2, r4
 800533e:	4281      	cmp	r1, r0
 8005340:	dde7      	ble.n	8005312 <__utoa+0x36>
 8005342:	7811      	ldrb	r1, [r2, #0]
 8005344:	7818      	ldrb	r0, [r3, #0]
 8005346:	f802 0b01 	strb.w	r0, [r2], #1
 800534a:	f803 1901 	strb.w	r1, [r3], #-1
 800534e:	e7f4      	b.n	800533a <__utoa+0x5e>
 8005350:	460b      	mov	r3, r1
 8005352:	e7e2      	b.n	800531a <__utoa+0x3e>
 8005354:	08007204 	.word	0x08007204

08005358 <quorem>:
 8005358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	6903      	ldr	r3, [r0, #16]
 800535e:	690c      	ldr	r4, [r1, #16]
 8005360:	4680      	mov	r8, r0
 8005362:	42a3      	cmp	r3, r4
 8005364:	f2c0 8084 	blt.w	8005470 <quorem+0x118>
 8005368:	3c01      	subs	r4, #1
 800536a:	f101 0714 	add.w	r7, r1, #20
 800536e:	f100 0614 	add.w	r6, r0, #20
 8005372:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005376:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800537a:	3501      	adds	r5, #1
 800537c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005380:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005384:	eb06 030c 	add.w	r3, r6, ip
 8005388:	eb07 090c 	add.w	r9, r7, ip
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	b39d      	cbz	r5, 80053f8 <quorem+0xa0>
 8005390:	f04f 0a00 	mov.w	sl, #0
 8005394:	4638      	mov	r0, r7
 8005396:	46b6      	mov	lr, r6
 8005398:	46d3      	mov	fp, sl
 800539a:	f850 2b04 	ldr.w	r2, [r0], #4
 800539e:	b293      	uxth	r3, r2
 80053a0:	fb05 a303 	mla	r3, r5, r3, sl
 80053a4:	0c12      	lsrs	r2, r2, #16
 80053a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80053aa:	fb05 a202 	mla	r2, r5, r2, sl
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	ebab 0303 	sub.w	r3, fp, r3
 80053b4:	f8de b000 	ldr.w	fp, [lr]
 80053b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80053bc:	fa1f fb8b 	uxth.w	fp, fp
 80053c0:	445b      	add	r3, fp
 80053c2:	fa1f fb82 	uxth.w	fp, r2
 80053c6:	f8de 2000 	ldr.w	r2, [lr]
 80053ca:	4581      	cmp	r9, r0
 80053cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80053d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053da:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80053de:	f84e 3b04 	str.w	r3, [lr], #4
 80053e2:	d2da      	bcs.n	800539a <quorem+0x42>
 80053e4:	f856 300c 	ldr.w	r3, [r6, ip]
 80053e8:	b933      	cbnz	r3, 80053f8 <quorem+0xa0>
 80053ea:	9b01      	ldr	r3, [sp, #4]
 80053ec:	3b04      	subs	r3, #4
 80053ee:	429e      	cmp	r6, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	d331      	bcc.n	8005458 <quorem+0x100>
 80053f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80053f8:	4640      	mov	r0, r8
 80053fa:	f001 fa13 	bl	8006824 <__mcmp>
 80053fe:	2800      	cmp	r0, #0
 8005400:	db26      	blt.n	8005450 <quorem+0xf8>
 8005402:	4630      	mov	r0, r6
 8005404:	f04f 0c00 	mov.w	ip, #0
 8005408:	3501      	adds	r5, #1
 800540a:	f857 1b04 	ldr.w	r1, [r7], #4
 800540e:	f8d0 e000 	ldr.w	lr, [r0]
 8005412:	b28b      	uxth	r3, r1
 8005414:	ebac 0303 	sub.w	r3, ip, r3
 8005418:	fa1f f28e 	uxth.w	r2, lr
 800541c:	4413      	add	r3, r2
 800541e:	0c0a      	lsrs	r2, r1, #16
 8005420:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005424:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800542e:	45b9      	cmp	r9, r7
 8005430:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005434:	f840 3b04 	str.w	r3, [r0], #4
 8005438:	d2e7      	bcs.n	800540a <quorem+0xb2>
 800543a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800543e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005442:	b92a      	cbnz	r2, 8005450 <quorem+0xf8>
 8005444:	3b04      	subs	r3, #4
 8005446:	429e      	cmp	r6, r3
 8005448:	461a      	mov	r2, r3
 800544a:	d30b      	bcc.n	8005464 <quorem+0x10c>
 800544c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005450:	4628      	mov	r0, r5
 8005452:	b003      	add	sp, #12
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	3b04      	subs	r3, #4
 800545c:	2a00      	cmp	r2, #0
 800545e:	d1c9      	bne.n	80053f4 <quorem+0x9c>
 8005460:	3c01      	subs	r4, #1
 8005462:	e7c4      	b.n	80053ee <quorem+0x96>
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	3b04      	subs	r3, #4
 8005468:	2a00      	cmp	r2, #0
 800546a:	d1ef      	bne.n	800544c <quorem+0xf4>
 800546c:	3c01      	subs	r4, #1
 800546e:	e7ea      	b.n	8005446 <quorem+0xee>
 8005470:	2000      	movs	r0, #0
 8005472:	e7ee      	b.n	8005452 <quorem+0xfa>
 8005474:	0000      	movs	r0, r0
	...

08005478 <_dtoa_r>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	4616      	mov	r6, r2
 800547e:	461f      	mov	r7, r3
 8005480:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005482:	b095      	sub	sp, #84	; 0x54
 8005484:	4604      	mov	r4, r0
 8005486:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800548a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800548e:	b93d      	cbnz	r5, 80054a0 <_dtoa_r+0x28>
 8005490:	2010      	movs	r0, #16
 8005492:	f000 ff91 	bl	80063b8 <malloc>
 8005496:	6260      	str	r0, [r4, #36]	; 0x24
 8005498:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800549c:	6005      	str	r5, [r0, #0]
 800549e:	60c5      	str	r5, [r0, #12]
 80054a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	b151      	cbz	r1, 80054bc <_dtoa_r+0x44>
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	2301      	movs	r3, #1
 80054aa:	4093      	lsls	r3, r2
 80054ac:	604a      	str	r2, [r1, #4]
 80054ae:	608b      	str	r3, [r1, #8]
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 ffd6 	bl	8006462 <_Bfree>
 80054b6:	2200      	movs	r2, #0
 80054b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	1e3b      	subs	r3, r7, #0
 80054be:	bfaf      	iteee	ge
 80054c0:	2300      	movge	r3, #0
 80054c2:	2201      	movlt	r2, #1
 80054c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	9303      	strlt	r3, [sp, #12]
 80054ca:	bfac      	ite	ge
 80054cc:	f8c8 3000 	strge.w	r3, [r8]
 80054d0:	f8c8 2000 	strlt.w	r2, [r8]
 80054d4:	4bae      	ldr	r3, [pc, #696]	; (8005790 <_dtoa_r+0x318>)
 80054d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80054da:	ea33 0308 	bics.w	r3, r3, r8
 80054de:	d11b      	bne.n	8005518 <_dtoa_r+0xa0>
 80054e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80054e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	9b02      	ldr	r3, [sp, #8]
 80054ea:	b923      	cbnz	r3, 80054f6 <_dtoa_r+0x7e>
 80054ec:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80054f0:	2800      	cmp	r0, #0
 80054f2:	f000 8545 	beq.w	8005f80 <_dtoa_r+0xb08>
 80054f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054f8:	b953      	cbnz	r3, 8005510 <_dtoa_r+0x98>
 80054fa:	4ba6      	ldr	r3, [pc, #664]	; (8005794 <_dtoa_r+0x31c>)
 80054fc:	e021      	b.n	8005542 <_dtoa_r+0xca>
 80054fe:	4ba6      	ldr	r3, [pc, #664]	; (8005798 <_dtoa_r+0x320>)
 8005500:	9306      	str	r3, [sp, #24]
 8005502:	3308      	adds	r3, #8
 8005504:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	9806      	ldr	r0, [sp, #24]
 800550a:	b015      	add	sp, #84	; 0x54
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	4ba0      	ldr	r3, [pc, #640]	; (8005794 <_dtoa_r+0x31c>)
 8005512:	9306      	str	r3, [sp, #24]
 8005514:	3303      	adds	r3, #3
 8005516:	e7f5      	b.n	8005504 <_dtoa_r+0x8c>
 8005518:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	2300      	movs	r3, #0
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	f7fb fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8005528:	4682      	mov	sl, r0
 800552a:	b160      	cbz	r0, 8005546 <_dtoa_r+0xce>
 800552c:	2301      	movs	r3, #1
 800552e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8520 	beq.w	8005f7a <_dtoa_r+0xb02>
 800553a:	4b98      	ldr	r3, [pc, #608]	; (800579c <_dtoa_r+0x324>)
 800553c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	3b01      	subs	r3, #1
 8005542:	9306      	str	r3, [sp, #24]
 8005544:	e7e0      	b.n	8005508 <_dtoa_r+0x90>
 8005546:	ab12      	add	r3, sp, #72	; 0x48
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	ab13      	add	r3, sp, #76	; 0x4c
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	4632      	mov	r2, r6
 8005550:	463b      	mov	r3, r7
 8005552:	4620      	mov	r0, r4
 8005554:	f001 f9de 	bl	8006914 <__d2b>
 8005558:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800555c:	4683      	mov	fp, r0
 800555e:	2d00      	cmp	r5, #0
 8005560:	d07d      	beq.n	800565e <_dtoa_r+0x1e6>
 8005562:	46b0      	mov	r8, r6
 8005564:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005568:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800556c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005570:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005574:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005578:	2200      	movs	r2, #0
 800557a:	4b89      	ldr	r3, [pc, #548]	; (80057a0 <_dtoa_r+0x328>)
 800557c:	4640      	mov	r0, r8
 800557e:	4649      	mov	r1, r9
 8005580:	f7fa fdf2 	bl	8000168 <__aeabi_dsub>
 8005584:	a37c      	add	r3, pc, #496	; (adr r3, 8005778 <_dtoa_r+0x300>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f7fa ffa5 	bl	80004d8 <__aeabi_dmul>
 800558e:	a37c      	add	r3, pc, #496	; (adr r3, 8005780 <_dtoa_r+0x308>)
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f7fa fdea 	bl	800016c <__adddf3>
 8005598:	4606      	mov	r6, r0
 800559a:	4628      	mov	r0, r5
 800559c:	460f      	mov	r7, r1
 800559e:	f7fa ff31 	bl	8000404 <__aeabi_i2d>
 80055a2:	a379      	add	r3, pc, #484	; (adr r3, 8005788 <_dtoa_r+0x310>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fa ff96 	bl	80004d8 <__aeabi_dmul>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4630      	mov	r0, r6
 80055b2:	4639      	mov	r1, r7
 80055b4:	f7fa fdda 	bl	800016c <__adddf3>
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	f7fb fa3c 	bl	8000a38 <__aeabi_d2iz>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4682      	mov	sl, r0
 80055c4:	2300      	movs	r3, #0
 80055c6:	4630      	mov	r0, r6
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fb f9f7 	bl	80009bc <__aeabi_dcmplt>
 80055ce:	b148      	cbz	r0, 80055e4 <_dtoa_r+0x16c>
 80055d0:	4650      	mov	r0, sl
 80055d2:	f7fa ff17 	bl	8000404 <__aeabi_i2d>
 80055d6:	4632      	mov	r2, r6
 80055d8:	463b      	mov	r3, r7
 80055da:	f7fb f9e5 	bl	80009a8 <__aeabi_dcmpeq>
 80055de:	b908      	cbnz	r0, 80055e4 <_dtoa_r+0x16c>
 80055e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055e4:	f1ba 0f16 	cmp.w	sl, #22
 80055e8:	d85a      	bhi.n	80056a0 <_dtoa_r+0x228>
 80055ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055ee:	496d      	ldr	r1, [pc, #436]	; (80057a4 <_dtoa_r+0x32c>)
 80055f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80055f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055f8:	f7fb f9fe 	bl	80009f8 <__aeabi_dcmpgt>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d051      	beq.n	80056a4 <_dtoa_r+0x22c>
 8005600:	2300      	movs	r3, #0
 8005602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005606:	930d      	str	r3, [sp, #52]	; 0x34
 8005608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800560a:	1b5d      	subs	r5, r3, r5
 800560c:	1e6b      	subs	r3, r5, #1
 800560e:	9307      	str	r3, [sp, #28]
 8005610:	bf43      	ittte	mi
 8005612:	2300      	movmi	r3, #0
 8005614:	f1c5 0901 	rsbmi	r9, r5, #1
 8005618:	9307      	strmi	r3, [sp, #28]
 800561a:	f04f 0900 	movpl.w	r9, #0
 800561e:	f1ba 0f00 	cmp.w	sl, #0
 8005622:	db41      	blt.n	80056a8 <_dtoa_r+0x230>
 8005624:	9b07      	ldr	r3, [sp, #28]
 8005626:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800562a:	4453      	add	r3, sl
 800562c:	9307      	str	r3, [sp, #28]
 800562e:	2300      	movs	r3, #0
 8005630:	9308      	str	r3, [sp, #32]
 8005632:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005634:	2b09      	cmp	r3, #9
 8005636:	f200 808f 	bhi.w	8005758 <_dtoa_r+0x2e0>
 800563a:	2b05      	cmp	r3, #5
 800563c:	bfc4      	itt	gt
 800563e:	3b04      	subgt	r3, #4
 8005640:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005642:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005644:	bfc8      	it	gt
 8005646:	2500      	movgt	r5, #0
 8005648:	f1a3 0302 	sub.w	r3, r3, #2
 800564c:	bfd8      	it	le
 800564e:	2501      	movle	r5, #1
 8005650:	2b03      	cmp	r3, #3
 8005652:	f200 808d 	bhi.w	8005770 <_dtoa_r+0x2f8>
 8005656:	e8df f003 	tbb	[pc, r3]
 800565a:	7d7b      	.short	0x7d7b
 800565c:	6f2f      	.short	0x6f2f
 800565e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005662:	441d      	add	r5, r3
 8005664:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005668:	2820      	cmp	r0, #32
 800566a:	dd13      	ble.n	8005694 <_dtoa_r+0x21c>
 800566c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005670:	9b02      	ldr	r3, [sp, #8]
 8005672:	fa08 f800 	lsl.w	r8, r8, r0
 8005676:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800567a:	fa23 f000 	lsr.w	r0, r3, r0
 800567e:	ea48 0000 	orr.w	r0, r8, r0
 8005682:	f7fa feaf 	bl	80003e4 <__aeabi_ui2d>
 8005686:	2301      	movs	r3, #1
 8005688:	4680      	mov	r8, r0
 800568a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800568e:	3d01      	subs	r5, #1
 8005690:	9310      	str	r3, [sp, #64]	; 0x40
 8005692:	e771      	b.n	8005578 <_dtoa_r+0x100>
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	f1c0 0020 	rsb	r0, r0, #32
 800569a:	fa03 f000 	lsl.w	r0, r3, r0
 800569e:	e7f0      	b.n	8005682 <_dtoa_r+0x20a>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e7b0      	b.n	8005606 <_dtoa_r+0x18e>
 80056a4:	900d      	str	r0, [sp, #52]	; 0x34
 80056a6:	e7af      	b.n	8005608 <_dtoa_r+0x190>
 80056a8:	f1ca 0300 	rsb	r3, sl, #0
 80056ac:	9308      	str	r3, [sp, #32]
 80056ae:	2300      	movs	r3, #0
 80056b0:	eba9 090a 	sub.w	r9, r9, sl
 80056b4:	930c      	str	r3, [sp, #48]	; 0x30
 80056b6:	e7bc      	b.n	8005632 <_dtoa_r+0x1ba>
 80056b8:	2301      	movs	r3, #1
 80056ba:	9309      	str	r3, [sp, #36]	; 0x24
 80056bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dd74      	ble.n	80057ac <_dtoa_r+0x334>
 80056c2:	4698      	mov	r8, r3
 80056c4:	9304      	str	r3, [sp, #16]
 80056c6:	2200      	movs	r2, #0
 80056c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056ca:	6072      	str	r2, [r6, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	f102 0014 	add.w	r0, r2, #20
 80056d2:	4298      	cmp	r0, r3
 80056d4:	6871      	ldr	r1, [r6, #4]
 80056d6:	d96e      	bls.n	80057b6 <_dtoa_r+0x33e>
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fe8e 	bl	80063fa <_Balloc>
 80056de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f1b8 0f0e 	cmp.w	r8, #14
 80056e8:	9306      	str	r3, [sp, #24]
 80056ea:	f200 80ed 	bhi.w	80058c8 <_dtoa_r+0x450>
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	f000 80ea 	beq.w	80058c8 <_dtoa_r+0x450>
 80056f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056f8:	f1ba 0f00 	cmp.w	sl, #0
 80056fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005700:	dd77      	ble.n	80057f2 <_dtoa_r+0x37a>
 8005702:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <_dtoa_r+0x32c>)
 8005704:	f00a 030f 	and.w	r3, sl, #15
 8005708:	ea4f 162a 	mov.w	r6, sl, asr #4
 800570c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005710:	06f0      	lsls	r0, r6, #27
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800571a:	d568      	bpl.n	80057ee <_dtoa_r+0x376>
 800571c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005720:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <_dtoa_r+0x330>)
 8005722:	2503      	movs	r5, #3
 8005724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005728:	f7fb f800 	bl	800072c <__aeabi_ddiv>
 800572c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005730:	f006 060f 	and.w	r6, r6, #15
 8005734:	4f1c      	ldr	r7, [pc, #112]	; (80057a8 <_dtoa_r+0x330>)
 8005736:	e04f      	b.n	80057d8 <_dtoa_r+0x360>
 8005738:	2301      	movs	r3, #1
 800573a:	9309      	str	r3, [sp, #36]	; 0x24
 800573c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800573e:	4453      	add	r3, sl
 8005740:	f103 0801 	add.w	r8, r3, #1
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	4643      	mov	r3, r8
 8005748:	2b01      	cmp	r3, #1
 800574a:	bfb8      	it	lt
 800574c:	2301      	movlt	r3, #1
 800574e:	e7ba      	b.n	80056c6 <_dtoa_r+0x24e>
 8005750:	2300      	movs	r3, #0
 8005752:	e7b2      	b.n	80056ba <_dtoa_r+0x242>
 8005754:	2300      	movs	r3, #0
 8005756:	e7f0      	b.n	800573a <_dtoa_r+0x2c2>
 8005758:	2501      	movs	r5, #1
 800575a:	2300      	movs	r3, #0
 800575c:	9509      	str	r5, [sp, #36]	; 0x24
 800575e:	931e      	str	r3, [sp, #120]	; 0x78
 8005760:	f04f 33ff 	mov.w	r3, #4294967295
 8005764:	2200      	movs	r2, #0
 8005766:	9304      	str	r3, [sp, #16]
 8005768:	4698      	mov	r8, r3
 800576a:	2312      	movs	r3, #18
 800576c:	921f      	str	r2, [sp, #124]	; 0x7c
 800576e:	e7aa      	b.n	80056c6 <_dtoa_r+0x24e>
 8005770:	2301      	movs	r3, #1
 8005772:	9309      	str	r3, [sp, #36]	; 0x24
 8005774:	e7f4      	b.n	8005760 <_dtoa_r+0x2e8>
 8005776:	bf00      	nop
 8005778:	636f4361 	.word	0x636f4361
 800577c:	3fd287a7 	.word	0x3fd287a7
 8005780:	8b60c8b3 	.word	0x8b60c8b3
 8005784:	3fc68a28 	.word	0x3fc68a28
 8005788:	509f79fb 	.word	0x509f79fb
 800578c:	3fd34413 	.word	0x3fd34413
 8005790:	7ff00000 	.word	0x7ff00000
 8005794:	08007232 	.word	0x08007232
 8005798:	08007229 	.word	0x08007229
 800579c:	080071e1 	.word	0x080071e1
 80057a0:	3ff80000 	.word	0x3ff80000
 80057a4:	080072c0 	.word	0x080072c0
 80057a8:	08007298 	.word	0x08007298
 80057ac:	2301      	movs	r3, #1
 80057ae:	9304      	str	r3, [sp, #16]
 80057b0:	4698      	mov	r8, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	e7da      	b.n	800576c <_dtoa_r+0x2f4>
 80057b6:	3101      	adds	r1, #1
 80057b8:	6071      	str	r1, [r6, #4]
 80057ba:	0052      	lsls	r2, r2, #1
 80057bc:	e787      	b.n	80056ce <_dtoa_r+0x256>
 80057be:	07f1      	lsls	r1, r6, #31
 80057c0:	d508      	bpl.n	80057d4 <_dtoa_r+0x35c>
 80057c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ca:	f7fa fe85 	bl	80004d8 <__aeabi_dmul>
 80057ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057d2:	3501      	adds	r5, #1
 80057d4:	1076      	asrs	r6, r6, #1
 80057d6:	3708      	adds	r7, #8
 80057d8:	2e00      	cmp	r6, #0
 80057da:	d1f0      	bne.n	80057be <_dtoa_r+0x346>
 80057dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057e4:	f7fa ffa2 	bl	800072c <__aeabi_ddiv>
 80057e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057ec:	e01b      	b.n	8005826 <_dtoa_r+0x3ae>
 80057ee:	2502      	movs	r5, #2
 80057f0:	e7a0      	b.n	8005734 <_dtoa_r+0x2bc>
 80057f2:	f000 80a4 	beq.w	800593e <_dtoa_r+0x4c6>
 80057f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80057fa:	f1ca 0600 	rsb	r6, sl, #0
 80057fe:	4ba0      	ldr	r3, [pc, #640]	; (8005a80 <_dtoa_r+0x608>)
 8005800:	f006 020f 	and.w	r2, r6, #15
 8005804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa fe64 	bl	80004d8 <__aeabi_dmul>
 8005810:	2502      	movs	r5, #2
 8005812:	2300      	movs	r3, #0
 8005814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005818:	4f9a      	ldr	r7, [pc, #616]	; (8005a84 <_dtoa_r+0x60c>)
 800581a:	1136      	asrs	r6, r6, #4
 800581c:	2e00      	cmp	r6, #0
 800581e:	f040 8083 	bne.w	8005928 <_dtoa_r+0x4b0>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e0      	bne.n	80057e8 <_dtoa_r+0x370>
 8005826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 808a 	beq.w	8005942 <_dtoa_r+0x4ca>
 800582e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005832:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800583a:	2200      	movs	r2, #0
 800583c:	4b92      	ldr	r3, [pc, #584]	; (8005a88 <_dtoa_r+0x610>)
 800583e:	f7fb f8bd 	bl	80009bc <__aeabi_dcmplt>
 8005842:	2800      	cmp	r0, #0
 8005844:	d07d      	beq.n	8005942 <_dtoa_r+0x4ca>
 8005846:	f1b8 0f00 	cmp.w	r8, #0
 800584a:	d07a      	beq.n	8005942 <_dtoa_r+0x4ca>
 800584c:	9b04      	ldr	r3, [sp, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	dd36      	ble.n	80058c0 <_dtoa_r+0x448>
 8005852:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005856:	2200      	movs	r2, #0
 8005858:	4b8c      	ldr	r3, [pc, #560]	; (8005a8c <_dtoa_r+0x614>)
 800585a:	f7fa fe3d 	bl	80004d8 <__aeabi_dmul>
 800585e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005862:	9e04      	ldr	r6, [sp, #16]
 8005864:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005868:	3501      	adds	r5, #1
 800586a:	4628      	mov	r0, r5
 800586c:	f7fa fdca 	bl	8000404 <__aeabi_i2d>
 8005870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005874:	f7fa fe30 	bl	80004d8 <__aeabi_dmul>
 8005878:	2200      	movs	r2, #0
 800587a:	4b85      	ldr	r3, [pc, #532]	; (8005a90 <_dtoa_r+0x618>)
 800587c:	f7fa fc76 	bl	800016c <__adddf3>
 8005880:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005884:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005888:	950b      	str	r5, [sp, #44]	; 0x2c
 800588a:	2e00      	cmp	r6, #0
 800588c:	d15c      	bne.n	8005948 <_dtoa_r+0x4d0>
 800588e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005892:	2200      	movs	r2, #0
 8005894:	4b7f      	ldr	r3, [pc, #508]	; (8005a94 <_dtoa_r+0x61c>)
 8005896:	f7fa fc67 	bl	8000168 <__aeabi_dsub>
 800589a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800589c:	462b      	mov	r3, r5
 800589e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058a2:	f7fb f8a9 	bl	80009f8 <__aeabi_dcmpgt>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f040 8281 	bne.w	8005dae <_dtoa_r+0x936>
 80058ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058b2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80058b6:	f7fb f881 	bl	80009bc <__aeabi_dcmplt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f040 8275 	bne.w	8005daa <_dtoa_r+0x932>
 80058c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80058c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f2c0 814b 	blt.w	8005b66 <_dtoa_r+0x6ee>
 80058d0:	f1ba 0f0e 	cmp.w	sl, #14
 80058d4:	f300 8147 	bgt.w	8005b66 <_dtoa_r+0x6ee>
 80058d8:	4b69      	ldr	r3, [pc, #420]	; (8005a80 <_dtoa_r+0x608>)
 80058da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f280 80d7 	bge.w	8005a9c <_dtoa_r+0x624>
 80058ee:	f1b8 0f00 	cmp.w	r8, #0
 80058f2:	f300 80d3 	bgt.w	8005a9c <_dtoa_r+0x624>
 80058f6:	f040 8257 	bne.w	8005da8 <_dtoa_r+0x930>
 80058fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058fe:	2200      	movs	r2, #0
 8005900:	4b64      	ldr	r3, [pc, #400]	; (8005a94 <_dtoa_r+0x61c>)
 8005902:	f7fa fde9 	bl	80004d8 <__aeabi_dmul>
 8005906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800590a:	f7fb f86b 	bl	80009e4 <__aeabi_dcmpge>
 800590e:	4646      	mov	r6, r8
 8005910:	4647      	mov	r7, r8
 8005912:	2800      	cmp	r0, #0
 8005914:	f040 822d 	bne.w	8005d72 <_dtoa_r+0x8fa>
 8005918:	9b06      	ldr	r3, [sp, #24]
 800591a:	9a06      	ldr	r2, [sp, #24]
 800591c:	1c5d      	adds	r5, r3, #1
 800591e:	2331      	movs	r3, #49	; 0x31
 8005920:	f10a 0a01 	add.w	sl, sl, #1
 8005924:	7013      	strb	r3, [r2, #0]
 8005926:	e228      	b.n	8005d7a <_dtoa_r+0x902>
 8005928:	07f2      	lsls	r2, r6, #31
 800592a:	d505      	bpl.n	8005938 <_dtoa_r+0x4c0>
 800592c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005930:	f7fa fdd2 	bl	80004d8 <__aeabi_dmul>
 8005934:	2301      	movs	r3, #1
 8005936:	3501      	adds	r5, #1
 8005938:	1076      	asrs	r6, r6, #1
 800593a:	3708      	adds	r7, #8
 800593c:	e76e      	b.n	800581c <_dtoa_r+0x3a4>
 800593e:	2502      	movs	r5, #2
 8005940:	e771      	b.n	8005826 <_dtoa_r+0x3ae>
 8005942:	4657      	mov	r7, sl
 8005944:	4646      	mov	r6, r8
 8005946:	e790      	b.n	800586a <_dtoa_r+0x3f2>
 8005948:	4b4d      	ldr	r3, [pc, #308]	; (8005a80 <_dtoa_r+0x608>)
 800594a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800594e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d048      	beq.n	80059ea <_dtoa_r+0x572>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	2000      	movs	r0, #0
 800595e:	494e      	ldr	r1, [pc, #312]	; (8005a98 <_dtoa_r+0x620>)
 8005960:	f7fa fee4 	bl	800072c <__aeabi_ddiv>
 8005964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005968:	f7fa fbfe 	bl	8000168 <__aeabi_dsub>
 800596c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005970:	9d06      	ldr	r5, [sp, #24]
 8005972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005976:	f7fb f85f 	bl	8000a38 <__aeabi_d2iz>
 800597a:	9011      	str	r0, [sp, #68]	; 0x44
 800597c:	f7fa fd42 	bl	8000404 <__aeabi_i2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005988:	f7fa fbee 	bl	8000168 <__aeabi_dsub>
 800598c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800598e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005992:	3330      	adds	r3, #48	; 0x30
 8005994:	f805 3b01 	strb.w	r3, [r5], #1
 8005998:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800599c:	f7fb f80e 	bl	80009bc <__aeabi_dcmplt>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d163      	bne.n	8005a6c <_dtoa_r+0x5f4>
 80059a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059a8:	2000      	movs	r0, #0
 80059aa:	4937      	ldr	r1, [pc, #220]	; (8005a88 <_dtoa_r+0x610>)
 80059ac:	f7fa fbdc 	bl	8000168 <__aeabi_dsub>
 80059b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059b4:	f7fb f802 	bl	80009bc <__aeabi_dcmplt>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	f040 80b5 	bne.w	8005b28 <_dtoa_r+0x6b0>
 80059be:	9b06      	ldr	r3, [sp, #24]
 80059c0:	1aeb      	subs	r3, r5, r3
 80059c2:	429e      	cmp	r6, r3
 80059c4:	f77f af7c 	ble.w	80058c0 <_dtoa_r+0x448>
 80059c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059cc:	2200      	movs	r2, #0
 80059ce:	4b2f      	ldr	r3, [pc, #188]	; (8005a8c <_dtoa_r+0x614>)
 80059d0:	f7fa fd82 	bl	80004d8 <__aeabi_dmul>
 80059d4:	2200      	movs	r2, #0
 80059d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80059da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059de:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <_dtoa_r+0x614>)
 80059e0:	f7fa fd7a 	bl	80004d8 <__aeabi_dmul>
 80059e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059e8:	e7c3      	b.n	8005972 <_dtoa_r+0x4fa>
 80059ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059ee:	f7fa fd73 	bl	80004d8 <__aeabi_dmul>
 80059f2:	9b06      	ldr	r3, [sp, #24]
 80059f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80059f8:	199d      	adds	r5, r3, r6
 80059fa:	461e      	mov	r6, r3
 80059fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a00:	f7fb f81a 	bl	8000a38 <__aeabi_d2iz>
 8005a04:	9011      	str	r0, [sp, #68]	; 0x44
 8005a06:	f7fa fcfd 	bl	8000404 <__aeabi_i2d>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a12:	f7fa fba9 	bl	8000168 <__aeabi_dsub>
 8005a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1c:	3330      	adds	r3, #48	; 0x30
 8005a1e:	f806 3b01 	strb.w	r3, [r6], #1
 8005a22:	42ae      	cmp	r6, r5
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	d124      	bne.n	8005a74 <_dtoa_r+0x5fc>
 8005a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a2e:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <_dtoa_r+0x620>)
 8005a30:	f7fa fb9c 	bl	800016c <__adddf3>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a3c:	f7fa ffdc 	bl	80009f8 <__aeabi_dcmpgt>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d171      	bne.n	8005b28 <_dtoa_r+0x6b0>
 8005a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a48:	2000      	movs	r0, #0
 8005a4a:	4913      	ldr	r1, [pc, #76]	; (8005a98 <_dtoa_r+0x620>)
 8005a4c:	f7fa fb8c 	bl	8000168 <__aeabi_dsub>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a58:	f7fa ffb0 	bl	80009bc <__aeabi_dcmplt>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	f43f af2f 	beq.w	80058c0 <_dtoa_r+0x448>
 8005a62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a66:	1e6a      	subs	r2, r5, #1
 8005a68:	2b30      	cmp	r3, #48	; 0x30
 8005a6a:	d001      	beq.n	8005a70 <_dtoa_r+0x5f8>
 8005a6c:	46ba      	mov	sl, r7
 8005a6e:	e04a      	b.n	8005b06 <_dtoa_r+0x68e>
 8005a70:	4615      	mov	r5, r2
 8005a72:	e7f6      	b.n	8005a62 <_dtoa_r+0x5ea>
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <_dtoa_r+0x614>)
 8005a76:	f7fa fd2f 	bl	80004d8 <__aeabi_dmul>
 8005a7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a7e:	e7bd      	b.n	80059fc <_dtoa_r+0x584>
 8005a80:	080072c0 	.word	0x080072c0
 8005a84:	08007298 	.word	0x08007298
 8005a88:	3ff00000 	.word	0x3ff00000
 8005a8c:	40240000 	.word	0x40240000
 8005a90:	401c0000 	.word	0x401c0000
 8005a94:	40140000 	.word	0x40140000
 8005a98:	3fe00000 	.word	0x3fe00000
 8005a9c:	9d06      	ldr	r5, [sp, #24]
 8005a9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005aa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	f7fa fe3f 	bl	800072c <__aeabi_ddiv>
 8005aae:	f7fa ffc3 	bl	8000a38 <__aeabi_d2iz>
 8005ab2:	4681      	mov	r9, r0
 8005ab4:	f7fa fca6 	bl	8000404 <__aeabi_i2d>
 8005ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005abc:	f7fa fd0c 	bl	80004d8 <__aeabi_dmul>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f7fa fb4e 	bl	8000168 <__aeabi_dsub>
 8005acc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005ad0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ad4:	9e06      	ldr	r6, [sp, #24]
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	1bae      	subs	r6, r5, r6
 8005ada:	45b0      	cmp	r8, r6
 8005adc:	460b      	mov	r3, r1
 8005ade:	d135      	bne.n	8005b4c <_dtoa_r+0x6d4>
 8005ae0:	f7fa fb44 	bl	800016c <__adddf3>
 8005ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae8:	4606      	mov	r6, r0
 8005aea:	460f      	mov	r7, r1
 8005aec:	f7fa ff84 	bl	80009f8 <__aeabi_dcmpgt>
 8005af0:	b9c8      	cbnz	r0, 8005b26 <_dtoa_r+0x6ae>
 8005af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af6:	4630      	mov	r0, r6
 8005af8:	4639      	mov	r1, r7
 8005afa:	f7fa ff55 	bl	80009a8 <__aeabi_dcmpeq>
 8005afe:	b110      	cbz	r0, 8005b06 <_dtoa_r+0x68e>
 8005b00:	f019 0f01 	tst.w	r9, #1
 8005b04:	d10f      	bne.n	8005b26 <_dtoa_r+0x6ae>
 8005b06:	4659      	mov	r1, fp
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fcaa 	bl	8006462 <_Bfree>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b12:	702b      	strb	r3, [r5, #0]
 8005b14:	f10a 0301 	add.w	r3, sl, #1
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f43f acf3 	beq.w	8005508 <_dtoa_r+0x90>
 8005b22:	601d      	str	r5, [r3, #0]
 8005b24:	e4f0      	b.n	8005508 <_dtoa_r+0x90>
 8005b26:	4657      	mov	r7, sl
 8005b28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005b2c:	1e6b      	subs	r3, r5, #1
 8005b2e:	2a39      	cmp	r2, #57	; 0x39
 8005b30:	d106      	bne.n	8005b40 <_dtoa_r+0x6c8>
 8005b32:	9a06      	ldr	r2, [sp, #24]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d107      	bne.n	8005b48 <_dtoa_r+0x6d0>
 8005b38:	2330      	movs	r3, #48	; 0x30
 8005b3a:	7013      	strb	r3, [r2, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	3701      	adds	r7, #1
 8005b40:	781a      	ldrb	r2, [r3, #0]
 8005b42:	3201      	adds	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e791      	b.n	8005a6c <_dtoa_r+0x5f4>
 8005b48:	461d      	mov	r5, r3
 8005b4a:	e7ed      	b.n	8005b28 <_dtoa_r+0x6b0>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	4b99      	ldr	r3, [pc, #612]	; (8005db4 <_dtoa_r+0x93c>)
 8005b50:	f7fa fcc2 	bl	80004d8 <__aeabi_dmul>
 8005b54:	2200      	movs	r2, #0
 8005b56:	2300      	movs	r3, #0
 8005b58:	4606      	mov	r6, r0
 8005b5a:	460f      	mov	r7, r1
 8005b5c:	f7fa ff24 	bl	80009a8 <__aeabi_dcmpeq>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d09e      	beq.n	8005aa2 <_dtoa_r+0x62a>
 8005b64:	e7cf      	b.n	8005b06 <_dtoa_r+0x68e>
 8005b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	f000 8088 	beq.w	8005c7e <_dtoa_r+0x806>
 8005b6e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b70:	2a01      	cmp	r2, #1
 8005b72:	dc6d      	bgt.n	8005c50 <_dtoa_r+0x7d8>
 8005b74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	d066      	beq.n	8005c48 <_dtoa_r+0x7d0>
 8005b7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b7e:	464d      	mov	r5, r9
 8005b80:	9e08      	ldr	r6, [sp, #32]
 8005b82:	9a07      	ldr	r2, [sp, #28]
 8005b84:	2101      	movs	r1, #1
 8005b86:	441a      	add	r2, r3
 8005b88:	4620      	mov	r0, r4
 8005b8a:	4499      	add	r9, r3
 8005b8c:	9207      	str	r2, [sp, #28]
 8005b8e:	f000 fd08 	bl	80065a2 <__i2b>
 8005b92:	4607      	mov	r7, r0
 8005b94:	2d00      	cmp	r5, #0
 8005b96:	dd0b      	ble.n	8005bb0 <_dtoa_r+0x738>
 8005b98:	9b07      	ldr	r3, [sp, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dd08      	ble.n	8005bb0 <_dtoa_r+0x738>
 8005b9e:	42ab      	cmp	r3, r5
 8005ba0:	bfa8      	it	ge
 8005ba2:	462b      	movge	r3, r5
 8005ba4:	9a07      	ldr	r2, [sp, #28]
 8005ba6:	eba9 0903 	sub.w	r9, r9, r3
 8005baa:	1aed      	subs	r5, r5, r3
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	9307      	str	r3, [sp, #28]
 8005bb0:	9b08      	ldr	r3, [sp, #32]
 8005bb2:	b1eb      	cbz	r3, 8005bf0 <_dtoa_r+0x778>
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d065      	beq.n	8005c86 <_dtoa_r+0x80e>
 8005bba:	b18e      	cbz	r6, 8005be0 <_dtoa_r+0x768>
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4632      	mov	r2, r6
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 fd8d 	bl	80066e0 <__pow5mult>
 8005bc6:	465a      	mov	r2, fp
 8005bc8:	4601      	mov	r1, r0
 8005bca:	4607      	mov	r7, r0
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 fcf1 	bl	80065b4 <__multiply>
 8005bd2:	4659      	mov	r1, fp
 8005bd4:	900a      	str	r0, [sp, #40]	; 0x28
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f000 fc43 	bl	8006462 <_Bfree>
 8005bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bde:	469b      	mov	fp, r3
 8005be0:	9b08      	ldr	r3, [sp, #32]
 8005be2:	1b9a      	subs	r2, r3, r6
 8005be4:	d004      	beq.n	8005bf0 <_dtoa_r+0x778>
 8005be6:	4659      	mov	r1, fp
 8005be8:	4620      	mov	r0, r4
 8005bea:	f000 fd79 	bl	80066e0 <__pow5mult>
 8005bee:	4683      	mov	fp, r0
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fcd5 	bl	80065a2 <__i2b>
 8005bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 81c6 	beq.w	8005f8e <_dtoa_r+0xb16>
 8005c02:	461a      	mov	r2, r3
 8005c04:	4601      	mov	r1, r0
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 fd6a 	bl	80066e0 <__pow5mult>
 8005c0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c0e:	4606      	mov	r6, r0
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	dc3e      	bgt.n	8005c92 <_dtoa_r+0x81a>
 8005c14:	9b02      	ldr	r3, [sp, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d137      	bne.n	8005c8a <_dtoa_r+0x812>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d134      	bne.n	8005c8e <_dtoa_r+0x816>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c2a:	0d1b      	lsrs	r3, r3, #20
 8005c2c:	051b      	lsls	r3, r3, #20
 8005c2e:	b12b      	cbz	r3, 8005c3c <_dtoa_r+0x7c4>
 8005c30:	9b07      	ldr	r3, [sp, #28]
 8005c32:	f109 0901 	add.w	r9, r9, #1
 8005c36:	3301      	adds	r3, #1
 8005c38:	9307      	str	r3, [sp, #28]
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	9308      	str	r3, [sp, #32]
 8005c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d128      	bne.n	8005c96 <_dtoa_r+0x81e>
 8005c44:	2001      	movs	r0, #1
 8005c46:	e02e      	b.n	8005ca6 <_dtoa_r+0x82e>
 8005c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c4e:	e796      	b.n	8005b7e <_dtoa_r+0x706>
 8005c50:	9b08      	ldr	r3, [sp, #32]
 8005c52:	f108 36ff 	add.w	r6, r8, #4294967295
 8005c56:	42b3      	cmp	r3, r6
 8005c58:	bfb7      	itett	lt
 8005c5a:	9b08      	ldrlt	r3, [sp, #32]
 8005c5c:	1b9e      	subge	r6, r3, r6
 8005c5e:	1af2      	sublt	r2, r6, r3
 8005c60:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005c62:	bfbf      	itttt	lt
 8005c64:	9608      	strlt	r6, [sp, #32]
 8005c66:	189b      	addlt	r3, r3, r2
 8005c68:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005c6a:	2600      	movlt	r6, #0
 8005c6c:	f1b8 0f00 	cmp.w	r8, #0
 8005c70:	bfb9      	ittee	lt
 8005c72:	eba9 0508 	sublt.w	r5, r9, r8
 8005c76:	2300      	movlt	r3, #0
 8005c78:	464d      	movge	r5, r9
 8005c7a:	4643      	movge	r3, r8
 8005c7c:	e781      	b.n	8005b82 <_dtoa_r+0x70a>
 8005c7e:	9e08      	ldr	r6, [sp, #32]
 8005c80:	464d      	mov	r5, r9
 8005c82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c84:	e786      	b.n	8005b94 <_dtoa_r+0x71c>
 8005c86:	9a08      	ldr	r2, [sp, #32]
 8005c88:	e7ad      	b.n	8005be6 <_dtoa_r+0x76e>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e7d6      	b.n	8005c3c <_dtoa_r+0x7c4>
 8005c8e:	9b02      	ldr	r3, [sp, #8]
 8005c90:	e7d4      	b.n	8005c3c <_dtoa_r+0x7c4>
 8005c92:	2300      	movs	r3, #0
 8005c94:	9308      	str	r3, [sp, #32]
 8005c96:	6933      	ldr	r3, [r6, #16]
 8005c98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c9c:	6918      	ldr	r0, [r3, #16]
 8005c9e:	f000 fc32 	bl	8006506 <__hi0bits>
 8005ca2:	f1c0 0020 	rsb	r0, r0, #32
 8005ca6:	9b07      	ldr	r3, [sp, #28]
 8005ca8:	4418      	add	r0, r3
 8005caa:	f010 001f 	ands.w	r0, r0, #31
 8005cae:	d047      	beq.n	8005d40 <_dtoa_r+0x8c8>
 8005cb0:	f1c0 0320 	rsb	r3, r0, #32
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	dd3b      	ble.n	8005d30 <_dtoa_r+0x8b8>
 8005cb8:	9b07      	ldr	r3, [sp, #28]
 8005cba:	f1c0 001c 	rsb	r0, r0, #28
 8005cbe:	4481      	add	r9, r0
 8005cc0:	4405      	add	r5, r0
 8005cc2:	4403      	add	r3, r0
 8005cc4:	9307      	str	r3, [sp, #28]
 8005cc6:	f1b9 0f00 	cmp.w	r9, #0
 8005cca:	dd05      	ble.n	8005cd8 <_dtoa_r+0x860>
 8005ccc:	4659      	mov	r1, fp
 8005cce:	464a      	mov	r2, r9
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fd53 	bl	800677c <__lshift>
 8005cd6:	4683      	mov	fp, r0
 8005cd8:	9b07      	ldr	r3, [sp, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	dd05      	ble.n	8005cea <_dtoa_r+0x872>
 8005cde:	4631      	mov	r1, r6
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 fd4a 	bl	800677c <__lshift>
 8005ce8:	4606      	mov	r6, r0
 8005cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cec:	b353      	cbz	r3, 8005d44 <_dtoa_r+0x8cc>
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4658      	mov	r0, fp
 8005cf2:	f000 fd97 	bl	8006824 <__mcmp>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	da24      	bge.n	8005d44 <_dtoa_r+0x8cc>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	220a      	movs	r2, #10
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fbc5 	bl	8006490 <__multadd>
 8005d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d0c:	4683      	mov	fp, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8144 	beq.w	8005f9c <_dtoa_r+0xb24>
 8005d14:	2300      	movs	r3, #0
 8005d16:	4639      	mov	r1, r7
 8005d18:	220a      	movs	r2, #10
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 fbb8 	bl	8006490 <__multadd>
 8005d20:	9b04      	ldr	r3, [sp, #16]
 8005d22:	4607      	mov	r7, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dc4d      	bgt.n	8005dc4 <_dtoa_r+0x94c>
 8005d28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	dd4a      	ble.n	8005dc4 <_dtoa_r+0x94c>
 8005d2e:	e011      	b.n	8005d54 <_dtoa_r+0x8dc>
 8005d30:	d0c9      	beq.n	8005cc6 <_dtoa_r+0x84e>
 8005d32:	9a07      	ldr	r2, [sp, #28]
 8005d34:	331c      	adds	r3, #28
 8005d36:	441a      	add	r2, r3
 8005d38:	4499      	add	r9, r3
 8005d3a:	441d      	add	r5, r3
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	e7c1      	b.n	8005cc4 <_dtoa_r+0x84c>
 8005d40:	4603      	mov	r3, r0
 8005d42:	e7f6      	b.n	8005d32 <_dtoa_r+0x8ba>
 8005d44:	f1b8 0f00 	cmp.w	r8, #0
 8005d48:	dc36      	bgt.n	8005db8 <_dtoa_r+0x940>
 8005d4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	dd33      	ble.n	8005db8 <_dtoa_r+0x940>
 8005d50:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d54:	9b04      	ldr	r3, [sp, #16]
 8005d56:	b963      	cbnz	r3, 8005d72 <_dtoa_r+0x8fa>
 8005d58:	4631      	mov	r1, r6
 8005d5a:	2205      	movs	r2, #5
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f000 fb97 	bl	8006490 <__multadd>
 8005d62:	4601      	mov	r1, r0
 8005d64:	4606      	mov	r6, r0
 8005d66:	4658      	mov	r0, fp
 8005d68:	f000 fd5c 	bl	8006824 <__mcmp>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	f73f add3 	bgt.w	8005918 <_dtoa_r+0x4a0>
 8005d72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d74:	9d06      	ldr	r5, [sp, #24]
 8005d76:	ea6f 0a03 	mvn.w	sl, r3
 8005d7a:	f04f 0900 	mov.w	r9, #0
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fb6e 	bl	8006462 <_Bfree>
 8005d86:	2f00      	cmp	r7, #0
 8005d88:	f43f aebd 	beq.w	8005b06 <_dtoa_r+0x68e>
 8005d8c:	f1b9 0f00 	cmp.w	r9, #0
 8005d90:	d005      	beq.n	8005d9e <_dtoa_r+0x926>
 8005d92:	45b9      	cmp	r9, r7
 8005d94:	d003      	beq.n	8005d9e <_dtoa_r+0x926>
 8005d96:	4649      	mov	r1, r9
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f000 fb62 	bl	8006462 <_Bfree>
 8005d9e:	4639      	mov	r1, r7
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fb5e 	bl	8006462 <_Bfree>
 8005da6:	e6ae      	b.n	8005b06 <_dtoa_r+0x68e>
 8005da8:	2600      	movs	r6, #0
 8005daa:	4637      	mov	r7, r6
 8005dac:	e7e1      	b.n	8005d72 <_dtoa_r+0x8fa>
 8005dae:	46ba      	mov	sl, r7
 8005db0:	4637      	mov	r7, r6
 8005db2:	e5b1      	b.n	8005918 <_dtoa_r+0x4a0>
 8005db4:	40240000 	.word	0x40240000
 8005db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dba:	f8cd 8010 	str.w	r8, [sp, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80f3 	beq.w	8005faa <_dtoa_r+0xb32>
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	dd05      	ble.n	8005dd4 <_dtoa_r+0x95c>
 8005dc8:	4639      	mov	r1, r7
 8005dca:	462a      	mov	r2, r5
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 fcd5 	bl	800677c <__lshift>
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	9b08      	ldr	r3, [sp, #32]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d04c      	beq.n	8005e74 <_dtoa_r+0x9fc>
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 fb0c 	bl	80063fa <_Balloc>
 8005de2:	4605      	mov	r5, r0
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	f107 010c 	add.w	r1, r7, #12
 8005dea:	3202      	adds	r2, #2
 8005dec:	0092      	lsls	r2, r2, #2
 8005dee:	300c      	adds	r0, #12
 8005df0:	f000 faf8 	bl	80063e4 <memcpy>
 8005df4:	2201      	movs	r2, #1
 8005df6:	4629      	mov	r1, r5
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 fcbf 	bl	800677c <__lshift>
 8005dfe:	46b9      	mov	r9, r7
 8005e00:	4607      	mov	r7, r0
 8005e02:	9b06      	ldr	r3, [sp, #24]
 8005e04:	9307      	str	r3, [sp, #28]
 8005e06:	9b02      	ldr	r3, [sp, #8]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	9308      	str	r3, [sp, #32]
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4658      	mov	r0, fp
 8005e12:	f7ff faa1 	bl	8005358 <quorem>
 8005e16:	4649      	mov	r1, r9
 8005e18:	4605      	mov	r5, r0
 8005e1a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005e1e:	4658      	mov	r0, fp
 8005e20:	f000 fd00 	bl	8006824 <__mcmp>
 8005e24:	463a      	mov	r2, r7
 8005e26:	9002      	str	r0, [sp, #8]
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 fd14 	bl	8006858 <__mdiff>
 8005e30:	68c3      	ldr	r3, [r0, #12]
 8005e32:	4602      	mov	r2, r0
 8005e34:	bb03      	cbnz	r3, 8005e78 <_dtoa_r+0xa00>
 8005e36:	4601      	mov	r1, r0
 8005e38:	9009      	str	r0, [sp, #36]	; 0x24
 8005e3a:	4658      	mov	r0, fp
 8005e3c:	f000 fcf2 	bl	8006824 <__mcmp>
 8005e40:	4603      	mov	r3, r0
 8005e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e44:	4611      	mov	r1, r2
 8005e46:	4620      	mov	r0, r4
 8005e48:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4a:	f000 fb0a 	bl	8006462 <_Bfree>
 8005e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e50:	b9a3      	cbnz	r3, 8005e7c <_dtoa_r+0xa04>
 8005e52:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e54:	b992      	cbnz	r2, 8005e7c <_dtoa_r+0xa04>
 8005e56:	9a08      	ldr	r2, [sp, #32]
 8005e58:	b982      	cbnz	r2, 8005e7c <_dtoa_r+0xa04>
 8005e5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e5e:	d029      	beq.n	8005eb4 <_dtoa_r+0xa3c>
 8005e60:	9b02      	ldr	r3, [sp, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd01      	ble.n	8005e6a <_dtoa_r+0x9f2>
 8005e66:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005e6a:	9b07      	ldr	r3, [sp, #28]
 8005e6c:	1c5d      	adds	r5, r3, #1
 8005e6e:	f883 8000 	strb.w	r8, [r3]
 8005e72:	e784      	b.n	8005d7e <_dtoa_r+0x906>
 8005e74:	4638      	mov	r0, r7
 8005e76:	e7c2      	b.n	8005dfe <_dtoa_r+0x986>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e7e3      	b.n	8005e44 <_dtoa_r+0x9cc>
 8005e7c:	9a02      	ldr	r2, [sp, #8]
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	db04      	blt.n	8005e8c <_dtoa_r+0xa14>
 8005e82:	d123      	bne.n	8005ecc <_dtoa_r+0xa54>
 8005e84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e86:	bb0a      	cbnz	r2, 8005ecc <_dtoa_r+0xa54>
 8005e88:	9a08      	ldr	r2, [sp, #32]
 8005e8a:	b9fa      	cbnz	r2, 8005ecc <_dtoa_r+0xa54>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	ddec      	ble.n	8005e6a <_dtoa_r+0x9f2>
 8005e90:	4659      	mov	r1, fp
 8005e92:	2201      	movs	r2, #1
 8005e94:	4620      	mov	r0, r4
 8005e96:	f000 fc71 	bl	800677c <__lshift>
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4683      	mov	fp, r0
 8005e9e:	f000 fcc1 	bl	8006824 <__mcmp>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	dc03      	bgt.n	8005eae <_dtoa_r+0xa36>
 8005ea6:	d1e0      	bne.n	8005e6a <_dtoa_r+0x9f2>
 8005ea8:	f018 0f01 	tst.w	r8, #1
 8005eac:	d0dd      	beq.n	8005e6a <_dtoa_r+0x9f2>
 8005eae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005eb2:	d1d8      	bne.n	8005e66 <_dtoa_r+0x9ee>
 8005eb4:	9b07      	ldr	r3, [sp, #28]
 8005eb6:	9a07      	ldr	r2, [sp, #28]
 8005eb8:	1c5d      	adds	r5, r3, #1
 8005eba:	2339      	movs	r3, #57	; 0x39
 8005ebc:	7013      	strb	r3, [r2, #0]
 8005ebe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ec2:	1e6a      	subs	r2, r5, #1
 8005ec4:	2b39      	cmp	r3, #57	; 0x39
 8005ec6:	d04d      	beq.n	8005f64 <_dtoa_r+0xaec>
 8005ec8:	3301      	adds	r3, #1
 8005eca:	e052      	b.n	8005f72 <_dtoa_r+0xafa>
 8005ecc:	9a07      	ldr	r2, [sp, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f102 0501 	add.w	r5, r2, #1
 8005ed4:	dd06      	ble.n	8005ee4 <_dtoa_r+0xa6c>
 8005ed6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005eda:	d0eb      	beq.n	8005eb4 <_dtoa_r+0xa3c>
 8005edc:	f108 0801 	add.w	r8, r8, #1
 8005ee0:	9b07      	ldr	r3, [sp, #28]
 8005ee2:	e7c4      	b.n	8005e6e <_dtoa_r+0x9f6>
 8005ee4:	9b06      	ldr	r3, [sp, #24]
 8005ee6:	9a04      	ldr	r2, [sp, #16]
 8005ee8:	1aeb      	subs	r3, r5, r3
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005ef0:	d021      	beq.n	8005f36 <_dtoa_r+0xabe>
 8005ef2:	4659      	mov	r1, fp
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 fac9 	bl	8006490 <__multadd>
 8005efe:	45b9      	cmp	r9, r7
 8005f00:	4683      	mov	fp, r0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	f04f 020a 	mov.w	r2, #10
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	d105      	bne.n	8005f1c <_dtoa_r+0xaa4>
 8005f10:	f000 fabe 	bl	8006490 <__multadd>
 8005f14:	4681      	mov	r9, r0
 8005f16:	4607      	mov	r7, r0
 8005f18:	9507      	str	r5, [sp, #28]
 8005f1a:	e778      	b.n	8005e0e <_dtoa_r+0x996>
 8005f1c:	f000 fab8 	bl	8006490 <__multadd>
 8005f20:	4639      	mov	r1, r7
 8005f22:	4681      	mov	r9, r0
 8005f24:	2300      	movs	r3, #0
 8005f26:	220a      	movs	r2, #10
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 fab1 	bl	8006490 <__multadd>
 8005f2e:	4607      	mov	r7, r0
 8005f30:	e7f2      	b.n	8005f18 <_dtoa_r+0xaa0>
 8005f32:	f04f 0900 	mov.w	r9, #0
 8005f36:	4659      	mov	r1, fp
 8005f38:	2201      	movs	r2, #1
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 fc1e 	bl	800677c <__lshift>
 8005f40:	4631      	mov	r1, r6
 8005f42:	4683      	mov	fp, r0
 8005f44:	f000 fc6e 	bl	8006824 <__mcmp>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	dcb8      	bgt.n	8005ebe <_dtoa_r+0xa46>
 8005f4c:	d102      	bne.n	8005f54 <_dtoa_r+0xadc>
 8005f4e:	f018 0f01 	tst.w	r8, #1
 8005f52:	d1b4      	bne.n	8005ebe <_dtoa_r+0xa46>
 8005f54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f58:	1e6a      	subs	r2, r5, #1
 8005f5a:	2b30      	cmp	r3, #48	; 0x30
 8005f5c:	f47f af0f 	bne.w	8005d7e <_dtoa_r+0x906>
 8005f60:	4615      	mov	r5, r2
 8005f62:	e7f7      	b.n	8005f54 <_dtoa_r+0xadc>
 8005f64:	9b06      	ldr	r3, [sp, #24]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d105      	bne.n	8005f76 <_dtoa_r+0xafe>
 8005f6a:	2331      	movs	r3, #49	; 0x31
 8005f6c:	9a06      	ldr	r2, [sp, #24]
 8005f6e:	f10a 0a01 	add.w	sl, sl, #1
 8005f72:	7013      	strb	r3, [r2, #0]
 8005f74:	e703      	b.n	8005d7e <_dtoa_r+0x906>
 8005f76:	4615      	mov	r5, r2
 8005f78:	e7a1      	b.n	8005ebe <_dtoa_r+0xa46>
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <_dtoa_r+0xb60>)
 8005f7c:	f7ff bae1 	b.w	8005542 <_dtoa_r+0xca>
 8005f80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f47f aabb 	bne.w	80054fe <_dtoa_r+0x86>
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <_dtoa_r+0xb64>)
 8005f8a:	f7ff bada 	b.w	8005542 <_dtoa_r+0xca>
 8005f8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	f77f ae3f 	ble.w	8005c14 <_dtoa_r+0x79c>
 8005f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f98:	9308      	str	r3, [sp, #32]
 8005f9a:	e653      	b.n	8005c44 <_dtoa_r+0x7cc>
 8005f9c:	9b04      	ldr	r3, [sp, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	dc03      	bgt.n	8005faa <_dtoa_r+0xb32>
 8005fa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	f73f aed5 	bgt.w	8005d54 <_dtoa_r+0x8dc>
 8005faa:	9d06      	ldr	r5, [sp, #24]
 8005fac:	4631      	mov	r1, r6
 8005fae:	4658      	mov	r0, fp
 8005fb0:	f7ff f9d2 	bl	8005358 <quorem>
 8005fb4:	9b06      	ldr	r3, [sp, #24]
 8005fb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005fba:	f805 8b01 	strb.w	r8, [r5], #1
 8005fbe:	9a04      	ldr	r2, [sp, #16]
 8005fc0:	1aeb      	subs	r3, r5, r3
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	ddb5      	ble.n	8005f32 <_dtoa_r+0xaba>
 8005fc6:	4659      	mov	r1, fp
 8005fc8:	2300      	movs	r3, #0
 8005fca:	220a      	movs	r2, #10
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 fa5f 	bl	8006490 <__multadd>
 8005fd2:	4683      	mov	fp, r0
 8005fd4:	e7ea      	b.n	8005fac <_dtoa_r+0xb34>
 8005fd6:	bf00      	nop
 8005fd8:	080071e0 	.word	0x080071e0
 8005fdc:	08007229 	.word	0x08007229

08005fe0 <__sflush_r>:
 8005fe0:	898a      	ldrh	r2, [r1, #12]
 8005fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	0710      	lsls	r0, r2, #28
 8005fea:	460c      	mov	r4, r1
 8005fec:	d458      	bmi.n	80060a0 <__sflush_r+0xc0>
 8005fee:	684b      	ldr	r3, [r1, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dc05      	bgt.n	8006000 <__sflush_r+0x20>
 8005ff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dc02      	bgt.n	8006000 <__sflush_r+0x20>
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006002:	2e00      	cmp	r6, #0
 8006004:	d0f9      	beq.n	8005ffa <__sflush_r+0x1a>
 8006006:	2300      	movs	r3, #0
 8006008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800600c:	682f      	ldr	r7, [r5, #0]
 800600e:	6a21      	ldr	r1, [r4, #32]
 8006010:	602b      	str	r3, [r5, #0]
 8006012:	d032      	beq.n	800607a <__sflush_r+0x9a>
 8006014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	075a      	lsls	r2, r3, #29
 800601a:	d505      	bpl.n	8006028 <__sflush_r+0x48>
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	1ac0      	subs	r0, r0, r3
 8006020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006022:	b10b      	cbz	r3, 8006028 <__sflush_r+0x48>
 8006024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006026:	1ac0      	subs	r0, r0, r3
 8006028:	2300      	movs	r3, #0
 800602a:	4602      	mov	r2, r0
 800602c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800602e:	6a21      	ldr	r1, [r4, #32]
 8006030:	4628      	mov	r0, r5
 8006032:	47b0      	blx	r6
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	d106      	bne.n	8006048 <__sflush_r+0x68>
 800603a:	6829      	ldr	r1, [r5, #0]
 800603c:	291d      	cmp	r1, #29
 800603e:	d848      	bhi.n	80060d2 <__sflush_r+0xf2>
 8006040:	4a29      	ldr	r2, [pc, #164]	; (80060e8 <__sflush_r+0x108>)
 8006042:	40ca      	lsrs	r2, r1
 8006044:	07d6      	lsls	r6, r2, #31
 8006046:	d544      	bpl.n	80060d2 <__sflush_r+0xf2>
 8006048:	2200      	movs	r2, #0
 800604a:	6062      	str	r2, [r4, #4]
 800604c:	6922      	ldr	r2, [r4, #16]
 800604e:	04d9      	lsls	r1, r3, #19
 8006050:	6022      	str	r2, [r4, #0]
 8006052:	d504      	bpl.n	800605e <__sflush_r+0x7e>
 8006054:	1c42      	adds	r2, r0, #1
 8006056:	d101      	bne.n	800605c <__sflush_r+0x7c>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b903      	cbnz	r3, 800605e <__sflush_r+0x7e>
 800605c:	6560      	str	r0, [r4, #84]	; 0x54
 800605e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006060:	602f      	str	r7, [r5, #0]
 8006062:	2900      	cmp	r1, #0
 8006064:	d0c9      	beq.n	8005ffa <__sflush_r+0x1a>
 8006066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800606a:	4299      	cmp	r1, r3
 800606c:	d002      	beq.n	8006074 <__sflush_r+0x94>
 800606e:	4628      	mov	r0, r5
 8006070:	f000 fcae 	bl	80069d0 <_free_r>
 8006074:	2000      	movs	r0, #0
 8006076:	6360      	str	r0, [r4, #52]	; 0x34
 8006078:	e7c0      	b.n	8005ffc <__sflush_r+0x1c>
 800607a:	2301      	movs	r3, #1
 800607c:	4628      	mov	r0, r5
 800607e:	47b0      	blx	r6
 8006080:	1c41      	adds	r1, r0, #1
 8006082:	d1c8      	bne.n	8006016 <__sflush_r+0x36>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0c5      	beq.n	8006016 <__sflush_r+0x36>
 800608a:	2b1d      	cmp	r3, #29
 800608c:	d001      	beq.n	8006092 <__sflush_r+0xb2>
 800608e:	2b16      	cmp	r3, #22
 8006090:	d101      	bne.n	8006096 <__sflush_r+0xb6>
 8006092:	602f      	str	r7, [r5, #0]
 8006094:	e7b1      	b.n	8005ffa <__sflush_r+0x1a>
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	e7ad      	b.n	8005ffc <__sflush_r+0x1c>
 80060a0:	690f      	ldr	r7, [r1, #16]
 80060a2:	2f00      	cmp	r7, #0
 80060a4:	d0a9      	beq.n	8005ffa <__sflush_r+0x1a>
 80060a6:	0793      	lsls	r3, r2, #30
 80060a8:	bf18      	it	ne
 80060aa:	2300      	movne	r3, #0
 80060ac:	680e      	ldr	r6, [r1, #0]
 80060ae:	bf08      	it	eq
 80060b0:	694b      	ldreq	r3, [r1, #20]
 80060b2:	eba6 0807 	sub.w	r8, r6, r7
 80060b6:	600f      	str	r7, [r1, #0]
 80060b8:	608b      	str	r3, [r1, #8]
 80060ba:	f1b8 0f00 	cmp.w	r8, #0
 80060be:	dd9c      	ble.n	8005ffa <__sflush_r+0x1a>
 80060c0:	4643      	mov	r3, r8
 80060c2:	463a      	mov	r2, r7
 80060c4:	6a21      	ldr	r1, [r4, #32]
 80060c6:	4628      	mov	r0, r5
 80060c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060ca:	47b0      	blx	r6
 80060cc:	2800      	cmp	r0, #0
 80060ce:	dc06      	bgt.n	80060de <__sflush_r+0xfe>
 80060d0:	89a3      	ldrh	r3, [r4, #12]
 80060d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d6:	81a3      	strh	r3, [r4, #12]
 80060d8:	f04f 30ff 	mov.w	r0, #4294967295
 80060dc:	e78e      	b.n	8005ffc <__sflush_r+0x1c>
 80060de:	4407      	add	r7, r0
 80060e0:	eba8 0800 	sub.w	r8, r8, r0
 80060e4:	e7e9      	b.n	80060ba <__sflush_r+0xda>
 80060e6:	bf00      	nop
 80060e8:	20400001 	.word	0x20400001

080060ec <_fflush_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	690b      	ldr	r3, [r1, #16]
 80060f0:	4605      	mov	r5, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	b1db      	cbz	r3, 800612e <_fflush_r+0x42>
 80060f6:	b118      	cbz	r0, 8006100 <_fflush_r+0x14>
 80060f8:	6983      	ldr	r3, [r0, #24]
 80060fa:	b90b      	cbnz	r3, 8006100 <_fflush_r+0x14>
 80060fc:	f000 f860 	bl	80061c0 <__sinit>
 8006100:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <_fflush_r+0x48>)
 8006102:	429c      	cmp	r4, r3
 8006104:	d109      	bne.n	800611a <_fflush_r+0x2e>
 8006106:	686c      	ldr	r4, [r5, #4]
 8006108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800610c:	b17b      	cbz	r3, 800612e <_fflush_r+0x42>
 800610e:	4621      	mov	r1, r4
 8006110:	4628      	mov	r0, r5
 8006112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006116:	f7ff bf63 	b.w	8005fe0 <__sflush_r>
 800611a:	4b07      	ldr	r3, [pc, #28]	; (8006138 <_fflush_r+0x4c>)
 800611c:	429c      	cmp	r4, r3
 800611e:	d101      	bne.n	8006124 <_fflush_r+0x38>
 8006120:	68ac      	ldr	r4, [r5, #8]
 8006122:	e7f1      	b.n	8006108 <_fflush_r+0x1c>
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <_fflush_r+0x50>)
 8006126:	429c      	cmp	r4, r3
 8006128:	bf08      	it	eq
 800612a:	68ec      	ldreq	r4, [r5, #12]
 800612c:	e7ec      	b.n	8006108 <_fflush_r+0x1c>
 800612e:	2000      	movs	r0, #0
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	bf00      	nop
 8006134:	08007258 	.word	0x08007258
 8006138:	08007278 	.word	0x08007278
 800613c:	08007238 	.word	0x08007238

08006140 <std>:
 8006140:	2300      	movs	r3, #0
 8006142:	b510      	push	{r4, lr}
 8006144:	4604      	mov	r4, r0
 8006146:	e9c0 3300 	strd	r3, r3, [r0]
 800614a:	6083      	str	r3, [r0, #8]
 800614c:	8181      	strh	r1, [r0, #12]
 800614e:	6643      	str	r3, [r0, #100]	; 0x64
 8006150:	81c2      	strh	r2, [r0, #14]
 8006152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006156:	6183      	str	r3, [r0, #24]
 8006158:	4619      	mov	r1, r3
 800615a:	2208      	movs	r2, #8
 800615c:	305c      	adds	r0, #92	; 0x5c
 800615e:	f7fe fb9f 	bl	80048a0 <memset>
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <std+0x38>)
 8006164:	6224      	str	r4, [r4, #32]
 8006166:	6263      	str	r3, [r4, #36]	; 0x24
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <std+0x3c>)
 800616a:	62a3      	str	r3, [r4, #40]	; 0x28
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <std+0x40>)
 800616e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006170:	4b04      	ldr	r3, [pc, #16]	; (8006184 <std+0x44>)
 8006172:	6323      	str	r3, [r4, #48]	; 0x30
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop
 8006178:	08006db9 	.word	0x08006db9
 800617c:	08006ddb 	.word	0x08006ddb
 8006180:	08006e13 	.word	0x08006e13
 8006184:	08006e37 	.word	0x08006e37

08006188 <_cleanup_r>:
 8006188:	4901      	ldr	r1, [pc, #4]	; (8006190 <_cleanup_r+0x8>)
 800618a:	f000 b885 	b.w	8006298 <_fwalk_reent>
 800618e:	bf00      	nop
 8006190:	080060ed 	.word	0x080060ed

08006194 <__sfmoreglue>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	2568      	movs	r5, #104	; 0x68
 8006198:	1e4a      	subs	r2, r1, #1
 800619a:	4355      	muls	r5, r2
 800619c:	460e      	mov	r6, r1
 800619e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061a2:	f000 fc61 	bl	8006a68 <_malloc_r>
 80061a6:	4604      	mov	r4, r0
 80061a8:	b140      	cbz	r0, 80061bc <__sfmoreglue+0x28>
 80061aa:	2100      	movs	r1, #0
 80061ac:	e9c0 1600 	strd	r1, r6, [r0]
 80061b0:	300c      	adds	r0, #12
 80061b2:	60a0      	str	r0, [r4, #8]
 80061b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061b8:	f7fe fb72 	bl	80048a0 <memset>
 80061bc:	4620      	mov	r0, r4
 80061be:	bd70      	pop	{r4, r5, r6, pc}

080061c0 <__sinit>:
 80061c0:	6983      	ldr	r3, [r0, #24]
 80061c2:	b510      	push	{r4, lr}
 80061c4:	4604      	mov	r4, r0
 80061c6:	bb33      	cbnz	r3, 8006216 <__sinit+0x56>
 80061c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80061cc:	6503      	str	r3, [r0, #80]	; 0x50
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <__sinit+0x58>)
 80061d0:	4a12      	ldr	r2, [pc, #72]	; (800621c <__sinit+0x5c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6282      	str	r2, [r0, #40]	; 0x28
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bf04      	itt	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	6183      	streq	r3, [r0, #24]
 80061de:	f000 f81f 	bl	8006220 <__sfp>
 80061e2:	6060      	str	r0, [r4, #4]
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 f81b 	bl	8006220 <__sfp>
 80061ea:	60a0      	str	r0, [r4, #8]
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 f817 	bl	8006220 <__sfp>
 80061f2:	2200      	movs	r2, #0
 80061f4:	60e0      	str	r0, [r4, #12]
 80061f6:	2104      	movs	r1, #4
 80061f8:	6860      	ldr	r0, [r4, #4]
 80061fa:	f7ff ffa1 	bl	8006140 <std>
 80061fe:	2201      	movs	r2, #1
 8006200:	2109      	movs	r1, #9
 8006202:	68a0      	ldr	r0, [r4, #8]
 8006204:	f7ff ff9c 	bl	8006140 <std>
 8006208:	2202      	movs	r2, #2
 800620a:	2112      	movs	r1, #18
 800620c:	68e0      	ldr	r0, [r4, #12]
 800620e:	f7ff ff97 	bl	8006140 <std>
 8006212:	2301      	movs	r3, #1
 8006214:	61a3      	str	r3, [r4, #24]
 8006216:	bd10      	pop	{r4, pc}
 8006218:	080071cc 	.word	0x080071cc
 800621c:	08006189 	.word	0x08006189

08006220 <__sfp>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <__sfp+0x70>)
 8006224:	4607      	mov	r7, r0
 8006226:	681e      	ldr	r6, [r3, #0]
 8006228:	69b3      	ldr	r3, [r6, #24]
 800622a:	b913      	cbnz	r3, 8006232 <__sfp+0x12>
 800622c:	4630      	mov	r0, r6
 800622e:	f7ff ffc7 	bl	80061c0 <__sinit>
 8006232:	3648      	adds	r6, #72	; 0x48
 8006234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006238:	3b01      	subs	r3, #1
 800623a:	d503      	bpl.n	8006244 <__sfp+0x24>
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	b133      	cbz	r3, 800624e <__sfp+0x2e>
 8006240:	6836      	ldr	r6, [r6, #0]
 8006242:	e7f7      	b.n	8006234 <__sfp+0x14>
 8006244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006248:	b16d      	cbz	r5, 8006266 <__sfp+0x46>
 800624a:	3468      	adds	r4, #104	; 0x68
 800624c:	e7f4      	b.n	8006238 <__sfp+0x18>
 800624e:	2104      	movs	r1, #4
 8006250:	4638      	mov	r0, r7
 8006252:	f7ff ff9f 	bl	8006194 <__sfmoreglue>
 8006256:	6030      	str	r0, [r6, #0]
 8006258:	2800      	cmp	r0, #0
 800625a:	d1f1      	bne.n	8006240 <__sfp+0x20>
 800625c:	230c      	movs	r3, #12
 800625e:	4604      	mov	r4, r0
 8006260:	603b      	str	r3, [r7, #0]
 8006262:	4620      	mov	r0, r4
 8006264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <__sfp+0x74>)
 8006268:	6665      	str	r5, [r4, #100]	; 0x64
 800626a:	e9c4 5500 	strd	r5, r5, [r4]
 800626e:	60a5      	str	r5, [r4, #8]
 8006270:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006274:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006278:	2208      	movs	r2, #8
 800627a:	4629      	mov	r1, r5
 800627c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006280:	f7fe fb0e 	bl	80048a0 <memset>
 8006284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800628c:	e7e9      	b.n	8006262 <__sfp+0x42>
 800628e:	bf00      	nop
 8006290:	080071cc 	.word	0x080071cc
 8006294:	ffff0001 	.word	0xffff0001

08006298 <_fwalk_reent>:
 8006298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800629c:	4680      	mov	r8, r0
 800629e:	4689      	mov	r9, r1
 80062a0:	2600      	movs	r6, #0
 80062a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062a6:	b914      	cbnz	r4, 80062ae <_fwalk_reent+0x16>
 80062a8:	4630      	mov	r0, r6
 80062aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80062b2:	3f01      	subs	r7, #1
 80062b4:	d501      	bpl.n	80062ba <_fwalk_reent+0x22>
 80062b6:	6824      	ldr	r4, [r4, #0]
 80062b8:	e7f5      	b.n	80062a6 <_fwalk_reent+0xe>
 80062ba:	89ab      	ldrh	r3, [r5, #12]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d907      	bls.n	80062d0 <_fwalk_reent+0x38>
 80062c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062c4:	3301      	adds	r3, #1
 80062c6:	d003      	beq.n	80062d0 <_fwalk_reent+0x38>
 80062c8:	4629      	mov	r1, r5
 80062ca:	4640      	mov	r0, r8
 80062cc:	47c8      	blx	r9
 80062ce:	4306      	orrs	r6, r0
 80062d0:	3568      	adds	r5, #104	; 0x68
 80062d2:	e7ee      	b.n	80062b2 <_fwalk_reent+0x1a>

080062d4 <_localeconv_r>:
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <_localeconv_r+0x14>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6a18      	ldr	r0, [r3, #32]
 80062da:	4b04      	ldr	r3, [pc, #16]	; (80062ec <_localeconv_r+0x18>)
 80062dc:	2800      	cmp	r0, #0
 80062de:	bf08      	it	eq
 80062e0:	4618      	moveq	r0, r3
 80062e2:	30f0      	adds	r0, #240	; 0xf0
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	20000014 	.word	0x20000014
 80062ec:	20000078 	.word	0x20000078

080062f0 <__swhatbuf_r>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	460e      	mov	r6, r1
 80062f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f8:	b096      	sub	sp, #88	; 0x58
 80062fa:	2900      	cmp	r1, #0
 80062fc:	4614      	mov	r4, r2
 80062fe:	461d      	mov	r5, r3
 8006300:	da07      	bge.n	8006312 <__swhatbuf_r+0x22>
 8006302:	2300      	movs	r3, #0
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	89b3      	ldrh	r3, [r6, #12]
 8006308:	061a      	lsls	r2, r3, #24
 800630a:	d410      	bmi.n	800632e <__swhatbuf_r+0x3e>
 800630c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006310:	e00e      	b.n	8006330 <__swhatbuf_r+0x40>
 8006312:	466a      	mov	r2, sp
 8006314:	f000 fe76 	bl	8007004 <_fstat_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	dbf2      	blt.n	8006302 <__swhatbuf_r+0x12>
 800631c:	9a01      	ldr	r2, [sp, #4]
 800631e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006322:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006326:	425a      	negs	r2, r3
 8006328:	415a      	adcs	r2, r3
 800632a:	602a      	str	r2, [r5, #0]
 800632c:	e7ee      	b.n	800630c <__swhatbuf_r+0x1c>
 800632e:	2340      	movs	r3, #64	; 0x40
 8006330:	2000      	movs	r0, #0
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	b016      	add	sp, #88	; 0x58
 8006336:	bd70      	pop	{r4, r5, r6, pc}

08006338 <__smakebuf_r>:
 8006338:	898b      	ldrh	r3, [r1, #12]
 800633a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800633c:	079d      	lsls	r5, r3, #30
 800633e:	4606      	mov	r6, r0
 8006340:	460c      	mov	r4, r1
 8006342:	d507      	bpl.n	8006354 <__smakebuf_r+0x1c>
 8006344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	2301      	movs	r3, #1
 800634e:	6163      	str	r3, [r4, #20]
 8006350:	b002      	add	sp, #8
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	ab01      	add	r3, sp, #4
 8006356:	466a      	mov	r2, sp
 8006358:	f7ff ffca 	bl	80062f0 <__swhatbuf_r>
 800635c:	9900      	ldr	r1, [sp, #0]
 800635e:	4605      	mov	r5, r0
 8006360:	4630      	mov	r0, r6
 8006362:	f000 fb81 	bl	8006a68 <_malloc_r>
 8006366:	b948      	cbnz	r0, 800637c <__smakebuf_r+0x44>
 8006368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800636c:	059a      	lsls	r2, r3, #22
 800636e:	d4ef      	bmi.n	8006350 <__smakebuf_r+0x18>
 8006370:	f023 0303 	bic.w	r3, r3, #3
 8006374:	f043 0302 	orr.w	r3, r3, #2
 8006378:	81a3      	strh	r3, [r4, #12]
 800637a:	e7e3      	b.n	8006344 <__smakebuf_r+0xc>
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <__smakebuf_r+0x7c>)
 800637e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	6020      	str	r0, [r4, #0]
 8006384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006388:	81a3      	strh	r3, [r4, #12]
 800638a:	9b00      	ldr	r3, [sp, #0]
 800638c:	6120      	str	r0, [r4, #16]
 800638e:	6163      	str	r3, [r4, #20]
 8006390:	9b01      	ldr	r3, [sp, #4]
 8006392:	b15b      	cbz	r3, 80063ac <__smakebuf_r+0x74>
 8006394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006398:	4630      	mov	r0, r6
 800639a:	f000 fe45 	bl	8007028 <_isatty_r>
 800639e:	b128      	cbz	r0, 80063ac <__smakebuf_r+0x74>
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	f023 0303 	bic.w	r3, r3, #3
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	431d      	orrs	r5, r3
 80063b0:	81a5      	strh	r5, [r4, #12]
 80063b2:	e7cd      	b.n	8006350 <__smakebuf_r+0x18>
 80063b4:	08006189 	.word	0x08006189

080063b8 <malloc>:
 80063b8:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <malloc+0xc>)
 80063ba:	4601      	mov	r1, r0
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	f000 bb53 	b.w	8006a68 <_malloc_r>
 80063c2:	bf00      	nop
 80063c4:	20000014 	.word	0x20000014

080063c8 <memchr>:
 80063c8:	b510      	push	{r4, lr}
 80063ca:	b2c9      	uxtb	r1, r1
 80063cc:	4402      	add	r2, r0
 80063ce:	4290      	cmp	r0, r2
 80063d0:	4603      	mov	r3, r0
 80063d2:	d101      	bne.n	80063d8 <memchr+0x10>
 80063d4:	2300      	movs	r3, #0
 80063d6:	e003      	b.n	80063e0 <memchr+0x18>
 80063d8:	781c      	ldrb	r4, [r3, #0]
 80063da:	3001      	adds	r0, #1
 80063dc:	428c      	cmp	r4, r1
 80063de:	d1f6      	bne.n	80063ce <memchr+0x6>
 80063e0:	4618      	mov	r0, r3
 80063e2:	bd10      	pop	{r4, pc}

080063e4 <memcpy>:
 80063e4:	b510      	push	{r4, lr}
 80063e6:	1e43      	subs	r3, r0, #1
 80063e8:	440a      	add	r2, r1
 80063ea:	4291      	cmp	r1, r2
 80063ec:	d100      	bne.n	80063f0 <memcpy+0xc>
 80063ee:	bd10      	pop	{r4, pc}
 80063f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f8:	e7f7      	b.n	80063ea <memcpy+0x6>

080063fa <_Balloc>:
 80063fa:	b570      	push	{r4, r5, r6, lr}
 80063fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063fe:	4604      	mov	r4, r0
 8006400:	460e      	mov	r6, r1
 8006402:	b93d      	cbnz	r5, 8006414 <_Balloc+0x1a>
 8006404:	2010      	movs	r0, #16
 8006406:	f7ff ffd7 	bl	80063b8 <malloc>
 800640a:	6260      	str	r0, [r4, #36]	; 0x24
 800640c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006410:	6005      	str	r5, [r0, #0]
 8006412:	60c5      	str	r5, [r0, #12]
 8006414:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006416:	68eb      	ldr	r3, [r5, #12]
 8006418:	b183      	cbz	r3, 800643c <_Balloc+0x42>
 800641a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006422:	b9b8      	cbnz	r0, 8006454 <_Balloc+0x5a>
 8006424:	2101      	movs	r1, #1
 8006426:	fa01 f506 	lsl.w	r5, r1, r6
 800642a:	1d6a      	adds	r2, r5, #5
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	4620      	mov	r0, r4
 8006430:	f000 fabf 	bl	80069b2 <_calloc_r>
 8006434:	b160      	cbz	r0, 8006450 <_Balloc+0x56>
 8006436:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800643a:	e00e      	b.n	800645a <_Balloc+0x60>
 800643c:	2221      	movs	r2, #33	; 0x21
 800643e:	2104      	movs	r1, #4
 8006440:	4620      	mov	r0, r4
 8006442:	f000 fab6 	bl	80069b2 <_calloc_r>
 8006446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006448:	60e8      	str	r0, [r5, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e4      	bne.n	800641a <_Balloc+0x20>
 8006450:	2000      	movs	r0, #0
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	6802      	ldr	r2, [r0, #0]
 8006456:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800645a:	2300      	movs	r3, #0
 800645c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006460:	e7f7      	b.n	8006452 <_Balloc+0x58>

08006462 <_Bfree>:
 8006462:	b570      	push	{r4, r5, r6, lr}
 8006464:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006466:	4606      	mov	r6, r0
 8006468:	460d      	mov	r5, r1
 800646a:	b93c      	cbnz	r4, 800647c <_Bfree+0x1a>
 800646c:	2010      	movs	r0, #16
 800646e:	f7ff ffa3 	bl	80063b8 <malloc>
 8006472:	6270      	str	r0, [r6, #36]	; 0x24
 8006474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006478:	6004      	str	r4, [r0, #0]
 800647a:	60c4      	str	r4, [r0, #12]
 800647c:	b13d      	cbz	r5, 800648e <_Bfree+0x2c>
 800647e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006480:	686a      	ldr	r2, [r5, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006488:	6029      	str	r1, [r5, #0]
 800648a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800648e:	bd70      	pop	{r4, r5, r6, pc}

08006490 <__multadd>:
 8006490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006494:	461f      	mov	r7, r3
 8006496:	4606      	mov	r6, r0
 8006498:	460c      	mov	r4, r1
 800649a:	2300      	movs	r3, #0
 800649c:	690d      	ldr	r5, [r1, #16]
 800649e:	f101 0c14 	add.w	ip, r1, #20
 80064a2:	f8dc 0000 	ldr.w	r0, [ip]
 80064a6:	3301      	adds	r3, #1
 80064a8:	b281      	uxth	r1, r0
 80064aa:	fb02 7101 	mla	r1, r2, r1, r7
 80064ae:	0c00      	lsrs	r0, r0, #16
 80064b0:	0c0f      	lsrs	r7, r1, #16
 80064b2:	fb02 7000 	mla	r0, r2, r0, r7
 80064b6:	b289      	uxth	r1, r1
 80064b8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80064bc:	429d      	cmp	r5, r3
 80064be:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80064c2:	f84c 1b04 	str.w	r1, [ip], #4
 80064c6:	dcec      	bgt.n	80064a2 <__multadd+0x12>
 80064c8:	b1d7      	cbz	r7, 8006500 <__multadd+0x70>
 80064ca:	68a3      	ldr	r3, [r4, #8]
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	dc12      	bgt.n	80064f6 <__multadd+0x66>
 80064d0:	6861      	ldr	r1, [r4, #4]
 80064d2:	4630      	mov	r0, r6
 80064d4:	3101      	adds	r1, #1
 80064d6:	f7ff ff90 	bl	80063fa <_Balloc>
 80064da:	4680      	mov	r8, r0
 80064dc:	6922      	ldr	r2, [r4, #16]
 80064de:	f104 010c 	add.w	r1, r4, #12
 80064e2:	3202      	adds	r2, #2
 80064e4:	0092      	lsls	r2, r2, #2
 80064e6:	300c      	adds	r0, #12
 80064e8:	f7ff ff7c 	bl	80063e4 <memcpy>
 80064ec:	4621      	mov	r1, r4
 80064ee:	4630      	mov	r0, r6
 80064f0:	f7ff ffb7 	bl	8006462 <_Bfree>
 80064f4:	4644      	mov	r4, r8
 80064f6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064fa:	3501      	adds	r5, #1
 80064fc:	615f      	str	r7, [r3, #20]
 80064fe:	6125      	str	r5, [r4, #16]
 8006500:	4620      	mov	r0, r4
 8006502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006506 <__hi0bits>:
 8006506:	0c02      	lsrs	r2, r0, #16
 8006508:	0412      	lsls	r2, r2, #16
 800650a:	4603      	mov	r3, r0
 800650c:	b9b2      	cbnz	r2, 800653c <__hi0bits+0x36>
 800650e:	0403      	lsls	r3, r0, #16
 8006510:	2010      	movs	r0, #16
 8006512:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006516:	bf04      	itt	eq
 8006518:	021b      	lsleq	r3, r3, #8
 800651a:	3008      	addeq	r0, #8
 800651c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006520:	bf04      	itt	eq
 8006522:	011b      	lsleq	r3, r3, #4
 8006524:	3004      	addeq	r0, #4
 8006526:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800652a:	bf04      	itt	eq
 800652c:	009b      	lsleq	r3, r3, #2
 800652e:	3002      	addeq	r0, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	db06      	blt.n	8006542 <__hi0bits+0x3c>
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	d503      	bpl.n	8006540 <__hi0bits+0x3a>
 8006538:	3001      	adds	r0, #1
 800653a:	4770      	bx	lr
 800653c:	2000      	movs	r0, #0
 800653e:	e7e8      	b.n	8006512 <__hi0bits+0xc>
 8006540:	2020      	movs	r0, #32
 8006542:	4770      	bx	lr

08006544 <__lo0bits>:
 8006544:	6803      	ldr	r3, [r0, #0]
 8006546:	4601      	mov	r1, r0
 8006548:	f013 0207 	ands.w	r2, r3, #7
 800654c:	d00b      	beq.n	8006566 <__lo0bits+0x22>
 800654e:	07da      	lsls	r2, r3, #31
 8006550:	d423      	bmi.n	800659a <__lo0bits+0x56>
 8006552:	0798      	lsls	r0, r3, #30
 8006554:	bf49      	itett	mi
 8006556:	085b      	lsrmi	r3, r3, #1
 8006558:	089b      	lsrpl	r3, r3, #2
 800655a:	2001      	movmi	r0, #1
 800655c:	600b      	strmi	r3, [r1, #0]
 800655e:	bf5c      	itt	pl
 8006560:	600b      	strpl	r3, [r1, #0]
 8006562:	2002      	movpl	r0, #2
 8006564:	4770      	bx	lr
 8006566:	b298      	uxth	r0, r3
 8006568:	b9a8      	cbnz	r0, 8006596 <__lo0bits+0x52>
 800656a:	2010      	movs	r0, #16
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006572:	bf04      	itt	eq
 8006574:	0a1b      	lsreq	r3, r3, #8
 8006576:	3008      	addeq	r0, #8
 8006578:	071a      	lsls	r2, r3, #28
 800657a:	bf04      	itt	eq
 800657c:	091b      	lsreq	r3, r3, #4
 800657e:	3004      	addeq	r0, #4
 8006580:	079a      	lsls	r2, r3, #30
 8006582:	bf04      	itt	eq
 8006584:	089b      	lsreq	r3, r3, #2
 8006586:	3002      	addeq	r0, #2
 8006588:	07da      	lsls	r2, r3, #31
 800658a:	d402      	bmi.n	8006592 <__lo0bits+0x4e>
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	d006      	beq.n	800659e <__lo0bits+0x5a>
 8006590:	3001      	adds	r0, #1
 8006592:	600b      	str	r3, [r1, #0]
 8006594:	4770      	bx	lr
 8006596:	4610      	mov	r0, r2
 8006598:	e7e9      	b.n	800656e <__lo0bits+0x2a>
 800659a:	2000      	movs	r0, #0
 800659c:	4770      	bx	lr
 800659e:	2020      	movs	r0, #32
 80065a0:	4770      	bx	lr

080065a2 <__i2b>:
 80065a2:	b510      	push	{r4, lr}
 80065a4:	460c      	mov	r4, r1
 80065a6:	2101      	movs	r1, #1
 80065a8:	f7ff ff27 	bl	80063fa <_Balloc>
 80065ac:	2201      	movs	r2, #1
 80065ae:	6144      	str	r4, [r0, #20]
 80065b0:	6102      	str	r2, [r0, #16]
 80065b2:	bd10      	pop	{r4, pc}

080065b4 <__multiply>:
 80065b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	4614      	mov	r4, r2
 80065ba:	690a      	ldr	r2, [r1, #16]
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	4688      	mov	r8, r1
 80065c0:	429a      	cmp	r2, r3
 80065c2:	bfbe      	ittt	lt
 80065c4:	460b      	movlt	r3, r1
 80065c6:	46a0      	movlt	r8, r4
 80065c8:	461c      	movlt	r4, r3
 80065ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80065ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065da:	eb07 0609 	add.w	r6, r7, r9
 80065de:	42b3      	cmp	r3, r6
 80065e0:	bfb8      	it	lt
 80065e2:	3101      	addlt	r1, #1
 80065e4:	f7ff ff09 	bl	80063fa <_Balloc>
 80065e8:	f100 0514 	add.w	r5, r0, #20
 80065ec:	462b      	mov	r3, r5
 80065ee:	2200      	movs	r2, #0
 80065f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80065f4:	4573      	cmp	r3, lr
 80065f6:	d316      	bcc.n	8006626 <__multiply+0x72>
 80065f8:	f104 0214 	add.w	r2, r4, #20
 80065fc:	f108 0114 	add.w	r1, r8, #20
 8006600:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006604:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	9b00      	ldr	r3, [sp, #0]
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	4293      	cmp	r3, r2
 8006610:	d80c      	bhi.n	800662c <__multiply+0x78>
 8006612:	2e00      	cmp	r6, #0
 8006614:	dd03      	ble.n	800661e <__multiply+0x6a>
 8006616:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800661a:	2b00      	cmp	r3, #0
 800661c:	d05d      	beq.n	80066da <__multiply+0x126>
 800661e:	6106      	str	r6, [r0, #16]
 8006620:	b003      	add	sp, #12
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	f843 2b04 	str.w	r2, [r3], #4
 800662a:	e7e3      	b.n	80065f4 <__multiply+0x40>
 800662c:	f8b2 b000 	ldrh.w	fp, [r2]
 8006630:	f1bb 0f00 	cmp.w	fp, #0
 8006634:	d023      	beq.n	800667e <__multiply+0xca>
 8006636:	4689      	mov	r9, r1
 8006638:	46ac      	mov	ip, r5
 800663a:	f04f 0800 	mov.w	r8, #0
 800663e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006642:	f8dc a000 	ldr.w	sl, [ip]
 8006646:	b2a3      	uxth	r3, r4
 8006648:	fa1f fa8a 	uxth.w	sl, sl
 800664c:	fb0b a303 	mla	r3, fp, r3, sl
 8006650:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006654:	f8dc 4000 	ldr.w	r4, [ip]
 8006658:	4443      	add	r3, r8
 800665a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800665e:	fb0b 840a 	mla	r4, fp, sl, r8
 8006662:	46e2      	mov	sl, ip
 8006664:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006668:	b29b      	uxth	r3, r3
 800666a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800666e:	454f      	cmp	r7, r9
 8006670:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006674:	f84a 3b04 	str.w	r3, [sl], #4
 8006678:	d82b      	bhi.n	80066d2 <__multiply+0x11e>
 800667a:	f8cc 8004 	str.w	r8, [ip, #4]
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	3204      	adds	r2, #4
 8006682:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006686:	f1ba 0f00 	cmp.w	sl, #0
 800668a:	d020      	beq.n	80066ce <__multiply+0x11a>
 800668c:	4689      	mov	r9, r1
 800668e:	46a8      	mov	r8, r5
 8006690:	f04f 0b00 	mov.w	fp, #0
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	f8b9 c000 	ldrh.w	ip, [r9]
 800669a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	fb0a 440c 	mla	r4, sl, ip, r4
 80066a4:	46c4      	mov	ip, r8
 80066a6:	445c      	add	r4, fp
 80066a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80066ac:	f84c 3b04 	str.w	r3, [ip], #4
 80066b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80066b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	fb0a b303 	mla	r3, sl, r3, fp
 80066be:	454f      	cmp	r7, r9
 80066c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80066c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80066c8:	d805      	bhi.n	80066d6 <__multiply+0x122>
 80066ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80066ce:	3504      	adds	r5, #4
 80066d0:	e79b      	b.n	800660a <__multiply+0x56>
 80066d2:	46d4      	mov	ip, sl
 80066d4:	e7b3      	b.n	800663e <__multiply+0x8a>
 80066d6:	46e0      	mov	r8, ip
 80066d8:	e7dd      	b.n	8006696 <__multiply+0xe2>
 80066da:	3e01      	subs	r6, #1
 80066dc:	e799      	b.n	8006612 <__multiply+0x5e>
	...

080066e0 <__pow5mult>:
 80066e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e4:	4615      	mov	r5, r2
 80066e6:	f012 0203 	ands.w	r2, r2, #3
 80066ea:	4606      	mov	r6, r0
 80066ec:	460f      	mov	r7, r1
 80066ee:	d007      	beq.n	8006700 <__pow5mult+0x20>
 80066f0:	4c21      	ldr	r4, [pc, #132]	; (8006778 <__pow5mult+0x98>)
 80066f2:	3a01      	subs	r2, #1
 80066f4:	2300      	movs	r3, #0
 80066f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066fa:	f7ff fec9 	bl	8006490 <__multadd>
 80066fe:	4607      	mov	r7, r0
 8006700:	10ad      	asrs	r5, r5, #2
 8006702:	d035      	beq.n	8006770 <__pow5mult+0x90>
 8006704:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006706:	b93c      	cbnz	r4, 8006718 <__pow5mult+0x38>
 8006708:	2010      	movs	r0, #16
 800670a:	f7ff fe55 	bl	80063b8 <malloc>
 800670e:	6270      	str	r0, [r6, #36]	; 0x24
 8006710:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006714:	6004      	str	r4, [r0, #0]
 8006716:	60c4      	str	r4, [r0, #12]
 8006718:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800671c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006720:	b94c      	cbnz	r4, 8006736 <__pow5mult+0x56>
 8006722:	f240 2171 	movw	r1, #625	; 0x271
 8006726:	4630      	mov	r0, r6
 8006728:	f7ff ff3b 	bl	80065a2 <__i2b>
 800672c:	2300      	movs	r3, #0
 800672e:	4604      	mov	r4, r0
 8006730:	f8c8 0008 	str.w	r0, [r8, #8]
 8006734:	6003      	str	r3, [r0, #0]
 8006736:	f04f 0800 	mov.w	r8, #0
 800673a:	07eb      	lsls	r3, r5, #31
 800673c:	d50a      	bpl.n	8006754 <__pow5mult+0x74>
 800673e:	4639      	mov	r1, r7
 8006740:	4622      	mov	r2, r4
 8006742:	4630      	mov	r0, r6
 8006744:	f7ff ff36 	bl	80065b4 <__multiply>
 8006748:	4681      	mov	r9, r0
 800674a:	4639      	mov	r1, r7
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff fe88 	bl	8006462 <_Bfree>
 8006752:	464f      	mov	r7, r9
 8006754:	106d      	asrs	r5, r5, #1
 8006756:	d00b      	beq.n	8006770 <__pow5mult+0x90>
 8006758:	6820      	ldr	r0, [r4, #0]
 800675a:	b938      	cbnz	r0, 800676c <__pow5mult+0x8c>
 800675c:	4622      	mov	r2, r4
 800675e:	4621      	mov	r1, r4
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff ff27 	bl	80065b4 <__multiply>
 8006766:	6020      	str	r0, [r4, #0]
 8006768:	f8c0 8000 	str.w	r8, [r0]
 800676c:	4604      	mov	r4, r0
 800676e:	e7e4      	b.n	800673a <__pow5mult+0x5a>
 8006770:	4638      	mov	r0, r7
 8006772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006776:	bf00      	nop
 8006778:	08007388 	.word	0x08007388

0800677c <__lshift>:
 800677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	460c      	mov	r4, r1
 8006782:	4607      	mov	r7, r0
 8006784:	4616      	mov	r6, r2
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800678c:	eb0a 0903 	add.w	r9, sl, r3
 8006790:	6849      	ldr	r1, [r1, #4]
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	f109 0501 	add.w	r5, r9, #1
 8006798:	42ab      	cmp	r3, r5
 800679a:	db32      	blt.n	8006802 <__lshift+0x86>
 800679c:	4638      	mov	r0, r7
 800679e:	f7ff fe2c 	bl	80063fa <_Balloc>
 80067a2:	2300      	movs	r3, #0
 80067a4:	4680      	mov	r8, r0
 80067a6:	461a      	mov	r2, r3
 80067a8:	f100 0114 	add.w	r1, r0, #20
 80067ac:	4553      	cmp	r3, sl
 80067ae:	db2b      	blt.n	8006808 <__lshift+0x8c>
 80067b0:	6920      	ldr	r0, [r4, #16]
 80067b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067b6:	f104 0314 	add.w	r3, r4, #20
 80067ba:	f016 021f 	ands.w	r2, r6, #31
 80067be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067c6:	d025      	beq.n	8006814 <__lshift+0x98>
 80067c8:	2000      	movs	r0, #0
 80067ca:	f1c2 0e20 	rsb	lr, r2, #32
 80067ce:	468a      	mov	sl, r1
 80067d0:	681e      	ldr	r6, [r3, #0]
 80067d2:	4096      	lsls	r6, r2
 80067d4:	4330      	orrs	r0, r6
 80067d6:	f84a 0b04 	str.w	r0, [sl], #4
 80067da:	f853 0b04 	ldr.w	r0, [r3], #4
 80067de:	459c      	cmp	ip, r3
 80067e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80067e4:	d814      	bhi.n	8006810 <__lshift+0x94>
 80067e6:	6048      	str	r0, [r1, #4]
 80067e8:	b108      	cbz	r0, 80067ee <__lshift+0x72>
 80067ea:	f109 0502 	add.w	r5, r9, #2
 80067ee:	3d01      	subs	r5, #1
 80067f0:	4638      	mov	r0, r7
 80067f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80067f6:	4621      	mov	r1, r4
 80067f8:	f7ff fe33 	bl	8006462 <_Bfree>
 80067fc:	4640      	mov	r0, r8
 80067fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006802:	3101      	adds	r1, #1
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	e7c7      	b.n	8006798 <__lshift+0x1c>
 8006808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800680c:	3301      	adds	r3, #1
 800680e:	e7cd      	b.n	80067ac <__lshift+0x30>
 8006810:	4651      	mov	r1, sl
 8006812:	e7dc      	b.n	80067ce <__lshift+0x52>
 8006814:	3904      	subs	r1, #4
 8006816:	f853 2b04 	ldr.w	r2, [r3], #4
 800681a:	459c      	cmp	ip, r3
 800681c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006820:	d8f9      	bhi.n	8006816 <__lshift+0x9a>
 8006822:	e7e4      	b.n	80067ee <__lshift+0x72>

08006824 <__mcmp>:
 8006824:	6903      	ldr	r3, [r0, #16]
 8006826:	690a      	ldr	r2, [r1, #16]
 8006828:	b530      	push	{r4, r5, lr}
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	d10c      	bne.n	8006848 <__mcmp+0x24>
 800682e:	0092      	lsls	r2, r2, #2
 8006830:	3014      	adds	r0, #20
 8006832:	3114      	adds	r1, #20
 8006834:	1884      	adds	r4, r0, r2
 8006836:	4411      	add	r1, r2
 8006838:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800683c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006840:	4295      	cmp	r5, r2
 8006842:	d003      	beq.n	800684c <__mcmp+0x28>
 8006844:	d305      	bcc.n	8006852 <__mcmp+0x2e>
 8006846:	2301      	movs	r3, #1
 8006848:	4618      	mov	r0, r3
 800684a:	bd30      	pop	{r4, r5, pc}
 800684c:	42a0      	cmp	r0, r4
 800684e:	d3f3      	bcc.n	8006838 <__mcmp+0x14>
 8006850:	e7fa      	b.n	8006848 <__mcmp+0x24>
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	e7f7      	b.n	8006848 <__mcmp+0x24>

08006858 <__mdiff>:
 8006858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	460d      	mov	r5, r1
 800685e:	4607      	mov	r7, r0
 8006860:	4611      	mov	r1, r2
 8006862:	4628      	mov	r0, r5
 8006864:	4614      	mov	r4, r2
 8006866:	f7ff ffdd 	bl	8006824 <__mcmp>
 800686a:	1e06      	subs	r6, r0, #0
 800686c:	d108      	bne.n	8006880 <__mdiff+0x28>
 800686e:	4631      	mov	r1, r6
 8006870:	4638      	mov	r0, r7
 8006872:	f7ff fdc2 	bl	80063fa <_Balloc>
 8006876:	2301      	movs	r3, #1
 8006878:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006880:	bfa4      	itt	ge
 8006882:	4623      	movge	r3, r4
 8006884:	462c      	movge	r4, r5
 8006886:	4638      	mov	r0, r7
 8006888:	6861      	ldr	r1, [r4, #4]
 800688a:	bfa6      	itte	ge
 800688c:	461d      	movge	r5, r3
 800688e:	2600      	movge	r6, #0
 8006890:	2601      	movlt	r6, #1
 8006892:	f7ff fdb2 	bl	80063fa <_Balloc>
 8006896:	f04f 0e00 	mov.w	lr, #0
 800689a:	60c6      	str	r6, [r0, #12]
 800689c:	692b      	ldr	r3, [r5, #16]
 800689e:	6926      	ldr	r6, [r4, #16]
 80068a0:	f104 0214 	add.w	r2, r4, #20
 80068a4:	f105 0914 	add.w	r9, r5, #20
 80068a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80068ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80068b0:	f100 0114 	add.w	r1, r0, #20
 80068b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80068b8:	f859 5b04 	ldr.w	r5, [r9], #4
 80068bc:	fa1f f38a 	uxth.w	r3, sl
 80068c0:	4473      	add	r3, lr
 80068c2:	b2ac      	uxth	r4, r5
 80068c4:	1b1b      	subs	r3, r3, r4
 80068c6:	0c2c      	lsrs	r4, r5, #16
 80068c8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80068cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80068d6:	45c8      	cmp	r8, r9
 80068d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80068dc:	4694      	mov	ip, r2
 80068de:	f841 4b04 	str.w	r4, [r1], #4
 80068e2:	d8e7      	bhi.n	80068b4 <__mdiff+0x5c>
 80068e4:	45bc      	cmp	ip, r7
 80068e6:	d304      	bcc.n	80068f2 <__mdiff+0x9a>
 80068e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80068ec:	b183      	cbz	r3, 8006910 <__mdiff+0xb8>
 80068ee:	6106      	str	r6, [r0, #16]
 80068f0:	e7c4      	b.n	800687c <__mdiff+0x24>
 80068f2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80068f6:	b2a2      	uxth	r2, r4
 80068f8:	4472      	add	r2, lr
 80068fa:	1413      	asrs	r3, r2, #16
 80068fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006900:	b292      	uxth	r2, r2
 8006902:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006906:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800690a:	f841 2b04 	str.w	r2, [r1], #4
 800690e:	e7e9      	b.n	80068e4 <__mdiff+0x8c>
 8006910:	3e01      	subs	r6, #1
 8006912:	e7e9      	b.n	80068e8 <__mdiff+0x90>

08006914 <__d2b>:
 8006914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006918:	461c      	mov	r4, r3
 800691a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800691e:	2101      	movs	r1, #1
 8006920:	4690      	mov	r8, r2
 8006922:	f7ff fd6a 	bl	80063fa <_Balloc>
 8006926:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800692a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800692e:	4607      	mov	r7, r0
 8006930:	bb34      	cbnz	r4, 8006980 <__d2b+0x6c>
 8006932:	9201      	str	r2, [sp, #4]
 8006934:	f1b8 0200 	subs.w	r2, r8, #0
 8006938:	d027      	beq.n	800698a <__d2b+0x76>
 800693a:	a802      	add	r0, sp, #8
 800693c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006940:	f7ff fe00 	bl	8006544 <__lo0bits>
 8006944:	9900      	ldr	r1, [sp, #0]
 8006946:	b1f0      	cbz	r0, 8006986 <__d2b+0x72>
 8006948:	9a01      	ldr	r2, [sp, #4]
 800694a:	f1c0 0320 	rsb	r3, r0, #32
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	430b      	orrs	r3, r1
 8006954:	40c2      	lsrs	r2, r0
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	9201      	str	r2, [sp, #4]
 800695a:	9b01      	ldr	r3, [sp, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	bf14      	ite	ne
 8006960:	2102      	movne	r1, #2
 8006962:	2101      	moveq	r1, #1
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	6139      	str	r1, [r7, #16]
 8006968:	b1c4      	cbz	r4, 800699c <__d2b+0x88>
 800696a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800696e:	4404      	add	r4, r0
 8006970:	6034      	str	r4, [r6, #0]
 8006972:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006976:	6028      	str	r0, [r5, #0]
 8006978:	4638      	mov	r0, r7
 800697a:	b002      	add	sp, #8
 800697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006980:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006984:	e7d5      	b.n	8006932 <__d2b+0x1e>
 8006986:	6179      	str	r1, [r7, #20]
 8006988:	e7e7      	b.n	800695a <__d2b+0x46>
 800698a:	a801      	add	r0, sp, #4
 800698c:	f7ff fdda 	bl	8006544 <__lo0bits>
 8006990:	2101      	movs	r1, #1
 8006992:	9b01      	ldr	r3, [sp, #4]
 8006994:	6139      	str	r1, [r7, #16]
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	3020      	adds	r0, #32
 800699a:	e7e5      	b.n	8006968 <__d2b+0x54>
 800699c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80069a4:	6030      	str	r0, [r6, #0]
 80069a6:	6918      	ldr	r0, [r3, #16]
 80069a8:	f7ff fdad 	bl	8006506 <__hi0bits>
 80069ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80069b0:	e7e1      	b.n	8006976 <__d2b+0x62>

080069b2 <_calloc_r>:
 80069b2:	b538      	push	{r3, r4, r5, lr}
 80069b4:	fb02 f401 	mul.w	r4, r2, r1
 80069b8:	4621      	mov	r1, r4
 80069ba:	f000 f855 	bl	8006a68 <_malloc_r>
 80069be:	4605      	mov	r5, r0
 80069c0:	b118      	cbz	r0, 80069ca <_calloc_r+0x18>
 80069c2:	4622      	mov	r2, r4
 80069c4:	2100      	movs	r1, #0
 80069c6:	f7fd ff6b 	bl	80048a0 <memset>
 80069ca:	4628      	mov	r0, r5
 80069cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080069d0 <_free_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4605      	mov	r5, r0
 80069d4:	2900      	cmp	r1, #0
 80069d6:	d043      	beq.n	8006a60 <_free_r+0x90>
 80069d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069dc:	1f0c      	subs	r4, r1, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bfb8      	it	lt
 80069e2:	18e4      	addlt	r4, r4, r3
 80069e4:	f000 fb54 	bl	8007090 <__malloc_lock>
 80069e8:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <_free_r+0x94>)
 80069ea:	6813      	ldr	r3, [r2, #0]
 80069ec:	4610      	mov	r0, r2
 80069ee:	b933      	cbnz	r3, 80069fe <_free_r+0x2e>
 80069f0:	6063      	str	r3, [r4, #4]
 80069f2:	6014      	str	r4, [r2, #0]
 80069f4:	4628      	mov	r0, r5
 80069f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069fa:	f000 bb4a 	b.w	8007092 <__malloc_unlock>
 80069fe:	42a3      	cmp	r3, r4
 8006a00:	d90b      	bls.n	8006a1a <_free_r+0x4a>
 8006a02:	6821      	ldr	r1, [r4, #0]
 8006a04:	1862      	adds	r2, r4, r1
 8006a06:	4293      	cmp	r3, r2
 8006a08:	bf01      	itttt	eq
 8006a0a:	681a      	ldreq	r2, [r3, #0]
 8006a0c:	685b      	ldreq	r3, [r3, #4]
 8006a0e:	1852      	addeq	r2, r2, r1
 8006a10:	6022      	streq	r2, [r4, #0]
 8006a12:	6063      	str	r3, [r4, #4]
 8006a14:	6004      	str	r4, [r0, #0]
 8006a16:	e7ed      	b.n	80069f4 <_free_r+0x24>
 8006a18:	4613      	mov	r3, r2
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	b10a      	cbz	r2, 8006a22 <_free_r+0x52>
 8006a1e:	42a2      	cmp	r2, r4
 8006a20:	d9fa      	bls.n	8006a18 <_free_r+0x48>
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	1858      	adds	r0, r3, r1
 8006a26:	42a0      	cmp	r0, r4
 8006a28:	d10b      	bne.n	8006a42 <_free_r+0x72>
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	4401      	add	r1, r0
 8006a2e:	1858      	adds	r0, r3, r1
 8006a30:	4282      	cmp	r2, r0
 8006a32:	6019      	str	r1, [r3, #0]
 8006a34:	d1de      	bne.n	80069f4 <_free_r+0x24>
 8006a36:	6810      	ldr	r0, [r2, #0]
 8006a38:	6852      	ldr	r2, [r2, #4]
 8006a3a:	4401      	add	r1, r0
 8006a3c:	6019      	str	r1, [r3, #0]
 8006a3e:	605a      	str	r2, [r3, #4]
 8006a40:	e7d8      	b.n	80069f4 <_free_r+0x24>
 8006a42:	d902      	bls.n	8006a4a <_free_r+0x7a>
 8006a44:	230c      	movs	r3, #12
 8006a46:	602b      	str	r3, [r5, #0]
 8006a48:	e7d4      	b.n	80069f4 <_free_r+0x24>
 8006a4a:	6820      	ldr	r0, [r4, #0]
 8006a4c:	1821      	adds	r1, r4, r0
 8006a4e:	428a      	cmp	r2, r1
 8006a50:	bf01      	itttt	eq
 8006a52:	6811      	ldreq	r1, [r2, #0]
 8006a54:	6852      	ldreq	r2, [r2, #4]
 8006a56:	1809      	addeq	r1, r1, r0
 8006a58:	6021      	streq	r1, [r4, #0]
 8006a5a:	6062      	str	r2, [r4, #4]
 8006a5c:	605c      	str	r4, [r3, #4]
 8006a5e:	e7c9      	b.n	80069f4 <_free_r+0x24>
 8006a60:	bd38      	pop	{r3, r4, r5, pc}
 8006a62:	bf00      	nop
 8006a64:	20000218 	.word	0x20000218

08006a68 <_malloc_r>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	1ccd      	adds	r5, r1, #3
 8006a6c:	f025 0503 	bic.w	r5, r5, #3
 8006a70:	3508      	adds	r5, #8
 8006a72:	2d0c      	cmp	r5, #12
 8006a74:	bf38      	it	cc
 8006a76:	250c      	movcc	r5, #12
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	db01      	blt.n	8006a82 <_malloc_r+0x1a>
 8006a7e:	42a9      	cmp	r1, r5
 8006a80:	d903      	bls.n	8006a8a <_malloc_r+0x22>
 8006a82:	230c      	movs	r3, #12
 8006a84:	6033      	str	r3, [r6, #0]
 8006a86:	2000      	movs	r0, #0
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	f000 fb01 	bl	8007090 <__malloc_lock>
 8006a8e:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <_malloc_r+0xac>)
 8006a90:	6814      	ldr	r4, [r2, #0]
 8006a92:	4621      	mov	r1, r4
 8006a94:	b991      	cbnz	r1, 8006abc <_malloc_r+0x54>
 8006a96:	4c20      	ldr	r4, [pc, #128]	; (8006b18 <_malloc_r+0xb0>)
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	b91b      	cbnz	r3, 8006aa4 <_malloc_r+0x3c>
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 f97b 	bl	8006d98 <_sbrk_r>
 8006aa2:	6020      	str	r0, [r4, #0]
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f000 f976 	bl	8006d98 <_sbrk_r>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d124      	bne.n	8006afa <_malloc_r+0x92>
 8006ab0:	230c      	movs	r3, #12
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	6033      	str	r3, [r6, #0]
 8006ab6:	f000 faec 	bl	8007092 <__malloc_unlock>
 8006aba:	e7e4      	b.n	8006a86 <_malloc_r+0x1e>
 8006abc:	680b      	ldr	r3, [r1, #0]
 8006abe:	1b5b      	subs	r3, r3, r5
 8006ac0:	d418      	bmi.n	8006af4 <_malloc_r+0x8c>
 8006ac2:	2b0b      	cmp	r3, #11
 8006ac4:	d90f      	bls.n	8006ae6 <_malloc_r+0x7e>
 8006ac6:	600b      	str	r3, [r1, #0]
 8006ac8:	18cc      	adds	r4, r1, r3
 8006aca:	50cd      	str	r5, [r1, r3]
 8006acc:	4630      	mov	r0, r6
 8006ace:	f000 fae0 	bl	8007092 <__malloc_unlock>
 8006ad2:	f104 000b 	add.w	r0, r4, #11
 8006ad6:	1d23      	adds	r3, r4, #4
 8006ad8:	f020 0007 	bic.w	r0, r0, #7
 8006adc:	1ac3      	subs	r3, r0, r3
 8006ade:	d0d3      	beq.n	8006a88 <_malloc_r+0x20>
 8006ae0:	425a      	negs	r2, r3
 8006ae2:	50e2      	str	r2, [r4, r3]
 8006ae4:	e7d0      	b.n	8006a88 <_malloc_r+0x20>
 8006ae6:	684b      	ldr	r3, [r1, #4]
 8006ae8:	428c      	cmp	r4, r1
 8006aea:	bf16      	itet	ne
 8006aec:	6063      	strne	r3, [r4, #4]
 8006aee:	6013      	streq	r3, [r2, #0]
 8006af0:	460c      	movne	r4, r1
 8006af2:	e7eb      	b.n	8006acc <_malloc_r+0x64>
 8006af4:	460c      	mov	r4, r1
 8006af6:	6849      	ldr	r1, [r1, #4]
 8006af8:	e7cc      	b.n	8006a94 <_malloc_r+0x2c>
 8006afa:	1cc4      	adds	r4, r0, #3
 8006afc:	f024 0403 	bic.w	r4, r4, #3
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d005      	beq.n	8006b10 <_malloc_r+0xa8>
 8006b04:	1a21      	subs	r1, r4, r0
 8006b06:	4630      	mov	r0, r6
 8006b08:	f000 f946 	bl	8006d98 <_sbrk_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d0cf      	beq.n	8006ab0 <_malloc_r+0x48>
 8006b10:	6025      	str	r5, [r4, #0]
 8006b12:	e7db      	b.n	8006acc <_malloc_r+0x64>
 8006b14:	20000218 	.word	0x20000218
 8006b18:	2000021c 	.word	0x2000021c

08006b1c <__sfputc_r>:
 8006b1c:	6893      	ldr	r3, [r2, #8]
 8006b1e:	b410      	push	{r4}
 8006b20:	3b01      	subs	r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	6093      	str	r3, [r2, #8]
 8006b26:	da07      	bge.n	8006b38 <__sfputc_r+0x1c>
 8006b28:	6994      	ldr	r4, [r2, #24]
 8006b2a:	42a3      	cmp	r3, r4
 8006b2c:	db01      	blt.n	8006b32 <__sfputc_r+0x16>
 8006b2e:	290a      	cmp	r1, #10
 8006b30:	d102      	bne.n	8006b38 <__sfputc_r+0x1c>
 8006b32:	bc10      	pop	{r4}
 8006b34:	f000 b984 	b.w	8006e40 <__swbuf_r>
 8006b38:	6813      	ldr	r3, [r2, #0]
 8006b3a:	1c58      	adds	r0, r3, #1
 8006b3c:	6010      	str	r0, [r2, #0]
 8006b3e:	7019      	strb	r1, [r3, #0]
 8006b40:	4608      	mov	r0, r1
 8006b42:	bc10      	pop	{r4}
 8006b44:	4770      	bx	lr

08006b46 <__sfputs_r>:
 8006b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b48:	4606      	mov	r6, r0
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	18d5      	adds	r5, r2, r3
 8006b50:	42ac      	cmp	r4, r5
 8006b52:	d101      	bne.n	8006b58 <__sfputs_r+0x12>
 8006b54:	2000      	movs	r0, #0
 8006b56:	e007      	b.n	8006b68 <__sfputs_r+0x22>
 8006b58:	463a      	mov	r2, r7
 8006b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff ffdc 	bl	8006b1c <__sfputc_r>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d1f3      	bne.n	8006b50 <__sfputs_r+0xa>
 8006b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b6c <_vfiprintf_r>:
 8006b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b70:	460c      	mov	r4, r1
 8006b72:	b09d      	sub	sp, #116	; 0x74
 8006b74:	4617      	mov	r7, r2
 8006b76:	461d      	mov	r5, r3
 8006b78:	4606      	mov	r6, r0
 8006b7a:	b118      	cbz	r0, 8006b84 <_vfiprintf_r+0x18>
 8006b7c:	6983      	ldr	r3, [r0, #24]
 8006b7e:	b90b      	cbnz	r3, 8006b84 <_vfiprintf_r+0x18>
 8006b80:	f7ff fb1e 	bl	80061c0 <__sinit>
 8006b84:	4b7c      	ldr	r3, [pc, #496]	; (8006d78 <_vfiprintf_r+0x20c>)
 8006b86:	429c      	cmp	r4, r3
 8006b88:	d158      	bne.n	8006c3c <_vfiprintf_r+0xd0>
 8006b8a:	6874      	ldr	r4, [r6, #4]
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	0718      	lsls	r0, r3, #28
 8006b90:	d55e      	bpl.n	8006c50 <_vfiprintf_r+0xe4>
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d05b      	beq.n	8006c50 <_vfiprintf_r+0xe4>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b9c:	2320      	movs	r3, #32
 8006b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ba2:	2330      	movs	r3, #48	; 0x30
 8006ba4:	f04f 0b01 	mov.w	fp, #1
 8006ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bac:	9503      	str	r5, [sp, #12]
 8006bae:	46b8      	mov	r8, r7
 8006bb0:	4645      	mov	r5, r8
 8006bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bb6:	b10b      	cbz	r3, 8006bbc <_vfiprintf_r+0x50>
 8006bb8:	2b25      	cmp	r3, #37	; 0x25
 8006bba:	d154      	bne.n	8006c66 <_vfiprintf_r+0xfa>
 8006bbc:	ebb8 0a07 	subs.w	sl, r8, r7
 8006bc0:	d00b      	beq.n	8006bda <_vfiprintf_r+0x6e>
 8006bc2:	4653      	mov	r3, sl
 8006bc4:	463a      	mov	r2, r7
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f7ff ffbc 	bl	8006b46 <__sfputs_r>
 8006bce:	3001      	adds	r0, #1
 8006bd0:	f000 80c2 	beq.w	8006d58 <_vfiprintf_r+0x1ec>
 8006bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd6:	4453      	add	r3, sl
 8006bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bda:	f898 3000 	ldrb.w	r3, [r8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 80ba 	beq.w	8006d58 <_vfiprintf_r+0x1ec>
 8006be4:	2300      	movs	r3, #0
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bee:	9304      	str	r3, [sp, #16]
 8006bf0:	9307      	str	r3, [sp, #28]
 8006bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8006bf8:	46a8      	mov	r8, r5
 8006bfa:	2205      	movs	r2, #5
 8006bfc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006c00:	485e      	ldr	r0, [pc, #376]	; (8006d7c <_vfiprintf_r+0x210>)
 8006c02:	f7ff fbe1 	bl	80063c8 <memchr>
 8006c06:	9b04      	ldr	r3, [sp, #16]
 8006c08:	bb78      	cbnz	r0, 8006c6a <_vfiprintf_r+0xfe>
 8006c0a:	06d9      	lsls	r1, r3, #27
 8006c0c:	bf44      	itt	mi
 8006c0e:	2220      	movmi	r2, #32
 8006c10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c14:	071a      	lsls	r2, r3, #28
 8006c16:	bf44      	itt	mi
 8006c18:	222b      	movmi	r2, #43	; 0x2b
 8006c1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c1e:	782a      	ldrb	r2, [r5, #0]
 8006c20:	2a2a      	cmp	r2, #42	; 0x2a
 8006c22:	d02a      	beq.n	8006c7a <_vfiprintf_r+0x10e>
 8006c24:	46a8      	mov	r8, r5
 8006c26:	2000      	movs	r0, #0
 8006c28:	250a      	movs	r5, #10
 8006c2a:	9a07      	ldr	r2, [sp, #28]
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c32:	3b30      	subs	r3, #48	; 0x30
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d969      	bls.n	8006d0c <_vfiprintf_r+0x1a0>
 8006c38:	b360      	cbz	r0, 8006c94 <_vfiprintf_r+0x128>
 8006c3a:	e024      	b.n	8006c86 <_vfiprintf_r+0x11a>
 8006c3c:	4b50      	ldr	r3, [pc, #320]	; (8006d80 <_vfiprintf_r+0x214>)
 8006c3e:	429c      	cmp	r4, r3
 8006c40:	d101      	bne.n	8006c46 <_vfiprintf_r+0xda>
 8006c42:	68b4      	ldr	r4, [r6, #8]
 8006c44:	e7a2      	b.n	8006b8c <_vfiprintf_r+0x20>
 8006c46:	4b4f      	ldr	r3, [pc, #316]	; (8006d84 <_vfiprintf_r+0x218>)
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	bf08      	it	eq
 8006c4c:	68f4      	ldreq	r4, [r6, #12]
 8006c4e:	e79d      	b.n	8006b8c <_vfiprintf_r+0x20>
 8006c50:	4621      	mov	r1, r4
 8006c52:	4630      	mov	r0, r6
 8006c54:	f000 f958 	bl	8006f08 <__swsetup_r>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d09d      	beq.n	8006b98 <_vfiprintf_r+0x2c>
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	b01d      	add	sp, #116	; 0x74
 8006c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c66:	46a8      	mov	r8, r5
 8006c68:	e7a2      	b.n	8006bb0 <_vfiprintf_r+0x44>
 8006c6a:	4a44      	ldr	r2, [pc, #272]	; (8006d7c <_vfiprintf_r+0x210>)
 8006c6c:	4645      	mov	r5, r8
 8006c6e:	1a80      	subs	r0, r0, r2
 8006c70:	fa0b f000 	lsl.w	r0, fp, r0
 8006c74:	4318      	orrs	r0, r3
 8006c76:	9004      	str	r0, [sp, #16]
 8006c78:	e7be      	b.n	8006bf8 <_vfiprintf_r+0x8c>
 8006c7a:	9a03      	ldr	r2, [sp, #12]
 8006c7c:	1d11      	adds	r1, r2, #4
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	9103      	str	r1, [sp, #12]
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	db01      	blt.n	8006c8a <_vfiprintf_r+0x11e>
 8006c86:	9207      	str	r2, [sp, #28]
 8006c88:	e004      	b.n	8006c94 <_vfiprintf_r+0x128>
 8006c8a:	4252      	negs	r2, r2
 8006c8c:	f043 0302 	orr.w	r3, r3, #2
 8006c90:	9207      	str	r2, [sp, #28]
 8006c92:	9304      	str	r3, [sp, #16]
 8006c94:	f898 3000 	ldrb.w	r3, [r8]
 8006c98:	2b2e      	cmp	r3, #46	; 0x2e
 8006c9a:	d10e      	bne.n	8006cba <_vfiprintf_r+0x14e>
 8006c9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca2:	d138      	bne.n	8006d16 <_vfiprintf_r+0x1aa>
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	f108 0802 	add.w	r8, r8, #2
 8006caa:	1d1a      	adds	r2, r3, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	9203      	str	r2, [sp, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	bfb8      	it	lt
 8006cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cb8:	9305      	str	r3, [sp, #20]
 8006cba:	4d33      	ldr	r5, [pc, #204]	; (8006d88 <_vfiprintf_r+0x21c>)
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	f898 1000 	ldrb.w	r1, [r8]
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f7ff fb80 	bl	80063c8 <memchr>
 8006cc8:	b140      	cbz	r0, 8006cdc <_vfiprintf_r+0x170>
 8006cca:	2340      	movs	r3, #64	; 0x40
 8006ccc:	1b40      	subs	r0, r0, r5
 8006cce:	fa03 f000 	lsl.w	r0, r3, r0
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	f108 0801 	add.w	r8, r8, #1
 8006cd8:	4303      	orrs	r3, r0
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	f898 1000 	ldrb.w	r1, [r8]
 8006ce0:	2206      	movs	r2, #6
 8006ce2:	482a      	ldr	r0, [pc, #168]	; (8006d8c <_vfiprintf_r+0x220>)
 8006ce4:	f108 0701 	add.w	r7, r8, #1
 8006ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cec:	f7ff fb6c 	bl	80063c8 <memchr>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	d037      	beq.n	8006d64 <_vfiprintf_r+0x1f8>
 8006cf4:	4b26      	ldr	r3, [pc, #152]	; (8006d90 <_vfiprintf_r+0x224>)
 8006cf6:	bb1b      	cbnz	r3, 8006d40 <_vfiprintf_r+0x1d4>
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	3307      	adds	r3, #7
 8006cfc:	f023 0307 	bic.w	r3, r3, #7
 8006d00:	3308      	adds	r3, #8
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d06:	444b      	add	r3, r9
 8006d08:	9309      	str	r3, [sp, #36]	; 0x24
 8006d0a:	e750      	b.n	8006bae <_vfiprintf_r+0x42>
 8006d0c:	fb05 3202 	mla	r2, r5, r2, r3
 8006d10:	2001      	movs	r0, #1
 8006d12:	4688      	mov	r8, r1
 8006d14:	e78a      	b.n	8006c2c <_vfiprintf_r+0xc0>
 8006d16:	2300      	movs	r3, #0
 8006d18:	250a      	movs	r5, #10
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	f108 0801 	add.w	r8, r8, #1
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	4640      	mov	r0, r8
 8006d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d28:	3a30      	subs	r2, #48	; 0x30
 8006d2a:	2a09      	cmp	r2, #9
 8006d2c:	d903      	bls.n	8006d36 <_vfiprintf_r+0x1ca>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0c3      	beq.n	8006cba <_vfiprintf_r+0x14e>
 8006d32:	9105      	str	r1, [sp, #20]
 8006d34:	e7c1      	b.n	8006cba <_vfiprintf_r+0x14e>
 8006d36:	fb05 2101 	mla	r1, r5, r1, r2
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	e7f0      	b.n	8006d22 <_vfiprintf_r+0x1b6>
 8006d40:	ab03      	add	r3, sp, #12
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	4622      	mov	r2, r4
 8006d46:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <_vfiprintf_r+0x228>)
 8006d48:	a904      	add	r1, sp, #16
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7fd fe42 	bl	80049d4 <_printf_float>
 8006d50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d54:	4681      	mov	r9, r0
 8006d56:	d1d5      	bne.n	8006d04 <_vfiprintf_r+0x198>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	065b      	lsls	r3, r3, #25
 8006d5c:	f53f af7e 	bmi.w	8006c5c <_vfiprintf_r+0xf0>
 8006d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d62:	e77d      	b.n	8006c60 <_vfiprintf_r+0xf4>
 8006d64:	ab03      	add	r3, sp, #12
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <_vfiprintf_r+0x228>)
 8006d6c:	a904      	add	r1, sp, #16
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f7fe f8dc 	bl	8004f2c <_printf_i>
 8006d74:	e7ec      	b.n	8006d50 <_vfiprintf_r+0x1e4>
 8006d76:	bf00      	nop
 8006d78:	08007258 	.word	0x08007258
 8006d7c:	08007394 	.word	0x08007394
 8006d80:	08007278 	.word	0x08007278
 8006d84:	08007238 	.word	0x08007238
 8006d88:	0800739a 	.word	0x0800739a
 8006d8c:	0800739e 	.word	0x0800739e
 8006d90:	080049d5 	.word	0x080049d5
 8006d94:	08006b47 	.word	0x08006b47

08006d98 <_sbrk_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4c05      	ldr	r4, [pc, #20]	; (8006db4 <_sbrk_r+0x1c>)
 8006d9e:	4605      	mov	r5, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	f7fc fb96 	bl	80034d4 <_sbrk>
 8006da8:	1c43      	adds	r3, r0, #1
 8006daa:	d102      	bne.n	8006db2 <_sbrk_r+0x1a>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	b103      	cbz	r3, 8006db2 <_sbrk_r+0x1a>
 8006db0:	602b      	str	r3, [r5, #0]
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	20000230 	.word	0x20000230

08006db8 <__sread>:
 8006db8:	b510      	push	{r4, lr}
 8006dba:	460c      	mov	r4, r1
 8006dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc0:	f000 f968 	bl	8007094 <_read_r>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	bfab      	itete	ge
 8006dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006dca:	89a3      	ldrhlt	r3, [r4, #12]
 8006dcc:	181b      	addge	r3, r3, r0
 8006dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006dd2:	bfac      	ite	ge
 8006dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006dd6:	81a3      	strhlt	r3, [r4, #12]
 8006dd8:	bd10      	pop	{r4, pc}

08006dda <__swrite>:
 8006dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dde:	461f      	mov	r7, r3
 8006de0:	898b      	ldrh	r3, [r1, #12]
 8006de2:	4605      	mov	r5, r0
 8006de4:	05db      	lsls	r3, r3, #23
 8006de6:	460c      	mov	r4, r1
 8006de8:	4616      	mov	r6, r2
 8006dea:	d505      	bpl.n	8006df8 <__swrite+0x1e>
 8006dec:	2302      	movs	r3, #2
 8006dee:	2200      	movs	r2, #0
 8006df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df4:	f000 f928 	bl	8007048 <_lseek_r>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	4632      	mov	r2, r6
 8006dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e06:	463b      	mov	r3, r7
 8006e08:	4628      	mov	r0, r5
 8006e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0e:	f000 b869 	b.w	8006ee4 <_write_r>

08006e12 <__sseek>:
 8006e12:	b510      	push	{r4, lr}
 8006e14:	460c      	mov	r4, r1
 8006e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1a:	f000 f915 	bl	8007048 <_lseek_r>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	bf15      	itete	ne
 8006e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e2e:	81a3      	strheq	r3, [r4, #12]
 8006e30:	bf18      	it	ne
 8006e32:	81a3      	strhne	r3, [r4, #12]
 8006e34:	bd10      	pop	{r4, pc}

08006e36 <__sclose>:
 8006e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3a:	f000 b8d3 	b.w	8006fe4 <_close_r>
	...

08006e40 <__swbuf_r>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	460e      	mov	r6, r1
 8006e44:	4614      	mov	r4, r2
 8006e46:	4605      	mov	r5, r0
 8006e48:	b118      	cbz	r0, 8006e52 <__swbuf_r+0x12>
 8006e4a:	6983      	ldr	r3, [r0, #24]
 8006e4c:	b90b      	cbnz	r3, 8006e52 <__swbuf_r+0x12>
 8006e4e:	f7ff f9b7 	bl	80061c0 <__sinit>
 8006e52:	4b21      	ldr	r3, [pc, #132]	; (8006ed8 <__swbuf_r+0x98>)
 8006e54:	429c      	cmp	r4, r3
 8006e56:	d12a      	bne.n	8006eae <__swbuf_r+0x6e>
 8006e58:	686c      	ldr	r4, [r5, #4]
 8006e5a:	69a3      	ldr	r3, [r4, #24]
 8006e5c:	60a3      	str	r3, [r4, #8]
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	071a      	lsls	r2, r3, #28
 8006e62:	d52e      	bpl.n	8006ec2 <__swbuf_r+0x82>
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	b363      	cbz	r3, 8006ec2 <__swbuf_r+0x82>
 8006e68:	6923      	ldr	r3, [r4, #16]
 8006e6a:	6820      	ldr	r0, [r4, #0]
 8006e6c:	b2f6      	uxtb	r6, r6
 8006e6e:	1ac0      	subs	r0, r0, r3
 8006e70:	6963      	ldr	r3, [r4, #20]
 8006e72:	4637      	mov	r7, r6
 8006e74:	4283      	cmp	r3, r0
 8006e76:	dc04      	bgt.n	8006e82 <__swbuf_r+0x42>
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f7ff f936 	bl	80060ec <_fflush_r>
 8006e80:	bb28      	cbnz	r0, 8006ece <__swbuf_r+0x8e>
 8006e82:	68a3      	ldr	r3, [r4, #8]
 8006e84:	3001      	adds	r0, #1
 8006e86:	3b01      	subs	r3, #1
 8006e88:	60a3      	str	r3, [r4, #8]
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	6022      	str	r2, [r4, #0]
 8006e90:	701e      	strb	r6, [r3, #0]
 8006e92:	6963      	ldr	r3, [r4, #20]
 8006e94:	4283      	cmp	r3, r0
 8006e96:	d004      	beq.n	8006ea2 <__swbuf_r+0x62>
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	07db      	lsls	r3, r3, #31
 8006e9c:	d519      	bpl.n	8006ed2 <__swbuf_r+0x92>
 8006e9e:	2e0a      	cmp	r6, #10
 8006ea0:	d117      	bne.n	8006ed2 <__swbuf_r+0x92>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f7ff f921 	bl	80060ec <_fflush_r>
 8006eaa:	b190      	cbz	r0, 8006ed2 <__swbuf_r+0x92>
 8006eac:	e00f      	b.n	8006ece <__swbuf_r+0x8e>
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <__swbuf_r+0x9c>)
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	d101      	bne.n	8006eb8 <__swbuf_r+0x78>
 8006eb4:	68ac      	ldr	r4, [r5, #8]
 8006eb6:	e7d0      	b.n	8006e5a <__swbuf_r+0x1a>
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <__swbuf_r+0xa0>)
 8006eba:	429c      	cmp	r4, r3
 8006ebc:	bf08      	it	eq
 8006ebe:	68ec      	ldreq	r4, [r5, #12]
 8006ec0:	e7cb      	b.n	8006e5a <__swbuf_r+0x1a>
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f000 f81f 	bl	8006f08 <__swsetup_r>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d0cc      	beq.n	8006e68 <__swbuf_r+0x28>
 8006ece:	f04f 37ff 	mov.w	r7, #4294967295
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	08007258 	.word	0x08007258
 8006edc:	08007278 	.word	0x08007278
 8006ee0:	08007238 	.word	0x08007238

08006ee4 <_write_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	4608      	mov	r0, r1
 8006eea:	4611      	mov	r1, r2
 8006eec:	2200      	movs	r2, #0
 8006eee:	4c05      	ldr	r4, [pc, #20]	; (8006f04 <_write_r+0x20>)
 8006ef0:	6022      	str	r2, [r4, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f7fc faa1 	bl	800343a <_write>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_write_r+0x1e>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_write_r+0x1e>
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20000230 	.word	0x20000230

08006f08 <__swsetup_r>:
 8006f08:	4b32      	ldr	r3, [pc, #200]	; (8006fd4 <__swsetup_r+0xcc>)
 8006f0a:	b570      	push	{r4, r5, r6, lr}
 8006f0c:	681d      	ldr	r5, [r3, #0]
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	b125      	cbz	r5, 8006f1e <__swsetup_r+0x16>
 8006f14:	69ab      	ldr	r3, [r5, #24]
 8006f16:	b913      	cbnz	r3, 8006f1e <__swsetup_r+0x16>
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f7ff f951 	bl	80061c0 <__sinit>
 8006f1e:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <__swsetup_r+0xd0>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d10f      	bne.n	8006f44 <__swsetup_r+0x3c>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	0715      	lsls	r5, r2, #28
 8006f2e:	d42c      	bmi.n	8006f8a <__swsetup_r+0x82>
 8006f30:	06d0      	lsls	r0, r2, #27
 8006f32:	d411      	bmi.n	8006f58 <__swsetup_r+0x50>
 8006f34:	2209      	movs	r2, #9
 8006f36:	6032      	str	r2, [r6, #0]
 8006f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f42:	e03e      	b.n	8006fc2 <__swsetup_r+0xba>
 8006f44:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <__swsetup_r+0xd4>)
 8006f46:	429c      	cmp	r4, r3
 8006f48:	d101      	bne.n	8006f4e <__swsetup_r+0x46>
 8006f4a:	68ac      	ldr	r4, [r5, #8]
 8006f4c:	e7eb      	b.n	8006f26 <__swsetup_r+0x1e>
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <__swsetup_r+0xd8>)
 8006f50:	429c      	cmp	r4, r3
 8006f52:	bf08      	it	eq
 8006f54:	68ec      	ldreq	r4, [r5, #12]
 8006f56:	e7e6      	b.n	8006f26 <__swsetup_r+0x1e>
 8006f58:	0751      	lsls	r1, r2, #29
 8006f5a:	d512      	bpl.n	8006f82 <__swsetup_r+0x7a>
 8006f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f5e:	b141      	cbz	r1, 8006f72 <__swsetup_r+0x6a>
 8006f60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f64:	4299      	cmp	r1, r3
 8006f66:	d002      	beq.n	8006f6e <__swsetup_r+0x66>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff fd31 	bl	80069d0 <_free_r>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6363      	str	r3, [r4, #52]	; 0x34
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6063      	str	r3, [r4, #4]
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	f043 0308 	orr.w	r3, r3, #8
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	6923      	ldr	r3, [r4, #16]
 8006f8c:	b94b      	cbnz	r3, 8006fa2 <__swsetup_r+0x9a>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f98:	d003      	beq.n	8006fa2 <__swsetup_r+0x9a>
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f7ff f9cb 	bl	8006338 <__smakebuf_r>
 8006fa2:	89a2      	ldrh	r2, [r4, #12]
 8006fa4:	f012 0301 	ands.w	r3, r2, #1
 8006fa8:	d00c      	beq.n	8006fc4 <__swsetup_r+0xbc>
 8006faa:	2300      	movs	r3, #0
 8006fac:	60a3      	str	r3, [r4, #8]
 8006fae:	6963      	ldr	r3, [r4, #20]
 8006fb0:	425b      	negs	r3, r3
 8006fb2:	61a3      	str	r3, [r4, #24]
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	b953      	cbnz	r3, 8006fce <__swsetup_r+0xc6>
 8006fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006fc0:	d1ba      	bne.n	8006f38 <__swsetup_r+0x30>
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	0792      	lsls	r2, r2, #30
 8006fc6:	bf58      	it	pl
 8006fc8:	6963      	ldrpl	r3, [r4, #20]
 8006fca:	60a3      	str	r3, [r4, #8]
 8006fcc:	e7f2      	b.n	8006fb4 <__swsetup_r+0xac>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	e7f7      	b.n	8006fc2 <__swsetup_r+0xba>
 8006fd2:	bf00      	nop
 8006fd4:	20000014 	.word	0x20000014
 8006fd8:	08007258 	.word	0x08007258
 8006fdc:	08007278 	.word	0x08007278
 8006fe0:	08007238 	.word	0x08007238

08006fe4 <_close_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4c05      	ldr	r4, [pc, #20]	; (8007000 <_close_r+0x1c>)
 8006fea:	4605      	mov	r5, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	6023      	str	r3, [r4, #0]
 8006ff0:	f7fc fa3f 	bl	8003472 <_close>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_close_r+0x1a>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_close_r+0x1a>
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	20000230 	.word	0x20000230

08007004 <_fstat_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	2300      	movs	r3, #0
 8007008:	4c06      	ldr	r4, [pc, #24]	; (8007024 <_fstat_r+0x20>)
 800700a:	4605      	mov	r5, r0
 800700c:	4608      	mov	r0, r1
 800700e:	4611      	mov	r1, r2
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	f7fc fa39 	bl	8003488 <_fstat>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d102      	bne.n	8007020 <_fstat_r+0x1c>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	b103      	cbz	r3, 8007020 <_fstat_r+0x1c>
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	20000230 	.word	0x20000230

08007028 <_isatty_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	2300      	movs	r3, #0
 800702c:	4c05      	ldr	r4, [pc, #20]	; (8007044 <_isatty_r+0x1c>)
 800702e:	4605      	mov	r5, r0
 8007030:	4608      	mov	r0, r1
 8007032:	6023      	str	r3, [r4, #0]
 8007034:	f7fc fa37 	bl	80034a6 <_isatty>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_isatty_r+0x1a>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	b103      	cbz	r3, 8007042 <_isatty_r+0x1a>
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	20000230 	.word	0x20000230

08007048 <_lseek_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4605      	mov	r5, r0
 800704c:	4608      	mov	r0, r1
 800704e:	4611      	mov	r1, r2
 8007050:	2200      	movs	r2, #0
 8007052:	4c05      	ldr	r4, [pc, #20]	; (8007068 <_lseek_r+0x20>)
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f7fc fa2f 	bl	80034ba <_lseek>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_lseek_r+0x1e>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	b103      	cbz	r3, 8007066 <_lseek_r+0x1e>
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20000230 	.word	0x20000230

0800706c <__ascii_mbtowc>:
 800706c:	b082      	sub	sp, #8
 800706e:	b901      	cbnz	r1, 8007072 <__ascii_mbtowc+0x6>
 8007070:	a901      	add	r1, sp, #4
 8007072:	b142      	cbz	r2, 8007086 <__ascii_mbtowc+0x1a>
 8007074:	b14b      	cbz	r3, 800708a <__ascii_mbtowc+0x1e>
 8007076:	7813      	ldrb	r3, [r2, #0]
 8007078:	600b      	str	r3, [r1, #0]
 800707a:	7812      	ldrb	r2, [r2, #0]
 800707c:	1c10      	adds	r0, r2, #0
 800707e:	bf18      	it	ne
 8007080:	2001      	movne	r0, #1
 8007082:	b002      	add	sp, #8
 8007084:	4770      	bx	lr
 8007086:	4610      	mov	r0, r2
 8007088:	e7fb      	b.n	8007082 <__ascii_mbtowc+0x16>
 800708a:	f06f 0001 	mvn.w	r0, #1
 800708e:	e7f8      	b.n	8007082 <__ascii_mbtowc+0x16>

08007090 <__malloc_lock>:
 8007090:	4770      	bx	lr

08007092 <__malloc_unlock>:
 8007092:	4770      	bx	lr

08007094 <_read_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4605      	mov	r5, r0
 8007098:	4608      	mov	r0, r1
 800709a:	4611      	mov	r1, r2
 800709c:	2200      	movs	r2, #0
 800709e:	4c05      	ldr	r4, [pc, #20]	; (80070b4 <_read_r+0x20>)
 80070a0:	6022      	str	r2, [r4, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fc f9ac 	bl	8003400 <_read>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_read_r+0x1e>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_read_r+0x1e>
 80070b0:	602b      	str	r3, [r5, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20000230 	.word	0x20000230

080070b8 <__ascii_wctomb>:
 80070b8:	b149      	cbz	r1, 80070ce <__ascii_wctomb+0x16>
 80070ba:	2aff      	cmp	r2, #255	; 0xff
 80070bc:	bf8b      	itete	hi
 80070be:	238a      	movhi	r3, #138	; 0x8a
 80070c0:	700a      	strbls	r2, [r1, #0]
 80070c2:	6003      	strhi	r3, [r0, #0]
 80070c4:	2001      	movls	r0, #1
 80070c6:	bf88      	it	hi
 80070c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80070cc:	4770      	bx	lr
 80070ce:	4608      	mov	r0, r1
 80070d0:	4770      	bx	lr
	...

080070d4 <_init>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr

080070e0 <_fini>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	bf00      	nop
 80070e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e6:	bc08      	pop	{r3}
 80070e8:	469e      	mov	lr, r3
 80070ea:	4770      	bx	lr


Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000761c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08007730  08007730  00017730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a00  08007a00  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007a00  08007a00  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a00  08007a00  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  200001e8  08007bf0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08007bf0  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f0e  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca8  00000000  00000000  0002a11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  0002bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002c900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000158a7  00000000  00000000  0002d350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f5b  00000000  00000000  00042bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006deed  00000000  00000000  00049b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7a3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c48  00000000  00000000  000b7abc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007714 	.word	0x08007714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007714 	.word	0x08007714

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1a      	ldr	r2, [r3, #32]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	621a      	str	r2, [r3, #32]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	611a      	str	r2, [r3, #16]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	615a      	str	r2, [r3, #20]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <MotorL_EnablePWM>:
 *      Author: vanti
 */
#include "MotorControl.h"

void MotorL_EnablePWM(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8001104:	2101      	movs	r1, #1
 8001106:	4802      	ldr	r0, [pc, #8]	; (8001110 <MotorL_EnablePWM+0x10>)
 8001108:	f7ff ffb2 	bl	8001070 <LL_TIM_CC_EnableChannel>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012c00 	.word	0x40012c00

08001114 <MotorR_EnablePWM>:
{
	LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorR_EnablePWM(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH3);
 8001118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <MotorR_EnablePWM+0x14>)
 800111e:	f7ff ffa7 	bl	8001070 <LL_TIM_CC_EnableChannel>
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012c00 	.word	0x40012c00

0800112c <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800113a:	db03      	blt.n	8001144 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 800113c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e005      	b.n	8001150 <MotorL_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800114a:	dc01      	bgt.n	8001150 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MotorL_SetPWM+0x60>)
 800114e:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0a      	blt.n	800116c <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MotorL_SetPWM+0x64>)
 800115e:	f7ff ff97 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <MotorL_SetPWM+0x68>)
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MotorL_SetPWM+0x6c>)
 8001166:	f7ff ffbc 	bl	80010e2 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800116a:	e00a      	b.n	8001182 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1, 7200 + PWMVal);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001172:	4619      	mov	r1, r3
 8001174:	4806      	ldr	r0, [pc, #24]	; (8001190 <MotorL_SetPWM+0x64>)
 8001176:	f7ff ff8b 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800117a:	4906      	ldr	r1, [pc, #24]	; (8001194 <MotorL_SetPWM+0x68>)
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <MotorL_SetPWM+0x6c>)
 800117e:	f7ff ffa1 	bl	80010c4 <LL_GPIO_SetOutputPin>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	ffffe3e0 	.word	0xffffe3e0
 8001190:	40012c00 	.word	0x40012c00
 8001194:	04800080 	.word	0x04800080
 8001198:	40010c00 	.word	0x40010c00

0800119c <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	if (PWMVal >= 7200)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011aa:	db03      	blt.n	80011b4 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 80011ac:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e005      	b.n	80011c0 <MotorR_SetPWM+0x24>
	}
	else if (PWMVal <= -7200)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80011ba:	dc01      	bgt.n	80011c0 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MotorR_SetPWM+0x60>)
 80011be:	607b      	str	r3, [r7, #4]
	}
	if (PWMVal >= 0)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0a      	blt.n	80011dc <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <MotorR_SetPWM+0x64>)
 80011ce:	f7ff ff6c 	bl	80010aa <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80011d2:	490c      	ldr	r1, [pc, #48]	; (8001204 <MotorR_SetPWM+0x68>)
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MotorR_SetPWM+0x6c>)
 80011d6:	f7ff ff84 	bl	80010e2 <LL_GPIO_ResetOutputPin>
	else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 80011da:	e00a      	b.n	80011f2 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <MotorR_SetPWM+0x64>)
 80011e6:	f7ff ff60 	bl	80010aa <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80011ea:	4906      	ldr	r1, [pc, #24]	; (8001204 <MotorR_SetPWM+0x68>)
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <MotorR_SetPWM+0x6c>)
 80011ee:	f7ff ff69 	bl	80010c4 <LL_GPIO_SetOutputPin>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	ffffe3e0 	.word	0xffffe3e0
 8001200:	40012c00 	.word	0x40012c00
 8001204:	04020002 	.word	0x04020002
 8001208:	40010800 	.word	0x40010800

0800120c <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90)
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <Servo_SetAngle+0x64>)
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff00 	bl	800101c <__aeabi_fcmpgt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <Servo_SetAngle+0x1c>
		ServoAngle = 90;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <Servo_SetAngle+0x64>)
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	e008      	b.n	800123a <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90)
 8001228:	4912      	ldr	r1, [pc, #72]	; (8001274 <Servo_SetAngle+0x68>)
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fed8 	bl	8000fe0 <__aeabi_fcmplt>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <Servo_SetAngle+0x2e>
		ServoAngle = -90;
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <Servo_SetAngle+0x68>)
 8001238:	607b      	str	r3, [r7, #4]
	//	uint16_t ServoCPR = 540 + ServoAngle*2;
	LL_TIM_OC_SetCompareCH1(TIM4, 4500 + ServoAngle * 50 / 3);
 800123a:	490f      	ldr	r1, [pc, #60]	; (8001278 <Servo_SetAngle+0x6c>)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fd31 	bl	8000ca4 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	490d      	ldr	r1, [pc, #52]	; (800127c <Servo_SetAngle+0x70>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fde0 	bl	8000e0c <__aeabi_fdiv>
 800124c:	4603      	mov	r3, r0
 800124e:	490c      	ldr	r1, [pc, #48]	; (8001280 <Servo_SetAngle+0x74>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc1f 	bl	8000a94 <__addsf3>
 8001256:	4603      	mov	r3, r0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fee9 	bl	8001030 <__aeabi_f2uiz>
 800125e:	4603      	mov	r3, r0
 8001260:	4619      	mov	r1, r3
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <Servo_SetAngle+0x78>)
 8001264:	f7ff ff14 	bl	8001090 <LL_TIM_OC_SetCompareCH1>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	42b40000 	.word	0x42b40000
 8001274:	c2b40000 	.word	0xc2b40000
 8001278:	42480000 	.word	0x42480000
 800127c:	40400000 	.word	0x40400000
 8001280:	458ca000 	.word	0x458ca000
 8001284:	40000800 	.word	0x40000800

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <__NVIC_EnableIRQ+0x34>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013dc:	b490      	push	{r4, r7}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	332c      	adds	r3, #44	; 0x2c
 80013ec:	4619      	mov	r1, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013f8:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	fa92 f2a2 	rbit	r2, r2
 8001400:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	fab2 f282 	clz	r2, r2
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	40d3      	lsrs	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	211f      	movs	r1, #31
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 011f 	and.w	r1, r3, #31
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bc90      	pop	{r4, r7}
 8001440:	4770      	bx	lr

08001442 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001466:	b490      	push	{r4, r7}
 8001468:	b08a      	sub	sp, #40	; 0x28
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	330c      	adds	r3, #12
 8001476:	4619      	mov	r1, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	fa92 f2a2 	rbit	r2, r2
 800148a:	613a      	str	r2, [r7, #16]
  return result;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	fab2 f282 	clz	r2, r2
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	40d3      	lsrs	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014a4:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014a8:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014aa:	69f9      	ldr	r1, [r7, #28]
 80014ac:	fa91 f1a1 	rbit	r1, r1
 80014b0:	61b9      	str	r1, [r7, #24]
  return result;
 80014b2:	69b9      	ldr	r1, [r7, #24]
 80014b4:	fab1 f181 	clz	r1, r1
 80014b8:	b2c9      	uxtb	r1, r1
 80014ba:	40cb      	lsrs	r3, r1
 80014bc:	2107      	movs	r1, #7
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	401a      	ands	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80014cc:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 80014d0:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014d4:	fa91 f1a1 	rbit	r1, r1
 80014d8:	6239      	str	r1, [r7, #32]
  return result;
 80014da:	6a39      	ldr	r1, [r7, #32]
 80014dc:	fab1 f181 	clz	r1, r1
 80014e0:	b2c9      	uxtb	r1, r1
 80014e2:	40cb      	lsrs	r3, r1
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc90      	pop	{r4, r7}
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f043 0204 	orr.w	r2, r3, #4
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	609a      	str	r2, [r3, #8]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b04      	cmp	r3, #4
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
	...

08001578 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LL_DMA_EnableChannel+0x38>)
 8001588:	5cd3      	ldrb	r3, [r2, r3]
 800158a:	461a      	mov	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	3a01      	subs	r2, #1
 8001596:	4906      	ldr	r1, [pc, #24]	; (80015b0 <LL_DMA_EnableChannel+0x38>)
 8001598:	5c8a      	ldrb	r2, [r1, r2]
 800159a:	4611      	mov	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	440a      	add	r2, r1
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	08007730 	.word	0x08007730

080015b4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d4:	f023 0310 	bic.w	r3, r3, #16
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	3a01      	subs	r2, #1
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80015de:	5c8a      	ldrb	r2, [r1, r2]
 80015e0:	4611      	mov	r1, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	440a      	add	r2, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	08007730 	.word	0x08007730

080015fc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LL_DMA_SetMode+0x40>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 0220 	bic.w	r2, r3, #32
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3b01      	subs	r3, #1
 8001620:	4906      	ldr	r1, [pc, #24]	; (800163c <LL_DMA_SetMode+0x40>)
 8001622:	5ccb      	ldrb	r3, [r1, r3]
 8001624:	4619      	mov	r1, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	440b      	add	r3, r1
 800162a:	4619      	mov	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	08007730 	.word	0x08007730

08001640 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3b01      	subs	r3, #1
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <LL_DMA_SetPeriphIncMode+0x40>)
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <LL_DMA_SetPeriphIncMode+0x40>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	4619      	mov	r1, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	440b      	add	r3, r1
 800166e:	4619      	mov	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	08007730 	.word	0x08007730

08001684 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3b01      	subs	r3, #1
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <LL_DMA_SetMemoryIncMode+0x40>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	4906      	ldr	r1, [pc, #24]	; (80016c4 <LL_DMA_SetMemoryIncMode+0x40>)
 80016aa:	5ccb      	ldrb	r3, [r1, r3]
 80016ac:	4619      	mov	r1, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	440b      	add	r3, r1
 80016b2:	4619      	mov	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	08007730 	.word	0x08007730

080016c8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LL_DMA_SetPeriphSize+0x40>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	4906      	ldr	r1, [pc, #24]	; (8001708 <LL_DMA_SetPeriphSize+0x40>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	4619      	mov	r1, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	440b      	add	r3, r1
 80016f6:	4619      	mov	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	08007730 	.word	0x08007730

0800170c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	3b01      	subs	r3, #1
 800171c:	4a0b      	ldr	r2, [pc, #44]	; (800174c <LL_DMA_SetMemorySize+0x40>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	461a      	mov	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4413      	add	r3, r2
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	3b01      	subs	r3, #1
 8001730:	4906      	ldr	r1, [pc, #24]	; (800174c <LL_DMA_SetMemorySize+0x40>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	4619      	mov	r1, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	440b      	add	r3, r1
 800173a:	4619      	mov	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	08007730 	.word	0x08007730

08001750 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	3b01      	subs	r3, #1
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	461a      	mov	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4413      	add	r3, r2
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3b01      	subs	r3, #1
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	4619      	mov	r1, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	440b      	add	r3, r1
 800177e:	4619      	mov	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	08007730 	.word	0x08007730

08001794 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LL_DMA_SetDataLength+0x40>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	461a      	mov	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	3a01      	subs	r2, #1
 80017b8:	4906      	ldr	r1, [pc, #24]	; (80017d4 <LL_DMA_SetDataLength+0x40>)
 80017ba:	5c8a      	ldrb	r2, [r1, r2]
 80017bc:	4611      	mov	r1, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	440a      	add	r2, r1
 80017c2:	4611      	mov	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	08007730 	.word	0x08007730

080017d8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <LL_DMA_SetMemoryAddress+0x2c>)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08007730 	.word	0x08007730

08001808 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3b01      	subs	r3, #1
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <LL_DMA_SetPeriphAddress+0x2c>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6093      	str	r3, [r2, #8]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	08007730 	.word	0x08007730

08001838 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f023 0201 	bic.w	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60da      	str	r2, [r3, #12]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <LL_RCC_HSE_Enable+0x18>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a03      	ldr	r2, [pc, #12]	; (80018ec <LL_RCC_HSE_Enable+0x18>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <LL_RCC_HSE_IsReady+0x20>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000

08001914 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <LL_RCC_SetSysClkSource+0x24>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 0203 	bic.w	r2, r3, #3
 8001924:	4904      	ldr	r1, [pc, #16]	; (8001938 <LL_RCC_SetSysClkSource+0x24>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <LL_RCC_GetSysClkSource+0x14>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 030c 	and.w	r3, r3, #12
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <LL_RCC_SetAHBPrescaler+0x24>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <LL_RCC_SetAHBPrescaler+0x24>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b4:	4904      	ldr	r1, [pc, #16]	; (80019c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <LL_RCC_SetADCClockSource+0x24>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <LL_RCC_SetADCClockSource+0x24>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <LL_RCC_PLL_Enable+0x18>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <LL_RCC_PLL_Enable+0x18>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40021000 	.word	0x40021000

08001a10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <LL_RCC_PLL_IsReady+0x20>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000

08001a34 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000

08001a64 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aaa:	69da      	ldr	r2, [r3, #28]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <LL_FLASH_SetLatency+0x24>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4904      	ldr	r1, [pc, #16]	; (8001b18 <LL_FLASH_SetLatency+0x24>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40022000 	.word	0x40022000

08001b1c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <LL_FLASH_GetLatency+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40022000 	.word	0x40022000

08001b34 <LL_TIM_EnableCounter>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <LL_TIM_DisableARRPreload>:
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <LL_TIM_SetCounter>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <LL_TIM_OC_DisableFast>:
{
 8001b8c:	b4b0      	push	{r4, r5, r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d01c      	beq.n	8001bd6 <LL_TIM_OC_DisableFast+0x4a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d017      	beq.n	8001bd2 <LL_TIM_OC_DisableFast+0x46>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d012      	beq.n	8001bce <LL_TIM_OC_DisableFast+0x42>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b40      	cmp	r3, #64	; 0x40
 8001bac:	d00d      	beq.n	8001bca <LL_TIM_OC_DisableFast+0x3e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bb4:	d007      	beq.n	8001bc6 <LL_TIM_OC_DisableFast+0x3a>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbc:	d101      	bne.n	8001bc2 <LL_TIM_OC_DisableFast+0x36>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e00a      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e008      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_TIM_OC_DisableFast+0x4c>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3318      	adds	r3, #24
 8001bde:	461a      	mov	r2, r3
 8001be0:	4629      	mov	r1, r5
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <LL_TIM_OC_DisableFast+0x7c>)
 8001be4:	5c5b      	ldrb	r3, [r3, r1]
 8001be6:	4413      	add	r3, r2
 8001be8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	4629      	mov	r1, r5
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <LL_TIM_OC_DisableFast+0x80>)
 8001bf0:	5c5b      	ldrb	r3, [r3, r1]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	408b      	lsls	r3, r1
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	6023      	str	r3, [r4, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bcb0      	pop	{r4, r5, r7}
 8001c06:	4770      	bx	lr
 8001c08:	08007738 	.word	0x08007738
 8001c0c:	08007740 	.word	0x08007740

08001c10 <LL_TIM_OC_EnablePreload>:
{
 8001c10:	b4b0      	push	{r4, r5, r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d01c      	beq.n	8001c5a <LL_TIM_OC_EnablePreload+0x4a>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d017      	beq.n	8001c56 <LL_TIM_OC_EnablePreload+0x46>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d012      	beq.n	8001c52 <LL_TIM_OC_EnablePreload+0x42>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d00d      	beq.n	8001c4e <LL_TIM_OC_EnablePreload+0x3e>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c38:	d007      	beq.n	8001c4a <LL_TIM_OC_EnablePreload+0x3a>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c40:	d101      	bne.n	8001c46 <LL_TIM_OC_EnablePreload+0x36>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e00a      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e008      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_TIM_OC_EnablePreload+0x4c>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3318      	adds	r3, #24
 8001c62:	461a      	mov	r2, r3
 8001c64:	4629      	mov	r1, r5
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <LL_TIM_OC_EnablePreload+0x7c>)
 8001c68:	5c5b      	ldrb	r3, [r3, r1]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	4629      	mov	r1, r5
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <LL_TIM_OC_EnablePreload+0x80>)
 8001c74:	5c5b      	ldrb	r3, [r3, r1]
 8001c76:	4619      	mov	r1, r3
 8001c78:	2308      	movs	r3, #8
 8001c7a:	408b      	lsls	r3, r1
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	6023      	str	r3, [r4, #0]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bcb0      	pop	{r4, r5, r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	08007738 	.word	0x08007738
 8001c90:	08007740 	.word	0x08007740

08001c94 <LL_TIM_OC_DisablePreload>:
{
 8001c94:	b4b0      	push	{r4, r5, r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d01c      	beq.n	8001cde <LL_TIM_OC_DisablePreload+0x4a>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d017      	beq.n	8001cda <LL_TIM_OC_DisablePreload+0x46>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d012      	beq.n	8001cd6 <LL_TIM_OC_DisablePreload+0x42>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d00d      	beq.n	8001cd2 <LL_TIM_OC_DisablePreload+0x3e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbc:	d007      	beq.n	8001cce <LL_TIM_OC_DisablePreload+0x3a>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc4:	d101      	bne.n	8001cca <LL_TIM_OC_DisablePreload+0x36>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e00a      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e008      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	e006      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e004      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e002      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_TIM_OC_DisablePreload+0x4c>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <LL_TIM_OC_DisablePreload+0x7c>)
 8001cec:	5c5b      	ldrb	r3, [r3, r1]
 8001cee:	4413      	add	r3, r2
 8001cf0:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001cf2:	6822      	ldr	r2, [r4, #0]
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <LL_TIM_OC_DisablePreload+0x80>)
 8001cf8:	5c5b      	ldrb	r3, [r3, r1]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	408b      	lsls	r3, r1
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4013      	ands	r3, r2
 8001d04:	6023      	str	r3, [r4, #0]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bcb0      	pop	{r4, r5, r7}
 8001d0e:	4770      	bx	lr
 8001d10:	08007738 	.word	0x08007738
 8001d14:	08007740 	.word	0x08007740

08001d18 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001d18:	b4b0      	push	{r4, r5, r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d01c      	beq.n	8001d64 <LL_TIM_IC_SetActiveInput+0x4c>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d017      	beq.n	8001d60 <LL_TIM_IC_SetActiveInput+0x48>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d012      	beq.n	8001d5c <LL_TIM_IC_SetActiveInput+0x44>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d00d      	beq.n	8001d58 <LL_TIM_IC_SetActiveInput+0x40>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d42:	d007      	beq.n	8001d54 <LL_TIM_IC_SetActiveInput+0x3c>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d101      	bne.n	8001d50 <LL_TIM_IC_SetActiveInput+0x38>
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	e00a      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d50:	2306      	movs	r3, #6
 8001d52:	e008      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e006      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e004      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <LL_TIM_IC_SetActiveInput+0x4e>
 8001d64:	2300      	movs	r3, #0
 8001d66:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4629      	mov	r1, r5
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001d72:	5c5b      	ldrb	r3, [r3, r1]
 8001d74:	4413      	add	r3, r2
 8001d76:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001d78:	6822      	ldr	r2, [r4, #0]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001d7e:	5c5b      	ldrb	r3, [r3, r1]
 8001d80:	4619      	mov	r1, r3
 8001d82:	2303      	movs	r3, #3
 8001d84:	408b      	lsls	r3, r1
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	4628      	mov	r0, r5
 8001d90:	4905      	ldr	r1, [pc, #20]	; (8001da8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001d92:	5c09      	ldrb	r1, [r1, r0]
 8001d94:	408b      	lsls	r3, r1
 8001d96:	4313      	orrs	r3, r2
 8001d98:	6023      	str	r3, [r4, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bcb0      	pop	{r4, r5, r7}
 8001da2:	4770      	bx	lr
 8001da4:	08007738 	.word	0x08007738
 8001da8:	08007748 	.word	0x08007748

08001dac <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001dac:	b4b0      	push	{r4, r5, r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d01c      	beq.n	8001df8 <LL_TIM_IC_SetPrescaler+0x4c>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d017      	beq.n	8001df4 <LL_TIM_IC_SetPrescaler+0x48>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d012      	beq.n	8001df0 <LL_TIM_IC_SetPrescaler+0x44>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d00d      	beq.n	8001dec <LL_TIM_IC_SetPrescaler+0x40>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd6:	d007      	beq.n	8001de8 <LL_TIM_IC_SetPrescaler+0x3c>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dde:	d101      	bne.n	8001de4 <LL_TIM_IC_SetPrescaler+0x38>
 8001de0:	2305      	movs	r3, #5
 8001de2:	e00a      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001de4:	2306      	movs	r3, #6
 8001de6:	e008      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001de8:	2304      	movs	r3, #4
 8001dea:	e006      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001dec:	2303      	movs	r3, #3
 8001dee:	e004      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_TIM_IC_SetPrescaler+0x4e>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3318      	adds	r3, #24
 8001e00:	461a      	mov	r2, r3
 8001e02:	4629      	mov	r1, r5
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001e06:	5c5b      	ldrb	r3, [r3, r1]
 8001e08:	4413      	add	r3, r2
 8001e0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <LL_TIM_IC_SetPrescaler+0x90>)
 8001e12:	5c5b      	ldrb	r3, [r3, r1]
 8001e14:	4619      	mov	r1, r3
 8001e16:	230c      	movs	r3, #12
 8001e18:	408b      	lsls	r3, r1
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	4628      	mov	r0, r5
 8001e24:	4905      	ldr	r1, [pc, #20]	; (8001e3c <LL_TIM_IC_SetPrescaler+0x90>)
 8001e26:	5c09      	ldrb	r1, [r1, r0]
 8001e28:	408b      	lsls	r3, r1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	6023      	str	r3, [r4, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bcb0      	pop	{r4, r5, r7}
 8001e36:	4770      	bx	lr
 8001e38:	08007738 	.word	0x08007738
 8001e3c:	08007748 	.word	0x08007748

08001e40 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001e40:	b4b0      	push	{r4, r5, r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d01c      	beq.n	8001e8c <LL_TIM_IC_SetFilter+0x4c>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d017      	beq.n	8001e88 <LL_TIM_IC_SetFilter+0x48>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d012      	beq.n	8001e84 <LL_TIM_IC_SetFilter+0x44>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d00d      	beq.n	8001e80 <LL_TIM_IC_SetFilter+0x40>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d007      	beq.n	8001e7c <LL_TIM_IC_SetFilter+0x3c>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d101      	bne.n	8001e78 <LL_TIM_IC_SetFilter+0x38>
 8001e74:	2305      	movs	r3, #5
 8001e76:	e00a      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e78:	2306      	movs	r3, #6
 8001e7a:	e008      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e006      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e80:	2303      	movs	r3, #3
 8001e82:	e004      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e002      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_TIM_IC_SetFilter+0x4e>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3318      	adds	r3, #24
 8001e94:	461a      	mov	r2, r3
 8001e96:	4629      	mov	r1, r5
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <LL_TIM_IC_SetFilter+0x8c>)
 8001e9a:	5c5b      	ldrb	r3, [r3, r1]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <LL_TIM_IC_SetFilter+0x90>)
 8001ea6:	5c5b      	ldrb	r3, [r3, r1]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	23f0      	movs	r3, #240	; 0xf0
 8001eac:	408b      	lsls	r3, r1
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	4905      	ldr	r1, [pc, #20]	; (8001ed0 <LL_TIM_IC_SetFilter+0x90>)
 8001eba:	5c09      	ldrb	r1, [r1, r0]
 8001ebc:	408b      	lsls	r3, r1
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	6023      	str	r3, [r4, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bcb0      	pop	{r4, r5, r7}
 8001eca:	4770      	bx	lr
 8001ecc:	08007738 	.word	0x08007738
 8001ed0:	08007748 	.word	0x08007748

08001ed4 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d01c      	beq.n	8001f20 <LL_TIM_IC_SetPolarity+0x4c>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d017      	beq.n	8001f1c <LL_TIM_IC_SetPolarity+0x48>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d012      	beq.n	8001f18 <LL_TIM_IC_SetPolarity+0x44>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d00d      	beq.n	8001f14 <LL_TIM_IC_SetPolarity+0x40>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001efe:	d007      	beq.n	8001f10 <LL_TIM_IC_SetPolarity+0x3c>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d101      	bne.n	8001f0c <LL_TIM_IC_SetPolarity+0x38>
 8001f08:	2305      	movs	r3, #5
 8001f0a:	e00a      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f0c:	2306      	movs	r3, #6
 8001f0e:	e008      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e006      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e004      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <LL_TIM_IC_SetPolarity+0x4e>
 8001f20:	2300      	movs	r3, #0
 8001f22:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <LL_TIM_IC_SetPolarity+0x80>)
 8001f2c:	5c5b      	ldrb	r3, [r3, r1]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	230a      	movs	r3, #10
 8001f32:	408b      	lsls	r3, r1
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <LL_TIM_IC_SetPolarity+0x80>)
 8001f3c:	5c5b      	ldrb	r3, [r3, r1]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	408b      	lsls	r3, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc90      	pop	{r4, r7}
 8001f52:	4770      	bx	lr
 8001f54:	08007750 	.word	0x08007750

08001f58 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	605a      	str	r2, [r3, #4]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f06f 0201 	mvn.w	r2, #1
 8002012:	611a      	str	r2, [r3, #16]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f06f 0202 	mvn.w	r2, #2
 800202c:	611a      	str	r2, [r3, #16]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60da      	str	r2, [r3, #12]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	615a      	str	r2, [r3, #20]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	bf0c      	ite	eq
 80020d0:	2301      	moveq	r3, #1
 80020d2:	2300      	movne	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <LL_GPIO_SetPinMode>:
{
 80020fc:	b490      	push	{r4, r7}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	0e1b      	lsrs	r3, r3, #24
 8002110:	4413      	add	r3, r2
 8002112:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	613b      	str	r3, [r7, #16]
  return result;
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	210f      	movs	r1, #15
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	401a      	ands	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	61bb      	str	r3, [r7, #24]
  return result;
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	4313      	orrs	r3, r2
 8002154:	6023      	str	r3, [r4, #0]
}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bc90      	pop	{r4, r7}
 800215e:	4770      	bx	lr

08002160 <LL_GPIO_IsInputPinSet>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	43da      	mvns	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	4013      	ands	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <LL_GPIO_SetOutputPin>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <LL_GPIO_ResetOutputPin>:
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	615a      	str	r2, [r3, #20]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 80021d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	6053      	str	r3, [r2, #4]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40010000 	.word	0x40010000

080021e8 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 80021f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6053      	str	r3, [r2, #4]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40010000 	.word	0x40010000

08002208 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8002212:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002216:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800221a:	6053      	str	r3, [r2, #4]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40010000 	.word	0x40010000

08002228 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002234:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 800223a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800223e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002242:	6053      	str	r3, [r2, #4]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40010000 	.word	0x40010000

08002250 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800225a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800225e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226a:	6053      	str	r3, [r2, #4]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40010000 	.word	0x40010000

08002278 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002282:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3302      	adds	r3, #2
 800228a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	43db      	mvns	r3, r3
 8002294:	ea02 0103 	and.w	r1, r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	0c1b      	lsrs	r3, r3, #16
 800229c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	60bb      	str	r3, [r7, #8]
  return result;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	fa03 f202 	lsl.w	r2, r3, r2
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <LL_GPIO_AF_SetEXTISource+0x58>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	430a      	orrs	r2, r1
 80022be:	3302      	adds	r3, #2
 80022c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40010000 	.word	0x40010000

080022d4 <__io_putchar>:
void Car_Avoid_Process();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1) == 0) {
 80022dc:	bf00      	nop
 80022de:	4808      	ldr	r0, [pc, #32]	; (8002300 <__io_putchar+0x2c>)
 80022e0:	f7ff feec 	bl	80020bc <LL_USART_IsActiveFlag_TC>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f9      	beq.n	80022de <__io_putchar+0xa>
	}
	LL_USART_TransmitData8(USART1, (uint8_t) ch);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <__io_putchar+0x2c>)
 80022f2:	f7ff fef5 	bl	80020e0 <LL_USART_TransmitData8>

	return ch;
 80022f6:	687b      	ldr	r3, [r7, #4]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013800 	.word	0x40013800

08002304 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fbda 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002310:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002314:	f7ff fbbe 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f7fe ffb5 	bl	8001288 <__NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	NVIC_SetPriority(MemoryManagement_IRQn,
 800231e:	f7fe ffd7 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002322:	4603      	mov	r3, r0
 8002324:	2200      	movs	r2, #0
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f825 	bl	8001378 <NVIC_EncodePriority>
 800232e:	4603      	mov	r3, r0
 8002330:	4619      	mov	r1, r3
 8002332:	f06f 000b 	mvn.w	r0, #11
 8002336:	f7fe fff5 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	/* BusFault_IRQn interrupt configuration */
	NVIC_SetPriority(BusFault_IRQn,
 800233a:	f7fe ffc9 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800233e:	4603      	mov	r3, r0
 8002340:	2200      	movs	r2, #0
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f817 	bl	8001378 <NVIC_EncodePriority>
 800234a:	4603      	mov	r3, r0
 800234c:	4619      	mov	r1, r3
 800234e:	f06f 000a 	mvn.w	r0, #10
 8002352:	f7fe ffe7 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	/* UsageFault_IRQn interrupt configuration */
	NVIC_SetPriority(UsageFault_IRQn,
 8002356:	f7fe ffbb 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800235a:	4603      	mov	r3, r0
 800235c:	2200      	movs	r2, #0
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f809 	bl	8001378 <NVIC_EncodePriority>
 8002366:	4603      	mov	r3, r0
 8002368:	4619      	mov	r1, r3
 800236a:	f06f 0009 	mvn.w	r0, #9
 800236e:	f7fe ffd9 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	/* SVCall_IRQn interrupt configuration */
	NVIC_SetPriority(SVCall_IRQn,
 8002372:	f7fe ffad 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002376:	4603      	mov	r3, r0
 8002378:	2200      	movs	r2, #0
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fffb 	bl	8001378 <NVIC_EncodePriority>
 8002382:	4603      	mov	r3, r0
 8002384:	4619      	mov	r1, r3
 8002386:	f06f 0004 	mvn.w	r0, #4
 800238a:	f7fe ffcb 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	/* DebugMonitor_IRQn interrupt configuration */
	NVIC_SetPriority(DebugMonitor_IRQn,
 800238e:	f7fe ff9f 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002392:	4603      	mov	r3, r0
 8002394:	2200      	movs	r2, #0
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe ffed 	bl	8001378 <NVIC_EncodePriority>
 800239e:	4603      	mov	r3, r0
 80023a0:	4619      	mov	r1, r3
 80023a2:	f06f 0003 	mvn.w	r0, #3
 80023a6:	f7fe ffbd 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	/* PendSV_IRQn interrupt configuration */
	NVIC_SetPriority(PendSV_IRQn,
 80023aa:	f7fe ff91 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2200      	movs	r2, #0
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe ffdf 	bl	8001378 <NVIC_EncodePriority>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4619      	mov	r1, r3
 80023be:	f06f 0001 	mvn.w	r0, #1
 80023c2:	f7fe ffaf 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn,
 80023c6:	f7fe ff83 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2200      	movs	r2, #0
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe ffd1 	bl	8001378 <NVIC_EncodePriority>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4619      	mov	r1, r3
 80023da:	f04f 30ff 	mov.w	r0, #4294967295
 80023de:	f7fe ffa1 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80023e2:	f7ff ff35 	bl	8002250 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

	/* USER CODE BEGIN Init */
	setvbuf(stdin, NULL, _IONBF, 0);
 80023e6:	4ba8      	ldr	r3, [pc, #672]	; (8002688 <main+0x384>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6858      	ldr	r0, [r3, #4]
 80023ec:	2300      	movs	r3, #0
 80023ee:	2202      	movs	r2, #2
 80023f0:	2100      	movs	r1, #0
 80023f2:	f003 fc81 	bl	8005cf8 <setvbuf>
	setvbuf(stdout, NULL, _IONBF, 0);
 80023f6:	4ba4      	ldr	r3, [pc, #656]	; (8002688 <main+0x384>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6898      	ldr	r0, [r3, #8]
 80023fc:	2300      	movs	r3, #0
 80023fe:	2202      	movs	r2, #2
 8002400:	2100      	movs	r1, #0
 8002402:	f003 fc79 	bl	8005cf8 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 8002406:	4ba0      	ldr	r3, [pc, #640]	; (8002688 <main+0x384>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68d8      	ldr	r0, [r3, #12]
 800240c:	2300      	movs	r3, #0
 800240e:	2202      	movs	r2, #2
 8002410:	2100      	movs	r1, #0
 8002412:	f003 fc71 	bl	8005cf8 <setvbuf>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002416:	f000 fa05 	bl	8002824 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();
 800241a:	f000 fea3 	bl	8003164 <MX_GPIO_Init>
	MX_DMA_Init();
 800241e:	f000 fe89 	bl	8003134 <MX_DMA_Init>
	MX_TIM1_Init();
 8002422:	f000 fbb1 	bl	8002b88 <MX_TIM1_Init>
	MX_ADC1_Init();
 8002426:	f000 fa3f 	bl	80028a8 <MX_ADC1_Init>
	MX_I2C1_Init();
 800242a:	f000 fb53 	bl	8002ad4 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800242e:	f000 fe29 	bl	8003084 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8002432:	f000 fc5f 	bl	8002cf4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002436:	f000 fd0d 	bl	8002e54 <MX_TIM3_Init>
	MX_TIM4_Init();
 800243a:	f000 fd9b 	bl	8002f74 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	MotorL_EnablePWM();
 800243e:	f7fe fe5f 	bl	8001100 <MotorL_EnablePWM>
	MotorR_EnablePWM();
 8002442:	f7fe fe67 	bl	8001114 <MotorR_EnablePWM>
	MotorL_SetPWM(0);
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fe70 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe fea5 	bl	800119c <MotorR_SetPWM>
	Servo_SetAngle(0);
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f7fe fed9 	bl	800120c <Servo_SetAngle>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	//  uint32_t Count = LL_TIM_GetCounter(TIM2);
	uint8_t DistanceState = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]
	while (1) {
	Sensor_Convert_A2D();
 800245e:	f000 ff6b 	bl	8003338 <Sensor_Convert_A2D>
    //    printf("HalfWhiteFlag: %i ", HalfWhiteFlag);
    //    printf("HalfWhiteFlag_Raw: %i ", HalfWhiteFlag_Raw);
    //    printf("FullWhiteFlag: %i ", FullWhiteFlag);
    //    printf("CuaFlag: %i ", CuaFlag);
    //    printf("MatLineFlag: %i \n", MatLineFlag);
    DistanceState = LL_GPIO_IsInputPinSet(Distance_GPIO_Port, Distance_Pin);
 8002462:	f240 1101 	movw	r1, #257	; 0x101
 8002466:	4889      	ldr	r0, [pc, #548]	; (800268c <main+0x388>)
 8002468:	f7ff fe7a 	bl	8002160 <LL_GPIO_IsInputPinSet>
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
//    printf("Distance %i", DistanceState);
//    if(DistanceState == 0)
//    {
//    	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
//    }
    if (HalfWhiteFlag != 0 || FullWhiteFlag != 0)
 8002470:	4b87      	ldr	r3, [pc, #540]	; (8002690 <main+0x38c>)
 8002472:	f993 3000 	ldrsb.w	r3, [r3]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <main+0x17e>
 800247a:	4b86      	ldr	r3, [pc, #536]	; (8002694 <main+0x390>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <main+0x188>
    {
      MaxSpeed = SignalSpeed;
 8002482:	4b85      	ldr	r3, [pc, #532]	; (8002698 <main+0x394>)
 8002484:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	e003      	b.n	8002494 <main+0x190>
    }
    else
    {
      MaxSpeed = MaximumSpeed;
 800248c:	4b82      	ldr	r3, [pc, #520]	; (8002698 <main+0x394>)
 800248e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002492:	801a      	strh	r2, [r3, #0]
    }
    if (CarState == DiThang)
 8002494:	4b81      	ldr	r3, [pc, #516]	; (800269c <main+0x398>)
 8002496:	f993 3000 	ldrsb.w	r3, [r3]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d136      	bne.n	800250c <main+0x208>
        {
          if (LineDetect == 0b10000000 || LineDetect == 0b11000000 ||
 800249e:	4b80      	ldr	r3, [pc, #512]	; (80026a0 <main+0x39c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b80      	cmp	r3, #128	; 0x80
 80024a4:	d013      	beq.n	80024ce <main+0x1ca>
 80024a6:	4b7e      	ldr	r3, [pc, #504]	; (80026a0 <main+0x39c>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2bc0      	cmp	r3, #192	; 0xc0
 80024ac:	d00f      	beq.n	80024ce <main+0x1ca>
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024ae:	4b7c      	ldr	r3, [pc, #496]	; (80026a0 <main+0x39c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
          if (LineDetect == 0b10000000 || LineDetect == 0b11000000 ||
 80024b2:	2be0      	cmp	r3, #224	; 0xe0
 80024b4:	d00b      	beq.n	80024ce <main+0x1ca>
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024b6:	4b7a      	ldr	r3, [pc, #488]	; (80026a0 <main+0x39c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b70      	cmp	r3, #112	; 0x70
 80024bc:	d007      	beq.n	80024ce <main+0x1ca>
              LineDetect == 0b00110000 || LineDetect == 0b00010000)
 80024be:	4b78      	ldr	r3, [pc, #480]	; (80026a0 <main+0x39c>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
              LineDetect == 0b11100000 || LineDetect == 0b01110000 ||
 80024c2:	2b30      	cmp	r3, #48	; 0x30
 80024c4:	d003      	beq.n	80024ce <main+0x1ca>
              LineDetect == 0b00110000 || LineDetect == 0b00010000)
 80024c6:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <main+0x39c>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d103      	bne.n	80024d6 <main+0x1d2>
          {
            CarState = LechPhai;// 25-30us
 80024ce:	4b73      	ldr	r3, [pc, #460]	; (800269c <main+0x398>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e01a      	b.n	800250c <main+0x208>
          }
          else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 80024d6:	4b72      	ldr	r3, [pc, #456]	; (80026a0 <main+0x39c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d013      	beq.n	8002506 <main+0x202>
 80024de:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <main+0x39c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d00f      	beq.n	8002506 <main+0x202>
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80024e6:	4b6e      	ldr	r3, [pc, #440]	; (80026a0 <main+0x39c>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
          else if (LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 80024ea:	2b07      	cmp	r3, #7
 80024ec:	d00b      	beq.n	8002506 <main+0x202>
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80024ee:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <main+0x39c>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b0e      	cmp	r3, #14
 80024f4:	d007      	beq.n	8002506 <main+0x202>
                   LineDetect == 0b00001100 || LineDetect == 0b00001000)
 80024f6:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <main+0x39c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
                   LineDetect == 0b00000111 || LineDetect == 0b00001110 ||
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d003      	beq.n	8002506 <main+0x202>
                   LineDetect == 0b00001100 || LineDetect == 0b00001000)
 80024fe:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <main+0x39c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b08      	cmp	r3, #8
 8002504:	d102      	bne.n	800250c <main+0x208>
          {
            CarState = LechTrai;// 25-30us
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <main+0x398>)
 8002508:	22ff      	movs	r2, #255	; 0xff
 800250a:	701a      	strb	r2, [r3, #0]
          }
        }
    if(FullWhiteFlag == 1 && DistanceState == 0)
 800250c:	4b61      	ldr	r3, [pc, #388]	; (8002694 <main+0x390>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <main+0x21c>
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <main+0x21c>
    {
    	Car_Avoid_Process();
 800251a:	f001 fce9 	bl	8003ef0 <Car_Avoid_Process>
		continue;
 800251e:	e16a      	b.n	80027f6 <main+0x4f2>
    }
    if (LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000) // 18.8 us
 8002520:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <main+0x39c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b18      	cmp	r3, #24
 8002526:	d007      	beq.n	8002538 <main+0x234>
 8002528:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <main+0x39c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b1c      	cmp	r3, #28
 800252e:	d003      	beq.n	8002538 <main+0x234>
 8002530:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <main+0x39c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b38      	cmp	r3, #56	; 0x38
 8002536:	d120      	bne.n	800257a <main+0x276>
    {
      if (HalfWhiteFlag_Raw == HalfLeft)
 8002538:	4b5a      	ldr	r3, [pc, #360]	; (80026a4 <main+0x3a0>)
 800253a:	f993 3000 	ldrsb.w	r3, [r3]
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d106      	bne.n	8002552 <main+0x24e>
      {
        HalfWhiteFlag_Raw = 0;
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <main+0x3a0>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
        HalfWhiteFlag = HalfLeft;
 800254a:	4b51      	ldr	r3, [pc, #324]	; (8002690 <main+0x38c>)
 800254c:	22ff      	movs	r2, #255	; 0xff
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e00a      	b.n	8002568 <main+0x264>
      }
      else if (HalfWhiteFlag_Raw == HalfRight)
 8002552:	4b54      	ldr	r3, [pc, #336]	; (80026a4 <main+0x3a0>)
 8002554:	f993 3000 	ldrsb.w	r3, [r3]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <main+0x264>
      {
        HalfWhiteFlag_Raw = 0;
 800255c:	4b51      	ldr	r3, [pc, #324]	; (80026a4 <main+0x3a0>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
        HalfWhiteFlag = HalfRight;
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <main+0x38c>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
      }

      MatLineFlag = 0;
 8002568:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <main+0x3a4>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
      CarState = DiThang;
 800256e:	4b4b      	ldr	r3, [pc, #300]	; (800269c <main+0x398>)
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]

      Car_DiThang_Process();
 8002574:	f000 ff14 	bl	80033a0 <Car_DiThang_Process>
      continue;
 8002578:	e13d      	b.n	80027f6 <main+0x4f2>
    }
    else if (LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 800257a:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <main+0x39c>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b7f      	cmp	r3, #127	; 0x7f
 8002580:	d007      	beq.n	8002592 <main+0x28e>
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <main+0x39c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b3f      	cmp	r3, #63	; 0x3f
 8002588:	d003      	beq.n	8002592 <main+0x28e>
 800258a:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <main+0x39c>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b1f      	cmp	r3, #31
 8002590:	d126      	bne.n	80025e0 <main+0x2dc>
    {
    	if(FullWhiteFlag == 1)
 8002592:	4b40      	ldr	r3, [pc, #256]	; (8002694 <main+0x390>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10f      	bne.n	80025ba <main+0x2b6>
    	{
    		FullWhiteFlag = 0;
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <main+0x390>)
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    		while(LineDetect != 0)
 80025a0:	e001      	b.n	80025a6 <main+0x2a2>
    			Sensor_Convert_A2D();
 80025a2:	f000 fec9 	bl	8003338 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <main+0x39c>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f9      	bne.n	80025a2 <main+0x29e>
    		Car_CuaPhai_Process();
 80025ae:	f001 fc13 	bl	8003dd8 <Car_CuaPhai_Process>

    		HalfWhiteFlag = 0;
 80025b2:	4b37      	ldr	r3, [pc, #220]	; (8002690 <main+0x38c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    		continue;
 80025b8:	e11d      	b.n	80027f6 <main+0x4f2>
    	} else
    	{
    		HalfWhiteFlag_Raw = HalfRight;
 80025ba:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <main+0x3a0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
    	};
    	while(LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 80025c0:	e001      	b.n	80025c6 <main+0x2c2>
    	{
    		Sensor_Convert_A2D();
 80025c2:	f000 feb9 	bl	8003338 <Sensor_Convert_A2D>
    	while(LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <main+0x39c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b7f      	cmp	r3, #127	; 0x7f
 80025cc:	d0f9      	beq.n	80025c2 <main+0x2be>
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <main+0x39c>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b3f      	cmp	r3, #63	; 0x3f
 80025d4:	d0f5      	beq.n	80025c2 <main+0x2be>
 80025d6:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <main+0x39c>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b1f      	cmp	r3, #31
 80025dc:	d0f1      	beq.n	80025c2 <main+0x2be>
    else if (LineDetect == 0b01111111 || LineDetect == 0b00111111 || LineDetect == 0b00011111)
 80025de:	e106      	b.n	80027ee <main+0x4ea>
    	}
    }
    else if (LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 80025e0:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <main+0x39c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2bf8      	cmp	r3, #248	; 0xf8
 80025e6:	d007      	beq.n	80025f8 <main+0x2f4>
 80025e8:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <main+0x39c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2bfc      	cmp	r3, #252	; 0xfc
 80025ee:	d003      	beq.n	80025f8 <main+0x2f4>
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <main+0x39c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2bfe      	cmp	r3, #254	; 0xfe
 80025f6:	d126      	bne.n	8002646 <main+0x342>
    {
    	if(FullWhiteFlag == 1)
 80025f8:	4b26      	ldr	r3, [pc, #152]	; (8002694 <main+0x390>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10f      	bne.n	8002620 <main+0x31c>
    	{
    		FullWhiteFlag = 0;
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <main+0x390>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
    		while(LineDetect != 0)
 8002606:	e001      	b.n	800260c <main+0x308>
    			Sensor_Convert_A2D();
 8002608:	f000 fe96 	bl	8003338 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <main+0x39c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f9      	bne.n	8002608 <main+0x304>
    		Car_CuaTrai_Process();
 8002614:	f001 fc24 	bl	8003e60 <Car_CuaTrai_Process>
    		HalfWhiteFlag = 0;
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <main+0x38c>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
    		continue;
 800261e:	e0ea      	b.n	80027f6 <main+0x4f2>
    	} else
    	{
    		HalfWhiteFlag_Raw = HalfLeft;
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <main+0x3a0>)
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	701a      	strb	r2, [r3, #0]
    	}
    	while(LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 8002626:	e001      	b.n	800262c <main+0x328>
    	{
    		Sensor_Convert_A2D();
 8002628:	f000 fe86 	bl	8003338 <Sensor_Convert_A2D>
    	while(LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 800262c:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <main+0x39c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2bf8      	cmp	r3, #248	; 0xf8
 8002632:	d0f9      	beq.n	8002628 <main+0x324>
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <main+0x39c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2bfc      	cmp	r3, #252	; 0xfc
 800263a:	d0f5      	beq.n	8002628 <main+0x324>
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <main+0x39c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2bfe      	cmp	r3, #254	; 0xfe
 8002642:	d0f1      	beq.n	8002628 <main+0x324>
    else if (LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 8002644:	e0d3      	b.n	80027ee <main+0x4ea>
    	}
    }
    else if (LineDetect == 0xff)
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <main+0x39c>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d15f      	bne.n	800270e <main+0x40a>
    {
    	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000 || LineDetect== 0))
 800264e:	e001      	b.n	8002654 <main+0x350>
    	    			Sensor_Convert_A2D();
 8002650:	f000 fe72 	bl	8003338 <Sensor_Convert_A2D>
    	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000 || LineDetect== 0))
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <main+0x39c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b18      	cmp	r3, #24
 800265a:	d00b      	beq.n	8002674 <main+0x370>
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <main+0x39c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b1c      	cmp	r3, #28
 8002662:	d007      	beq.n	8002674 <main+0x370>
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <main+0x39c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b38      	cmp	r3, #56	; 0x38
 800266a:	d003      	beq.n	8002674 <main+0x370>
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <main+0x39c>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ed      	bne.n	8002650 <main+0x34c>
    	HalfWhiteFlag_Raw = 0;
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <main+0x3a0>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
    	if(HalfWhiteFlag == HalfLeft)
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <main+0x38c>)
 800267c:	f993 3000 	ldrsb.w	r3, [r3]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d124      	bne.n	80026d0 <main+0x3cc>
    	{
    		while(LineDetect != 0)
 8002686:	e013      	b.n	80026b0 <main+0x3ac>
 8002688:	20000018 	.word	0x20000018
 800268c:	40010c00 	.word	0x40010c00
 8002690:	20000207 	.word	0x20000207
 8002694:	2000020a 	.word	0x2000020a
 8002698:	20000010 	.word	0x20000010
 800269c:	20000206 	.word	0x20000206
 80026a0:	20000205 	.word	0x20000205
 80026a4:	20000208 	.word	0x20000208
 80026a8:	2000020b 	.word	0x2000020b
    			Sensor_Convert_A2D();
 80026ac:	f000 fe44 	bl	8003338 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 80026b0:	4b51      	ldr	r3, [pc, #324]	; (80027f8 <main+0x4f4>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f9      	bne.n	80026ac <main+0x3a8>
    		Car_CuaTrai_Process();
 80026b8:	f001 fbd2 	bl	8003e60 <Car_CuaTrai_Process>
    		CuaFlag = 0;
 80026bc:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <main+0x4f8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag = 0;
 80026c2:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <main+0x4fc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <main+0x500>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
    		continue;
 80026ce:	e092      	b.n	80027f6 <main+0x4f2>
    	} else if(HalfWhiteFlag == HalfRight)
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <main+0x4fc>)
 80026d2:	f993 3000 	ldrsb.w	r3, [r3]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d112      	bne.n	8002700 <main+0x3fc>
    	{
    		while(LineDetect != 0)
 80026da:	e001      	b.n	80026e0 <main+0x3dc>
    		{
    			Sensor_Convert_A2D();
 80026dc:	f000 fe2c 	bl	8003338 <Sensor_Convert_A2D>
    		while(LineDetect != 0)
 80026e0:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <main+0x4f4>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <main+0x3d8>
    		}
    		Car_CuaPhai_Process();
 80026e8:	f001 fb76 	bl	8003dd8 <Car_CuaPhai_Process>
    		CuaFlag = 0;
 80026ec:	4b43      	ldr	r3, [pc, #268]	; (80027fc <main+0x4f8>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag = 0;
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <main+0x4fc>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <main+0x500>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
    		continue;
 80026fe:	e07a      	b.n	80027f6 <main+0x4f2>
    	}else
    	{
    		FullWhiteFlag = 1;
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <main+0x504>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002706:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <main+0x500>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e06f      	b.n	80027ee <main+0x4ea>
    	}
    }
    else if (LineDetect == 0)
 800270e:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <main+0x4f4>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d16b      	bne.n	80027ee <main+0x4ea>
    {
    	if (HalfWhiteFlag == HalfRight)
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <main+0x4fc>)
 8002718:	f993 3000 	ldrsb.w	r3, [r3]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d10c      	bne.n	800273a <main+0x436>
    	{
    		HalfWhiteFlag = 0;
 8002720:	4b37      	ldr	r3, [pc, #220]	; (8002800 <main+0x4fc>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <main+0x500>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
    		Car_ChuyenLanePhai_Process();
 800272c:	f001 facc 	bl	8003cc8 <Car_ChuyenLanePhai_Process>
    		LL_GPIO_ResetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 8002730:	4936      	ldr	r1, [pc, #216]	; (800280c <main+0x508>)
 8002732:	4837      	ldr	r0, [pc, #220]	; (8002810 <main+0x50c>)
 8002734:	f7ff fd39 	bl	80021aa <LL_GPIO_ResetOutputPin>
    		continue;
 8002738:	e05d      	b.n	80027f6 <main+0x4f2>
    	} else if(HalfWhiteFlag == HalfLeft)
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <main+0x4fc>)
 800273c:	f993 3000 	ldrsb.w	r3, [r3]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002744:	d10c      	bne.n	8002760 <main+0x45c>
    	{
    		HalfWhiteFlag = 0;
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <main+0x4fc>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <main+0x500>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
    		Car_ChuyenLaneTrai_Process();
 8002752:	f001 fb01 	bl	8003d58 <Car_ChuyenLaneTrai_Process>
    		LL_GPIO_ResetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 8002756:	492d      	ldr	r1, [pc, #180]	; (800280c <main+0x508>)
 8002758:	482d      	ldr	r0, [pc, #180]	; (8002810 <main+0x50c>)
 800275a:	f7ff fd26 	bl	80021aa <LL_GPIO_ResetOutputPin>
    		continue;
 800275e:	e04a      	b.n	80027f6 <main+0x4f2>
    	} else if(FullWhiteFlag == 1)
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <main+0x504>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d142      	bne.n	80027ee <main+0x4ea>
    	{
    		FullWhiteFlag = 0 ;
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <main+0x504>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
    		HalfWhiteFlag_Raw = 0;
 800276e:	4b25      	ldr	r3, [pc, #148]	; (8002804 <main+0x500>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
    		Servo_SetAngle(-10);
 8002774:	4827      	ldr	r0, [pc, #156]	; (8002814 <main+0x510>)
 8002776:	f7fe fd49 	bl	800120c <Servo_SetAngle>
    		MotorL_SetPWM(MaxSpeed * 1.2);
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <main+0x514>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fe40 	bl	8000404 <__aeabi_i2d>
 8002784:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <main+0x518>)
 800278a:	f7fd fea5 	bl	80004d8 <__aeabi_dmul>
 800278e:	4603      	mov	r3, r0
 8002790:	460c      	mov	r4, r1
 8002792:	4618      	mov	r0, r3
 8002794:	4621      	mov	r1, r4
 8002796:	f7fe f94f 	bl	8000a38 <__aeabi_d2iz>
 800279a:	4603      	mov	r3, r0
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fcc5 	bl	800112c <MotorL_SetPWM>
    		MotorR_SetPWM(MaxSpeed * 1.5);
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <main+0x514>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fe2c 	bl	8000404 <__aeabi_i2d>
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <main+0x51c>)
 80027b2:	f7fd fe91 	bl	80004d8 <__aeabi_dmul>
 80027b6:	4603      	mov	r3, r0
 80027b8:	460c      	mov	r4, r1
 80027ba:	4618      	mov	r0, r3
 80027bc:	4621      	mov	r1, r4
 80027be:	f7fe f93b 	bl	8000a38 <__aeabi_d2iz>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fce9 	bl	800119c <MotorR_SetPWM>
    		while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 80027ca:	e003      	b.n	80027d4 <main+0x4d0>
    		{
    			Sensor_Convert_A2D();
 80027cc:	f000 fdb4 	bl	8003338 <Sensor_Convert_A2D>
    			Car_MatLine_Process();
 80027d0:	f001 fa16 	bl	8003c00 <Car_MatLine_Process>
    		while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <main+0x4f4>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b18      	cmp	r3, #24
 80027da:	d00b      	beq.n	80027f4 <main+0x4f0>
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <main+0x4f4>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b1c      	cmp	r3, #28
 80027e2:	d007      	beq.n	80027f4 <main+0x4f0>
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <main+0x4f4>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b38      	cmp	r3, #56	; 0x38
 80027ea:	d1ef      	bne.n	80027cc <main+0x4c8>
    		}
    		continue;
 80027ec:	e002      	b.n	80027f4 <main+0x4f0>
    	}
    };
      Car_BamLine_Process();
 80027ee:	f000 fe53 	bl	8003498 <Car_BamLine_Process>
 80027f2:	e634      	b.n	800245e <main+0x15a>
    		continue;
 80027f4:	bf00      	nop
	Sensor_Convert_A2D();
 80027f6:	e632      	b.n	800245e <main+0x15a>
 80027f8:	20000205 	.word	0x20000205
 80027fc:	20000209 	.word	0x20000209
 8002800:	20000207 	.word	0x20000207
 8002804:	20000208 	.word	0x20000208
 8002808:	2000020a 	.word	0x2000020a
 800280c:	04200020 	.word	0x04200020
 8002810:	40011000 	.word	0x40011000
 8002814:	c1200000 	.word	0xc1200000
 8002818:	20000010 	.word	0x20000010
 800281c:	3ff33333 	.word	0x3ff33333
 8002820:	3ff80000 	.word	0x3ff80000

08002824 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002828:	2002      	movs	r0, #2
 800282a:	f7ff f963 	bl	8001af4 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2) {
 800282e:	bf00      	nop
 8002830:	f7ff f974 	bl	8001b1c <LL_FLASH_GetLatency>
 8002834:	4603      	mov	r3, r0
 8002836:	2b02      	cmp	r3, #2
 8002838:	d1fa      	bne.n	8002830 <SystemClock_Config+0xc>
	}
	LL_RCC_HSE_Enable();
 800283a:	f7ff f84b 	bl	80018d4 <LL_RCC_HSE_Enable>

	/* Wait till HSE is ready */
	while (LL_RCC_HSE_IsReady() != 1) {
 800283e:	bf00      	nop
 8002840:	f7ff f856 	bl	80018f0 <LL_RCC_HSE_IsReady>
 8002844:	4603      	mov	r3, r0
 8002846:	2b01      	cmp	r3, #1
 8002848:	d1fa      	bne.n	8002840 <SystemClock_Config+0x1c>

	}
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800284a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800284e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002852:	f7ff f8ef 	bl	8001a34 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8002856:	f7ff f8cd 	bl	80019f4 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 800285a:	bf00      	nop
 800285c:	f7ff f8d8 	bl	8001a10 <LL_RCC_PLL_IsReady>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d1fa      	bne.n	800285c <SystemClock_Config+0x38>

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002866:	2000      	movs	r0, #0
 8002868:	f7ff f874 	bl	8001954 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800286c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002870:	f7ff f884 	bl	800197c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff f895 	bl	80019a4 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800287a:	2002      	movs	r0, #2
 800287c:	f7ff f84a 	bl	8001914 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8002880:	bf00      	nop
 8002882:	f7ff f85b 	bl	800193c <LL_RCC_GetSysClkSource>
 8002886:	4603      	mov	r3, r0
 8002888:	2b08      	cmp	r3, #8
 800288a:	d1fa      	bne.n	8002882 <SystemClock_Config+0x5e>

	}
	LL_Init1msTick(72000000);
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <SystemClock_Config+0x80>)
 800288e:	f002 fea7 	bl	80055e0 <LL_Init1msTick>
	LL_SetSystemCoreClock(72000000);
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <SystemClock_Config+0x80>)
 8002894:	f002 feb2 	bl	80055fc <LL_SetSystemCoreClock>
	LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8002898:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800289c:	f7ff f896 	bl	80019cc <LL_RCC_SetADCClockSource>
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	044aa200 	.word	0x044aa200

080028a8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	; 0x38
 80028ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	LL_ADC_InitTypeDef ADC_InitStruct = { 0 };
 80028ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = { 0 };
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = { 0 };
 80028bc:	f107 0318 	add.w	r3, r7, #24
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80028da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028de:	f7ff f8f1 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80028e2:	2004      	movs	r0, #4
 80028e4:	f7ff f8ee 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	 PA4   ------> ADC1_IN4
	 PA5   ------> ADC1_IN5
	 PA6   ------> ADC1_IN6
	 PA7   ------> ADC1_IN7
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2
 80028e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ec:	607b      	str	r3, [r7, #4]
			| LL_GPIO_PIN_3 | LL_GPIO_PIN_4 | LL_GPIO_PIN_5 | LL_GPIO_PIN_6
			| LL_GPIO_PIN_7;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	486b      	ldr	r0, [pc, #428]	; (8002aa4 <MX_ADC1_Init+0x1fc>)
 80028f8:	f002 f804 	bl	8004904 <LL_GPIO_Init>

	/* ADC1 DMA Init */

	/* ADC1 Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1,
 80028fc:	2200      	movs	r2, #0
 80028fe:	2101      	movs	r1, #1
 8002900:	4869      	ldr	r0, [pc, #420]	; (8002aa8 <MX_ADC1_Init+0x200>)
 8002902:	f7fe fe57 	bl	80015b4 <LL_DMA_SetDataTransferDirection>
			LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1,
 8002906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800290a:	2101      	movs	r1, #1
 800290c:	4866      	ldr	r0, [pc, #408]	; (8002aa8 <MX_ADC1_Init+0x200>)
 800290e:	f7fe ff1f 	bl	8001750 <LL_DMA_SetChannelPriorityLevel>
			LL_DMA_PRIORITY_HIGH);

	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002912:	2220      	movs	r2, #32
 8002914:	2101      	movs	r1, #1
 8002916:	4864      	ldr	r0, [pc, #400]	; (8002aa8 <MX_ADC1_Init+0x200>)
 8002918:	f7fe fe70 	bl	80015fc <LL_DMA_SetMode>

	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800291c:	2200      	movs	r2, #0
 800291e:	2101      	movs	r1, #1
 8002920:	4861      	ldr	r0, [pc, #388]	; (8002aa8 <MX_ADC1_Init+0x200>)
 8002922:	f7fe fe8d 	bl	8001640 <LL_DMA_SetPeriphIncMode>

	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	2101      	movs	r1, #1
 800292a:	485f      	ldr	r0, [pc, #380]	; (8002aa8 <MX_ADC1_Init+0x200>)
 800292c:	f7fe feaa 	bl	8001684 <LL_DMA_SetMemoryIncMode>

	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002934:	2101      	movs	r1, #1
 8002936:	485c      	ldr	r0, [pc, #368]	; (8002aa8 <MX_ADC1_Init+0x200>)
 8002938:	f7fe fec6 	bl	80016c8 <LL_DMA_SetPeriphSize>

	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 800293c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002940:	2101      	movs	r1, #1
 8002942:	4859      	ldr	r0, [pc, #356]	; (8002aa8 <MX_ADC1_Init+0x200>)
 8002944:	f7fe fee2 	bl	800170c <LL_DMA_SetMemorySize>

	/* USER CODE BEGIN ADC1_Init 1 */
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 8);
 8002948:	2208      	movs	r2, #8
 800294a:	2101      	movs	r1, #1
 800294c:	4856      	ldr	r0, [pc, #344]	; (8002aa8 <MX_ADC1_Init+0x200>)
 800294e:	f7fe ff21 	bl	8001794 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,
 8002952:	4b56      	ldr	r3, [pc, #344]	; (8002aac <MX_ADC1_Init+0x204>)
 8002954:	461a      	mov	r2, r3
 8002956:	2101      	movs	r1, #1
 8002958:	4853      	ldr	r0, [pc, #332]	; (8002aa8 <MX_ADC1_Init+0x200>)
 800295a:	f7fe ff3d 	bl	80017d8 <LL_DMA_SetMemoryAddress>
			(uint32_t) &Sensor_ADC_Value);
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1, ADC1_DR_Address);
 800295e:	4a54      	ldr	r2, [pc, #336]	; (8002ab0 <MX_ADC1_Init+0x208>)
 8002960:	2101      	movs	r1, #1
 8002962:	4851      	ldr	r0, [pc, #324]	; (8002aa8 <MX_ADC1_Init+0x200>)
 8002964:	f7fe ff50 	bl	8001808 <LL_DMA_SetPeriphAddress>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002968:	2101      	movs	r1, #1
 800296a:	484f      	ldr	r0, [pc, #316]	; (8002aa8 <MX_ADC1_Init+0x200>)
 800296c:	f7fe fe04 	bl	8001578 <LL_DMA_EnableChannel>
	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002970:	2300      	movs	r3, #0
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
	ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
	LL_ADC_Init(ADC1, &ADC_InitStruct);
 800297a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800297e:	4619      	mov	r1, r3
 8002980:	484c      	ldr	r0, [pc, #304]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002982:	f001 fd8d 	bl	80044a0 <LL_ADC_Init>
	ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800298a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298e:	4619      	mov	r1, r3
 8002990:	4848      	ldr	r0, [pc, #288]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002992:	f001 fd53 	bl	800443c <LL_ADC_CommonInit>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002996:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800299a:	61bb      	str	r3, [r7, #24]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 800299c:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 80029a0:	61fb      	str	r3, [r7, #28]
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80029a6:	2302      	movs	r3, #2
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80029aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
	LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80029b0:	f107 0318 	add.w	r3, r7, #24
 80029b4:	4619      	mov	r1, r3
 80029b6:	483f      	ldr	r0, [pc, #252]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 80029b8:	f001 fd99 	bl	80044ee <LL_ADC_REG_Init>
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80029bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029c4:	483b      	ldr	r0, [pc, #236]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 80029c6:	f7fe fd09 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0,
 80029ca:	2200      	movs	r2, #0
 80029cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029d0:	4838      	ldr	r0, [pc, #224]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 80029d2:	f7fe fd48 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_1CYCLE_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 80029d6:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <MX_ADC1_Init+0x210>)
 80029d8:	f240 2105 	movw	r1, #517	; 0x205
 80029dc:	4835      	ldr	r0, [pc, #212]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 80029de:	f7fe fcfd 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1,
 80029e2:	2200      	movs	r2, #0
 80029e4:	4934      	ldr	r1, [pc, #208]	; (8002ab8 <MX_ADC1_Init+0x210>)
 80029e6:	4833      	ldr	r0, [pc, #204]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 80029e8:	f7fe fd3d 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_1CYCLE_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 80029ec:	4a33      	ldr	r2, [pc, #204]	; (8002abc <MX_ADC1_Init+0x214>)
 80029ee:	f240 210a 	movw	r1, #522	; 0x20a
 80029f2:	4830      	ldr	r0, [pc, #192]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 80029f4:	f7fe fcf2 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2,
 80029f8:	2200      	movs	r2, #0
 80029fa:	4930      	ldr	r1, [pc, #192]	; (8002abc <MX_ADC1_Init+0x214>)
 80029fc:	482d      	ldr	r0, [pc, #180]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 80029fe:	f7fe fd32 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_1CYCLE_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8002a02:	4a2f      	ldr	r2, [pc, #188]	; (8002ac0 <MX_ADC1_Init+0x218>)
 8002a04:	f240 210f 	movw	r1, #527	; 0x20f
 8002a08:	482a      	ldr	r0, [pc, #168]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a0a:	f7fe fce7 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3,
 8002a0e:	2200      	movs	r2, #0
 8002a10:	492b      	ldr	r1, [pc, #172]	; (8002ac0 <MX_ADC1_Init+0x218>)
 8002a12:	4828      	ldr	r0, [pc, #160]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a14:	f7fe fd27 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_1CYCLE_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8002a18:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <MX_ADC1_Init+0x21c>)
 8002a1a:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002a1e:	4825      	ldr	r0, [pc, #148]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a20:	f7fe fcdc 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4,
 8002a24:	2200      	movs	r2, #0
 8002a26:	4927      	ldr	r1, [pc, #156]	; (8002ac4 <MX_ADC1_Init+0x21c>)
 8002a28:	4822      	ldr	r0, [pc, #136]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a2a:	f7fe fd1c 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_1CYCLE_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 8002a2e:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <MX_ADC1_Init+0x220>)
 8002a30:	f240 2119 	movw	r1, #537	; 0x219
 8002a34:	481f      	ldr	r0, [pc, #124]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a36:	f7fe fcd1 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5,
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	4922      	ldr	r1, [pc, #136]	; (8002ac8 <MX_ADC1_Init+0x220>)
 8002a3e:	481d      	ldr	r0, [pc, #116]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a40:	f7fe fd11 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_1CYCLE_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8002a44:	4a21      	ldr	r2, [pc, #132]	; (8002acc <MX_ADC1_Init+0x224>)
 8002a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a4a:	481a      	ldr	r0, [pc, #104]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a4c:	f7fe fcc6 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6,
 8002a50:	2200      	movs	r2, #0
 8002a52:	491e      	ldr	r1, [pc, #120]	; (8002acc <MX_ADC1_Init+0x224>)
 8002a54:	4817      	ldr	r0, [pc, #92]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a56:	f7fe fd06 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_1CYCLE_5);
	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <MX_ADC1_Init+0x228>)
 8002a5c:	f240 1105 	movw	r1, #261	; 0x105
 8002a60:	4814      	ldr	r0, [pc, #80]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a62:	f7fe fcbb 	bl	80013dc <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7,
 8002a66:	2200      	movs	r2, #0
 8002a68:	4919      	ldr	r1, [pc, #100]	; (8002ad0 <MX_ADC1_Init+0x228>)
 8002a6a:	4812      	ldr	r0, [pc, #72]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a6c:	f7fe fcfb 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
			LL_ADC_SAMPLINGTIME_1CYCLE_5);
	/* USER CODE BEGIN ADC1_Init 2 */

	LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8002a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a74:	480f      	ldr	r0, [pc, #60]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a76:	f7fe fce4 	bl	8001442 <LL_ADC_REG_SetDMATransfer>
	/* Khoi dong bo ADC */
	LL_ADC_Enable(ADC1);
 8002a7a:	480e      	ldr	r0, [pc, #56]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a7c:	f7fe fd3c 	bl	80014f8 <LL_ADC_Enable>
	LL_ADC_StartCalibration(ADC1);
 8002a80:	480c      	ldr	r0, [pc, #48]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a82:	f7fe fd48 	bl	8001516 <LL_ADC_StartCalibration>

	/* Cho trang thai cablib duoc bat *
	 *
	 */
	while (LL_ADC_IsCalibrationOnGoing(ADC1))
 8002a86:	bf00      	nop
 8002a88:	480a      	ldr	r0, [pc, #40]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a8a:	f7fe fd53 	bl	8001534 <LL_ADC_IsCalibrationOnGoing>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f9      	bne.n	8002a88 <MX_ADC1_Init+0x1e0>
		;

	/* Bat dau chuyen doi ADC */
	LL_ADC_REG_StartConversionSWStart(ADC1);
 8002a94:	4807      	ldr	r0, [pc, #28]	; (8002ab4 <MX_ADC1_Init+0x20c>)
 8002a96:	f7fe fd5f 	bl	8001558 <LL_ADC_REG_StartConversionSWStart>
	/* USER CODE END ADC1_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	3738      	adds	r7, #56	; 0x38
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40010800 	.word	0x40010800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	20000220 	.word	0x20000220
 8002ab0:	4001244c 	.word	0x4001244c
 8002ab4:	40012400 	.word	0x40012400
 8002ab8:	02300001 	.word	0x02300001
 8002abc:	02600002 	.word	0x02600002
 8002ac0:	02900003 	.word	0x02900003
 8002ac4:	02c00004 	.word	0x02c00004
 8002ac8:	02f00005 	.word	0x02f00005
 8002acc:	03200006 	.word	0x03200006
 8002ad0:	03500007 	.word	0x03500007

08002ad4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 0 */

	/* USER CODE END I2C1_Init 0 */

	LL_I2C_InitTypeDef I2C_InitStruct = { 0 };
 8002ada:	f107 0318 	add.w	r3, r7, #24
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	611a      	str	r2, [r3, #16]
 8002aea:	615a      	str	r2, [r3, #20]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
 8002af8:	611a      	str	r2, [r3, #16]

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002afa:	2008      	movs	r0, #8
 8002afc:	f7fe ffe2 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
	 PB8   ------> I2C1_SCL
	 PB9   ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_9;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <MX_I2C1_Init+0xa4>)
 8002b02:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b04:	2309      	movs	r3, #9
 8002b06:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4819      	ldr	r0, [pc, #100]	; (8002b7c <MX_I2C1_Init+0xa8>)
 8002b16:	f001 fef5 	bl	8004904 <LL_GPIO_Init>

	LL_GPIO_AF_EnableRemap_I2C1();
 8002b1a:	f7ff fb55 	bl	80021c8 <LL_GPIO_AF_EnableRemap_I2C1>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002b1e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b22:	f7fe ffb7 	bl	8001a94 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	/** I2C Initialization
	 */
	LL_I2C_DisableOwnAddress2(I2C1);
 8002b26:	4816      	ldr	r0, [pc, #88]	; (8002b80 <MX_I2C1_Init+0xac>)
 8002b28:	f7fe fec5 	bl	80018b6 <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(I2C1);
 8002b2c:	4814      	ldr	r0, [pc, #80]	; (8002b80 <MX_I2C1_Init+0xac>)
 8002b2e:	f7fe fea1 	bl	8001874 <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(I2C1);
 8002b32:	4813      	ldr	r0, [pc, #76]	; (8002b80 <MX_I2C1_Init+0xac>)
 8002b34:	f7fe fe8f 	bl	8001856 <LL_I2C_EnableClockStretching>
	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
	I2C_InitStruct.ClockSpeed = 100000;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <MX_I2C1_Init+0xb0>)
 8002b3e:	61fb      	str	r3, [r7, #28]
	I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002b40:	2300      	movs	r3, #0
 8002b42:	623b      	str	r3, [r7, #32]
	I2C_InitStruct.OwnAddress1 = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002b4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002b54:	f107 0318 	add.w	r3, r7, #24
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4809      	ldr	r0, [pc, #36]	; (8002b80 <MX_I2C1_Init+0xac>)
 8002b5c:	f002 f81e 	bl	8004b9c <LL_I2C_Init>
	LL_I2C_SetOwnAddress2(I2C1, 0);
 8002b60:	2100      	movs	r1, #0
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <MX_I2C1_Init+0xac>)
 8002b64:	f7fe fe95 	bl	8001892 <LL_I2C_SetOwnAddress2>
	/* USER CODE BEGIN I2C1_Init 2 */
	LL_I2C_Enable(I2C1);
 8002b68:	4805      	ldr	r0, [pc, #20]	; (8002b80 <MX_I2C1_Init+0xac>)
 8002b6a:	f7fe fe65 	bl	8001838 <LL_I2C_Enable>

	/* USER CODE END I2C1_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	3730      	adds	r7, #48	; 0x30
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	04030003 	.word	0x04030003
 8002b7c:	40010c00 	.word	0x40010c00
 8002b80:	40005400 	.word	0x40005400
 8002b84:	000186a0 	.word	0x000186a0

08002b88 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b098      	sub	sp, #96	; 0x60
 8002b8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8002b8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8002b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 fd60 	bl	800566c <memset>
	LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = { 0 };
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
 8002bbc:	615a      	str	r2, [r3, #20]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002bcc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002bd0:	f7fe ff78 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	TIM_InitStruct.Prescaler = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	653b      	str	r3, [r7, #80]	; 0x50
	TIM_InitStruct.Autoreload = 7199;
 8002bde:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002be2:	657b      	str	r3, [r7, #84]	; 0x54
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002be4:	2300      	movs	r3, #0
 8002be6:	65bb      	str	r3, [r7, #88]	; 0x58
	TIM_InitStruct.RepetitionCounter = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002bee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	483c      	ldr	r0, [pc, #240]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002bf6:	f002 f979 	bl	8004eec <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM1);
 8002bfa:	483b      	ldr	r0, [pc, #236]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002bfc:	f7fe ffa9 	bl	8001b52 <LL_TIM_DisableARRPreload>
	LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002c00:	2101      	movs	r1, #1
 8002c02:	4839      	ldr	r0, [pc, #228]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002c04:	f7ff f804 	bl	8001c10 <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002c08:	2360      	movs	r3, #96	; 0x60
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	637b      	str	r3, [r7, #52]	; 0x34
	TIM_OC_InitStruct.CompareValue = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	643b      	str	r3, [r7, #64]	; 0x40
	TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	647b      	str	r3, [r7, #68]	; 0x44
	TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2101      	movs	r1, #1
 8002c30:	482d      	ldr	r0, [pc, #180]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002c32:	f002 f9b9 	bl	8004fa8 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002c36:	2101      	movs	r1, #1
 8002c38:	482b      	ldr	r0, [pc, #172]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002c3a:	f7fe ffa7 	bl	8001b8c <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c42:	4829      	ldr	r0, [pc, #164]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002c44:	f7fe ffe4 	bl	8001c10 <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
	LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c54:	461a      	mov	r2, r3
 8002c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c5a:	4823      	ldr	r0, [pc, #140]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002c5c:	f002 f9a4 	bl	8004fa8 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c64:	4820      	ldr	r0, [pc, #128]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002c66:	f7fe ff91 	bl	8001b8c <LL_TIM_OC_DisableFast>
	LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	481e      	ldr	r0, [pc, #120]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002c6e:	f7ff f999 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM1);
 8002c72:	481d      	ldr	r0, [pc, #116]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002c74:	f7ff f9a8 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
	TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
	TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
	TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
	TIM_BDTRInitStruct.DeadTime = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3020 	strb.w	r3, [r7, #32]
	TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	847b      	strh	r3, [r7, #34]	; 0x22
	TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
	LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002ca0:	f002 f9ba 	bl	8005018 <LL_TIM_BDTR_Init>
	/* USER CODE BEGIN TIM1_Init 2 */
	LL_TIM_EnableIT_UPDATE(TIM1);
 8002ca4:	4810      	ldr	r0, [pc, #64]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002ca6:	f7ff f9c7 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_SetCounter(TIM1, 0);
 8002caa:	2100      	movs	r1, #0
 8002cac:	480e      	ldr	r0, [pc, #56]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002cae:	f7fe ff5f 	bl	8001b70 <LL_TIM_SetCounter>
	LL_TIM_EnableAllOutputs(TIM1);
 8002cb2:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002cb4:	f7ff f997 	bl	8001fe6 <LL_TIM_EnableAllOutputs>
	LL_TIM_EnableCounter(TIM1);
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <MX_TIM1_Init+0x160>)
 8002cba:	f7fe ff3b 	bl	8001b34 <LL_TIM_EnableCounter>

	/* USER CODE END TIM1_Init 2 */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002cbe:	2004      	movs	r0, #4
 8002cc0:	f7fe ff00 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	/**TIM1 GPIO Configuration
	 PA8   ------> TIM1_CH1
	 PA10   ------> TIM1_CH3
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8 | LL_GPIO_PIN_10;
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <MX_TIM1_Init+0x164>)
 8002cc6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002cc8:	2309      	movs	r3, #9
 8002cca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_TIM1_Init+0x168>)
 8002cda:	f001 fe13 	bl	8004904 <LL_GPIO_Init>

}
 8002cde:	bf00      	nop
 8002ce0:	3760      	adds	r7, #96	; 0x60
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	04050005 	.word	0x04050005
 8002cf0:	40010800 	.word	0x40010800

08002cf4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7fe febb 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002d1e:	2004      	movs	r0, #4
 8002d20:	f7fe fed0 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002d24:	2008      	movs	r0, #8
 8002d26:	f7fe fecd 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	/**TIM2 GPIO Configuration
	 PA15   ------> TIM2_CH1
	 PB3   ------> TIM2_CH2
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <MX_TIM2_Init+0x154>)
 8002d2c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002d2e:	2304      	movs	r3, #4
 8002d30:	607b      	str	r3, [r7, #4]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	463b      	mov	r3, r7
 8002d34:	4619      	mov	r1, r3
 8002d36:	4845      	ldr	r0, [pc, #276]	; (8002e4c <MX_TIM2_Init+0x158>)
 8002d38:	f001 fde4 	bl	8004904 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002d3c:	f640 0308 	movw	r3, #2056	; 0x808
 8002d40:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002d42:	2304      	movs	r3, #4
 8002d44:	607b      	str	r3, [r7, #4]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d46:	463b      	mov	r3, r7
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4841      	ldr	r0, [pc, #260]	; (8002e50 <MX_TIM2_Init+0x15c>)
 8002d4c:	f001 fdda 	bl	8004904 <LL_GPIO_Init>

	/* TIM2 interrupt Init */
	NVIC_SetPriority(TIM2_IRQn,
 8002d50:	f7fe fabe 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2200      	movs	r2, #0
 8002d58:	2102      	movs	r1, #2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fb0c 	bl	8001378 <NVIC_EncodePriority>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4619      	mov	r1, r3
 8002d64:	201c      	movs	r0, #28
 8002d66:	f7fe fadd 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 0));
	NVIC_EnableIRQ(TIM2_IRQn);
 8002d6a:	201c      	movs	r0, #28
 8002d6c:	f7fe fabe 	bl	80012ec <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM2_Init 1 */
	LL_GPIO_AF_EnableRemap_TIM2();
 8002d70:	f7ff fa4a 	bl	8002208 <LL_GPIO_AF_EnableRemap_TIM2>
	/* USER CODE END TIM2_Init 1 */
	LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8002d74:	2103      	movs	r1, #3
 8002d76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d7a:	f7ff f901 	bl	8001f80 <LL_TIM_SetEncoderMode>
	LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1,
 8002d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d82:	2101      	movs	r1, #1
 8002d84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d88:	f7fe ffc6 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
			LL_TIM_ACTIVEINPUT_DIRECTTI);
	LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2101      	movs	r1, #1
 8002d90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d94:	f7ff f80a 	bl	8001dac <LL_TIM_IC_SetPrescaler>
	LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002da0:	f7ff f84e 	bl	8001e40 <LL_TIM_IC_SetFilter>
	LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002da4:	2200      	movs	r2, #0
 8002da6:	2101      	movs	r1, #1
 8002da8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dac:	f7ff f892 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
	LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2,
 8002db0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002db4:	2110      	movs	r1, #16
 8002db6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dba:	f7fe ffad 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
			LL_TIM_ACTIVEINPUT_DIRECTTI);
	LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dc6:	f7fe fff1 	bl	8001dac <LL_TIM_IC_SetPrescaler>
	LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2110      	movs	r1, #16
 8002dce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dd2:	f7ff f835 	bl	8001e40 <LL_TIM_IC_SetFilter>
	LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2110      	movs	r1, #16
 8002dda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dde:	f7ff f879 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
	TIM_InitStruct.Prescaler = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	82bb      	strh	r3, [r7, #20]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.Autoreload = 65535;
 8002dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dee:	61fb      	str	r3, [r7, #28]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	623b      	str	r3, [r7, #32]
	LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dfe:	f002 f875 	bl	8004eec <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM2);
 8002e02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e06:	f7fe fea4 	bl	8001b52 <LL_TIM_DisableARRPreload>
	LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e10:	f7ff f8c8 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM2);
 8002e14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e18:	f7ff f8d6 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM2_Init 2 */
	//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
	//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
	LL_TIM_SetCounter(TIM2, 0);
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e22:	f7fe fea5 	bl	8001b70 <LL_TIM_SetCounter>
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8002e26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e2a:	f7ff f8eb 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(TIM2);
 8002e2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e32:	f7ff f901 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 8002e36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e3a:	f7fe fe7b 	bl	8001b34 <LL_TIM_EnableCounter>
	/* USER CODE END TIM2_Init 2 */

}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	04800080 	.word	0x04800080
 8002e4c:	40010800 	.word	0x40010800
 8002e50:	40010c00 	.word	0x40010c00

08002e54 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8002e5a:	f107 0314 	add.w	r3, r7, #20
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	611a      	str	r2, [r3, #16]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002e6a:	463b      	mov	r3, r7
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002e78:	2002      	movs	r0, #2
 8002e7a:	f7fe fe0b 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002e7e:	2008      	movs	r0, #8
 8002e80:	f7fe fe20 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	/**TIM3 GPIO Configuration
	 PB4   ------> TIM3_CH1
	 PB5   ------> TIM3_CH2
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4 | LL_GPIO_PIN_5;
 8002e84:	f243 0330 	movw	r3, #12336	; 0x3030
 8002e88:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	607b      	str	r3, [r7, #4]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	463b      	mov	r3, r7
 8002e90:	4619      	mov	r1, r3
 8002e92:	4836      	ldr	r0, [pc, #216]	; (8002f6c <MX_TIM3_Init+0x118>)
 8002e94:	f001 fd36 	bl	8004904 <LL_GPIO_Init>

	/* TIM3 interrupt Init */
	NVIC_SetPriority(TIM3_IRQn,
 8002e98:	f7fe fa1a 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fa68 	bl	8001378 <NVIC_EncodePriority>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	201d      	movs	r0, #29
 8002eae:	f7fe fa39 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 0));
	NVIC_EnableIRQ(TIM3_IRQn);
 8002eb2:	201d      	movs	r0, #29
 8002eb4:	f7fe fa1a 	bl	80012ec <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM3_Init 1 */
	LL_GPIO_AF_RemapPartial_TIM3();
 8002eb8:	f7ff f9b6 	bl	8002228 <LL_GPIO_AF_RemapPartial_TIM3>
	/* USER CODE END TIM3_Init 1 */
	LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002ebc:	2103      	movs	r1, #3
 8002ebe:	482c      	ldr	r0, [pc, #176]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002ec0:	f7ff f85e 	bl	8001f80 <LL_TIM_SetEncoderMode>
	LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1,
 8002ec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4829      	ldr	r0, [pc, #164]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002ecc:	f7fe ff24 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
			LL_TIM_ACTIVEINPUT_DIRECTTI);
	LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4826      	ldr	r0, [pc, #152]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002ed6:	f7fe ff69 	bl	8001dac <LL_TIM_IC_SetPrescaler>
	LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2101      	movs	r1, #1
 8002ede:	4824      	ldr	r0, [pc, #144]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002ee0:	f7fe ffae 	bl	8001e40 <LL_TIM_IC_SetFilter>
	LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4821      	ldr	r0, [pc, #132]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002eea:	f7fe fff3 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
	LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2,
 8002eee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	481e      	ldr	r0, [pc, #120]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002ef6:	f7fe ff0f 	bl	8001d18 <LL_TIM_IC_SetActiveInput>
			LL_TIM_ACTIVEINPUT_DIRECTTI);
	LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2110      	movs	r1, #16
 8002efe:	481c      	ldr	r0, [pc, #112]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f00:	f7fe ff54 	bl	8001dac <LL_TIM_IC_SetPrescaler>
	LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002f04:	2200      	movs	r2, #0
 8002f06:	2110      	movs	r1, #16
 8002f08:	4819      	ldr	r0, [pc, #100]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f0a:	f7fe ff99 	bl	8001e40 <LL_TIM_IC_SetFilter>
	LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2110      	movs	r1, #16
 8002f12:	4817      	ldr	r0, [pc, #92]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f14:	f7fe ffde 	bl	8001ed4 <LL_TIM_IC_SetPolarity>
	TIM_InitStruct.Prescaler = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	82bb      	strh	r3, [r7, #20]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
	TIM_InitStruct.Autoreload = 65535;
 8002f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f24:	61fb      	str	r3, [r7, #28]
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480f      	ldr	r0, [pc, #60]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f32:	f001 ffdb 	bl	8004eec <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM3);
 8002f36:	480e      	ldr	r0, [pc, #56]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f38:	f7fe fe0b 	bl	8001b52 <LL_TIM_DisableARRPreload>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	480c      	ldr	r0, [pc, #48]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f40:	f7ff f830 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 8002f44:	480a      	ldr	r0, [pc, #40]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f46:	f7ff f83f 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM3_Init 2 */
	LL_TIM_SetCounter(TIM3, 0);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4808      	ldr	r0, [pc, #32]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f4e:	f7fe fe0f 	bl	8001b70 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM3);
 8002f52:	4807      	ldr	r0, [pc, #28]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f54:	f7fe fdee 	bl	8001b34 <LL_TIM_EnableCounter>
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002f58:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f5a:	f7ff f853 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(TIM3);
 8002f5e:	4804      	ldr	r0, [pc, #16]	; (8002f70 <MX_TIM3_Init+0x11c>)
 8002f60:	f7ff f86a 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
	/* USER CODE END TIM3_Init 2 */

}
 8002f64:	bf00      	nop
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40010c00 	.word	0x40010c00
 8002f70:	40000400 	.word	0x40000400

08002f74 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	; 0x38
 8002f78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8002f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
 8002f88:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f002 fb6b 	bl	800566c <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002f96:	2004      	movs	r0, #4
 8002f98:	f7fe fd7c 	bl	8001a94 <LL_APB1_GRP1_EnableClock>

	/* TIM4 interrupt Init */
	NVIC_SetPriority(TIM4_IRQn,
 8002f9c:	f7fe f998 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f9e6 	bl	8001378 <NVIC_EncodePriority>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4619      	mov	r1, r3
 8002fb0:	201e      	movs	r0, #30
 8002fb2:	f7fe f9b7 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(TIM4_IRQn);
 8002fb6:	201e      	movs	r0, #30
 8002fb8:	f7fe f998 	bl	80012ec <__NVIC_EnableIRQ>

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	TIM_InitStruct.Prescaler = 23;
 8002fbc:	2317      	movs	r3, #23
 8002fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_InitStruct.Autoreload = 59999;
 8002fc4:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	482a      	ldr	r0, [pc, #168]	; (8003080 <MX_TIM4_Init+0x10c>)
 8002fd6:	f001 ff89 	bl	8004eec <LL_TIM_Init>
	LL_TIM_DisableARRPreload(TIM4);
 8002fda:	4829      	ldr	r0, [pc, #164]	; (8003080 <MX_TIM4_Init+0x10c>)
 8002fdc:	f7fe fdb9 	bl	8001b52 <LL_TIM_DisableARRPreload>
	LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4827      	ldr	r0, [pc, #156]	; (8003080 <MX_TIM4_Init+0x10c>)
 8002fe4:	f7fe ffb8 	bl	8001f58 <LL_TIM_SetClockSource>
	LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4825      	ldr	r0, [pc, #148]	; (8003080 <MX_TIM4_Init+0x10c>)
 8002fec:	f7fe fe10 	bl	8001c10 <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002ff0:	2360      	movs	r3, #96	; 0x60
 8002ff2:	607b      	str	r3, [r7, #4]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
	TIM_OC_InitStruct.CompareValue = 4500;
 8002ffc:	f241 1394 	movw	r3, #4500	; 0x1194
 8003000:	613b      	str	r3, [r7, #16]
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
	LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	461a      	mov	r2, r3
 800300a:	2101      	movs	r1, #1
 800300c:	481c      	ldr	r0, [pc, #112]	; (8003080 <MX_TIM4_Init+0x10c>)
 800300e:	f001 ffcb 	bl	8004fa8 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8003012:	2101      	movs	r1, #1
 8003014:	481a      	ldr	r0, [pc, #104]	; (8003080 <MX_TIM4_Init+0x10c>)
 8003016:	f7fe fdb9 	bl	8001b8c <LL_TIM_OC_DisableFast>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
	LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003026:	1d3b      	adds	r3, r7, #4
 8003028:	461a      	mov	r2, r3
 800302a:	2110      	movs	r1, #16
 800302c:	4814      	ldr	r0, [pc, #80]	; (8003080 <MX_TIM4_Init+0x10c>)
 800302e:	f001 ffbb 	bl	8004fa8 <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8003032:	2110      	movs	r1, #16
 8003034:	4812      	ldr	r0, [pc, #72]	; (8003080 <MX_TIM4_Init+0x10c>)
 8003036:	f7fe fda9 	bl	8001b8c <LL_TIM_OC_DisableFast>
	LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800303a:	2100      	movs	r1, #0
 800303c:	4810      	ldr	r0, [pc, #64]	; (8003080 <MX_TIM4_Init+0x10c>)
 800303e:	f7fe ffb1 	bl	8001fa4 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM4);
 8003042:	480f      	ldr	r0, [pc, #60]	; (8003080 <MX_TIM4_Init+0x10c>)
 8003044:	f7fe ffc0 	bl	8001fc8 <LL_TIM_DisableMasterSlaveMode>
	LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8003048:	2101      	movs	r1, #1
 800304a:	480d      	ldr	r0, [pc, #52]	; (8003080 <MX_TIM4_Init+0x10c>)
 800304c:	f7fe fe22 	bl	8001c94 <LL_TIM_OC_DisablePreload>
	/* USER CODE BEGIN TIM4_Init 2 */

	LL_TIM_EnableIT_UPDATE(TIM4);
 8003050:	480b      	ldr	r0, [pc, #44]	; (8003080 <MX_TIM4_Init+0x10c>)
 8003052:	f7fe fff1 	bl	8002038 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM4);
 8003056:	480a      	ldr	r0, [pc, #40]	; (8003080 <MX_TIM4_Init+0x10c>)
 8003058:	f7fe ffd4 	bl	8002004 <LL_TIM_ClearFlag_UPDATE>

	LL_TIM_EnableIT_CC1(TIM4);
 800305c:	4808      	ldr	r0, [pc, #32]	; (8003080 <MX_TIM4_Init+0x10c>)
 800305e:	f7fe fffa 	bl	8002056 <LL_TIM_EnableIT_CC1>
	LL_TIM_ClearFlag_CC1(TIM4);
 8003062:	4807      	ldr	r0, [pc, #28]	; (8003080 <MX_TIM4_Init+0x10c>)
 8003064:	f7fe ffdb 	bl	800201e <LL_TIM_ClearFlag_CC1>

//  LL_TIM_EnableIT_CC2(TIM4);
//  LL_TIM_ClearFlag_CC2(TIM4);

	LL_TIM_SetCounter(TIM4, 0);
 8003068:	2100      	movs	r1, #0
 800306a:	4805      	ldr	r0, [pc, #20]	; (8003080 <MX_TIM4_Init+0x10c>)
 800306c:	f7fe fd80 	bl	8001b70 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM4);
 8003070:	4803      	ldr	r0, [pc, #12]	; (8003080 <MX_TIM4_Init+0x10c>)
 8003072:	f7fe fd5f 	bl	8001b34 <LL_TIM_EnableCounter>

	/* USER CODE END TIM4_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	3738      	adds	r7, #56	; 0x38
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40000800 	.word	0x40000800

08003084 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	; 0x30
 8003088:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 800308a:	f107 0314 	add.w	r3, r7, #20
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	611a      	str	r2, [r3, #16]
 800309a:	615a      	str	r2, [r3, #20]
 800309c:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800309e:	463b      	mov	r3, r7
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80030ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030b0:	f7fe fd08 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80030b4:	2008      	movs	r0, #8
 80030b6:	f7fe fd05 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	/**USART1 GPIO Configuration
	 PB6   ------> USART1_TX
	 PB7   ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80030ba:	f244 0340 	movw	r3, #16448	; 0x4040
 80030be:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80030c0:	2309      	movs	r3, #9
 80030c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80030c4:	2303      	movs	r3, #3
 80030c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030cc:	463b      	mov	r3, r7
 80030ce:	4619      	mov	r1, r3
 80030d0:	4816      	ldr	r0, [pc, #88]	; (800312c <MX_USART1_UART_Init+0xa8>)
 80030d2:	f001 fc17 	bl	8004904 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80030d6:	f248 0380 	movw	r3, #32896	; 0x8080
 80030da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80030dc:	2304      	movs	r3, #4
 80030de:	607b      	str	r3, [r7, #4]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e0:	463b      	mov	r3, r7
 80030e2:	4619      	mov	r1, r3
 80030e4:	4811      	ldr	r0, [pc, #68]	; (800312c <MX_USART1_UART_Init+0xa8>)
 80030e6:	f001 fc0d 	bl	8004904 <LL_GPIO_Init>

	LL_GPIO_AF_EnableRemap_USART1();
 80030ea:	f7ff f87d 	bl	80021e8 <LL_GPIO_AF_EnableRemap_USART1>

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 80030ee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80030f2:	617b      	str	r3, [r7, #20]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	623b      	str	r3, [r7, #32]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX;
 8003100:	2308      	movs	r3, #8
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003104:	2300      	movs	r3, #0
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003108:	2300      	movs	r3, #0
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_USART_Init(USART1, &USART_InitStruct);
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4619      	mov	r1, r3
 8003112:	4807      	ldr	r0, [pc, #28]	; (8003130 <MX_USART1_UART_Init+0xac>)
 8003114:	f002 f9ea 	bl	80054ec <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 8003118:	4805      	ldr	r0, [pc, #20]	; (8003130 <MX_USART1_UART_Init+0xac>)
 800311a:	f7fe ffba 	bl	8002092 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 800311e:	4804      	ldr	r0, [pc, #16]	; (8003130 <MX_USART1_UART_Init+0xac>)
 8003120:	f7fe ffa8 	bl	8002074 <LL_USART_Enable>
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003124:	bf00      	nop
 8003126:	3730      	adds	r7, #48	; 0x30
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40010c00 	.word	0x40010c00
 8003130:	40013800 	.word	0x40013800

08003134 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0

	/* Init with LL driver */
	/* DMA controller clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003138:	2001      	movs	r0, #1
 800313a:	f7fe fc93 	bl	8001a64 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA1_Channel1_IRQn,
 800313e:	f7fe f8c7 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8003142:	4603      	mov	r3, r0
 8003144:	2200      	movs	r2, #0
 8003146:	2101      	movs	r1, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe f915 	bl	8001378 <NVIC_EncodePriority>
 800314e:	4603      	mov	r3, r0
 8003150:	4619      	mov	r1, r3
 8003152:	200b      	movs	r0, #11
 8003154:	f7fe f8e6 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003158:	200b      	movs	r0, #11
 800315a:	f7fe f8c7 	bl	80012ec <__NVIC_EnableIRQ>

}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
	LL_EXTI_InitTypeDef EXTI_InitStruct = { 0 };
 800316a:	f107 0318 	add.w	r3, r7, #24
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	60da      	str	r2, [r3, #12]
 8003180:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003182:	2010      	movs	r0, #16
 8003184:	f7fe fc9e 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003188:	2020      	movs	r0, #32
 800318a:	f7fe fc9b 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800318e:	2004      	movs	r0, #4
 8003190:	f7fe fc98 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003194:	2008      	movs	r0, #8
 8003196:	f7fe fc95 	bl	8001ac4 <LL_APB2_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOC, Debug_Led_Pin | Debug_GPIO_Pin);
 800319a:	4959      	ldr	r1, [pc, #356]	; (8003300 <MX_GPIO_Init+0x19c>)
 800319c:	4859      	ldr	r0, [pc, #356]	; (8003304 <MX_GPIO_Init+0x1a0>)
 800319e:	f7ff f804 	bl	80021aa <LL_GPIO_ResetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80031a2:	4959      	ldr	r1, [pc, #356]	; (8003308 <MX_GPIO_Init+0x1a4>)
 80031a4:	4859      	ldr	r0, [pc, #356]	; (800330c <MX_GPIO_Init+0x1a8>)
 80031a6:	f7ff f800 	bl	80021aa <LL_GPIO_ResetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9 | LL_GPIO_PIN_11);
 80031aa:	4959      	ldr	r1, [pc, #356]	; (8003310 <MX_GPIO_Init+0x1ac>)
 80031ac:	4859      	ldr	r0, [pc, #356]	; (8003314 <MX_GPIO_Init+0x1b0>)
 80031ae:	f7fe fffc 	bl	80021aa <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = Debug_Led_Pin;
 80031b2:	4b59      	ldr	r3, [pc, #356]	; (8003318 <MX_GPIO_Init+0x1b4>)
 80031b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031b6:	2301      	movs	r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80031ba:	2302      	movs	r3, #2
 80031bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(Debug_Led_GPIO_Port, &GPIO_InitStruct);
 80031c2:	1d3b      	adds	r3, r7, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	484f      	ldr	r0, [pc, #316]	; (8003304 <MX_GPIO_Init+0x1a0>)
 80031c8:	f001 fb9c 	bl	8004904 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = Debug_GPIO_Pin;
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <MX_GPIO_Init+0x1b8>)
 80031ce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031d0:	2301      	movs	r3, #1
 80031d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80031d4:	2303      	movs	r3, #3
 80031d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(Debug_GPIO_GPIO_Port, &GPIO_InitStruct);
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	4619      	mov	r1, r3
 80031e0:	4848      	ldr	r0, [pc, #288]	; (8003304 <MX_GPIO_Init+0x1a0>)
 80031e2:	f001 fb8f 	bl	8004904 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = Distance_Pin;
 80031e6:	f240 1301 	movw	r3, #257	; 0x101
 80031ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80031ec:	2308      	movs	r3, #8
 80031ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80031f0:	2301      	movs	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(Distance_GPIO_Port, &GPIO_InitStruct);
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	4619      	mov	r1, r3
 80031f8:	4844      	ldr	r0, [pc, #272]	; (800330c <MX_GPIO_Init+0x1a8>)
 80031fa:	f001 fb83 	bl	8004904 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80031fe:	4b42      	ldr	r3, [pc, #264]	; (8003308 <MX_GPIO_Init+0x1a4>)
 8003200:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003202:	2301      	movs	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003206:	2303      	movs	r3, #3
 8003208:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	4619      	mov	r1, r3
 8003212:	483e      	ldr	r0, [pc, #248]	; (800330c <MX_GPIO_Init+0x1a8>)
 8003214:	f001 fb76 	bl	8004904 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003218:	4b41      	ldr	r3, [pc, #260]	; (8003320 <MX_GPIO_Init+0x1bc>)
 800321a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800321c:	2301      	movs	r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003220:	2302      	movs	r3, #2
 8003222:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	4619      	mov	r1, r3
 800322c:	4839      	ldr	r0, [pc, #228]	; (8003314 <MX_GPIO_Init+0x1b0>)
 800322e:	f001 fb69 	bl	8004904 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003232:	4b3c      	ldr	r3, [pc, #240]	; (8003324 <MX_GPIO_Init+0x1c0>)
 8003234:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003236:	2301      	movs	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800323a:	2303      	movs	r3, #3
 800323c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4833      	ldr	r0, [pc, #204]	; (8003314 <MX_GPIO_Init+0x1b0>)
 8003248:	f001 fb5c 	bl	8004904 <LL_GPIO_Init>

	/**/
	LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 800324c:	4936      	ldr	r1, [pc, #216]	; (8003328 <MX_GPIO_Init+0x1c4>)
 800324e:	2001      	movs	r0, #1
 8003250:	f7ff f812 	bl	8002278 <LL_GPIO_AF_SetEXTISource>

	/**/
	LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 8003254:	4935      	ldr	r1, [pc, #212]	; (800332c <MX_GPIO_Init+0x1c8>)
 8003256:	2001      	movs	r0, #1
 8003258:	f7ff f80e 	bl	8002278 <LL_GPIO_AF_SetEXTISource>

	/**/
	LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 800325c:	4934      	ldr	r1, [pc, #208]	; (8003330 <MX_GPIO_Init+0x1cc>)
 800325e:	2001      	movs	r0, #1
 8003260:	f7ff f80a 	bl	8002278 <LL_GPIO_AF_SetEXTISource>

	/**/
	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8003264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003268:	61bb      	str	r3, [r7, #24]
	EXTI_InitStruct.LineCommand = ENABLE;
 800326a:	2301      	movs	r3, #1
 800326c:	773b      	strb	r3, [r7, #28]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800326e:	2300      	movs	r3, #0
 8003270:	777b      	strb	r3, [r7, #29]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003272:	2301      	movs	r3, #1
 8003274:	77bb      	strb	r3, [r7, #30]
	LL_EXTI_Init(&EXTI_InitStruct);
 8003276:	f107 0318 	add.w	r3, r7, #24
 800327a:	4618      	mov	r0, r3
 800327c:	f001 fa0e 	bl	800469c <LL_EXTI_Init>

	/**/
	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8003280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003284:	61bb      	str	r3, [r7, #24]
	EXTI_InitStruct.LineCommand = ENABLE;
 8003286:	2301      	movs	r3, #1
 8003288:	773b      	strb	r3, [r7, #28]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800328a:	2300      	movs	r3, #0
 800328c:	777b      	strb	r3, [r7, #29]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800328e:	2301      	movs	r3, #1
 8003290:	77bb      	strb	r3, [r7, #30]
	LL_EXTI_Init(&EXTI_InitStruct);
 8003292:	f107 0318 	add.w	r3, r7, #24
 8003296:	4618      	mov	r0, r3
 8003298:	f001 fa00 	bl	800469c <LL_EXTI_Init>

	/**/
	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800329c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032a0:	61bb      	str	r3, [r7, #24]
	EXTI_InitStruct.LineCommand = ENABLE;
 80032a2:	2301      	movs	r3, #1
 80032a4:	773b      	strb	r3, [r7, #28]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80032a6:	2300      	movs	r3, #0
 80032a8:	777b      	strb	r3, [r7, #29]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80032aa:	2301      	movs	r3, #1
 80032ac:	77bb      	strb	r3, [r7, #30]
	LL_EXTI_Init(&EXTI_InitStruct);
 80032ae:	f107 0318 	add.w	r3, r7, #24
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 f9f2 	bl	800469c <LL_EXTI_Init>

	/**/
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 80032b8:	2204      	movs	r2, #4
 80032ba:	491e      	ldr	r1, [pc, #120]	; (8003334 <MX_GPIO_Init+0x1d0>)
 80032bc:	4813      	ldr	r0, [pc, #76]	; (800330c <MX_GPIO_Init+0x1a8>)
 80032be:	f7fe ff1d 	bl	80020fc <LL_GPIO_SetPinMode>

	/**/
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 80032c2:	2204      	movs	r2, #4
 80032c4:	4914      	ldr	r1, [pc, #80]	; (8003318 <MX_GPIO_Init+0x1b4>)
 80032c6:	4811      	ldr	r0, [pc, #68]	; (800330c <MX_GPIO_Init+0x1a8>)
 80032c8:	f7fe ff18 	bl	80020fc <LL_GPIO_SetPinMode>

	/**/
	LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 80032cc:	2204      	movs	r2, #4
 80032ce:	4913      	ldr	r1, [pc, #76]	; (800331c <MX_GPIO_Init+0x1b8>)
 80032d0:	480e      	ldr	r0, [pc, #56]	; (800330c <MX_GPIO_Init+0x1a8>)
 80032d2:	f7fe ff13 	bl	80020fc <LL_GPIO_SetPinMode>

	/* EXTI interrupt init*/
	NVIC_SetPriority(EXTI15_10_IRQn,
 80032d6:	f7fd fffb 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 80032da:	4603      	mov	r3, r0
 80032dc:	2200      	movs	r2, #0
 80032de:	2102      	movs	r1, #2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe f849 	bl	8001378 <NVIC_EncodePriority>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4619      	mov	r1, r3
 80032ea:	2028      	movs	r0, #40	; 0x28
 80032ec:	f7fe f81a 	bl	8001324 <__NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 2, 0));
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032f0:	2028      	movs	r0, #40	; 0x28
 80032f2:	f7fd fffb 	bl	80012ec <__NVIC_EnableIRQ>

}
 80032f6:	bf00      	nop
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	04600060 	.word	0x04600060
 8003304:	40011000 	.word	0x40011000
 8003308:	04800080 	.word	0x04800080
 800330c:	40010c00 	.word	0x40010c00
 8003310:	040a000a 	.word	0x040a000a
 8003314:	40010800 	.word	0x40010800
 8003318:	04200020 	.word	0x04200020
 800331c:	04400040 	.word	0x04400040
 8003320:	04020002 	.word	0x04020002
 8003324:	04080008 	.word	0x04080008
 8003328:	000f0003 	.word	0x000f0003
 800332c:	00f00003 	.word	0x00f00003
 8003330:	0f000003 	.word	0x0f000003
 8003334:	04100010 	.word	0x04100010

08003338 <Sensor_Convert_A2D>:
	printf("Done");
	for (int i = 0; i < 8; ++i) {
		Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i]) / 2;
	}
}
void Sensor_Convert_A2D() {
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
	LineDetect = 0;
 800333e:	4b15      	ldr	r3, [pc, #84]	; (8003394 <Sensor_Convert_A2D+0x5c>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; ++i) {
 8003344:	2300      	movs	r3, #0
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	e01c      	b.n	8003384 <Sensor_Convert_A2D+0x4c>
		if (Sensor_ADC_Value[i] < Sensor_Threshold[i]) {
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <Sensor_Convert_A2D+0x60>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003352:	b29a      	uxth	r2, r3
 8003354:	4911      	ldr	r1, [pc, #68]	; (800339c <Sensor_Convert_A2D+0x64>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800335c:	429a      	cmp	r2, r3
 800335e:	d20e      	bcs.n	800337e <Sensor_Convert_A2D+0x46>
			sbi(LineDetect, (7 - i));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2201      	movs	r2, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	b25a      	sxtb	r2, r3
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <Sensor_Convert_A2D+0x5c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	b25b      	sxtb	r3, r3
 8003374:	4313      	orrs	r3, r2
 8003376:	b25b      	sxtb	r3, r3
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <Sensor_Convert_A2D+0x5c>)
 800337c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; ++i) {
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3301      	adds	r3, #1
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b07      	cmp	r3, #7
 8003388:	dddf      	ble.n	800334a <Sensor_Convert_A2D+0x12>
			//			  printf("1 ");
		}
	};
	//	printf("\n");
	//	LL_mDelay(500);
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	20000205 	.word	0x20000205
 8003398:	20000220 	.word	0x20000220
 800339c:	20000000 	.word	0x20000000

080033a0 <Car_DiThang_Process>:
		Servo_SetAngle(ServoAngle);
		printf("Servo Angle: %g \n", ServoAngle);
	}
}

void Car_DiThang_Process() {
 80033a0:	b598      	push	{r3, r4, r7, lr}
 80033a2:	af00      	add	r7, sp, #0
	switch (LineDetect) {
 80033a4:	4b38      	ldr	r3, [pc, #224]	; (8003488 <Car_DiThang_Process+0xe8>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b1c      	cmp	r3, #28
 80033aa:	d004      	beq.n	80033b6 <Car_DiThang_Process+0x16>
 80033ac:	2b38      	cmp	r3, #56	; 0x38
 80033ae:	d01f      	beq.n	80033f0 <Car_DiThang_Process+0x50>
 80033b0:	2b18      	cmp	r3, #24
 80033b2:	d03b      	beq.n	800342c <Car_DiThang_Process+0x8c>
		MotorL_SetPWM(MaxSpeed);
		MotorR_SetPWM(MaxSpeed * 0.998);
		Servo_SetAngle(0);
		break;
	}
}
 80033b4:	e058      	b.n	8003468 <Car_DiThang_Process+0xc8>
		MotorL_SetPWM(MaxSpeed);
 80033b6:	4b35      	ldr	r3, [pc, #212]	; (800348c <Car_DiThang_Process+0xec>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd feb6 	bl	800112c <MotorL_SetPWM>
		MotorR_SetPWM(MaxSpeed * 0.95);
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <Car_DiThang_Process+0xec>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f81d 	bl	8000404 <__aeabi_i2d>
 80033ca:	a329      	add	r3, pc, #164	; (adr r3, 8003470 <Car_DiThang_Process+0xd0>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd f882 	bl	80004d8 <__aeabi_dmul>
 80033d4:	4603      	mov	r3, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	4618      	mov	r0, r3
 80033da:	4621      	mov	r1, r4
 80033dc:	f7fd fb2c 	bl	8000a38 <__aeabi_d2iz>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd feda 	bl	800119c <MotorR_SetPWM>
		Servo_SetAngle(-2.5);
 80033e8:	4829      	ldr	r0, [pc, #164]	; (8003490 <Car_DiThang_Process+0xf0>)
 80033ea:	f7fd ff0f 	bl	800120c <Servo_SetAngle>
		break;
 80033ee:	e03b      	b.n	8003468 <Car_DiThang_Process+0xc8>
		MotorR_SetPWM(MaxSpeed);
 80033f0:	4b26      	ldr	r3, [pc, #152]	; (800348c <Car_DiThang_Process+0xec>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fed1 	bl	800119c <MotorR_SetPWM>
		MotorL_SetPWM(MaxSpeed * 0.995);
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <Car_DiThang_Process+0xec>)
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd f800 	bl	8000404 <__aeabi_i2d>
 8003404:	a31c      	add	r3, pc, #112	; (adr r3, 8003478 <Car_DiThang_Process+0xd8>)
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	f7fd f865 	bl	80004d8 <__aeabi_dmul>
 800340e:	4603      	mov	r3, r0
 8003410:	460c      	mov	r4, r1
 8003412:	4618      	mov	r0, r3
 8003414:	4621      	mov	r1, r4
 8003416:	f7fd fb0f 	bl	8000a38 <__aeabi_d2iz>
 800341a:	4603      	mov	r3, r0
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd fe85 	bl	800112c <MotorL_SetPWM>
		Servo_SetAngle(2);
 8003422:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003426:	f7fd fef1 	bl	800120c <Servo_SetAngle>
		break;
 800342a:	e01d      	b.n	8003468 <Car_DiThang_Process+0xc8>
		MotorL_SetPWM(MaxSpeed);
 800342c:	4b17      	ldr	r3, [pc, #92]	; (800348c <Car_DiThang_Process+0xec>)
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd fe7b 	bl	800112c <MotorL_SetPWM>
		MotorR_SetPWM(MaxSpeed * 0.998);
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <Car_DiThang_Process+0xec>)
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fc ffe2 	bl	8000404 <__aeabi_i2d>
 8003440:	a30f      	add	r3, pc, #60	; (adr r3, 8003480 <Car_DiThang_Process+0xe0>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd f847 	bl	80004d8 <__aeabi_dmul>
 800344a:	4603      	mov	r3, r0
 800344c:	460c      	mov	r4, r1
 800344e:	4618      	mov	r0, r3
 8003450:	4621      	mov	r1, r4
 8003452:	f7fd faf1 	bl	8000a38 <__aeabi_d2iz>
 8003456:	4603      	mov	r3, r0
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fe9f 	bl	800119c <MotorR_SetPWM>
		Servo_SetAngle(0);
 800345e:	f04f 0000 	mov.w	r0, #0
 8003462:	f7fd fed3 	bl	800120c <Servo_SetAngle>
		break;
 8003466:	bf00      	nop
}
 8003468:	bf00      	nop
 800346a:	bd98      	pop	{r3, r4, r7, pc}
 800346c:	f3af 8000 	nop.w
 8003470:	66666666 	.word	0x66666666
 8003474:	3fee6666 	.word	0x3fee6666
 8003478:	3d70a3d7 	.word	0x3d70a3d7
 800347c:	3fefd70a 	.word	0x3fefd70a
 8003480:	b22d0e56 	.word	0xb22d0e56
 8003484:	3fefef9d 	.word	0x3fefef9d
 8003488:	20000205 	.word	0x20000205
 800348c:	20000010 	.word	0x20000010
 8003490:	c0200000 	.word	0xc0200000
 8003494:	00000000 	.word	0x00000000

08003498 <Car_BamLine_Process>:
void Car_BamLine_Process() {
 8003498:	b598      	push	{r3, r4, r7, lr}
 800349a:	af00      	add	r7, sp, #0
	if (CarState == LechTrai) {
 800349c:	4bcc      	ldr	r3, [pc, #816]	; (80037d0 <Car_BamLine_Process+0x338>)
 800349e:	f993 3000 	ldrsb.w	r3, [r3]
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	f040 81c9 	bne.w	800383c <Car_BamLine_Process+0x3a4>
		switch (LineDetect) {
 80034aa:	4bca      	ldr	r3, [pc, #808]	; (80037d4 <Car_BamLine_Process+0x33c>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b07      	cmp	r3, #7
 80034b0:	f000 80fb 	beq.w	80036aa <Car_BamLine_Process+0x212>
 80034b4:	2b07      	cmp	r3, #7
 80034b6:	dc0e      	bgt.n	80034d6 <Car_BamLine_Process+0x3e>
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f000 809e 	beq.w	80035fa <Car_BamLine_Process+0x162>
 80034be:	2b01      	cmp	r3, #1
 80034c0:	dc02      	bgt.n	80034c8 <Car_BamLine_Process+0x30>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d06d      	beq.n	80035a2 <Car_BamLine_Process+0x10a>
			//			  case 0b00011100:
			//				  MotorR_SetPWM(MaxSpeed * 0.95);
			//				  MotorL_SetPWM(MaxSpeed * 1);
			//				  Servo_SetAngle(4);
		}
		return;
 80034c6:	e38a      	b.n	8003bde <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	f000 80c2 	beq.w	8003652 <Car_BamLine_Process+0x1ba>
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	f000 8143 	beq.w	800375a <Car_BamLine_Process+0x2c2>
		return;
 80034d4:	e383      	b.n	8003bde <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 80034d6:	2b0e      	cmp	r3, #14
 80034d8:	f000 8113 	beq.w	8003702 <Car_BamLine_Process+0x26a>
 80034dc:	2b0e      	cmp	r3, #14
 80034de:	dc03      	bgt.n	80034e8 <Car_BamLine_Process+0x50>
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	f000 818d 	beq.w	8003800 <Car_BamLine_Process+0x368>
		return;
 80034e6:	e37a      	b.n	8003bde <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d02e      	beq.n	800354a <Car_BamLine_Process+0xb2>
 80034ec:	2bc0      	cmp	r3, #192	; 0xc0
 80034ee:	d000      	beq.n	80034f2 <Car_BamLine_Process+0x5a>
		return;
 80034f0:	e375      	b.n	8003bde <Car_BamLine_Process+0x746>
			MotorR_SetPWM(MaxSpeed * 0.60);
 80034f2:	4bb9      	ldr	r3, [pc, #740]	; (80037d8 <Car_BamLine_Process+0x340>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fc ff84 	bl	8000404 <__aeabi_i2d>
 80034fc:	a3a6      	add	r3, pc, #664	; (adr r3, 8003798 <Car_BamLine_Process+0x300>)
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f7fc ffe9 	bl	80004d8 <__aeabi_dmul>
 8003506:	4603      	mov	r3, r0
 8003508:	460c      	mov	r4, r1
 800350a:	4618      	mov	r0, r3
 800350c:	4621      	mov	r1, r4
 800350e:	f7fd fa93 	bl	8000a38 <__aeabi_d2iz>
 8003512:	4603      	mov	r3, r0
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd fe41 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.8);
 800351a:	4baf      	ldr	r3, [pc, #700]	; (80037d8 <Car_BamLine_Process+0x340>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fc ff70 	bl	8000404 <__aeabi_i2d>
 8003524:	a39e      	add	r3, pc, #632	; (adr r3, 80037a0 <Car_BamLine_Process+0x308>)
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f7fc ffd5 	bl	80004d8 <__aeabi_dmul>
 800352e:	4603      	mov	r3, r0
 8003530:	460c      	mov	r4, r1
 8003532:	4618      	mov	r0, r3
 8003534:	4621      	mov	r1, r4
 8003536:	f7fd fa7f 	bl	8000a38 <__aeabi_d2iz>
 800353a:	4603      	mov	r3, r0
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fdf5 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(54); // 73
 8003542:	48a6      	ldr	r0, [pc, #664]	; (80037dc <Car_BamLine_Process+0x344>)
 8003544:	f7fd fe62 	bl	800120c <Servo_SetAngle>
			break;
 8003548:	e177      	b.n	800383a <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.65);
 800354a:	4ba3      	ldr	r3, [pc, #652]	; (80037d8 <Car_BamLine_Process+0x340>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fc ff58 	bl	8000404 <__aeabi_i2d>
 8003554:	a394      	add	r3, pc, #592	; (adr r3, 80037a8 <Car_BamLine_Process+0x310>)
 8003556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355a:	f7fc ffbd 	bl	80004d8 <__aeabi_dmul>
 800355e:	4603      	mov	r3, r0
 8003560:	460c      	mov	r4, r1
 8003562:	4618      	mov	r0, r3
 8003564:	4621      	mov	r1, r4
 8003566:	f7fd fa67 	bl	8000a38 <__aeabi_d2iz>
 800356a:	4603      	mov	r3, r0
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd fe15 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.85);
 8003572:	4b99      	ldr	r3, [pc, #612]	; (80037d8 <Car_BamLine_Process+0x340>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc ff44 	bl	8000404 <__aeabi_i2d>
 800357c:	a38c      	add	r3, pc, #560	; (adr r3, 80037b0 <Car_BamLine_Process+0x318>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fc ffa9 	bl	80004d8 <__aeabi_dmul>
 8003586:	4603      	mov	r3, r0
 8003588:	460c      	mov	r4, r1
 800358a:	4618      	mov	r0, r3
 800358c:	4621      	mov	r1, r4
 800358e:	f7fd fa53 	bl	8000a38 <__aeabi_d2iz>
 8003592:	4603      	mov	r3, r0
 8003594:	4618      	mov	r0, r3
 8003596:	f7fd fdc9 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(40); // 64
 800359a:	4891      	ldr	r0, [pc, #580]	; (80037e0 <Car_BamLine_Process+0x348>)
 800359c:	f7fd fe36 	bl	800120c <Servo_SetAngle>
			break;
 80035a0:	e14b      	b.n	800383a <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.65);
 80035a2:	4b8d      	ldr	r3, [pc, #564]	; (80037d8 <Car_BamLine_Process+0x340>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc ff2c 	bl	8000404 <__aeabi_i2d>
 80035ac:	a37e      	add	r3, pc, #504	; (adr r3, 80037a8 <Car_BamLine_Process+0x310>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f7fc ff91 	bl	80004d8 <__aeabi_dmul>
 80035b6:	4603      	mov	r3, r0
 80035b8:	460c      	mov	r4, r1
 80035ba:	4618      	mov	r0, r3
 80035bc:	4621      	mov	r1, r4
 80035be:	f7fd fa3b 	bl	8000a38 <__aeabi_d2iz>
 80035c2:	4603      	mov	r3, r0
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fde9 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.9);
 80035ca:	4b83      	ldr	r3, [pc, #524]	; (80037d8 <Car_BamLine_Process+0x340>)
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ff18 	bl	8000404 <__aeabi_i2d>
 80035d4:	a378      	add	r3, pc, #480	; (adr r3, 80037b8 <Car_BamLine_Process+0x320>)
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f7fc ff7d 	bl	80004d8 <__aeabi_dmul>
 80035de:	4603      	mov	r3, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	4618      	mov	r0, r3
 80035e4:	4621      	mov	r1, r4
 80035e6:	f7fd fa27 	bl	8000a38 <__aeabi_d2iz>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fd9d 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(36); // 59
 80035f2:	487c      	ldr	r0, [pc, #496]	; (80037e4 <Car_BamLine_Process+0x34c>)
 80035f4:	f7fd fe0a 	bl	800120c <Servo_SetAngle>
			break;
 80035f8:	e11f      	b.n	800383a <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.70);
 80035fa:	4b77      	ldr	r3, [pc, #476]	; (80037d8 <Car_BamLine_Process+0x340>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc ff00 	bl	8000404 <__aeabi_i2d>
 8003604:	a36e      	add	r3, pc, #440	; (adr r3, 80037c0 <Car_BamLine_Process+0x328>)
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f7fc ff65 	bl	80004d8 <__aeabi_dmul>
 800360e:	4603      	mov	r3, r0
 8003610:	460c      	mov	r4, r1
 8003612:	4618      	mov	r0, r3
 8003614:	4621      	mov	r1, r4
 8003616:	f7fd fa0f 	bl	8000a38 <__aeabi_d2iz>
 800361a:	4603      	mov	r3, r0
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fdbd 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.9);
 8003622:	4b6d      	ldr	r3, [pc, #436]	; (80037d8 <Car_BamLine_Process+0x340>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fc feec 	bl	8000404 <__aeabi_i2d>
 800362c:	a362      	add	r3, pc, #392	; (adr r3, 80037b8 <Car_BamLine_Process+0x320>)
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f7fc ff51 	bl	80004d8 <__aeabi_dmul>
 8003636:	4603      	mov	r3, r0
 8003638:	460c      	mov	r4, r1
 800363a:	4618      	mov	r0, r3
 800363c:	4621      	mov	r1, r4
 800363e:	f7fd f9fb 	bl	8000a38 <__aeabi_d2iz>
 8003642:	4603      	mov	r3, r0
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fd71 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(28); // 45
 800364a:	4867      	ldr	r0, [pc, #412]	; (80037e8 <Car_BamLine_Process+0x350>)
 800364c:	f7fd fdde 	bl	800120c <Servo_SetAngle>
			break;
 8003650:	e0f3      	b.n	800383a <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.70);
 8003652:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <Car_BamLine_Process+0x340>)
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc fed4 	bl	8000404 <__aeabi_i2d>
 800365c:	a358      	add	r3, pc, #352	; (adr r3, 80037c0 <Car_BamLine_Process+0x328>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f7fc ff39 	bl	80004d8 <__aeabi_dmul>
 8003666:	4603      	mov	r3, r0
 8003668:	460c      	mov	r4, r1
 800366a:	4618      	mov	r0, r3
 800366c:	4621      	mov	r1, r4
 800366e:	f7fd f9e3 	bl	8000a38 <__aeabi_d2iz>
 8003672:	4603      	mov	r3, r0
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fd91 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 800367a:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <Car_BamLine_Process+0x340>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc fec0 	bl	8000404 <__aeabi_i2d>
 8003684:	a350      	add	r3, pc, #320	; (adr r3, 80037c8 <Car_BamLine_Process+0x330>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f7fc ff25 	bl	80004d8 <__aeabi_dmul>
 800368e:	4603      	mov	r3, r0
 8003690:	460c      	mov	r4, r1
 8003692:	4618      	mov	r0, r3
 8003694:	4621      	mov	r1, r4
 8003696:	f7fd f9cf 	bl	8000a38 <__aeabi_d2iz>
 800369a:	4603      	mov	r3, r0
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd fd45 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(25); //33
 80036a2:	4852      	ldr	r0, [pc, #328]	; (80037ec <Car_BamLine_Process+0x354>)
 80036a4:	f7fd fdb2 	bl	800120c <Servo_SetAngle>
			break;
 80036a8:	e0c7      	b.n	800383a <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.75);
 80036aa:	4b4b      	ldr	r3, [pc, #300]	; (80037d8 <Car_BamLine_Process+0x340>)
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc fea8 	bl	8000404 <__aeabi_i2d>
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <Car_BamLine_Process+0x358>)
 80036ba:	f7fc ff0d 	bl	80004d8 <__aeabi_dmul>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	4618      	mov	r0, r3
 80036c4:	4621      	mov	r1, r4
 80036c6:	f7fd f9b7 	bl	8000a38 <__aeabi_d2iz>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fd65 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <Car_BamLine_Process+0x340>)
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc fe94 	bl	8000404 <__aeabi_i2d>
 80036dc:	a33a      	add	r3, pc, #232	; (adr r3, 80037c8 <Car_BamLine_Process+0x330>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f7fc fef9 	bl	80004d8 <__aeabi_dmul>
 80036e6:	4603      	mov	r3, r0
 80036e8:	460c      	mov	r4, r1
 80036ea:	4618      	mov	r0, r3
 80036ec:	4621      	mov	r1, r4
 80036ee:	f7fd f9a3 	bl	8000a38 <__aeabi_d2iz>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd fd19 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(20); // 25
 80036fa:	483e      	ldr	r0, [pc, #248]	; (80037f4 <Car_BamLine_Process+0x35c>)
 80036fc:	f7fd fd86 	bl	800120c <Servo_SetAngle>
			break;
 8003700:	e09b      	b.n	800383a <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.80);
 8003702:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <Car_BamLine_Process+0x340>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fc fe7c 	bl	8000404 <__aeabi_i2d>
 800370c:	a324      	add	r3, pc, #144	; (adr r3, 80037a0 <Car_BamLine_Process+0x308>)
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f7fc fee1 	bl	80004d8 <__aeabi_dmul>
 8003716:	4603      	mov	r3, r0
 8003718:	460c      	mov	r4, r1
 800371a:	4618      	mov	r0, r3
 800371c:	4621      	mov	r1, r4
 800371e:	f7fd f98b 	bl	8000a38 <__aeabi_d2iz>
 8003722:	4603      	mov	r3, r0
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fd39 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.95);
 800372a:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <Car_BamLine_Process+0x340>)
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc fe68 	bl	8000404 <__aeabi_i2d>
 8003734:	a324      	add	r3, pc, #144	; (adr r3, 80037c8 <Car_BamLine_Process+0x330>)
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f7fc fecd 	bl	80004d8 <__aeabi_dmul>
 800373e:	4603      	mov	r3, r0
 8003740:	460c      	mov	r4, r1
 8003742:	4618      	mov	r0, r3
 8003744:	4621      	mov	r1, r4
 8003746:	f7fd f977 	bl	8000a38 <__aeabi_d2iz>
 800374a:	4603      	mov	r3, r0
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fced 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(15); //20
 8003752:	4829      	ldr	r0, [pc, #164]	; (80037f8 <Car_BamLine_Process+0x360>)
 8003754:	f7fd fd5a 	bl	800120c <Servo_SetAngle>
			break;
 8003758:	e06f      	b.n	800383a <Car_BamLine_Process+0x3a2>
			MotorR_SetPWM(MaxSpeed * 0.85);
 800375a:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <Car_BamLine_Process+0x340>)
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc fe50 	bl	8000404 <__aeabi_i2d>
 8003764:	a312      	add	r3, pc, #72	; (adr r3, 80037b0 <Car_BamLine_Process+0x318>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f7fc feb5 	bl	80004d8 <__aeabi_dmul>
 800376e:	4603      	mov	r3, r0
 8003770:	460c      	mov	r4, r1
 8003772:	4618      	mov	r0, r3
 8003774:	4621      	mov	r1, r4
 8003776:	f7fd f95f 	bl	8000a38 <__aeabi_d2iz>
 800377a:	4603      	mov	r3, r0
 800377c:	4618      	mov	r0, r3
 800377e:	f7fd fd0d 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 1);
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <Car_BamLine_Process+0x340>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fcd0 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(13); //-24
 800378c:	481b      	ldr	r0, [pc, #108]	; (80037fc <Car_BamLine_Process+0x364>)
 800378e:	f7fd fd3d 	bl	800120c <Servo_SetAngle>
			break;
 8003792:	e052      	b.n	800383a <Car_BamLine_Process+0x3a2>
 8003794:	f3af 8000 	nop.w
 8003798:	33333333 	.word	0x33333333
 800379c:	3fe33333 	.word	0x3fe33333
 80037a0:	9999999a 	.word	0x9999999a
 80037a4:	3fe99999 	.word	0x3fe99999
 80037a8:	cccccccd 	.word	0xcccccccd
 80037ac:	3fe4cccc 	.word	0x3fe4cccc
 80037b0:	33333333 	.word	0x33333333
 80037b4:	3feb3333 	.word	0x3feb3333
 80037b8:	cccccccd 	.word	0xcccccccd
 80037bc:	3feccccc 	.word	0x3feccccc
 80037c0:	66666666 	.word	0x66666666
 80037c4:	3fe66666 	.word	0x3fe66666
 80037c8:	66666666 	.word	0x66666666
 80037cc:	3fee6666 	.word	0x3fee6666
 80037d0:	20000206 	.word	0x20000206
 80037d4:	20000205 	.word	0x20000205
 80037d8:	20000010 	.word	0x20000010
 80037dc:	42580000 	.word	0x42580000
 80037e0:	42200000 	.word	0x42200000
 80037e4:	42100000 	.word	0x42100000
 80037e8:	41e00000 	.word	0x41e00000
 80037ec:	41c80000 	.word	0x41c80000
 80037f0:	3fe80000 	.word	0x3fe80000
 80037f4:	41a00000 	.word	0x41a00000
 80037f8:	41700000 	.word	0x41700000
 80037fc:	41500000 	.word	0x41500000
			MotorR_SetPWM(MaxSpeed * 0.90);
 8003800:	4bcd      	ldr	r3, [pc, #820]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fdfd 	bl	8000404 <__aeabi_i2d>
 800380a:	a3bb      	add	r3, pc, #748	; (adr r3, 8003af8 <Car_BamLine_Process+0x660>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc fe62 	bl	80004d8 <__aeabi_dmul>
 8003814:	4603      	mov	r3, r0
 8003816:	460c      	mov	r4, r1
 8003818:	4618      	mov	r0, r3
 800381a:	4621      	mov	r1, r4
 800381c:	f7fd f90c 	bl	8000a38 <__aeabi_d2iz>
 8003820:	4603      	mov	r3, r0
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fcba 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 1);
 8003828:	4bc3      	ldr	r3, [pc, #780]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd fc7d 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(10); //10
 8003832:	48c2      	ldr	r0, [pc, #776]	; (8003b3c <Car_BamLine_Process+0x6a4>)
 8003834:	f7fd fcea 	bl	800120c <Servo_SetAngle>
			break;
 8003838:	bf00      	nop
		return;
 800383a:	e1d0      	b.n	8003bde <Car_BamLine_Process+0x746>
	};
	if (CarState == LechPhai) {
 800383c:	4bc0      	ldr	r3, [pc, #768]	; (8003b40 <Car_BamLine_Process+0x6a8>)
 800383e:	f993 3000 	ldrsb.w	r3, [r3]
 8003842:	2b01      	cmp	r3, #1
 8003844:	f040 81cb 	bne.w	8003bde <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003848:	4bbe      	ldr	r3, [pc, #760]	; (8003b44 <Car_BamLine_Process+0x6ac>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	f000 8127 	beq.w	8003aa0 <Car_BamLine_Process+0x608>
 8003852:	2b60      	cmp	r3, #96	; 0x60
 8003854:	dc0c      	bgt.n	8003870 <Car_BamLine_Process+0x3d8>
 8003856:	2b01      	cmp	r3, #1
 8003858:	d046      	beq.n	80038e8 <Car_BamLine_Process+0x450>
 800385a:	2b01      	cmp	r3, #1
 800385c:	dc02      	bgt.n	8003864 <Car_BamLine_Process+0x3cc>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d06e      	beq.n	8003940 <Car_BamLine_Process+0x4a8>
			//			  case 0b00111000:
			//				  MotorL_SetPWM(MaxSpeed * 0.95);
			//				  MotorR_SetPWM(MaxSpeed * 1);
			//				  Servo_SetAngle(-0);
		}
		return;
 8003862:	e1bc      	b.n	8003bde <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003864:	2b03      	cmp	r3, #3
 8003866:	d013      	beq.n	8003890 <Car_BamLine_Process+0x3f8>
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	f000 819a 	beq.w	8003ba2 <Car_BamLine_Process+0x70a>
		return;
 800386e:	e1b6      	b.n	8003bde <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	f000 8091 	beq.w	8003998 <Car_BamLine_Process+0x500>
 8003876:	2b80      	cmp	r3, #128	; 0x80
 8003878:	dc03      	bgt.n	8003882 <Car_BamLine_Process+0x3ea>
 800387a:	2b70      	cmp	r3, #112	; 0x70
 800387c:	f000 8174 	beq.w	8003b68 <Car_BamLine_Process+0x6d0>
		return;
 8003880:	e1ad      	b.n	8003bde <Car_BamLine_Process+0x746>
		switch (LineDetect) {
 8003882:	2bc0      	cmp	r3, #192	; 0xc0
 8003884:	f000 80b4 	beq.w	80039f0 <Car_BamLine_Process+0x558>
 8003888:	2be0      	cmp	r3, #224	; 0xe0
 800388a:	f000 80dd 	beq.w	8003a48 <Car_BamLine_Process+0x5b0>
		return;
 800388e:	e1a6      	b.n	8003bde <Car_BamLine_Process+0x746>
			MotorR_SetPWM(MaxSpeed * 0.55);
 8003890:	4ba9      	ldr	r3, [pc, #676]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fdb5 	bl	8000404 <__aeabi_i2d>
 800389a:	a399      	add	r3, pc, #612	; (adr r3, 8003b00 <Car_BamLine_Process+0x668>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc fe1a 	bl	80004d8 <__aeabi_dmul>
 80038a4:	4603      	mov	r3, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	4618      	mov	r0, r3
 80038aa:	4621      	mov	r1, r4
 80038ac:	f7fd f8c4 	bl	8000a38 <__aeabi_d2iz>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fc72 	bl	800119c <MotorR_SetPWM>
			MotorL_SetPWM(MaxSpeed * 0.70);
 80038b8:	4b9f      	ldr	r3, [pc, #636]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fc fda1 	bl	8000404 <__aeabi_i2d>
 80038c2:	a391      	add	r3, pc, #580	; (adr r3, 8003b08 <Car_BamLine_Process+0x670>)
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f7fc fe06 	bl	80004d8 <__aeabi_dmul>
 80038cc:	4603      	mov	r3, r0
 80038ce:	460c      	mov	r4, r1
 80038d0:	4618      	mov	r0, r3
 80038d2:	4621      	mov	r1, r4
 80038d4:	f7fd f8b0 	bl	8000a38 <__aeabi_d2iz>
 80038d8:	4603      	mov	r3, r0
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fc26 	bl	800112c <MotorL_SetPWM>
			Servo_SetAngle(-54); // -67
 80038e0:	4899      	ldr	r0, [pc, #612]	; (8003b48 <Car_BamLine_Process+0x6b0>)
 80038e2:	f7fd fc93 	bl	800120c <Servo_SetAngle>
			break;
 80038e6:	e179      	b.n	8003bdc <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.60);
 80038e8:	4b93      	ldr	r3, [pc, #588]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fc fd89 	bl	8000404 <__aeabi_i2d>
 80038f2:	a387      	add	r3, pc, #540	; (adr r3, 8003b10 <Car_BamLine_Process+0x678>)
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f7fc fdee 	bl	80004d8 <__aeabi_dmul>
 80038fc:	4603      	mov	r3, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	4618      	mov	r0, r3
 8003902:	4621      	mov	r1, r4
 8003904:	f7fd f898 	bl	8000a38 <__aeabi_d2iz>
 8003908:	4603      	mov	r3, r0
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd fc0e 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.85);
 8003910:	4b89      	ldr	r3, [pc, #548]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fd75 	bl	8000404 <__aeabi_i2d>
 800391a:	a37f      	add	r3, pc, #508	; (adr r3, 8003b18 <Car_BamLine_Process+0x680>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f7fc fdda 	bl	80004d8 <__aeabi_dmul>
 8003924:	4603      	mov	r3, r0
 8003926:	460c      	mov	r4, r1
 8003928:	4618      	mov	r0, r3
 800392a:	4621      	mov	r1, r4
 800392c:	f7fd f884 	bl	8000a38 <__aeabi_d2iz>
 8003930:	4603      	mov	r3, r0
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd fc32 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-40); // -62
 8003938:	4884      	ldr	r0, [pc, #528]	; (8003b4c <Car_BamLine_Process+0x6b4>)
 800393a:	f7fd fc67 	bl	800120c <Servo_SetAngle>
			break;
 800393e:	e14d      	b.n	8003bdc <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.65);
 8003940:	4b7d      	ldr	r3, [pc, #500]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fd5d 	bl	8000404 <__aeabi_i2d>
 800394a:	a375      	add	r3, pc, #468	; (adr r3, 8003b20 <Car_BamLine_Process+0x688>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f7fc fdc2 	bl	80004d8 <__aeabi_dmul>
 8003954:	4603      	mov	r3, r0
 8003956:	460c      	mov	r4, r1
 8003958:	4618      	mov	r0, r3
 800395a:	4621      	mov	r1, r4
 800395c:	f7fd f86c 	bl	8000a38 <__aeabi_d2iz>
 8003960:	4603      	mov	r3, r0
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd fbe2 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.85);
 8003968:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fd49 	bl	8000404 <__aeabi_i2d>
 8003972:	a369      	add	r3, pc, #420	; (adr r3, 8003b18 <Car_BamLine_Process+0x680>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f7fc fdae 	bl	80004d8 <__aeabi_dmul>
 800397c:	4603      	mov	r3, r0
 800397e:	460c      	mov	r4, r1
 8003980:	4618      	mov	r0, r3
 8003982:	4621      	mov	r1, r4
 8003984:	f7fd f858 	bl	8000a38 <__aeabi_d2iz>
 8003988:	4603      	mov	r3, r0
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fc06 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-36); //-52
 8003990:	486f      	ldr	r0, [pc, #444]	; (8003b50 <Car_BamLine_Process+0x6b8>)
 8003992:	f7fd fc3b 	bl	800120c <Servo_SetAngle>
			break;
 8003996:	e121      	b.n	8003bdc <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.70);
 8003998:	4b67      	ldr	r3, [pc, #412]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fc fd31 	bl	8000404 <__aeabi_i2d>
 80039a2:	a359      	add	r3, pc, #356	; (adr r3, 8003b08 <Car_BamLine_Process+0x670>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fc fd96 	bl	80004d8 <__aeabi_dmul>
 80039ac:	4603      	mov	r3, r0
 80039ae:	460c      	mov	r4, r1
 80039b0:	4618      	mov	r0, r3
 80039b2:	4621      	mov	r1, r4
 80039b4:	f7fd f840 	bl	8000a38 <__aeabi_d2iz>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fbb6 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.90);
 80039c0:	4b5d      	ldr	r3, [pc, #372]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fd1d 	bl	8000404 <__aeabi_i2d>
 80039ca:	a34b      	add	r3, pc, #300	; (adr r3, 8003af8 <Car_BamLine_Process+0x660>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fd82 	bl	80004d8 <__aeabi_dmul>
 80039d4:	4603      	mov	r3, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	4618      	mov	r0, r3
 80039da:	4621      	mov	r1, r4
 80039dc:	f7fd f82c 	bl	8000a38 <__aeabi_d2iz>
 80039e0:	4603      	mov	r3, r0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fbda 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-28); //-43
 80039e8:	485a      	ldr	r0, [pc, #360]	; (8003b54 <Car_BamLine_Process+0x6bc>)
 80039ea:	f7fd fc0f 	bl	800120c <Servo_SetAngle>
			break;
 80039ee:	e0f5      	b.n	8003bdc <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.87);
 80039f0:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fc fd05 	bl	8000404 <__aeabi_i2d>
 80039fa:	a34b      	add	r3, pc, #300	; (adr r3, 8003b28 <Car_BamLine_Process+0x690>)
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f7fc fd6a 	bl	80004d8 <__aeabi_dmul>
 8003a04:	4603      	mov	r3, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	f7fd f814 	bl	8000a38 <__aeabi_d2iz>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fb8a 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003a18:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fc fcf1 	bl	8000404 <__aeabi_i2d>
 8003a22:	a343      	add	r3, pc, #268	; (adr r3, 8003b30 <Car_BamLine_Process+0x698>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f7fc fd56 	bl	80004d8 <__aeabi_dmul>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	4618      	mov	r0, r3
 8003a32:	4621      	mov	r1, r4
 8003a34:	f7fd f800 	bl	8000a38 <__aeabi_d2iz>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fbae 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-25); //-35
 8003a40:	4845      	ldr	r0, [pc, #276]	; (8003b58 <Car_BamLine_Process+0x6c0>)
 8003a42:	f7fd fbe3 	bl	800120c <Servo_SetAngle>
			break;
 8003a46:	e0c9      	b.n	8003bdc <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.70);
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fcd9 	bl	8000404 <__aeabi_i2d>
 8003a52:	a32d      	add	r3, pc, #180	; (adr r3, 8003b08 <Car_BamLine_Process+0x670>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fd3e 	bl	80004d8 <__aeabi_dmul>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	4618      	mov	r0, r3
 8003a62:	4621      	mov	r1, r4
 8003a64:	f7fc ffe8 	bl	8000a38 <__aeabi_d2iz>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fb5e 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fc fcc5 	bl	8000404 <__aeabi_i2d>
 8003a7a:	a32d      	add	r3, pc, #180	; (adr r3, 8003b30 <Car_BamLine_Process+0x698>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fc fd2a 	bl	80004d8 <__aeabi_dmul>
 8003a84:	4603      	mov	r3, r0
 8003a86:	460c      	mov	r4, r1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	f7fc ffd4 	bl	8000a38 <__aeabi_d2iz>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd fb82 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-20); //-27
 8003a98:	4830      	ldr	r0, [pc, #192]	; (8003b5c <Car_BamLine_Process+0x6c4>)
 8003a9a:	f7fd fbb7 	bl	800120c <Servo_SetAngle>
			break;
 8003a9e:	e09d      	b.n	8003bdc <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.75);
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003aa2:	881b      	ldrh	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fcad 	bl	8000404 <__aeabi_i2d>
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <Car_BamLine_Process+0x6c8>)
 8003ab0:	f7fc fd12 	bl	80004d8 <__aeabi_dmul>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	4621      	mov	r1, r4
 8003abc:	f7fc ffbc 	bl	8000a38 <__aeabi_d2iz>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fb32 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 0.95);
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <Car_BamLine_Process+0x6a0>)
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc fc99 	bl	8000404 <__aeabi_i2d>
 8003ad2:	a317      	add	r3, pc, #92	; (adr r3, 8003b30 <Car_BamLine_Process+0x698>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fcfe 	bl	80004d8 <__aeabi_dmul>
 8003adc:	4603      	mov	r3, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	f7fc ffa8 	bl	8000a38 <__aeabi_d2iz>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fb56 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-15); //-24
 8003af0:	481c      	ldr	r0, [pc, #112]	; (8003b64 <Car_BamLine_Process+0x6cc>)
 8003af2:	f7fd fb8b 	bl	800120c <Servo_SetAngle>
			break;
 8003af6:	e071      	b.n	8003bdc <Car_BamLine_Process+0x744>
 8003af8:	cccccccd 	.word	0xcccccccd
 8003afc:	3feccccc 	.word	0x3feccccc
 8003b00:	9999999a 	.word	0x9999999a
 8003b04:	3fe19999 	.word	0x3fe19999
 8003b08:	66666666 	.word	0x66666666
 8003b0c:	3fe66666 	.word	0x3fe66666
 8003b10:	33333333 	.word	0x33333333
 8003b14:	3fe33333 	.word	0x3fe33333
 8003b18:	33333333 	.word	0x33333333
 8003b1c:	3feb3333 	.word	0x3feb3333
 8003b20:	cccccccd 	.word	0xcccccccd
 8003b24:	3fe4cccc 	.word	0x3fe4cccc
 8003b28:	3d70a3d7 	.word	0x3d70a3d7
 8003b2c:	3febd70a 	.word	0x3febd70a
 8003b30:	66666666 	.word	0x66666666
 8003b34:	3fee6666 	.word	0x3fee6666
 8003b38:	20000010 	.word	0x20000010
 8003b3c:	41200000 	.word	0x41200000
 8003b40:	20000206 	.word	0x20000206
 8003b44:	20000205 	.word	0x20000205
 8003b48:	c2580000 	.word	0xc2580000
 8003b4c:	c2200000 	.word	0xc2200000
 8003b50:	c2100000 	.word	0xc2100000
 8003b54:	c1e00000 	.word	0xc1e00000
 8003b58:	c1c80000 	.word	0xc1c80000
 8003b5c:	c1a00000 	.word	0xc1a00000
 8003b60:	3fe80000 	.word	0x3fe80000
 8003b64:	c1700000 	.word	0xc1700000
			MotorL_SetPWM(MaxSpeed * 0.85);
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <Car_BamLine_Process+0x758>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fc49 	bl	8000404 <__aeabi_i2d>
 8003b72:	a31b      	add	r3, pc, #108	; (adr r3, 8003be0 <Car_BamLine_Process+0x748>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fcae 	bl	80004d8 <__aeabi_dmul>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	4618      	mov	r0, r3
 8003b82:	4621      	mov	r1, r4
 8003b84:	f7fc ff58 	bl	8000a38 <__aeabi_d2iz>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd face 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 1);
 8003b90:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <Car_BamLine_Process+0x758>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fd fb01 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-13); //-22
 8003b9a:	4816      	ldr	r0, [pc, #88]	; (8003bf4 <Car_BamLine_Process+0x75c>)
 8003b9c:	f7fd fb36 	bl	800120c <Servo_SetAngle>
			break;
 8003ba0:	e01c      	b.n	8003bdc <Car_BamLine_Process+0x744>
			MotorL_SetPWM(MaxSpeed * 0.90);
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <Car_BamLine_Process+0x758>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc fc2c 	bl	8000404 <__aeabi_i2d>
 8003bac:	a30e      	add	r3, pc, #56	; (adr r3, 8003be8 <Car_BamLine_Process+0x750>)
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f7fc fc91 	bl	80004d8 <__aeabi_dmul>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	460c      	mov	r4, r1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	f7fc ff3b 	bl	8000a38 <__aeabi_d2iz>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd fab1 	bl	800112c <MotorL_SetPWM>
			MotorR_SetPWM(MaxSpeed * 1);
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <Car_BamLine_Process+0x758>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fd fae4 	bl	800119c <MotorR_SetPWM>
			Servo_SetAngle(-10); //-13
 8003bd4:	4808      	ldr	r0, [pc, #32]	; (8003bf8 <Car_BamLine_Process+0x760>)
 8003bd6:	f7fd fb19 	bl	800120c <Servo_SetAngle>
			break;
 8003bda:	bf00      	nop
		return;
 8003bdc:	bf00      	nop
	}
}
 8003bde:	bd98      	pop	{r3, r4, r7, pc}
 8003be0:	33333333 	.word	0x33333333
 8003be4:	3feb3333 	.word	0x3feb3333
 8003be8:	cccccccd 	.word	0xcccccccd
 8003bec:	3feccccc 	.word	0x3feccccc
 8003bf0:	20000010 	.word	0x20000010
 8003bf4:	c1500000 	.word	0xc1500000
 8003bf8:	c1200000 	.word	0xc1200000
 8003bfc:	00000000 	.word	0x00000000

08003c00 <Car_MatLine_Process>:

void Car_MatLine_Process() {
 8003c00:	b598      	push	{r3, r4, r7, lr}
 8003c02:	af00      	add	r7, sp, #0
//	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);

	switch (LineDetect) {
 8003c04:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <Car_MatLine_Process+0xb0>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b80      	cmp	r3, #128	; 0x80
 8003c0a:	d002      	beq.n	8003c12 <Car_MatLine_Process+0x12>
 8003c0c:	2bc0      	cmp	r3, #192	; 0xc0
 8003c0e:	d01d      	beq.n	8003c4c <Car_MatLine_Process+0x4c>
		MotorR_SetPWM(MaxSpeed * 0.9);
		MotorL_SetPWM(MaxSpeed * 1.5);
		Servo_SetAngle(25);
		break;
	}
}
 8003c10:	e048      	b.n	8003ca4 <Car_MatLine_Process+0xa4>
		MotorR_SetPWM(MaxSpeed * 1);
 8003c12:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <Car_MatLine_Process+0xb4>)
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd fac0 	bl	800119c <MotorR_SetPWM>
		MotorL_SetPWM(MaxSpeed * 1.5);
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <Car_MatLine_Process+0xb4>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fbef 	bl	8000404 <__aeabi_i2d>
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <Car_MatLine_Process+0xb8>)
 8003c2c:	f7fc fc54 	bl	80004d8 <__aeabi_dmul>
 8003c30:	4603      	mov	r3, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	4618      	mov	r0, r3
 8003c36:	4621      	mov	r1, r4
 8003c38:	f7fc fefe 	bl	8000a38 <__aeabi_d2iz>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd fa74 	bl	800112c <MotorL_SetPWM>
		Servo_SetAngle(20);
 8003c44:	481d      	ldr	r0, [pc, #116]	; (8003cbc <Car_MatLine_Process+0xbc>)
 8003c46:	f7fd fae1 	bl	800120c <Servo_SetAngle>
		break;
 8003c4a:	e02b      	b.n	8003ca4 <Car_MatLine_Process+0xa4>
		MotorR_SetPWM(MaxSpeed * 0.9);
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <Car_MatLine_Process+0xb4>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fbd7 	bl	8000404 <__aeabi_i2d>
 8003c56:	a314      	add	r3, pc, #80	; (adr r3, 8003ca8 <Car_MatLine_Process+0xa8>)
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f7fc fc3c 	bl	80004d8 <__aeabi_dmul>
 8003c60:	4603      	mov	r3, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	4618      	mov	r0, r3
 8003c66:	4621      	mov	r1, r4
 8003c68:	f7fc fee6 	bl	8000a38 <__aeabi_d2iz>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fa94 	bl	800119c <MotorR_SetPWM>
		MotorL_SetPWM(MaxSpeed * 1.5);
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <Car_MatLine_Process+0xb4>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fbc3 	bl	8000404 <__aeabi_i2d>
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <Car_MatLine_Process+0xb8>)
 8003c84:	f7fc fc28 	bl	80004d8 <__aeabi_dmul>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	4621      	mov	r1, r4
 8003c90:	f7fc fed2 	bl	8000a38 <__aeabi_d2iz>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fa48 	bl	800112c <MotorL_SetPWM>
		Servo_SetAngle(25);
 8003c9c:	4808      	ldr	r0, [pc, #32]	; (8003cc0 <Car_MatLine_Process+0xc0>)
 8003c9e:	f7fd fab5 	bl	800120c <Servo_SetAngle>
		break;
 8003ca2:	bf00      	nop
}
 8003ca4:	bf00      	nop
 8003ca6:	bd98      	pop	{r3, r4, r7, pc}
 8003ca8:	cccccccd 	.word	0xcccccccd
 8003cac:	3feccccc 	.word	0x3feccccc
 8003cb0:	20000205 	.word	0x20000205
 8003cb4:	20000010 	.word	0x20000010
 8003cb8:	3ff80000 	.word	0x3ff80000
 8003cbc:	41a00000 	.word	0x41a00000
 8003cc0:	41c80000 	.word	0x41c80000
 8003cc4:	00000000 	.word	0x00000000

08003cc8 <Car_ChuyenLanePhai_Process>:
void Car_ChuyenLanePhai_Process() {
 8003cc8:	b598      	push	{r3, r4, r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 8003ccc:	491c      	ldr	r1, [pc, #112]	; (8003d40 <Car_ChuyenLanePhai_Process+0x78>)
 8003cce:	481d      	ldr	r0, [pc, #116]	; (8003d44 <Car_ChuyenLanePhai_Process+0x7c>)
 8003cd0:	f7fe fa5c 	bl	800218c <LL_GPIO_SetOutputPin>
	MotorL_SetPWM(MaxSpeed * 2);      //0.7
 8003cd4:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <Car_ChuyenLanePhai_Process+0x80>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd fa26 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.7);      //0.5
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <Car_ChuyenLanePhai_Process+0x80>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fc fb8d 	bl	8000404 <__aeabi_i2d>
 8003cea:	a313      	add	r3, pc, #76	; (adr r3, 8003d38 <Car_ChuyenLanePhai_Process+0x70>)
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f7fc fbf2 	bl	80004d8 <__aeabi_dmul>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	f7fc fe9c 	bl	8000a38 <__aeabi_d2iz>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd fa4a 	bl	800119c <MotorR_SetPWM>
	Servo_SetAngle(54);
 8003d08:	4810      	ldr	r0, [pc, #64]	; (8003d4c <Car_ChuyenLanePhai_Process+0x84>)
 8003d0a:	f7fd fa7f 	bl	800120c <Servo_SetAngle>
	CarState = LechTrai;
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <Car_ChuyenLanePhai_Process+0x88>)
 8003d10:	22ff      	movs	r2, #255	; 0xff
 8003d12:	701a      	strb	r2, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003d14:	e001      	b.n	8003d1a <Car_ChuyenLanePhai_Process+0x52>
			|| LineDetect == 0b00111000))
		Sensor_Convert_A2D();
 8003d16:	f7ff fb0f 	bl	8003338 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003d1a:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <Car_ChuyenLanePhai_Process+0x8c>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b18      	cmp	r3, #24
 8003d20:	d007      	beq.n	8003d32 <Car_ChuyenLanePhai_Process+0x6a>
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <Car_ChuyenLanePhai_Process+0x8c>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b1c      	cmp	r3, #28
 8003d28:	d003      	beq.n	8003d32 <Car_ChuyenLanePhai_Process+0x6a>
			|| LineDetect == 0b00111000))
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <Car_ChuyenLanePhai_Process+0x8c>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003d2e:	2b38      	cmp	r3, #56	; 0x38
 8003d30:	d1f1      	bne.n	8003d16 <Car_ChuyenLanePhai_Process+0x4e>
}
 8003d32:	bf00      	nop
 8003d34:	bd98      	pop	{r3, r4, r7, pc}
 8003d36:	bf00      	nop
 8003d38:	33333333 	.word	0x33333333
 8003d3c:	3ffb3333 	.word	0x3ffb3333
 8003d40:	04200020 	.word	0x04200020
 8003d44:	40011000 	.word	0x40011000
 8003d48:	20000010 	.word	0x20000010
 8003d4c:	42580000 	.word	0x42580000
 8003d50:	20000206 	.word	0x20000206
 8003d54:	20000205 	.word	0x20000205

08003d58 <Car_ChuyenLaneTrai_Process>:
void Car_ChuyenLaneTrai_Process() {
 8003d58:	b598      	push	{r3, r4, r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	MotorR_SetPWM(MaxSpeed * 2);      //0.7
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <Car_ChuyenLaneTrai_Process+0x70>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fd fa1a 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.7);      //0.5
 8003d68:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <Car_ChuyenLaneTrai_Process+0x70>)
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc fb49 	bl	8000404 <__aeabi_i2d>
 8003d72:	a313      	add	r3, pc, #76	; (adr r3, 8003dc0 <Car_ChuyenLaneTrai_Process+0x68>)
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f7fc fbae 	bl	80004d8 <__aeabi_dmul>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	4618      	mov	r0, r3
 8003d82:	4621      	mov	r1, r4
 8003d84:	f7fc fe58 	bl	8000a38 <__aeabi_d2iz>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fd f9ce 	bl	800112c <MotorL_SetPWM>
	Servo_SetAngle(-54);
 8003d90:	480e      	ldr	r0, [pc, #56]	; (8003dcc <Car_ChuyenLaneTrai_Process+0x74>)
 8003d92:	f7fd fa3b 	bl	800120c <Servo_SetAngle>
	CarState = LechPhai;
 8003d96:	4b0e      	ldr	r3, [pc, #56]	; (8003dd0 <Car_ChuyenLaneTrai_Process+0x78>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003d9c:	e001      	b.n	8003da2 <Car_ChuyenLaneTrai_Process+0x4a>
			|| LineDetect == 0b00111000))
		Sensor_Convert_A2D();
 8003d9e:	f7ff facb 	bl	8003338 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003da2:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <Car_ChuyenLaneTrai_Process+0x7c>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b18      	cmp	r3, #24
 8003da8:	d007      	beq.n	8003dba <Car_ChuyenLaneTrai_Process+0x62>
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <Car_ChuyenLaneTrai_Process+0x7c>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b1c      	cmp	r3, #28
 8003db0:	d003      	beq.n	8003dba <Car_ChuyenLaneTrai_Process+0x62>
			|| LineDetect == 0b00111000))
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <Car_ChuyenLaneTrai_Process+0x7c>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003db6:	2b38      	cmp	r3, #56	; 0x38
 8003db8:	d1f1      	bne.n	8003d9e <Car_ChuyenLaneTrai_Process+0x46>
}
 8003dba:	bf00      	nop
 8003dbc:	bd98      	pop	{r3, r4, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	33333333 	.word	0x33333333
 8003dc4:	3ffb3333 	.word	0x3ffb3333
 8003dc8:	20000010 	.word	0x20000010
 8003dcc:	c2580000 	.word	0xc2580000
 8003dd0:	20000206 	.word	0x20000206
 8003dd4:	20000205 	.word	0x20000205

08003dd8 <Car_CuaPhai_Process>:
void Car_CuaPhai_Process() {
 8003dd8:	b598      	push	{r3, r4, r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 8003ddc:	491a      	ldr	r1, [pc, #104]	; (8003e48 <Car_CuaPhai_Process+0x70>)
 8003dde:	481b      	ldr	r0, [pc, #108]	; (8003e4c <Car_CuaPhai_Process+0x74>)
 8003de0:	f7fe f9d4 	bl	800218c <LL_GPIO_SetOutputPin>
	Servo_SetAngle(80);
 8003de4:	481a      	ldr	r0, [pc, #104]	; (8003e50 <Car_CuaPhai_Process+0x78>)
 8003de6:	f7fd fa11 	bl	800120c <Servo_SetAngle>
	MotorR_SetPWM(MaxSpeed * 1);
 8003dea:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <Car_CuaPhai_Process+0x7c>)
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd f9d4 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.5);
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <Car_CuaPhai_Process+0x7c>)
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fb03 	bl	8000404 <__aeabi_i2d>
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <Car_CuaPhai_Process+0x80>)
 8003e04:	f7fc fb68 	bl	80004d8 <__aeabi_dmul>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	4621      	mov	r1, r4
 8003e10:	f7fc fe12 	bl	8000a38 <__aeabi_d2iz>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd f988 	bl	800112c <MotorL_SetPWM>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003e1c:	e001      	b.n	8003e22 <Car_CuaPhai_Process+0x4a>
			|| LineDetect == 0b00111000)) {
		Sensor_Convert_A2D();
 8003e1e:	f7ff fa8b 	bl	8003338 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003e22:	4b0e      	ldr	r3, [pc, #56]	; (8003e5c <Car_CuaPhai_Process+0x84>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b18      	cmp	r3, #24
 8003e28:	d007      	beq.n	8003e3a <Car_CuaPhai_Process+0x62>
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <Car_CuaPhai_Process+0x84>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b1c      	cmp	r3, #28
 8003e30:	d003      	beq.n	8003e3a <Car_CuaPhai_Process+0x62>
			|| LineDetect == 0b00111000)) {
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <Car_CuaPhai_Process+0x84>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003e36:	2b38      	cmp	r3, #56	; 0x38
 8003e38:	d1f1      	bne.n	8003e1e <Car_CuaPhai_Process+0x46>
	}
	LL_GPIO_ResetOutputPin(Debug_Led_GPIO_Port, Debug_Led_Pin);
 8003e3a:	4903      	ldr	r1, [pc, #12]	; (8003e48 <Car_CuaPhai_Process+0x70>)
 8003e3c:	4803      	ldr	r0, [pc, #12]	; (8003e4c <Car_CuaPhai_Process+0x74>)
 8003e3e:	f7fe f9b4 	bl	80021aa <LL_GPIO_ResetOutputPin>

}
 8003e42:	bf00      	nop
 8003e44:	bd98      	pop	{r3, r4, r7, pc}
 8003e46:	bf00      	nop
 8003e48:	04200020 	.word	0x04200020
 8003e4c:	40011000 	.word	0x40011000
 8003e50:	42a00000 	.word	0x42a00000
 8003e54:	20000010 	.word	0x20000010
 8003e58:	3ff80000 	.word	0x3ff80000
 8003e5c:	20000205 	.word	0x20000205

08003e60 <Car_CuaTrai_Process>:
void Car_CuaTrai_Process() {
 8003e60:	b598      	push	{r3, r4, r7, lr}
 8003e62:	af00      	add	r7, sp, #0
	Servo_SetAngle(-75);
 8003e64:	481d      	ldr	r0, [pc, #116]	; (8003edc <Car_CuaTrai_Process+0x7c>)
 8003e66:	f7fd f9d1 	bl	800120c <Servo_SetAngle>
	MotorL_SetPWM(MaxSpeed * 1.2);
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <Car_CuaTrai_Process+0x80>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fac8 	bl	8000404 <__aeabi_i2d>
 8003e74:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <Car_CuaTrai_Process+0x84>)
 8003e7a:	f7fc fb2d 	bl	80004d8 <__aeabi_dmul>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	4618      	mov	r0, r3
 8003e84:	4621      	mov	r1, r4
 8003e86:	f7fc fdd7 	bl	8000a38 <__aeabi_d2iz>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd f94d 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.5);
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <Car_CuaTrai_Process+0x80>)
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc fab4 	bl	8000404 <__aeabi_i2d>
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <Car_CuaTrai_Process+0x88>)
 8003ea2:	f7fc fb19 	bl	80004d8 <__aeabi_dmul>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	4621      	mov	r1, r4
 8003eae:	f7fc fdc3 	bl	8000a38 <__aeabi_d2iz>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fd f971 	bl	800119c <MotorR_SetPWM>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003eba:	e001      	b.n	8003ec0 <Car_CuaTrai_Process+0x60>
			|| LineDetect == 0b00111000)) {
		Sensor_Convert_A2D();
 8003ebc:	f7ff fa3c 	bl	8003338 <Sensor_Convert_A2D>
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <Car_CuaTrai_Process+0x8c>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b18      	cmp	r3, #24
 8003ec6:	d007      	beq.n	8003ed8 <Car_CuaTrai_Process+0x78>
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <Car_CuaTrai_Process+0x8c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b1c      	cmp	r3, #28
 8003ece:	d003      	beq.n	8003ed8 <Car_CuaTrai_Process+0x78>
			|| LineDetect == 0b00111000)) {
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <Car_CuaTrai_Process+0x8c>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
	while (!(LineDetect == 0b00011000 || LineDetect == 0b00011100
 8003ed4:	2b38      	cmp	r3, #56	; 0x38
 8003ed6:	d1f1      	bne.n	8003ebc <Car_CuaTrai_Process+0x5c>
	}
}
 8003ed8:	bf00      	nop
 8003eda:	bd98      	pop	{r3, r4, r7, pc}
 8003edc:	c2960000 	.word	0xc2960000
 8003ee0:	20000010 	.word	0x20000010
 8003ee4:	3ff33333 	.word	0x3ff33333
 8003ee8:	3ff80000 	.word	0x3ff80000
 8003eec:	20000205 	.word	0x20000205

08003ef0 <Car_Avoid_Process>:
void Car_Avoid_Process()
{
 8003ef0:	b598      	push	{r3, r4, r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	Servo_SetAngle(60);
 8003ef4:	482a      	ldr	r0, [pc, #168]	; (8003fa0 <Car_Avoid_Process+0xb0>)
 8003ef6:	f7fd f989 	bl	800120c <Servo_SetAngle>
	MotorL_SetPWM(MaxSpeed * 1);
 8003efa:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <Car_Avoid_Process+0xb4>)
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd f914 	bl	800112c <MotorL_SetPWM>
	MotorR_SetPWM(MaxSpeed * 1.7);
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <Car_Avoid_Process+0xb4>)
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fc fa7b 	bl	8000404 <__aeabi_i2d>
 8003f0e:	a322      	add	r3, pc, #136	; (adr r3, 8003f98 <Car_Avoid_Process+0xa8>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fae0 	bl	80004d8 <__aeabi_dmul>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4621      	mov	r1, r4
 8003f20:	f7fc fd8a 	bl	8000a38 <__aeabi_d2iz>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd f938 	bl	800119c <MotorR_SetPWM>
	while(LineDetect != 0b00000001)
 8003f2c:	e001      	b.n	8003f32 <Car_Avoid_Process+0x42>
		Sensor_Convert_A2D();
 8003f2e:	f7ff fa03 	bl	8003338 <Sensor_Convert_A2D>
	while(LineDetect != 0b00000001)
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <Car_Avoid_Process+0xb8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d1f9      	bne.n	8003f2e <Car_Avoid_Process+0x3e>
	Servo_SetAngle(-70);
 8003f3a:	481c      	ldr	r0, [pc, #112]	; (8003fac <Car_Avoid_Process+0xbc>)
 8003f3c:	f7fd f966 	bl	800120c <Servo_SetAngle>
	MotorR_SetPWM(MaxSpeed * 1);
 8003f40:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <Car_Avoid_Process+0xb4>)
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fd f929 	bl	800119c <MotorR_SetPWM>
	MotorL_SetPWM(MaxSpeed * 1.7);
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <Car_Avoid_Process+0xb4>)
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fc fa58 	bl	8000404 <__aeabi_i2d>
 8003f54:	a310      	add	r3, pc, #64	; (adr r3, 8003f98 <Car_Avoid_Process+0xa8>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f7fc fabd 	bl	80004d8 <__aeabi_dmul>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	460c      	mov	r4, r1
 8003f62:	4618      	mov	r0, r3
 8003f64:	4621      	mov	r1, r4
 8003f66:	f7fc fd67 	bl	8000a38 <__aeabi_d2iz>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd f8dd 	bl	800112c <MotorL_SetPWM>
	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 8003f72:	e001      	b.n	8003f78 <Car_Avoid_Process+0x88>
		Sensor_Convert_A2D();
 8003f74:	f7ff f9e0 	bl	8003338 <Sensor_Convert_A2D>
	while(!(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000))
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <Car_Avoid_Process+0xb8>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b18      	cmp	r3, #24
 8003f7e:	d007      	beq.n	8003f90 <Car_Avoid_Process+0xa0>
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <Car_Avoid_Process+0xb8>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b1c      	cmp	r3, #28
 8003f86:	d003      	beq.n	8003f90 <Car_Avoid_Process+0xa0>
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <Car_Avoid_Process+0xb8>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b38      	cmp	r3, #56	; 0x38
 8003f8e:	d1f1      	bne.n	8003f74 <Car_Avoid_Process+0x84>
}
 8003f90:	bf00      	nop
 8003f92:	bd98      	pop	{r3, r4, r7, pc}
 8003f94:	f3af 8000 	nop.w
 8003f98:	33333333 	.word	0x33333333
 8003f9c:	3ffb3333 	.word	0x3ffb3333
 8003fa0:	42700000 	.word	0x42700000
 8003fa4:	20000010 	.word	0x20000010
 8003fa8:	20000205 	.word	0x20000205
 8003fac:	c28c0000 	.word	0xc28c0000

08003fb0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40010400 	.word	0x40010400

08003fdc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003fe4:	4a03      	ldr	r2, [pc, #12]	; (8003ff4 <LL_EXTI_ClearFlag_0_31+0x18>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6153      	str	r3, [r2, #20]
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <LL_TIM_ClearFlag_UPDATE>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f06f 0201 	mvn.w	r2, #1
 8004006:	611a      	str	r2, [r3, #16]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <LL_TIM_ClearFlag_CC1>:
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f06f 0202 	mvn.w	r2, #2
 8004044:	611a      	str	r2, [r3, #16]
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <LL_TIM_IsActiveFlag_CC1>:
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d101      	bne.n	8004068 <LL_TIM_IsActiveFlag_CC1+0x18>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <LL_TIM_IsActiveFlag_CC1+0x1a>
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <LL_GPIO_SetOutputPin>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	611a      	str	r2, [r3, #16]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <LL_GPIO_ResetOutputPin>:
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	615a      	str	r2, [r3, #20]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040c0:	e7fe      	b.n	80040c0 <HardFault_Handler+0x4>

080040c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c6:	e7fe      	b.n	80040c6 <MemManage_Handler+0x4>

080040c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040cc:	e7fe      	b.n	80040cc <BusFault_Handler+0x4>

080040ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <UsageFault_Handler+0x4>

080040d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 80040fc:	4b04      	ldr	r3, [pc, #16]	; (8004110 <SysTick_Handler+0x18>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3301      	adds	r3, #1
 8004102:	4a03      	ldr	r2, [pc, #12]	; (8004110 <SysTick_Handler+0x18>)
 8004104:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	2000020c 	.word	0x2000020c

08004114 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8004124:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004128:	f7ff ff66 	bl	8003ff8 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}

08004130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <TIM3_IRQHandler+0x10>)
 8004136:	f7ff ff5f 	bl	8003ff8 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40000400 	.word	0x40000400

08004144 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 8004148:	4814      	ldr	r0, [pc, #80]	; (800419c <TIM4_IRQHandler+0x58>)
 800414a:	f7ff ff81 	bl	8004050 <LL_TIM_IsActiveFlag_CC1>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <TIM4_IRQHandler+0x1e>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 8004154:	4811      	ldr	r0, [pc, #68]	; (800419c <TIM4_IRQHandler+0x58>)
 8004156:	f7ff ff6e 	bl	8004036 <LL_TIM_ClearFlag_CC1>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800415a:	4911      	ldr	r1, [pc, #68]	; (80041a0 <TIM4_IRQHandler+0x5c>)
 800415c:	4811      	ldr	r0, [pc, #68]	; (80041a4 <TIM4_IRQHandler+0x60>)
 800415e:	f7ff ff98 	bl	8004092 <LL_GPIO_ResetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 8004162:	480e      	ldr	r0, [pc, #56]	; (800419c <TIM4_IRQHandler+0x58>)
 8004164:	f7ff ff55 	bl	8004012 <LL_TIM_IsActiveFlag_UPDATE>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <TIM4_IRQHandler+0x52>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 800416e:	480b      	ldr	r0, [pc, #44]	; (800419c <TIM4_IRQHandler+0x58>)
 8004170:	f7ff ff42 	bl	8003ff8 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8004174:	490a      	ldr	r1, [pc, #40]	; (80041a0 <TIM4_IRQHandler+0x5c>)
 8004176:	480b      	ldr	r0, [pc, #44]	; (80041a4 <TIM4_IRQHandler+0x60>)
 8004178:	f7ff ff7c 	bl	8004074 <LL_GPIO_SetOutputPin>
		CountTime++;
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <TIM4_IRQHandler+0x64>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <TIM4_IRQHandler+0x64>)
 8004186:	701a      	strb	r2, [r3, #0]
		if(CountTime > 3) CountTime = 0;
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <TIM4_IRQHandler+0x64>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d902      	bls.n	8004196 <TIM4_IRQHandler+0x52>
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <TIM4_IRQHandler+0x64>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
//	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40000800 	.word	0x40000800
 80041a0:	04080008 	.word	0x04080008
 80041a4:	40010800 	.word	0x40010800
 80041a8:	20000212 	.word	0x20000212

080041ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 80041b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041b4:	f7ff fefc 	bl	8003fb0 <LL_EXTI_IsActiveFlag_0_31>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 80041be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80041c2:	f7ff ff0b 	bl	8003fdc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 80041c6:	4b10      	ldr	r3, [pc, #64]	; (8004208 <EXTI15_10_IRQHandler+0x5c>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80041cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041d0:	f7ff feee 	bl	8003fb0 <LL_EXTI_IsActiveFlag_0_31>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80041da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041de:	f7ff fefd 	bl	8003fdc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BTN2_Flag = 1;
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <EXTI15_10_IRQHandler+0x60>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80041e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041ec:	f7ff fee0 	bl	8003fb0 <LL_EXTI_IsActiveFlag_0_31>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <EXTI15_10_IRQHandler+0x58>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80041f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041fa:	f7ff feef 	bl	8003fdc <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    BTN3_Flag = 1;
 80041fe:	4b04      	ldr	r3, [pc, #16]	; (8004210 <EXTI15_10_IRQHandler+0x64>)
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000204 	.word	0x20000204
 800420c:	20000210 	.word	0x20000210
 8004210:	20000211 	.word	0x20000211

08004214 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e00a      	b.n	800423c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004226:	f3af 8000 	nop.w
 800422a:	4601      	mov	r1, r0
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	60ba      	str	r2, [r7, #8]
 8004232:	b2ca      	uxtb	r2, r1
 8004234:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	3301      	adds	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	dbf0      	blt.n	8004226 <_read+0x12>
	}

return len;
 8004244:	687b      	ldr	r3, [r7, #4]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b086      	sub	sp, #24
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e009      	b.n	8004274 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	60ba      	str	r2, [r7, #8]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe f833 	bl	80022d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3301      	adds	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	dbf1      	blt.n	8004260 <_write+0x12>
	}
	return len;
 800427c:	687b      	ldr	r3, [r7, #4]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <_close>:

int _close(int file)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
	return -1;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042ac:	605a      	str	r2, [r3, #4]
	return 0;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
	return 0;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
	...

080042d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042dc:	4a14      	ldr	r2, [pc, #80]	; (8004330 <_sbrk+0x5c>)
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <_sbrk+0x60>)
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <_sbrk+0x64>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <_sbrk+0x64>)
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <_sbrk+0x68>)
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <_sbrk+0x64>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d207      	bcs.n	8004314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004304:	f001 f988 	bl	8005618 <__errno>
 8004308:	4602      	mov	r2, r0
 800430a:	230c      	movs	r3, #12
 800430c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	e009      	b.n	8004328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <_sbrk+0x64>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <_sbrk+0x64>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <_sbrk+0x64>)
 8004324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20005000 	.word	0x20005000
 8004334:	00000400 	.word	0x00000400
 8004338:	20000214 	.word	0x20000214
 800433c:	20000238 	.word	0x20000238

08004340 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <SystemInit+0x5c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a14      	ldr	r2, [pc, #80]	; (800439c <SystemInit+0x5c>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004350:	4b12      	ldr	r3, [pc, #72]	; (800439c <SystemInit+0x5c>)
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4911      	ldr	r1, [pc, #68]	; (800439c <SystemInit+0x5c>)
 8004356:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <SystemInit+0x60>)
 8004358:	4013      	ands	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <SystemInit+0x5c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0e      	ldr	r2, [pc, #56]	; (800439c <SystemInit+0x5c>)
 8004362:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800436a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <SystemInit+0x5c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <SystemInit+0x5c>)
 8004372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004376:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <SystemInit+0x5c>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <SystemInit+0x5c>)
 800437e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004382:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <SystemInit+0x5c>)
 8004386:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800438a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <SystemInit+0x64>)
 800438e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004392:	609a      	str	r2, [r3, #8]
#endif 
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	40021000 	.word	0x40021000
 80043a0:	f8ff0000 	.word	0xf8ff0000
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80043a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80043aa:	e003      	b.n	80043b4 <LoopCopyDataInit>

080043ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80043ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80043b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80043b2:	3104      	adds	r1, #4

080043b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80043b4:	480a      	ldr	r0, [pc, #40]	; (80043e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80043b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80043ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80043bc:	d3f6      	bcc.n	80043ac <CopyDataInit>
  ldr r2, =_sbss
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80043c0:	e002      	b.n	80043c8 <LoopFillZerobss>

080043c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80043c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80043c4:	f842 3b04 	str.w	r3, [r2], #4

080043c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80043ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80043cc:	d3f9      	bcc.n	80043c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043ce:	f7ff ffb7 	bl	8004340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043d2:	f001 f927 	bl	8005624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043d6:	f7fd ff95 	bl	8002304 <main>
  bx lr
 80043da:	4770      	bx	lr
  ldr r3, =_sidata
 80043dc:	08007a08 	.word	0x08007a08
  ldr r0, =_sdata
 80043e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80043e4:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80043e8:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80043ec:	20000234 	.word	0x20000234

080043f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043f0:	e7fe      	b.n	80043f0 <ADC1_2_IRQHandler>

080043f2 <LL_ADC_REG_SetSequencerLength>:
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <LL_ADC_IsEnabled>:
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
	...

0800443c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800444a:	4813      	ldr	r0, [pc, #76]	; (8004498 <LL_ADC_CommonInit+0x5c>)
 800444c:	f7ff ffe3 	bl	8004416 <LL_ADC_IsEnabled>
 8004450:	4604      	mov	r4, r0
 8004452:	4812      	ldr	r0, [pc, #72]	; (800449c <LL_ADC_CommonInit+0x60>)
 8004454:	f7ff ffdf 	bl	8004416 <LL_ADC_IsEnabled>
 8004458:	4603      	mov	r3, r0
 800445a:	4323      	orrs	r3, r4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d114      	bne.n	800448a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d009      	beq.n	800447c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	e008      	b.n	800448e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	e001      	b.n	800448e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bd90      	pop	{r4, r7, pc}
 8004498:	40012400 	.word	0x40012400
 800449c:	40012800 	.word	0x40012800

080044a0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ffb1 	bl	8004416 <LL_ADC_IsEnabled>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d112      	bne.n	80044e0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	e001      	b.n	80044e4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80044f8:	2300      	movs	r3, #0
 80044fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff8a 	bl	8004416 <LL_ADC_IsEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d131      	bne.n	800456c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	430b      	orrs	r3, r1
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	e008      	b.n	800453c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8004544:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	6811      	ldr	r1, [r2, #0]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	68d2      	ldr	r2, [r2, #12]
 8004550:	4311      	orrs	r1, r2
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	6912      	ldr	r2, [r2, #16]
 8004556:	430a      	orrs	r2, r1
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff44 	bl	80043f2 <LL_ADC_REG_SetSequencerLength>
 800456a:	e001      	b.n	8004570 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <LL_EXTI_EnableIT_0_31>:
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <LL_EXTI_EnableIT_0_31+0x20>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4904      	ldr	r1, [pc, #16]	; (800459c <LL_EXTI_EnableIT_0_31+0x20>)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40010400 	.word	0x40010400

080045a0 <LL_EXTI_DisableIT_0_31>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <LL_EXTI_DisableIT_0_31+0x20>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	4903      	ldr	r1, [pc, #12]	; (80045c0 <LL_EXTI_DisableIT_0_31+0x20>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	40010400 	.word	0x40010400

080045c4 <LL_EXTI_EnableEvent_0_31>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	4904      	ldr	r1, [pc, #16]	; (80045e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010400 	.word	0x40010400

080045e8 <LL_EXTI_DisableEvent_0_31>:
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <LL_EXTI_DisableEvent_0_31+0x20>)
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	4903      	ldr	r1, [pc, #12]	; (8004608 <LL_EXTI_DisableEvent_0_31+0x20>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr
 8004608:	40010400 	.word	0x40010400

0800460c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004614:	4b05      	ldr	r3, [pc, #20]	; (800462c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4904      	ldr	r1, [pc, #16]	; (800462c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40010400 	.word	0x40010400

08004630 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	43db      	mvns	r3, r3
 8004640:	4903      	ldr	r1, [pc, #12]	; (8004650 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004642:	4013      	ands	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40010400 	.word	0x40010400

08004654 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4313      	orrs	r3, r2
 8004666:	60cb      	str	r3, [r1, #12]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40010400 	.word	0x40010400

08004678 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	43db      	mvns	r3, r3
 8004688:	4903      	ldr	r1, [pc, #12]	; (8004698 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800468a:	4013      	ands	r3, r2
 800468c:	60cb      	str	r3, [r1, #12]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr
 8004698:	40010400 	.word	0x40010400

0800469c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	791b      	ldrb	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d060      	beq.n	8004772 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d067      	beq.n	8004788 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	795b      	ldrb	r3, [r3, #5]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d00e      	beq.n	80046de <LL_EXTI_Init+0x42>
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d017      	beq.n	80046f4 <LL_EXTI_Init+0x58>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d120      	bne.n	800470a <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff ff8b 	bl	80045e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff ff50 	bl	800457c <LL_EXTI_EnableIT_0_31>
          break;
 80046dc:	e018      	b.n	8004710 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ff5c 	bl	80045a0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff69 	bl	80045c4 <LL_EXTI_EnableEvent_0_31>
          break;
 80046f2:	e00d      	b.n	8004710 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff3f 	bl	800457c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff5e 	bl	80045c4 <LL_EXTI_EnableEvent_0_31>
          break;
 8004708:	e002      	b.n	8004710 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
          break;
 800470e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	799b      	ldrb	r3, [r3, #6]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d037      	beq.n	8004788 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	799b      	ldrb	r3, [r3, #6]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d00e      	beq.n	800473e <LL_EXTI_Init+0xa2>
 8004720:	2b03      	cmp	r3, #3
 8004722:	d017      	beq.n	8004754 <LL_EXTI_Init+0xb8>
 8004724:	2b01      	cmp	r3, #1
 8004726:	d120      	bne.n	800476a <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff ffa3 	bl	8004678 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff ff68 	bl	800460c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800473c:	e025      	b.n	800478a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff ff74 	bl	8004630 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff81 	bl	8004654 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004752:	e01a      	b.n	800478a <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff57 	bl	800460c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff ff76 	bl	8004654 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004768:	e00f      	b.n	800478a <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
            break;
 800476e:	bf00      	nop
 8004770:	e00b      	b.n	800478a <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ff12 	bl	80045a0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff31 	bl	80045e8 <LL_EXTI_DisableEvent_0_31>
 8004786:	e000      	b.n	800478a <LL_EXTI_Init+0xee>
      }
 8004788:	bf00      	nop
  }
  return status;
 800478a:	7bfb      	ldrb	r3, [r7, #15]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <LL_GPIO_SetPinMode>:
{
 8004794:	b490      	push	{r4, r7}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	0e1b      	lsrs	r3, r3, #24
 80047a8:	4413      	add	r3, r2
 80047aa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	613b      	str	r3, [r7, #16]
  return result;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	fab3 f383 	clz	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	210f      	movs	r1, #15
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	401a      	ands	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	61bb      	str	r3, [r7, #24]
  return result;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	fab3 f383 	clz	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	4313      	orrs	r3, r2
 80047ec:	6023      	str	r3, [r4, #0]
}
 80047ee:	bf00      	nop
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc90      	pop	{r4, r7}
 80047f6:	4770      	bx	lr

080047f8 <LL_GPIO_SetPinSpeed>:
{
 80047f8:	b490      	push	{r4, r7}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0e1b      	lsrs	r3, r3, #24
 800480c:	4413      	add	r3, r2
 800480e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	613b      	str	r3, [r7, #16]
  return result;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	2103      	movs	r1, #3
 800482a:	fa01 f303 	lsl.w	r3, r1, r3
 800482e:	43db      	mvns	r3, r3
 8004830:	401a      	ands	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	fa93 f3a3 	rbit	r3, r3
 800483c:	61bb      	str	r3, [r7, #24]
  return result;
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	b2db      	uxtb	r3, r3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	6023      	str	r3, [r4, #0]
}
 8004852:	bf00      	nop
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bc90      	pop	{r4, r7}
 800485a:	4770      	bx	lr

0800485c <LL_GPIO_SetPinOutputType>:
{
 800485c:	b490      	push	{r4, r7}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	461a      	mov	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	0e1b      	lsrs	r3, r3, #24
 8004870:	4413      	add	r3, r2
 8004872:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	613b      	str	r3, [r7, #16]
  return result;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	2104      	movs	r1, #4
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	401a      	ands	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	fa93 f3a3 	rbit	r3, r3
 80048a0:	61bb      	str	r3, [r7, #24]
  return result;
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	fab3 f383 	clz	r3, r3
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	4313      	orrs	r3, r2
 80048b4:	6023      	str	r3, [r4, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3720      	adds	r7, #32
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc90      	pop	{r4, r7}
 80048be:	4770      	bx	lr

080048c0 <LL_GPIO_SetPinPull>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	43db      	mvns	r3, r3
 80048d6:	401a      	ands	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	fa93 f3a3 	rbit	r3, r3
 80048e4:	613b      	str	r3, [r7, #16]
  return result;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	408b      	lsls	r3, r1
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	60da      	str	r2, [r3, #12]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	60fb      	str	r3, [r7, #12]
  return result;
 8004924:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800492e:	e040      	b.n	80049b2 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8004930:	2201      	movs	r2, #1
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	409a      	lsls	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d036      	beq.n	80049ac <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b07      	cmp	r3, #7
 8004942:	d806      	bhi.n	8004952 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8004944:	f240 1201 	movw	r2, #257	; 0x101
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	61bb      	str	r3, [r7, #24]
 8004950:	e008      	b.n	8004964 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3b08      	subs	r3, #8
 8004956:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004962:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	461a      	mov	r2, r3
 800496a:	69b9      	ldr	r1, [r7, #24]
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff11 	bl	8004794 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	461a      	mov	r2, r3
 8004978:	69b9      	ldr	r1, [r7, #24]
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff ffa0 	bl	80048c0 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d003      	beq.n	8004990 <LL_GPIO_Init+0x8c>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b09      	cmp	r3, #9
 800498e:	d10d      	bne.n	80049ac <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	461a      	mov	r2, r3
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff2d 	bl	80047f8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	461a      	mov	r2, r3
 80049a4:	69b9      	ldr	r1, [r7, #24]
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ff58 	bl	800485c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	3301      	adds	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1b8      	bne.n	8004930 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <LL_I2C_Enable>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f043 0201 	orr.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <LL_I2C_Disable>:
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 0201 	bic.w	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr

08004a04 <LL_I2C_SetOwnAddress1>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	609a      	str	r2, [r3, #8]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
	...

08004a34 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8004a34:	b490      	push	{r4, r7}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8004a42:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8004a44:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a3f      	ldr	r2, [pc, #252]	; (8004b48 <LL_I2C_ConfigSpeed+0x114>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a58:	ea44 0203 	orr.w	r2, r4, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4938      	ldr	r1, [pc, #224]	; (8004b4c <LL_I2C_ConfigSpeed+0x118>)
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	d801      	bhi.n	8004a74 <LL_I2C_ConfigSpeed+0x40>
 8004a70:	1c63      	adds	r3, r4, #1
 8004a72:	e008      	b.n	8004a86 <LL_I2C_ConfigSpeed+0x52>
 8004a74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004a78:	fb03 f304 	mul.w	r3, r3, r4
 8004a7c:	4934      	ldr	r1, [pc, #208]	; (8004b50 <LL_I2C_ConfigSpeed+0x11c>)
 8004a7e:	fba1 1303 	umull	r1, r3, r1, r3
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	3301      	adds	r3, #1
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a2f      	ldr	r2, [pc, #188]	; (8004b4c <LL_I2C_ConfigSpeed+0x118>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d939      	bls.n	8004b08 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d117      	bne.n	8004aca <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac2:	e01d      	b.n	8004b00 <LL_I2C_ConfigSpeed+0xcc>
 8004ac4:	f248 0301 	movw	r3, #32769	; 0x8001
 8004ac8:	e01a      	b.n	8004b00 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009a      	lsls	r2, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00b      	beq.n	8004afc <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009a      	lsls	r2, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afa:	e001      	b.n	8004b00 <LL_I2C_ConfigSpeed+0xcc>
 8004afc:	f248 0301 	movw	r3, #32769	; 0x8001
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	ea43 0402 	orr.w	r4, r3, r2
 8004b06:	e010      	b.n	8004b2a <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d905      	bls.n	8004b26 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	e000      	b.n	8004b28 <LL_I2C_ConfigSpeed+0xf4>
 8004b26:	2304      	movs	r3, #4
 8004b28:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b36:	ea44 0203 	orr.w	r2, r4, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	61da      	str	r2, [r3, #28]
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc90      	pop	{r4, r7}
 8004b46:	4770      	bx	lr
 8004b48:	431bde83 	.word	0x431bde83
 8004b4c:	000186a0 	.word	0x000186a0
 8004b50:	10624dd3 	.word	0x10624dd3

08004b54 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 021a 	bic.w	r2, r3, #26
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	601a      	str	r2, [r3, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr

08004b9c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ff1d 	bl	80049e6 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004bac:	f107 0308 	add.w	r3, r7, #8
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 f87b 	bl	8004cac <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004bb6:	6939      	ldr	r1, [r7, #16]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ff37 	bl	8004a34 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ff17 	bl	8004a04 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ffb9 	bl	8004b54 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fef0 	bl	80049c8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff ffc2 	bl	8004b78 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <LL_RCC_GetSysClkSource>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <LL_RCC_GetSysClkSource+0x14>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 030c 	and.w	r3, r3, #12
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	40021000 	.word	0x40021000

08004c18 <LL_RCC_GetAHBPrescaler>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004c1c:	4b03      	ldr	r3, [pc, #12]	; (8004c2c <LL_RCC_GetAHBPrescaler+0x14>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	40021000 	.word	0x40021000

08004c30 <LL_RCC_GetAPB1Prescaler>:
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr
 8004c44:	40021000 	.word	0x40021000

08004c48 <LL_RCC_GetAPB2Prescaler>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <LL_RCC_GetAPB2Prescaler+0x14>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr
 8004c5c:	40021000 	.word	0x40021000

08004c60 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004c64:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <LL_RCC_PLL_GetMainSource+0x14>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	40021000 	.word	0x40021000

08004c78 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	40021000 	.word	0x40021000

08004c90 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <LL_RCC_PLL_GetPrediv+0x18>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	0c5b      	lsrs	r3, r3, #17
 8004c9a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000

08004cac <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004cb4:	f000 f820 	bl	8004cf8 <RCC_GetSystemClockFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f83a 	bl	8004d3c <RCC_GetHCLKClockFreq>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f848 	bl	8004d68 <RCC_GetPCLK1ClockFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f854 	bl	8004d90 <RCC_GetPCLK2ClockFreq>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60da      	str	r2, [r3, #12]
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004d02:	f7ff ff7d 	bl	8004c00 <LL_RCC_GetSysClkSource>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d006      	beq.n	8004d1a <RCC_GetSystemClockFreq+0x22>
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d007      	beq.n	8004d20 <RCC_GetSystemClockFreq+0x28>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <RCC_GetSystemClockFreq+0x40>)
 8004d16:	607b      	str	r3, [r7, #4]
      break;
 8004d18:	e009      	b.n	8004d2e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004d1a:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <RCC_GetSystemClockFreq+0x40>)
 8004d1c:	607b      	str	r3, [r7, #4]
      break;
 8004d1e:	e006      	b.n	8004d2e <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004d20:	f000 f84a 	bl	8004db8 <RCC_PLL_GetFreqDomain_SYS>
 8004d24:	6078      	str	r0, [r7, #4]
      break;
 8004d26:	e002      	b.n	8004d2e <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <RCC_GetSystemClockFreq+0x40>)
 8004d2a:	607b      	str	r3, [r7, #4]
      break;
 8004d2c:	bf00      	nop
  }

  return frequency;
 8004d2e:	687b      	ldr	r3, [r7, #4]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	007a1200 	.word	0x007a1200

08004d3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004d44:	f7ff ff68 	bl	8004c18 <LL_RCC_GetAHBPrescaler>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <RCC_GetHCLKClockFreq+0x28>)
 8004d52:	5cd3      	ldrb	r3, [r2, r3]
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	40d3      	lsrs	r3, r2
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	08007758 	.word	0x08007758

08004d68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004d70:	f7ff ff5e 	bl	8004c30 <LL_RCC_GetAPB1Prescaler>
 8004d74:	4603      	mov	r3, r0
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <RCC_GetPCLK1ClockFreq+0x24>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	40d3      	lsrs	r3, r2
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	08007768 	.word	0x08007768

08004d90 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004d98:	f7ff ff56 	bl	8004c48 <LL_RCC_GetAPB2Prescaler>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	0adb      	lsrs	r3, r3, #11
 8004da0:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <RCC_GetPCLK2ClockFreq+0x24>)
 8004da2:	5cd3      	ldrb	r3, [r2, r3]
 8004da4:	461a      	mov	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	40d3      	lsrs	r3, r2
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	08007768 	.word	0x08007768

08004db8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004dc6:	f7ff ff4b 	bl	8004c60 <LL_RCC_PLL_GetMainSource>
 8004dca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <RCC_PLL_GetFreqDomain_SYS+0x22>
 8004dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd6:	d003      	beq.n	8004de0 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8004dd8:	e00b      	b.n	8004df2 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004dda:	4b0d      	ldr	r3, [pc, #52]	; (8004e10 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004ddc:	607b      	str	r3, [r7, #4]
      break;
 8004dde:	e00b      	b.n	8004df8 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004de0:	f7ff ff56 	bl	8004c90 <LL_RCC_PLL_GetPrediv>
 8004de4:	4603      	mov	r3, r0
 8004de6:	3301      	adds	r3, #1
 8004de8:	4a0a      	ldr	r2, [pc, #40]	; (8004e14 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	607b      	str	r3, [r7, #4]
      break;
 8004df0:	e002      	b.n	8004df8 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004df4:	607b      	str	r3, [r7, #4]
      break;
 8004df6:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004df8:	f7ff ff3e 	bl	8004c78 <LL_RCC_PLL_GetMultiplicator>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	0c9b      	lsrs	r3, r3, #18
 8004e00:	3302      	adds	r3, #2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	003d0900 	.word	0x003d0900
 8004e14:	007a1200 	.word	0x007a1200

08004e18 <LL_TIM_SetPrescaler>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <LL_TIM_SetAutoReload>:
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <LL_TIM_SetRepetitionCounter>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <LL_TIM_OC_SetCompareCH1>:
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr

08004e80 <LL_TIM_OC_SetCompareCH2>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr

08004e9a <LL_TIM_OC_SetCompareCH3>:
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <LL_TIM_OC_SetCompareCH4>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr

08004ece <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	615a      	str	r2, [r3, #20]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <LL_TIM_Init+0xb0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <LL_TIM_Init+0x30>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0a:	d007      	beq.n	8004f1c <LL_TIM_Init+0x30>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <LL_TIM_Init+0xb4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <LL_TIM_Init+0x30>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a23      	ldr	r2, [pc, #140]	; (8004fa4 <LL_TIM_Init+0xb8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d106      	bne.n	8004f2a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <LL_TIM_Init+0xb0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <LL_TIM_Init+0x5e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f38:	d007      	beq.n	8004f4a <LL_TIM_Init+0x5e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <LL_TIM_Init+0xb4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <LL_TIM_Init+0x5e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <LL_TIM_Init+0xb8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d106      	bne.n	8004f58 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff64 	bl	8004e32 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ff51 	bl	8004e18 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a08      	ldr	r2, [pc, #32]	; (8004f9c <LL_TIM_Init+0xb0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d105      	bne.n	8004f8a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	7c1b      	ldrb	r3, [r3, #16]
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff61 	bl	8004e4c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff ff9f 	bl	8004ece <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800

08004fa8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d012      	beq.n	8004fe4 <LL_TIM_OC_Init+0x3c>
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d802      	bhi.n	8004fc8 <LL_TIM_OC_Init+0x20>
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d007      	beq.n	8004fd6 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004fc6:	e022      	b.n	800500e <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fcc:	d011      	beq.n	8004ff2 <LL_TIM_OC_Init+0x4a>
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd2:	d015      	beq.n	8005000 <LL_TIM_OC_Init+0x58>
      break;
 8004fd4:	e01b      	b.n	800500e <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f865 	bl	80050a8 <OC1Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe2:	e014      	b.n	800500e <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8c4 	bl	8005174 <OC2Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff0:	e00d      	b.n	800500e <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f927 	bl	8005248 <OC3Config>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ffe:	e006      	b.n	800500e <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f98a 	bl	800531c <OC4Config>
 8005008:	4603      	mov	r3, r0
 800500a:	75fb      	strb	r3, [r7, #23]
      break;
 800500c:	bf00      	nop
  }

  return result;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	7b12      	ldrb	r2, [r2, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	89d2      	ldrh	r2, [r2, #14]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f023 0202 	bic.w	r2, r3, #2
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0201 	bic.w	r2, r3, #1
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <OC1Config+0xc8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d11e      	bne.n	8005148 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 0208 	bic.w	r2, r3, #8
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0204 	bic.w	r2, r3, #4
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fe83 	bl	8004e66 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40012c00 	.word	0x40012c00

08005174 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0210 	bic.w	r2, r3, #16
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0220 	bic.w	r2, r3, #32
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0210 	bic.w	r2, r3, #16
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <OC2Config+0xd0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d11f      	bne.n	800521c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	019b      	lsls	r3, r3, #6
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	019b      	lsls	r3, r3, #6
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff fe26 	bl	8004e80 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40012c00 	.word	0x40012c00

08005248 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0303 	bic.w	r3, r3, #3
 8005276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <OC3Config+0xd0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d11f      	bne.n	80052ee <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	029b      	lsls	r3, r3, #10
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	029b      	lsls	r3, r3, #10
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	015b      	lsls	r3, r3, #5
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fdca 	bl	8004e9a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40012c00 	.word	0x40012c00

0800531c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	031b      	lsls	r3, r3, #12
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	031b      	lsls	r3, r3, #12
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <OC4Config+0xa0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d107      	bne.n	8005394 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	019b      	lsls	r3, r3, #6
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fd84 	bl	8004eb4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40012c00 	.word	0x40012c00

080053c0 <LL_USART_IsEnabled>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <LL_USART_SetStopBitsLength>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	611a      	str	r2, [r3, #16]
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <LL_USART_SetHWFlowCtrl>:
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	615a      	str	r2, [r3, #20]
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
	...

08005430 <LL_USART_SetBaudRate>:
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009a      	lsls	r2, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	4a25      	ldr	r2, [pc, #148]	; (80054e8 <LL_USART_SetBaudRate+0xb8>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	b29b      	uxth	r3, r3
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	b299      	uxth	r1, r3
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009a      	lsls	r2, r3, #2
 8005468:	441a      	add	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005472:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <LL_USART_SetBaudRate+0xb8>)
 8005474:	fba3 0302 	umull	r0, r3, r3, r2
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	2064      	movs	r0, #100	; 0x64
 800547c:	fb00 f303 	mul.w	r3, r0, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	3332      	adds	r3, #50	; 0x32
 8005486:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <LL_USART_SetBaudRate+0xb8>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	b29b      	uxth	r3, r3
 8005490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005494:	b29b      	uxth	r3, r3
 8005496:	440b      	add	r3, r1
 8005498:	b299      	uxth	r1, r3
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009a      	lsls	r2, r3, #2
 80054a4:	441a      	add	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ae:	4b0e      	ldr	r3, [pc, #56]	; (80054e8 <LL_USART_SetBaudRate+0xb8>)
 80054b0:	fba3 0302 	umull	r0, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	2064      	movs	r0, #100	; 0x64
 80054b8:	fb00 f303 	mul.w	r3, r0, r3
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	3332      	adds	r3, #50	; 0x32
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <LL_USART_SetBaudRate+0xb8>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	440b      	add	r3, r1
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	51eb851f 	.word	0x51eb851f

080054ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ff5e 	bl	80053c0 <LL_USART_IsEnabled>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d145      	bne.n	8005596 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005512:	f023 030c 	bic.w	r3, r3, #12
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	6851      	ldr	r1, [r2, #4]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	68d2      	ldr	r2, [r2, #12]
 800551e:	4311      	orrs	r1, r2
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	6912      	ldr	r2, [r2, #16]
 8005524:	430a      	orrs	r2, r1
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff ff57 	bl	80053e6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff ff63 	bl	800540a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005544:	f107 0308 	add.w	r3, r7, #8
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fbaf 	bl	8004cac <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a13      	ldr	r2, [pc, #76]	; (80055a0 <LL_USART_Init+0xb4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d102      	bne.n	800555c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	e00c      	b.n	8005576 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <LL_USART_Init+0xb8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d102      	bne.n	800556a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	e005      	b.n	8005576 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <LL_USART_Init+0xbc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d101      	bne.n	8005576 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00c      	beq.n	8005596 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8005584:	2300      	movs	r3, #0
 8005586:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	69b9      	ldr	r1, [r7, #24]
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ff4d 	bl	8005430 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005596:	7ffb      	ldrb	r3, [r7, #31]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40013800 	.word	0x40013800
 80055a4:	40004400 	.word	0x40004400
 80055a8:	40004800 	.word	0x40004800

080055ac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80055be:	4a07      	ldr	r2, [pc, #28]	; (80055dc <LL_InitTick+0x30>)
 80055c0:	3b01      	subs	r3, #1
 80055c2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <LL_InitTick+0x30>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055ca:	4b04      	ldr	r3, [pc, #16]	; (80055dc <LL_InitTick+0x30>)
 80055cc:	2205      	movs	r2, #5
 80055ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	e000e010 	.word	0xe000e010

080055e0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80055e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7ff ffdd 	bl	80055ac <LL_InitTick>
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005604:	4a03      	ldr	r2, [pc, #12]	; (8005614 <LL_SetSystemCoreClock+0x18>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6013      	str	r3, [r2, #0]
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr
 8005614:	20000014 	.word	0x20000014

08005618 <__errno>:
 8005618:	4b01      	ldr	r3, [pc, #4]	; (8005620 <__errno+0x8>)
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000018 	.word	0x20000018

08005624 <__libc_init_array>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	2500      	movs	r5, #0
 8005628:	4e0c      	ldr	r6, [pc, #48]	; (800565c <__libc_init_array+0x38>)
 800562a:	4c0d      	ldr	r4, [pc, #52]	; (8005660 <__libc_init_array+0x3c>)
 800562c:	1ba4      	subs	r4, r4, r6
 800562e:	10a4      	asrs	r4, r4, #2
 8005630:	42a5      	cmp	r5, r4
 8005632:	d109      	bne.n	8005648 <__libc_init_array+0x24>
 8005634:	f002 f86e 	bl	8007714 <_init>
 8005638:	2500      	movs	r5, #0
 800563a:	4e0a      	ldr	r6, [pc, #40]	; (8005664 <__libc_init_array+0x40>)
 800563c:	4c0a      	ldr	r4, [pc, #40]	; (8005668 <__libc_init_array+0x44>)
 800563e:	1ba4      	subs	r4, r4, r6
 8005640:	10a4      	asrs	r4, r4, #2
 8005642:	42a5      	cmp	r5, r4
 8005644:	d105      	bne.n	8005652 <__libc_init_array+0x2e>
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800564c:	4798      	blx	r3
 800564e:	3501      	adds	r5, #1
 8005650:	e7ee      	b.n	8005630 <__libc_init_array+0xc>
 8005652:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005656:	4798      	blx	r3
 8005658:	3501      	adds	r5, #1
 800565a:	e7f2      	b.n	8005642 <__libc_init_array+0x1e>
 800565c:	08007a00 	.word	0x08007a00
 8005660:	08007a00 	.word	0x08007a00
 8005664:	08007a00 	.word	0x08007a00
 8005668:	08007a04 	.word	0x08007a04

0800566c <memset>:
 800566c:	4603      	mov	r3, r0
 800566e:	4402      	add	r2, r0
 8005670:	4293      	cmp	r3, r2
 8005672:	d100      	bne.n	8005676 <memset+0xa>
 8005674:	4770      	bx	lr
 8005676:	f803 1b01 	strb.w	r1, [r3], #1
 800567a:	e7f9      	b.n	8005670 <memset+0x4>

0800567c <__cvt>:
 800567c:	2b00      	cmp	r3, #0
 800567e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005682:	461e      	mov	r6, r3
 8005684:	bfbb      	ittet	lt
 8005686:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800568a:	461e      	movlt	r6, r3
 800568c:	2300      	movge	r3, #0
 800568e:	232d      	movlt	r3, #45	; 0x2d
 8005690:	b088      	sub	sp, #32
 8005692:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005694:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005698:	f027 0720 	bic.w	r7, r7, #32
 800569c:	2f46      	cmp	r7, #70	; 0x46
 800569e:	4614      	mov	r4, r2
 80056a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056a2:	700b      	strb	r3, [r1, #0]
 80056a4:	d004      	beq.n	80056b0 <__cvt+0x34>
 80056a6:	2f45      	cmp	r7, #69	; 0x45
 80056a8:	d100      	bne.n	80056ac <__cvt+0x30>
 80056aa:	3501      	adds	r5, #1
 80056ac:	2302      	movs	r3, #2
 80056ae:	e000      	b.n	80056b2 <__cvt+0x36>
 80056b0:	2303      	movs	r3, #3
 80056b2:	aa07      	add	r2, sp, #28
 80056b4:	9204      	str	r2, [sp, #16]
 80056b6:	aa06      	add	r2, sp, #24
 80056b8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056bc:	e9cd 3500 	strd	r3, r5, [sp]
 80056c0:	4622      	mov	r2, r4
 80056c2:	4633      	mov	r3, r6
 80056c4:	f000 fc54 	bl	8005f70 <_dtoa_r>
 80056c8:	2f47      	cmp	r7, #71	; 0x47
 80056ca:	4680      	mov	r8, r0
 80056cc:	d102      	bne.n	80056d4 <__cvt+0x58>
 80056ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056d0:	07db      	lsls	r3, r3, #31
 80056d2:	d526      	bpl.n	8005722 <__cvt+0xa6>
 80056d4:	2f46      	cmp	r7, #70	; 0x46
 80056d6:	eb08 0905 	add.w	r9, r8, r5
 80056da:	d111      	bne.n	8005700 <__cvt+0x84>
 80056dc:	f898 3000 	ldrb.w	r3, [r8]
 80056e0:	2b30      	cmp	r3, #48	; 0x30
 80056e2:	d10a      	bne.n	80056fa <__cvt+0x7e>
 80056e4:	2200      	movs	r2, #0
 80056e6:	2300      	movs	r3, #0
 80056e8:	4620      	mov	r0, r4
 80056ea:	4631      	mov	r1, r6
 80056ec:	f7fb f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80056f0:	b918      	cbnz	r0, 80056fa <__cvt+0x7e>
 80056f2:	f1c5 0501 	rsb	r5, r5, #1
 80056f6:	f8ca 5000 	str.w	r5, [sl]
 80056fa:	f8da 3000 	ldr.w	r3, [sl]
 80056fe:	4499      	add	r9, r3
 8005700:	2200      	movs	r2, #0
 8005702:	2300      	movs	r3, #0
 8005704:	4620      	mov	r0, r4
 8005706:	4631      	mov	r1, r6
 8005708:	f7fb f94e 	bl	80009a8 <__aeabi_dcmpeq>
 800570c:	b938      	cbnz	r0, 800571e <__cvt+0xa2>
 800570e:	2230      	movs	r2, #48	; 0x30
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	454b      	cmp	r3, r9
 8005714:	d205      	bcs.n	8005722 <__cvt+0xa6>
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	9107      	str	r1, [sp, #28]
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	e7f8      	b.n	8005710 <__cvt+0x94>
 800571e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005722:	4640      	mov	r0, r8
 8005724:	9b07      	ldr	r3, [sp, #28]
 8005726:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005728:	eba3 0308 	sub.w	r3, r3, r8
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	b008      	add	sp, #32
 8005730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005734 <__exponent>:
 8005734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005736:	2900      	cmp	r1, #0
 8005738:	bfb4      	ite	lt
 800573a:	232d      	movlt	r3, #45	; 0x2d
 800573c:	232b      	movge	r3, #43	; 0x2b
 800573e:	4604      	mov	r4, r0
 8005740:	bfb8      	it	lt
 8005742:	4249      	neglt	r1, r1
 8005744:	2909      	cmp	r1, #9
 8005746:	f804 2b02 	strb.w	r2, [r4], #2
 800574a:	7043      	strb	r3, [r0, #1]
 800574c:	dd21      	ble.n	8005792 <__exponent+0x5e>
 800574e:	f10d 0307 	add.w	r3, sp, #7
 8005752:	461f      	mov	r7, r3
 8005754:	260a      	movs	r6, #10
 8005756:	fb91 f5f6 	sdiv	r5, r1, r6
 800575a:	fb06 1115 	mls	r1, r6, r5, r1
 800575e:	2d09      	cmp	r5, #9
 8005760:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005764:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005768:	f103 32ff 	add.w	r2, r3, #4294967295
 800576c:	4629      	mov	r1, r5
 800576e:	dc09      	bgt.n	8005784 <__exponent+0x50>
 8005770:	3130      	adds	r1, #48	; 0x30
 8005772:	3b02      	subs	r3, #2
 8005774:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005778:	42bb      	cmp	r3, r7
 800577a:	4622      	mov	r2, r4
 800577c:	d304      	bcc.n	8005788 <__exponent+0x54>
 800577e:	1a10      	subs	r0, r2, r0
 8005780:	b003      	add	sp, #12
 8005782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005784:	4613      	mov	r3, r2
 8005786:	e7e6      	b.n	8005756 <__exponent+0x22>
 8005788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800578c:	f804 2b01 	strb.w	r2, [r4], #1
 8005790:	e7f2      	b.n	8005778 <__exponent+0x44>
 8005792:	2330      	movs	r3, #48	; 0x30
 8005794:	4419      	add	r1, r3
 8005796:	7083      	strb	r3, [r0, #2]
 8005798:	1d02      	adds	r2, r0, #4
 800579a:	70c1      	strb	r1, [r0, #3]
 800579c:	e7ef      	b.n	800577e <__exponent+0x4a>
	...

080057a0 <_printf_float>:
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	b091      	sub	sp, #68	; 0x44
 80057a6:	460c      	mov	r4, r1
 80057a8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80057aa:	4693      	mov	fp, r2
 80057ac:	461e      	mov	r6, r3
 80057ae:	4605      	mov	r5, r0
 80057b0:	f001 fb0c 	bl	8006dcc <_localeconv_r>
 80057b4:	6803      	ldr	r3, [r0, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ba:	f7fa fcc9 	bl	8000150 <strlen>
 80057be:	2300      	movs	r3, #0
 80057c0:	930e      	str	r3, [sp, #56]	; 0x38
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	900a      	str	r0, [sp, #40]	; 0x28
 80057c6:	3307      	adds	r3, #7
 80057c8:	f023 0307 	bic.w	r3, r3, #7
 80057cc:	f103 0208 	add.w	r2, r3, #8
 80057d0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80057d4:	f8d4 a000 	ldr.w	sl, [r4]
 80057d8:	603a      	str	r2, [r7, #0]
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057e2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80057e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295
 80057f0:	4ba6      	ldr	r3, [pc, #664]	; (8005a8c <_printf_float+0x2ec>)
 80057f2:	4638      	mov	r0, r7
 80057f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057f6:	f7fb f909 	bl	8000a0c <__aeabi_dcmpun>
 80057fa:	bb68      	cbnz	r0, 8005858 <_printf_float+0xb8>
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005800:	4ba2      	ldr	r3, [pc, #648]	; (8005a8c <_printf_float+0x2ec>)
 8005802:	4638      	mov	r0, r7
 8005804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005806:	f7fb f8e3 	bl	80009d0 <__aeabi_dcmple>
 800580a:	bb28      	cbnz	r0, 8005858 <_printf_float+0xb8>
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	4638      	mov	r0, r7
 8005812:	4649      	mov	r1, r9
 8005814:	f7fb f8d2 	bl	80009bc <__aeabi_dcmplt>
 8005818:	b110      	cbz	r0, 8005820 <_printf_float+0x80>
 800581a:	232d      	movs	r3, #45	; 0x2d
 800581c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005820:	4f9b      	ldr	r7, [pc, #620]	; (8005a90 <_printf_float+0x2f0>)
 8005822:	4b9c      	ldr	r3, [pc, #624]	; (8005a94 <_printf_float+0x2f4>)
 8005824:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005828:	bf98      	it	ls
 800582a:	461f      	movls	r7, r3
 800582c:	2303      	movs	r3, #3
 800582e:	f04f 0900 	mov.w	r9, #0
 8005832:	6123      	str	r3, [r4, #16]
 8005834:	f02a 0304 	bic.w	r3, sl, #4
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	9600      	str	r6, [sp, #0]
 800583c:	465b      	mov	r3, fp
 800583e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005840:	4621      	mov	r1, r4
 8005842:	4628      	mov	r0, r5
 8005844:	f000 f9e2 	bl	8005c0c <_printf_common>
 8005848:	3001      	adds	r0, #1
 800584a:	f040 8090 	bne.w	800596e <_printf_float+0x1ce>
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	b011      	add	sp, #68	; 0x44
 8005854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005858:	463a      	mov	r2, r7
 800585a:	464b      	mov	r3, r9
 800585c:	4638      	mov	r0, r7
 800585e:	4649      	mov	r1, r9
 8005860:	f7fb f8d4 	bl	8000a0c <__aeabi_dcmpun>
 8005864:	b110      	cbz	r0, 800586c <_printf_float+0xcc>
 8005866:	4f8c      	ldr	r7, [pc, #560]	; (8005a98 <_printf_float+0x2f8>)
 8005868:	4b8c      	ldr	r3, [pc, #560]	; (8005a9c <_printf_float+0x2fc>)
 800586a:	e7db      	b.n	8005824 <_printf_float+0x84>
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005872:	1c59      	adds	r1, r3, #1
 8005874:	a80d      	add	r0, sp, #52	; 0x34
 8005876:	a90e      	add	r1, sp, #56	; 0x38
 8005878:	d140      	bne.n	80058fc <_printf_float+0x15c>
 800587a:	2306      	movs	r3, #6
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	f04f 0c00 	mov.w	ip, #0
 8005882:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005886:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	6022      	str	r2, [r4, #0]
 800588e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	463a      	mov	r2, r7
 8005896:	464b      	mov	r3, r9
 8005898:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800589c:	4628      	mov	r0, r5
 800589e:	f7ff feed 	bl	800567c <__cvt>
 80058a2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80058a6:	2b47      	cmp	r3, #71	; 0x47
 80058a8:	4607      	mov	r7, r0
 80058aa:	d109      	bne.n	80058c0 <_printf_float+0x120>
 80058ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ae:	1cd8      	adds	r0, r3, #3
 80058b0:	db02      	blt.n	80058b8 <_printf_float+0x118>
 80058b2:	6862      	ldr	r2, [r4, #4]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	dd47      	ble.n	8005948 <_printf_float+0x1a8>
 80058b8:	f1a8 0802 	sub.w	r8, r8, #2
 80058bc:	fa5f f888 	uxtb.w	r8, r8
 80058c0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80058c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058c6:	d824      	bhi.n	8005912 <_printf_float+0x172>
 80058c8:	3901      	subs	r1, #1
 80058ca:	4642      	mov	r2, r8
 80058cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058d0:	910d      	str	r1, [sp, #52]	; 0x34
 80058d2:	f7ff ff2f 	bl	8005734 <__exponent>
 80058d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058d8:	4681      	mov	r9, r0
 80058da:	1813      	adds	r3, r2, r0
 80058dc:	2a01      	cmp	r2, #1
 80058de:	6123      	str	r3, [r4, #16]
 80058e0:	dc02      	bgt.n	80058e8 <_printf_float+0x148>
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	07d1      	lsls	r1, r2, #31
 80058e6:	d501      	bpl.n	80058ec <_printf_float+0x14c>
 80058e8:	3301      	adds	r3, #1
 80058ea:	6123      	str	r3, [r4, #16]
 80058ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0a2      	beq.n	800583a <_printf_float+0x9a>
 80058f4:	232d      	movs	r3, #45	; 0x2d
 80058f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fa:	e79e      	b.n	800583a <_printf_float+0x9a>
 80058fc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005900:	f000 816e 	beq.w	8005be0 <_printf_float+0x440>
 8005904:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005908:	d1b9      	bne.n	800587e <_printf_float+0xde>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1b7      	bne.n	800587e <_printf_float+0xde>
 800590e:	2301      	movs	r3, #1
 8005910:	e7b4      	b.n	800587c <_printf_float+0xdc>
 8005912:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005916:	d119      	bne.n	800594c <_printf_float+0x1ac>
 8005918:	2900      	cmp	r1, #0
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	dd0c      	ble.n	8005938 <_printf_float+0x198>
 800591e:	6121      	str	r1, [r4, #16]
 8005920:	b913      	cbnz	r3, 8005928 <_printf_float+0x188>
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	07d2      	lsls	r2, r2, #31
 8005926:	d502      	bpl.n	800592e <_printf_float+0x18e>
 8005928:	3301      	adds	r3, #1
 800592a:	440b      	add	r3, r1
 800592c:	6123      	str	r3, [r4, #16]
 800592e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005930:	f04f 0900 	mov.w	r9, #0
 8005934:	65a3      	str	r3, [r4, #88]	; 0x58
 8005936:	e7d9      	b.n	80058ec <_printf_float+0x14c>
 8005938:	b913      	cbnz	r3, 8005940 <_printf_float+0x1a0>
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	07d0      	lsls	r0, r2, #31
 800593e:	d501      	bpl.n	8005944 <_printf_float+0x1a4>
 8005940:	3302      	adds	r3, #2
 8005942:	e7f3      	b.n	800592c <_printf_float+0x18c>
 8005944:	2301      	movs	r3, #1
 8005946:	e7f1      	b.n	800592c <_printf_float+0x18c>
 8005948:	f04f 0867 	mov.w	r8, #103	; 0x67
 800594c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005950:	4293      	cmp	r3, r2
 8005952:	db05      	blt.n	8005960 <_printf_float+0x1c0>
 8005954:	6822      	ldr	r2, [r4, #0]
 8005956:	6123      	str	r3, [r4, #16]
 8005958:	07d1      	lsls	r1, r2, #31
 800595a:	d5e8      	bpl.n	800592e <_printf_float+0x18e>
 800595c:	3301      	adds	r3, #1
 800595e:	e7e5      	b.n	800592c <_printf_float+0x18c>
 8005960:	2b00      	cmp	r3, #0
 8005962:	bfcc      	ite	gt
 8005964:	2301      	movgt	r3, #1
 8005966:	f1c3 0302 	rsble	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	e7de      	b.n	800592c <_printf_float+0x18c>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	055a      	lsls	r2, r3, #21
 8005972:	d407      	bmi.n	8005984 <_printf_float+0x1e4>
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	463a      	mov	r2, r7
 8005978:	4659      	mov	r1, fp
 800597a:	4628      	mov	r0, r5
 800597c:	47b0      	blx	r6
 800597e:	3001      	adds	r0, #1
 8005980:	d129      	bne.n	80059d6 <_printf_float+0x236>
 8005982:	e764      	b.n	800584e <_printf_float+0xae>
 8005984:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005988:	f240 80d7 	bls.w	8005b3a <_printf_float+0x39a>
 800598c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005990:	2200      	movs	r2, #0
 8005992:	2300      	movs	r3, #0
 8005994:	f7fb f808 	bl	80009a8 <__aeabi_dcmpeq>
 8005998:	b388      	cbz	r0, 80059fe <_printf_float+0x25e>
 800599a:	2301      	movs	r3, #1
 800599c:	4a40      	ldr	r2, [pc, #256]	; (8005aa0 <_printf_float+0x300>)
 800599e:	4659      	mov	r1, fp
 80059a0:	4628      	mov	r0, r5
 80059a2:	47b0      	blx	r6
 80059a4:	3001      	adds	r0, #1
 80059a6:	f43f af52 	beq.w	800584e <_printf_float+0xae>
 80059aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059ae:	429a      	cmp	r2, r3
 80059b0:	db02      	blt.n	80059b8 <_printf_float+0x218>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	07d8      	lsls	r0, r3, #31
 80059b6:	d50e      	bpl.n	80059d6 <_printf_float+0x236>
 80059b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059bc:	4659      	mov	r1, fp
 80059be:	4628      	mov	r0, r5
 80059c0:	47b0      	blx	r6
 80059c2:	3001      	adds	r0, #1
 80059c4:	f43f af43 	beq.w	800584e <_printf_float+0xae>
 80059c8:	2700      	movs	r7, #0
 80059ca:	f104 081a 	add.w	r8, r4, #26
 80059ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d0:	3b01      	subs	r3, #1
 80059d2:	42bb      	cmp	r3, r7
 80059d4:	dc09      	bgt.n	80059ea <_printf_float+0x24a>
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	079f      	lsls	r7, r3, #30
 80059da:	f100 80fd 	bmi.w	8005bd8 <_printf_float+0x438>
 80059de:	68e0      	ldr	r0, [r4, #12]
 80059e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059e2:	4298      	cmp	r0, r3
 80059e4:	bfb8      	it	lt
 80059e6:	4618      	movlt	r0, r3
 80059e8:	e733      	b.n	8005852 <_printf_float+0xb2>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4642      	mov	r2, r8
 80059ee:	4659      	mov	r1, fp
 80059f0:	4628      	mov	r0, r5
 80059f2:	47b0      	blx	r6
 80059f4:	3001      	adds	r0, #1
 80059f6:	f43f af2a 	beq.w	800584e <_printf_float+0xae>
 80059fa:	3701      	adds	r7, #1
 80059fc:	e7e7      	b.n	80059ce <_printf_float+0x22e>
 80059fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	dc2b      	bgt.n	8005a5c <_printf_float+0x2bc>
 8005a04:	2301      	movs	r3, #1
 8005a06:	4a26      	ldr	r2, [pc, #152]	; (8005aa0 <_printf_float+0x300>)
 8005a08:	4659      	mov	r1, fp
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	47b0      	blx	r6
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f af1d 	beq.w	800584e <_printf_float+0xae>
 8005a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a16:	b923      	cbnz	r3, 8005a22 <_printf_float+0x282>
 8005a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a1a:	b913      	cbnz	r3, 8005a22 <_printf_float+0x282>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	07d9      	lsls	r1, r3, #31
 8005a20:	d5d9      	bpl.n	80059d6 <_printf_float+0x236>
 8005a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a26:	4659      	mov	r1, fp
 8005a28:	4628      	mov	r0, r5
 8005a2a:	47b0      	blx	r6
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	f43f af0e 	beq.w	800584e <_printf_float+0xae>
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	f104 091a 	add.w	r9, r4, #26
 8005a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a3c:	425b      	negs	r3, r3
 8005a3e:	4543      	cmp	r3, r8
 8005a40:	dc01      	bgt.n	8005a46 <_printf_float+0x2a6>
 8005a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a44:	e797      	b.n	8005976 <_printf_float+0x1d6>
 8005a46:	2301      	movs	r3, #1
 8005a48:	464a      	mov	r2, r9
 8005a4a:	4659      	mov	r1, fp
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	47b0      	blx	r6
 8005a50:	3001      	adds	r0, #1
 8005a52:	f43f aefc 	beq.w	800584e <_printf_float+0xae>
 8005a56:	f108 0801 	add.w	r8, r8, #1
 8005a5a:	e7ee      	b.n	8005a3a <_printf_float+0x29a>
 8005a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bfa8      	it	ge
 8005a64:	461a      	movge	r2, r3
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	4690      	mov	r8, r2
 8005a6a:	dd07      	ble.n	8005a7c <_printf_float+0x2dc>
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	4659      	mov	r1, fp
 8005a70:	463a      	mov	r2, r7
 8005a72:	4628      	mov	r0, r5
 8005a74:	47b0      	blx	r6
 8005a76:	3001      	adds	r0, #1
 8005a78:	f43f aee9 	beq.w	800584e <_printf_float+0xae>
 8005a7c:	f104 031a 	add.w	r3, r4, #26
 8005a80:	f04f 0a00 	mov.w	sl, #0
 8005a84:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a8a:	e015      	b.n	8005ab8 <_printf_float+0x318>
 8005a8c:	7fefffff 	.word	0x7fefffff
 8005a90:	08007778 	.word	0x08007778
 8005a94:	08007774 	.word	0x08007774
 8005a98:	08007780 	.word	0x08007780
 8005a9c:	0800777c 	.word	0x0800777c
 8005aa0:	08007784 	.word	0x08007784
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005aa8:	4659      	mov	r1, fp
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b0      	blx	r6
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f aecd 	beq.w	800584e <_printf_float+0xae>
 8005ab4:	f10a 0a01 	add.w	sl, sl, #1
 8005ab8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005abc:	eba9 0308 	sub.w	r3, r9, r8
 8005ac0:	4553      	cmp	r3, sl
 8005ac2:	dcef      	bgt.n	8005aa4 <_printf_float+0x304>
 8005ac4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	444f      	add	r7, r9
 8005acc:	db14      	blt.n	8005af8 <_printf_float+0x358>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	07da      	lsls	r2, r3, #31
 8005ad2:	d411      	bmi.n	8005af8 <_printf_float+0x358>
 8005ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ad8:	eba3 0209 	sub.w	r2, r3, r9
 8005adc:	eba3 0901 	sub.w	r9, r3, r1
 8005ae0:	4591      	cmp	r9, r2
 8005ae2:	bfa8      	it	ge
 8005ae4:	4691      	movge	r9, r2
 8005ae6:	f1b9 0f00 	cmp.w	r9, #0
 8005aea:	dc0d      	bgt.n	8005b08 <_printf_float+0x368>
 8005aec:	2700      	movs	r7, #0
 8005aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005af2:	f104 081a 	add.w	r8, r4, #26
 8005af6:	e018      	b.n	8005b2a <_printf_float+0x38a>
 8005af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005afc:	4659      	mov	r1, fp
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b0      	blx	r6
 8005b02:	3001      	adds	r0, #1
 8005b04:	d1e6      	bne.n	8005ad4 <_printf_float+0x334>
 8005b06:	e6a2      	b.n	800584e <_printf_float+0xae>
 8005b08:	464b      	mov	r3, r9
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b0      	blx	r6
 8005b12:	3001      	adds	r0, #1
 8005b14:	d1ea      	bne.n	8005aec <_printf_float+0x34c>
 8005b16:	e69a      	b.n	800584e <_printf_float+0xae>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b0      	blx	r6
 8005b22:	3001      	adds	r0, #1
 8005b24:	f43f ae93 	beq.w	800584e <_printf_float+0xae>
 8005b28:	3701      	adds	r7, #1
 8005b2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	eba3 0309 	sub.w	r3, r3, r9
 8005b34:	42bb      	cmp	r3, r7
 8005b36:	dcef      	bgt.n	8005b18 <_printf_float+0x378>
 8005b38:	e74d      	b.n	80059d6 <_printf_float+0x236>
 8005b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b3c:	2a01      	cmp	r2, #1
 8005b3e:	dc01      	bgt.n	8005b44 <_printf_float+0x3a4>
 8005b40:	07db      	lsls	r3, r3, #31
 8005b42:	d538      	bpl.n	8005bb6 <_printf_float+0x416>
 8005b44:	2301      	movs	r3, #1
 8005b46:	463a      	mov	r2, r7
 8005b48:	4659      	mov	r1, fp
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b0      	blx	r6
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f43f ae7d 	beq.w	800584e <_printf_float+0xae>
 8005b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b58:	4659      	mov	r1, fp
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b0      	blx	r6
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f107 0701 	add.w	r7, r7, #1
 8005b64:	f43f ae73 	beq.w	800584e <_printf_float+0xae>
 8005b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f103 38ff 	add.w	r8, r3, #4294967295
 8005b74:	2300      	movs	r3, #0
 8005b76:	f7fa ff17 	bl	80009a8 <__aeabi_dcmpeq>
 8005b7a:	b9c0      	cbnz	r0, 8005bae <_printf_float+0x40e>
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4659      	mov	r1, fp
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b0      	blx	r6
 8005b86:	3001      	adds	r0, #1
 8005b88:	d10d      	bne.n	8005ba6 <_printf_float+0x406>
 8005b8a:	e660      	b.n	800584e <_printf_float+0xae>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4642      	mov	r2, r8
 8005b90:	4659      	mov	r1, fp
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b0      	blx	r6
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f ae59 	beq.w	800584e <_printf_float+0xae>
 8005b9c:	3701      	adds	r7, #1
 8005b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	42bb      	cmp	r3, r7
 8005ba4:	dcf2      	bgt.n	8005b8c <_printf_float+0x3ec>
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bac:	e6e4      	b.n	8005978 <_printf_float+0x1d8>
 8005bae:	2700      	movs	r7, #0
 8005bb0:	f104 081a 	add.w	r8, r4, #26
 8005bb4:	e7f3      	b.n	8005b9e <_printf_float+0x3fe>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e7e1      	b.n	8005b7e <_printf_float+0x3de>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	4659      	mov	r1, fp
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b0      	blx	r6
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f43f ae42 	beq.w	800584e <_printf_float+0xae>
 8005bca:	3701      	adds	r7, #1
 8005bcc:	68e3      	ldr	r3, [r4, #12]
 8005bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	42bb      	cmp	r3, r7
 8005bd4:	dcf1      	bgt.n	8005bba <_printf_float+0x41a>
 8005bd6:	e702      	b.n	80059de <_printf_float+0x23e>
 8005bd8:	2700      	movs	r7, #0
 8005bda:	f104 0819 	add.w	r8, r4, #25
 8005bde:	e7f5      	b.n	8005bcc <_printf_float+0x42c>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f43f ae94 	beq.w	800590e <_printf_float+0x16e>
 8005be6:	f04f 0c00 	mov.w	ip, #0
 8005bea:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005bee:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005bf8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	463a      	mov	r2, r7
 8005c00:	464b      	mov	r3, r9
 8005c02:	4628      	mov	r0, r5
 8005c04:	f7ff fd3a 	bl	800567c <__cvt>
 8005c08:	4607      	mov	r7, r0
 8005c0a:	e64f      	b.n	80058ac <_printf_float+0x10c>

08005c0c <_printf_common>:
 8005c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c10:	4691      	mov	r9, r2
 8005c12:	461f      	mov	r7, r3
 8005c14:	688a      	ldr	r2, [r1, #8]
 8005c16:	690b      	ldr	r3, [r1, #16]
 8005c18:	4606      	mov	r6, r0
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	bfb8      	it	lt
 8005c1e:	4613      	movlt	r3, r2
 8005c20:	f8c9 3000 	str.w	r3, [r9]
 8005c24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c28:	460c      	mov	r4, r1
 8005c2a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c2e:	b112      	cbz	r2, 8005c36 <_printf_common+0x2a>
 8005c30:	3301      	adds	r3, #1
 8005c32:	f8c9 3000 	str.w	r3, [r9]
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	0699      	lsls	r1, r3, #26
 8005c3a:	bf42      	ittt	mi
 8005c3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c40:	3302      	addmi	r3, #2
 8005c42:	f8c9 3000 	strmi.w	r3, [r9]
 8005c46:	6825      	ldr	r5, [r4, #0]
 8005c48:	f015 0506 	ands.w	r5, r5, #6
 8005c4c:	d107      	bne.n	8005c5e <_printf_common+0x52>
 8005c4e:	f104 0a19 	add.w	sl, r4, #25
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	f8d9 2000 	ldr.w	r2, [r9]
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	42ab      	cmp	r3, r5
 8005c5c:	dc29      	bgt.n	8005cb2 <_printf_common+0xa6>
 8005c5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	3300      	adds	r3, #0
 8005c66:	bf18      	it	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	0692      	lsls	r2, r2, #26
 8005c6c:	d42e      	bmi.n	8005ccc <_printf_common+0xc0>
 8005c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c72:	4639      	mov	r1, r7
 8005c74:	4630      	mov	r0, r6
 8005c76:	47c0      	blx	r8
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d021      	beq.n	8005cc0 <_printf_common+0xb4>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	68e5      	ldr	r5, [r4, #12]
 8005c80:	f003 0306 	and.w	r3, r3, #6
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	bf18      	it	ne
 8005c88:	2500      	movne	r5, #0
 8005c8a:	f8d9 2000 	ldr.w	r2, [r9]
 8005c8e:	f04f 0900 	mov.w	r9, #0
 8005c92:	bf08      	it	eq
 8005c94:	1aad      	subeq	r5, r5, r2
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	6922      	ldr	r2, [r4, #16]
 8005c9a:	bf08      	it	eq
 8005c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	bfc4      	itt	gt
 8005ca4:	1a9b      	subgt	r3, r3, r2
 8005ca6:	18ed      	addgt	r5, r5, r3
 8005ca8:	341a      	adds	r4, #26
 8005caa:	454d      	cmp	r5, r9
 8005cac:	d11a      	bne.n	8005ce4 <_printf_common+0xd8>
 8005cae:	2000      	movs	r0, #0
 8005cb0:	e008      	b.n	8005cc4 <_printf_common+0xb8>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4652      	mov	r2, sl
 8005cb6:	4639      	mov	r1, r7
 8005cb8:	4630      	mov	r0, r6
 8005cba:	47c0      	blx	r8
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d103      	bne.n	8005cc8 <_printf_common+0xbc>
 8005cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc8:	3501      	adds	r5, #1
 8005cca:	e7c2      	b.n	8005c52 <_printf_common+0x46>
 8005ccc:	2030      	movs	r0, #48	; 0x30
 8005cce:	18e1      	adds	r1, r4, r3
 8005cd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cda:	4422      	add	r2, r4
 8005cdc:	3302      	adds	r3, #2
 8005cde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ce2:	e7c4      	b.n	8005c6e <_printf_common+0x62>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	4639      	mov	r1, r7
 8005cea:	4630      	mov	r0, r6
 8005cec:	47c0      	blx	r8
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d0e6      	beq.n	8005cc0 <_printf_common+0xb4>
 8005cf2:	f109 0901 	add.w	r9, r9, #1
 8005cf6:	e7d8      	b.n	8005caa <_printf_common+0x9e>

08005cf8 <setvbuf>:
 8005cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cfc:	461d      	mov	r5, r3
 8005cfe:	4b51      	ldr	r3, [pc, #324]	; (8005e44 <setvbuf+0x14c>)
 8005d00:	4604      	mov	r4, r0
 8005d02:	681e      	ldr	r6, [r3, #0]
 8005d04:	460f      	mov	r7, r1
 8005d06:	4690      	mov	r8, r2
 8005d08:	b126      	cbz	r6, 8005d14 <setvbuf+0x1c>
 8005d0a:	69b3      	ldr	r3, [r6, #24]
 8005d0c:	b913      	cbnz	r3, 8005d14 <setvbuf+0x1c>
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f000 ffd2 	bl	8006cb8 <__sinit>
 8005d14:	4b4c      	ldr	r3, [pc, #304]	; (8005e48 <setvbuf+0x150>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d152      	bne.n	8005dc0 <setvbuf+0xc8>
 8005d1a:	6874      	ldr	r4, [r6, #4]
 8005d1c:	f1b8 0f02 	cmp.w	r8, #2
 8005d20:	d006      	beq.n	8005d30 <setvbuf+0x38>
 8005d22:	f1b8 0f01 	cmp.w	r8, #1
 8005d26:	f200 8089 	bhi.w	8005e3c <setvbuf+0x144>
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	f2c0 8086 	blt.w	8005e3c <setvbuf+0x144>
 8005d30:	4621      	mov	r1, r4
 8005d32:	4630      	mov	r0, r6
 8005d34:	f000 ff56 	bl	8006be4 <_fflush_r>
 8005d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d3a:	b141      	cbz	r1, 8005d4e <setvbuf+0x56>
 8005d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d40:	4299      	cmp	r1, r3
 8005d42:	d002      	beq.n	8005d4a <setvbuf+0x52>
 8005d44:	4630      	mov	r0, r6
 8005d46:	f001 fb71 	bl	800742c <_free_r>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d4e:	2300      	movs	r3, #0
 8005d50:	61a3      	str	r3, [r4, #24]
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	d503      	bpl.n	8005d62 <setvbuf+0x6a>
 8005d5a:	6921      	ldr	r1, [r4, #16]
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	f001 fb65 	bl	800742c <_free_r>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	f1b8 0f02 	cmp.w	r8, #2
 8005d68:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005d6c:	f023 0303 	bic.w	r3, r3, #3
 8005d70:	81a3      	strh	r3, [r4, #12]
 8005d72:	d05d      	beq.n	8005e30 <setvbuf+0x138>
 8005d74:	ab01      	add	r3, sp, #4
 8005d76:	466a      	mov	r2, sp
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f001 f834 	bl	8006de8 <__swhatbuf_r>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	4318      	orrs	r0, r3
 8005d84:	81a0      	strh	r0, [r4, #12]
 8005d86:	bb2d      	cbnz	r5, 8005dd4 <setvbuf+0xdc>
 8005d88:	9d00      	ldr	r5, [sp, #0]
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f001 f850 	bl	8006e30 <malloc>
 8005d90:	4607      	mov	r7, r0
 8005d92:	2800      	cmp	r0, #0
 8005d94:	d14e      	bne.n	8005e34 <setvbuf+0x13c>
 8005d96:	f8dd 9000 	ldr.w	r9, [sp]
 8005d9a:	45a9      	cmp	r9, r5
 8005d9c:	d13c      	bne.n	8005e18 <setvbuf+0x120>
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	f043 0302 	orr.w	r3, r3, #2
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	2300      	movs	r3, #0
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	2301      	movs	r3, #1
 8005db8:	6163      	str	r3, [r4, #20]
 8005dba:	b003      	add	sp, #12
 8005dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dc0:	4b22      	ldr	r3, [pc, #136]	; (8005e4c <setvbuf+0x154>)
 8005dc2:	429c      	cmp	r4, r3
 8005dc4:	d101      	bne.n	8005dca <setvbuf+0xd2>
 8005dc6:	68b4      	ldr	r4, [r6, #8]
 8005dc8:	e7a8      	b.n	8005d1c <setvbuf+0x24>
 8005dca:	4b21      	ldr	r3, [pc, #132]	; (8005e50 <setvbuf+0x158>)
 8005dcc:	429c      	cmp	r4, r3
 8005dce:	bf08      	it	eq
 8005dd0:	68f4      	ldreq	r4, [r6, #12]
 8005dd2:	e7a3      	b.n	8005d1c <setvbuf+0x24>
 8005dd4:	2f00      	cmp	r7, #0
 8005dd6:	d0d8      	beq.n	8005d8a <setvbuf+0x92>
 8005dd8:	69b3      	ldr	r3, [r6, #24]
 8005dda:	b913      	cbnz	r3, 8005de2 <setvbuf+0xea>
 8005ddc:	4630      	mov	r0, r6
 8005dde:	f000 ff6b 	bl	8006cb8 <__sinit>
 8005de2:	f1b8 0f01 	cmp.w	r8, #1
 8005de6:	bf08      	it	eq
 8005de8:	89a3      	ldrheq	r3, [r4, #12]
 8005dea:	6027      	str	r7, [r4, #0]
 8005dec:	bf04      	itt	eq
 8005dee:	f043 0301 	orreq.w	r3, r3, #1
 8005df2:	81a3      	strheq	r3, [r4, #12]
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005dfa:	f013 0008 	ands.w	r0, r3, #8
 8005dfe:	d01b      	beq.n	8005e38 <setvbuf+0x140>
 8005e00:	f013 0001 	ands.w	r0, r3, #1
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	bf1f      	itttt	ne
 8005e0a:	426d      	negne	r5, r5
 8005e0c:	60a3      	strne	r3, [r4, #8]
 8005e0e:	61a5      	strne	r5, [r4, #24]
 8005e10:	4618      	movne	r0, r3
 8005e12:	bf08      	it	eq
 8005e14:	60a5      	streq	r5, [r4, #8]
 8005e16:	e7d0      	b.n	8005dba <setvbuf+0xc2>
 8005e18:	4648      	mov	r0, r9
 8005e1a:	f001 f809 	bl	8006e30 <malloc>
 8005e1e:	4607      	mov	r7, r0
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d0bc      	beq.n	8005d9e <setvbuf+0xa6>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	464d      	mov	r5, r9
 8005e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	e7d3      	b.n	8005dd8 <setvbuf+0xe0>
 8005e30:	2000      	movs	r0, #0
 8005e32:	e7b6      	b.n	8005da2 <setvbuf+0xaa>
 8005e34:	46a9      	mov	r9, r5
 8005e36:	e7f5      	b.n	8005e24 <setvbuf+0x12c>
 8005e38:	60a0      	str	r0, [r4, #8]
 8005e3a:	e7be      	b.n	8005dba <setvbuf+0xc2>
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	e7bb      	b.n	8005dba <setvbuf+0xc2>
 8005e42:	bf00      	nop
 8005e44:	20000018 	.word	0x20000018
 8005e48:	080077b4 	.word	0x080077b4
 8005e4c:	080077d4 	.word	0x080077d4
 8005e50:	08007794 	.word	0x08007794

08005e54 <quorem>:
 8005e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	6903      	ldr	r3, [r0, #16]
 8005e5a:	690c      	ldr	r4, [r1, #16]
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	42a3      	cmp	r3, r4
 8005e60:	f2c0 8084 	blt.w	8005f6c <quorem+0x118>
 8005e64:	3c01      	subs	r4, #1
 8005e66:	f101 0714 	add.w	r7, r1, #20
 8005e6a:	f100 0614 	add.w	r6, r0, #20
 8005e6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005e76:	3501      	adds	r5, #1
 8005e78:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e7c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005e80:	eb06 030c 	add.w	r3, r6, ip
 8005e84:	eb07 090c 	add.w	r9, r7, ip
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	b39d      	cbz	r5, 8005ef4 <quorem+0xa0>
 8005e8c:	f04f 0a00 	mov.w	sl, #0
 8005e90:	4638      	mov	r0, r7
 8005e92:	46b6      	mov	lr, r6
 8005e94:	46d3      	mov	fp, sl
 8005e96:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e9a:	b293      	uxth	r3, r2
 8005e9c:	fb05 a303 	mla	r3, r5, r3, sl
 8005ea0:	0c12      	lsrs	r2, r2, #16
 8005ea2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ea6:	fb05 a202 	mla	r2, r5, r2, sl
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	ebab 0303 	sub.w	r3, fp, r3
 8005eb0:	f8de b000 	ldr.w	fp, [lr]
 8005eb4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005eb8:	fa1f fb8b 	uxth.w	fp, fp
 8005ebc:	445b      	add	r3, fp
 8005ebe:	fa1f fb82 	uxth.w	fp, r2
 8005ec2:	f8de 2000 	ldr.w	r2, [lr]
 8005ec6:	4581      	cmp	r9, r0
 8005ec8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005eda:	f84e 3b04 	str.w	r3, [lr], #4
 8005ede:	d2da      	bcs.n	8005e96 <quorem+0x42>
 8005ee0:	f856 300c 	ldr.w	r3, [r6, ip]
 8005ee4:	b933      	cbnz	r3, 8005ef4 <quorem+0xa0>
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	3b04      	subs	r3, #4
 8005eea:	429e      	cmp	r6, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	d331      	bcc.n	8005f54 <quorem+0x100>
 8005ef0:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	f001 f9c3 	bl	8007280 <__mcmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	db26      	blt.n	8005f4c <quorem+0xf8>
 8005efe:	4630      	mov	r0, r6
 8005f00:	f04f 0c00 	mov.w	ip, #0
 8005f04:	3501      	adds	r5, #1
 8005f06:	f857 1b04 	ldr.w	r1, [r7], #4
 8005f0a:	f8d0 e000 	ldr.w	lr, [r0]
 8005f0e:	b28b      	uxth	r3, r1
 8005f10:	ebac 0303 	sub.w	r3, ip, r3
 8005f14:	fa1f f28e 	uxth.w	r2, lr
 8005f18:	4413      	add	r3, r2
 8005f1a:	0c0a      	lsrs	r2, r1, #16
 8005f1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f2a:	45b9      	cmp	r9, r7
 8005f2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f30:	f840 3b04 	str.w	r3, [r0], #4
 8005f34:	d2e7      	bcs.n	8005f06 <quorem+0xb2>
 8005f36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005f3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005f3e:	b92a      	cbnz	r2, 8005f4c <quorem+0xf8>
 8005f40:	3b04      	subs	r3, #4
 8005f42:	429e      	cmp	r6, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	d30b      	bcc.n	8005f60 <quorem+0x10c>
 8005f48:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	b003      	add	sp, #12
 8005f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	3b04      	subs	r3, #4
 8005f58:	2a00      	cmp	r2, #0
 8005f5a:	d1c9      	bne.n	8005ef0 <quorem+0x9c>
 8005f5c:	3c01      	subs	r4, #1
 8005f5e:	e7c4      	b.n	8005eea <quorem+0x96>
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	3b04      	subs	r3, #4
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d1ef      	bne.n	8005f48 <quorem+0xf4>
 8005f68:	3c01      	subs	r4, #1
 8005f6a:	e7ea      	b.n	8005f42 <quorem+0xee>
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e7ee      	b.n	8005f4e <quorem+0xfa>

08005f70 <_dtoa_r>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	4616      	mov	r6, r2
 8005f76:	461f      	mov	r7, r3
 8005f78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f7a:	b095      	sub	sp, #84	; 0x54
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005f82:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f86:	b93d      	cbnz	r5, 8005f98 <_dtoa_r+0x28>
 8005f88:	2010      	movs	r0, #16
 8005f8a:	f000 ff51 	bl	8006e30 <malloc>
 8005f8e:	6260      	str	r0, [r4, #36]	; 0x24
 8005f90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f94:	6005      	str	r5, [r0, #0]
 8005f96:	60c5      	str	r5, [r0, #12]
 8005f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f9a:	6819      	ldr	r1, [r3, #0]
 8005f9c:	b151      	cbz	r1, 8005fb4 <_dtoa_r+0x44>
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4093      	lsls	r3, r2
 8005fa4:	604a      	str	r2, [r1, #4]
 8005fa6:	608b      	str	r3, [r1, #8]
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 ff88 	bl	8006ebe <_Bfree>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	1e3b      	subs	r3, r7, #0
 8005fb6:	bfaf      	iteee	ge
 8005fb8:	2300      	movge	r3, #0
 8005fba:	2201      	movlt	r2, #1
 8005fbc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fc0:	9303      	strlt	r3, [sp, #12]
 8005fc2:	bfac      	ite	ge
 8005fc4:	f8c8 3000 	strge.w	r3, [r8]
 8005fc8:	f8c8 2000 	strlt.w	r2, [r8]
 8005fcc:	4bae      	ldr	r3, [pc, #696]	; (8006288 <_dtoa_r+0x318>)
 8005fce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005fd2:	ea33 0308 	bics.w	r3, r3, r8
 8005fd6:	d11b      	bne.n	8006010 <_dtoa_r+0xa0>
 8005fd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	9b02      	ldr	r3, [sp, #8]
 8005fe2:	b923      	cbnz	r3, 8005fee <_dtoa_r+0x7e>
 8005fe4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	f000 8545 	beq.w	8006a78 <_dtoa_r+0xb08>
 8005fee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ff0:	b953      	cbnz	r3, 8006008 <_dtoa_r+0x98>
 8005ff2:	4ba6      	ldr	r3, [pc, #664]	; (800628c <_dtoa_r+0x31c>)
 8005ff4:	e021      	b.n	800603a <_dtoa_r+0xca>
 8005ff6:	4ba6      	ldr	r3, [pc, #664]	; (8006290 <_dtoa_r+0x320>)
 8005ff8:	9306      	str	r3, [sp, #24]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	9806      	ldr	r0, [sp, #24]
 8006002:	b015      	add	sp, #84	; 0x54
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	4ba0      	ldr	r3, [pc, #640]	; (800628c <_dtoa_r+0x31c>)
 800600a:	9306      	str	r3, [sp, #24]
 800600c:	3303      	adds	r3, #3
 800600e:	e7f5      	b.n	8005ffc <_dtoa_r+0x8c>
 8006010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	2300      	movs	r3, #0
 8006018:	4630      	mov	r0, r6
 800601a:	4639      	mov	r1, r7
 800601c:	f7fa fcc4 	bl	80009a8 <__aeabi_dcmpeq>
 8006020:	4682      	mov	sl, r0
 8006022:	b160      	cbz	r0, 800603e <_dtoa_r+0xce>
 8006024:	2301      	movs	r3, #1
 8006026:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 8520 	beq.w	8006a72 <_dtoa_r+0xb02>
 8006032:	4b98      	ldr	r3, [pc, #608]	; (8006294 <_dtoa_r+0x324>)
 8006034:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	3b01      	subs	r3, #1
 800603a:	9306      	str	r3, [sp, #24]
 800603c:	e7e0      	b.n	8006000 <_dtoa_r+0x90>
 800603e:	ab12      	add	r3, sp, #72	; 0x48
 8006040:	9301      	str	r3, [sp, #4]
 8006042:	ab13      	add	r3, sp, #76	; 0x4c
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4632      	mov	r2, r6
 8006048:	463b      	mov	r3, r7
 800604a:	4620      	mov	r0, r4
 800604c:	f001 f990 	bl	8007370 <__d2b>
 8006050:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006054:	4683      	mov	fp, r0
 8006056:	2d00      	cmp	r5, #0
 8006058:	d07d      	beq.n	8006156 <_dtoa_r+0x1e6>
 800605a:	46b0      	mov	r8, r6
 800605c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006060:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006064:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006068:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800606c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006070:	2200      	movs	r2, #0
 8006072:	4b89      	ldr	r3, [pc, #548]	; (8006298 <_dtoa_r+0x328>)
 8006074:	4640      	mov	r0, r8
 8006076:	4649      	mov	r1, r9
 8006078:	f7fa f876 	bl	8000168 <__aeabi_dsub>
 800607c:	a37c      	add	r3, pc, #496	; (adr r3, 8006270 <_dtoa_r+0x300>)
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f7fa fa29 	bl	80004d8 <__aeabi_dmul>
 8006086:	a37c      	add	r3, pc, #496	; (adr r3, 8006278 <_dtoa_r+0x308>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f7fa f86e 	bl	800016c <__adddf3>
 8006090:	4606      	mov	r6, r0
 8006092:	4628      	mov	r0, r5
 8006094:	460f      	mov	r7, r1
 8006096:	f7fa f9b5 	bl	8000404 <__aeabi_i2d>
 800609a:	a379      	add	r3, pc, #484	; (adr r3, 8006280 <_dtoa_r+0x310>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa fa1a 	bl	80004d8 <__aeabi_dmul>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4630      	mov	r0, r6
 80060aa:	4639      	mov	r1, r7
 80060ac:	f7fa f85e 	bl	800016c <__adddf3>
 80060b0:	4606      	mov	r6, r0
 80060b2:	460f      	mov	r7, r1
 80060b4:	f7fa fcc0 	bl	8000a38 <__aeabi_d2iz>
 80060b8:	2200      	movs	r2, #0
 80060ba:	4682      	mov	sl, r0
 80060bc:	2300      	movs	r3, #0
 80060be:	4630      	mov	r0, r6
 80060c0:	4639      	mov	r1, r7
 80060c2:	f7fa fc7b 	bl	80009bc <__aeabi_dcmplt>
 80060c6:	b148      	cbz	r0, 80060dc <_dtoa_r+0x16c>
 80060c8:	4650      	mov	r0, sl
 80060ca:	f7fa f99b 	bl	8000404 <__aeabi_i2d>
 80060ce:	4632      	mov	r2, r6
 80060d0:	463b      	mov	r3, r7
 80060d2:	f7fa fc69 	bl	80009a8 <__aeabi_dcmpeq>
 80060d6:	b908      	cbnz	r0, 80060dc <_dtoa_r+0x16c>
 80060d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060dc:	f1ba 0f16 	cmp.w	sl, #22
 80060e0:	d85a      	bhi.n	8006198 <_dtoa_r+0x228>
 80060e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060e6:	496d      	ldr	r1, [pc, #436]	; (800629c <_dtoa_r+0x32c>)
 80060e8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80060ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060f0:	f7fa fc82 	bl	80009f8 <__aeabi_dcmpgt>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d051      	beq.n	800619c <_dtoa_r+0x22c>
 80060f8:	2300      	movs	r3, #0
 80060fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006102:	1b5d      	subs	r5, r3, r5
 8006104:	1e6b      	subs	r3, r5, #1
 8006106:	9307      	str	r3, [sp, #28]
 8006108:	bf43      	ittte	mi
 800610a:	2300      	movmi	r3, #0
 800610c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006110:	9307      	strmi	r3, [sp, #28]
 8006112:	f04f 0900 	movpl.w	r9, #0
 8006116:	f1ba 0f00 	cmp.w	sl, #0
 800611a:	db41      	blt.n	80061a0 <_dtoa_r+0x230>
 800611c:	9b07      	ldr	r3, [sp, #28]
 800611e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006122:	4453      	add	r3, sl
 8006124:	9307      	str	r3, [sp, #28]
 8006126:	2300      	movs	r3, #0
 8006128:	9308      	str	r3, [sp, #32]
 800612a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800612c:	2b09      	cmp	r3, #9
 800612e:	f200 808f 	bhi.w	8006250 <_dtoa_r+0x2e0>
 8006132:	2b05      	cmp	r3, #5
 8006134:	bfc4      	itt	gt
 8006136:	3b04      	subgt	r3, #4
 8006138:	931e      	strgt	r3, [sp, #120]	; 0x78
 800613a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800613c:	bfc8      	it	gt
 800613e:	2500      	movgt	r5, #0
 8006140:	f1a3 0302 	sub.w	r3, r3, #2
 8006144:	bfd8      	it	le
 8006146:	2501      	movle	r5, #1
 8006148:	2b03      	cmp	r3, #3
 800614a:	f200 808d 	bhi.w	8006268 <_dtoa_r+0x2f8>
 800614e:	e8df f003 	tbb	[pc, r3]
 8006152:	7d7b      	.short	0x7d7b
 8006154:	6f2f      	.short	0x6f2f
 8006156:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800615a:	441d      	add	r5, r3
 800615c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006160:	2820      	cmp	r0, #32
 8006162:	dd13      	ble.n	800618c <_dtoa_r+0x21c>
 8006164:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006168:	9b02      	ldr	r3, [sp, #8]
 800616a:	fa08 f800 	lsl.w	r8, r8, r0
 800616e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006172:	fa23 f000 	lsr.w	r0, r3, r0
 8006176:	ea48 0000 	orr.w	r0, r8, r0
 800617a:	f7fa f933 	bl	80003e4 <__aeabi_ui2d>
 800617e:	2301      	movs	r3, #1
 8006180:	4680      	mov	r8, r0
 8006182:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006186:	3d01      	subs	r5, #1
 8006188:	9310      	str	r3, [sp, #64]	; 0x40
 800618a:	e771      	b.n	8006070 <_dtoa_r+0x100>
 800618c:	9b02      	ldr	r3, [sp, #8]
 800618e:	f1c0 0020 	rsb	r0, r0, #32
 8006192:	fa03 f000 	lsl.w	r0, r3, r0
 8006196:	e7f0      	b.n	800617a <_dtoa_r+0x20a>
 8006198:	2301      	movs	r3, #1
 800619a:	e7b0      	b.n	80060fe <_dtoa_r+0x18e>
 800619c:	900d      	str	r0, [sp, #52]	; 0x34
 800619e:	e7af      	b.n	8006100 <_dtoa_r+0x190>
 80061a0:	f1ca 0300 	rsb	r3, sl, #0
 80061a4:	9308      	str	r3, [sp, #32]
 80061a6:	2300      	movs	r3, #0
 80061a8:	eba9 090a 	sub.w	r9, r9, sl
 80061ac:	930c      	str	r3, [sp, #48]	; 0x30
 80061ae:	e7bc      	b.n	800612a <_dtoa_r+0x1ba>
 80061b0:	2301      	movs	r3, #1
 80061b2:	9309      	str	r3, [sp, #36]	; 0x24
 80061b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	dd74      	ble.n	80062a4 <_dtoa_r+0x334>
 80061ba:	4698      	mov	r8, r3
 80061bc:	9304      	str	r3, [sp, #16]
 80061be:	2200      	movs	r2, #0
 80061c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061c2:	6072      	str	r2, [r6, #4]
 80061c4:	2204      	movs	r2, #4
 80061c6:	f102 0014 	add.w	r0, r2, #20
 80061ca:	4298      	cmp	r0, r3
 80061cc:	6871      	ldr	r1, [r6, #4]
 80061ce:	d96e      	bls.n	80062ae <_dtoa_r+0x33e>
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fe40 	bl	8006e56 <_Balloc>
 80061d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d8:	6030      	str	r0, [r6, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f1b8 0f0e 	cmp.w	r8, #14
 80061e0:	9306      	str	r3, [sp, #24]
 80061e2:	f200 80ed 	bhi.w	80063c0 <_dtoa_r+0x450>
 80061e6:	2d00      	cmp	r5, #0
 80061e8:	f000 80ea 	beq.w	80063c0 <_dtoa_r+0x450>
 80061ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061f0:	f1ba 0f00 	cmp.w	sl, #0
 80061f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80061f8:	dd77      	ble.n	80062ea <_dtoa_r+0x37a>
 80061fa:	4a28      	ldr	r2, [pc, #160]	; (800629c <_dtoa_r+0x32c>)
 80061fc:	f00a 030f 	and.w	r3, sl, #15
 8006200:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006204:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006208:	06f0      	lsls	r0, r6, #27
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006212:	d568      	bpl.n	80062e6 <_dtoa_r+0x376>
 8006214:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006218:	4b21      	ldr	r3, [pc, #132]	; (80062a0 <_dtoa_r+0x330>)
 800621a:	2503      	movs	r5, #3
 800621c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006220:	f7fa fa84 	bl	800072c <__aeabi_ddiv>
 8006224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006228:	f006 060f 	and.w	r6, r6, #15
 800622c:	4f1c      	ldr	r7, [pc, #112]	; (80062a0 <_dtoa_r+0x330>)
 800622e:	e04f      	b.n	80062d0 <_dtoa_r+0x360>
 8006230:	2301      	movs	r3, #1
 8006232:	9309      	str	r3, [sp, #36]	; 0x24
 8006234:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006236:	4453      	add	r3, sl
 8006238:	f103 0801 	add.w	r8, r3, #1
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	4643      	mov	r3, r8
 8006240:	2b01      	cmp	r3, #1
 8006242:	bfb8      	it	lt
 8006244:	2301      	movlt	r3, #1
 8006246:	e7ba      	b.n	80061be <_dtoa_r+0x24e>
 8006248:	2300      	movs	r3, #0
 800624a:	e7b2      	b.n	80061b2 <_dtoa_r+0x242>
 800624c:	2300      	movs	r3, #0
 800624e:	e7f0      	b.n	8006232 <_dtoa_r+0x2c2>
 8006250:	2501      	movs	r5, #1
 8006252:	2300      	movs	r3, #0
 8006254:	9509      	str	r5, [sp, #36]	; 0x24
 8006256:	931e      	str	r3, [sp, #120]	; 0x78
 8006258:	f04f 33ff 	mov.w	r3, #4294967295
 800625c:	2200      	movs	r2, #0
 800625e:	9304      	str	r3, [sp, #16]
 8006260:	4698      	mov	r8, r3
 8006262:	2312      	movs	r3, #18
 8006264:	921f      	str	r2, [sp, #124]	; 0x7c
 8006266:	e7aa      	b.n	80061be <_dtoa_r+0x24e>
 8006268:	2301      	movs	r3, #1
 800626a:	9309      	str	r3, [sp, #36]	; 0x24
 800626c:	e7f4      	b.n	8006258 <_dtoa_r+0x2e8>
 800626e:	bf00      	nop
 8006270:	636f4361 	.word	0x636f4361
 8006274:	3fd287a7 	.word	0x3fd287a7
 8006278:	8b60c8b3 	.word	0x8b60c8b3
 800627c:	3fc68a28 	.word	0x3fc68a28
 8006280:	509f79fb 	.word	0x509f79fb
 8006284:	3fd34413 	.word	0x3fd34413
 8006288:	7ff00000 	.word	0x7ff00000
 800628c:	0800778f 	.word	0x0800778f
 8006290:	08007786 	.word	0x08007786
 8006294:	08007785 	.word	0x08007785
 8006298:	3ff80000 	.word	0x3ff80000
 800629c:	08007820 	.word	0x08007820
 80062a0:	080077f8 	.word	0x080077f8
 80062a4:	2301      	movs	r3, #1
 80062a6:	9304      	str	r3, [sp, #16]
 80062a8:	4698      	mov	r8, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	e7da      	b.n	8006264 <_dtoa_r+0x2f4>
 80062ae:	3101      	adds	r1, #1
 80062b0:	6071      	str	r1, [r6, #4]
 80062b2:	0052      	lsls	r2, r2, #1
 80062b4:	e787      	b.n	80061c6 <_dtoa_r+0x256>
 80062b6:	07f1      	lsls	r1, r6, #31
 80062b8:	d508      	bpl.n	80062cc <_dtoa_r+0x35c>
 80062ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c2:	f7fa f909 	bl	80004d8 <__aeabi_dmul>
 80062c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062ca:	3501      	adds	r5, #1
 80062cc:	1076      	asrs	r6, r6, #1
 80062ce:	3708      	adds	r7, #8
 80062d0:	2e00      	cmp	r6, #0
 80062d2:	d1f0      	bne.n	80062b6 <_dtoa_r+0x346>
 80062d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062dc:	f7fa fa26 	bl	800072c <__aeabi_ddiv>
 80062e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062e4:	e01b      	b.n	800631e <_dtoa_r+0x3ae>
 80062e6:	2502      	movs	r5, #2
 80062e8:	e7a0      	b.n	800622c <_dtoa_r+0x2bc>
 80062ea:	f000 80a4 	beq.w	8006436 <_dtoa_r+0x4c6>
 80062ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80062f2:	f1ca 0600 	rsb	r6, sl, #0
 80062f6:	4ba0      	ldr	r3, [pc, #640]	; (8006578 <_dtoa_r+0x608>)
 80062f8:	f006 020f 	and.w	r2, r6, #15
 80062fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7fa f8e8 	bl	80004d8 <__aeabi_dmul>
 8006308:	2502      	movs	r5, #2
 800630a:	2300      	movs	r3, #0
 800630c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006310:	4f9a      	ldr	r7, [pc, #616]	; (800657c <_dtoa_r+0x60c>)
 8006312:	1136      	asrs	r6, r6, #4
 8006314:	2e00      	cmp	r6, #0
 8006316:	f040 8083 	bne.w	8006420 <_dtoa_r+0x4b0>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e0      	bne.n	80062e0 <_dtoa_r+0x370>
 800631e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 808a 	beq.w	800643a <_dtoa_r+0x4ca>
 8006326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800632a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800632e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006332:	2200      	movs	r2, #0
 8006334:	4b92      	ldr	r3, [pc, #584]	; (8006580 <_dtoa_r+0x610>)
 8006336:	f7fa fb41 	bl	80009bc <__aeabi_dcmplt>
 800633a:	2800      	cmp	r0, #0
 800633c:	d07d      	beq.n	800643a <_dtoa_r+0x4ca>
 800633e:	f1b8 0f00 	cmp.w	r8, #0
 8006342:	d07a      	beq.n	800643a <_dtoa_r+0x4ca>
 8006344:	9b04      	ldr	r3, [sp, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	dd36      	ble.n	80063b8 <_dtoa_r+0x448>
 800634a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800634e:	2200      	movs	r2, #0
 8006350:	4b8c      	ldr	r3, [pc, #560]	; (8006584 <_dtoa_r+0x614>)
 8006352:	f7fa f8c1 	bl	80004d8 <__aeabi_dmul>
 8006356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800635a:	9e04      	ldr	r6, [sp, #16]
 800635c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006360:	3501      	adds	r5, #1
 8006362:	4628      	mov	r0, r5
 8006364:	f7fa f84e 	bl	8000404 <__aeabi_i2d>
 8006368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800636c:	f7fa f8b4 	bl	80004d8 <__aeabi_dmul>
 8006370:	2200      	movs	r2, #0
 8006372:	4b85      	ldr	r3, [pc, #532]	; (8006588 <_dtoa_r+0x618>)
 8006374:	f7f9 fefa 	bl	800016c <__adddf3>
 8006378:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800637c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006380:	950b      	str	r5, [sp, #44]	; 0x2c
 8006382:	2e00      	cmp	r6, #0
 8006384:	d15c      	bne.n	8006440 <_dtoa_r+0x4d0>
 8006386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	4b7f      	ldr	r3, [pc, #508]	; (800658c <_dtoa_r+0x61c>)
 800638e:	f7f9 feeb 	bl	8000168 <__aeabi_dsub>
 8006392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006394:	462b      	mov	r3, r5
 8006396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800639a:	f7fa fb2d 	bl	80009f8 <__aeabi_dcmpgt>
 800639e:	2800      	cmp	r0, #0
 80063a0:	f040 8281 	bne.w	80068a6 <_dtoa_r+0x936>
 80063a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063aa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80063ae:	f7fa fb05 	bl	80009bc <__aeabi_dcmplt>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	f040 8275 	bne.w	80068a2 <_dtoa_r+0x932>
 80063b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80063bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f2c0 814b 	blt.w	800665e <_dtoa_r+0x6ee>
 80063c8:	f1ba 0f0e 	cmp.w	sl, #14
 80063cc:	f300 8147 	bgt.w	800665e <_dtoa_r+0x6ee>
 80063d0:	4b69      	ldr	r3, [pc, #420]	; (8006578 <_dtoa_r+0x608>)
 80063d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f280 80d7 	bge.w	8006594 <_dtoa_r+0x624>
 80063e6:	f1b8 0f00 	cmp.w	r8, #0
 80063ea:	f300 80d3 	bgt.w	8006594 <_dtoa_r+0x624>
 80063ee:	f040 8257 	bne.w	80068a0 <_dtoa_r+0x930>
 80063f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f6:	2200      	movs	r2, #0
 80063f8:	4b64      	ldr	r3, [pc, #400]	; (800658c <_dtoa_r+0x61c>)
 80063fa:	f7fa f86d 	bl	80004d8 <__aeabi_dmul>
 80063fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006402:	f7fa faef 	bl	80009e4 <__aeabi_dcmpge>
 8006406:	4646      	mov	r6, r8
 8006408:	4647      	mov	r7, r8
 800640a:	2800      	cmp	r0, #0
 800640c:	f040 822d 	bne.w	800686a <_dtoa_r+0x8fa>
 8006410:	9b06      	ldr	r3, [sp, #24]
 8006412:	9a06      	ldr	r2, [sp, #24]
 8006414:	1c5d      	adds	r5, r3, #1
 8006416:	2331      	movs	r3, #49	; 0x31
 8006418:	f10a 0a01 	add.w	sl, sl, #1
 800641c:	7013      	strb	r3, [r2, #0]
 800641e:	e228      	b.n	8006872 <_dtoa_r+0x902>
 8006420:	07f2      	lsls	r2, r6, #31
 8006422:	d505      	bpl.n	8006430 <_dtoa_r+0x4c0>
 8006424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006428:	f7fa f856 	bl	80004d8 <__aeabi_dmul>
 800642c:	2301      	movs	r3, #1
 800642e:	3501      	adds	r5, #1
 8006430:	1076      	asrs	r6, r6, #1
 8006432:	3708      	adds	r7, #8
 8006434:	e76e      	b.n	8006314 <_dtoa_r+0x3a4>
 8006436:	2502      	movs	r5, #2
 8006438:	e771      	b.n	800631e <_dtoa_r+0x3ae>
 800643a:	4657      	mov	r7, sl
 800643c:	4646      	mov	r6, r8
 800643e:	e790      	b.n	8006362 <_dtoa_r+0x3f2>
 8006440:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <_dtoa_r+0x608>)
 8006442:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006446:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800644a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d048      	beq.n	80064e2 <_dtoa_r+0x572>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	2000      	movs	r0, #0
 8006456:	494e      	ldr	r1, [pc, #312]	; (8006590 <_dtoa_r+0x620>)
 8006458:	f7fa f968 	bl	800072c <__aeabi_ddiv>
 800645c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006460:	f7f9 fe82 	bl	8000168 <__aeabi_dsub>
 8006464:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006468:	9d06      	ldr	r5, [sp, #24]
 800646a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800646e:	f7fa fae3 	bl	8000a38 <__aeabi_d2iz>
 8006472:	9011      	str	r0, [sp, #68]	; 0x44
 8006474:	f7f9 ffc6 	bl	8000404 <__aeabi_i2d>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006480:	f7f9 fe72 	bl	8000168 <__aeabi_dsub>
 8006484:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800648a:	3330      	adds	r3, #48	; 0x30
 800648c:	f805 3b01 	strb.w	r3, [r5], #1
 8006490:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006494:	f7fa fa92 	bl	80009bc <__aeabi_dcmplt>
 8006498:	2800      	cmp	r0, #0
 800649a:	d163      	bne.n	8006564 <_dtoa_r+0x5f4>
 800649c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064a0:	2000      	movs	r0, #0
 80064a2:	4937      	ldr	r1, [pc, #220]	; (8006580 <_dtoa_r+0x610>)
 80064a4:	f7f9 fe60 	bl	8000168 <__aeabi_dsub>
 80064a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064ac:	f7fa fa86 	bl	80009bc <__aeabi_dcmplt>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	f040 80b5 	bne.w	8006620 <_dtoa_r+0x6b0>
 80064b6:	9b06      	ldr	r3, [sp, #24]
 80064b8:	1aeb      	subs	r3, r5, r3
 80064ba:	429e      	cmp	r6, r3
 80064bc:	f77f af7c 	ble.w	80063b8 <_dtoa_r+0x448>
 80064c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064c4:	2200      	movs	r2, #0
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <_dtoa_r+0x614>)
 80064c8:	f7fa f806 	bl	80004d8 <__aeabi_dmul>
 80064cc:	2200      	movs	r2, #0
 80064ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d6:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <_dtoa_r+0x614>)
 80064d8:	f7f9 fffe 	bl	80004d8 <__aeabi_dmul>
 80064dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e0:	e7c3      	b.n	800646a <_dtoa_r+0x4fa>
 80064e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064e6:	f7f9 fff7 	bl	80004d8 <__aeabi_dmul>
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064f0:	199d      	adds	r5, r3, r6
 80064f2:	461e      	mov	r6, r3
 80064f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f8:	f7fa fa9e 	bl	8000a38 <__aeabi_d2iz>
 80064fc:	9011      	str	r0, [sp, #68]	; 0x44
 80064fe:	f7f9 ff81 	bl	8000404 <__aeabi_i2d>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650a:	f7f9 fe2d 	bl	8000168 <__aeabi_dsub>
 800650e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006514:	3330      	adds	r3, #48	; 0x30
 8006516:	f806 3b01 	strb.w	r3, [r6], #1
 800651a:	42ae      	cmp	r6, r5
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	d124      	bne.n	800656c <_dtoa_r+0x5fc>
 8006522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006526:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <_dtoa_r+0x620>)
 8006528:	f7f9 fe20 	bl	800016c <__adddf3>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006534:	f7fa fa60 	bl	80009f8 <__aeabi_dcmpgt>
 8006538:	2800      	cmp	r0, #0
 800653a:	d171      	bne.n	8006620 <_dtoa_r+0x6b0>
 800653c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006540:	2000      	movs	r0, #0
 8006542:	4913      	ldr	r1, [pc, #76]	; (8006590 <_dtoa_r+0x620>)
 8006544:	f7f9 fe10 	bl	8000168 <__aeabi_dsub>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006550:	f7fa fa34 	bl	80009bc <__aeabi_dcmplt>
 8006554:	2800      	cmp	r0, #0
 8006556:	f43f af2f 	beq.w	80063b8 <_dtoa_r+0x448>
 800655a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800655e:	1e6a      	subs	r2, r5, #1
 8006560:	2b30      	cmp	r3, #48	; 0x30
 8006562:	d001      	beq.n	8006568 <_dtoa_r+0x5f8>
 8006564:	46ba      	mov	sl, r7
 8006566:	e04a      	b.n	80065fe <_dtoa_r+0x68e>
 8006568:	4615      	mov	r5, r2
 800656a:	e7f6      	b.n	800655a <_dtoa_r+0x5ea>
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <_dtoa_r+0x614>)
 800656e:	f7f9 ffb3 	bl	80004d8 <__aeabi_dmul>
 8006572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006576:	e7bd      	b.n	80064f4 <_dtoa_r+0x584>
 8006578:	08007820 	.word	0x08007820
 800657c:	080077f8 	.word	0x080077f8
 8006580:	3ff00000 	.word	0x3ff00000
 8006584:	40240000 	.word	0x40240000
 8006588:	401c0000 	.word	0x401c0000
 800658c:	40140000 	.word	0x40140000
 8006590:	3fe00000 	.word	0x3fe00000
 8006594:	9d06      	ldr	r5, [sp, #24]
 8006596:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800659a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800659e:	4630      	mov	r0, r6
 80065a0:	4639      	mov	r1, r7
 80065a2:	f7fa f8c3 	bl	800072c <__aeabi_ddiv>
 80065a6:	f7fa fa47 	bl	8000a38 <__aeabi_d2iz>
 80065aa:	4681      	mov	r9, r0
 80065ac:	f7f9 ff2a 	bl	8000404 <__aeabi_i2d>
 80065b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065b4:	f7f9 ff90 	bl	80004d8 <__aeabi_dmul>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7f9 fdd2 	bl	8000168 <__aeabi_dsub>
 80065c4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80065c8:	f805 6b01 	strb.w	r6, [r5], #1
 80065cc:	9e06      	ldr	r6, [sp, #24]
 80065ce:	4602      	mov	r2, r0
 80065d0:	1bae      	subs	r6, r5, r6
 80065d2:	45b0      	cmp	r8, r6
 80065d4:	460b      	mov	r3, r1
 80065d6:	d135      	bne.n	8006644 <_dtoa_r+0x6d4>
 80065d8:	f7f9 fdc8 	bl	800016c <__adddf3>
 80065dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065e0:	4606      	mov	r6, r0
 80065e2:	460f      	mov	r7, r1
 80065e4:	f7fa fa08 	bl	80009f8 <__aeabi_dcmpgt>
 80065e8:	b9c8      	cbnz	r0, 800661e <_dtoa_r+0x6ae>
 80065ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ee:	4630      	mov	r0, r6
 80065f0:	4639      	mov	r1, r7
 80065f2:	f7fa f9d9 	bl	80009a8 <__aeabi_dcmpeq>
 80065f6:	b110      	cbz	r0, 80065fe <_dtoa_r+0x68e>
 80065f8:	f019 0f01 	tst.w	r9, #1
 80065fc:	d10f      	bne.n	800661e <_dtoa_r+0x6ae>
 80065fe:	4659      	mov	r1, fp
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fc5c 	bl	8006ebe <_Bfree>
 8006606:	2300      	movs	r3, #0
 8006608:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800660a:	702b      	strb	r3, [r5, #0]
 800660c:	f10a 0301 	add.w	r3, sl, #1
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006614:	2b00      	cmp	r3, #0
 8006616:	f43f acf3 	beq.w	8006000 <_dtoa_r+0x90>
 800661a:	601d      	str	r5, [r3, #0]
 800661c:	e4f0      	b.n	8006000 <_dtoa_r+0x90>
 800661e:	4657      	mov	r7, sl
 8006620:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006624:	1e6b      	subs	r3, r5, #1
 8006626:	2a39      	cmp	r2, #57	; 0x39
 8006628:	d106      	bne.n	8006638 <_dtoa_r+0x6c8>
 800662a:	9a06      	ldr	r2, [sp, #24]
 800662c:	429a      	cmp	r2, r3
 800662e:	d107      	bne.n	8006640 <_dtoa_r+0x6d0>
 8006630:	2330      	movs	r3, #48	; 0x30
 8006632:	7013      	strb	r3, [r2, #0]
 8006634:	4613      	mov	r3, r2
 8006636:	3701      	adds	r7, #1
 8006638:	781a      	ldrb	r2, [r3, #0]
 800663a:	3201      	adds	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e791      	b.n	8006564 <_dtoa_r+0x5f4>
 8006640:	461d      	mov	r5, r3
 8006642:	e7ed      	b.n	8006620 <_dtoa_r+0x6b0>
 8006644:	2200      	movs	r2, #0
 8006646:	4b99      	ldr	r3, [pc, #612]	; (80068ac <_dtoa_r+0x93c>)
 8006648:	f7f9 ff46 	bl	80004d8 <__aeabi_dmul>
 800664c:	2200      	movs	r2, #0
 800664e:	2300      	movs	r3, #0
 8006650:	4606      	mov	r6, r0
 8006652:	460f      	mov	r7, r1
 8006654:	f7fa f9a8 	bl	80009a8 <__aeabi_dcmpeq>
 8006658:	2800      	cmp	r0, #0
 800665a:	d09e      	beq.n	800659a <_dtoa_r+0x62a>
 800665c:	e7cf      	b.n	80065fe <_dtoa_r+0x68e>
 800665e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006660:	2a00      	cmp	r2, #0
 8006662:	f000 8088 	beq.w	8006776 <_dtoa_r+0x806>
 8006666:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006668:	2a01      	cmp	r2, #1
 800666a:	dc6d      	bgt.n	8006748 <_dtoa_r+0x7d8>
 800666c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800666e:	2a00      	cmp	r2, #0
 8006670:	d066      	beq.n	8006740 <_dtoa_r+0x7d0>
 8006672:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006676:	464d      	mov	r5, r9
 8006678:	9e08      	ldr	r6, [sp, #32]
 800667a:	9a07      	ldr	r2, [sp, #28]
 800667c:	2101      	movs	r1, #1
 800667e:	441a      	add	r2, r3
 8006680:	4620      	mov	r0, r4
 8006682:	4499      	add	r9, r3
 8006684:	9207      	str	r2, [sp, #28]
 8006686:	f000 fcba 	bl	8006ffe <__i2b>
 800668a:	4607      	mov	r7, r0
 800668c:	2d00      	cmp	r5, #0
 800668e:	dd0b      	ble.n	80066a8 <_dtoa_r+0x738>
 8006690:	9b07      	ldr	r3, [sp, #28]
 8006692:	2b00      	cmp	r3, #0
 8006694:	dd08      	ble.n	80066a8 <_dtoa_r+0x738>
 8006696:	42ab      	cmp	r3, r5
 8006698:	bfa8      	it	ge
 800669a:	462b      	movge	r3, r5
 800669c:	9a07      	ldr	r2, [sp, #28]
 800669e:	eba9 0903 	sub.w	r9, r9, r3
 80066a2:	1aed      	subs	r5, r5, r3
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	9307      	str	r3, [sp, #28]
 80066a8:	9b08      	ldr	r3, [sp, #32]
 80066aa:	b1eb      	cbz	r3, 80066e8 <_dtoa_r+0x778>
 80066ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d065      	beq.n	800677e <_dtoa_r+0x80e>
 80066b2:	b18e      	cbz	r6, 80066d8 <_dtoa_r+0x768>
 80066b4:	4639      	mov	r1, r7
 80066b6:	4632      	mov	r2, r6
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 fd3f 	bl	800713c <__pow5mult>
 80066be:	465a      	mov	r2, fp
 80066c0:	4601      	mov	r1, r0
 80066c2:	4607      	mov	r7, r0
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 fca3 	bl	8007010 <__multiply>
 80066ca:	4659      	mov	r1, fp
 80066cc:	900a      	str	r0, [sp, #40]	; 0x28
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fbf5 	bl	8006ebe <_Bfree>
 80066d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d6:	469b      	mov	fp, r3
 80066d8:	9b08      	ldr	r3, [sp, #32]
 80066da:	1b9a      	subs	r2, r3, r6
 80066dc:	d004      	beq.n	80066e8 <_dtoa_r+0x778>
 80066de:	4659      	mov	r1, fp
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fd2b 	bl	800713c <__pow5mult>
 80066e6:	4683      	mov	fp, r0
 80066e8:	2101      	movs	r1, #1
 80066ea:	4620      	mov	r0, r4
 80066ec:	f000 fc87 	bl	8006ffe <__i2b>
 80066f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f2:	4606      	mov	r6, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 81c6 	beq.w	8006a86 <_dtoa_r+0xb16>
 80066fa:	461a      	mov	r2, r3
 80066fc:	4601      	mov	r1, r0
 80066fe:	4620      	mov	r0, r4
 8006700:	f000 fd1c 	bl	800713c <__pow5mult>
 8006704:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006706:	4606      	mov	r6, r0
 8006708:	2b01      	cmp	r3, #1
 800670a:	dc3e      	bgt.n	800678a <_dtoa_r+0x81a>
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d137      	bne.n	8006782 <_dtoa_r+0x812>
 8006712:	9b03      	ldr	r3, [sp, #12]
 8006714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006718:	2b00      	cmp	r3, #0
 800671a:	d134      	bne.n	8006786 <_dtoa_r+0x816>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006722:	0d1b      	lsrs	r3, r3, #20
 8006724:	051b      	lsls	r3, r3, #20
 8006726:	b12b      	cbz	r3, 8006734 <_dtoa_r+0x7c4>
 8006728:	9b07      	ldr	r3, [sp, #28]
 800672a:	f109 0901 	add.w	r9, r9, #1
 800672e:	3301      	adds	r3, #1
 8006730:	9307      	str	r3, [sp, #28]
 8006732:	2301      	movs	r3, #1
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006738:	2b00      	cmp	r3, #0
 800673a:	d128      	bne.n	800678e <_dtoa_r+0x81e>
 800673c:	2001      	movs	r0, #1
 800673e:	e02e      	b.n	800679e <_dtoa_r+0x82e>
 8006740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006742:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006746:	e796      	b.n	8006676 <_dtoa_r+0x706>
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	f108 36ff 	add.w	r6, r8, #4294967295
 800674e:	42b3      	cmp	r3, r6
 8006750:	bfb7      	itett	lt
 8006752:	9b08      	ldrlt	r3, [sp, #32]
 8006754:	1b9e      	subge	r6, r3, r6
 8006756:	1af2      	sublt	r2, r6, r3
 8006758:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800675a:	bfbf      	itttt	lt
 800675c:	9608      	strlt	r6, [sp, #32]
 800675e:	189b      	addlt	r3, r3, r2
 8006760:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006762:	2600      	movlt	r6, #0
 8006764:	f1b8 0f00 	cmp.w	r8, #0
 8006768:	bfb9      	ittee	lt
 800676a:	eba9 0508 	sublt.w	r5, r9, r8
 800676e:	2300      	movlt	r3, #0
 8006770:	464d      	movge	r5, r9
 8006772:	4643      	movge	r3, r8
 8006774:	e781      	b.n	800667a <_dtoa_r+0x70a>
 8006776:	9e08      	ldr	r6, [sp, #32]
 8006778:	464d      	mov	r5, r9
 800677a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800677c:	e786      	b.n	800668c <_dtoa_r+0x71c>
 800677e:	9a08      	ldr	r2, [sp, #32]
 8006780:	e7ad      	b.n	80066de <_dtoa_r+0x76e>
 8006782:	2300      	movs	r3, #0
 8006784:	e7d6      	b.n	8006734 <_dtoa_r+0x7c4>
 8006786:	9b02      	ldr	r3, [sp, #8]
 8006788:	e7d4      	b.n	8006734 <_dtoa_r+0x7c4>
 800678a:	2300      	movs	r3, #0
 800678c:	9308      	str	r3, [sp, #32]
 800678e:	6933      	ldr	r3, [r6, #16]
 8006790:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006794:	6918      	ldr	r0, [r3, #16]
 8006796:	f000 fbe4 	bl	8006f62 <__hi0bits>
 800679a:	f1c0 0020 	rsb	r0, r0, #32
 800679e:	9b07      	ldr	r3, [sp, #28]
 80067a0:	4418      	add	r0, r3
 80067a2:	f010 001f 	ands.w	r0, r0, #31
 80067a6:	d047      	beq.n	8006838 <_dtoa_r+0x8c8>
 80067a8:	f1c0 0320 	rsb	r3, r0, #32
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	dd3b      	ble.n	8006828 <_dtoa_r+0x8b8>
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	f1c0 001c 	rsb	r0, r0, #28
 80067b6:	4481      	add	r9, r0
 80067b8:	4405      	add	r5, r0
 80067ba:	4403      	add	r3, r0
 80067bc:	9307      	str	r3, [sp, #28]
 80067be:	f1b9 0f00 	cmp.w	r9, #0
 80067c2:	dd05      	ble.n	80067d0 <_dtoa_r+0x860>
 80067c4:	4659      	mov	r1, fp
 80067c6:	464a      	mov	r2, r9
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fd05 	bl	80071d8 <__lshift>
 80067ce:	4683      	mov	fp, r0
 80067d0:	9b07      	ldr	r3, [sp, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dd05      	ble.n	80067e2 <_dtoa_r+0x872>
 80067d6:	4631      	mov	r1, r6
 80067d8:	461a      	mov	r2, r3
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fcfc 	bl	80071d8 <__lshift>
 80067e0:	4606      	mov	r6, r0
 80067e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e4:	b353      	cbz	r3, 800683c <_dtoa_r+0x8cc>
 80067e6:	4631      	mov	r1, r6
 80067e8:	4658      	mov	r0, fp
 80067ea:	f000 fd49 	bl	8007280 <__mcmp>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	da24      	bge.n	800683c <_dtoa_r+0x8cc>
 80067f2:	2300      	movs	r3, #0
 80067f4:	4659      	mov	r1, fp
 80067f6:	220a      	movs	r2, #10
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 fb77 	bl	8006eec <__multadd>
 80067fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006800:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006804:	4683      	mov	fp, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8144 	beq.w	8006a94 <_dtoa_r+0xb24>
 800680c:	2300      	movs	r3, #0
 800680e:	4639      	mov	r1, r7
 8006810:	220a      	movs	r2, #10
 8006812:	4620      	mov	r0, r4
 8006814:	f000 fb6a 	bl	8006eec <__multadd>
 8006818:	9b04      	ldr	r3, [sp, #16]
 800681a:	4607      	mov	r7, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	dc4d      	bgt.n	80068bc <_dtoa_r+0x94c>
 8006820:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006822:	2b02      	cmp	r3, #2
 8006824:	dd4a      	ble.n	80068bc <_dtoa_r+0x94c>
 8006826:	e011      	b.n	800684c <_dtoa_r+0x8dc>
 8006828:	d0c9      	beq.n	80067be <_dtoa_r+0x84e>
 800682a:	9a07      	ldr	r2, [sp, #28]
 800682c:	331c      	adds	r3, #28
 800682e:	441a      	add	r2, r3
 8006830:	4499      	add	r9, r3
 8006832:	441d      	add	r5, r3
 8006834:	4613      	mov	r3, r2
 8006836:	e7c1      	b.n	80067bc <_dtoa_r+0x84c>
 8006838:	4603      	mov	r3, r0
 800683a:	e7f6      	b.n	800682a <_dtoa_r+0x8ba>
 800683c:	f1b8 0f00 	cmp.w	r8, #0
 8006840:	dc36      	bgt.n	80068b0 <_dtoa_r+0x940>
 8006842:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006844:	2b02      	cmp	r3, #2
 8006846:	dd33      	ble.n	80068b0 <_dtoa_r+0x940>
 8006848:	f8cd 8010 	str.w	r8, [sp, #16]
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	b963      	cbnz	r3, 800686a <_dtoa_r+0x8fa>
 8006850:	4631      	mov	r1, r6
 8006852:	2205      	movs	r2, #5
 8006854:	4620      	mov	r0, r4
 8006856:	f000 fb49 	bl	8006eec <__multadd>
 800685a:	4601      	mov	r1, r0
 800685c:	4606      	mov	r6, r0
 800685e:	4658      	mov	r0, fp
 8006860:	f000 fd0e 	bl	8007280 <__mcmp>
 8006864:	2800      	cmp	r0, #0
 8006866:	f73f add3 	bgt.w	8006410 <_dtoa_r+0x4a0>
 800686a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800686c:	9d06      	ldr	r5, [sp, #24]
 800686e:	ea6f 0a03 	mvn.w	sl, r3
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	4631      	mov	r1, r6
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fb20 	bl	8006ebe <_Bfree>
 800687e:	2f00      	cmp	r7, #0
 8006880:	f43f aebd 	beq.w	80065fe <_dtoa_r+0x68e>
 8006884:	f1b9 0f00 	cmp.w	r9, #0
 8006888:	d005      	beq.n	8006896 <_dtoa_r+0x926>
 800688a:	45b9      	cmp	r9, r7
 800688c:	d003      	beq.n	8006896 <_dtoa_r+0x926>
 800688e:	4649      	mov	r1, r9
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fb14 	bl	8006ebe <_Bfree>
 8006896:	4639      	mov	r1, r7
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fb10 	bl	8006ebe <_Bfree>
 800689e:	e6ae      	b.n	80065fe <_dtoa_r+0x68e>
 80068a0:	2600      	movs	r6, #0
 80068a2:	4637      	mov	r7, r6
 80068a4:	e7e1      	b.n	800686a <_dtoa_r+0x8fa>
 80068a6:	46ba      	mov	sl, r7
 80068a8:	4637      	mov	r7, r6
 80068aa:	e5b1      	b.n	8006410 <_dtoa_r+0x4a0>
 80068ac:	40240000 	.word	0x40240000
 80068b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80f3 	beq.w	8006aa2 <_dtoa_r+0xb32>
 80068bc:	2d00      	cmp	r5, #0
 80068be:	dd05      	ble.n	80068cc <_dtoa_r+0x95c>
 80068c0:	4639      	mov	r1, r7
 80068c2:	462a      	mov	r2, r5
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 fc87 	bl	80071d8 <__lshift>
 80068ca:	4607      	mov	r7, r0
 80068cc:	9b08      	ldr	r3, [sp, #32]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d04c      	beq.n	800696c <_dtoa_r+0x9fc>
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 fabe 	bl	8006e56 <_Balloc>
 80068da:	4605      	mov	r5, r0
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	f107 010c 	add.w	r1, r7, #12
 80068e2:	3202      	adds	r2, #2
 80068e4:	0092      	lsls	r2, r2, #2
 80068e6:	300c      	adds	r0, #12
 80068e8:	f000 faaa 	bl	8006e40 <memcpy>
 80068ec:	2201      	movs	r2, #1
 80068ee:	4629      	mov	r1, r5
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 fc71 	bl	80071d8 <__lshift>
 80068f6:	46b9      	mov	r9, r7
 80068f8:	4607      	mov	r7, r0
 80068fa:	9b06      	ldr	r3, [sp, #24]
 80068fc:	9307      	str	r3, [sp, #28]
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	9308      	str	r3, [sp, #32]
 8006906:	4631      	mov	r1, r6
 8006908:	4658      	mov	r0, fp
 800690a:	f7ff faa3 	bl	8005e54 <quorem>
 800690e:	4649      	mov	r1, r9
 8006910:	4605      	mov	r5, r0
 8006912:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006916:	4658      	mov	r0, fp
 8006918:	f000 fcb2 	bl	8007280 <__mcmp>
 800691c:	463a      	mov	r2, r7
 800691e:	9002      	str	r0, [sp, #8]
 8006920:	4631      	mov	r1, r6
 8006922:	4620      	mov	r0, r4
 8006924:	f000 fcc6 	bl	80072b4 <__mdiff>
 8006928:	68c3      	ldr	r3, [r0, #12]
 800692a:	4602      	mov	r2, r0
 800692c:	bb03      	cbnz	r3, 8006970 <_dtoa_r+0xa00>
 800692e:	4601      	mov	r1, r0
 8006930:	9009      	str	r0, [sp, #36]	; 0x24
 8006932:	4658      	mov	r0, fp
 8006934:	f000 fca4 	bl	8007280 <__mcmp>
 8006938:	4603      	mov	r3, r0
 800693a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800693c:	4611      	mov	r1, r2
 800693e:	4620      	mov	r0, r4
 8006940:	9309      	str	r3, [sp, #36]	; 0x24
 8006942:	f000 fabc 	bl	8006ebe <_Bfree>
 8006946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006948:	b9a3      	cbnz	r3, 8006974 <_dtoa_r+0xa04>
 800694a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800694c:	b992      	cbnz	r2, 8006974 <_dtoa_r+0xa04>
 800694e:	9a08      	ldr	r2, [sp, #32]
 8006950:	b982      	cbnz	r2, 8006974 <_dtoa_r+0xa04>
 8006952:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006956:	d029      	beq.n	80069ac <_dtoa_r+0xa3c>
 8006958:	9b02      	ldr	r3, [sp, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	dd01      	ble.n	8006962 <_dtoa_r+0x9f2>
 800695e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006962:	9b07      	ldr	r3, [sp, #28]
 8006964:	1c5d      	adds	r5, r3, #1
 8006966:	f883 8000 	strb.w	r8, [r3]
 800696a:	e784      	b.n	8006876 <_dtoa_r+0x906>
 800696c:	4638      	mov	r0, r7
 800696e:	e7c2      	b.n	80068f6 <_dtoa_r+0x986>
 8006970:	2301      	movs	r3, #1
 8006972:	e7e3      	b.n	800693c <_dtoa_r+0x9cc>
 8006974:	9a02      	ldr	r2, [sp, #8]
 8006976:	2a00      	cmp	r2, #0
 8006978:	db04      	blt.n	8006984 <_dtoa_r+0xa14>
 800697a:	d123      	bne.n	80069c4 <_dtoa_r+0xa54>
 800697c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800697e:	bb0a      	cbnz	r2, 80069c4 <_dtoa_r+0xa54>
 8006980:	9a08      	ldr	r2, [sp, #32]
 8006982:	b9fa      	cbnz	r2, 80069c4 <_dtoa_r+0xa54>
 8006984:	2b00      	cmp	r3, #0
 8006986:	ddec      	ble.n	8006962 <_dtoa_r+0x9f2>
 8006988:	4659      	mov	r1, fp
 800698a:	2201      	movs	r2, #1
 800698c:	4620      	mov	r0, r4
 800698e:	f000 fc23 	bl	80071d8 <__lshift>
 8006992:	4631      	mov	r1, r6
 8006994:	4683      	mov	fp, r0
 8006996:	f000 fc73 	bl	8007280 <__mcmp>
 800699a:	2800      	cmp	r0, #0
 800699c:	dc03      	bgt.n	80069a6 <_dtoa_r+0xa36>
 800699e:	d1e0      	bne.n	8006962 <_dtoa_r+0x9f2>
 80069a0:	f018 0f01 	tst.w	r8, #1
 80069a4:	d0dd      	beq.n	8006962 <_dtoa_r+0x9f2>
 80069a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069aa:	d1d8      	bne.n	800695e <_dtoa_r+0x9ee>
 80069ac:	9b07      	ldr	r3, [sp, #28]
 80069ae:	9a07      	ldr	r2, [sp, #28]
 80069b0:	1c5d      	adds	r5, r3, #1
 80069b2:	2339      	movs	r3, #57	; 0x39
 80069b4:	7013      	strb	r3, [r2, #0]
 80069b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069ba:	1e6a      	subs	r2, r5, #1
 80069bc:	2b39      	cmp	r3, #57	; 0x39
 80069be:	d04d      	beq.n	8006a5c <_dtoa_r+0xaec>
 80069c0:	3301      	adds	r3, #1
 80069c2:	e052      	b.n	8006a6a <_dtoa_r+0xafa>
 80069c4:	9a07      	ldr	r2, [sp, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f102 0501 	add.w	r5, r2, #1
 80069cc:	dd06      	ble.n	80069dc <_dtoa_r+0xa6c>
 80069ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069d2:	d0eb      	beq.n	80069ac <_dtoa_r+0xa3c>
 80069d4:	f108 0801 	add.w	r8, r8, #1
 80069d8:	9b07      	ldr	r3, [sp, #28]
 80069da:	e7c4      	b.n	8006966 <_dtoa_r+0x9f6>
 80069dc:	9b06      	ldr	r3, [sp, #24]
 80069de:	9a04      	ldr	r2, [sp, #16]
 80069e0:	1aeb      	subs	r3, r5, r3
 80069e2:	4293      	cmp	r3, r2
 80069e4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80069e8:	d021      	beq.n	8006a2e <_dtoa_r+0xabe>
 80069ea:	4659      	mov	r1, fp
 80069ec:	2300      	movs	r3, #0
 80069ee:	220a      	movs	r2, #10
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 fa7b 	bl	8006eec <__multadd>
 80069f6:	45b9      	cmp	r9, r7
 80069f8:	4683      	mov	fp, r0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	f04f 020a 	mov.w	r2, #10
 8006a02:	4649      	mov	r1, r9
 8006a04:	4620      	mov	r0, r4
 8006a06:	d105      	bne.n	8006a14 <_dtoa_r+0xaa4>
 8006a08:	f000 fa70 	bl	8006eec <__multadd>
 8006a0c:	4681      	mov	r9, r0
 8006a0e:	4607      	mov	r7, r0
 8006a10:	9507      	str	r5, [sp, #28]
 8006a12:	e778      	b.n	8006906 <_dtoa_r+0x996>
 8006a14:	f000 fa6a 	bl	8006eec <__multadd>
 8006a18:	4639      	mov	r1, r7
 8006a1a:	4681      	mov	r9, r0
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	220a      	movs	r2, #10
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fa63 	bl	8006eec <__multadd>
 8006a26:	4607      	mov	r7, r0
 8006a28:	e7f2      	b.n	8006a10 <_dtoa_r+0xaa0>
 8006a2a:	f04f 0900 	mov.w	r9, #0
 8006a2e:	4659      	mov	r1, fp
 8006a30:	2201      	movs	r2, #1
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 fbd0 	bl	80071d8 <__lshift>
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4683      	mov	fp, r0
 8006a3c:	f000 fc20 	bl	8007280 <__mcmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	dcb8      	bgt.n	80069b6 <_dtoa_r+0xa46>
 8006a44:	d102      	bne.n	8006a4c <_dtoa_r+0xadc>
 8006a46:	f018 0f01 	tst.w	r8, #1
 8006a4a:	d1b4      	bne.n	80069b6 <_dtoa_r+0xa46>
 8006a4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a50:	1e6a      	subs	r2, r5, #1
 8006a52:	2b30      	cmp	r3, #48	; 0x30
 8006a54:	f47f af0f 	bne.w	8006876 <_dtoa_r+0x906>
 8006a58:	4615      	mov	r5, r2
 8006a5a:	e7f7      	b.n	8006a4c <_dtoa_r+0xadc>
 8006a5c:	9b06      	ldr	r3, [sp, #24]
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d105      	bne.n	8006a6e <_dtoa_r+0xafe>
 8006a62:	2331      	movs	r3, #49	; 0x31
 8006a64:	9a06      	ldr	r2, [sp, #24]
 8006a66:	f10a 0a01 	add.w	sl, sl, #1
 8006a6a:	7013      	strb	r3, [r2, #0]
 8006a6c:	e703      	b.n	8006876 <_dtoa_r+0x906>
 8006a6e:	4615      	mov	r5, r2
 8006a70:	e7a1      	b.n	80069b6 <_dtoa_r+0xa46>
 8006a72:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <_dtoa_r+0xb60>)
 8006a74:	f7ff bae1 	b.w	800603a <_dtoa_r+0xca>
 8006a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f47f aabb 	bne.w	8005ff6 <_dtoa_r+0x86>
 8006a80:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <_dtoa_r+0xb64>)
 8006a82:	f7ff bada 	b.w	800603a <_dtoa_r+0xca>
 8006a86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	f77f ae3f 	ble.w	800670c <_dtoa_r+0x79c>
 8006a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a90:	9308      	str	r3, [sp, #32]
 8006a92:	e653      	b.n	800673c <_dtoa_r+0x7cc>
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc03      	bgt.n	8006aa2 <_dtoa_r+0xb32>
 8006a9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	f73f aed5 	bgt.w	800684c <_dtoa_r+0x8dc>
 8006aa2:	9d06      	ldr	r5, [sp, #24]
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	f7ff f9d4 	bl	8005e54 <quorem>
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ab2:	f805 8b01 	strb.w	r8, [r5], #1
 8006ab6:	9a04      	ldr	r2, [sp, #16]
 8006ab8:	1aeb      	subs	r3, r5, r3
 8006aba:	429a      	cmp	r2, r3
 8006abc:	ddb5      	ble.n	8006a2a <_dtoa_r+0xaba>
 8006abe:	4659      	mov	r1, fp
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fa11 	bl	8006eec <__multadd>
 8006aca:	4683      	mov	fp, r0
 8006acc:	e7ea      	b.n	8006aa4 <_dtoa_r+0xb34>
 8006ace:	bf00      	nop
 8006ad0:	08007784 	.word	0x08007784
 8006ad4:	08007786 	.word	0x08007786

08006ad8 <__sflush_r>:
 8006ad8:	898a      	ldrh	r2, [r1, #12]
 8006ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ade:	4605      	mov	r5, r0
 8006ae0:	0710      	lsls	r0, r2, #28
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	d458      	bmi.n	8006b98 <__sflush_r+0xc0>
 8006ae6:	684b      	ldr	r3, [r1, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dc05      	bgt.n	8006af8 <__sflush_r+0x20>
 8006aec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	dc02      	bgt.n	8006af8 <__sflush_r+0x20>
 8006af2:	2000      	movs	r0, #0
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	d0f9      	beq.n	8006af2 <__sflush_r+0x1a>
 8006afe:	2300      	movs	r3, #0
 8006b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b04:	682f      	ldr	r7, [r5, #0]
 8006b06:	6a21      	ldr	r1, [r4, #32]
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	d032      	beq.n	8006b72 <__sflush_r+0x9a>
 8006b0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	075a      	lsls	r2, r3, #29
 8006b12:	d505      	bpl.n	8006b20 <__sflush_r+0x48>
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	1ac0      	subs	r0, r0, r3
 8006b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b1a:	b10b      	cbz	r3, 8006b20 <__sflush_r+0x48>
 8006b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b1e:	1ac0      	subs	r0, r0, r3
 8006b20:	2300      	movs	r3, #0
 8006b22:	4602      	mov	r2, r0
 8006b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b26:	6a21      	ldr	r1, [r4, #32]
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b0      	blx	r6
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	d106      	bne.n	8006b40 <__sflush_r+0x68>
 8006b32:	6829      	ldr	r1, [r5, #0]
 8006b34:	291d      	cmp	r1, #29
 8006b36:	d848      	bhi.n	8006bca <__sflush_r+0xf2>
 8006b38:	4a29      	ldr	r2, [pc, #164]	; (8006be0 <__sflush_r+0x108>)
 8006b3a:	40ca      	lsrs	r2, r1
 8006b3c:	07d6      	lsls	r6, r2, #31
 8006b3e:	d544      	bpl.n	8006bca <__sflush_r+0xf2>
 8006b40:	2200      	movs	r2, #0
 8006b42:	6062      	str	r2, [r4, #4]
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	04d9      	lsls	r1, r3, #19
 8006b48:	6022      	str	r2, [r4, #0]
 8006b4a:	d504      	bpl.n	8006b56 <__sflush_r+0x7e>
 8006b4c:	1c42      	adds	r2, r0, #1
 8006b4e:	d101      	bne.n	8006b54 <__sflush_r+0x7c>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b903      	cbnz	r3, 8006b56 <__sflush_r+0x7e>
 8006b54:	6560      	str	r0, [r4, #84]	; 0x54
 8006b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b58:	602f      	str	r7, [r5, #0]
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	d0c9      	beq.n	8006af2 <__sflush_r+0x1a>
 8006b5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b62:	4299      	cmp	r1, r3
 8006b64:	d002      	beq.n	8006b6c <__sflush_r+0x94>
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 fc60 	bl	800742c <_free_r>
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	6360      	str	r0, [r4, #52]	; 0x34
 8006b70:	e7c0      	b.n	8006af4 <__sflush_r+0x1c>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b0      	blx	r6
 8006b78:	1c41      	adds	r1, r0, #1
 8006b7a:	d1c8      	bne.n	8006b0e <__sflush_r+0x36>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0c5      	beq.n	8006b0e <__sflush_r+0x36>
 8006b82:	2b1d      	cmp	r3, #29
 8006b84:	d001      	beq.n	8006b8a <__sflush_r+0xb2>
 8006b86:	2b16      	cmp	r3, #22
 8006b88:	d101      	bne.n	8006b8e <__sflush_r+0xb6>
 8006b8a:	602f      	str	r7, [r5, #0]
 8006b8c:	e7b1      	b.n	8006af2 <__sflush_r+0x1a>
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	e7ad      	b.n	8006af4 <__sflush_r+0x1c>
 8006b98:	690f      	ldr	r7, [r1, #16]
 8006b9a:	2f00      	cmp	r7, #0
 8006b9c:	d0a9      	beq.n	8006af2 <__sflush_r+0x1a>
 8006b9e:	0793      	lsls	r3, r2, #30
 8006ba0:	bf18      	it	ne
 8006ba2:	2300      	movne	r3, #0
 8006ba4:	680e      	ldr	r6, [r1, #0]
 8006ba6:	bf08      	it	eq
 8006ba8:	694b      	ldreq	r3, [r1, #20]
 8006baa:	eba6 0807 	sub.w	r8, r6, r7
 8006bae:	600f      	str	r7, [r1, #0]
 8006bb0:	608b      	str	r3, [r1, #8]
 8006bb2:	f1b8 0f00 	cmp.w	r8, #0
 8006bb6:	dd9c      	ble.n	8006af2 <__sflush_r+0x1a>
 8006bb8:	4643      	mov	r3, r8
 8006bba:	463a      	mov	r2, r7
 8006bbc:	6a21      	ldr	r1, [r4, #32]
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bc2:	47b0      	blx	r6
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	dc06      	bgt.n	8006bd6 <__sflush_r+0xfe>
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	e78e      	b.n	8006af4 <__sflush_r+0x1c>
 8006bd6:	4407      	add	r7, r0
 8006bd8:	eba8 0800 	sub.w	r8, r8, r0
 8006bdc:	e7e9      	b.n	8006bb2 <__sflush_r+0xda>
 8006bde:	bf00      	nop
 8006be0:	20400001 	.word	0x20400001

08006be4 <_fflush_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	4605      	mov	r5, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	b1db      	cbz	r3, 8006c26 <_fflush_r+0x42>
 8006bee:	b118      	cbz	r0, 8006bf8 <_fflush_r+0x14>
 8006bf0:	6983      	ldr	r3, [r0, #24]
 8006bf2:	b90b      	cbnz	r3, 8006bf8 <_fflush_r+0x14>
 8006bf4:	f000 f860 	bl	8006cb8 <__sinit>
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <_fflush_r+0x48>)
 8006bfa:	429c      	cmp	r4, r3
 8006bfc:	d109      	bne.n	8006c12 <_fflush_r+0x2e>
 8006bfe:	686c      	ldr	r4, [r5, #4]
 8006c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c04:	b17b      	cbz	r3, 8006c26 <_fflush_r+0x42>
 8006c06:	4621      	mov	r1, r4
 8006c08:	4628      	mov	r0, r5
 8006c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c0e:	f7ff bf63 	b.w	8006ad8 <__sflush_r>
 8006c12:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <_fflush_r+0x4c>)
 8006c14:	429c      	cmp	r4, r3
 8006c16:	d101      	bne.n	8006c1c <_fflush_r+0x38>
 8006c18:	68ac      	ldr	r4, [r5, #8]
 8006c1a:	e7f1      	b.n	8006c00 <_fflush_r+0x1c>
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <_fflush_r+0x50>)
 8006c1e:	429c      	cmp	r4, r3
 8006c20:	bf08      	it	eq
 8006c22:	68ec      	ldreq	r4, [r5, #12]
 8006c24:	e7ec      	b.n	8006c00 <_fflush_r+0x1c>
 8006c26:	2000      	movs	r0, #0
 8006c28:	bd38      	pop	{r3, r4, r5, pc}
 8006c2a:	bf00      	nop
 8006c2c:	080077b4 	.word	0x080077b4
 8006c30:	080077d4 	.word	0x080077d4
 8006c34:	08007794 	.word	0x08007794

08006c38 <std>:
 8006c38:	2300      	movs	r3, #0
 8006c3a:	b510      	push	{r4, lr}
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c42:	6083      	str	r3, [r0, #8]
 8006c44:	8181      	strh	r1, [r0, #12]
 8006c46:	6643      	str	r3, [r0, #100]	; 0x64
 8006c48:	81c2      	strh	r2, [r0, #14]
 8006c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c4e:	6183      	str	r3, [r0, #24]
 8006c50:	4619      	mov	r1, r3
 8006c52:	2208      	movs	r2, #8
 8006c54:	305c      	adds	r0, #92	; 0x5c
 8006c56:	f7fe fd09 	bl	800566c <memset>
 8006c5a:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <std+0x38>)
 8006c5c:	6224      	str	r4, [r4, #32]
 8006c5e:	6263      	str	r3, [r4, #36]	; 0x24
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <std+0x3c>)
 8006c62:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c64:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <std+0x40>)
 8006c66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c68:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <std+0x44>)
 8006c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	bf00      	nop
 8006c70:	08007599 	.word	0x08007599
 8006c74:	080075bb 	.word	0x080075bb
 8006c78:	080075f3 	.word	0x080075f3
 8006c7c:	08007617 	.word	0x08007617

08006c80 <_cleanup_r>:
 8006c80:	4901      	ldr	r1, [pc, #4]	; (8006c88 <_cleanup_r+0x8>)
 8006c82:	f000 b885 	b.w	8006d90 <_fwalk_reent>
 8006c86:	bf00      	nop
 8006c88:	08006be5 	.word	0x08006be5

08006c8c <__sfmoreglue>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	2568      	movs	r5, #104	; 0x68
 8006c90:	1e4a      	subs	r2, r1, #1
 8006c92:	4355      	muls	r5, r2
 8006c94:	460e      	mov	r6, r1
 8006c96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c9a:	f000 fc13 	bl	80074c4 <_malloc_r>
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	b140      	cbz	r0, 8006cb4 <__sfmoreglue+0x28>
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ca8:	300c      	adds	r0, #12
 8006caa:	60a0      	str	r0, [r4, #8]
 8006cac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006cb0:	f7fe fcdc 	bl	800566c <memset>
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}

08006cb8 <__sinit>:
 8006cb8:	6983      	ldr	r3, [r0, #24]
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	bb33      	cbnz	r3, 8006d0e <__sinit+0x56>
 8006cc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006cc4:	6503      	str	r3, [r0, #80]	; 0x50
 8006cc6:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <__sinit+0x58>)
 8006cc8:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <__sinit+0x5c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6282      	str	r2, [r0, #40]	; 0x28
 8006cce:	4298      	cmp	r0, r3
 8006cd0:	bf04      	itt	eq
 8006cd2:	2301      	moveq	r3, #1
 8006cd4:	6183      	streq	r3, [r0, #24]
 8006cd6:	f000 f81f 	bl	8006d18 <__sfp>
 8006cda:	6060      	str	r0, [r4, #4]
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 f81b 	bl	8006d18 <__sfp>
 8006ce2:	60a0      	str	r0, [r4, #8]
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 f817 	bl	8006d18 <__sfp>
 8006cea:	2200      	movs	r2, #0
 8006cec:	60e0      	str	r0, [r4, #12]
 8006cee:	2104      	movs	r1, #4
 8006cf0:	6860      	ldr	r0, [r4, #4]
 8006cf2:	f7ff ffa1 	bl	8006c38 <std>
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	2109      	movs	r1, #9
 8006cfa:	68a0      	ldr	r0, [r4, #8]
 8006cfc:	f7ff ff9c 	bl	8006c38 <std>
 8006d00:	2202      	movs	r2, #2
 8006d02:	2112      	movs	r1, #18
 8006d04:	68e0      	ldr	r0, [r4, #12]
 8006d06:	f7ff ff97 	bl	8006c38 <std>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	61a3      	str	r3, [r4, #24]
 8006d0e:	bd10      	pop	{r4, pc}
 8006d10:	08007770 	.word	0x08007770
 8006d14:	08006c81 	.word	0x08006c81

08006d18 <__sfp>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <__sfp+0x70>)
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	681e      	ldr	r6, [r3, #0]
 8006d20:	69b3      	ldr	r3, [r6, #24]
 8006d22:	b913      	cbnz	r3, 8006d2a <__sfp+0x12>
 8006d24:	4630      	mov	r0, r6
 8006d26:	f7ff ffc7 	bl	8006cb8 <__sinit>
 8006d2a:	3648      	adds	r6, #72	; 0x48
 8006d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	d503      	bpl.n	8006d3c <__sfp+0x24>
 8006d34:	6833      	ldr	r3, [r6, #0]
 8006d36:	b133      	cbz	r3, 8006d46 <__sfp+0x2e>
 8006d38:	6836      	ldr	r6, [r6, #0]
 8006d3a:	e7f7      	b.n	8006d2c <__sfp+0x14>
 8006d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d40:	b16d      	cbz	r5, 8006d5e <__sfp+0x46>
 8006d42:	3468      	adds	r4, #104	; 0x68
 8006d44:	e7f4      	b.n	8006d30 <__sfp+0x18>
 8006d46:	2104      	movs	r1, #4
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ff9f 	bl	8006c8c <__sfmoreglue>
 8006d4e:	6030      	str	r0, [r6, #0]
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d1f1      	bne.n	8006d38 <__sfp+0x20>
 8006d54:	230c      	movs	r3, #12
 8006d56:	4604      	mov	r4, r0
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <__sfp+0x74>)
 8006d60:	6665      	str	r5, [r4, #100]	; 0x64
 8006d62:	e9c4 5500 	strd	r5, r5, [r4]
 8006d66:	60a5      	str	r5, [r4, #8]
 8006d68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006d6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006d70:	2208      	movs	r2, #8
 8006d72:	4629      	mov	r1, r5
 8006d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d78:	f7fe fc78 	bl	800566c <memset>
 8006d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d84:	e7e9      	b.n	8006d5a <__sfp+0x42>
 8006d86:	bf00      	nop
 8006d88:	08007770 	.word	0x08007770
 8006d8c:	ffff0001 	.word	0xffff0001

08006d90 <_fwalk_reent>:
 8006d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d94:	4680      	mov	r8, r0
 8006d96:	4689      	mov	r9, r1
 8006d98:	2600      	movs	r6, #0
 8006d9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d9e:	b914      	cbnz	r4, 8006da6 <_fwalk_reent+0x16>
 8006da0:	4630      	mov	r0, r6
 8006da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006daa:	3f01      	subs	r7, #1
 8006dac:	d501      	bpl.n	8006db2 <_fwalk_reent+0x22>
 8006dae:	6824      	ldr	r4, [r4, #0]
 8006db0:	e7f5      	b.n	8006d9e <_fwalk_reent+0xe>
 8006db2:	89ab      	ldrh	r3, [r5, #12]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d907      	bls.n	8006dc8 <_fwalk_reent+0x38>
 8006db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	d003      	beq.n	8006dc8 <_fwalk_reent+0x38>
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	47c8      	blx	r9
 8006dc6:	4306      	orrs	r6, r0
 8006dc8:	3568      	adds	r5, #104	; 0x68
 8006dca:	e7ee      	b.n	8006daa <_fwalk_reent+0x1a>

08006dcc <_localeconv_r>:
 8006dcc:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <_localeconv_r+0x14>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a18      	ldr	r0, [r3, #32]
 8006dd2:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <_localeconv_r+0x18>)
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	bf08      	it	eq
 8006dd8:	4618      	moveq	r0, r3
 8006dda:	30f0      	adds	r0, #240	; 0xf0
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000018 	.word	0x20000018
 8006de4:	2000007c 	.word	0x2000007c

08006de8 <__swhatbuf_r>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	460e      	mov	r6, r1
 8006dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df0:	b096      	sub	sp, #88	; 0x58
 8006df2:	2900      	cmp	r1, #0
 8006df4:	4614      	mov	r4, r2
 8006df6:	461d      	mov	r5, r3
 8006df8:	da07      	bge.n	8006e0a <__swhatbuf_r+0x22>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	602b      	str	r3, [r5, #0]
 8006dfe:	89b3      	ldrh	r3, [r6, #12]
 8006e00:	061a      	lsls	r2, r3, #24
 8006e02:	d410      	bmi.n	8006e26 <__swhatbuf_r+0x3e>
 8006e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e08:	e00e      	b.n	8006e28 <__swhatbuf_r+0x40>
 8006e0a:	466a      	mov	r2, sp
 8006e0c:	f000 fc2a 	bl	8007664 <_fstat_r>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	dbf2      	blt.n	8006dfa <__swhatbuf_r+0x12>
 8006e14:	9a01      	ldr	r2, [sp, #4]
 8006e16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e1e:	425a      	negs	r2, r3
 8006e20:	415a      	adcs	r2, r3
 8006e22:	602a      	str	r2, [r5, #0]
 8006e24:	e7ee      	b.n	8006e04 <__swhatbuf_r+0x1c>
 8006e26:	2340      	movs	r3, #64	; 0x40
 8006e28:	2000      	movs	r0, #0
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	b016      	add	sp, #88	; 0x58
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}

08006e30 <malloc>:
 8006e30:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <malloc+0xc>)
 8006e32:	4601      	mov	r1, r0
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	f000 bb45 	b.w	80074c4 <_malloc_r>
 8006e3a:	bf00      	nop
 8006e3c:	20000018 	.word	0x20000018

08006e40 <memcpy>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	1e43      	subs	r3, r0, #1
 8006e44:	440a      	add	r2, r1
 8006e46:	4291      	cmp	r1, r2
 8006e48:	d100      	bne.n	8006e4c <memcpy+0xc>
 8006e4a:	bd10      	pop	{r4, pc}
 8006e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e54:	e7f7      	b.n	8006e46 <memcpy+0x6>

08006e56 <_Balloc>:
 8006e56:	b570      	push	{r4, r5, r6, lr}
 8006e58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	460e      	mov	r6, r1
 8006e5e:	b93d      	cbnz	r5, 8006e70 <_Balloc+0x1a>
 8006e60:	2010      	movs	r0, #16
 8006e62:	f7ff ffe5 	bl	8006e30 <malloc>
 8006e66:	6260      	str	r0, [r4, #36]	; 0x24
 8006e68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e6c:	6005      	str	r5, [r0, #0]
 8006e6e:	60c5      	str	r5, [r0, #12]
 8006e70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e72:	68eb      	ldr	r3, [r5, #12]
 8006e74:	b183      	cbz	r3, 8006e98 <_Balloc+0x42>
 8006e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006e7e:	b9b8      	cbnz	r0, 8006eb0 <_Balloc+0x5a>
 8006e80:	2101      	movs	r1, #1
 8006e82:	fa01 f506 	lsl.w	r5, r1, r6
 8006e86:	1d6a      	adds	r2, r5, #5
 8006e88:	0092      	lsls	r2, r2, #2
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fabf 	bl	800740e <_calloc_r>
 8006e90:	b160      	cbz	r0, 8006eac <_Balloc+0x56>
 8006e92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006e96:	e00e      	b.n	8006eb6 <_Balloc+0x60>
 8006e98:	2221      	movs	r2, #33	; 0x21
 8006e9a:	2104      	movs	r1, #4
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 fab6 	bl	800740e <_calloc_r>
 8006ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea4:	60e8      	str	r0, [r5, #12]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e4      	bne.n	8006e76 <_Balloc+0x20>
 8006eac:	2000      	movs	r0, #0
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
 8006eb0:	6802      	ldr	r2, [r0, #0]
 8006eb2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ebc:	e7f7      	b.n	8006eae <_Balloc+0x58>

08006ebe <_Bfree>:
 8006ebe:	b570      	push	{r4, r5, r6, lr}
 8006ec0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	460d      	mov	r5, r1
 8006ec6:	b93c      	cbnz	r4, 8006ed8 <_Bfree+0x1a>
 8006ec8:	2010      	movs	r0, #16
 8006eca:	f7ff ffb1 	bl	8006e30 <malloc>
 8006ece:	6270      	str	r0, [r6, #36]	; 0x24
 8006ed0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ed4:	6004      	str	r4, [r0, #0]
 8006ed6:	60c4      	str	r4, [r0, #12]
 8006ed8:	b13d      	cbz	r5, 8006eea <_Bfree+0x2c>
 8006eda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006edc:	686a      	ldr	r2, [r5, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ee4:	6029      	str	r1, [r5, #0]
 8006ee6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006eea:	bd70      	pop	{r4, r5, r6, pc}

08006eec <__multadd>:
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	461f      	mov	r7, r3
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	690d      	ldr	r5, [r1, #16]
 8006efa:	f101 0c14 	add.w	ip, r1, #20
 8006efe:	f8dc 0000 	ldr.w	r0, [ip]
 8006f02:	3301      	adds	r3, #1
 8006f04:	b281      	uxth	r1, r0
 8006f06:	fb02 7101 	mla	r1, r2, r1, r7
 8006f0a:	0c00      	lsrs	r0, r0, #16
 8006f0c:	0c0f      	lsrs	r7, r1, #16
 8006f0e:	fb02 7000 	mla	r0, r2, r0, r7
 8006f12:	b289      	uxth	r1, r1
 8006f14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006f18:	429d      	cmp	r5, r3
 8006f1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006f1e:	f84c 1b04 	str.w	r1, [ip], #4
 8006f22:	dcec      	bgt.n	8006efe <__multadd+0x12>
 8006f24:	b1d7      	cbz	r7, 8006f5c <__multadd+0x70>
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	dc12      	bgt.n	8006f52 <__multadd+0x66>
 8006f2c:	6861      	ldr	r1, [r4, #4]
 8006f2e:	4630      	mov	r0, r6
 8006f30:	3101      	adds	r1, #1
 8006f32:	f7ff ff90 	bl	8006e56 <_Balloc>
 8006f36:	4680      	mov	r8, r0
 8006f38:	6922      	ldr	r2, [r4, #16]
 8006f3a:	f104 010c 	add.w	r1, r4, #12
 8006f3e:	3202      	adds	r2, #2
 8006f40:	0092      	lsls	r2, r2, #2
 8006f42:	300c      	adds	r0, #12
 8006f44:	f7ff ff7c 	bl	8006e40 <memcpy>
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7ff ffb7 	bl	8006ebe <_Bfree>
 8006f50:	4644      	mov	r4, r8
 8006f52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f56:	3501      	adds	r5, #1
 8006f58:	615f      	str	r7, [r3, #20]
 8006f5a:	6125      	str	r5, [r4, #16]
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f62 <__hi0bits>:
 8006f62:	0c02      	lsrs	r2, r0, #16
 8006f64:	0412      	lsls	r2, r2, #16
 8006f66:	4603      	mov	r3, r0
 8006f68:	b9b2      	cbnz	r2, 8006f98 <__hi0bits+0x36>
 8006f6a:	0403      	lsls	r3, r0, #16
 8006f6c:	2010      	movs	r0, #16
 8006f6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f72:	bf04      	itt	eq
 8006f74:	021b      	lsleq	r3, r3, #8
 8006f76:	3008      	addeq	r0, #8
 8006f78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f7c:	bf04      	itt	eq
 8006f7e:	011b      	lsleq	r3, r3, #4
 8006f80:	3004      	addeq	r0, #4
 8006f82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f86:	bf04      	itt	eq
 8006f88:	009b      	lsleq	r3, r3, #2
 8006f8a:	3002      	addeq	r0, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	db06      	blt.n	8006f9e <__hi0bits+0x3c>
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	d503      	bpl.n	8006f9c <__hi0bits+0x3a>
 8006f94:	3001      	adds	r0, #1
 8006f96:	4770      	bx	lr
 8006f98:	2000      	movs	r0, #0
 8006f9a:	e7e8      	b.n	8006f6e <__hi0bits+0xc>
 8006f9c:	2020      	movs	r0, #32
 8006f9e:	4770      	bx	lr

08006fa0 <__lo0bits>:
 8006fa0:	6803      	ldr	r3, [r0, #0]
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	f013 0207 	ands.w	r2, r3, #7
 8006fa8:	d00b      	beq.n	8006fc2 <__lo0bits+0x22>
 8006faa:	07da      	lsls	r2, r3, #31
 8006fac:	d423      	bmi.n	8006ff6 <__lo0bits+0x56>
 8006fae:	0798      	lsls	r0, r3, #30
 8006fb0:	bf49      	itett	mi
 8006fb2:	085b      	lsrmi	r3, r3, #1
 8006fb4:	089b      	lsrpl	r3, r3, #2
 8006fb6:	2001      	movmi	r0, #1
 8006fb8:	600b      	strmi	r3, [r1, #0]
 8006fba:	bf5c      	itt	pl
 8006fbc:	600b      	strpl	r3, [r1, #0]
 8006fbe:	2002      	movpl	r0, #2
 8006fc0:	4770      	bx	lr
 8006fc2:	b298      	uxth	r0, r3
 8006fc4:	b9a8      	cbnz	r0, 8006ff2 <__lo0bits+0x52>
 8006fc6:	2010      	movs	r0, #16
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006fce:	bf04      	itt	eq
 8006fd0:	0a1b      	lsreq	r3, r3, #8
 8006fd2:	3008      	addeq	r0, #8
 8006fd4:	071a      	lsls	r2, r3, #28
 8006fd6:	bf04      	itt	eq
 8006fd8:	091b      	lsreq	r3, r3, #4
 8006fda:	3004      	addeq	r0, #4
 8006fdc:	079a      	lsls	r2, r3, #30
 8006fde:	bf04      	itt	eq
 8006fe0:	089b      	lsreq	r3, r3, #2
 8006fe2:	3002      	addeq	r0, #2
 8006fe4:	07da      	lsls	r2, r3, #31
 8006fe6:	d402      	bmi.n	8006fee <__lo0bits+0x4e>
 8006fe8:	085b      	lsrs	r3, r3, #1
 8006fea:	d006      	beq.n	8006ffa <__lo0bits+0x5a>
 8006fec:	3001      	adds	r0, #1
 8006fee:	600b      	str	r3, [r1, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	e7e9      	b.n	8006fca <__lo0bits+0x2a>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	4770      	bx	lr
 8006ffa:	2020      	movs	r0, #32
 8006ffc:	4770      	bx	lr

08006ffe <__i2b>:
 8006ffe:	b510      	push	{r4, lr}
 8007000:	460c      	mov	r4, r1
 8007002:	2101      	movs	r1, #1
 8007004:	f7ff ff27 	bl	8006e56 <_Balloc>
 8007008:	2201      	movs	r2, #1
 800700a:	6144      	str	r4, [r0, #20]
 800700c:	6102      	str	r2, [r0, #16]
 800700e:	bd10      	pop	{r4, pc}

08007010 <__multiply>:
 8007010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	4614      	mov	r4, r2
 8007016:	690a      	ldr	r2, [r1, #16]
 8007018:	6923      	ldr	r3, [r4, #16]
 800701a:	4688      	mov	r8, r1
 800701c:	429a      	cmp	r2, r3
 800701e:	bfbe      	ittt	lt
 8007020:	460b      	movlt	r3, r1
 8007022:	46a0      	movlt	r8, r4
 8007024:	461c      	movlt	r4, r3
 8007026:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800702a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800702e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007032:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007036:	eb07 0609 	add.w	r6, r7, r9
 800703a:	42b3      	cmp	r3, r6
 800703c:	bfb8      	it	lt
 800703e:	3101      	addlt	r1, #1
 8007040:	f7ff ff09 	bl	8006e56 <_Balloc>
 8007044:	f100 0514 	add.w	r5, r0, #20
 8007048:	462b      	mov	r3, r5
 800704a:	2200      	movs	r2, #0
 800704c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007050:	4573      	cmp	r3, lr
 8007052:	d316      	bcc.n	8007082 <__multiply+0x72>
 8007054:	f104 0214 	add.w	r2, r4, #20
 8007058:	f108 0114 	add.w	r1, r8, #20
 800705c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007060:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	9b00      	ldr	r3, [sp, #0]
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	4293      	cmp	r3, r2
 800706c:	d80c      	bhi.n	8007088 <__multiply+0x78>
 800706e:	2e00      	cmp	r6, #0
 8007070:	dd03      	ble.n	800707a <__multiply+0x6a>
 8007072:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007076:	2b00      	cmp	r3, #0
 8007078:	d05d      	beq.n	8007136 <__multiply+0x126>
 800707a:	6106      	str	r6, [r0, #16]
 800707c:	b003      	add	sp, #12
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	f843 2b04 	str.w	r2, [r3], #4
 8007086:	e7e3      	b.n	8007050 <__multiply+0x40>
 8007088:	f8b2 b000 	ldrh.w	fp, [r2]
 800708c:	f1bb 0f00 	cmp.w	fp, #0
 8007090:	d023      	beq.n	80070da <__multiply+0xca>
 8007092:	4689      	mov	r9, r1
 8007094:	46ac      	mov	ip, r5
 8007096:	f04f 0800 	mov.w	r8, #0
 800709a:	f859 4b04 	ldr.w	r4, [r9], #4
 800709e:	f8dc a000 	ldr.w	sl, [ip]
 80070a2:	b2a3      	uxth	r3, r4
 80070a4:	fa1f fa8a 	uxth.w	sl, sl
 80070a8:	fb0b a303 	mla	r3, fp, r3, sl
 80070ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070b0:	f8dc 4000 	ldr.w	r4, [ip]
 80070b4:	4443      	add	r3, r8
 80070b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070ba:	fb0b 840a 	mla	r4, fp, sl, r8
 80070be:	46e2      	mov	sl, ip
 80070c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80070ca:	454f      	cmp	r7, r9
 80070cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070d0:	f84a 3b04 	str.w	r3, [sl], #4
 80070d4:	d82b      	bhi.n	800712e <__multiply+0x11e>
 80070d6:	f8cc 8004 	str.w	r8, [ip, #4]
 80070da:	9b01      	ldr	r3, [sp, #4]
 80070dc:	3204      	adds	r2, #4
 80070de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80070e2:	f1ba 0f00 	cmp.w	sl, #0
 80070e6:	d020      	beq.n	800712a <__multiply+0x11a>
 80070e8:	4689      	mov	r9, r1
 80070ea:	46a8      	mov	r8, r5
 80070ec:	f04f 0b00 	mov.w	fp, #0
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	f8b9 c000 	ldrh.w	ip, [r9]
 80070f6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	fb0a 440c 	mla	r4, sl, ip, r4
 8007100:	46c4      	mov	ip, r8
 8007102:	445c      	add	r4, fp
 8007104:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007108:	f84c 3b04 	str.w	r3, [ip], #4
 800710c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007110:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007114:	0c1b      	lsrs	r3, r3, #16
 8007116:	fb0a b303 	mla	r3, sl, r3, fp
 800711a:	454f      	cmp	r7, r9
 800711c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007120:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007124:	d805      	bhi.n	8007132 <__multiply+0x122>
 8007126:	f8c8 3004 	str.w	r3, [r8, #4]
 800712a:	3504      	adds	r5, #4
 800712c:	e79b      	b.n	8007066 <__multiply+0x56>
 800712e:	46d4      	mov	ip, sl
 8007130:	e7b3      	b.n	800709a <__multiply+0x8a>
 8007132:	46e0      	mov	r8, ip
 8007134:	e7dd      	b.n	80070f2 <__multiply+0xe2>
 8007136:	3e01      	subs	r6, #1
 8007138:	e799      	b.n	800706e <__multiply+0x5e>
	...

0800713c <__pow5mult>:
 800713c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007140:	4615      	mov	r5, r2
 8007142:	f012 0203 	ands.w	r2, r2, #3
 8007146:	4606      	mov	r6, r0
 8007148:	460f      	mov	r7, r1
 800714a:	d007      	beq.n	800715c <__pow5mult+0x20>
 800714c:	4c21      	ldr	r4, [pc, #132]	; (80071d4 <__pow5mult+0x98>)
 800714e:	3a01      	subs	r2, #1
 8007150:	2300      	movs	r3, #0
 8007152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007156:	f7ff fec9 	bl	8006eec <__multadd>
 800715a:	4607      	mov	r7, r0
 800715c:	10ad      	asrs	r5, r5, #2
 800715e:	d035      	beq.n	80071cc <__pow5mult+0x90>
 8007160:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007162:	b93c      	cbnz	r4, 8007174 <__pow5mult+0x38>
 8007164:	2010      	movs	r0, #16
 8007166:	f7ff fe63 	bl	8006e30 <malloc>
 800716a:	6270      	str	r0, [r6, #36]	; 0x24
 800716c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007170:	6004      	str	r4, [r0, #0]
 8007172:	60c4      	str	r4, [r0, #12]
 8007174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800717c:	b94c      	cbnz	r4, 8007192 <__pow5mult+0x56>
 800717e:	f240 2171 	movw	r1, #625	; 0x271
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ff3b 	bl	8006ffe <__i2b>
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	07eb      	lsls	r3, r5, #31
 8007198:	d50a      	bpl.n	80071b0 <__pow5mult+0x74>
 800719a:	4639      	mov	r1, r7
 800719c:	4622      	mov	r2, r4
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ff36 	bl	8007010 <__multiply>
 80071a4:	4681      	mov	r9, r0
 80071a6:	4639      	mov	r1, r7
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7ff fe88 	bl	8006ebe <_Bfree>
 80071ae:	464f      	mov	r7, r9
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	d00b      	beq.n	80071cc <__pow5mult+0x90>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	b938      	cbnz	r0, 80071c8 <__pow5mult+0x8c>
 80071b8:	4622      	mov	r2, r4
 80071ba:	4621      	mov	r1, r4
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ff27 	bl	8007010 <__multiply>
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	f8c0 8000 	str.w	r8, [r0]
 80071c8:	4604      	mov	r4, r0
 80071ca:	e7e4      	b.n	8007196 <__pow5mult+0x5a>
 80071cc:	4638      	mov	r0, r7
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	bf00      	nop
 80071d4:	080078e8 	.word	0x080078e8

080071d8 <__lshift>:
 80071d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	460c      	mov	r4, r1
 80071de:	4607      	mov	r7, r0
 80071e0:	4616      	mov	r6, r2
 80071e2:	6923      	ldr	r3, [r4, #16]
 80071e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071e8:	eb0a 0903 	add.w	r9, sl, r3
 80071ec:	6849      	ldr	r1, [r1, #4]
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	f109 0501 	add.w	r5, r9, #1
 80071f4:	42ab      	cmp	r3, r5
 80071f6:	db32      	blt.n	800725e <__lshift+0x86>
 80071f8:	4638      	mov	r0, r7
 80071fa:	f7ff fe2c 	bl	8006e56 <_Balloc>
 80071fe:	2300      	movs	r3, #0
 8007200:	4680      	mov	r8, r0
 8007202:	461a      	mov	r2, r3
 8007204:	f100 0114 	add.w	r1, r0, #20
 8007208:	4553      	cmp	r3, sl
 800720a:	db2b      	blt.n	8007264 <__lshift+0x8c>
 800720c:	6920      	ldr	r0, [r4, #16]
 800720e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007212:	f104 0314 	add.w	r3, r4, #20
 8007216:	f016 021f 	ands.w	r2, r6, #31
 800721a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800721e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007222:	d025      	beq.n	8007270 <__lshift+0x98>
 8007224:	2000      	movs	r0, #0
 8007226:	f1c2 0e20 	rsb	lr, r2, #32
 800722a:	468a      	mov	sl, r1
 800722c:	681e      	ldr	r6, [r3, #0]
 800722e:	4096      	lsls	r6, r2
 8007230:	4330      	orrs	r0, r6
 8007232:	f84a 0b04 	str.w	r0, [sl], #4
 8007236:	f853 0b04 	ldr.w	r0, [r3], #4
 800723a:	459c      	cmp	ip, r3
 800723c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007240:	d814      	bhi.n	800726c <__lshift+0x94>
 8007242:	6048      	str	r0, [r1, #4]
 8007244:	b108      	cbz	r0, 800724a <__lshift+0x72>
 8007246:	f109 0502 	add.w	r5, r9, #2
 800724a:	3d01      	subs	r5, #1
 800724c:	4638      	mov	r0, r7
 800724e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007252:	4621      	mov	r1, r4
 8007254:	f7ff fe33 	bl	8006ebe <_Bfree>
 8007258:	4640      	mov	r0, r8
 800725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725e:	3101      	adds	r1, #1
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	e7c7      	b.n	80071f4 <__lshift+0x1c>
 8007264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007268:	3301      	adds	r3, #1
 800726a:	e7cd      	b.n	8007208 <__lshift+0x30>
 800726c:	4651      	mov	r1, sl
 800726e:	e7dc      	b.n	800722a <__lshift+0x52>
 8007270:	3904      	subs	r1, #4
 8007272:	f853 2b04 	ldr.w	r2, [r3], #4
 8007276:	459c      	cmp	ip, r3
 8007278:	f841 2f04 	str.w	r2, [r1, #4]!
 800727c:	d8f9      	bhi.n	8007272 <__lshift+0x9a>
 800727e:	e7e4      	b.n	800724a <__lshift+0x72>

08007280 <__mcmp>:
 8007280:	6903      	ldr	r3, [r0, #16]
 8007282:	690a      	ldr	r2, [r1, #16]
 8007284:	b530      	push	{r4, r5, lr}
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	d10c      	bne.n	80072a4 <__mcmp+0x24>
 800728a:	0092      	lsls	r2, r2, #2
 800728c:	3014      	adds	r0, #20
 800728e:	3114      	adds	r1, #20
 8007290:	1884      	adds	r4, r0, r2
 8007292:	4411      	add	r1, r2
 8007294:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007298:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800729c:	4295      	cmp	r5, r2
 800729e:	d003      	beq.n	80072a8 <__mcmp+0x28>
 80072a0:	d305      	bcc.n	80072ae <__mcmp+0x2e>
 80072a2:	2301      	movs	r3, #1
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd30      	pop	{r4, r5, pc}
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d3f3      	bcc.n	8007294 <__mcmp+0x14>
 80072ac:	e7fa      	b.n	80072a4 <__mcmp+0x24>
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295
 80072b2:	e7f7      	b.n	80072a4 <__mcmp+0x24>

080072b4 <__mdiff>:
 80072b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	460d      	mov	r5, r1
 80072ba:	4607      	mov	r7, r0
 80072bc:	4611      	mov	r1, r2
 80072be:	4628      	mov	r0, r5
 80072c0:	4614      	mov	r4, r2
 80072c2:	f7ff ffdd 	bl	8007280 <__mcmp>
 80072c6:	1e06      	subs	r6, r0, #0
 80072c8:	d108      	bne.n	80072dc <__mdiff+0x28>
 80072ca:	4631      	mov	r1, r6
 80072cc:	4638      	mov	r0, r7
 80072ce:	f7ff fdc2 	bl	8006e56 <_Balloc>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80072d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072dc:	bfa4      	itt	ge
 80072de:	4623      	movge	r3, r4
 80072e0:	462c      	movge	r4, r5
 80072e2:	4638      	mov	r0, r7
 80072e4:	6861      	ldr	r1, [r4, #4]
 80072e6:	bfa6      	itte	ge
 80072e8:	461d      	movge	r5, r3
 80072ea:	2600      	movge	r6, #0
 80072ec:	2601      	movlt	r6, #1
 80072ee:	f7ff fdb2 	bl	8006e56 <_Balloc>
 80072f2:	f04f 0e00 	mov.w	lr, #0
 80072f6:	60c6      	str	r6, [r0, #12]
 80072f8:	692b      	ldr	r3, [r5, #16]
 80072fa:	6926      	ldr	r6, [r4, #16]
 80072fc:	f104 0214 	add.w	r2, r4, #20
 8007300:	f105 0914 	add.w	r9, r5, #20
 8007304:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007308:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800730c:	f100 0114 	add.w	r1, r0, #20
 8007310:	f852 ab04 	ldr.w	sl, [r2], #4
 8007314:	f859 5b04 	ldr.w	r5, [r9], #4
 8007318:	fa1f f38a 	uxth.w	r3, sl
 800731c:	4473      	add	r3, lr
 800731e:	b2ac      	uxth	r4, r5
 8007320:	1b1b      	subs	r3, r3, r4
 8007322:	0c2c      	lsrs	r4, r5, #16
 8007324:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007328:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800732c:	b29b      	uxth	r3, r3
 800732e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007332:	45c8      	cmp	r8, r9
 8007334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007338:	4694      	mov	ip, r2
 800733a:	f841 4b04 	str.w	r4, [r1], #4
 800733e:	d8e7      	bhi.n	8007310 <__mdiff+0x5c>
 8007340:	45bc      	cmp	ip, r7
 8007342:	d304      	bcc.n	800734e <__mdiff+0x9a>
 8007344:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007348:	b183      	cbz	r3, 800736c <__mdiff+0xb8>
 800734a:	6106      	str	r6, [r0, #16]
 800734c:	e7c4      	b.n	80072d8 <__mdiff+0x24>
 800734e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007352:	b2a2      	uxth	r2, r4
 8007354:	4472      	add	r2, lr
 8007356:	1413      	asrs	r3, r2, #16
 8007358:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800735c:	b292      	uxth	r2, r2
 800735e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007362:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007366:	f841 2b04 	str.w	r2, [r1], #4
 800736a:	e7e9      	b.n	8007340 <__mdiff+0x8c>
 800736c:	3e01      	subs	r6, #1
 800736e:	e7e9      	b.n	8007344 <__mdiff+0x90>

08007370 <__d2b>:
 8007370:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007374:	461c      	mov	r4, r3
 8007376:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800737a:	2101      	movs	r1, #1
 800737c:	4690      	mov	r8, r2
 800737e:	f7ff fd6a 	bl	8006e56 <_Balloc>
 8007382:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007386:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800738a:	4607      	mov	r7, r0
 800738c:	bb34      	cbnz	r4, 80073dc <__d2b+0x6c>
 800738e:	9201      	str	r2, [sp, #4]
 8007390:	f1b8 0200 	subs.w	r2, r8, #0
 8007394:	d027      	beq.n	80073e6 <__d2b+0x76>
 8007396:	a802      	add	r0, sp, #8
 8007398:	f840 2d08 	str.w	r2, [r0, #-8]!
 800739c:	f7ff fe00 	bl	8006fa0 <__lo0bits>
 80073a0:	9900      	ldr	r1, [sp, #0]
 80073a2:	b1f0      	cbz	r0, 80073e2 <__d2b+0x72>
 80073a4:	9a01      	ldr	r2, [sp, #4]
 80073a6:	f1c0 0320 	rsb	r3, r0, #32
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	430b      	orrs	r3, r1
 80073b0:	40c2      	lsrs	r2, r0
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	9201      	str	r2, [sp, #4]
 80073b6:	9b01      	ldr	r3, [sp, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bf14      	ite	ne
 80073bc:	2102      	movne	r1, #2
 80073be:	2101      	moveq	r1, #1
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	6139      	str	r1, [r7, #16]
 80073c4:	b1c4      	cbz	r4, 80073f8 <__d2b+0x88>
 80073c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80073ca:	4404      	add	r4, r0
 80073cc:	6034      	str	r4, [r6, #0]
 80073ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073d2:	6028      	str	r0, [r5, #0]
 80073d4:	4638      	mov	r0, r7
 80073d6:	b002      	add	sp, #8
 80073d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80073e0:	e7d5      	b.n	800738e <__d2b+0x1e>
 80073e2:	6179      	str	r1, [r7, #20]
 80073e4:	e7e7      	b.n	80073b6 <__d2b+0x46>
 80073e6:	a801      	add	r0, sp, #4
 80073e8:	f7ff fdda 	bl	8006fa0 <__lo0bits>
 80073ec:	2101      	movs	r1, #1
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	6139      	str	r1, [r7, #16]
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	3020      	adds	r0, #32
 80073f6:	e7e5      	b.n	80073c4 <__d2b+0x54>
 80073f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073fc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007400:	6030      	str	r0, [r6, #0]
 8007402:	6918      	ldr	r0, [r3, #16]
 8007404:	f7ff fdad 	bl	8006f62 <__hi0bits>
 8007408:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800740c:	e7e1      	b.n	80073d2 <__d2b+0x62>

0800740e <_calloc_r>:
 800740e:	b538      	push	{r3, r4, r5, lr}
 8007410:	fb02 f401 	mul.w	r4, r2, r1
 8007414:	4621      	mov	r1, r4
 8007416:	f000 f855 	bl	80074c4 <_malloc_r>
 800741a:	4605      	mov	r5, r0
 800741c:	b118      	cbz	r0, 8007426 <_calloc_r+0x18>
 800741e:	4622      	mov	r2, r4
 8007420:	2100      	movs	r1, #0
 8007422:	f7fe f923 	bl	800566c <memset>
 8007426:	4628      	mov	r0, r5
 8007428:	bd38      	pop	{r3, r4, r5, pc}
	...

0800742c <_free_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4605      	mov	r5, r0
 8007430:	2900      	cmp	r1, #0
 8007432:	d043      	beq.n	80074bc <_free_r+0x90>
 8007434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007438:	1f0c      	subs	r4, r1, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	bfb8      	it	lt
 800743e:	18e4      	addlt	r4, r4, r3
 8007440:	f000 f946 	bl	80076d0 <__malloc_lock>
 8007444:	4a1e      	ldr	r2, [pc, #120]	; (80074c0 <_free_r+0x94>)
 8007446:	6813      	ldr	r3, [r2, #0]
 8007448:	4610      	mov	r0, r2
 800744a:	b933      	cbnz	r3, 800745a <_free_r+0x2e>
 800744c:	6063      	str	r3, [r4, #4]
 800744e:	6014      	str	r4, [r2, #0]
 8007450:	4628      	mov	r0, r5
 8007452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007456:	f000 b93c 	b.w	80076d2 <__malloc_unlock>
 800745a:	42a3      	cmp	r3, r4
 800745c:	d90b      	bls.n	8007476 <_free_r+0x4a>
 800745e:	6821      	ldr	r1, [r4, #0]
 8007460:	1862      	adds	r2, r4, r1
 8007462:	4293      	cmp	r3, r2
 8007464:	bf01      	itttt	eq
 8007466:	681a      	ldreq	r2, [r3, #0]
 8007468:	685b      	ldreq	r3, [r3, #4]
 800746a:	1852      	addeq	r2, r2, r1
 800746c:	6022      	streq	r2, [r4, #0]
 800746e:	6063      	str	r3, [r4, #4]
 8007470:	6004      	str	r4, [r0, #0]
 8007472:	e7ed      	b.n	8007450 <_free_r+0x24>
 8007474:	4613      	mov	r3, r2
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	b10a      	cbz	r2, 800747e <_free_r+0x52>
 800747a:	42a2      	cmp	r2, r4
 800747c:	d9fa      	bls.n	8007474 <_free_r+0x48>
 800747e:	6819      	ldr	r1, [r3, #0]
 8007480:	1858      	adds	r0, r3, r1
 8007482:	42a0      	cmp	r0, r4
 8007484:	d10b      	bne.n	800749e <_free_r+0x72>
 8007486:	6820      	ldr	r0, [r4, #0]
 8007488:	4401      	add	r1, r0
 800748a:	1858      	adds	r0, r3, r1
 800748c:	4282      	cmp	r2, r0
 800748e:	6019      	str	r1, [r3, #0]
 8007490:	d1de      	bne.n	8007450 <_free_r+0x24>
 8007492:	6810      	ldr	r0, [r2, #0]
 8007494:	6852      	ldr	r2, [r2, #4]
 8007496:	4401      	add	r1, r0
 8007498:	6019      	str	r1, [r3, #0]
 800749a:	605a      	str	r2, [r3, #4]
 800749c:	e7d8      	b.n	8007450 <_free_r+0x24>
 800749e:	d902      	bls.n	80074a6 <_free_r+0x7a>
 80074a0:	230c      	movs	r3, #12
 80074a2:	602b      	str	r3, [r5, #0]
 80074a4:	e7d4      	b.n	8007450 <_free_r+0x24>
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	1821      	adds	r1, r4, r0
 80074aa:	428a      	cmp	r2, r1
 80074ac:	bf01      	itttt	eq
 80074ae:	6811      	ldreq	r1, [r2, #0]
 80074b0:	6852      	ldreq	r2, [r2, #4]
 80074b2:	1809      	addeq	r1, r1, r0
 80074b4:	6021      	streq	r1, [r4, #0]
 80074b6:	6062      	str	r2, [r4, #4]
 80074b8:	605c      	str	r4, [r3, #4]
 80074ba:	e7c9      	b.n	8007450 <_free_r+0x24>
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
 80074be:	bf00      	nop
 80074c0:	20000218 	.word	0x20000218

080074c4 <_malloc_r>:
 80074c4:	b570      	push	{r4, r5, r6, lr}
 80074c6:	1ccd      	adds	r5, r1, #3
 80074c8:	f025 0503 	bic.w	r5, r5, #3
 80074cc:	3508      	adds	r5, #8
 80074ce:	2d0c      	cmp	r5, #12
 80074d0:	bf38      	it	cc
 80074d2:	250c      	movcc	r5, #12
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	4606      	mov	r6, r0
 80074d8:	db01      	blt.n	80074de <_malloc_r+0x1a>
 80074da:	42a9      	cmp	r1, r5
 80074dc:	d903      	bls.n	80074e6 <_malloc_r+0x22>
 80074de:	230c      	movs	r3, #12
 80074e0:	6033      	str	r3, [r6, #0]
 80074e2:	2000      	movs	r0, #0
 80074e4:	bd70      	pop	{r4, r5, r6, pc}
 80074e6:	f000 f8f3 	bl	80076d0 <__malloc_lock>
 80074ea:	4a21      	ldr	r2, [pc, #132]	; (8007570 <_malloc_r+0xac>)
 80074ec:	6814      	ldr	r4, [r2, #0]
 80074ee:	4621      	mov	r1, r4
 80074f0:	b991      	cbnz	r1, 8007518 <_malloc_r+0x54>
 80074f2:	4c20      	ldr	r4, [pc, #128]	; (8007574 <_malloc_r+0xb0>)
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	b91b      	cbnz	r3, 8007500 <_malloc_r+0x3c>
 80074f8:	4630      	mov	r0, r6
 80074fa:	f000 f83d 	bl	8007578 <_sbrk_r>
 80074fe:	6020      	str	r0, [r4, #0]
 8007500:	4629      	mov	r1, r5
 8007502:	4630      	mov	r0, r6
 8007504:	f000 f838 	bl	8007578 <_sbrk_r>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d124      	bne.n	8007556 <_malloc_r+0x92>
 800750c:	230c      	movs	r3, #12
 800750e:	4630      	mov	r0, r6
 8007510:	6033      	str	r3, [r6, #0]
 8007512:	f000 f8de 	bl	80076d2 <__malloc_unlock>
 8007516:	e7e4      	b.n	80074e2 <_malloc_r+0x1e>
 8007518:	680b      	ldr	r3, [r1, #0]
 800751a:	1b5b      	subs	r3, r3, r5
 800751c:	d418      	bmi.n	8007550 <_malloc_r+0x8c>
 800751e:	2b0b      	cmp	r3, #11
 8007520:	d90f      	bls.n	8007542 <_malloc_r+0x7e>
 8007522:	600b      	str	r3, [r1, #0]
 8007524:	18cc      	adds	r4, r1, r3
 8007526:	50cd      	str	r5, [r1, r3]
 8007528:	4630      	mov	r0, r6
 800752a:	f000 f8d2 	bl	80076d2 <__malloc_unlock>
 800752e:	f104 000b 	add.w	r0, r4, #11
 8007532:	1d23      	adds	r3, r4, #4
 8007534:	f020 0007 	bic.w	r0, r0, #7
 8007538:	1ac3      	subs	r3, r0, r3
 800753a:	d0d3      	beq.n	80074e4 <_malloc_r+0x20>
 800753c:	425a      	negs	r2, r3
 800753e:	50e2      	str	r2, [r4, r3]
 8007540:	e7d0      	b.n	80074e4 <_malloc_r+0x20>
 8007542:	684b      	ldr	r3, [r1, #4]
 8007544:	428c      	cmp	r4, r1
 8007546:	bf16      	itet	ne
 8007548:	6063      	strne	r3, [r4, #4]
 800754a:	6013      	streq	r3, [r2, #0]
 800754c:	460c      	movne	r4, r1
 800754e:	e7eb      	b.n	8007528 <_malloc_r+0x64>
 8007550:	460c      	mov	r4, r1
 8007552:	6849      	ldr	r1, [r1, #4]
 8007554:	e7cc      	b.n	80074f0 <_malloc_r+0x2c>
 8007556:	1cc4      	adds	r4, r0, #3
 8007558:	f024 0403 	bic.w	r4, r4, #3
 800755c:	42a0      	cmp	r0, r4
 800755e:	d005      	beq.n	800756c <_malloc_r+0xa8>
 8007560:	1a21      	subs	r1, r4, r0
 8007562:	4630      	mov	r0, r6
 8007564:	f000 f808 	bl	8007578 <_sbrk_r>
 8007568:	3001      	adds	r0, #1
 800756a:	d0cf      	beq.n	800750c <_malloc_r+0x48>
 800756c:	6025      	str	r5, [r4, #0]
 800756e:	e7db      	b.n	8007528 <_malloc_r+0x64>
 8007570:	20000218 	.word	0x20000218
 8007574:	2000021c 	.word	0x2000021c

08007578 <_sbrk_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	2300      	movs	r3, #0
 800757c:	4c05      	ldr	r4, [pc, #20]	; (8007594 <_sbrk_r+0x1c>)
 800757e:	4605      	mov	r5, r0
 8007580:	4608      	mov	r0, r1
 8007582:	6023      	str	r3, [r4, #0]
 8007584:	f7fc fea6 	bl	80042d4 <_sbrk>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_sbrk_r+0x1a>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	b103      	cbz	r3, 8007592 <_sbrk_r+0x1a>
 8007590:	602b      	str	r3, [r5, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20000230 	.word	0x20000230

08007598 <__sread>:
 8007598:	b510      	push	{r4, lr}
 800759a:	460c      	mov	r4, r1
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	f000 f898 	bl	80076d4 <_read_r>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	bfab      	itete	ge
 80075a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075aa:	89a3      	ldrhlt	r3, [r4, #12]
 80075ac:	181b      	addge	r3, r3, r0
 80075ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075b2:	bfac      	ite	ge
 80075b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80075b6:	81a3      	strhlt	r3, [r4, #12]
 80075b8:	bd10      	pop	{r4, pc}

080075ba <__swrite>:
 80075ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	461f      	mov	r7, r3
 80075c0:	898b      	ldrh	r3, [r1, #12]
 80075c2:	4605      	mov	r5, r0
 80075c4:	05db      	lsls	r3, r3, #23
 80075c6:	460c      	mov	r4, r1
 80075c8:	4616      	mov	r6, r2
 80075ca:	d505      	bpl.n	80075d8 <__swrite+0x1e>
 80075cc:	2302      	movs	r3, #2
 80075ce:	2200      	movs	r2, #0
 80075d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d4:	f000 f858 	bl	8007688 <_lseek_r>
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	4632      	mov	r2, r6
 80075dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e0:	81a3      	strh	r3, [r4, #12]
 80075e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075e6:	463b      	mov	r3, r7
 80075e8:	4628      	mov	r0, r5
 80075ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ee:	f000 b817 	b.w	8007620 <_write_r>

080075f2 <__sseek>:
 80075f2:	b510      	push	{r4, lr}
 80075f4:	460c      	mov	r4, r1
 80075f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fa:	f000 f845 	bl	8007688 <_lseek_r>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	bf15      	itete	ne
 8007604:	6560      	strne	r0, [r4, #84]	; 0x54
 8007606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800760a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800760e:	81a3      	strheq	r3, [r4, #12]
 8007610:	bf18      	it	ne
 8007612:	81a3      	strhne	r3, [r4, #12]
 8007614:	bd10      	pop	{r4, pc}

08007616 <__sclose>:
 8007616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761a:	f000 b813 	b.w	8007644 <_close_r>
	...

08007620 <_write_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4605      	mov	r5, r0
 8007624:	4608      	mov	r0, r1
 8007626:	4611      	mov	r1, r2
 8007628:	2200      	movs	r2, #0
 800762a:	4c05      	ldr	r4, [pc, #20]	; (8007640 <_write_r+0x20>)
 800762c:	6022      	str	r2, [r4, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	f7fc fe0d 	bl	800424e <_write>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_write_r+0x1e>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	b103      	cbz	r3, 800763e <_write_r+0x1e>
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20000230 	.word	0x20000230

08007644 <_close_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	2300      	movs	r3, #0
 8007648:	4c05      	ldr	r4, [pc, #20]	; (8007660 <_close_r+0x1c>)
 800764a:	4605      	mov	r5, r0
 800764c:	4608      	mov	r0, r1
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	f7fc fe19 	bl	8004286 <_close>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_close_r+0x1a>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	b103      	cbz	r3, 800765e <_close_r+0x1a>
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000230 	.word	0x20000230

08007664 <_fstat_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	2300      	movs	r3, #0
 8007668:	4c06      	ldr	r4, [pc, #24]	; (8007684 <_fstat_r+0x20>)
 800766a:	4605      	mov	r5, r0
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	f7fc fe13 	bl	800429c <_fstat>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d102      	bne.n	8007680 <_fstat_r+0x1c>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	b103      	cbz	r3, 8007680 <_fstat_r+0x1c>
 800767e:	602b      	str	r3, [r5, #0]
 8007680:	bd38      	pop	{r3, r4, r5, pc}
 8007682:	bf00      	nop
 8007684:	20000230 	.word	0x20000230

08007688 <_lseek_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4605      	mov	r5, r0
 800768c:	4608      	mov	r0, r1
 800768e:	4611      	mov	r1, r2
 8007690:	2200      	movs	r2, #0
 8007692:	4c05      	ldr	r4, [pc, #20]	; (80076a8 <_lseek_r+0x20>)
 8007694:	6022      	str	r2, [r4, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f7fc fe0f 	bl	80042ba <_lseek>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_lseek_r+0x1e>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_lseek_r+0x1e>
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20000230 	.word	0x20000230

080076ac <__ascii_mbtowc>:
 80076ac:	b082      	sub	sp, #8
 80076ae:	b901      	cbnz	r1, 80076b2 <__ascii_mbtowc+0x6>
 80076b0:	a901      	add	r1, sp, #4
 80076b2:	b142      	cbz	r2, 80076c6 <__ascii_mbtowc+0x1a>
 80076b4:	b14b      	cbz	r3, 80076ca <__ascii_mbtowc+0x1e>
 80076b6:	7813      	ldrb	r3, [r2, #0]
 80076b8:	600b      	str	r3, [r1, #0]
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	1c10      	adds	r0, r2, #0
 80076be:	bf18      	it	ne
 80076c0:	2001      	movne	r0, #1
 80076c2:	b002      	add	sp, #8
 80076c4:	4770      	bx	lr
 80076c6:	4610      	mov	r0, r2
 80076c8:	e7fb      	b.n	80076c2 <__ascii_mbtowc+0x16>
 80076ca:	f06f 0001 	mvn.w	r0, #1
 80076ce:	e7f8      	b.n	80076c2 <__ascii_mbtowc+0x16>

080076d0 <__malloc_lock>:
 80076d0:	4770      	bx	lr

080076d2 <__malloc_unlock>:
 80076d2:	4770      	bx	lr

080076d4 <_read_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4605      	mov	r5, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	4611      	mov	r1, r2
 80076dc:	2200      	movs	r2, #0
 80076de:	4c05      	ldr	r4, [pc, #20]	; (80076f4 <_read_r+0x20>)
 80076e0:	6022      	str	r2, [r4, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	f7fc fd96 	bl	8004214 <_read>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_read_r+0x1e>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_read_r+0x1e>
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	20000230 	.word	0x20000230

080076f8 <__ascii_wctomb>:
 80076f8:	b149      	cbz	r1, 800770e <__ascii_wctomb+0x16>
 80076fa:	2aff      	cmp	r2, #255	; 0xff
 80076fc:	bf8b      	itete	hi
 80076fe:	238a      	movhi	r3, #138	; 0x8a
 8007700:	700a      	strbls	r2, [r1, #0]
 8007702:	6003      	strhi	r3, [r0, #0]
 8007704:	2001      	movls	r0, #1
 8007706:	bf88      	it	hi
 8007708:	f04f 30ff 	movhi.w	r0, #4294967295
 800770c:	4770      	bx	lr
 800770e:	4608      	mov	r0, r1
 8007710:	4770      	bx	lr
	...

08007714 <_init>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr

08007720 <_fini>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

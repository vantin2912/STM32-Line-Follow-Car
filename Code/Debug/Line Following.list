
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a7c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08007b90  08007b90  00017b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f50  08007f50  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007f50  08007f50  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f50  08007f50  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f54  08007f54  00017f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  200001e8  08008140  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08008140  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e85  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ce7  00000000  00000000  0002a096  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b08  00000000  00000000  0002bd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a20  00000000  00000000  0002c888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015865  00000000  00000000  0002d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ddc  00000000  00000000  00042b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dd64  00000000  00000000  000498e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b764d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e24  00000000  00000000  000b76c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007b74 	.word	0x08007b74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007b74 	.word	0x08007b74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	621a      	str	r2, [r3, #32]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	b29a      	uxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	611a      	str	r2, [r3, #16]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29a      	uxth	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	615a      	str	r2, [r3, #20]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <MotorL_EnablePWM>:
 */
#include "MotorControl.h"


void MotorL_EnablePWM(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 80011a4:	2101      	movs	r1, #1
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <MotorL_EnablePWM+0x10>)
 80011a8:	f7ff ffb2 	bl	8001110 <LL_TIM_CC_EnableChannel>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40012c00 	.word	0x40012c00

080011b4 <MotorR_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void MotorR_EnablePWM(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <MotorR_EnablePWM+0x14>)
 80011be:	f7ff ffa7 	bl	8001110 <LL_TIM_CC_EnableChannel>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012c00 	.word	0x40012c00

080011cc <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80011da:	db03      	blt.n	80011e4 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 80011dc:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	e005      	b.n	80011f0 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80011ea:	dc01      	bgt.n	80011f0 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MotorL_SetPWM+0x60>)
 80011ee:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0a      	blt.n	800120c <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <MotorL_SetPWM+0x64>)
 80011fe:	f7ff ff97 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001202:	490c      	ldr	r1, [pc, #48]	; (8001234 <MotorL_SetPWM+0x68>)
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MotorL_SetPWM+0x6c>)
 8001206:	f7ff ffbc 	bl	8001182 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800120a:	e00a      	b.n	8001222 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001212:	4619      	mov	r1, r3
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <MotorL_SetPWM+0x64>)
 8001216:	f7ff ff8b 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800121a:	4906      	ldr	r1, [pc, #24]	; (8001234 <MotorL_SetPWM+0x68>)
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <MotorL_SetPWM+0x6c>)
 800121e:	f7ff ffa1 	bl	8001164 <LL_GPIO_SetOutputPin>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	ffffe3e0 	.word	0xffffe3e0
 8001230:	40012c00 	.word	0x40012c00
 8001234:	04800080 	.word	0x04800080
 8001238:	40010c00 	.word	0x40010c00

0800123c <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800124a:	db03      	blt.n	8001254 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 800124c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	e005      	b.n	8001260 <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800125a:	dc01      	bgt.n	8001260 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MotorR_SetPWM+0x60>)
 800125e:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0a      	blt.n	800127c <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MotorR_SetPWM+0x64>)
 800126e:	f7ff ff6c 	bl	800114a <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001272:	490c      	ldr	r1, [pc, #48]	; (80012a4 <MotorR_SetPWM+0x68>)
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MotorR_SetPWM+0x6c>)
 8001276:	f7ff ff84 	bl	8001182 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 800127a:	e00a      	b.n	8001292 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001282:	4619      	mov	r1, r3
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MotorR_SetPWM+0x64>)
 8001286:	f7ff ff60 	bl	800114a <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 800128a:	4906      	ldr	r1, [pc, #24]	; (80012a4 <MotorR_SetPWM+0x68>)
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <MotorR_SetPWM+0x6c>)
 800128e:	f7ff ff69 	bl	8001164 <LL_GPIO_SetOutputPin>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	ffffe3e0 	.word	0xffffe3e0
 80012a0:	40012c00 	.word	0x40012c00
 80012a4:	04020002 	.word	0x04020002
 80012a8:	40010800 	.word	0x40010800

080012ac <Servo_SetAngle>:
{
	LL_TIM_OC_SetCompareCH1(TIM1, 7200);
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
}
void Servo_SetAngle(float ServoAngle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90) ServoAngle = 90;
 80012b4:	4916      	ldr	r1, [pc, #88]	; (8001310 <Servo_SetAngle+0x64>)
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff00 	bl	80010bc <__aeabi_fcmpgt>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <Servo_SetAngle+0x1c>
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <Servo_SetAngle+0x64>)
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	e008      	b.n	80012da <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90) ServoAngle = -90;
 80012c8:	4912      	ldr	r1, [pc, #72]	; (8001314 <Servo_SetAngle+0x68>)
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fed8 	bl	8001080 <__aeabi_fcmplt>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <Servo_SetAngle+0x2e>
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <Servo_SetAngle+0x68>)
 80012d8:	607b      	str	r3, [r7, #4]
//	uint16_t ServoCPR = 540 + ServoAngle*2;
	LL_TIM_OC_SetCompareCH1(TIM4, 4600 + ServoAngle*50/3);
 80012da:	490f      	ldr	r1, [pc, #60]	; (8001318 <Servo_SetAngle+0x6c>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fd31 	bl	8000d44 <__aeabi_fmul>
 80012e2:	4603      	mov	r3, r0
 80012e4:	490d      	ldr	r1, [pc, #52]	; (800131c <Servo_SetAngle+0x70>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fde0 	bl	8000eac <__aeabi_fdiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	490c      	ldr	r1, [pc, #48]	; (8001320 <Servo_SetAngle+0x74>)
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fc1f 	bl	8000b34 <__addsf3>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fee9 	bl	80010d0 <__aeabi_f2uiz>
 80012fe:	4603      	mov	r3, r0
 8001300:	4619      	mov	r1, r3
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <Servo_SetAngle+0x78>)
 8001304:	f7ff ff14 	bl	8001130 <LL_TIM_OC_SetCompareCH1>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	42b40000 	.word	0x42b40000
 8001314:	c2b40000 	.word	0xc2b40000
 8001318:	42480000 	.word	0x42480000
 800131c:	40400000 	.word	0x40400000
 8001320:	458fc000 	.word	0x458fc000
 8001324:	40000800 	.word	0x40000800

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4906      	ldr	r1, [pc, #24]	; (80013c0 <__NVIC_EnableIRQ+0x34>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800147c:	b490      	push	{r4, r7}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	332c      	adds	r3, #44	; 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001494:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001498:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	fa92 f2a2 	rbit	r2, r2
 80014a0:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	fab2 f282 	clz	r2, r2
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	40d3      	lsrs	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	211f      	movs	r1, #31
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	401a      	ands	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 011f 	and.w	r1, r3, #31
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014d8:	bf00      	nop
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc90      	pop	{r4, r7}
 80014e0:	4770      	bx	lr

080014e2 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001506:	b490      	push	{r4, r7}
 8001508:	b08a      	sub	sp, #40	; 0x28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	330c      	adds	r3, #12
 8001516:	4619      	mov	r1, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	613a      	str	r2, [r7, #16]
  return result;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	fab2 f282 	clz	r2, r2
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	40d3      	lsrs	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800153c:	6822      	ldr	r2, [r4, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001544:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001548:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	69f9      	ldr	r1, [r7, #28]
 800154c:	fa91 f1a1 	rbit	r1, r1
 8001550:	61b9      	str	r1, [r7, #24]
  return result;
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	fab1 f181 	clz	r1, r1
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	40cb      	lsrs	r3, r1
 800155c:	2107      	movs	r1, #7
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	401a      	ands	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800156c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001570:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001574:	fa91 f1a1 	rbit	r1, r1
 8001578:	6239      	str	r1, [r7, #32]
  return result;
 800157a:	6a39      	ldr	r1, [r7, #32]
 800157c:	fab1 f181 	clz	r1, r1
 8001580:	b2c9      	uxtb	r1, r1
 8001582:	40cb      	lsrs	r3, r1
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bc90      	pop	{r4, r7}
 8001596:	4770      	bx	lr

08001598 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f043 0204 	orr.w	r2, r3, #4
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
	...

08001618 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LL_DMA_EnableChannel+0x38>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	3a01      	subs	r2, #1
 8001636:	4906      	ldr	r1, [pc, #24]	; (8001650 <LL_DMA_EnableChannel+0x38>)
 8001638:	5c8a      	ldrb	r2, [r1, r2]
 800163a:	4611      	mov	r1, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	440a      	add	r2, r1
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	08007c2c 	.word	0x08007c2c

08001654 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a0c      	ldr	r2, [pc, #48]	; (8001698 <LL_DMA_SetDataTransferDirection+0x44>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	461a      	mov	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001674:	f023 0310 	bic.w	r3, r3, #16
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	3a01      	subs	r2, #1
 800167c:	4906      	ldr	r1, [pc, #24]	; (8001698 <LL_DMA_SetDataTransferDirection+0x44>)
 800167e:	5c8a      	ldrb	r2, [r1, r2]
 8001680:	4611      	mov	r1, r2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	440a      	add	r2, r1
 8001686:	4611      	mov	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	08007c2c 	.word	0x08007c2c

0800169c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <LL_DMA_SetMode+0x40>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	461a      	mov	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 0220 	bic.w	r2, r3, #32
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	3b01      	subs	r3, #1
 80016c0:	4906      	ldr	r1, [pc, #24]	; (80016dc <LL_DMA_SetMode+0x40>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	4619      	mov	r1, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	440b      	add	r3, r1
 80016ca:	4619      	mov	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
             Mode);
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	08007c2c 	.word	0x08007c2c

080016e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <LL_DMA_SetPeriphIncMode+0x40>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	3b01      	subs	r3, #1
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <LL_DMA_SetPeriphIncMode+0x40>)
 8001706:	5ccb      	ldrb	r3, [r1, r3]
 8001708:	4619      	mov	r1, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	440b      	add	r3, r1
 800170e:	4619      	mov	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	08007c2c 	.word	0x08007c2c

08001724 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3b01      	subs	r3, #1
 8001734:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LL_DMA_SetMemoryIncMode+0x40>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	461a      	mov	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	3b01      	subs	r3, #1
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <LL_DMA_SetMemoryIncMode+0x40>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	4619      	mov	r1, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	440b      	add	r3, r1
 8001752:	4619      	mov	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	08007c2c 	.word	0x08007c2c

08001768 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3b01      	subs	r3, #1
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LL_DMA_SetPeriphSize+0x40>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	461a      	mov	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3b01      	subs	r3, #1
 800178c:	4906      	ldr	r1, [pc, #24]	; (80017a8 <LL_DMA_SetPeriphSize+0x40>)
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	4619      	mov	r1, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	440b      	add	r3, r1
 8001796:	4619      	mov	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	08007c2c 	.word	0x08007c2c

080017ac <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LL_DMA_SetMemorySize+0x40>)
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4906      	ldr	r1, [pc, #24]	; (80017ec <LL_DMA_SetMemorySize+0x40>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	440b      	add	r3, r1
 80017da:	4619      	mov	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	08007c2c 	.word	0x08007c2c

080017f0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	461a      	mov	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3b01      	subs	r3, #1
 8001814:	4906      	ldr	r1, [pc, #24]	; (8001830 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	4619      	mov	r1, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	440b      	add	r3, r1
 800181e:	4619      	mov	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	08007c2c 	.word	0x08007c2c

08001834 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	3b01      	subs	r3, #1
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LL_DMA_SetDataLength+0x40>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	461a      	mov	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	041b      	lsls	r3, r3, #16
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	3a01      	subs	r2, #1
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <LL_DMA_SetDataLength+0x40>)
 800185a:	5c8a      	ldrb	r2, [r1, r2]
 800185c:	4611      	mov	r1, r2
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	440a      	add	r2, r1
 8001862:	4611      	mov	r1, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	08007c2c 	.word	0x08007c2c

08001878 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <LL_DMA_SetMemoryAddress+0x2c>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	08007c2c 	.word	0x08007c2c

080018a8 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <LL_DMA_SetPeriphAddress+0x2c>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	461a      	mov	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6093      	str	r3, [r2, #8]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	08007c2c 	.word	0x08007c2c

080018d8 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	60da      	str	r2, [r3, #12]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f023 0201 	bic.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60da      	str	r2, [r3, #12]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <LL_RCC_HSE_Enable+0x18>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <LL_RCC_HSE_Enable+0x18>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000

08001990 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_RCC_HSE_IsReady+0x20>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000

080019b4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <LL_RCC_SetSysClkSource+0x24>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 0203 	bic.w	r2, r3, #3
 80019c4:	4904      	ldr	r1, [pc, #16]	; (80019d8 <LL_RCC_SetSysClkSource+0x24>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000

080019dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <LL_RCC_GetSysClkSource+0x14>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <LL_RCC_SetAHBPrescaler+0x24>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	4904      	ldr	r1, [pc, #16]	; (8001a18 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000

08001a44 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a54:	4904      	ldr	r1, [pc, #16]	; (8001a68 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <LL_RCC_SetADCClockSource+0x24>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a7c:	4904      	ldr	r1, [pc, #16]	; (8001a90 <LL_RCC_SetADCClockSource+0x24>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <LL_RCC_PLL_Enable+0x18>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a03      	ldr	r2, [pc, #12]	; (8001aac <LL_RCC_PLL_Enable+0x18>)
 8001a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40021000 	.word	0x40021000

08001ab0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <LL_RCC_PLL_IsReady+0x20>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ac0:	bf0c      	ite	eq
 8001ac2:	2301      	moveq	r3, #1
 8001ac4:	2300      	movne	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	430b      	orrs	r3, r1
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000

08001b04 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b7a:	699a      	ldr	r2, [r3, #24]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000

08001b94 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <LL_FLASH_SetLatency+0x24>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 0207 	bic.w	r2, r3, #7
 8001ba4:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <LL_FLASH_SetLatency+0x24>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40022000 	.word	0x40022000

08001bbc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <LL_FLASH_GetLatency+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <LL_TIM_EnableCounter>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	601a      	str	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <LL_TIM_DisableARRPreload>:
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <LL_TIM_SetCounter>:
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <LL_TIM_OC_DisableFast>:
{
 8001c2c:	b4b0      	push	{r4, r5, r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d01c      	beq.n	8001c76 <LL_TIM_OC_DisableFast+0x4a>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d017      	beq.n	8001c72 <LL_TIM_OC_DisableFast+0x46>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d012      	beq.n	8001c6e <LL_TIM_OC_DisableFast+0x42>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d00d      	beq.n	8001c6a <LL_TIM_OC_DisableFast+0x3e>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c54:	d007      	beq.n	8001c66 <LL_TIM_OC_DisableFast+0x3a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d101      	bne.n	8001c62 <LL_TIM_OC_DisableFast+0x36>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e00a      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e008      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e006      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e004      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e002      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_TIM_OC_DisableFast+0x4c>
 8001c76:	2300      	movs	r3, #0
 8001c78:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3318      	adds	r3, #24
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4629      	mov	r1, r5
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <LL_TIM_OC_DisableFast+0x7c>)
 8001c84:	5c5b      	ldrb	r3, [r3, r1]
 8001c86:	4413      	add	r3, r2
 8001c88:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001c8a:	6822      	ldr	r2, [r4, #0]
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <LL_TIM_OC_DisableFast+0x80>)
 8001c90:	5c5b      	ldrb	r3, [r3, r1]
 8001c92:	4619      	mov	r1, r3
 8001c94:	2304      	movs	r3, #4
 8001c96:	408b      	lsls	r3, r1
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	6023      	str	r3, [r4, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bcb0      	pop	{r4, r5, r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	08007c34 	.word	0x08007c34
 8001cac:	08007c3c 	.word	0x08007c3c

08001cb0 <LL_TIM_OC_EnablePreload>:
{
 8001cb0:	b4b0      	push	{r4, r5, r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d01c      	beq.n	8001cfa <LL_TIM_OC_EnablePreload+0x4a>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d017      	beq.n	8001cf6 <LL_TIM_OC_EnablePreload+0x46>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d012      	beq.n	8001cf2 <LL_TIM_OC_EnablePreload+0x42>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d00d      	beq.n	8001cee <LL_TIM_OC_EnablePreload+0x3e>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd8:	d007      	beq.n	8001cea <LL_TIM_OC_EnablePreload+0x3a>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce0:	d101      	bne.n	8001ce6 <LL_TIM_OC_EnablePreload+0x36>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e00a      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e008      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cea:	2304      	movs	r3, #4
 8001cec:	e006      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e004      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e002      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <LL_TIM_OC_EnablePreload+0x4c>
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3318      	adds	r3, #24
 8001d02:	461a      	mov	r2, r3
 8001d04:	4629      	mov	r1, r5
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <LL_TIM_OC_EnablePreload+0x7c>)
 8001d08:	5c5b      	ldrb	r3, [r3, r1]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d0e:	6822      	ldr	r2, [r4, #0]
 8001d10:	4629      	mov	r1, r5
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <LL_TIM_OC_EnablePreload+0x80>)
 8001d14:	5c5b      	ldrb	r3, [r3, r1]
 8001d16:	4619      	mov	r1, r3
 8001d18:	2308      	movs	r3, #8
 8001d1a:	408b      	lsls	r3, r1
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	6023      	str	r3, [r4, #0]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bcb0      	pop	{r4, r5, r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	08007c34 	.word	0x08007c34
 8001d30:	08007c3c 	.word	0x08007c3c

08001d34 <LL_TIM_OC_DisablePreload>:
{
 8001d34:	b4b0      	push	{r4, r5, r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d01c      	beq.n	8001d7e <LL_TIM_OC_DisablePreload+0x4a>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d017      	beq.n	8001d7a <LL_TIM_OC_DisablePreload+0x46>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d012      	beq.n	8001d76 <LL_TIM_OC_DisablePreload+0x42>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d00d      	beq.n	8001d72 <LL_TIM_OC_DisablePreload+0x3e>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d007      	beq.n	8001d6e <LL_TIM_OC_DisablePreload+0x3a>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	d101      	bne.n	8001d6a <LL_TIM_OC_DisablePreload+0x36>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e00a      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d6a:	2306      	movs	r3, #6
 8001d6c:	e008      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e006      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <LL_TIM_OC_DisablePreload+0x4c>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3318      	adds	r3, #24
 8001d86:	461a      	mov	r2, r3
 8001d88:	4629      	mov	r1, r5
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <LL_TIM_OC_DisablePreload+0x7c>)
 8001d8c:	5c5b      	ldrb	r3, [r3, r1]
 8001d8e:	4413      	add	r3, r2
 8001d90:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	4629      	mov	r1, r5
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <LL_TIM_OC_DisablePreload+0x80>)
 8001d98:	5c5b      	ldrb	r3, [r3, r1]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	408b      	lsls	r3, r1
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4013      	ands	r3, r2
 8001da4:	6023      	str	r3, [r4, #0]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bcb0      	pop	{r4, r5, r7}
 8001dae:	4770      	bx	lr
 8001db0:	08007c34 	.word	0x08007c34
 8001db4:	08007c3c 	.word	0x08007c3c

08001db8 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001db8:	b4b0      	push	{r4, r5, r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d01c      	beq.n	8001e04 <LL_TIM_IC_SetActiveInput+0x4c>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d017      	beq.n	8001e00 <LL_TIM_IC_SetActiveInput+0x48>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d012      	beq.n	8001dfc <LL_TIM_IC_SetActiveInput+0x44>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d00d      	beq.n	8001df8 <LL_TIM_IC_SetActiveInput+0x40>
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de2:	d007      	beq.n	8001df4 <LL_TIM_IC_SetActiveInput+0x3c>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d101      	bne.n	8001df0 <LL_TIM_IC_SetActiveInput+0x38>
 8001dec:	2305      	movs	r3, #5
 8001dee:	e00a      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df0:	2306      	movs	r3, #6
 8001df2:	e008      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df4:	2304      	movs	r3, #4
 8001df6:	e006      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e004      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e002      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <LL_TIM_IC_SetActiveInput+0x4e>
 8001e04:	2300      	movs	r3, #0
 8001e06:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001e12:	5c5b      	ldrb	r3, [r3, r1]
 8001e14:	4413      	add	r3, r2
 8001e16:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <LL_TIM_IC_SetActiveInput+0x90>)
 8001e1e:	5c5b      	ldrb	r3, [r3, r1]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2303      	movs	r3, #3
 8001e24:	408b      	lsls	r3, r1
 8001e26:	43db      	mvns	r3, r3
 8001e28:	401a      	ands	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0c1b      	lsrs	r3, r3, #16
 8001e2e:	4628      	mov	r0, r5
 8001e30:	4905      	ldr	r1, [pc, #20]	; (8001e48 <LL_TIM_IC_SetActiveInput+0x90>)
 8001e32:	5c09      	ldrb	r1, [r1, r0]
 8001e34:	408b      	lsls	r3, r1
 8001e36:	4313      	orrs	r3, r2
 8001e38:	6023      	str	r3, [r4, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bcb0      	pop	{r4, r5, r7}
 8001e42:	4770      	bx	lr
 8001e44:	08007c34 	.word	0x08007c34
 8001e48:	08007c44 	.word	0x08007c44

08001e4c <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001e4c:	b4b0      	push	{r4, r5, r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d01c      	beq.n	8001e98 <LL_TIM_IC_SetPrescaler+0x4c>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d017      	beq.n	8001e94 <LL_TIM_IC_SetPrescaler+0x48>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d012      	beq.n	8001e90 <LL_TIM_IC_SetPrescaler+0x44>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d00d      	beq.n	8001e8c <LL_TIM_IC_SetPrescaler+0x40>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d007      	beq.n	8001e88 <LL_TIM_IC_SetPrescaler+0x3c>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d101      	bne.n	8001e84 <LL_TIM_IC_SetPrescaler+0x38>
 8001e80:	2305      	movs	r3, #5
 8001e82:	e00a      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e84:	2306      	movs	r3, #6
 8001e86:	e008      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e006      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e004      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_TIM_IC_SetPrescaler+0x4e>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4629      	mov	r1, r5
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001ea6:	5c5b      	ldrb	r3, [r3, r1]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001eac:	6822      	ldr	r2, [r4, #0]
 8001eae:	4629      	mov	r1, r5
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <LL_TIM_IC_SetPrescaler+0x90>)
 8001eb2:	5c5b      	ldrb	r3, [r3, r1]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	408b      	lsls	r3, r1
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	4905      	ldr	r1, [pc, #20]	; (8001edc <LL_TIM_IC_SetPrescaler+0x90>)
 8001ec6:	5c09      	ldrb	r1, [r1, r0]
 8001ec8:	408b      	lsls	r3, r1
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	6023      	str	r3, [r4, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bcb0      	pop	{r4, r5, r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	08007c34 	.word	0x08007c34
 8001edc:	08007c44 	.word	0x08007c44

08001ee0 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001ee0:	b4b0      	push	{r4, r5, r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d01c      	beq.n	8001f2c <LL_TIM_IC_SetFilter+0x4c>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d017      	beq.n	8001f28 <LL_TIM_IC_SetFilter+0x48>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d012      	beq.n	8001f24 <LL_TIM_IC_SetFilter+0x44>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b40      	cmp	r3, #64	; 0x40
 8001f02:	d00d      	beq.n	8001f20 <LL_TIM_IC_SetFilter+0x40>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	d007      	beq.n	8001f1c <LL_TIM_IC_SetFilter+0x3c>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f12:	d101      	bne.n	8001f18 <LL_TIM_IC_SetFilter+0x38>
 8001f14:	2305      	movs	r3, #5
 8001f16:	e00a      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f18:	2306      	movs	r3, #6
 8001f1a:	e008      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e006      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e004      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e002      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <LL_TIM_IC_SetFilter+0x4e>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3318      	adds	r3, #24
 8001f34:	461a      	mov	r2, r3
 8001f36:	4629      	mov	r1, r5
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <LL_TIM_IC_SetFilter+0x8c>)
 8001f3a:	5c5b      	ldrb	r3, [r3, r1]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001f40:	6822      	ldr	r2, [r4, #0]
 8001f42:	4629      	mov	r1, r5
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <LL_TIM_IC_SetFilter+0x90>)
 8001f46:	5c5b      	ldrb	r3, [r3, r1]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	23f0      	movs	r3, #240	; 0xf0
 8001f4c:	408b      	lsls	r3, r1
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	4628      	mov	r0, r5
 8001f58:	4905      	ldr	r1, [pc, #20]	; (8001f70 <LL_TIM_IC_SetFilter+0x90>)
 8001f5a:	5c09      	ldrb	r1, [r1, r0]
 8001f5c:	408b      	lsls	r3, r1
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	6023      	str	r3, [r4, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bcb0      	pop	{r4, r5, r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	08007c34 	.word	0x08007c34
 8001f70:	08007c44 	.word	0x08007c44

08001f74 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001f74:	b490      	push	{r4, r7}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d01c      	beq.n	8001fc0 <LL_TIM_IC_SetPolarity+0x4c>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d017      	beq.n	8001fbc <LL_TIM_IC_SetPolarity+0x48>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d012      	beq.n	8001fb8 <LL_TIM_IC_SetPolarity+0x44>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d00d      	beq.n	8001fb4 <LL_TIM_IC_SetPolarity+0x40>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f9e:	d007      	beq.n	8001fb0 <LL_TIM_IC_SetPolarity+0x3c>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa6:	d101      	bne.n	8001fac <LL_TIM_IC_SetPolarity+0x38>
 8001fa8:	2305      	movs	r3, #5
 8001faa:	e00a      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fac:	2306      	movs	r3, #6
 8001fae:	e008      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e006      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e004      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_TIM_IC_SetPolarity+0x4e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	4621      	mov	r1, r4
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <LL_TIM_IC_SetPolarity+0x80>)
 8001fcc:	5c5b      	ldrb	r3, [r3, r1]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	408b      	lsls	r3, r1
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	4621      	mov	r1, r4
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <LL_TIM_IC_SetPolarity+0x80>)
 8001fdc:	5c5b      	ldrb	r3, [r3, r1]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	408b      	lsls	r3, r1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc90      	pop	{r4, r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	08007c4c 	.word	0x08007c4c

08001ff8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800200a:	f023 0307 	bic.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	605a      	str	r2, [r3, #4]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f06f 0201 	mvn.w	r2, #1
 80020b2:	611a      	str	r2, [r3, #16]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f06f 0202 	mvn.w	r2, #2
 80020cc:	611a      	str	r2, [r3, #16]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f06f 0204 	mvn.w	r2, #4
 80020e6:	611a      	str	r2, [r3, #16]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f043 0201 	orr.w	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60da      	str	r2, [r3, #12]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f043 0202 	orr.w	r2, r3, #2
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <LL_TIM_EnableIT_CC2>:
  * @rmtoll DIER         CC2IE         LL_TIM_EnableIT_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC2IE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f043 0204 	orr.w	r2, r3, #4
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60da      	str	r2, [r3, #12]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	615a      	str	r2, [r3, #20]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	605a      	str	r2, [r3, #4]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <LL_GPIO_SetPinMode>:
{
 80021d4:	b490      	push	{r4, r7}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0e1b      	lsrs	r3, r3, #24
 80021e8:	4413      	add	r3, r2
 80021ea:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80021ec:	6822      	ldr	r2, [r4, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	613b      	str	r3, [r7, #16]
  return result;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	210f      	movs	r1, #15
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	61bb      	str	r3, [r7, #24]
  return result;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	6023      	str	r3, [r4, #0]
}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bc90      	pop	{r4, r7}
 8002236:	4770      	bx	lr

08002238 <LL_GPIO_ResetOutputPin>:
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
	...

08002258 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8002262:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	6053      	str	r3, [r2, #4]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40010000 	.word	0x40010000

08002278 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8002282:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	6053      	str	r3, [r2, #4]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40010000 	.word	0x40010000

08002298 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 80022a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022aa:	6053      	str	r3, [r2, #4]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40010000 	.word	0x40010000

080022b8 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 80022ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80022ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d2:	6053      	str	r3, [r2, #4]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40010000 	.word	0x40010000

080022e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ee:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80022f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fa:	6053      	str	r3, [r2, #4]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40010000 	.word	0x40010000

08002308 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3302      	adds	r3, #2
 800231a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	0c1b      	lsrs	r3, r3, #16
 8002322:	43db      	mvns	r3, r3
 8002324:	ea02 0103 	and.w	r1, r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	60bb      	str	r3, [r7, #8]
  return result;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	fa03 f202 	lsl.w	r2, r3, r2
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	430a      	orrs	r2, r1
 800234e:	3302      	adds	r3, #2
 8002350:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000

08002364 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 800236c:	bf00      	nop
 800236e:	4808      	ldr	r0, [pc, #32]	; (8002390 <__io_putchar+0x2c>)
 8002370:	f7ff ff10 	bl	8002194 <LL_USART_IsActiveFlag_TC>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f9      	beq.n	800236e <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	4619      	mov	r1, r3
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <__io_putchar+0x2c>)
 8002382:	f7ff ff19 	bl	80021b8 <LL_USART_TransmitData8>

  	return ch;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013800 	.word	0x40013800
 8002394:	00000000 	.word	0x00000000

08002398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 800239e:	2001      	movs	r0, #1
 80023a0:	f7ff fbe0 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80023a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80023a8:	f7ff fbc4 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ac:	2003      	movs	r0, #3
 80023ae:	f7fe ffbb 	bl	8001328 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023b2:	f7fe ffdd 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2200      	movs	r2, #0
 80023ba:	2101      	movs	r1, #1
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff f82b 	bl	8001418 <NVIC_EncodePriority>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4619      	mov	r1, r3
 80023c6:	f06f 000b 	mvn.w	r0, #11
 80023ca:	f7fe fffb 	bl	80013c4 <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023ce:	f7fe ffcf 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2200      	movs	r2, #0
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f81d 	bl	8001418 <NVIC_EncodePriority>
 80023de:	4603      	mov	r3, r0
 80023e0:	4619      	mov	r1, r3
 80023e2:	f06f 000a 	mvn.w	r0, #10
 80023e6:	f7fe ffed 	bl	80013c4 <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80023ea:	f7fe ffc1 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2200      	movs	r2, #0
 80023f2:	2101      	movs	r1, #1
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f80f 	bl	8001418 <NVIC_EncodePriority>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4619      	mov	r1, r3
 80023fe:	f06f 0009 	mvn.w	r0, #9
 8002402:	f7fe ffdf 	bl	80013c4 <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002406:	f7fe ffb3 	bl	8001370 <__NVIC_GetPriorityGrouping>
 800240a:	4603      	mov	r3, r0
 800240c:	2200      	movs	r2, #0
 800240e:	2101      	movs	r1, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f801 	bl	8001418 <NVIC_EncodePriority>
 8002416:	4603      	mov	r3, r0
 8002418:	4619      	mov	r1, r3
 800241a:	f06f 0004 	mvn.w	r0, #4
 800241e:	f7fe ffd1 	bl	80013c4 <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002422:	f7fe ffa5 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002426:	4603      	mov	r3, r0
 8002428:	2200      	movs	r2, #0
 800242a:	2101      	movs	r1, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fff3 	bl	8001418 <NVIC_EncodePriority>
 8002432:	4603      	mov	r3, r0
 8002434:	4619      	mov	r1, r3
 8002436:	f06f 0003 	mvn.w	r0, #3
 800243a:	f7fe ffc3 	bl	80013c4 <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800243e:	f7fe ff97 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8002442:	4603      	mov	r3, r0
 8002444:	2200      	movs	r2, #0
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe ffe5 	bl	8001418 <NVIC_EncodePriority>
 800244e:	4603      	mov	r3, r0
 8002450:	4619      	mov	r1, r3
 8002452:	f06f 0001 	mvn.w	r0, #1
 8002456:	f7fe ffb5 	bl	80013c4 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800245a:	f7fe ff89 	bl	8001370 <__NVIC_GetPriorityGrouping>
 800245e:	4603      	mov	r3, r0
 8002460:	2200      	movs	r2, #0
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe ffd7 	bl	8001418 <NVIC_EncodePriority>
 800246a:	4603      	mov	r3, r0
 800246c:	4619      	mov	r1, r3
 800246e:	f04f 30ff 	mov.w	r0, #4294967295
 8002472:	f7fe ffa7 	bl	80013c4 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8002476:	f7ff ff33 	bl	80022e0 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 800247a:	4bb1      	ldr	r3, [pc, #708]	; (8002740 <main+0x3a8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6858      	ldr	r0, [r3, #4]
 8002480:	2300      	movs	r3, #0
 8002482:	2202      	movs	r2, #2
 8002484:	2100      	movs	r1, #0
 8002486:	f003 fbcd 	bl	8005c24 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 800248a:	4bad      	ldr	r3, [pc, #692]	; (8002740 <main+0x3a8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6898      	ldr	r0, [r3, #8]
 8002490:	2300      	movs	r3, #0
 8002492:	2202      	movs	r2, #2
 8002494:	2100      	movs	r1, #0
 8002496:	f003 fbc5 	bl	8005c24 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 800249a:	4ba9      	ldr	r3, [pc, #676]	; (8002740 <main+0x3a8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68d8      	ldr	r0, [r3, #12]
 80024a0:	2300      	movs	r3, #0
 80024a2:	2202      	movs	r2, #2
 80024a4:	2100      	movs	r1, #0
 80024a6:	f003 fbbd 	bl	8005c24 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024aa:	f000 fdc3 	bl	8003034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ae:	f001 fa79 	bl	80039a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80024b2:	f001 fa5f 	bl	8003974 <MX_DMA_Init>
  MX_TIM1_Init();
 80024b6:	f000 ff6f 	bl	8003398 <MX_TIM1_Init>
  MX_ADC1_Init();
 80024ba:	f000 fdfd 	bl	80030b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80024be:	f000 ff11 	bl	80032e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80024c2:	f001 f9ed 	bl	80038a0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80024c6:	f001 f81d 	bl	8003504 <MX_TIM2_Init>
  MX_TIM3_Init();
 80024ca:	f001 f8cb 	bl	8003664 <MX_TIM3_Init>
  MX_TIM4_Init();
 80024ce:	f001 f959 	bl	8003784 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 80024d2:	f7fe fe65 	bl	80011a0 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 80024d6:	f7fe fe6d 	bl	80011b4 <MotorR_EnablePWM>
  MotorL_SetPWM(0);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fe76 	bl	80011cc <MotorL_SetPWM>
  MotorR_SetPWM(0);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7fe feab 	bl	800123c <MotorR_SetPWM>
  Servo_SetAngle(0);
 80024e6:	f04f 0000 	mov.w	r0, #0
 80024ea:	f7fe fedf 	bl	80012ac <Servo_SetAngle>
//  OC2_IT_Setmillis(2.5);
  float ServoAngle = 0.00;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]

//  uint32_t Count = LL_TIM_GetCounter(TIM2);

  while (1)
  {
	  LineDetect = 0;
 80024f4:	4b93      	ldr	r3, [pc, #588]	; (8002744 <main+0x3ac>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
	  Sensor_Convert_A2D();
 80024fa:	f001 fb21 	bl	8003b40 <Sensor_Convert_A2D>
//	  Sensor_Print_Thres();
//	  Sensor_PrintValue();
//	  Sensor_Print_LineDetect();

	  if(GetThreshold_Flag == 1)
 80024fe:	4b92      	ldr	r3, [pc, #584]	; (8002748 <main+0x3b0>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d104      	bne.n	8002510 <main+0x178>
	  {
		  GetThreshold_Flag = 0;
 8002506:	4b90      	ldr	r3, [pc, #576]	; (8002748 <main+0x3b0>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
		  Sensor_Print_LineDetect();
 800250c:	f001 fb4a 	bl	8003ba4 <Sensor_Print_LineDetect>
	  }

	  if(BTN2_Flag == 1)
 8002510:	4b8e      	ldr	r3, [pc, #568]	; (800274c <main+0x3b4>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d11f      	bne.n	8002558 <main+0x1c0>
	  {
		  BTN2_Flag = 0;
 8002518:	4b8c      	ldr	r3, [pc, #560]	; (800274c <main+0x3b4>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
		  ServoAngle = ServoAngle - BTN_Servo_Step;
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fd ff82 	bl	8000428 <__aeabi_f2d>
 8002524:	a382      	add	r3, pc, #520	; (adr r3, 8002730 <main+0x398>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fd fe1d 	bl	8000168 <__aeabi_dsub>
 800252e:	4603      	mov	r3, r0
 8002530:	460c      	mov	r4, r1
 8002532:	4618      	mov	r0, r3
 8002534:	4621      	mov	r1, r4
 8002536:	f7fe faa7 	bl	8000a88 <__aeabi_d2f>
 800253a:	4603      	mov	r3, r0
 800253c:	607b      	str	r3, [r7, #4]
		  Servo_SetAngle(ServoAngle);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe feb4 	bl	80012ac <Servo_SetAngle>
		  printf("Servo Angle: %g  \n", ServoAngle);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7fd ff6f 	bl	8000428 <__aeabi_f2d>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	461a      	mov	r2, r3
 8002550:	4623      	mov	r3, r4
 8002552:	487f      	ldr	r0, [pc, #508]	; (8002750 <main+0x3b8>)
 8002554:	f003 fb4e 	bl	8005bf4 <iprintf>
	  }

	  if(BTN3_Flag == 1)
 8002558:	4b7e      	ldr	r3, [pc, #504]	; (8002754 <main+0x3bc>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d11f      	bne.n	80025a0 <main+0x208>
	  {
		  BTN3_Flag = 0;
 8002560:	4b7c      	ldr	r3, [pc, #496]	; (8002754 <main+0x3bc>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
		  ServoAngle = ServoAngle + BTN_Servo_Step;
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fd ff5e 	bl	8000428 <__aeabi_f2d>
 800256c:	a370      	add	r3, pc, #448	; (adr r3, 8002730 <main+0x398>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	f7fd fdfb 	bl	800016c <__adddf3>
 8002576:	4603      	mov	r3, r0
 8002578:	460c      	mov	r4, r1
 800257a:	4618      	mov	r0, r3
 800257c:	4621      	mov	r1, r4
 800257e:	f7fe fa83 	bl	8000a88 <__aeabi_d2f>
 8002582:	4603      	mov	r3, r0
 8002584:	607b      	str	r3, [r7, #4]
		  Servo_SetAngle(ServoAngle);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fe90 	bl	80012ac <Servo_SetAngle>
		  printf("Servo Angle: %g \n", ServoAngle);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7fd ff4b 	bl	8000428 <__aeabi_f2d>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	461a      	mov	r2, r3
 8002598:	4623      	mov	r3, r4
 800259a:	486f      	ldr	r0, [pc, #444]	; (8002758 <main+0x3c0>)
 800259c:	f003 fb2a 	bl	8005bf4 <iprintf>
	  }

	  if(LineDetect == 0b00011000 || LineDetect == 0b00011100 || LineDetect == 0b00111000)
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <main+0x3ac>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b18      	cmp	r3, #24
 80025a6:	d007      	beq.n	80025b8 <main+0x220>
 80025a8:	4b66      	ldr	r3, [pc, #408]	; (8002744 <main+0x3ac>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b1c      	cmp	r3, #28
 80025ae:	d003      	beq.n	80025b8 <main+0x220>
 80025b0:	4b64      	ldr	r3, [pc, #400]	; (8002744 <main+0x3ac>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b38      	cmp	r3, #56	; 0x38
 80025b6:	d112      	bne.n	80025de <main+0x246>
	  {
		  CarState = DiThang;
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <main+0x3c4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
		  MotorL_SetPWM(MaxSpeed);
 80025be:	4b68      	ldr	r3, [pc, #416]	; (8002760 <main+0x3c8>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fe02 	bl	80011cc <MotorL_SetPWM>
		  MotorR_SetPWM(MaxSpeed);
 80025c8:	4b65      	ldr	r3, [pc, #404]	; (8002760 <main+0x3c8>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fe35 	bl	800123c <MotorR_SetPWM>
		  Servo_SetAngle(0);
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f7fe fe69 	bl	80012ac <Servo_SetAngle>
		  continue;
 80025da:	f000 bd07 	b.w	8002fec <main+0xc54>
//		  MotorL_Brake();
//		  MotorR_Brake();
//		  MotorL_DisablePWM();
//		  MotorR_DisablePWM();
//	  }
	  if(CarState == DiThang)
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <main+0x3c4>)
 80025e0:	f993 3000 	ldrsb.w	r3, [r3]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d136      	bne.n	8002656 <main+0x2be>
	  {
		  if( LineDetect == 0b10000000 || LineDetect == 0b11000000
 80025e8:	4b56      	ldr	r3, [pc, #344]	; (8002744 <main+0x3ac>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d013      	beq.n	8002618 <main+0x280>
 80025f0:	4b54      	ldr	r3, [pc, #336]	; (8002744 <main+0x3ac>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2bc0      	cmp	r3, #192	; 0xc0
 80025f6:	d00f      	beq.n	8002618 <main+0x280>
			  || LineDetect == 0b11100000 || LineDetect == 0b01110000 || LineDetect == 0b00110000
 80025f8:	4b52      	ldr	r3, [pc, #328]	; (8002744 <main+0x3ac>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2be0      	cmp	r3, #224	; 0xe0
 80025fe:	d00b      	beq.n	8002618 <main+0x280>
 8002600:	4b50      	ldr	r3, [pc, #320]	; (8002744 <main+0x3ac>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b70      	cmp	r3, #112	; 0x70
 8002606:	d007      	beq.n	8002618 <main+0x280>
 8002608:	4b4e      	ldr	r3, [pc, #312]	; (8002744 <main+0x3ac>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b30      	cmp	r3, #48	; 0x30
 800260e:	d003      	beq.n	8002618 <main+0x280>
			  || LineDetect == 0b00010000)
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <main+0x3ac>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b10      	cmp	r3, #16
 8002616:	d103      	bne.n	8002620 <main+0x288>
		  {
			  CarState = LechPhai;
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <main+0x3c4>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e01a      	b.n	8002656 <main+0x2be>
		  }
		  else if ( LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 8002620:	4b48      	ldr	r3, [pc, #288]	; (8002744 <main+0x3ac>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d013      	beq.n	8002650 <main+0x2b8>
 8002628:	4b46      	ldr	r3, [pc, #280]	; (8002744 <main+0x3ac>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d00f      	beq.n	8002650 <main+0x2b8>
				  LineDetect == 0b00000111 || LineDetect == 0b00001110 || LineDetect == 0b00001100 ||
 8002630:	4b44      	ldr	r3, [pc, #272]	; (8002744 <main+0x3ac>)
 8002632:	781b      	ldrb	r3, [r3, #0]
		  else if ( LineDetect == 0b00000001 || LineDetect == 0b00000011 ||
 8002634:	2b07      	cmp	r3, #7
 8002636:	d00b      	beq.n	8002650 <main+0x2b8>
				  LineDetect == 0b00000111 || LineDetect == 0b00001110 || LineDetect == 0b00001100 ||
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <main+0x3ac>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b0e      	cmp	r3, #14
 800263e:	d007      	beq.n	8002650 <main+0x2b8>
 8002640:	4b40      	ldr	r3, [pc, #256]	; (8002744 <main+0x3ac>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d003      	beq.n	8002650 <main+0x2b8>
				  LineDetect == 0b00001000 )
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <main+0x3ac>)
 800264a:	781b      	ldrb	r3, [r3, #0]
				  LineDetect == 0b00000111 || LineDetect == 0b00001110 || LineDetect == 0b00001100 ||
 800264c:	2b08      	cmp	r3, #8
 800264e:	d102      	bne.n	8002656 <main+0x2be>
		  {
			  CarState = LechTrai;
 8002650:	4b42      	ldr	r3, [pc, #264]	; (800275c <main+0x3c4>)
 8002652:	22ff      	movs	r2, #255	; 0xff
 8002654:	701a      	strb	r2, [r3, #0]
		  }
	  }


	  if( LineDetect == 0b01111111 ||LineDetect == 0b00111111 ||LineDetect == 0b00011111 || LineDetect == 0b00001111 )
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <main+0x3ac>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b7f      	cmp	r3, #127	; 0x7f
 800265c:	d00b      	beq.n	8002676 <main+0x2de>
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <main+0x3ac>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b3f      	cmp	r3, #63	; 0x3f
 8002664:	d007      	beq.n	8002676 <main+0x2de>
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <main+0x3ac>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b1f      	cmp	r3, #31
 800266c:	d003      	beq.n	8002676 <main+0x2de>
 800266e:	4b35      	ldr	r3, [pc, #212]	; (8002744 <main+0x3ac>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b0f      	cmp	r3, #15
 8002674:	d103      	bne.n	800267e <main+0x2e6>
	  {
		  ChuyenLaneFlag = ChuyenLanePhai;
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <main+0x3cc>)
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e01a      	b.n	80026b4 <main+0x31c>
	  }
	  else if(LineDetect == 0b11110000 || LineDetect == 0b11111000 || LineDetect == 0b11111100 || LineDetect == 0b11111110)
 800267e:	4b31      	ldr	r3, [pc, #196]	; (8002744 <main+0x3ac>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2bf0      	cmp	r3, #240	; 0xf0
 8002684:	d00b      	beq.n	800269e <main+0x306>
 8002686:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <main+0x3ac>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2bf8      	cmp	r3, #248	; 0xf8
 800268c:	d007      	beq.n	800269e <main+0x306>
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <main+0x3ac>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2bfc      	cmp	r3, #252	; 0xfc
 8002694:	d003      	beq.n	800269e <main+0x306>
 8002696:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <main+0x3ac>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2bfe      	cmp	r3, #254	; 0xfe
 800269c:	d103      	bne.n	80026a6 <main+0x30e>
	  {
		  ChuyenLaneFlag = ChuyenLaneTrai;
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <main+0x3cc>)
 80026a0:	22ff      	movs	r2, #255	; 0xff
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e006      	b.n	80026b4 <main+0x31c>
	  }
	  else if(LineDetect == 0xFF)
 80026a6:	4b27      	ldr	r3, [pc, #156]	; (8002744 <main+0x3ac>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d102      	bne.n	80026b4 <main+0x31c>
	  {
		  FullWhiteFlag = 1;
 80026ae:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <main+0x3d0>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
	  }
	  if(LineDetect == 0)
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <main+0x3ac>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 80c9 	bne.w	8002850 <main+0x4b8>
	  {
		  if (ChuyenLaneFlag == ChuyenLaneTrai)
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <main+0x3cc>)
 80026c0:	f993 3000 	ldrsb.w	r3, [r3]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d154      	bne.n	8002774 <main+0x3dc>
		  {
			  ChuyenLaneFlag = 0;
 80026ca:	4b26      	ldr	r3, [pc, #152]	; (8002764 <main+0x3cc>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
			  MotorR_SetPWM(MaxSpeed * 0.75);
 80026d0:	4b23      	ldr	r3, [pc, #140]	; (8002760 <main+0x3c8>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd fe95 	bl	8000404 <__aeabi_i2d>
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <main+0x3d4>)
 80026e0:	f7fd fefa 	bl	80004d8 <__aeabi_dmul>
 80026e4:	4603      	mov	r3, r0
 80026e6:	460c      	mov	r4, r1
 80026e8:	4618      	mov	r0, r3
 80026ea:	4621      	mov	r1, r4
 80026ec:	f7fe f9a4 	bl	8000a38 <__aeabi_d2iz>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fda2 	bl	800123c <MotorR_SetPWM>
			  MotorL_SetPWM(MaxSpeed * 0.4);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <main+0x3c8>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fe81 	bl	8000404 <__aeabi_i2d>
 8002702:	a30d      	add	r3, pc, #52	; (adr r3, 8002738 <main+0x3a0>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd fee6 	bl	80004d8 <__aeabi_dmul>
 800270c:	4603      	mov	r3, r0
 800270e:	460c      	mov	r4, r1
 8002710:	4618      	mov	r0, r3
 8002712:	4621      	mov	r1, r4
 8002714:	f7fe f990 	bl	8000a38 <__aeabi_d2iz>
 8002718:	4603      	mov	r3, r0
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fd56 	bl	80011cc <MotorL_SetPWM>
			  Servo_SetAngle(-54);
 8002720:	4813      	ldr	r0, [pc, #76]	; (8002770 <main+0x3d8>)
 8002722:	f7fe fdc3 	bl	80012ac <Servo_SetAngle>
			  CarState = LechPhai;
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <main+0x3c4>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
			  continue;
 800272c:	f000 bc5e 	b.w	8002fec <main+0xc54>
 8002730:	33333333 	.word	0x33333333
 8002734:	3fe33333 	.word	0x3fe33333
 8002738:	9999999a 	.word	0x9999999a
 800273c:	3fd99999 	.word	0x3fd99999
 8002740:	20000018 	.word	0x20000018
 8002744:	20000206 	.word	0x20000206
 8002748:	20000204 	.word	0x20000204
 800274c:	20000212 	.word	0x20000212
 8002750:	08007b90 	.word	0x08007b90
 8002754:	20000213 	.word	0x20000213
 8002758:	08007ba4 	.word	0x08007ba4
 800275c:	20000207 	.word	0x20000207
 8002760:	20000010 	.word	0x20000010
 8002764:	20000208 	.word	0x20000208
 8002768:	20000209 	.word	0x20000209
 800276c:	3fe80000 	.word	0x3fe80000
 8002770:	c2580000 	.word	0xc2580000

		  } else if (ChuyenLaneFlag == ChuyenLanePhai)
 8002774:	4bce      	ldr	r3, [pc, #824]	; (8002ab0 <main+0x718>)
 8002776:	f993 3000 	ldrsb.w	r3, [r3]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d132      	bne.n	80027e4 <main+0x44c>
		  {
			  ChuyenLaneFlag = 0;
 800277e:	4bcc      	ldr	r3, [pc, #816]	; (8002ab0 <main+0x718>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
			  MotorL_SetPWM(MaxSpeed * 0.75);
 8002784:	4bcb      	ldr	r3, [pc, #812]	; (8002ab4 <main+0x71c>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd fe3b 	bl	8000404 <__aeabi_i2d>
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4bc9      	ldr	r3, [pc, #804]	; (8002ab8 <main+0x720>)
 8002794:	f7fd fea0 	bl	80004d8 <__aeabi_dmul>
 8002798:	4603      	mov	r3, r0
 800279a:	460c      	mov	r4, r1
 800279c:	4618      	mov	r0, r3
 800279e:	4621      	mov	r1, r4
 80027a0:	f7fe f94a 	bl	8000a38 <__aeabi_d2iz>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fd10 	bl	80011cc <MotorL_SetPWM>
			  MotorR_SetPWM(MaxSpeed * 0.4);
 80027ac:	4bc1      	ldr	r3, [pc, #772]	; (8002ab4 <main+0x71c>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fe27 	bl	8000404 <__aeabi_i2d>
 80027b6:	a3ac      	add	r3, pc, #688	; (adr r3, 8002a68 <main+0x6d0>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd fe8c 	bl	80004d8 <__aeabi_dmul>
 80027c0:	4603      	mov	r3, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	4618      	mov	r0, r3
 80027c6:	4621      	mov	r1, r4
 80027c8:	f7fe f936 	bl	8000a38 <__aeabi_d2iz>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fd34 	bl	800123c <MotorR_SetPWM>
			  Servo_SetAngle(54);
 80027d4:	48b9      	ldr	r0, [pc, #740]	; (8002abc <main+0x724>)
 80027d6:	f7fe fd69 	bl	80012ac <Servo_SetAngle>
			  CarState = LechTrai;
 80027da:	4bb9      	ldr	r3, [pc, #740]	; (8002ac0 <main+0x728>)
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	701a      	strb	r2, [r3, #0]
			  continue;
 80027e0:	f000 bc04 	b.w	8002fec <main+0xc54>
		  } else if(FullWhiteFlag == 1)
 80027e4:	4bb7      	ldr	r3, [pc, #732]	; (8002ac4 <main+0x72c>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d131      	bne.n	8002850 <main+0x4b8>
		  {
			  FullWhiteFlag = 0;
 80027ec:	4bb5      	ldr	r3, [pc, #724]	; (8002ac4 <main+0x72c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
			  CarState = LechPhai;
 80027f2:	4bb3      	ldr	r3, [pc, #716]	; (8002ac0 <main+0x728>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
			  MotorR_SetPWM(MaxSpeed * 0.6);
 80027f8:	4bae      	ldr	r3, [pc, #696]	; (8002ab4 <main+0x71c>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fe01 	bl	8000404 <__aeabi_i2d>
 8002802:	a39b      	add	r3, pc, #620	; (adr r3, 8002a70 <main+0x6d8>)
 8002804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002808:	f7fd fe66 	bl	80004d8 <__aeabi_dmul>
 800280c:	4603      	mov	r3, r0
 800280e:	460c      	mov	r4, r1
 8002810:	4618      	mov	r0, r3
 8002812:	4621      	mov	r1, r4
 8002814:	f7fe f910 	bl	8000a38 <__aeabi_d2iz>
 8002818:	4603      	mov	r3, r0
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fd0e 	bl	800123c <MotorR_SetPWM>
			  MotorL_SetPWM(MaxSpeed * 0.6);
 8002820:	4ba4      	ldr	r3, [pc, #656]	; (8002ab4 <main+0x71c>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fded 	bl	8000404 <__aeabi_i2d>
 800282a:	a391      	add	r3, pc, #580	; (adr r3, 8002a70 <main+0x6d8>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fd fe52 	bl	80004d8 <__aeabi_dmul>
 8002834:	4603      	mov	r3, r0
 8002836:	460c      	mov	r4, r1
 8002838:	4618      	mov	r0, r3
 800283a:	4621      	mov	r1, r4
 800283c:	f7fe f8fc 	bl	8000a38 <__aeabi_d2iz>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fcc2 	bl	80011cc <MotorL_SetPWM>
			  Servo_SetAngle(30);
 8002848:	489f      	ldr	r0, [pc, #636]	; (8002ac8 <main+0x730>)
 800284a:	f7fe fd2f 	bl	80012ac <Servo_SetAngle>
			  continue;
 800284e:	e3cd      	b.n	8002fec <main+0xc54>
		  }
	  };
	  if (CarState == LechTrai)
 8002850:	4b9b      	ldr	r3, [pc, #620]	; (8002ac0 <main+0x728>)
 8002852:	f993 3000 	ldrsb.w	r3, [r3]
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	f040 81d6 	bne.w	8002c0a <main+0x872>
	  {
		  switch (LineDetect)
 800285e:	4b9b      	ldr	r3, [pc, #620]	; (8002acc <main+0x734>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	f000 81b3 	beq.w	8002bce <main+0x836>
 8002868:	2b08      	cmp	r3, #8
 800286a:	dc0f      	bgt.n	800288c <main+0x4f4>
 800286c:	2b01      	cmp	r3, #1
 800286e:	f000 80cd 	beq.w	8002a0c <main+0x674>
 8002872:	2b01      	cmp	r3, #1
 8002874:	dc03      	bgt.n	800287e <main+0x4e6>
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 809c 	beq.w	80029b4 <main+0x61c>
//			  case 0b00011100:
//				  MotorR_SetPWM(MaxSpeed * 0.95);
//				  MotorL_SetPWM(MaxSpeed * 1);
//				  Servo_SetAngle(4);
		  }
		  continue;
 800287c:	e3b6      	b.n	8002fec <main+0xc54>
		  switch (LineDetect)
 800287e:	2b03      	cmp	r3, #3
 8002880:	f000 8130 	beq.w	8002ae4 <main+0x74c>
 8002884:	2b07      	cmp	r3, #7
 8002886:	f000 814a 	beq.w	8002b1e <main+0x786>
		  continue;
 800288a:	e3af      	b.n	8002fec <main+0xc54>
		  switch (LineDetect)
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d039      	beq.n	8002904 <main+0x56c>
 8002890:	2b80      	cmp	r3, #128	; 0x80
 8002892:	dc06      	bgt.n	80028a2 <main+0x50a>
 8002894:	2b0c      	cmp	r3, #12
 8002896:	f000 817c 	beq.w	8002b92 <main+0x7fa>
 800289a:	2b0e      	cmp	r3, #14
 800289c:	f000 815c 	beq.w	8002b58 <main+0x7c0>
		  continue;
 80028a0:	e3a4      	b.n	8002fec <main+0xc54>
		  switch (LineDetect)
 80028a2:	2b81      	cmp	r3, #129	; 0x81
 80028a4:	d05a      	beq.n	800295c <main+0x5c4>
 80028a6:	2bc0      	cmp	r3, #192	; 0xc0
 80028a8:	d000      	beq.n	80028ac <main+0x514>
		  continue;
 80028aa:	e39f      	b.n	8002fec <main+0xc54>
	  	  	  		MotorR_SetPWM(MaxSpeed * 0.6);
 80028ac:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <main+0x71c>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fda7 	bl	8000404 <__aeabi_i2d>
 80028b6:	a36e      	add	r3, pc, #440	; (adr r3, 8002a70 <main+0x6d8>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd fe0c 	bl	80004d8 <__aeabi_dmul>
 80028c0:	4603      	mov	r3, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	4618      	mov	r0, r3
 80028c6:	4621      	mov	r1, r4
 80028c8:	f7fe f8b6 	bl	8000a38 <__aeabi_d2iz>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fcb4 	bl	800123c <MotorR_SetPWM>
	  	  	  	  	MotorL_SetPWM(MaxSpeed * 0.8);
 80028d4:	4b77      	ldr	r3, [pc, #476]	; (8002ab4 <main+0x71c>)
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fd93 	bl	8000404 <__aeabi_i2d>
 80028de:	a366      	add	r3, pc, #408	; (adr r3, 8002a78 <main+0x6e0>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fdf8 	bl	80004d8 <__aeabi_dmul>
 80028e8:	4603      	mov	r3, r0
 80028ea:	460c      	mov	r4, r1
 80028ec:	4618      	mov	r0, r3
 80028ee:	4621      	mov	r1, r4
 80028f0:	f7fe f8a2 	bl	8000a38 <__aeabi_d2iz>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fc68 	bl	80011cc <MotorL_SetPWM>
	  	  	  		Servo_SetAngle(70);// 9
 80028fc:	4874      	ldr	r0, [pc, #464]	; (8002ad0 <main+0x738>)
 80028fe:	f7fe fcd5 	bl	80012ac <Servo_SetAngle>
	  	  	  	  	break;
 8002902:	e181      	b.n	8002c08 <main+0x870>
	  	  	  		MotorR_SetPWM(MaxSpeed * 0.70);
 8002904:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <main+0x71c>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fd7b 	bl	8000404 <__aeabi_i2d>
 800290e:	a35c      	add	r3, pc, #368	; (adr r3, 8002a80 <main+0x6e8>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fde0 	bl	80004d8 <__aeabi_dmul>
 8002918:	4603      	mov	r3, r0
 800291a:	460c      	mov	r4, r1
 800291c:	4618      	mov	r0, r3
 800291e:	4621      	mov	r1, r4
 8002920:	f7fe f88a 	bl	8000a38 <__aeabi_d2iz>
 8002924:	4603      	mov	r3, r0
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fc88 	bl	800123c <MotorR_SetPWM>
	  	  	  	  	MotorL_SetPWM(MaxSpeed * 0.85);
 800292c:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <main+0x71c>)
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fd67 	bl	8000404 <__aeabi_i2d>
 8002936:	a354      	add	r3, pc, #336	; (adr r3, 8002a88 <main+0x6f0>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd fdcc 	bl	80004d8 <__aeabi_dmul>
 8002940:	4603      	mov	r3, r0
 8002942:	460c      	mov	r4, r1
 8002944:	4618      	mov	r0, r3
 8002946:	4621      	mov	r1, r4
 8002948:	f7fe f876 	bl	8000a38 <__aeabi_d2iz>
 800294c:	4603      	mov	r3, r0
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fc3c 	bl	80011cc <MotorL_SetPWM>
	  	  	  		Servo_SetAngle(67);// 54
 8002954:	485f      	ldr	r0, [pc, #380]	; (8002ad4 <main+0x73c>)
 8002956:	f7fe fca9 	bl	80012ac <Servo_SetAngle>
	  	  	  	  	break;
 800295a:	e155      	b.n	8002c08 <main+0x870>
					MotorR_SetPWM(MaxSpeed * 0.78);
 800295c:	4b55      	ldr	r3, [pc, #340]	; (8002ab4 <main+0x71c>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fd4f 	bl	8000404 <__aeabi_i2d>
 8002966:	a34a      	add	r3, pc, #296	; (adr r3, 8002a90 <main+0x6f8>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fdb4 	bl	80004d8 <__aeabi_dmul>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	4618      	mov	r0, r3
 8002976:	4621      	mov	r1, r4
 8002978:	f7fe f85e 	bl	8000a38 <__aeabi_d2iz>
 800297c:	4603      	mov	r3, r0
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fc5c 	bl	800123c <MotorR_SetPWM>
					MotorL_SetPWM(MaxSpeed * 0.9);
 8002984:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <main+0x71c>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fd3b 	bl	8000404 <__aeabi_i2d>
 800298e:	a342      	add	r3, pc, #264	; (adr r3, 8002a98 <main+0x700>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd fda0 	bl	80004d8 <__aeabi_dmul>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	4618      	mov	r0, r3
 800299e:	4621      	mov	r1, r4
 80029a0:	f7fe f84a 	bl	8000a38 <__aeabi_d2iz>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fc10 	bl	80011cc <MotorL_SetPWM>
					Servo_SetAngle(57);
 80029ac:	484a      	ldr	r0, [pc, #296]	; (8002ad8 <main+0x740>)
 80029ae:	f7fe fc7d 	bl	80012ac <Servo_SetAngle>
					break;
 80029b2:	e129      	b.n	8002c08 <main+0x870>
	  	  	  		MotorR_SetPWM(MaxSpeed * 0.85);
 80029b4:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <main+0x71c>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd23 	bl	8000404 <__aeabi_i2d>
 80029be:	a332      	add	r3, pc, #200	; (adr r3, 8002a88 <main+0x6f0>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fd88 	bl	80004d8 <__aeabi_dmul>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	4618      	mov	r0, r3
 80029ce:	4621      	mov	r1, r4
 80029d0:	f7fe f832 	bl	8000a38 <__aeabi_d2iz>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fc30 	bl	800123c <MotorR_SetPWM>
	  	  	  	  	MotorL_SetPWM(MaxSpeed * 0.95);
 80029dc:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <main+0x71c>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd0f 	bl	8000404 <__aeabi_i2d>
 80029e6:	a32e      	add	r3, pc, #184	; (adr r3, 8002aa0 <main+0x708>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fd74 	bl	80004d8 <__aeabi_dmul>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	4618      	mov	r0, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	f7fe f81e 	bl	8000a38 <__aeabi_d2iz>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe fbe4 	bl	80011cc <MotorL_SetPWM>
	  	  	  		Servo_SetAngle(47);// 43
 8002a04:	4835      	ldr	r0, [pc, #212]	; (8002adc <main+0x744>)
 8002a06:	f7fe fc51 	bl	80012ac <Servo_SetAngle>
	  	  	  	  	break;
 8002a0a:	e0fd      	b.n	8002c08 <main+0x870>
				  MotorR_SetPWM(MaxSpeed * 0.88);
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <main+0x71c>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fcf7 	bl	8000404 <__aeabi_i2d>
 8002a16:	a324      	add	r3, pc, #144	; (adr r3, 8002aa8 <main+0x710>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fd5c 	bl	80004d8 <__aeabi_dmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	460c      	mov	r4, r1
 8002a24:	4618      	mov	r0, r3
 8002a26:	4621      	mov	r1, r4
 8002a28:	f7fe f806 	bl	8000a38 <__aeabi_d2iz>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fc04 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 0.95);
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <main+0x71c>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fce3 	bl	8000404 <__aeabi_i2d>
 8002a3e:	a318      	add	r3, pc, #96	; (adr r3, 8002aa0 <main+0x708>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fd48 	bl	80004d8 <__aeabi_dmul>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	4621      	mov	r1, r4
 8002a50:	f7fd fff2 	bl	8000a38 <__aeabi_d2iz>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fbb8 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(43);// 37
 8002a5c:	4820      	ldr	r0, [pc, #128]	; (8002ae0 <main+0x748>)
 8002a5e:	f7fe fc25 	bl	80012ac <Servo_SetAngle>
				  break;
 8002a62:	e0d1      	b.n	8002c08 <main+0x870>
 8002a64:	f3af 8000 	nop.w
 8002a68:	9999999a 	.word	0x9999999a
 8002a6c:	3fd99999 	.word	0x3fd99999
 8002a70:	33333333 	.word	0x33333333
 8002a74:	3fe33333 	.word	0x3fe33333
 8002a78:	9999999a 	.word	0x9999999a
 8002a7c:	3fe99999 	.word	0x3fe99999
 8002a80:	66666666 	.word	0x66666666
 8002a84:	3fe66666 	.word	0x3fe66666
 8002a88:	33333333 	.word	0x33333333
 8002a8c:	3feb3333 	.word	0x3feb3333
 8002a90:	8f5c28f6 	.word	0x8f5c28f6
 8002a94:	3fe8f5c2 	.word	0x3fe8f5c2
 8002a98:	cccccccd 	.word	0xcccccccd
 8002a9c:	3feccccc 	.word	0x3feccccc
 8002aa0:	66666666 	.word	0x66666666
 8002aa4:	3fee6666 	.word	0x3fee6666
 8002aa8:	c28f5c29 	.word	0xc28f5c29
 8002aac:	3fec28f5 	.word	0x3fec28f5
 8002ab0:	20000208 	.word	0x20000208
 8002ab4:	20000010 	.word	0x20000010
 8002ab8:	3fe80000 	.word	0x3fe80000
 8002abc:	42580000 	.word	0x42580000
 8002ac0:	20000207 	.word	0x20000207
 8002ac4:	20000209 	.word	0x20000209
 8002ac8:	41f00000 	.word	0x41f00000
 8002acc:	20000206 	.word	0x20000206
 8002ad0:	428c0000 	.word	0x428c0000
 8002ad4:	42860000 	.word	0x42860000
 8002ad8:	42640000 	.word	0x42640000
 8002adc:	423c0000 	.word	0x423c0000
 8002ae0:	422c0000 	.word	0x422c0000
				  MotorR_SetPWM(MaxSpeed * 0.85);
 8002ae4:	4bc8      	ldr	r3, [pc, #800]	; (8002e08 <main+0xa70>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fc8b 	bl	8000404 <__aeabi_i2d>
 8002aee:	a3b6      	add	r3, pc, #728	; (adr r3, 8002dc8 <main+0xa30>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fcf0 	bl	80004d8 <__aeabi_dmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	4618      	mov	r0, r3
 8002afe:	4621      	mov	r1, r4
 8002b00:	f7fd ff9a 	bl	8000a38 <__aeabi_d2iz>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fb98 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002b0c:	4bbe      	ldr	r3, [pc, #760]	; (8002e08 <main+0xa70>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fb5b 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(31); //26
 8002b16:	48bd      	ldr	r0, [pc, #756]	; (8002e0c <main+0xa74>)
 8002b18:	f7fe fbc8 	bl	80012ac <Servo_SetAngle>
				  break;
 8002b1c:	e074      	b.n	8002c08 <main+0x870>
				  MotorR_SetPWM(MaxSpeed * 0.90);
 8002b1e:	4bba      	ldr	r3, [pc, #744]	; (8002e08 <main+0xa70>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fc6e 	bl	8000404 <__aeabi_i2d>
 8002b28:	a3a9      	add	r3, pc, #676	; (adr r3, 8002dd0 <main+0xa38>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fcd3 	bl	80004d8 <__aeabi_dmul>
 8002b32:	4603      	mov	r3, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	4618      	mov	r0, r3
 8002b38:	4621      	mov	r1, r4
 8002b3a:	f7fd ff7d 	bl	8000a38 <__aeabi_d2iz>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fb7b 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002b46:	4bb0      	ldr	r3, [pc, #704]	; (8002e08 <main+0xa70>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fb3e 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(23); // 18
 8002b50:	48af      	ldr	r0, [pc, #700]	; (8002e10 <main+0xa78>)
 8002b52:	f7fe fbab 	bl	80012ac <Servo_SetAngle>
				  break;
 8002b56:	e057      	b.n	8002c08 <main+0x870>
				  MotorR_SetPWM(MaxSpeed * 0.93);
 8002b58:	4bab      	ldr	r3, [pc, #684]	; (8002e08 <main+0xa70>)
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fc51 	bl	8000404 <__aeabi_i2d>
 8002b62:	a39d      	add	r3, pc, #628	; (adr r3, 8002dd8 <main+0xa40>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd fcb6 	bl	80004d8 <__aeabi_dmul>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	4618      	mov	r0, r3
 8002b72:	4621      	mov	r1, r4
 8002b74:	f7fd ff60 	bl	8000a38 <__aeabi_d2iz>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fb5e 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002b80:	4ba1      	ldr	r3, [pc, #644]	; (8002e08 <main+0xa70>)
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fb21 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(13); //11
 8002b8a:	48a2      	ldr	r0, [pc, #648]	; (8002e14 <main+0xa7c>)
 8002b8c:	f7fe fb8e 	bl	80012ac <Servo_SetAngle>
				  break;
 8002b90:	e03a      	b.n	8002c08 <main+0x870>
				  MotorR_SetPWM(MaxSpeed * 0.95);
 8002b92:	4b9d      	ldr	r3, [pc, #628]	; (8002e08 <main+0xa70>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fc34 	bl	8000404 <__aeabi_i2d>
 8002b9c:	a390      	add	r3, pc, #576	; (adr r3, 8002de0 <main+0xa48>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fc99 	bl	80004d8 <__aeabi_dmul>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	4618      	mov	r0, r3
 8002bac:	4621      	mov	r1, r4
 8002bae:	f7fd ff43 	bl	8000a38 <__aeabi_d2iz>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fb41 	bl	800123c <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002bba:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <main+0xa70>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fb04 	bl	80011cc <MotorL_SetPWM>
				  Servo_SetAngle(8);
 8002bc4:	f04f 4082 	mov.w	r0, #1090519040	; 0x41000000
 8002bc8:	f7fe fb70 	bl	80012ac <Servo_SetAngle>
				  break;
 8002bcc:	e01c      	b.n	8002c08 <main+0x870>
				  MotorL_SetPWM(MaxSpeed * 0.98);
 8002bce:	4b8e      	ldr	r3, [pc, #568]	; (8002e08 <main+0xa70>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fc16 	bl	8000404 <__aeabi_i2d>
 8002bd8:	a383      	add	r3, pc, #524	; (adr r3, 8002de8 <main+0xa50>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f7fd fc7b 	bl	80004d8 <__aeabi_dmul>
 8002be2:	4603      	mov	r3, r0
 8002be4:	460c      	mov	r4, r1
 8002be6:	4618      	mov	r0, r3
 8002be8:	4621      	mov	r1, r4
 8002bea:	f7fd ff25 	bl	8000a38 <__aeabi_d2iz>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe faeb 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002bf6:	4b84      	ldr	r3, [pc, #528]	; (8002e08 <main+0xa70>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fb1e 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(3);
 8002c00:	4885      	ldr	r0, [pc, #532]	; (8002e18 <main+0xa80>)
 8002c02:	f7fe fb53 	bl	80012ac <Servo_SetAngle>
				  break;
 8002c06:	bf00      	nop
		  continue;
 8002c08:	e1f0      	b.n	8002fec <main+0xc54>
	  };
	  if (CarState == LechPhai)
 8002c0a:	4b84      	ldr	r3, [pc, #528]	; (8002e1c <main+0xa84>)
 8002c0c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f47f ac6f 	bne.w	80024f4 <main+0x15c>
	  {
		  switch (LineDetect)
 8002c16:	4b82      	ldr	r3, [pc, #520]	; (8002e20 <main+0xa88>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b30      	cmp	r3, #48	; 0x30
 8002c1c:	f000 81ab 	beq.w	8002f76 <main+0xbde>
 8002c20:	2b30      	cmp	r3, #48	; 0x30
 8002c22:	dc0d      	bgt.n	8002c40 <main+0x8a8>
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d049      	beq.n	8002cbc <main+0x924>
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	dc03      	bgt.n	8002c34 <main+0x89c>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 809d 	beq.w	8002d6c <main+0x9d4>
//			  case 0b00111000:
//				  MotorL_SetPWM(MaxSpeed * 0.95);
//				  MotorR_SetPWM(MaxSpeed * 1);
//				  Servo_SetAngle(-0);
		  }
		  continue;
 8002c32:	e1da      	b.n	8002fea <main+0xc52>
		  switch (LineDetect)
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d015      	beq.n	8002c64 <main+0x8cc>
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	f000 81b9 	beq.w	8002fb0 <main+0xc18>
		  continue;
 8002c3e:	e1d4      	b.n	8002fea <main+0xc52>
		  switch (LineDetect)
 8002c40:	2b81      	cmp	r3, #129	; 0x81
 8002c42:	d067      	beq.n	8002d14 <main+0x97c>
 8002c44:	2b81      	cmp	r3, #129	; 0x81
 8002c46:	dc06      	bgt.n	8002c56 <main+0x8be>
 8002c48:	2b70      	cmp	r3, #112	; 0x70
 8002c4a:	f000 8177 	beq.w	8002f3c <main+0xba4>
 8002c4e:	2b80      	cmp	r3, #128	; 0x80
 8002c50:	f000 80f0 	beq.w	8002e34 <main+0xa9c>
		  continue;
 8002c54:	e1c9      	b.n	8002fea <main+0xc52>
		  switch (LineDetect)
 8002c56:	2bc0      	cmp	r3, #192	; 0xc0
 8002c58:	f000 8118 	beq.w	8002e8c <main+0xaf4>
 8002c5c:	2be0      	cmp	r3, #224	; 0xe0
 8002c5e:	f000 8141 	beq.w	8002ee4 <main+0xb4c>
		  continue;
 8002c62:	e1c2      	b.n	8002fea <main+0xc52>
				MotorR_SetPWM(MaxSpeed * 0.6);
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <main+0xa70>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fbcb 	bl	8000404 <__aeabi_i2d>
 8002c6e:	a360      	add	r3, pc, #384	; (adr r3, 8002df0 <main+0xa58>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fc30 	bl	80004d8 <__aeabi_dmul>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	4621      	mov	r1, r4
 8002c80:	f7fd feda 	bl	8000a38 <__aeabi_d2iz>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fad8 	bl	800123c <MotorR_SetPWM>
				MotorL_SetPWM(MaxSpeed * 0.8);
 8002c8c:	4b5e      	ldr	r3, [pc, #376]	; (8002e08 <main+0xa70>)
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fbb7 	bl	8000404 <__aeabi_i2d>
 8002c96:	a358      	add	r3, pc, #352	; (adr r3, 8002df8 <main+0xa60>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f7fd fc1c 	bl	80004d8 <__aeabi_dmul>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	f7fd fec6 	bl	8000a38 <__aeabi_d2iz>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fa8c 	bl	80011cc <MotorL_SetPWM>
				Servo_SetAngle(-70);// 9
 8002cb4:	485b      	ldr	r0, [pc, #364]	; (8002e24 <main+0xa8c>)
 8002cb6:	f7fe faf9 	bl	80012ac <Servo_SetAngle>
				break;
 8002cba:	e196      	b.n	8002fea <main+0xc52>
				  MotorL_SetPWM(MaxSpeed * 0.70);
 8002cbc:	4b52      	ldr	r3, [pc, #328]	; (8002e08 <main+0xa70>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fb9f 	bl	8000404 <__aeabi_i2d>
 8002cc6:	a34e      	add	r3, pc, #312	; (adr r3, 8002e00 <main+0xa68>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc04 	bl	80004d8 <__aeabi_dmul>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	f7fd feae 	bl	8000a38 <__aeabi_d2iz>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fa74 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.85);
 8002ce4:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <main+0xa70>)
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fb8b 	bl	8000404 <__aeabi_i2d>
 8002cee:	a336      	add	r3, pc, #216	; (adr r3, 8002dc8 <main+0xa30>)
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f7fd fbf0 	bl	80004d8 <__aeabi_dmul>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	4621      	mov	r1, r4
 8002d00:	f7fd fe9a 	bl	8000a38 <__aeabi_d2iz>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fa98 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-67); // -54
 8002d0c:	4846      	ldr	r0, [pc, #280]	; (8002e28 <main+0xa90>)
 8002d0e:	f7fe facd 	bl	80012ac <Servo_SetAngle>
				  break;
 8002d12:	e16a      	b.n	8002fea <main+0xc52>
					MotorR_SetPWM(MaxSpeed * 0.80);
 8002d14:	4b3c      	ldr	r3, [pc, #240]	; (8002e08 <main+0xa70>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fb73 	bl	8000404 <__aeabi_i2d>
 8002d1e:	a336      	add	r3, pc, #216	; (adr r3, 8002df8 <main+0xa60>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fbd8 	bl	80004d8 <__aeabi_dmul>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	4621      	mov	r1, r4
 8002d30:	f7fd fe82 	bl	8000a38 <__aeabi_d2iz>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fa80 	bl	800123c <MotorR_SetPWM>
					MotorL_SetPWM(MaxSpeed * 0.90);
 8002d3c:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <main+0xa70>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fb5f 	bl	8000404 <__aeabi_i2d>
 8002d46:	a322      	add	r3, pc, #136	; (adr r3, 8002dd0 <main+0xa38>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	f7fd fbc4 	bl	80004d8 <__aeabi_dmul>
 8002d50:	4603      	mov	r3, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	4618      	mov	r0, r3
 8002d56:	4621      	mov	r1, r4
 8002d58:	f7fd fe6e 	bl	8000a38 <__aeabi_d2iz>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fa34 	bl	80011cc <MotorL_SetPWM>
					Servo_SetAngle(-57);// 54
 8002d64:	4831      	ldr	r0, [pc, #196]	; (8002e2c <main+0xa94>)
 8002d66:	f7fe faa1 	bl	80012ac <Servo_SetAngle>
					break;
 8002d6a:	e13e      	b.n	8002fea <main+0xc52>
				  MotorL_SetPWM(MaxSpeed * 0.85);
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <main+0xa70>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fb47 	bl	8000404 <__aeabi_i2d>
 8002d76:	a314      	add	r3, pc, #80	; (adr r3, 8002dc8 <main+0xa30>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fbac 	bl	80004d8 <__aeabi_dmul>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	4618      	mov	r0, r3
 8002d86:	4621      	mov	r1, r4
 8002d88:	f7fd fe56 	bl	8000a38 <__aeabi_d2iz>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fa1c 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.90);
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <main+0xa70>)
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fb33 	bl	8000404 <__aeabi_i2d>
 8002d9e:	a30c      	add	r3, pc, #48	; (adr r3, 8002dd0 <main+0xa38>)
 8002da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da4:	f7fd fb98 	bl	80004d8 <__aeabi_dmul>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	4618      	mov	r0, r3
 8002dae:	4621      	mov	r1, r4
 8002db0:	f7fd fe42 	bl	8000a38 <__aeabi_d2iz>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fa40 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-50); // -44.4
 8002dbc:	481c      	ldr	r0, [pc, #112]	; (8002e30 <main+0xa98>)
 8002dbe:	f7fe fa75 	bl	80012ac <Servo_SetAngle>
					break;
 8002dc2:	e112      	b.n	8002fea <main+0xc52>
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	33333333 	.word	0x33333333
 8002dcc:	3feb3333 	.word	0x3feb3333
 8002dd0:	cccccccd 	.word	0xcccccccd
 8002dd4:	3feccccc 	.word	0x3feccccc
 8002dd8:	5c28f5c3 	.word	0x5c28f5c3
 8002ddc:	3fedc28f 	.word	0x3fedc28f
 8002de0:	66666666 	.word	0x66666666
 8002de4:	3fee6666 	.word	0x3fee6666
 8002de8:	f5c28f5c 	.word	0xf5c28f5c
 8002dec:	3fef5c28 	.word	0x3fef5c28
 8002df0:	33333333 	.word	0x33333333
 8002df4:	3fe33333 	.word	0x3fe33333
 8002df8:	9999999a 	.word	0x9999999a
 8002dfc:	3fe99999 	.word	0x3fe99999
 8002e00:	66666666 	.word	0x66666666
 8002e04:	3fe66666 	.word	0x3fe66666
 8002e08:	20000010 	.word	0x20000010
 8002e0c:	41f80000 	.word	0x41f80000
 8002e10:	41b80000 	.word	0x41b80000
 8002e14:	41500000 	.word	0x41500000
 8002e18:	40400000 	.word	0x40400000
 8002e1c:	20000207 	.word	0x20000207
 8002e20:	20000206 	.word	0x20000206
 8002e24:	c28c0000 	.word	0xc28c0000
 8002e28:	c2860000 	.word	0xc2860000
 8002e2c:	c2640000 	.word	0xc2640000
 8002e30:	c2480000 	.word	0xc2480000
				  MotorL_SetPWM(MaxSpeed * 0.83);
 8002e34:	4b78      	ldr	r3, [pc, #480]	; (8003018 <main+0xc80>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fae3 	bl	8000404 <__aeabi_i2d>
 8002e3e:	a36c      	add	r3, pc, #432	; (adr r3, 8002ff0 <main+0xc58>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f7fd fb48 	bl	80004d8 <__aeabi_dmul>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	4621      	mov	r1, r4
 8002e50:	f7fd fdf2 	bl	8000a38 <__aeabi_d2iz>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f9b8 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.95);
 8002e5c:	4b6e      	ldr	r3, [pc, #440]	; (8003018 <main+0xc80>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd facf 	bl	8000404 <__aeabi_i2d>
 8002e66:	a364      	add	r3, pc, #400	; (adr r3, 8002ff8 <main+0xc60>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f7fd fb34 	bl	80004d8 <__aeabi_dmul>
 8002e70:	4603      	mov	r3, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	4618      	mov	r0, r3
 8002e76:	4621      	mov	r1, r4
 8002e78:	f7fd fdde 	bl	8000a38 <__aeabi_d2iz>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe f9dc 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-41); //-24
 8002e84:	4865      	ldr	r0, [pc, #404]	; (800301c <main+0xc84>)
 8002e86:	f7fe fa11 	bl	80012ac <Servo_SetAngle>
				  break;
 8002e8a:	e0ae      	b.n	8002fea <main+0xc52>
				  MotorL_SetPWM(MaxSpeed * 0.87);
 8002e8c:	4b62      	ldr	r3, [pc, #392]	; (8003018 <main+0xc80>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fab7 	bl	8000404 <__aeabi_i2d>
 8002e96:	a35a      	add	r3, pc, #360	; (adr r3, 8003000 <main+0xc68>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f7fd fb1c 	bl	80004d8 <__aeabi_dmul>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	f7fd fdc6 	bl	8000a38 <__aeabi_d2iz>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe f98c 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.95);
 8002eb4:	4b58      	ldr	r3, [pc, #352]	; (8003018 <main+0xc80>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd faa3 	bl	8000404 <__aeabi_i2d>
 8002ebe:	a34e      	add	r3, pc, #312	; (adr r3, 8002ff8 <main+0xc60>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f7fd fb08 	bl	80004d8 <__aeabi_dmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4621      	mov	r1, r4
 8002ed0:	f7fd fdb2 	bl	8000a38 <__aeabi_d2iz>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f9b0 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-31); //-24
 8002edc:	4850      	ldr	r0, [pc, #320]	; (8003020 <main+0xc88>)
 8002ede:	f7fe f9e5 	bl	80012ac <Servo_SetAngle>
				  break;
 8002ee2:	e082      	b.n	8002fea <main+0xc52>
				  MotorL_SetPWM(MaxSpeed * 0.90);
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <main+0xc80>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fa8b 	bl	8000404 <__aeabi_i2d>
 8002eee:	a346      	add	r3, pc, #280	; (adr r3, 8003008 <main+0xc70>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd faf0 	bl	80004d8 <__aeabi_dmul>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	4618      	mov	r0, r3
 8002efe:	4621      	mov	r1, r4
 8002f00:	f7fd fd9a 	bl	8000a38 <__aeabi_d2iz>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe f960 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.95);
 8002f0c:	4b42      	ldr	r3, [pc, #264]	; (8003018 <main+0xc80>)
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fa77 	bl	8000404 <__aeabi_i2d>
 8002f16:	a338      	add	r3, pc, #224	; (adr r3, 8002ff8 <main+0xc60>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f7fd fadc 	bl	80004d8 <__aeabi_dmul>
 8002f20:	4603      	mov	r3, r0
 8002f22:	460c      	mov	r4, r1
 8002f24:	4618      	mov	r0, r3
 8002f26:	4621      	mov	r1, r4
 8002f28:	f7fd fd86 	bl	8000a38 <__aeabi_d2iz>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe f984 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-25); // -21
 8002f34:	483b      	ldr	r0, [pc, #236]	; (8003024 <main+0xc8c>)
 8002f36:	f7fe f9b9 	bl	80012ac <Servo_SetAngle>
				  break;
 8002f3a:	e056      	b.n	8002fea <main+0xc52>
				  MotorL_SetPWM(MaxSpeed * 0.87);
 8002f3c:	4b36      	ldr	r3, [pc, #216]	; (8003018 <main+0xc80>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fa5f 	bl	8000404 <__aeabi_i2d>
 8002f46:	a32e      	add	r3, pc, #184	; (adr r3, 8003000 <main+0xc68>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd fac4 	bl	80004d8 <__aeabi_dmul>
 8002f50:	4603      	mov	r3, r0
 8002f52:	460c      	mov	r4, r1
 8002f54:	4618      	mov	r0, r3
 8002f56:	4621      	mov	r1, r4
 8002f58:	f7fd fd6e 	bl	8000a38 <__aeabi_d2iz>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe f934 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <main+0xc80>)
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe f967 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-15); // -11
 8002f6e:	482e      	ldr	r0, [pc, #184]	; (8003028 <main+0xc90>)
 8002f70:	f7fe f99c 	bl	80012ac <Servo_SetAngle>
				  break;
 8002f74:	e039      	b.n	8002fea <main+0xc52>
				  MotorL_SetPWM(MaxSpeed * 0.90);
 8002f76:	4b28      	ldr	r3, [pc, #160]	; (8003018 <main+0xc80>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fa42 	bl	8000404 <__aeabi_i2d>
 8002f80:	a321      	add	r3, pc, #132	; (adr r3, 8003008 <main+0xc70>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f7fd faa7 	bl	80004d8 <__aeabi_dmul>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	4621      	mov	r1, r4
 8002f92:	f7fd fd51 	bl	8000a38 <__aeabi_d2iz>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe f917 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <main+0xc80>)
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe f94a 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-13); // -9
 8002fa8:	4820      	ldr	r0, [pc, #128]	; (800302c <main+0xc94>)
 8002faa:	f7fe f97f 	bl	80012ac <Servo_SetAngle>
				  break;
 8002fae:	e01c      	b.n	8002fea <main+0xc52>
				  MotorL_SetPWM(MaxSpeed * 0.98);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <main+0xc80>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fa25 	bl	8000404 <__aeabi_i2d>
 8002fba:	a315      	add	r3, pc, #84	; (adr r3, 8003010 <main+0xc78>)
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f7fd fa8a 	bl	80004d8 <__aeabi_dmul>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	4621      	mov	r1, r4
 8002fcc:	f7fd fd34 	bl	8000a38 <__aeabi_d2iz>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe f8fa 	bl	80011cc <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <main+0xc80>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe f92d 	bl	800123c <MotorR_SetPWM>
				  Servo_SetAngle(-3);
 8002fe2:	4813      	ldr	r0, [pc, #76]	; (8003030 <main+0xc98>)
 8002fe4:	f7fe f962 	bl	80012ac <Servo_SetAngle>
				  break;
 8002fe8:	bf00      	nop
		  continue;
 8002fea:	bf00      	nop
	  LineDetect = 0;
 8002fec:	f7ff ba82 	b.w	80024f4 <main+0x15c>
 8002ff0:	28f5c28f 	.word	0x28f5c28f
 8002ff4:	3fea8f5c 	.word	0x3fea8f5c
 8002ff8:	66666666 	.word	0x66666666
 8002ffc:	3fee6666 	.word	0x3fee6666
 8003000:	3d70a3d7 	.word	0x3d70a3d7
 8003004:	3febd70a 	.word	0x3febd70a
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	3feccccc 	.word	0x3feccccc
 8003010:	f5c28f5c 	.word	0xf5c28f5c
 8003014:	3fef5c28 	.word	0x3fef5c28
 8003018:	20000010 	.word	0x20000010
 800301c:	c2240000 	.word	0xc2240000
 8003020:	c1f80000 	.word	0xc1f80000
 8003024:	c1c80000 	.word	0xc1c80000
 8003028:	c1700000 	.word	0xc1700000
 800302c:	c1500000 	.word	0xc1500000
 8003030:	c0400000 	.word	0xc0400000

08003034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8003038:	2002      	movs	r0, #2
 800303a:	f7fe fdab 	bl	8001b94 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800303e:	bf00      	nop
 8003040:	f7fe fdbc 	bl	8001bbc <LL_FLASH_GetLatency>
 8003044:	4603      	mov	r3, r0
 8003046:	2b02      	cmp	r3, #2
 8003048:	d1fa      	bne.n	8003040 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800304a:	f7fe fc93 	bl	8001974 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800304e:	bf00      	nop
 8003050:	f7fe fc9e 	bl	8001990 <LL_RCC_HSE_IsReady>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d1fa      	bne.n	8003050 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800305a:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800305e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003062:	f7fe fd37 	bl	8001ad4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003066:	f7fe fd15 	bl	8001a94 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800306a:	bf00      	nop
 800306c:	f7fe fd20 	bl	8001ab0 <LL_RCC_PLL_IsReady>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d1fa      	bne.n	800306c <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fe fcbc 	bl	80019f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800307c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003080:	f7fe fccc 	bl	8001a1c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003084:	2000      	movs	r0, #0
 8003086:	f7fe fcdd 	bl	8001a44 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800308a:	2002      	movs	r0, #2
 800308c:	f7fe fc92 	bl	80019b4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003090:	bf00      	nop
 8003092:	f7fe fca3 	bl	80019dc <LL_RCC_GetSysClkSource>
 8003096:	4603      	mov	r3, r0
 8003098:	2b08      	cmp	r3, #8
 800309a:	d1fa      	bne.n	8003092 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 800309c:	4805      	ldr	r0, [pc, #20]	; (80030b4 <SystemClock_Config+0x80>)
 800309e:	f002 f8f1 	bl	8005284 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80030a2:	4804      	ldr	r0, [pc, #16]	; (80030b4 <SystemClock_Config+0x80>)
 80030a4:	f002 f8fc 	bl	80052a0 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 80030a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030ac:	f7fe fcde 	bl	8001a6c <LL_RCC_SetADCClockSource>
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	044aa200 	.word	0x044aa200

080030b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08e      	sub	sp, #56	; 0x38
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80030be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80030cc:	f107 0318 	add.w	r3, r7, #24
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80030ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030ee:	f7fe fd39 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80030f2:	2004      	movs	r0, #4
 80030f4:	f7fe fd36 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80030f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030fc:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	4619      	mov	r1, r3
 8003106:	486b      	ldr	r0, [pc, #428]	; (80032b4 <MX_ADC1_Init+0x1fc>)
 8003108:	f001 fa4e 	bl	80045a8 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800310c:	2200      	movs	r2, #0
 800310e:	2101      	movs	r1, #1
 8003110:	4869      	ldr	r0, [pc, #420]	; (80032b8 <MX_ADC1_Init+0x200>)
 8003112:	f7fe fa9f 	bl	8001654 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8003116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800311a:	2101      	movs	r1, #1
 800311c:	4866      	ldr	r0, [pc, #408]	; (80032b8 <MX_ADC1_Init+0x200>)
 800311e:	f7fe fb67 	bl	80017f0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8003122:	2220      	movs	r2, #32
 8003124:	2101      	movs	r1, #1
 8003126:	4864      	ldr	r0, [pc, #400]	; (80032b8 <MX_ADC1_Init+0x200>)
 8003128:	f7fe fab8 	bl	800169c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800312c:	2200      	movs	r2, #0
 800312e:	2101      	movs	r1, #1
 8003130:	4861      	ldr	r0, [pc, #388]	; (80032b8 <MX_ADC1_Init+0x200>)
 8003132:	f7fe fad5 	bl	80016e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	2101      	movs	r1, #1
 800313a:	485f      	ldr	r0, [pc, #380]	; (80032b8 <MX_ADC1_Init+0x200>)
 800313c:	f7fe faf2 	bl	8001724 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8003140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003144:	2101      	movs	r1, #1
 8003146:	485c      	ldr	r0, [pc, #368]	; (80032b8 <MX_ADC1_Init+0x200>)
 8003148:	f7fe fb0e 	bl	8001768 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 800314c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003150:	2101      	movs	r1, #1
 8003152:	4859      	ldr	r0, [pc, #356]	; (80032b8 <MX_ADC1_Init+0x200>)
 8003154:	f7fe fb2a 	bl	80017ac <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 8003158:	2208      	movs	r2, #8
 800315a:	2101      	movs	r1, #1
 800315c:	4856      	ldr	r0, [pc, #344]	; (80032b8 <MX_ADC1_Init+0x200>)
 800315e:	f7fe fb69 	bl	8001834 <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &Sensor_ADC_Value);
 8003162:	4b56      	ldr	r3, [pc, #344]	; (80032bc <MX_ADC1_Init+0x204>)
 8003164:	461a      	mov	r2, r3
 8003166:	2101      	movs	r1, #1
 8003168:	4853      	ldr	r0, [pc, #332]	; (80032b8 <MX_ADC1_Init+0x200>)
 800316a:	f7fe fb85 	bl	8001878 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 800316e:	4a54      	ldr	r2, [pc, #336]	; (80032c0 <MX_ADC1_Init+0x208>)
 8003170:	2101      	movs	r1, #1
 8003172:	4851      	ldr	r0, [pc, #324]	; (80032b8 <MX_ADC1_Init+0x200>)
 8003174:	f7fe fb98 	bl	80018a8 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8003178:	2101      	movs	r1, #1
 800317a:	484f      	ldr	r0, [pc, #316]	; (80032b8 <MX_ADC1_Init+0x200>)
 800317c:	f7fe fa4c 	bl	8001618 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003180:	2300      	movs	r3, #0
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8003184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800318a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800318e:	4619      	mov	r1, r3
 8003190:	484c      	ldr	r0, [pc, #304]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003192:	f000 ffd7 	bl	8004144 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8003196:	2300      	movs	r3, #0
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800319a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800319e:	4619      	mov	r1, r3
 80031a0:	4848      	ldr	r0, [pc, #288]	; (80032c4 <MX_ADC1_Init+0x20c>)
 80031a2:	f000 ff9d 	bl	80040e0 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80031a6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80031aa:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 80031ac:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 80031b0:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80031b6:	2302      	movs	r3, #2
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80031ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80031c0:	f107 0318 	add.w	r3, r7, #24
 80031c4:	4619      	mov	r1, r3
 80031c6:	483f      	ldr	r0, [pc, #252]	; (80032c4 <MX_ADC1_Init+0x20c>)
 80031c8:	f000 ffe3 	bl	8004192 <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80031cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031d4:	483b      	ldr	r0, [pc, #236]	; (80032c4 <MX_ADC1_Init+0x20c>)
 80031d6:	f7fe f951 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80031da:	2203      	movs	r2, #3
 80031dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031e0:	4838      	ldr	r0, [pc, #224]	; (80032c4 <MX_ADC1_Init+0x20c>)
 80031e2:	f7fe f990 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 80031e6:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <MX_ADC1_Init+0x210>)
 80031e8:	f240 2105 	movw	r1, #517	; 0x205
 80031ec:	4835      	ldr	r0, [pc, #212]	; (80032c4 <MX_ADC1_Init+0x20c>)
 80031ee:	f7fe f945 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80031f2:	2203      	movs	r2, #3
 80031f4:	4934      	ldr	r1, [pc, #208]	; (80032c8 <MX_ADC1_Init+0x210>)
 80031f6:	4833      	ldr	r0, [pc, #204]	; (80032c4 <MX_ADC1_Init+0x20c>)
 80031f8:	f7fe f985 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 80031fc:	4a33      	ldr	r2, [pc, #204]	; (80032cc <MX_ADC1_Init+0x214>)
 80031fe:	f240 210a 	movw	r1, #522	; 0x20a
 8003202:	4830      	ldr	r0, [pc, #192]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003204:	f7fe f93a 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8003208:	2203      	movs	r2, #3
 800320a:	4930      	ldr	r1, [pc, #192]	; (80032cc <MX_ADC1_Init+0x214>)
 800320c:	482d      	ldr	r0, [pc, #180]	; (80032c4 <MX_ADC1_Init+0x20c>)
 800320e:	f7fe f97a 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 8003212:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <MX_ADC1_Init+0x218>)
 8003214:	f240 210f 	movw	r1, #527	; 0x20f
 8003218:	482a      	ldr	r0, [pc, #168]	; (80032c4 <MX_ADC1_Init+0x20c>)
 800321a:	f7fe f92f 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 800321e:	2203      	movs	r2, #3
 8003220:	492b      	ldr	r1, [pc, #172]	; (80032d0 <MX_ADC1_Init+0x218>)
 8003222:	4828      	ldr	r0, [pc, #160]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003224:	f7fe f96f 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8003228:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <MX_ADC1_Init+0x21c>)
 800322a:	f44f 7105 	mov.w	r1, #532	; 0x214
 800322e:	4825      	ldr	r0, [pc, #148]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003230:	f7fe f924 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8003234:	2203      	movs	r2, #3
 8003236:	4927      	ldr	r1, [pc, #156]	; (80032d4 <MX_ADC1_Init+0x21c>)
 8003238:	4822      	ldr	r0, [pc, #136]	; (80032c4 <MX_ADC1_Init+0x20c>)
 800323a:	f7fe f964 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 800323e:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <MX_ADC1_Init+0x220>)
 8003240:	f240 2119 	movw	r1, #537	; 0x219
 8003244:	481f      	ldr	r0, [pc, #124]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003246:	f7fe f919 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 800324a:	2203      	movs	r2, #3
 800324c:	4922      	ldr	r1, [pc, #136]	; (80032d8 <MX_ADC1_Init+0x220>)
 800324e:	481d      	ldr	r0, [pc, #116]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003250:	f7fe f959 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8003254:	4a21      	ldr	r2, [pc, #132]	; (80032dc <MX_ADC1_Init+0x224>)
 8003256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800325a:	481a      	ldr	r0, [pc, #104]	; (80032c4 <MX_ADC1_Init+0x20c>)
 800325c:	f7fe f90e 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8003260:	2203      	movs	r2, #3
 8003262:	491e      	ldr	r1, [pc, #120]	; (80032dc <MX_ADC1_Init+0x224>)
 8003264:	4817      	ldr	r0, [pc, #92]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003266:	f7fe f94e 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 800326a:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <MX_ADC1_Init+0x228>)
 800326c:	f240 1105 	movw	r1, #261	; 0x105
 8003270:	4814      	ldr	r0, [pc, #80]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003272:	f7fe f903 	bl	800147c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8003276:	2203      	movs	r2, #3
 8003278:	4919      	ldr	r1, [pc, #100]	; (80032e0 <MX_ADC1_Init+0x228>)
 800327a:	4812      	ldr	r0, [pc, #72]	; (80032c4 <MX_ADC1_Init+0x20c>)
 800327c:	f7fe f943 	bl	8001506 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8003280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003284:	480f      	ldr	r0, [pc, #60]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003286:	f7fe f92c 	bl	80014e2 <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 800328a:	480e      	ldr	r0, [pc, #56]	; (80032c4 <MX_ADC1_Init+0x20c>)
 800328c:	f7fe f984 	bl	8001598 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 8003290:	480c      	ldr	r0, [pc, #48]	; (80032c4 <MX_ADC1_Init+0x20c>)
 8003292:	f7fe f990 	bl	80015b6 <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8003296:	bf00      	nop
 8003298:	480a      	ldr	r0, [pc, #40]	; (80032c4 <MX_ADC1_Init+0x20c>)
 800329a:	f7fe f99b 	bl	80015d4 <LL_ADC_IsCalibrationOnGoing>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f9      	bne.n	8003298 <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 80032a4:	4807      	ldr	r0, [pc, #28]	; (80032c4 <MX_ADC1_Init+0x20c>)
 80032a6:	f7fe f9a7 	bl	80015f8 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 80032aa:	bf00      	nop
 80032ac:	3738      	adds	r7, #56	; 0x38
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40010800 	.word	0x40010800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	20000220 	.word	0x20000220
 80032c0:	4001244c 	.word	0x4001244c
 80032c4:	40012400 	.word	0x40012400
 80032c8:	02300001 	.word	0x02300001
 80032cc:	02600002 	.word	0x02600002
 80032d0:	02900003 	.word	0x02900003
 80032d4:	02c00004 	.word	0x02c00004
 80032d8:	02f00005 	.word	0x02f00005
 80032dc:	03200006 	.word	0x03200006
 80032e0:	03500007 	.word	0x03500007

080032e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08c      	sub	sp, #48	; 0x30
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80032ea:	f107 0318 	add.w	r3, r7, #24
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	611a      	str	r2, [r3, #16]
 80032fa:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	60da      	str	r2, [r3, #12]
 8003308:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800330a:	2008      	movs	r0, #8
 800330c:	f7fe fc2a 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <MX_I2C1_Init+0xa4>)
 8003312:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003314:	2309      	movs	r3, #9
 8003316:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003318:	2303      	movs	r3, #3
 800331a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800331c:	2304      	movs	r3, #4
 800331e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003320:	1d3b      	adds	r3, r7, #4
 8003322:	4619      	mov	r1, r3
 8003324:	4819      	ldr	r0, [pc, #100]	; (800338c <MX_I2C1_Init+0xa8>)
 8003326:	f001 f93f 	bl	80045a8 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 800332a:	f7fe ff95 	bl	8002258 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800332e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003332:	f7fe fbff 	bl	8001b34 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8003336:	4816      	ldr	r0, [pc, #88]	; (8003390 <MX_I2C1_Init+0xac>)
 8003338:	f7fe fb0d 	bl	8001956 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800333c:	4814      	ldr	r0, [pc, #80]	; (8003390 <MX_I2C1_Init+0xac>)
 800333e:	f7fe fae9 	bl	8001914 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8003342:	4813      	ldr	r0, [pc, #76]	; (8003390 <MX_I2C1_Init+0xac>)
 8003344:	f7fe fad7 	bl	80018f6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003348:	2300      	movs	r3, #0
 800334a:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <MX_I2C1_Init+0xb0>)
 800334e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8003350:	2300      	movs	r3, #0
 8003352:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800335e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003364:	f107 0318 	add.w	r3, r7, #24
 8003368:	4619      	mov	r1, r3
 800336a:	4809      	ldr	r0, [pc, #36]	; (8003390 <MX_I2C1_Init+0xac>)
 800336c:	f001 fa68 	bl	8004840 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8003370:	2100      	movs	r1, #0
 8003372:	4807      	ldr	r0, [pc, #28]	; (8003390 <MX_I2C1_Init+0xac>)
 8003374:	f7fe fadd 	bl	8001932 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8003378:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_I2C1_Init+0xac>)
 800337a:	f7fe faad 	bl	80018d8 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 800337e:	bf00      	nop
 8003380:	3730      	adds	r7, #48	; 0x30
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	04030003 	.word	0x04030003
 800338c:	40010c00 	.word	0x40010c00
 8003390:	40005400 	.word	0x40005400
 8003394:	000186a0 	.word	0x000186a0

08003398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b098      	sub	sp, #96	; 0x60
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800339e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	60da      	str	r2, [r3, #12]
 80033ac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80033ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b2:	2220      	movs	r2, #32
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 ffc4 	bl	8005344 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
 80033cc:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ce:	463b      	mov	r3, r7
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80033dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80033e0:	f7fe fbc0 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80033ea:	2300      	movs	r3, #0
 80033ec:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 80033ee:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80033f2:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80033f4:	2300      	movs	r3, #0
 80033f6:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80033fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003402:	4619      	mov	r1, r3
 8003404:	483c      	ldr	r0, [pc, #240]	; (80034f8 <MX_TIM1_Init+0x160>)
 8003406:	f001 fbc3 	bl	8004b90 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800340a:	483b      	ldr	r0, [pc, #236]	; (80034f8 <MX_TIM1_Init+0x160>)
 800340c:	f7fe fbf1 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8003410:	2101      	movs	r1, #1
 8003412:	4839      	ldr	r0, [pc, #228]	; (80034f8 <MX_TIM1_Init+0x160>)
 8003414:	f7fe fc4c 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003418:	2360      	movs	r3, #96	; 0x60
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800341c:	2300      	movs	r3, #0
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003428:	2300      	movs	r3, #0
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800342c:	2300      	movs	r3, #0
 800342e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003430:	2300      	movs	r3, #0
 8003432:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800343c:	461a      	mov	r2, r3
 800343e:	2101      	movs	r1, #1
 8003440:	482d      	ldr	r0, [pc, #180]	; (80034f8 <MX_TIM1_Init+0x160>)
 8003442:	f001 fc03 	bl	8004c4c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8003446:	2101      	movs	r1, #1
 8003448:	482b      	ldr	r0, [pc, #172]	; (80034f8 <MX_TIM1_Init+0x160>)
 800344a:	f7fe fbef 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 800344e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003452:	4829      	ldr	r0, [pc, #164]	; (80034f8 <MX_TIM1_Init+0x160>)
 8003454:	f7fe fc2c 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003464:	461a      	mov	r2, r3
 8003466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800346a:	4823      	ldr	r0, [pc, #140]	; (80034f8 <MX_TIM1_Init+0x160>)
 800346c:	f001 fbee 	bl	8004c4c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8003470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003474:	4820      	ldr	r0, [pc, #128]	; (80034f8 <MX_TIM1_Init+0x160>)
 8003476:	f7fe fbd9 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800347a:	2100      	movs	r1, #0
 800347c:	481e      	ldr	r0, [pc, #120]	; (80034f8 <MX_TIM1_Init+0x160>)
 800347e:	f7fe fde1 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8003482:	481d      	ldr	r0, [pc, #116]	; (80034f8 <MX_TIM1_Init+0x160>)
 8003484:	f7fe fdf0 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 800349e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4619      	mov	r1, r3
 80034ae:	4812      	ldr	r0, [pc, #72]	; (80034f8 <MX_TIM1_Init+0x160>)
 80034b0:	f001 fc04 	bl	8004cbc <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 80034b4:	4810      	ldr	r0, [pc, #64]	; (80034f8 <MX_TIM1_Init+0x160>)
 80034b6:	f7fe fe1c 	bl	80020f2 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM1,0);
 80034ba:	2100      	movs	r1, #0
 80034bc:	480e      	ldr	r0, [pc, #56]	; (80034f8 <MX_TIM1_Init+0x160>)
 80034be:	f7fe fba7 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 80034c2:	480d      	ldr	r0, [pc, #52]	; (80034f8 <MX_TIM1_Init+0x160>)
 80034c4:	f7fe fddf 	bl	8002086 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 80034c8:	480b      	ldr	r0, [pc, #44]	; (80034f8 <MX_TIM1_Init+0x160>)
 80034ca:	f7fe fb83 	bl	8001bd4 <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80034ce:	2004      	movs	r0, #4
 80034d0:	f7fe fb48 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <MX_TIM1_Init+0x164>)
 80034d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034d8:	2309      	movs	r3, #9
 80034da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	463b      	mov	r3, r7
 80034e6:	4619      	mov	r1, r3
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <MX_TIM1_Init+0x168>)
 80034ea:	f001 f85d 	bl	80045a8 <LL_GPIO_Init>

}
 80034ee:	bf00      	nop
 80034f0:	3760      	adds	r7, #96	; 0x60
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	04050005 	.word	0x04050005
 8003500:	40010800 	.word	0x40010800

08003504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351a:	463b      	mov	r3, r7
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003528:	2001      	movs	r0, #1
 800352a:	f7fe fb03 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800352e:	2004      	movs	r0, #4
 8003530:	f7fe fb18 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003534:	2008      	movs	r0, #8
 8003536:	f7fe fb15 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <MX_TIM2_Init+0x154>)
 800353c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800353e:	2304      	movs	r3, #4
 8003540:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003542:	463b      	mov	r3, r7
 8003544:	4619      	mov	r1, r3
 8003546:	4845      	ldr	r0, [pc, #276]	; (800365c <MX_TIM2_Init+0x158>)
 8003548:	f001 f82e 	bl	80045a8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800354c:	f640 0308 	movw	r3, #2056	; 0x808
 8003550:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003552:	2304      	movs	r3, #4
 8003554:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003556:	463b      	mov	r3, r7
 8003558:	4619      	mov	r1, r3
 800355a:	4841      	ldr	r0, [pc, #260]	; (8003660 <MX_TIM2_Init+0x15c>)
 800355c:	f001 f824 	bl	80045a8 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003560:	f7fd ff06 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8003564:	4603      	mov	r3, r0
 8003566:	2200      	movs	r2, #0
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd ff54 	bl	8001418 <NVIC_EncodePriority>
 8003570:	4603      	mov	r3, r0
 8003572:	4619      	mov	r1, r3
 8003574:	201c      	movs	r0, #28
 8003576:	f7fd ff25 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 800357a:	201c      	movs	r0, #28
 800357c:	f7fd ff06 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8003580:	f7fe fe8a 	bl	8002298 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8003584:	2103      	movs	r1, #3
 8003586:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800358a:	f7fe fd49 	bl	8002020 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800358e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003592:	2101      	movs	r1, #1
 8003594:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003598:	f7fe fc0e 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 800359c:	2200      	movs	r2, #0
 800359e:	2101      	movs	r1, #1
 80035a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035a4:	f7fe fc52 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2101      	movs	r1, #1
 80035ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035b0:	f7fe fc96 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2101      	movs	r1, #1
 80035b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035bc:	f7fe fcda 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80035c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035c4:	2110      	movs	r1, #16
 80035c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035ca:	f7fe fbf5 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2110      	movs	r1, #16
 80035d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035d6:	f7fe fc39 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 80035da:	2200      	movs	r2, #0
 80035dc:	2110      	movs	r1, #16
 80035de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035e2:	f7fe fc7d 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2110      	movs	r1, #16
 80035ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035ee:	f7fe fcc1 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 80035fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035fe:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800360e:	f001 fabf 	bl	8004b90 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003612:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003616:	f7fe faec 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800361a:	2100      	movs	r1, #0
 800361c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003620:	f7fe fd10 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003624:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003628:	f7fe fd1e 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2,0);
 800362c:	2100      	movs	r1, #0
 800362e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003632:	f7fe faed 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 8003636:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800363a:	f7fe fd33 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 800363e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003642:	f7fe fd56 	bl	80020f2 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 8003646:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800364a:	f7fe fac3 	bl	8001bd4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 800364e:	bf00      	nop
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	04800080 	.word	0x04800080
 800365c:	40010800 	.word	0x40010800
 8003660:	40010c00 	.word	0x40010c00

08003664 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	60da      	str	r2, [r3, #12]
 8003678:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367a:	463b      	mov	r3, r7
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003688:	2002      	movs	r0, #2
 800368a:	f7fe fa53 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 800368e:	2008      	movs	r0, #8
 8003690:	f7fe fa68 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003694:	f243 0330 	movw	r3, #12336	; 0x3030
 8003698:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800369a:	2304      	movs	r3, #4
 800369c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369e:	463b      	mov	r3, r7
 80036a0:	4619      	mov	r1, r3
 80036a2:	4836      	ldr	r0, [pc, #216]	; (800377c <MX_TIM3_Init+0x118>)
 80036a4:	f000 ff80 	bl	80045a8 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80036a8:	f7fd fe62 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2200      	movs	r2, #0
 80036b0:	2102      	movs	r1, #2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd feb0 	bl	8001418 <NVIC_EncodePriority>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4619      	mov	r1, r3
 80036bc:	201d      	movs	r0, #29
 80036be:	f7fd fe81 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80036c2:	201d      	movs	r0, #29
 80036c4:	f7fd fe62 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 80036c8:	f7fe fdf6 	bl	80022b8 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 80036cc:	2103      	movs	r1, #3
 80036ce:	482c      	ldr	r0, [pc, #176]	; (8003780 <MX_TIM3_Init+0x11c>)
 80036d0:	f7fe fca6 	bl	8002020 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80036d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036d8:	2101      	movs	r1, #1
 80036da:	4829      	ldr	r0, [pc, #164]	; (8003780 <MX_TIM3_Init+0x11c>)
 80036dc:	f7fe fb6c 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2101      	movs	r1, #1
 80036e4:	4826      	ldr	r0, [pc, #152]	; (8003780 <MX_TIM3_Init+0x11c>)
 80036e6:	f7fe fbb1 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 80036ea:	2200      	movs	r2, #0
 80036ec:	2101      	movs	r1, #1
 80036ee:	4824      	ldr	r0, [pc, #144]	; (8003780 <MX_TIM3_Init+0x11c>)
 80036f0:	f7fe fbf6 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 80036f4:	2200      	movs	r2, #0
 80036f6:	2101      	movs	r1, #1
 80036f8:	4821      	ldr	r0, [pc, #132]	; (8003780 <MX_TIM3_Init+0x11c>)
 80036fa:	f7fe fc3b 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 80036fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003702:	2110      	movs	r1, #16
 8003704:	481e      	ldr	r0, [pc, #120]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003706:	f7fe fb57 	bl	8001db8 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 800370a:	2200      	movs	r2, #0
 800370c:	2110      	movs	r1, #16
 800370e:	481c      	ldr	r0, [pc, #112]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003710:	f7fe fb9c 	bl	8001e4c <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8003714:	2200      	movs	r2, #0
 8003716:	2110      	movs	r1, #16
 8003718:	4819      	ldr	r0, [pc, #100]	; (8003780 <MX_TIM3_Init+0x11c>)
 800371a:	f7fe fbe1 	bl	8001ee0 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 800371e:	2200      	movs	r2, #0
 8003720:	2110      	movs	r1, #16
 8003722:	4817      	ldr	r0, [pc, #92]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003724:	f7fe fc26 	bl	8001f74 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800372c:	2300      	movs	r3, #0
 800372e:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8003730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003734:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800373a:	f107 0314 	add.w	r3, r7, #20
 800373e:	4619      	mov	r1, r3
 8003740:	480f      	ldr	r0, [pc, #60]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003742:	f001 fa25 	bl	8004b90 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003746:	480e      	ldr	r0, [pc, #56]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003748:	f7fe fa53 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800374c:	2100      	movs	r1, #0
 800374e:	480c      	ldr	r0, [pc, #48]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003750:	f7fe fc78 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003754:	480a      	ldr	r0, [pc, #40]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003756:	f7fe fc87 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3,0);
 800375a:	2100      	movs	r1, #0
 800375c:	4808      	ldr	r0, [pc, #32]	; (8003780 <MX_TIM3_Init+0x11c>)
 800375e:	f7fe fa57 	bl	8001c10 <LL_TIM_SetCounter>
   LL_TIM_EnableCounter(TIM3);
 8003762:	4807      	ldr	r0, [pc, #28]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003764:	f7fe fa36 	bl	8001bd4 <LL_TIM_EnableCounter>
   LL_TIM_ClearFlag_UPDATE(TIM3);
 8003768:	4805      	ldr	r0, [pc, #20]	; (8003780 <MX_TIM3_Init+0x11c>)
 800376a:	f7fe fc9b 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>
   LL_TIM_EnableIT_UPDATE(TIM3);
 800376e:	4804      	ldr	r0, [pc, #16]	; (8003780 <MX_TIM3_Init+0x11c>)
 8003770:	f7fe fcbf 	bl	80020f2 <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40010c00 	.word	0x40010c00
 8003780:	40000400 	.word	0x40000400

08003784 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08e      	sub	sp, #56	; 0x38
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800378a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	2220      	movs	r2, #32
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fdcf 	bl	8005344 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 80037a6:	2004      	movs	r0, #4
 80037a8:	f7fe f9c4 	bl	8001b34 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80037ac:	f7fd fde0 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fe2e 	bl	8001418 <NVIC_EncodePriority>
 80037bc:	4603      	mov	r3, r0
 80037be:	4619      	mov	r1, r3
 80037c0:	201e      	movs	r0, #30
 80037c2:	f7fd fdff 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 80037c6:	201e      	movs	r0, #30
 80037c8:	f7fd fde0 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 24;
 80037cc:	2318      	movs	r3, #24
 80037ce:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80037d0:	2300      	movs	r3, #0
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 60000;
 80037d4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80037da:	2300      	movs	r3, #0
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80037de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e2:	4619      	mov	r1, r3
 80037e4:	482d      	ldr	r0, [pc, #180]	; (800389c <MX_TIM4_Init+0x118>)
 80037e6:	f001 f9d3 	bl	8004b90 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80037ea:	482c      	ldr	r0, [pc, #176]	; (800389c <MX_TIM4_Init+0x118>)
 80037ec:	f7fe fa01 	bl	8001bf2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80037f0:	2100      	movs	r1, #0
 80037f2:	482a      	ldr	r0, [pc, #168]	; (800389c <MX_TIM4_Init+0x118>)
 80037f4:	f7fe fc00 	bl	8001ff8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 80037f8:	2101      	movs	r1, #1
 80037fa:	4828      	ldr	r0, [pc, #160]	; (800389c <MX_TIM4_Init+0x118>)
 80037fc:	f7fe fa58 	bl	8001cb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003800:	2360      	movs	r3, #96	; 0x60
 8003802:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 4500;
 800380c:	f241 1394 	movw	r3, #4500	; 0x1194
 8003810:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	461a      	mov	r2, r3
 800381a:	2101      	movs	r1, #1
 800381c:	481f      	ldr	r0, [pc, #124]	; (800389c <MX_TIM4_Init+0x118>)
 800381e:	f001 fa15 	bl	8004c4c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 8003822:	2101      	movs	r1, #1
 8003824:	481d      	ldr	r0, [pc, #116]	; (800389c <MX_TIM4_Init+0x118>)
 8003826:	f7fe fa01 	bl	8001c2c <LL_TIM_OC_DisableFast>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	461a      	mov	r2, r3
 800383a:	2110      	movs	r1, #16
 800383c:	4817      	ldr	r0, [pc, #92]	; (800389c <MX_TIM4_Init+0x118>)
 800383e:	f001 fa05 	bl	8004c4c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 8003842:	2110      	movs	r1, #16
 8003844:	4815      	ldr	r0, [pc, #84]	; (800389c <MX_TIM4_Init+0x118>)
 8003846:	f7fe f9f1 	bl	8001c2c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 800384a:	2100      	movs	r1, #0
 800384c:	4813      	ldr	r0, [pc, #76]	; (800389c <MX_TIM4_Init+0x118>)
 800384e:	f7fe fbf9 	bl	8002044 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003852:	4812      	ldr	r0, [pc, #72]	; (800389c <MX_TIM4_Init+0x118>)
 8003854:	f7fe fc08 	bl	8002068 <LL_TIM_DisableMasterSlaveMode>
  LL_TIM_OC_DisablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8003858:	2101      	movs	r1, #1
 800385a:	4810      	ldr	r0, [pc, #64]	; (800389c <MX_TIM4_Init+0x118>)
 800385c:	f7fe fa6a 	bl	8001d34 <LL_TIM_OC_DisablePreload>
  /* USER CODE BEGIN TIM4_Init 2 */

  LL_TIM_EnableIT_UPDATE(TIM4);
 8003860:	480e      	ldr	r0, [pc, #56]	; (800389c <MX_TIM4_Init+0x118>)
 8003862:	f7fe fc46 	bl	80020f2 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM4);
 8003866:	480d      	ldr	r0, [pc, #52]	; (800389c <MX_TIM4_Init+0x118>)
 8003868:	f7fe fc1c 	bl	80020a4 <LL_TIM_ClearFlag_UPDATE>

  LL_TIM_EnableIT_CC1(TIM4);
 800386c:	480b      	ldr	r0, [pc, #44]	; (800389c <MX_TIM4_Init+0x118>)
 800386e:	f7fe fc4f 	bl	8002110 <LL_TIM_EnableIT_CC1>
  LL_TIM_ClearFlag_CC1(TIM4);
 8003872:	480a      	ldr	r0, [pc, #40]	; (800389c <MX_TIM4_Init+0x118>)
 8003874:	f7fe fc23 	bl	80020be <LL_TIM_ClearFlag_CC1>
//
  LL_TIM_EnableIT_CC2(TIM4);
 8003878:	4808      	ldr	r0, [pc, #32]	; (800389c <MX_TIM4_Init+0x118>)
 800387a:	f7fe fc58 	bl	800212e <LL_TIM_EnableIT_CC2>
  LL_TIM_ClearFlag_CC2(TIM4);
 800387e:	4807      	ldr	r0, [pc, #28]	; (800389c <MX_TIM4_Init+0x118>)
 8003880:	f7fe fc2a 	bl	80020d8 <LL_TIM_ClearFlag_CC2>


  LL_TIM_SetCounter(TIM4,0);
 8003884:	2100      	movs	r1, #0
 8003886:	4805      	ldr	r0, [pc, #20]	; (800389c <MX_TIM4_Init+0x118>)
 8003888:	f7fe f9c2 	bl	8001c10 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM4);
 800388c:	4803      	ldr	r0, [pc, #12]	; (800389c <MX_TIM4_Init+0x118>)
 800388e:	f7fe f9a1 	bl	8001bd4 <LL_TIM_EnableCounter>


  /* USER CODE END TIM4_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	3738      	adds	r7, #56	; 0x38
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40000800 	.word	0x40000800

080038a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	; 0x30
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]
 80038b6:	615a      	str	r2, [r3, #20]
 80038b8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ba:	463b      	mov	r3, r7
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80038c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038cc:	f7fe f94a 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80038d0:	2008      	movs	r0, #8
 80038d2:	f7fe f947 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80038d6:	f244 0340 	movw	r3, #16448	; 0x4040
 80038da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80038dc:	2309      	movs	r3, #9
 80038de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80038e0:	2303      	movs	r3, #3
 80038e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e8:	463b      	mov	r3, r7
 80038ea:	4619      	mov	r1, r3
 80038ec:	481f      	ldr	r0, [pc, #124]	; (800396c <MX_USART1_UART_Init+0xcc>)
 80038ee:	f000 fe5b 	bl	80045a8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80038f2:	f248 0380 	movw	r3, #32896	; 0x8080
 80038f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80038f8:	2304      	movs	r3, #4
 80038fa:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fc:	463b      	mov	r3, r7
 80038fe:	4619      	mov	r1, r3
 8003900:	481a      	ldr	r0, [pc, #104]	; (800396c <MX_USART1_UART_Init+0xcc>)
 8003902:	f000 fe51 	bl	80045a8 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8003906:	f7fe fcb7 	bl	8002278 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 800390a:	f7fd fd31 	bl	8001370 <__NVIC_GetPriorityGrouping>
 800390e:	4603      	mov	r3, r0
 8003910:	2200      	movs	r2, #0
 8003912:	2102      	movs	r1, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fd7f 	bl	8001418 <NVIC_EncodePriority>
 800391a:	4603      	mov	r3, r0
 800391c:	4619      	mov	r1, r3
 800391e:	2025      	movs	r0, #37	; 0x25
 8003920:	f7fd fd50 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003924:	2025      	movs	r0, #37	; 0x25
 8003926:	f7fd fd31 	bl	800138c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800392a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800392e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8003930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003934:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800393a:	2300      	movs	r3, #0
 800393c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800393e:	230c      	movs	r3, #12
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003942:	2300      	movs	r3, #0
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003946:	2300      	movs	r3, #0
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	4619      	mov	r1, r3
 8003950:	4807      	ldr	r0, [pc, #28]	; (8003970 <MX_USART1_UART_Init+0xd0>)
 8003952:	f001 fc1d 	bl	8005190 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003956:	4806      	ldr	r0, [pc, #24]	; (8003970 <MX_USART1_UART_Init+0xd0>)
 8003958:	f7fe fc07 	bl	800216a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800395c:	4804      	ldr	r0, [pc, #16]	; (8003970 <MX_USART1_UART_Init+0xd0>)
 800395e:	f7fe fbf5 	bl	800214c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003962:	bf00      	nop
 8003964:	3730      	adds	r7, #48	; 0x30
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40010c00 	.word	0x40010c00
 8003970:	40013800 	.word	0x40013800

08003974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003978:	2001      	movs	r0, #1
 800397a:	f7fe f8c3 	bl	8001b04 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800397e:	f7fd fcf7 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8003982:	4603      	mov	r3, r0
 8003984:	2200      	movs	r2, #0
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f7fd fd45 	bl	8001418 <NVIC_EncodePriority>
 800398e:	4603      	mov	r3, r0
 8003990:	4619      	mov	r1, r3
 8003992:	200b      	movs	r0, #11
 8003994:	f7fd fd16 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003998:	200b      	movs	r0, #11
 800399a:	f7fd fcf7 	bl	800138c <__NVIC_EnableIRQ>

}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80039aa:	f107 0318 	add.w	r3, r7, #24
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	1d3b      	adds	r3, r7, #4
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	60da      	str	r2, [r3, #12]
 80039c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80039c2:	2010      	movs	r0, #16
 80039c4:	f7fe f8ce 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80039c8:	2020      	movs	r0, #32
 80039ca:	f7fe f8cb 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80039ce:	2004      	movs	r0, #4
 80039d0:	f7fe f8c8 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80039d4:	2008      	movs	r0, #8
 80039d6:	f7fe f8c5 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80039da:	494c      	ldr	r1, [pc, #304]	; (8003b0c <MX_GPIO_Init+0x168>)
 80039dc:	484c      	ldr	r0, [pc, #304]	; (8003b10 <MX_GPIO_Init+0x16c>)
 80039de:	f7fe fc2b 	bl	8002238 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80039e2:	494c      	ldr	r1, [pc, #304]	; (8003b14 <MX_GPIO_Init+0x170>)
 80039e4:	484c      	ldr	r0, [pc, #304]	; (8003b18 <MX_GPIO_Init+0x174>)
 80039e6:	f7fe fc27 	bl	8002238 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 80039ea:	494c      	ldr	r1, [pc, #304]	; (8003b1c <MX_GPIO_Init+0x178>)
 80039ec:	484c      	ldr	r0, [pc, #304]	; (8003b20 <MX_GPIO_Init+0x17c>)
 80039ee:	f7fe fc23 	bl	8002238 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80039f2:	4b46      	ldr	r3, [pc, #280]	; (8003b0c <MX_GPIO_Init+0x168>)
 80039f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80039f6:	2301      	movs	r3, #1
 80039f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80039fa:	2302      	movs	r3, #2
 80039fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4842      	ldr	r0, [pc, #264]	; (8003b10 <MX_GPIO_Init+0x16c>)
 8003a08:	f000 fdce 	bl	80045a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003a0c:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <MX_GPIO_Init+0x170>)
 8003a0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a10:	2301      	movs	r3, #1
 8003a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	483d      	ldr	r0, [pc, #244]	; (8003b18 <MX_GPIO_Init+0x174>)
 8003a22:	f000 fdc1 	bl	80045a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <MX_GPIO_Init+0x180>)
 8003a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4839      	ldr	r0, [pc, #228]	; (8003b20 <MX_GPIO_Init+0x17c>)
 8003a3c:	f000 fdb4 	bl	80045a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003a40:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <MX_GPIO_Init+0x184>)
 8003a42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003a44:	2301      	movs	r3, #1
 8003a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	4832      	ldr	r0, [pc, #200]	; (8003b20 <MX_GPIO_Init+0x17c>)
 8003a56:	f000 fda7 	bl	80045a8 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 8003a5a:	4934      	ldr	r1, [pc, #208]	; (8003b2c <MX_GPIO_Init+0x188>)
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	f7fe fc53 	bl	8002308 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 8003a62:	4933      	ldr	r1, [pc, #204]	; (8003b30 <MX_GPIO_Init+0x18c>)
 8003a64:	2001      	movs	r0, #1
 8003a66:	f7fe fc4f 	bl	8002308 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 8003a6a:	4932      	ldr	r1, [pc, #200]	; (8003b34 <MX_GPIO_Init+0x190>)
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7fe fc4b 	bl	8002308 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8003a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a76:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003a80:	2301      	movs	r3, #1
 8003a82:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003a84:	f107 0318 	add.w	r3, r7, #24
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fc59 	bl	8004340 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8003a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a92:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003aa0:	f107 0318 	add.w	r3, r7, #24
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fc4b 	bl	8004340 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8003aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aae:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003abc:	f107 0318 	add.w	r3, r7, #24
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fc3d 	bl	8004340 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	491b      	ldr	r1, [pc, #108]	; (8003b38 <MX_GPIO_Init+0x194>)
 8003aca:	4813      	ldr	r0, [pc, #76]	; (8003b18 <MX_GPIO_Init+0x174>)
 8003acc:	f7fe fb82 	bl	80021d4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	490e      	ldr	r1, [pc, #56]	; (8003b0c <MX_GPIO_Init+0x168>)
 8003ad4:	4810      	ldr	r0, [pc, #64]	; (8003b18 <MX_GPIO_Init+0x174>)
 8003ad6:	f7fe fb7d 	bl	80021d4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8003ada:	2204      	movs	r2, #4
 8003adc:	4917      	ldr	r1, [pc, #92]	; (8003b3c <MX_GPIO_Init+0x198>)
 8003ade:	480e      	ldr	r0, [pc, #56]	; (8003b18 <MX_GPIO_Init+0x174>)
 8003ae0:	f7fe fb78 	bl	80021d4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003ae4:	f7fd fc44 	bl	8001370 <__NVIC_GetPriorityGrouping>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2200      	movs	r2, #0
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fc92 	bl	8001418 <NVIC_EncodePriority>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4619      	mov	r1, r3
 8003af8:	2028      	movs	r0, #40	; 0x28
 8003afa:	f7fd fc63 	bl	80013c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003afe:	2028      	movs	r0, #40	; 0x28
 8003b00:	f7fd fc44 	bl	800138c <__NVIC_EnableIRQ>

}
 8003b04:	bf00      	nop
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	04200020 	.word	0x04200020
 8003b10:	40011000 	.word	0x40011000
 8003b14:	04800080 	.word	0x04800080
 8003b18:	40010c00 	.word	0x40010c00
 8003b1c:	040a000a 	.word	0x040a000a
 8003b20:	40010800 	.word	0x40010800
 8003b24:	04020002 	.word	0x04020002
 8003b28:	04080008 	.word	0x04080008
 8003b2c:	000f0003 	.word	0x000f0003
 8003b30:	00f00003 	.word	0x00f00003
 8003b34:	0f000003 	.word	0x0f000003
 8003b38:	04100010 	.word	0x04100010
 8003b3c:	04400040 	.word	0x04400040

08003b40 <Sensor_Convert_A2D>:
	 {
		 Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i])/2;
	 }
}
void Sensor_Convert_A2D()
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; ++i)
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	e01c      	b.n	8003b86 <Sensor_Convert_A2D+0x46>
	  {
		  if(Sensor_ADC_Value[i] < Sensor_Threshold[i])
 8003b4c:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <Sensor_Convert_A2D+0x58>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	4911      	ldr	r1, [pc, #68]	; (8003b9c <Sensor_Convert_A2D+0x5c>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d20e      	bcs.n	8003b80 <Sensor_Convert_A2D+0x40>
		  {
			  sbi(LineDetect, (7-i));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f1c3 0307 	rsb	r3, r3, #7
 8003b68:	2201      	movs	r2, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	b25a      	sxtb	r2, r3
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <Sensor_Convert_A2D+0x60>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b25b      	sxtb	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <Sensor_Convert_A2D+0x60>)
 8003b7e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; ++i)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3301      	adds	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b07      	cmp	r3, #7
 8003b8a:	dddf      	ble.n	8003b4c <Sensor_Convert_A2D+0xc>
//			  printf("0 ");
		  }
	  };
//	printf("\n");
//	LL_mDelay(500);
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000220 	.word	0x20000220
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000206 	.word	0x20000206

08003ba4 <Sensor_Print_LineDetect>:
  printf("\n");

}

void Sensor_Print_LineDetect()
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
//	if(PrevLine != LineDetect)
//	{
		char buffer[8];
		itoa (LineDetect,buffer,2);
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <Sensor_Print_LineDetect+0x30>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f001 fbc3 	bl	8005340 <itoa>
		printf ("binary: %s\n",buffer);
 8003bba:	463b      	mov	r3, r7
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4806      	ldr	r0, [pc, #24]	; (8003bd8 <Sensor_Print_LineDetect+0x34>)
 8003bc0:	f002 f818 	bl	8005bf4 <iprintf>
		PrevLine = LineDetect;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <Sensor_Print_LineDetect+0x30>)
 8003bc6:	781a      	ldrb	r2, [r3, #0]
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <Sensor_Print_LineDetect+0x38>)
 8003bca:	701a      	strb	r2, [r3, #0]
//	}

}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000206 	.word	0x20000206
 8003bd8:	08007c20 	.word	0x08007c20
 8003bdc:	20000205 	.word	0x20000205

08003be0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010400 	.word	0x40010400

08003c0c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003c14:	4a03      	ldr	r2, [pc, #12]	; (8003c24 <LL_EXTI_ClearFlag_0_31+0x18>)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6153      	str	r3, [r2, #20]
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	40010400 	.word	0x40010400

08003c28 <LL_TIM_ClearFlag_UPDATE>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f06f 0201 	mvn.w	r2, #1
 8003c36:	611a      	str	r2, [r3, #16]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <LL_TIM_ClearFlag_CC1>:
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f06f 0202 	mvn.w	r2, #2
 8003c74:	611a      	str	r2, [r3, #16]
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <LL_TIM_IsActiveFlag_CC1>:
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d101      	bne.n	8003c98 <LL_TIM_IsActiveFlag_CC1+0x18>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <LL_TIM_IsActiveFlag_CC1+0x1a>
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <LL_TIM_ClearFlag_CC2>:
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f06f 0204 	mvn.w	r2, #4
 8003cb2:	611a      	str	r2, [r3, #16]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <LL_TIM_IsActiveFlag_CC2>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d101      	bne.n	8003cd6 <LL_TIM_IsActiveFlag_CC2+0x18>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <LL_GPIO_SetOutputPin>:
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	611a      	str	r2, [r3, #16]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <LL_GPIO_ResetOutputPin>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	615a      	str	r2, [r3, #20]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2e:	e7fe      	b.n	8003d2e <HardFault_Handler+0x4>

08003d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <MemManage_Handler+0x4>

08003d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d3a:	e7fe      	b.n	8003d3a <BusFault_Handler+0x4>

08003d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d40:	e7fe      	b.n	8003d40 <UsageFault_Handler+0x4>

08003d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	4770      	bx	lr

08003d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
	...

08003d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <SysTick_Handler+0x18>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <SysTick_Handler+0x18>)
 8003d74:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	2000020c 	.word	0x2000020c

08003d84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d88:	bf00      	nop
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 8003d94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003d98:	f7ff ff46 	bl	8003c28 <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d9c:	bf00      	nop
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <TIM3_IRQHandler+0x10>)
 8003da6:	f7ff ff3f 	bl	8003c28 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40000400 	.word	0x40000400

08003db4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(LL_TIM_IsActiveFlag_CC1(TIM4))
 8003dba:	4819      	ldr	r0, [pc, #100]	; (8003e20 <TIM4_IRQHandler+0x6c>)
 8003dbc:	f7ff ff60 	bl	8003c80 <LL_TIM_IsActiveFlag_CC1>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <TIM4_IRQHandler+0x20>
	{
		LL_TIM_ClearFlag_CC1(TIM4);
 8003dc6:	4816      	ldr	r0, [pc, #88]	; (8003e20 <TIM4_IRQHandler+0x6c>)
 8003dc8:	f7ff ff4d 	bl	8003c66 <LL_TIM_ClearFlag_CC1>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003dcc:	4915      	ldr	r1, [pc, #84]	; (8003e24 <TIM4_IRQHandler+0x70>)
 8003dce:	4816      	ldr	r0, [pc, #88]	; (8003e28 <TIM4_IRQHandler+0x74>)
 8003dd0:	f7ff ff96 	bl	8003d00 <LL_GPIO_ResetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 8003dd4:	4812      	ldr	r0, [pc, #72]	; (8003e20 <TIM4_IRQHandler+0x6c>)
 8003dd6:	f7ff ff34 	bl	8003c42 <LL_TIM_IsActiveFlag_UPDATE>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <TIM4_IRQHandler+0x3a>
	{
		LL_TIM_ClearFlag_UPDATE(TIM4);
 8003de0:	480f      	ldr	r0, [pc, #60]	; (8003e20 <TIM4_IRQHandler+0x6c>)
 8003de2:	f7ff ff21 	bl	8003c28 <LL_TIM_ClearFlag_UPDATE>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003de6:	490f      	ldr	r1, [pc, #60]	; (8003e24 <TIM4_IRQHandler+0x70>)
 8003de8:	480f      	ldr	r0, [pc, #60]	; (8003e28 <TIM4_IRQHandler+0x74>)
 8003dea:	f7ff ff7a 	bl	8003ce2 <LL_GPIO_SetOutputPin>
	}
	if(LL_TIM_IsActiveFlag_CC2(TIM4))
 8003dee:	480c      	ldr	r0, [pc, #48]	; (8003e20 <TIM4_IRQHandler+0x6c>)
 8003df0:	f7ff ff65 	bl	8003cbe <LL_TIM_IsActiveFlag_CC2>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00e      	beq.n	8003e18 <TIM4_IRQHandler+0x64>
	{
//		LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_13);
		uint16_t newCPR = TIM4->CNT + AddCPRTime - 1;
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <TIM4_IRQHandler+0x6c>)
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <TIM4_IRQHandler+0x78>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	4413      	add	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	80fb      	strh	r3, [r7, #6]
		TIM4->CCR2 = newCPR;
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <TIM4_IRQHandler+0x6c>)
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	6393      	str	r3, [r2, #56]	; 0x38
		LL_TIM_ClearFlag_CC2(TIM4);
 8003e12:	4803      	ldr	r0, [pc, #12]	; (8003e20 <TIM4_IRQHandler+0x6c>)
 8003e14:	f7ff ff46 	bl	8003ca4 <LL_TIM_ClearFlag_CC2>
	}
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40000800 	.word	0x40000800
 8003e24:	04080008 	.word	0x04080008
 8003e28:	40010800 	.word	0x40010800
 8003e2c:	20000210 	.word	0x20000210

08003e30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8003e40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e44:	f7ff fecc 	bl	8003be0 <LL_EXTI_IsActiveFlag_0_31>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <EXTI15_10_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8003e4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003e52:	f7ff fedb 	bl	8003c0c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
//    printf("Hello");
    GetThreshold_Flag = 1;
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <EXTI15_10_IRQHandler+0x5c>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8003e5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e60:	f7ff febe 	bl	8003be0 <LL_EXTI_IsActiveFlag_0_31>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d006      	beq.n	8003e78 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8003e6a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003e6e:	f7ff fecd 	bl	8003c0c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    BTN2_Flag = 1;
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <EXTI15_10_IRQHandler+0x60>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003e78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e7c:	f7ff feb0 	bl	8003be0 <LL_EXTI_IsActiveFlag_0_31>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <EXTI15_10_IRQHandler+0x58>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8003e86:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003e8a:	f7ff febf 	bl	8003c0c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    BTN3_Flag = 1;
 8003e8e:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <EXTI15_10_IRQHandler+0x64>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e94:	bf00      	nop
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000204 	.word	0x20000204
 8003e9c:	20000212 	.word	0x20000212
 8003ea0:	20000213 	.word	0x20000213

08003ea4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e00a      	b.n	8003ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003eb6:	f3af 8000 	nop.w
 8003eba:	4601      	mov	r1, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	60ba      	str	r2, [r7, #8]
 8003ec2:	b2ca      	uxtb	r2, r1
 8003ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	dbf0      	blt.n	8003eb6 <_read+0x12>
	}

return len;
 8003ed4:	687b      	ldr	r3, [r7, #4]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e009      	b.n	8003f04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	60ba      	str	r2, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fa33 	bl	8002364 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	3301      	adds	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	dbf1      	blt.n	8003ef0 <_write+0x12>
	}
	return len;
 8003f0c:	687b      	ldr	r3, [r7, #4]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <_close>:

int _close(int file)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f3c:	605a      	str	r2, [r3, #4]
	return 0;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <_isatty>:

int _isatty(int file)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
	return 1;
 8003f52:	2301      	movs	r3, #1
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
	return 0;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
	...

08003f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <_sbrk+0x5c>)
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <_sbrk+0x60>)
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <_sbrk+0x64>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <_sbrk+0x64>)
 8003f96:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <_sbrk+0x68>)
 8003f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <_sbrk+0x64>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d207      	bcs.n	8003fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fa8:	f001 f988 	bl	80052bc <__errno>
 8003fac:	4602      	mov	r2, r0
 8003fae:	230c      	movs	r3, #12
 8003fb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	e009      	b.n	8003fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <_sbrk+0x64>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <_sbrk+0x64>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <_sbrk+0x64>)
 8003fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fca:	68fb      	ldr	r3, [r7, #12]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20005000 	.word	0x20005000
 8003fd8:	00000400 	.word	0x00000400
 8003fdc:	20000214 	.word	0x20000214
 8003fe0:	20000238 	.word	0x20000238

08003fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <SystemInit+0x5c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <SystemInit+0x5c>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003ff4:	4b12      	ldr	r3, [pc, #72]	; (8004040 <SystemInit+0x5c>)
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4911      	ldr	r1, [pc, #68]	; (8004040 <SystemInit+0x5c>)
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <SystemInit+0x60>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <SystemInit+0x5c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <SystemInit+0x5c>)
 8004006:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <SystemInit+0x5c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <SystemInit+0x5c>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <SystemInit+0x5c>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a07      	ldr	r2, [pc, #28]	; (8004040 <SystemInit+0x5c>)
 8004022:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004026:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <SystemInit+0x5c>)
 800402a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800402e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <SystemInit+0x64>)
 8004032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004036:	609a      	str	r2, [r3, #8]
#endif 
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	40021000 	.word	0x40021000
 8004044:	f8ff0000 	.word	0xf8ff0000
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800404c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800404e:	e003      	b.n	8004058 <LoopCopyDataInit>

08004050 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004052:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004054:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004056:	3104      	adds	r1, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004058:	480a      	ldr	r0, [pc, #40]	; (8004084 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800405c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800405e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004060:	d3f6      	bcc.n	8004050 <CopyDataInit>
  ldr r2, =_sbss
 8004062:	4a0a      	ldr	r2, [pc, #40]	; (800408c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004064:	e002      	b.n	800406c <LoopFillZerobss>

08004066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004066:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004068:	f842 3b04 	str.w	r3, [r2], #4

0800406c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800406e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004070:	d3f9      	bcc.n	8004066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004072:	f7ff ffb7 	bl	8003fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004076:	f001 f927 	bl	80052c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800407a:	f7fe f98d 	bl	8002398 <main>
  bx lr
 800407e:	4770      	bx	lr
  ldr r3, =_sidata
 8004080:	08007f58 	.word	0x08007f58
  ldr r0, =_sdata
 8004084:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004088:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 800408c:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8004090:	20000234 	.word	0x20000234

08004094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004094:	e7fe      	b.n	8004094 <ADC1_2_IRQHandler>

08004096 <LL_ADC_REG_SetSequencerLength>:
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <LL_ADC_IsEnabled>:
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	bf0c      	ite	eq
 80040ce:	2301      	moveq	r3, #1
 80040d0:	2300      	movne	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
	...

080040e0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80040ee:	4813      	ldr	r0, [pc, #76]	; (800413c <LL_ADC_CommonInit+0x5c>)
 80040f0:	f7ff ffe3 	bl	80040ba <LL_ADC_IsEnabled>
 80040f4:	4604      	mov	r4, r0
 80040f6:	4812      	ldr	r0, [pc, #72]	; (8004140 <LL_ADC_CommonInit+0x60>)
 80040f8:	f7ff ffdf 	bl	80040ba <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4323      	orrs	r3, r4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d114      	bne.n	800412e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	e008      	b.n	8004132 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	605a      	str	r2, [r3, #4]
 800412c:	e001      	b.n	8004132 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}
 800413c:	40012400 	.word	0x40012400
 8004140:	40012800 	.word	0x40012800

08004144 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff ffb1 	bl	80040ba <LL_ADC_IsEnabled>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d112      	bne.n	8004184 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	e001      	b.n	8004188 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff8a 	bl	80040ba <LL_ADC_IsEnabled>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d131      	bne.n	8004210 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	430b      	orrs	r3, r1
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	e008      	b.n	80041e0 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80041e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	6811      	ldr	r1, [r2, #0]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	68d2      	ldr	r2, [r2, #12]
 80041f4:	4311      	orrs	r1, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	6912      	ldr	r2, [r2, #16]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4619      	mov	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff44 	bl	8004096 <LL_ADC_REG_SetSequencerLength>
 800420e:	e001      	b.n	8004214 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <LL_EXTI_EnableIT_0_31>:
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <LL_EXTI_EnableIT_0_31+0x20>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4904      	ldr	r1, [pc, #16]	; (8004240 <LL_EXTI_EnableIT_0_31+0x20>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4313      	orrs	r3, r2
 8004232:	600b      	str	r3, [r1, #0]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010400 	.word	0x40010400

08004244 <LL_EXTI_DisableIT_0_31>:
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <LL_EXTI_DisableIT_0_31+0x20>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	43db      	mvns	r3, r3
 8004254:	4903      	ldr	r1, [pc, #12]	; (8004264 <LL_EXTI_DisableIT_0_31+0x20>)
 8004256:	4013      	ands	r3, r2
 8004258:	600b      	str	r3, [r1, #0]
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	40010400 	.word	0x40010400

08004268 <LL_EXTI_EnableEvent_0_31>:
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004270:	4b05      	ldr	r3, [pc, #20]	; (8004288 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	4904      	ldr	r1, [pc, #16]	; (8004288 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010400 	.word	0x40010400

0800428c <LL_EXTI_DisableEvent_0_31>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <LL_EXTI_DisableEvent_0_31+0x20>)
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	43db      	mvns	r3, r3
 800429c:	4903      	ldr	r1, [pc, #12]	; (80042ac <LL_EXTI_DisableEvent_0_31+0x20>)
 800429e:	4013      	ands	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	40010400 	.word	0x40010400

080042b0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	4904      	ldr	r1, [pc, #16]	; (80042d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40010400 	.word	0x40010400

080042d4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	43db      	mvns	r3, r3
 80042e4:	4903      	ldr	r1, [pc, #12]	; (80042f4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	40010400 	.word	0x40010400

080042f8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	4904      	ldr	r1, [pc, #16]	; (8004318 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4313      	orrs	r3, r2
 800430a:	60cb      	str	r3, [r1, #12]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40010400 	.word	0x40010400

0800431c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	43db      	mvns	r3, r3
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800432e:	4013      	ands	r3, r2
 8004330:	60cb      	str	r3, [r1, #12]
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	40010400 	.word	0x40010400

08004340 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	791b      	ldrb	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d060      	beq.n	8004416 <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d067      	beq.n	800442c <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	795b      	ldrb	r3, [r3, #5]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d00e      	beq.n	8004382 <LL_EXTI_Init+0x42>
 8004364:	2b02      	cmp	r3, #2
 8004366:	d017      	beq.n	8004398 <LL_EXTI_Init+0x58>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d120      	bne.n	80043ae <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff ff8b 	bl	800428c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff50 	bl	8004220 <LL_EXTI_EnableIT_0_31>
          break;
 8004380:	e018      	b.n	80043b4 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff ff5c 	bl	8004244 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff69 	bl	8004268 <LL_EXTI_EnableEvent_0_31>
          break;
 8004396:	e00d      	b.n	80043b4 <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff ff3f 	bl	8004220 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff ff5e 	bl	8004268 <LL_EXTI_EnableEvent_0_31>
          break;
 80043ac:	e002      	b.n	80043b4 <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
          break;
 80043b2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	799b      	ldrb	r3, [r3, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d037      	beq.n	800442c <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	799b      	ldrb	r3, [r3, #6]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d00e      	beq.n	80043e2 <LL_EXTI_Init+0xa2>
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d017      	beq.n	80043f8 <LL_EXTI_Init+0xb8>
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d120      	bne.n	800440e <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ffa3 	bl	800431c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff ff68 	bl	80042b0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80043e0:	e025      	b.n	800442e <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff74 	bl	80042d4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ff81 	bl	80042f8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80043f6:	e01a      	b.n	800442e <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff57 	bl	80042b0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff ff76 	bl	80042f8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800440c:	e00f      	b.n	800442e <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
            break;
 8004412:	bf00      	nop
 8004414:	e00b      	b.n	800442e <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff12 	bl	8004244 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff ff31 	bl	800428c <LL_EXTI_DisableEvent_0_31>
 800442a:	e000      	b.n	800442e <LL_EXTI_Init+0xee>
      }
 800442c:	bf00      	nop
  }
  return status;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <LL_GPIO_SetPinMode>:
{
 8004438:	b490      	push	{r4, r7}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	461a      	mov	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	0e1b      	lsrs	r3, r3, #24
 800444c:	4413      	add	r3, r2
 800444e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	613b      	str	r3, [r7, #16]
  return result;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	210f      	movs	r1, #15
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	401a      	ands	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	61bb      	str	r3, [r7, #24]
  return result;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	fab3 f383 	clz	r3, r3
 8004484:	b2db      	uxtb	r3, r3
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	6023      	str	r3, [r4, #0]
}
 8004492:	bf00      	nop
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bc90      	pop	{r4, r7}
 800449a:	4770      	bx	lr

0800449c <LL_GPIO_SetPinSpeed>:
{
 800449c:	b490      	push	{r4, r7}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	0e1b      	lsrs	r3, r3, #24
 80044b0:	4413      	add	r3, r2
 80044b2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80044b4:	6822      	ldr	r2, [r4, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	613b      	str	r3, [r7, #16]
  return result;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	2103      	movs	r1, #3
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	401a      	ands	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	61bb      	str	r3, [r7, #24]
  return result;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	fab3 f383 	clz	r3, r3
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	fa01 f303 	lsl.w	r3, r1, r3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	6023      	str	r3, [r4, #0]
}
 80044f6:	bf00      	nop
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc90      	pop	{r4, r7}
 80044fe:	4770      	bx	lr

08004500 <LL_GPIO_SetPinOutputType>:
{
 8004500:	b490      	push	{r4, r7}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	461a      	mov	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	0e1b      	lsrs	r3, r3, #24
 8004514:	4413      	add	r3, r2
 8004516:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	613b      	str	r3, [r7, #16]
  return result;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	2104      	movs	r1, #4
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	401a      	ands	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	61bb      	str	r3, [r7, #24]
  return result;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	4313      	orrs	r3, r2
 8004558:	6023      	str	r3, [r4, #0]
}
 800455a:	bf00      	nop
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	bc90      	pop	{r4, r7}
 8004562:	4770      	bx	lr

08004564 <LL_GPIO_SetPinPull>:
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0a1b      	lsrs	r3, r3, #8
 8004578:	43db      	mvns	r3, r3
 800457a:	401a      	ands	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	613b      	str	r3, [r7, #16]
  return result;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	408b      	lsls	r3, r1
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	60da      	str	r2, [r3, #12]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	60fb      	str	r3, [r7, #12]
  return result;
 80045c8:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80045d2:	e040      	b.n	8004656 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80045d4:	2201      	movs	r2, #1
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	409a      	lsls	r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d036      	beq.n	8004650 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b07      	cmp	r3, #7
 80045e6:	d806      	bhi.n	80045f6 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80045e8:	f240 1201 	movw	r2, #257	; 0x101
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	e008      	b.n	8004608 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3b08      	subs	r3, #8
 80045fa:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004606:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	461a      	mov	r2, r3
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff ff11 	bl	8004438 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	461a      	mov	r2, r3
 800461c:	69b9      	ldr	r1, [r7, #24]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ffa0 	bl	8004564 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d003      	beq.n	8004634 <LL_GPIO_Init+0x8c>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b09      	cmp	r3, #9
 8004632:	d10d      	bne.n	8004650 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	461a      	mov	r2, r3
 800463a:	69b9      	ldr	r1, [r7, #24]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff2d 	bl	800449c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ff58 	bl	8004500 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	3301      	adds	r3, #1
 8004654:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1b8      	bne.n	80045d4 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <LL_I2C_Enable>:
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f043 0201 	orr.w	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	601a      	str	r2, [r3, #0]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <LL_I2C_Disable>:
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <LL_I2C_SetOwnAddress1>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr
	...

080046d8 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80046d8:	b490      	push	{r4, r7}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 80046e6:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 80046e8:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	4a3f      	ldr	r2, [pc, #252]	; (80047ec <LL_I2C_ConfigSpeed+0x114>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046fc:	ea44 0203 	orr.w	r2, r4, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4938      	ldr	r1, [pc, #224]	; (80047f0 <LL_I2C_ConfigSpeed+0x118>)
 8004710:	428b      	cmp	r3, r1
 8004712:	d801      	bhi.n	8004718 <LL_I2C_ConfigSpeed+0x40>
 8004714:	1c63      	adds	r3, r4, #1
 8004716:	e008      	b.n	800472a <LL_I2C_ConfigSpeed+0x52>
 8004718:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800471c:	fb03 f304 	mul.w	r3, r3, r4
 8004720:	4934      	ldr	r1, [pc, #208]	; (80047f4 <LL_I2C_ConfigSpeed+0x11c>)
 8004722:	fba1 1303 	umull	r1, r3, r1, r3
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	3301      	adds	r3, #1
 800472a:	431a      	orrs	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <LL_I2C_ConfigSpeed+0x118>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d939      	bls.n	80047ac <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d117      	bne.n	800476e <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4413      	add	r3, r2
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004750:	2b00      	cmp	r3, #0
 8004752:	d009      	beq.n	8004768 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4413      	add	r3, r2
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	e01d      	b.n	80047a4 <LL_I2C_ConfigSpeed+0xcc>
 8004768:	f248 0301 	movw	r3, #32769	; 0x8001
 800476c:	e01a      	b.n	80047a4 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009a      	lsls	r2, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009a      	lsls	r2, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	e001      	b.n	80047a4 <LL_I2C_ConfigSpeed+0xcc>
 80047a0:	f248 0301 	movw	r3, #32769	; 0x8001
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	ea43 0402 	orr.w	r4, r3, r2
 80047aa:	e010      	b.n	80047ce <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d905      	bls.n	80047ca <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	e000      	b.n	80047cc <LL_I2C_ConfigSpeed+0xf4>
 80047ca:	2304      	movs	r3, #4
 80047cc:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80047d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047da:	ea44 0203 	orr.w	r2, r4, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	61da      	str	r2, [r3, #28]
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bc90      	pop	{r4, r7}
 80047ea:	4770      	bx	lr
 80047ec:	431bde83 	.word	0x431bde83
 80047f0:	000186a0 	.word	0x000186a0
 80047f4:	10624dd3 	.word	0x10624dd3

080047f8 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 021a 	bic.w	r2, r3, #26
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ff1d 	bl	800468a <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004850:	f107 0308 	add.w	r3, r7, #8
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f87b 	bl	8004950 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800485a:	6939      	ldr	r1, [r7, #16]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ff37 	bl	80046d8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68d9      	ldr	r1, [r3, #12]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	461a      	mov	r2, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff17 	bl	80046a8 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4619      	mov	r1, r3
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ffb9 	bl	80047f8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff fef0 	bl	800466c <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ffc2 	bl	800481c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <LL_RCC_GetSysClkSource>:
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <LL_RCC_GetSysClkSource+0x14>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 030c 	and.w	r3, r3, #12
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	40021000 	.word	0x40021000

080048bc <LL_RCC_GetAHBPrescaler>:
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80048c0:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <LL_RCC_GetAHBPrescaler+0x14>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	40021000 	.word	0x40021000

080048d4 <LL_RCC_GetAPB1Prescaler>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	40021000 	.word	0x40021000

080048ec <LL_RCC_GetAPB2Prescaler>:
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80048f0:	4b03      	ldr	r3, [pc, #12]	; (8004900 <LL_RCC_GetAPB2Prescaler+0x14>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	40021000 	.word	0x40021000

08004904 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <LL_RCC_PLL_GetMainSource+0x14>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40021000 	.word	0x40021000

0800491c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	40021000 	.word	0x40021000

08004934 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <LL_RCC_PLL_GetPrediv+0x18>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	0c5b      	lsrs	r3, r3, #17
 800493e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004942:	4618      	mov	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000

08004950 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004958:	f000 f820 	bl	800499c <RCC_GetSystemClockFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f83a 	bl	80049e0 <RCC_GetHCLKClockFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f848 	bl	8004a0c <RCC_GetPCLK1ClockFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f854 	bl	8004a34 <RCC_GetPCLK2ClockFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60da      	str	r2, [r3, #12]
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80049a6:	f7ff ff7d 	bl	80048a4 <LL_RCC_GetSysClkSource>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d006      	beq.n	80049be <RCC_GetSystemClockFreq+0x22>
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d007      	beq.n	80049c4 <RCC_GetSystemClockFreq+0x28>
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <RCC_GetSystemClockFreq+0x40>)
 80049ba:	607b      	str	r3, [r7, #4]
      break;
 80049bc:	e009      	b.n	80049d2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <RCC_GetSystemClockFreq+0x40>)
 80049c0:	607b      	str	r3, [r7, #4]
      break;
 80049c2:	e006      	b.n	80049d2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80049c4:	f000 f84a 	bl	8004a5c <RCC_PLL_GetFreqDomain_SYS>
 80049c8:	6078      	str	r0, [r7, #4]
      break;
 80049ca:	e002      	b.n	80049d2 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <RCC_GetSystemClockFreq+0x40>)
 80049ce:	607b      	str	r3, [r7, #4]
      break;
 80049d0:	bf00      	nop
  }

  return frequency;
 80049d2:	687b      	ldr	r3, [r7, #4]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	007a1200 	.word	0x007a1200

080049e0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80049e8:	f7ff ff68 	bl	80048bc <LL_RCC_GetAHBPrescaler>
 80049ec:	4603      	mov	r3, r0
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <RCC_GetHCLKClockFreq+0x28>)
 80049f6:	5cd3      	ldrb	r3, [r2, r3]
 80049f8:	461a      	mov	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	40d3      	lsrs	r3, r2
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	08007c54 	.word	0x08007c54

08004a0c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004a14:	f7ff ff5e 	bl	80048d4 <LL_RCC_GetAPB1Prescaler>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <RCC_GetPCLK1ClockFreq+0x24>)
 8004a1e:	5cd3      	ldrb	r3, [r2, r3]
 8004a20:	461a      	mov	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	40d3      	lsrs	r3, r2
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	08007c64 	.word	0x08007c64

08004a34 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004a3c:	f7ff ff56 	bl	80048ec <LL_RCC_GetAPB2Prescaler>
 8004a40:	4603      	mov	r3, r0
 8004a42:	0adb      	lsrs	r3, r3, #11
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <RCC_GetPCLK2ClockFreq+0x24>)
 8004a46:	5cd3      	ldrb	r3, [r2, r3]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	40d3      	lsrs	r3, r2
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	08007c64 	.word	0x08007c64

08004a5c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	2300      	movs	r3, #0
 8004a68:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004a6a:	f7ff ff4b 	bl	8004904 <LL_RCC_PLL_GetMainSource>
 8004a6e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8004a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7a:	d003      	beq.n	8004a84 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8004a7c:	e00b      	b.n	8004a96 <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004a80:	607b      	str	r3, [r7, #4]
      break;
 8004a82:	e00b      	b.n	8004a9c <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004a84:	f7ff ff56 	bl	8004934 <LL_RCC_PLL_GetPrediv>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	607b      	str	r3, [r7, #4]
      break;
 8004a94:	e002      	b.n	8004a9c <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004a98:	607b      	str	r3, [r7, #4]
      break;
 8004a9a:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004a9c:	f7ff ff3e 	bl	800491c <LL_RCC_PLL_GetMultiplicator>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	0c9b      	lsrs	r3, r3, #18
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	fb02 f303 	mul.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	003d0900 	.word	0x003d0900
 8004ab8:	007a1200 	.word	0x007a1200

08004abc <LL_TIM_SetPrescaler>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <LL_TIM_SetAutoReload>:
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <LL_TIM_SetRepetitionCounter>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr

08004b0a <LL_TIM_OC_SetCompareCH1>:
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <LL_TIM_OC_SetCompareCH2>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <LL_TIM_OC_SetCompareCH3>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <LL_TIM_OC_SetCompareCH4>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	615a      	str	r2, [r3, #20]
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <LL_TIM_Init+0xb0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <LL_TIM_Init+0x30>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bae:	d007      	beq.n	8004bc0 <LL_TIM_Init+0x30>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a24      	ldr	r2, [pc, #144]	; (8004c44 <LL_TIM_Init+0xb4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <LL_TIM_Init+0x30>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a23      	ldr	r2, [pc, #140]	; (8004c48 <LL_TIM_Init+0xb8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d106      	bne.n	8004bce <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <LL_TIM_Init+0xb0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00b      	beq.n	8004bee <LL_TIM_Init+0x5e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bdc:	d007      	beq.n	8004bee <LL_TIM_Init+0x5e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <LL_TIM_Init+0xb4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <LL_TIM_Init+0x5e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <LL_TIM_Init+0xb8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d106      	bne.n	8004bfc <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff64 	bl	8004ad6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff51 	bl	8004abc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a08      	ldr	r2, [pc, #32]	; (8004c40 <LL_TIM_Init+0xb0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d105      	bne.n	8004c2e <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	7c1b      	ldrb	r3, [r3, #16]
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff61 	bl	8004af0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff9f 	bl	8004b72 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800

08004c4c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d012      	beq.n	8004c88 <LL_TIM_OC_Init+0x3c>
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d802      	bhi.n	8004c6c <LL_TIM_OC_Init+0x20>
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d007      	beq.n	8004c7a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004c6a:	e022      	b.n	8004cb2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8004c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c70:	d011      	beq.n	8004c96 <LL_TIM_OC_Init+0x4a>
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	d015      	beq.n	8004ca4 <LL_TIM_OC_Init+0x58>
      break;
 8004c78:	e01b      	b.n	8004cb2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f865 	bl	8004d4c <OC1Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	75fb      	strb	r3, [r7, #23]
      break;
 8004c86:	e014      	b.n	8004cb2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f8c4 	bl	8004e18 <OC2Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	75fb      	strb	r3, [r7, #23]
      break;
 8004c94:	e00d      	b.n	8004cb2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f927 	bl	8004eec <OC3Config>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca2:	e006      	b.n	8004cb2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f98a 	bl	8004fc0 <OC4Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb0:	bf00      	nop
  }

  return result;
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	7b12      	ldrb	r2, [r2, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	89d2      	ldrh	r2, [r2, #14]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0202 	bic.w	r2, r3, #2
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0201 	bic.w	r2, r3, #1
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <OC1Config+0xc8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d11e      	bne.n	8004dec <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f023 0208 	bic.w	r2, r3, #8
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0204 	bic.w	r2, r3, #4
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fe83 	bl	8004b0a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40012c00 	.word	0x40012c00

08004e18 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f023 0210 	bic.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f023 0220 	bic.w	r2, r3, #32
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0210 	bic.w	r2, r3, #16
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <OC2Config+0xd0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d11f      	bne.n	8004ec0 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	019b      	lsls	r3, r3, #6
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	019b      	lsls	r3, r3, #6
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff fe26 	bl	8004b24 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40012c00 	.word	0x40012c00

08004eec <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <OC3Config+0xd0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d11f      	bne.n	8004f92 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	029b      	lsls	r3, r3, #10
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	015b      	lsls	r3, r3, #5
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fdca 	bl	8004b3e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00

08004fc0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	031b      	lsls	r3, r3, #12
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	031b      	lsls	r3, r3, #12
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <OC4Config+0xa0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d107      	bne.n	8005038 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	019b      	lsls	r3, r3, #6
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff fd84 	bl	8004b58 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40012c00 	.word	0x40012c00

08005064 <LL_USART_IsEnabled>:
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005078:	bf0c      	ite	eq
 800507a:	2301      	moveq	r3, #1
 800507c:	2300      	movne	r3, #0
 800507e:	b2db      	uxtb	r3, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr

0800508a <LL_USART_SetStopBitsLength>:
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	611a      	str	r2, [r3, #16]
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <LL_USART_SetHWFlowCtrl>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	615a      	str	r2, [r3, #20]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
	...

080050d4 <LL_USART_SetBaudRate>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009a      	lsls	r2, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	4a25      	ldr	r2, [pc, #148]	; (800518c <LL_USART_SetBaudRate+0xb8>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	b299      	uxth	r1, r3
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	009a      	lsls	r2, r3, #2
 800510c:	441a      	add	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	fbb2 f2f3 	udiv	r2, r2, r3
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <LL_USART_SetBaudRate+0xb8>)
 8005118:	fba3 0302 	umull	r0, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	2064      	movs	r0, #100	; 0x64
 8005120:	fb00 f303 	mul.w	r3, r0, r3
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	3332      	adds	r3, #50	; 0x32
 800512a:	4a18      	ldr	r2, [pc, #96]	; (800518c <LL_USART_SetBaudRate+0xb8>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	b29b      	uxth	r3, r3
 8005134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005138:	b29b      	uxth	r3, r3
 800513a:	440b      	add	r3, r1
 800513c:	b299      	uxth	r1, r3
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009a      	lsls	r2, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <LL_USART_SetBaudRate+0xb8>)
 8005154:	fba3 0302 	umull	r0, r3, r3, r2
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	2064      	movs	r0, #100	; 0x64
 800515c:	fb00 f303 	mul.w	r3, r0, r3
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	3332      	adds	r3, #50	; 0x32
 8005166:	4a09      	ldr	r2, [pc, #36]	; (800518c <LL_USART_SetBaudRate+0xb8>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	b29b      	uxth	r3, r3
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	b29b      	uxth	r3, r3
 8005176:	440b      	add	r3, r1
 8005178:	b29b      	uxth	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	51eb851f 	.word	0x51eb851f

08005190 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff ff5e 	bl	8005064 <LL_USART_IsEnabled>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d145      	bne.n	800523a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051b6:	f023 030c 	bic.w	r3, r3, #12
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	6851      	ldr	r1, [r2, #4]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	68d2      	ldr	r2, [r2, #12]
 80051c2:	4311      	orrs	r1, r2
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	6912      	ldr	r2, [r2, #16]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff ff57 	bl	800508a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff ff63 	bl	80050ae <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80051e8:	f107 0308 	add.w	r3, r7, #8
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fbaf 	bl	8004950 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a13      	ldr	r2, [pc, #76]	; (8005244 <LL_USART_Init+0xb4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d102      	bne.n	8005200 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	e00c      	b.n	800521a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a11      	ldr	r2, [pc, #68]	; (8005248 <LL_USART_Init+0xb8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d102      	bne.n	800520e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	e005      	b.n	800521a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a0e      	ldr	r2, [pc, #56]	; (800524c <LL_USART_Init+0xbc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d101      	bne.n	800521a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00c      	beq.n	800523a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8005228:	2300      	movs	r3, #0
 800522a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	69b9      	ldr	r1, [r7, #24]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ff4d 	bl	80050d4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800523a:	7ffb      	ldrb	r3, [r7, #31]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40013800 	.word	0x40013800
 8005248:	40004400 	.word	0x40004400
 800524c:	40004800 	.word	0x40004800

08005250 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	4a07      	ldr	r2, [pc, #28]	; (8005280 <LL_InitTick+0x30>)
 8005264:	3b01      	subs	r3, #1
 8005266:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <LL_InitTick+0x30>)
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <LL_InitTick+0x30>)
 8005270:	2205      	movs	r2, #5
 8005272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e010 	.word	0xe000e010

08005284 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800528c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ffdd 	bl	8005250 <LL_InitTick>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80052a8:	4a03      	ldr	r2, [pc, #12]	; (80052b8 <LL_SetSystemCoreClock+0x18>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6013      	str	r3, [r2, #0]
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	20000014 	.word	0x20000014

080052bc <__errno>:
 80052bc:	4b01      	ldr	r3, [pc, #4]	; (80052c4 <__errno+0x8>)
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000018 	.word	0x20000018

080052c8 <__libc_init_array>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	2500      	movs	r5, #0
 80052cc:	4e0c      	ldr	r6, [pc, #48]	; (8005300 <__libc_init_array+0x38>)
 80052ce:	4c0d      	ldr	r4, [pc, #52]	; (8005304 <__libc_init_array+0x3c>)
 80052d0:	1ba4      	subs	r4, r4, r6
 80052d2:	10a4      	asrs	r4, r4, #2
 80052d4:	42a5      	cmp	r5, r4
 80052d6:	d109      	bne.n	80052ec <__libc_init_array+0x24>
 80052d8:	f002 fc4c 	bl	8007b74 <_init>
 80052dc:	2500      	movs	r5, #0
 80052de:	4e0a      	ldr	r6, [pc, #40]	; (8005308 <__libc_init_array+0x40>)
 80052e0:	4c0a      	ldr	r4, [pc, #40]	; (800530c <__libc_init_array+0x44>)
 80052e2:	1ba4      	subs	r4, r4, r6
 80052e4:	10a4      	asrs	r4, r4, #2
 80052e6:	42a5      	cmp	r5, r4
 80052e8:	d105      	bne.n	80052f6 <__libc_init_array+0x2e>
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052f0:	4798      	blx	r3
 80052f2:	3501      	adds	r5, #1
 80052f4:	e7ee      	b.n	80052d4 <__libc_init_array+0xc>
 80052f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052fa:	4798      	blx	r3
 80052fc:	3501      	adds	r5, #1
 80052fe:	e7f2      	b.n	80052e6 <__libc_init_array+0x1e>
 8005300:	08007f50 	.word	0x08007f50
 8005304:	08007f50 	.word	0x08007f50
 8005308:	08007f50 	.word	0x08007f50
 800530c:	08007f54 	.word	0x08007f54

08005310 <__itoa>:
 8005310:	1e93      	subs	r3, r2, #2
 8005312:	2b22      	cmp	r3, #34	; 0x22
 8005314:	b510      	push	{r4, lr}
 8005316:	460c      	mov	r4, r1
 8005318:	d904      	bls.n	8005324 <__itoa+0x14>
 800531a:	2300      	movs	r3, #0
 800531c:	461c      	mov	r4, r3
 800531e:	700b      	strb	r3, [r1, #0]
 8005320:	4620      	mov	r0, r4
 8005322:	bd10      	pop	{r4, pc}
 8005324:	2a0a      	cmp	r2, #10
 8005326:	d109      	bne.n	800533c <__itoa+0x2c>
 8005328:	2800      	cmp	r0, #0
 800532a:	da07      	bge.n	800533c <__itoa+0x2c>
 800532c:	232d      	movs	r3, #45	; 0x2d
 800532e:	700b      	strb	r3, [r1, #0]
 8005330:	2101      	movs	r1, #1
 8005332:	4240      	negs	r0, r0
 8005334:	4421      	add	r1, r4
 8005336:	f000 fd23 	bl	8005d80 <__utoa>
 800533a:	e7f1      	b.n	8005320 <__itoa+0x10>
 800533c:	2100      	movs	r1, #0
 800533e:	e7f9      	b.n	8005334 <__itoa+0x24>

08005340 <itoa>:
 8005340:	f7ff bfe6 	b.w	8005310 <__itoa>

08005344 <memset>:
 8005344:	4603      	mov	r3, r0
 8005346:	4402      	add	r2, r0
 8005348:	4293      	cmp	r3, r2
 800534a:	d100      	bne.n	800534e <memset+0xa>
 800534c:	4770      	bx	lr
 800534e:	f803 1b01 	strb.w	r1, [r3], #1
 8005352:	e7f9      	b.n	8005348 <memset+0x4>

08005354 <__cvt>:
 8005354:	2b00      	cmp	r3, #0
 8005356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800535a:	461e      	mov	r6, r3
 800535c:	bfbb      	ittet	lt
 800535e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005362:	461e      	movlt	r6, r3
 8005364:	2300      	movge	r3, #0
 8005366:	232d      	movlt	r3, #45	; 0x2d
 8005368:	b088      	sub	sp, #32
 800536a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800536c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005370:	f027 0720 	bic.w	r7, r7, #32
 8005374:	2f46      	cmp	r7, #70	; 0x46
 8005376:	4614      	mov	r4, r2
 8005378:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800537a:	700b      	strb	r3, [r1, #0]
 800537c:	d004      	beq.n	8005388 <__cvt+0x34>
 800537e:	2f45      	cmp	r7, #69	; 0x45
 8005380:	d100      	bne.n	8005384 <__cvt+0x30>
 8005382:	3501      	adds	r5, #1
 8005384:	2302      	movs	r3, #2
 8005386:	e000      	b.n	800538a <__cvt+0x36>
 8005388:	2303      	movs	r3, #3
 800538a:	aa07      	add	r2, sp, #28
 800538c:	9204      	str	r2, [sp, #16]
 800538e:	aa06      	add	r2, sp, #24
 8005390:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005394:	e9cd 3500 	strd	r3, r5, [sp]
 8005398:	4622      	mov	r2, r4
 800539a:	4633      	mov	r3, r6
 800539c:	f000 fdbc 	bl	8005f18 <_dtoa_r>
 80053a0:	2f47      	cmp	r7, #71	; 0x47
 80053a2:	4680      	mov	r8, r0
 80053a4:	d102      	bne.n	80053ac <__cvt+0x58>
 80053a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053a8:	07db      	lsls	r3, r3, #31
 80053aa:	d526      	bpl.n	80053fa <__cvt+0xa6>
 80053ac:	2f46      	cmp	r7, #70	; 0x46
 80053ae:	eb08 0905 	add.w	r9, r8, r5
 80053b2:	d111      	bne.n	80053d8 <__cvt+0x84>
 80053b4:	f898 3000 	ldrb.w	r3, [r8]
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	d10a      	bne.n	80053d2 <__cvt+0x7e>
 80053bc:	2200      	movs	r2, #0
 80053be:	2300      	movs	r3, #0
 80053c0:	4620      	mov	r0, r4
 80053c2:	4631      	mov	r1, r6
 80053c4:	f7fb faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80053c8:	b918      	cbnz	r0, 80053d2 <__cvt+0x7e>
 80053ca:	f1c5 0501 	rsb	r5, r5, #1
 80053ce:	f8ca 5000 	str.w	r5, [sl]
 80053d2:	f8da 3000 	ldr.w	r3, [sl]
 80053d6:	4499      	add	r9, r3
 80053d8:	2200      	movs	r2, #0
 80053da:	2300      	movs	r3, #0
 80053dc:	4620      	mov	r0, r4
 80053de:	4631      	mov	r1, r6
 80053e0:	f7fb fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80053e4:	b938      	cbnz	r0, 80053f6 <__cvt+0xa2>
 80053e6:	2230      	movs	r2, #48	; 0x30
 80053e8:	9b07      	ldr	r3, [sp, #28]
 80053ea:	454b      	cmp	r3, r9
 80053ec:	d205      	bcs.n	80053fa <__cvt+0xa6>
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	9107      	str	r1, [sp, #28]
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e7f8      	b.n	80053e8 <__cvt+0x94>
 80053f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80053fa:	4640      	mov	r0, r8
 80053fc:	9b07      	ldr	r3, [sp, #28]
 80053fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005400:	eba3 0308 	sub.w	r3, r3, r8
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	b008      	add	sp, #32
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800540c <__exponent>:
 800540c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800540e:	2900      	cmp	r1, #0
 8005410:	bfb4      	ite	lt
 8005412:	232d      	movlt	r3, #45	; 0x2d
 8005414:	232b      	movge	r3, #43	; 0x2b
 8005416:	4604      	mov	r4, r0
 8005418:	bfb8      	it	lt
 800541a:	4249      	neglt	r1, r1
 800541c:	2909      	cmp	r1, #9
 800541e:	f804 2b02 	strb.w	r2, [r4], #2
 8005422:	7043      	strb	r3, [r0, #1]
 8005424:	dd21      	ble.n	800546a <__exponent+0x5e>
 8005426:	f10d 0307 	add.w	r3, sp, #7
 800542a:	461f      	mov	r7, r3
 800542c:	260a      	movs	r6, #10
 800542e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005432:	fb06 1115 	mls	r1, r6, r5, r1
 8005436:	2d09      	cmp	r5, #9
 8005438:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800543c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005440:	f103 32ff 	add.w	r2, r3, #4294967295
 8005444:	4629      	mov	r1, r5
 8005446:	dc09      	bgt.n	800545c <__exponent+0x50>
 8005448:	3130      	adds	r1, #48	; 0x30
 800544a:	3b02      	subs	r3, #2
 800544c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005450:	42bb      	cmp	r3, r7
 8005452:	4622      	mov	r2, r4
 8005454:	d304      	bcc.n	8005460 <__exponent+0x54>
 8005456:	1a10      	subs	r0, r2, r0
 8005458:	b003      	add	sp, #12
 800545a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545c:	4613      	mov	r3, r2
 800545e:	e7e6      	b.n	800542e <__exponent+0x22>
 8005460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005464:	f804 2b01 	strb.w	r2, [r4], #1
 8005468:	e7f2      	b.n	8005450 <__exponent+0x44>
 800546a:	2330      	movs	r3, #48	; 0x30
 800546c:	4419      	add	r1, r3
 800546e:	7083      	strb	r3, [r0, #2]
 8005470:	1d02      	adds	r2, r0, #4
 8005472:	70c1      	strb	r1, [r0, #3]
 8005474:	e7ef      	b.n	8005456 <__exponent+0x4a>
	...

08005478 <_printf_float>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	b091      	sub	sp, #68	; 0x44
 800547e:	460c      	mov	r4, r1
 8005480:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005482:	4693      	mov	fp, r2
 8005484:	461e      	mov	r6, r3
 8005486:	4605      	mov	r5, r0
 8005488:	f001 fc74 	bl	8006d74 <_localeconv_r>
 800548c:	6803      	ldr	r3, [r0, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	9309      	str	r3, [sp, #36]	; 0x24
 8005492:	f7fa fe5d 	bl	8000150 <strlen>
 8005496:	2300      	movs	r3, #0
 8005498:	930e      	str	r3, [sp, #56]	; 0x38
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	900a      	str	r0, [sp, #40]	; 0x28
 800549e:	3307      	adds	r3, #7
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	f103 0208 	add.w	r2, r3, #8
 80054a8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80054ac:	f8d4 a000 	ldr.w	sl, [r4]
 80054b0:	603a      	str	r2, [r7, #0]
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054ba:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80054be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	4ba6      	ldr	r3, [pc, #664]	; (8005764 <_printf_float+0x2ec>)
 80054ca:	4638      	mov	r0, r7
 80054cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054ce:	f7fb fa9d 	bl	8000a0c <__aeabi_dcmpun>
 80054d2:	bb68      	cbnz	r0, 8005530 <_printf_float+0xb8>
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295
 80054d8:	4ba2      	ldr	r3, [pc, #648]	; (8005764 <_printf_float+0x2ec>)
 80054da:	4638      	mov	r0, r7
 80054dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054de:	f7fb fa77 	bl	80009d0 <__aeabi_dcmple>
 80054e2:	bb28      	cbnz	r0, 8005530 <_printf_float+0xb8>
 80054e4:	2200      	movs	r2, #0
 80054e6:	2300      	movs	r3, #0
 80054e8:	4638      	mov	r0, r7
 80054ea:	4649      	mov	r1, r9
 80054ec:	f7fb fa66 	bl	80009bc <__aeabi_dcmplt>
 80054f0:	b110      	cbz	r0, 80054f8 <_printf_float+0x80>
 80054f2:	232d      	movs	r3, #45	; 0x2d
 80054f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f8:	4f9b      	ldr	r7, [pc, #620]	; (8005768 <_printf_float+0x2f0>)
 80054fa:	4b9c      	ldr	r3, [pc, #624]	; (800576c <_printf_float+0x2f4>)
 80054fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005500:	bf98      	it	ls
 8005502:	461f      	movls	r7, r3
 8005504:	2303      	movs	r3, #3
 8005506:	f04f 0900 	mov.w	r9, #0
 800550a:	6123      	str	r3, [r4, #16]
 800550c:	f02a 0304 	bic.w	r3, sl, #4
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	9600      	str	r6, [sp, #0]
 8005514:	465b      	mov	r3, fp
 8005516:	aa0f      	add	r2, sp, #60	; 0x3c
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f9e2 	bl	80058e4 <_printf_common>
 8005520:	3001      	adds	r0, #1
 8005522:	f040 8090 	bne.w	8005646 <_printf_float+0x1ce>
 8005526:	f04f 30ff 	mov.w	r0, #4294967295
 800552a:	b011      	add	sp, #68	; 0x44
 800552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005530:	463a      	mov	r2, r7
 8005532:	464b      	mov	r3, r9
 8005534:	4638      	mov	r0, r7
 8005536:	4649      	mov	r1, r9
 8005538:	f7fb fa68 	bl	8000a0c <__aeabi_dcmpun>
 800553c:	b110      	cbz	r0, 8005544 <_printf_float+0xcc>
 800553e:	4f8c      	ldr	r7, [pc, #560]	; (8005770 <_printf_float+0x2f8>)
 8005540:	4b8c      	ldr	r3, [pc, #560]	; (8005774 <_printf_float+0x2fc>)
 8005542:	e7db      	b.n	80054fc <_printf_float+0x84>
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800554a:	1c59      	adds	r1, r3, #1
 800554c:	a80d      	add	r0, sp, #52	; 0x34
 800554e:	a90e      	add	r1, sp, #56	; 0x38
 8005550:	d140      	bne.n	80055d4 <_printf_float+0x15c>
 8005552:	2306      	movs	r3, #6
 8005554:	6063      	str	r3, [r4, #4]
 8005556:	f04f 0c00 	mov.w	ip, #0
 800555a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800555e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005562:	6863      	ldr	r3, [r4, #4]
 8005564:	6022      	str	r2, [r4, #0]
 8005566:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	463a      	mov	r2, r7
 800556e:	464b      	mov	r3, r9
 8005570:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005574:	4628      	mov	r0, r5
 8005576:	f7ff feed 	bl	8005354 <__cvt>
 800557a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800557e:	2b47      	cmp	r3, #71	; 0x47
 8005580:	4607      	mov	r7, r0
 8005582:	d109      	bne.n	8005598 <_printf_float+0x120>
 8005584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005586:	1cd8      	adds	r0, r3, #3
 8005588:	db02      	blt.n	8005590 <_printf_float+0x118>
 800558a:	6862      	ldr	r2, [r4, #4]
 800558c:	4293      	cmp	r3, r2
 800558e:	dd47      	ble.n	8005620 <_printf_float+0x1a8>
 8005590:	f1a8 0802 	sub.w	r8, r8, #2
 8005594:	fa5f f888 	uxtb.w	r8, r8
 8005598:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800559c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800559e:	d824      	bhi.n	80055ea <_printf_float+0x172>
 80055a0:	3901      	subs	r1, #1
 80055a2:	4642      	mov	r2, r8
 80055a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055a8:	910d      	str	r1, [sp, #52]	; 0x34
 80055aa:	f7ff ff2f 	bl	800540c <__exponent>
 80055ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055b0:	4681      	mov	r9, r0
 80055b2:	1813      	adds	r3, r2, r0
 80055b4:	2a01      	cmp	r2, #1
 80055b6:	6123      	str	r3, [r4, #16]
 80055b8:	dc02      	bgt.n	80055c0 <_printf_float+0x148>
 80055ba:	6822      	ldr	r2, [r4, #0]
 80055bc:	07d1      	lsls	r1, r2, #31
 80055be:	d501      	bpl.n	80055c4 <_printf_float+0x14c>
 80055c0:	3301      	adds	r3, #1
 80055c2:	6123      	str	r3, [r4, #16]
 80055c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0a2      	beq.n	8005512 <_printf_float+0x9a>
 80055cc:	232d      	movs	r3, #45	; 0x2d
 80055ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d2:	e79e      	b.n	8005512 <_printf_float+0x9a>
 80055d4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80055d8:	f000 816e 	beq.w	80058b8 <_printf_float+0x440>
 80055dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055e0:	d1b9      	bne.n	8005556 <_printf_float+0xde>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1b7      	bne.n	8005556 <_printf_float+0xde>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e7b4      	b.n	8005554 <_printf_float+0xdc>
 80055ea:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80055ee:	d119      	bne.n	8005624 <_printf_float+0x1ac>
 80055f0:	2900      	cmp	r1, #0
 80055f2:	6863      	ldr	r3, [r4, #4]
 80055f4:	dd0c      	ble.n	8005610 <_printf_float+0x198>
 80055f6:	6121      	str	r1, [r4, #16]
 80055f8:	b913      	cbnz	r3, 8005600 <_printf_float+0x188>
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	07d2      	lsls	r2, r2, #31
 80055fe:	d502      	bpl.n	8005606 <_printf_float+0x18e>
 8005600:	3301      	adds	r3, #1
 8005602:	440b      	add	r3, r1
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005608:	f04f 0900 	mov.w	r9, #0
 800560c:	65a3      	str	r3, [r4, #88]	; 0x58
 800560e:	e7d9      	b.n	80055c4 <_printf_float+0x14c>
 8005610:	b913      	cbnz	r3, 8005618 <_printf_float+0x1a0>
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	07d0      	lsls	r0, r2, #31
 8005616:	d501      	bpl.n	800561c <_printf_float+0x1a4>
 8005618:	3302      	adds	r3, #2
 800561a:	e7f3      	b.n	8005604 <_printf_float+0x18c>
 800561c:	2301      	movs	r3, #1
 800561e:	e7f1      	b.n	8005604 <_printf_float+0x18c>
 8005620:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005624:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005628:	4293      	cmp	r3, r2
 800562a:	db05      	blt.n	8005638 <_printf_float+0x1c0>
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	6123      	str	r3, [r4, #16]
 8005630:	07d1      	lsls	r1, r2, #31
 8005632:	d5e8      	bpl.n	8005606 <_printf_float+0x18e>
 8005634:	3301      	adds	r3, #1
 8005636:	e7e5      	b.n	8005604 <_printf_float+0x18c>
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfcc      	ite	gt
 800563c:	2301      	movgt	r3, #1
 800563e:	f1c3 0302 	rsble	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	e7de      	b.n	8005604 <_printf_float+0x18c>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	055a      	lsls	r2, r3, #21
 800564a:	d407      	bmi.n	800565c <_printf_float+0x1e4>
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	463a      	mov	r2, r7
 8005650:	4659      	mov	r1, fp
 8005652:	4628      	mov	r0, r5
 8005654:	47b0      	blx	r6
 8005656:	3001      	adds	r0, #1
 8005658:	d129      	bne.n	80056ae <_printf_float+0x236>
 800565a:	e764      	b.n	8005526 <_printf_float+0xae>
 800565c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005660:	f240 80d7 	bls.w	8005812 <_printf_float+0x39a>
 8005664:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005668:	2200      	movs	r2, #0
 800566a:	2300      	movs	r3, #0
 800566c:	f7fb f99c 	bl	80009a8 <__aeabi_dcmpeq>
 8005670:	b388      	cbz	r0, 80056d6 <_printf_float+0x25e>
 8005672:	2301      	movs	r3, #1
 8005674:	4a40      	ldr	r2, [pc, #256]	; (8005778 <_printf_float+0x300>)
 8005676:	4659      	mov	r1, fp
 8005678:	4628      	mov	r0, r5
 800567a:	47b0      	blx	r6
 800567c:	3001      	adds	r0, #1
 800567e:	f43f af52 	beq.w	8005526 <_printf_float+0xae>
 8005682:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005686:	429a      	cmp	r2, r3
 8005688:	db02      	blt.n	8005690 <_printf_float+0x218>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	07d8      	lsls	r0, r3, #31
 800568e:	d50e      	bpl.n	80056ae <_printf_float+0x236>
 8005690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005694:	4659      	mov	r1, fp
 8005696:	4628      	mov	r0, r5
 8005698:	47b0      	blx	r6
 800569a:	3001      	adds	r0, #1
 800569c:	f43f af43 	beq.w	8005526 <_printf_float+0xae>
 80056a0:	2700      	movs	r7, #0
 80056a2:	f104 081a 	add.w	r8, r4, #26
 80056a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a8:	3b01      	subs	r3, #1
 80056aa:	42bb      	cmp	r3, r7
 80056ac:	dc09      	bgt.n	80056c2 <_printf_float+0x24a>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	079f      	lsls	r7, r3, #30
 80056b2:	f100 80fd 	bmi.w	80058b0 <_printf_float+0x438>
 80056b6:	68e0      	ldr	r0, [r4, #12]
 80056b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056ba:	4298      	cmp	r0, r3
 80056bc:	bfb8      	it	lt
 80056be:	4618      	movlt	r0, r3
 80056c0:	e733      	b.n	800552a <_printf_float+0xb2>
 80056c2:	2301      	movs	r3, #1
 80056c4:	4642      	mov	r2, r8
 80056c6:	4659      	mov	r1, fp
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b0      	blx	r6
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f af2a 	beq.w	8005526 <_printf_float+0xae>
 80056d2:	3701      	adds	r7, #1
 80056d4:	e7e7      	b.n	80056a6 <_printf_float+0x22e>
 80056d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056d8:	2b00      	cmp	r3, #0
 80056da:	dc2b      	bgt.n	8005734 <_printf_float+0x2bc>
 80056dc:	2301      	movs	r3, #1
 80056de:	4a26      	ldr	r2, [pc, #152]	; (8005778 <_printf_float+0x300>)
 80056e0:	4659      	mov	r1, fp
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b0      	blx	r6
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f af1d 	beq.w	8005526 <_printf_float+0xae>
 80056ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056ee:	b923      	cbnz	r3, 80056fa <_printf_float+0x282>
 80056f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f2:	b913      	cbnz	r3, 80056fa <_printf_float+0x282>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	07d9      	lsls	r1, r3, #31
 80056f8:	d5d9      	bpl.n	80056ae <_printf_float+0x236>
 80056fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056fe:	4659      	mov	r1, fp
 8005700:	4628      	mov	r0, r5
 8005702:	47b0      	blx	r6
 8005704:	3001      	adds	r0, #1
 8005706:	f43f af0e 	beq.w	8005526 <_printf_float+0xae>
 800570a:	f04f 0800 	mov.w	r8, #0
 800570e:	f104 091a 	add.w	r9, r4, #26
 8005712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005714:	425b      	negs	r3, r3
 8005716:	4543      	cmp	r3, r8
 8005718:	dc01      	bgt.n	800571e <_printf_float+0x2a6>
 800571a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800571c:	e797      	b.n	800564e <_printf_float+0x1d6>
 800571e:	2301      	movs	r3, #1
 8005720:	464a      	mov	r2, r9
 8005722:	4659      	mov	r1, fp
 8005724:	4628      	mov	r0, r5
 8005726:	47b0      	blx	r6
 8005728:	3001      	adds	r0, #1
 800572a:	f43f aefc 	beq.w	8005526 <_printf_float+0xae>
 800572e:	f108 0801 	add.w	r8, r8, #1
 8005732:	e7ee      	b.n	8005712 <_printf_float+0x29a>
 8005734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005736:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005738:	429a      	cmp	r2, r3
 800573a:	bfa8      	it	ge
 800573c:	461a      	movge	r2, r3
 800573e:	2a00      	cmp	r2, #0
 8005740:	4690      	mov	r8, r2
 8005742:	dd07      	ble.n	8005754 <_printf_float+0x2dc>
 8005744:	4613      	mov	r3, r2
 8005746:	4659      	mov	r1, fp
 8005748:	463a      	mov	r2, r7
 800574a:	4628      	mov	r0, r5
 800574c:	47b0      	blx	r6
 800574e:	3001      	adds	r0, #1
 8005750:	f43f aee9 	beq.w	8005526 <_printf_float+0xae>
 8005754:	f104 031a 	add.w	r3, r4, #26
 8005758:	f04f 0a00 	mov.w	sl, #0
 800575c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005760:	930b      	str	r3, [sp, #44]	; 0x2c
 8005762:	e015      	b.n	8005790 <_printf_float+0x318>
 8005764:	7fefffff 	.word	0x7fefffff
 8005768:	08007c74 	.word	0x08007c74
 800576c:	08007c70 	.word	0x08007c70
 8005770:	08007c7c 	.word	0x08007c7c
 8005774:	08007c78 	.word	0x08007c78
 8005778:	08007c80 	.word	0x08007c80
 800577c:	2301      	movs	r3, #1
 800577e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005780:	4659      	mov	r1, fp
 8005782:	4628      	mov	r0, r5
 8005784:	47b0      	blx	r6
 8005786:	3001      	adds	r0, #1
 8005788:	f43f aecd 	beq.w	8005526 <_printf_float+0xae>
 800578c:	f10a 0a01 	add.w	sl, sl, #1
 8005790:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005794:	eba9 0308 	sub.w	r3, r9, r8
 8005798:	4553      	cmp	r3, sl
 800579a:	dcef      	bgt.n	800577c <_printf_float+0x304>
 800579c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057a0:	429a      	cmp	r2, r3
 80057a2:	444f      	add	r7, r9
 80057a4:	db14      	blt.n	80057d0 <_printf_float+0x358>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	07da      	lsls	r2, r3, #31
 80057aa:	d411      	bmi.n	80057d0 <_printf_float+0x358>
 80057ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057b0:	eba3 0209 	sub.w	r2, r3, r9
 80057b4:	eba3 0901 	sub.w	r9, r3, r1
 80057b8:	4591      	cmp	r9, r2
 80057ba:	bfa8      	it	ge
 80057bc:	4691      	movge	r9, r2
 80057be:	f1b9 0f00 	cmp.w	r9, #0
 80057c2:	dc0d      	bgt.n	80057e0 <_printf_float+0x368>
 80057c4:	2700      	movs	r7, #0
 80057c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057ca:	f104 081a 	add.w	r8, r4, #26
 80057ce:	e018      	b.n	8005802 <_printf_float+0x38a>
 80057d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057d4:	4659      	mov	r1, fp
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b0      	blx	r6
 80057da:	3001      	adds	r0, #1
 80057dc:	d1e6      	bne.n	80057ac <_printf_float+0x334>
 80057de:	e6a2      	b.n	8005526 <_printf_float+0xae>
 80057e0:	464b      	mov	r3, r9
 80057e2:	463a      	mov	r2, r7
 80057e4:	4659      	mov	r1, fp
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b0      	blx	r6
 80057ea:	3001      	adds	r0, #1
 80057ec:	d1ea      	bne.n	80057c4 <_printf_float+0x34c>
 80057ee:	e69a      	b.n	8005526 <_printf_float+0xae>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4642      	mov	r2, r8
 80057f4:	4659      	mov	r1, fp
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b0      	blx	r6
 80057fa:	3001      	adds	r0, #1
 80057fc:	f43f ae93 	beq.w	8005526 <_printf_float+0xae>
 8005800:	3701      	adds	r7, #1
 8005802:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	eba3 0309 	sub.w	r3, r3, r9
 800580c:	42bb      	cmp	r3, r7
 800580e:	dcef      	bgt.n	80057f0 <_printf_float+0x378>
 8005810:	e74d      	b.n	80056ae <_printf_float+0x236>
 8005812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005814:	2a01      	cmp	r2, #1
 8005816:	dc01      	bgt.n	800581c <_printf_float+0x3a4>
 8005818:	07db      	lsls	r3, r3, #31
 800581a:	d538      	bpl.n	800588e <_printf_float+0x416>
 800581c:	2301      	movs	r3, #1
 800581e:	463a      	mov	r2, r7
 8005820:	4659      	mov	r1, fp
 8005822:	4628      	mov	r0, r5
 8005824:	47b0      	blx	r6
 8005826:	3001      	adds	r0, #1
 8005828:	f43f ae7d 	beq.w	8005526 <_printf_float+0xae>
 800582c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005830:	4659      	mov	r1, fp
 8005832:	4628      	mov	r0, r5
 8005834:	47b0      	blx	r6
 8005836:	3001      	adds	r0, #1
 8005838:	f107 0701 	add.w	r7, r7, #1
 800583c:	f43f ae73 	beq.w	8005526 <_printf_float+0xae>
 8005840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005846:	2200      	movs	r2, #0
 8005848:	f103 38ff 	add.w	r8, r3, #4294967295
 800584c:	2300      	movs	r3, #0
 800584e:	f7fb f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8005852:	b9c0      	cbnz	r0, 8005886 <_printf_float+0x40e>
 8005854:	4643      	mov	r3, r8
 8005856:	463a      	mov	r2, r7
 8005858:	4659      	mov	r1, fp
 800585a:	4628      	mov	r0, r5
 800585c:	47b0      	blx	r6
 800585e:	3001      	adds	r0, #1
 8005860:	d10d      	bne.n	800587e <_printf_float+0x406>
 8005862:	e660      	b.n	8005526 <_printf_float+0xae>
 8005864:	2301      	movs	r3, #1
 8005866:	4642      	mov	r2, r8
 8005868:	4659      	mov	r1, fp
 800586a:	4628      	mov	r0, r5
 800586c:	47b0      	blx	r6
 800586e:	3001      	adds	r0, #1
 8005870:	f43f ae59 	beq.w	8005526 <_printf_float+0xae>
 8005874:	3701      	adds	r7, #1
 8005876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005878:	3b01      	subs	r3, #1
 800587a:	42bb      	cmp	r3, r7
 800587c:	dcf2      	bgt.n	8005864 <_printf_float+0x3ec>
 800587e:	464b      	mov	r3, r9
 8005880:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005884:	e6e4      	b.n	8005650 <_printf_float+0x1d8>
 8005886:	2700      	movs	r7, #0
 8005888:	f104 081a 	add.w	r8, r4, #26
 800588c:	e7f3      	b.n	8005876 <_printf_float+0x3fe>
 800588e:	2301      	movs	r3, #1
 8005890:	e7e1      	b.n	8005856 <_printf_float+0x3de>
 8005892:	2301      	movs	r3, #1
 8005894:	4642      	mov	r2, r8
 8005896:	4659      	mov	r1, fp
 8005898:	4628      	mov	r0, r5
 800589a:	47b0      	blx	r6
 800589c:	3001      	adds	r0, #1
 800589e:	f43f ae42 	beq.w	8005526 <_printf_float+0xae>
 80058a2:	3701      	adds	r7, #1
 80058a4:	68e3      	ldr	r3, [r4, #12]
 80058a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	42bb      	cmp	r3, r7
 80058ac:	dcf1      	bgt.n	8005892 <_printf_float+0x41a>
 80058ae:	e702      	b.n	80056b6 <_printf_float+0x23e>
 80058b0:	2700      	movs	r7, #0
 80058b2:	f104 0819 	add.w	r8, r4, #25
 80058b6:	e7f5      	b.n	80058a4 <_printf_float+0x42c>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f43f ae94 	beq.w	80055e6 <_printf_float+0x16e>
 80058be:	f04f 0c00 	mov.w	ip, #0
 80058c2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80058c6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80058d0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	463a      	mov	r2, r7
 80058d8:	464b      	mov	r3, r9
 80058da:	4628      	mov	r0, r5
 80058dc:	f7ff fd3a 	bl	8005354 <__cvt>
 80058e0:	4607      	mov	r7, r0
 80058e2:	e64f      	b.n	8005584 <_printf_float+0x10c>

080058e4 <_printf_common>:
 80058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	4691      	mov	r9, r2
 80058ea:	461f      	mov	r7, r3
 80058ec:	688a      	ldr	r2, [r1, #8]
 80058ee:	690b      	ldr	r3, [r1, #16]
 80058f0:	4606      	mov	r6, r0
 80058f2:	4293      	cmp	r3, r2
 80058f4:	bfb8      	it	lt
 80058f6:	4613      	movlt	r3, r2
 80058f8:	f8c9 3000 	str.w	r3, [r9]
 80058fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005900:	460c      	mov	r4, r1
 8005902:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005906:	b112      	cbz	r2, 800590e <_printf_common+0x2a>
 8005908:	3301      	adds	r3, #1
 800590a:	f8c9 3000 	str.w	r3, [r9]
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	0699      	lsls	r1, r3, #26
 8005912:	bf42      	ittt	mi
 8005914:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005918:	3302      	addmi	r3, #2
 800591a:	f8c9 3000 	strmi.w	r3, [r9]
 800591e:	6825      	ldr	r5, [r4, #0]
 8005920:	f015 0506 	ands.w	r5, r5, #6
 8005924:	d107      	bne.n	8005936 <_printf_common+0x52>
 8005926:	f104 0a19 	add.w	sl, r4, #25
 800592a:	68e3      	ldr	r3, [r4, #12]
 800592c:	f8d9 2000 	ldr.w	r2, [r9]
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	42ab      	cmp	r3, r5
 8005934:	dc29      	bgt.n	800598a <_printf_common+0xa6>
 8005936:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	3300      	adds	r3, #0
 800593e:	bf18      	it	ne
 8005940:	2301      	movne	r3, #1
 8005942:	0692      	lsls	r2, r2, #26
 8005944:	d42e      	bmi.n	80059a4 <_printf_common+0xc0>
 8005946:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800594a:	4639      	mov	r1, r7
 800594c:	4630      	mov	r0, r6
 800594e:	47c0      	blx	r8
 8005950:	3001      	adds	r0, #1
 8005952:	d021      	beq.n	8005998 <_printf_common+0xb4>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	68e5      	ldr	r5, [r4, #12]
 8005958:	f003 0306 	and.w	r3, r3, #6
 800595c:	2b04      	cmp	r3, #4
 800595e:	bf18      	it	ne
 8005960:	2500      	movne	r5, #0
 8005962:	f8d9 2000 	ldr.w	r2, [r9]
 8005966:	f04f 0900 	mov.w	r9, #0
 800596a:	bf08      	it	eq
 800596c:	1aad      	subeq	r5, r5, r2
 800596e:	68a3      	ldr	r3, [r4, #8]
 8005970:	6922      	ldr	r2, [r4, #16]
 8005972:	bf08      	it	eq
 8005974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005978:	4293      	cmp	r3, r2
 800597a:	bfc4      	itt	gt
 800597c:	1a9b      	subgt	r3, r3, r2
 800597e:	18ed      	addgt	r5, r5, r3
 8005980:	341a      	adds	r4, #26
 8005982:	454d      	cmp	r5, r9
 8005984:	d11a      	bne.n	80059bc <_printf_common+0xd8>
 8005986:	2000      	movs	r0, #0
 8005988:	e008      	b.n	800599c <_printf_common+0xb8>
 800598a:	2301      	movs	r3, #1
 800598c:	4652      	mov	r2, sl
 800598e:	4639      	mov	r1, r7
 8005990:	4630      	mov	r0, r6
 8005992:	47c0      	blx	r8
 8005994:	3001      	adds	r0, #1
 8005996:	d103      	bne.n	80059a0 <_printf_common+0xbc>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a0:	3501      	adds	r5, #1
 80059a2:	e7c2      	b.n	800592a <_printf_common+0x46>
 80059a4:	2030      	movs	r0, #48	; 0x30
 80059a6:	18e1      	adds	r1, r4, r3
 80059a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059b2:	4422      	add	r2, r4
 80059b4:	3302      	adds	r3, #2
 80059b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059ba:	e7c4      	b.n	8005946 <_printf_common+0x62>
 80059bc:	2301      	movs	r3, #1
 80059be:	4622      	mov	r2, r4
 80059c0:	4639      	mov	r1, r7
 80059c2:	4630      	mov	r0, r6
 80059c4:	47c0      	blx	r8
 80059c6:	3001      	adds	r0, #1
 80059c8:	d0e6      	beq.n	8005998 <_printf_common+0xb4>
 80059ca:	f109 0901 	add.w	r9, r9, #1
 80059ce:	e7d8      	b.n	8005982 <_printf_common+0x9e>

080059d0 <_printf_i>:
 80059d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80059d8:	460c      	mov	r4, r1
 80059da:	7e09      	ldrb	r1, [r1, #24]
 80059dc:	b085      	sub	sp, #20
 80059de:	296e      	cmp	r1, #110	; 0x6e
 80059e0:	4617      	mov	r7, r2
 80059e2:	4606      	mov	r6, r0
 80059e4:	4698      	mov	r8, r3
 80059e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059e8:	f000 80b3 	beq.w	8005b52 <_printf_i+0x182>
 80059ec:	d822      	bhi.n	8005a34 <_printf_i+0x64>
 80059ee:	2963      	cmp	r1, #99	; 0x63
 80059f0:	d036      	beq.n	8005a60 <_printf_i+0x90>
 80059f2:	d80a      	bhi.n	8005a0a <_printf_i+0x3a>
 80059f4:	2900      	cmp	r1, #0
 80059f6:	f000 80b9 	beq.w	8005b6c <_printf_i+0x19c>
 80059fa:	2958      	cmp	r1, #88	; 0x58
 80059fc:	f000 8083 	beq.w	8005b06 <_printf_i+0x136>
 8005a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a08:	e032      	b.n	8005a70 <_printf_i+0xa0>
 8005a0a:	2964      	cmp	r1, #100	; 0x64
 8005a0c:	d001      	beq.n	8005a12 <_printf_i+0x42>
 8005a0e:	2969      	cmp	r1, #105	; 0x69
 8005a10:	d1f6      	bne.n	8005a00 <_printf_i+0x30>
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	0605      	lsls	r5, r0, #24
 8005a18:	f103 0104 	add.w	r1, r3, #4
 8005a1c:	d52a      	bpl.n	8005a74 <_printf_i+0xa4>
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da03      	bge.n	8005a2e <_printf_i+0x5e>
 8005a26:	222d      	movs	r2, #45	; 0x2d
 8005a28:	425b      	negs	r3, r3
 8005a2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a2e:	486f      	ldr	r0, [pc, #444]	; (8005bec <_printf_i+0x21c>)
 8005a30:	220a      	movs	r2, #10
 8005a32:	e039      	b.n	8005aa8 <_printf_i+0xd8>
 8005a34:	2973      	cmp	r1, #115	; 0x73
 8005a36:	f000 809d 	beq.w	8005b74 <_printf_i+0x1a4>
 8005a3a:	d808      	bhi.n	8005a4e <_printf_i+0x7e>
 8005a3c:	296f      	cmp	r1, #111	; 0x6f
 8005a3e:	d020      	beq.n	8005a82 <_printf_i+0xb2>
 8005a40:	2970      	cmp	r1, #112	; 0x70
 8005a42:	d1dd      	bne.n	8005a00 <_printf_i+0x30>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	f043 0320 	orr.w	r3, r3, #32
 8005a4a:	6023      	str	r3, [r4, #0]
 8005a4c:	e003      	b.n	8005a56 <_printf_i+0x86>
 8005a4e:	2975      	cmp	r1, #117	; 0x75
 8005a50:	d017      	beq.n	8005a82 <_printf_i+0xb2>
 8005a52:	2978      	cmp	r1, #120	; 0x78
 8005a54:	d1d4      	bne.n	8005a00 <_printf_i+0x30>
 8005a56:	2378      	movs	r3, #120	; 0x78
 8005a58:	4865      	ldr	r0, [pc, #404]	; (8005bf0 <_printf_i+0x220>)
 8005a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a5e:	e055      	b.n	8005b0c <_printf_i+0x13c>
 8005a60:	6813      	ldr	r3, [r2, #0]
 8005a62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a66:	1d19      	adds	r1, r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6011      	str	r1, [r2, #0]
 8005a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a70:	2301      	movs	r3, #1
 8005a72:	e08c      	b.n	8005b8e <_printf_i+0x1be>
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a7a:	6011      	str	r1, [r2, #0]
 8005a7c:	bf18      	it	ne
 8005a7e:	b21b      	sxthne	r3, r3
 8005a80:	e7cf      	b.n	8005a22 <_printf_i+0x52>
 8005a82:	6813      	ldr	r3, [r2, #0]
 8005a84:	6825      	ldr	r5, [r4, #0]
 8005a86:	1d18      	adds	r0, r3, #4
 8005a88:	6010      	str	r0, [r2, #0]
 8005a8a:	0628      	lsls	r0, r5, #24
 8005a8c:	d501      	bpl.n	8005a92 <_printf_i+0xc2>
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	e002      	b.n	8005a98 <_printf_i+0xc8>
 8005a92:	0668      	lsls	r0, r5, #25
 8005a94:	d5fb      	bpl.n	8005a8e <_printf_i+0xbe>
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	296f      	cmp	r1, #111	; 0x6f
 8005a9a:	bf14      	ite	ne
 8005a9c:	220a      	movne	r2, #10
 8005a9e:	2208      	moveq	r2, #8
 8005aa0:	4852      	ldr	r0, [pc, #328]	; (8005bec <_printf_i+0x21c>)
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aa8:	6865      	ldr	r5, [r4, #4]
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	60a5      	str	r5, [r4, #8]
 8005aae:	f2c0 8095 	blt.w	8005bdc <_printf_i+0x20c>
 8005ab2:	6821      	ldr	r1, [r4, #0]
 8005ab4:	f021 0104 	bic.w	r1, r1, #4
 8005ab8:	6021      	str	r1, [r4, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d13d      	bne.n	8005b3a <_printf_i+0x16a>
 8005abe:	2d00      	cmp	r5, #0
 8005ac0:	f040 808e 	bne.w	8005be0 <_printf_i+0x210>
 8005ac4:	4665      	mov	r5, ip
 8005ac6:	2a08      	cmp	r2, #8
 8005ac8:	d10b      	bne.n	8005ae2 <_printf_i+0x112>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	07db      	lsls	r3, r3, #31
 8005ace:	d508      	bpl.n	8005ae2 <_printf_i+0x112>
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	6862      	ldr	r2, [r4, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	bfde      	ittt	le
 8005ad8:	2330      	movle	r3, #48	; 0x30
 8005ada:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ade:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ae2:	ebac 0305 	sub.w	r3, ip, r5
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	f8cd 8000 	str.w	r8, [sp]
 8005aec:	463b      	mov	r3, r7
 8005aee:	aa03      	add	r2, sp, #12
 8005af0:	4621      	mov	r1, r4
 8005af2:	4630      	mov	r0, r6
 8005af4:	f7ff fef6 	bl	80058e4 <_printf_common>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d14d      	bne.n	8005b98 <_printf_i+0x1c8>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	b005      	add	sp, #20
 8005b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b06:	4839      	ldr	r0, [pc, #228]	; (8005bec <_printf_i+0x21c>)
 8005b08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b0c:	6813      	ldr	r3, [r2, #0]
 8005b0e:	6821      	ldr	r1, [r4, #0]
 8005b10:	1d1d      	adds	r5, r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6015      	str	r5, [r2, #0]
 8005b16:	060a      	lsls	r2, r1, #24
 8005b18:	d50b      	bpl.n	8005b32 <_printf_i+0x162>
 8005b1a:	07ca      	lsls	r2, r1, #31
 8005b1c:	bf44      	itt	mi
 8005b1e:	f041 0120 	orrmi.w	r1, r1, #32
 8005b22:	6021      	strmi	r1, [r4, #0]
 8005b24:	b91b      	cbnz	r3, 8005b2e <_printf_i+0x15e>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	f022 0220 	bic.w	r2, r2, #32
 8005b2c:	6022      	str	r2, [r4, #0]
 8005b2e:	2210      	movs	r2, #16
 8005b30:	e7b7      	b.n	8005aa2 <_printf_i+0xd2>
 8005b32:	064d      	lsls	r5, r1, #25
 8005b34:	bf48      	it	mi
 8005b36:	b29b      	uxthmi	r3, r3
 8005b38:	e7ef      	b.n	8005b1a <_printf_i+0x14a>
 8005b3a:	4665      	mov	r5, ip
 8005b3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b40:	fb02 3311 	mls	r3, r2, r1, r3
 8005b44:	5cc3      	ldrb	r3, [r0, r3]
 8005b46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	d1f5      	bne.n	8005b3c <_printf_i+0x16c>
 8005b50:	e7b9      	b.n	8005ac6 <_printf_i+0xf6>
 8005b52:	6813      	ldr	r3, [r2, #0]
 8005b54:	6825      	ldr	r5, [r4, #0]
 8005b56:	1d18      	adds	r0, r3, #4
 8005b58:	6961      	ldr	r1, [r4, #20]
 8005b5a:	6010      	str	r0, [r2, #0]
 8005b5c:	0628      	lsls	r0, r5, #24
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	d501      	bpl.n	8005b66 <_printf_i+0x196>
 8005b62:	6019      	str	r1, [r3, #0]
 8005b64:	e002      	b.n	8005b6c <_printf_i+0x19c>
 8005b66:	066a      	lsls	r2, r5, #25
 8005b68:	d5fb      	bpl.n	8005b62 <_printf_i+0x192>
 8005b6a:	8019      	strh	r1, [r3, #0]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4665      	mov	r5, ip
 8005b70:	6123      	str	r3, [r4, #16]
 8005b72:	e7b9      	b.n	8005ae8 <_printf_i+0x118>
 8005b74:	6813      	ldr	r3, [r2, #0]
 8005b76:	1d19      	adds	r1, r3, #4
 8005b78:	6011      	str	r1, [r2, #0]
 8005b7a:	681d      	ldr	r5, [r3, #0]
 8005b7c:	6862      	ldr	r2, [r4, #4]
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4628      	mov	r0, r5
 8005b82:	f001 f971 	bl	8006e68 <memchr>
 8005b86:	b108      	cbz	r0, 8005b8c <_printf_i+0x1bc>
 8005b88:	1b40      	subs	r0, r0, r5
 8005b8a:	6060      	str	r0, [r4, #4]
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	6123      	str	r3, [r4, #16]
 8005b90:	2300      	movs	r3, #0
 8005b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b96:	e7a7      	b.n	8005ae8 <_printf_i+0x118>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	462a      	mov	r2, r5
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	47c0      	blx	r8
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	d0aa      	beq.n	8005afc <_printf_i+0x12c>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	079b      	lsls	r3, r3, #30
 8005baa:	d413      	bmi.n	8005bd4 <_printf_i+0x204>
 8005bac:	68e0      	ldr	r0, [r4, #12]
 8005bae:	9b03      	ldr	r3, [sp, #12]
 8005bb0:	4298      	cmp	r0, r3
 8005bb2:	bfb8      	it	lt
 8005bb4:	4618      	movlt	r0, r3
 8005bb6:	e7a3      	b.n	8005b00 <_printf_i+0x130>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	464a      	mov	r2, r9
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	47c0      	blx	r8
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d09a      	beq.n	8005afc <_printf_i+0x12c>
 8005bc6:	3501      	adds	r5, #1
 8005bc8:	68e3      	ldr	r3, [r4, #12]
 8005bca:	9a03      	ldr	r2, [sp, #12]
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	42ab      	cmp	r3, r5
 8005bd0:	dcf2      	bgt.n	8005bb8 <_printf_i+0x1e8>
 8005bd2:	e7eb      	b.n	8005bac <_printf_i+0x1dc>
 8005bd4:	2500      	movs	r5, #0
 8005bd6:	f104 0919 	add.w	r9, r4, #25
 8005bda:	e7f5      	b.n	8005bc8 <_printf_i+0x1f8>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ac      	bne.n	8005b3a <_printf_i+0x16a>
 8005be0:	7803      	ldrb	r3, [r0, #0]
 8005be2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bea:	e76c      	b.n	8005ac6 <_printf_i+0xf6>
 8005bec:	08007c82 	.word	0x08007c82
 8005bf0:	08007c93 	.word	0x08007c93

08005bf4 <iprintf>:
 8005bf4:	b40f      	push	{r0, r1, r2, r3}
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <iprintf+0x2c>)
 8005bf8:	b513      	push	{r0, r1, r4, lr}
 8005bfa:	681c      	ldr	r4, [r3, #0]
 8005bfc:	b124      	cbz	r4, 8005c08 <iprintf+0x14>
 8005bfe:	69a3      	ldr	r3, [r4, #24]
 8005c00:	b913      	cbnz	r3, 8005c08 <iprintf+0x14>
 8005c02:	4620      	mov	r0, r4
 8005c04:	f001 f82c 	bl	8006c60 <__sinit>
 8005c08:	ab05      	add	r3, sp, #20
 8005c0a:	9a04      	ldr	r2, [sp, #16]
 8005c0c:	68a1      	ldr	r1, [r4, #8]
 8005c0e:	4620      	mov	r0, r4
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	f001 fcfb 	bl	800760c <_vfiprintf_r>
 8005c16:	b002      	add	sp, #8
 8005c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1c:	b004      	add	sp, #16
 8005c1e:	4770      	bx	lr
 8005c20:	20000018 	.word	0x20000018

08005c24 <setvbuf>:
 8005c24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c28:	461d      	mov	r5, r3
 8005c2a:	4b51      	ldr	r3, [pc, #324]	; (8005d70 <setvbuf+0x14c>)
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	681e      	ldr	r6, [r3, #0]
 8005c30:	460f      	mov	r7, r1
 8005c32:	4690      	mov	r8, r2
 8005c34:	b126      	cbz	r6, 8005c40 <setvbuf+0x1c>
 8005c36:	69b3      	ldr	r3, [r6, #24]
 8005c38:	b913      	cbnz	r3, 8005c40 <setvbuf+0x1c>
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f001 f810 	bl	8006c60 <__sinit>
 8005c40:	4b4c      	ldr	r3, [pc, #304]	; (8005d74 <setvbuf+0x150>)
 8005c42:	429c      	cmp	r4, r3
 8005c44:	d152      	bne.n	8005cec <setvbuf+0xc8>
 8005c46:	6874      	ldr	r4, [r6, #4]
 8005c48:	f1b8 0f02 	cmp.w	r8, #2
 8005c4c:	d006      	beq.n	8005c5c <setvbuf+0x38>
 8005c4e:	f1b8 0f01 	cmp.w	r8, #1
 8005c52:	f200 8089 	bhi.w	8005d68 <setvbuf+0x144>
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	f2c0 8086 	blt.w	8005d68 <setvbuf+0x144>
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f000 ff94 	bl	8006b8c <_fflush_r>
 8005c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c66:	b141      	cbz	r1, 8005c7a <setvbuf+0x56>
 8005c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c6c:	4299      	cmp	r1, r3
 8005c6e:	d002      	beq.n	8005c76 <setvbuf+0x52>
 8005c70:	4630      	mov	r0, r6
 8005c72:	f001 fbfd 	bl	8007470 <_free_r>
 8005c76:	2300      	movs	r3, #0
 8005c78:	6363      	str	r3, [r4, #52]	; 0x34
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61a3      	str	r3, [r4, #24]
 8005c7e:	6063      	str	r3, [r4, #4]
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	061b      	lsls	r3, r3, #24
 8005c84:	d503      	bpl.n	8005c8e <setvbuf+0x6a>
 8005c86:	6921      	ldr	r1, [r4, #16]
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f001 fbf1 	bl	8007470 <_free_r>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f1b8 0f02 	cmp.w	r8, #2
 8005c94:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005c98:	f023 0303 	bic.w	r3, r3, #3
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	d05d      	beq.n	8005d5c <setvbuf+0x138>
 8005ca0:	ab01      	add	r3, sp, #4
 8005ca2:	466a      	mov	r2, sp
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f001 f872 	bl	8006d90 <__swhatbuf_r>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	4318      	orrs	r0, r3
 8005cb0:	81a0      	strh	r0, [r4, #12]
 8005cb2:	bb2d      	cbnz	r5, 8005d00 <setvbuf+0xdc>
 8005cb4:	9d00      	ldr	r5, [sp, #0]
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f001 f8ce 	bl	8006e58 <malloc>
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d14e      	bne.n	8005d60 <setvbuf+0x13c>
 8005cc2:	f8dd 9000 	ldr.w	r9, [sp]
 8005cc6:	45a9      	cmp	r9, r5
 8005cc8:	d13c      	bne.n	8005d44 <setvbuf+0x120>
 8005cca:	f04f 30ff 	mov.w	r0, #4294967295
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60a3      	str	r3, [r4, #8]
 8005cda:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	6163      	str	r3, [r4, #20]
 8005ce6:	b003      	add	sp, #12
 8005ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cec:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <setvbuf+0x154>)
 8005cee:	429c      	cmp	r4, r3
 8005cf0:	d101      	bne.n	8005cf6 <setvbuf+0xd2>
 8005cf2:	68b4      	ldr	r4, [r6, #8]
 8005cf4:	e7a8      	b.n	8005c48 <setvbuf+0x24>
 8005cf6:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <setvbuf+0x158>)
 8005cf8:	429c      	cmp	r4, r3
 8005cfa:	bf08      	it	eq
 8005cfc:	68f4      	ldreq	r4, [r6, #12]
 8005cfe:	e7a3      	b.n	8005c48 <setvbuf+0x24>
 8005d00:	2f00      	cmp	r7, #0
 8005d02:	d0d8      	beq.n	8005cb6 <setvbuf+0x92>
 8005d04:	69b3      	ldr	r3, [r6, #24]
 8005d06:	b913      	cbnz	r3, 8005d0e <setvbuf+0xea>
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 ffa9 	bl	8006c60 <__sinit>
 8005d0e:	f1b8 0f01 	cmp.w	r8, #1
 8005d12:	bf08      	it	eq
 8005d14:	89a3      	ldrheq	r3, [r4, #12]
 8005d16:	6027      	str	r7, [r4, #0]
 8005d18:	bf04      	itt	eq
 8005d1a:	f043 0301 	orreq.w	r3, r3, #1
 8005d1e:	81a3      	strheq	r3, [r4, #12]
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005d26:	f013 0008 	ands.w	r0, r3, #8
 8005d2a:	d01b      	beq.n	8005d64 <setvbuf+0x140>
 8005d2c:	f013 0001 	ands.w	r0, r3, #1
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	bf1f      	itttt	ne
 8005d36:	426d      	negne	r5, r5
 8005d38:	60a3      	strne	r3, [r4, #8]
 8005d3a:	61a5      	strne	r5, [r4, #24]
 8005d3c:	4618      	movne	r0, r3
 8005d3e:	bf08      	it	eq
 8005d40:	60a5      	streq	r5, [r4, #8]
 8005d42:	e7d0      	b.n	8005ce6 <setvbuf+0xc2>
 8005d44:	4648      	mov	r0, r9
 8005d46:	f001 f887 	bl	8006e58 <malloc>
 8005d4a:	4607      	mov	r7, r0
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d0bc      	beq.n	8005cca <setvbuf+0xa6>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	464d      	mov	r5, r9
 8005d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d58:	81a3      	strh	r3, [r4, #12]
 8005d5a:	e7d3      	b.n	8005d04 <setvbuf+0xe0>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e7b6      	b.n	8005cce <setvbuf+0xaa>
 8005d60:	46a9      	mov	r9, r5
 8005d62:	e7f5      	b.n	8005d50 <setvbuf+0x12c>
 8005d64:	60a0      	str	r0, [r4, #8]
 8005d66:	e7be      	b.n	8005ce6 <setvbuf+0xc2>
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	e7bb      	b.n	8005ce6 <setvbuf+0xc2>
 8005d6e:	bf00      	nop
 8005d70:	20000018 	.word	0x20000018
 8005d74:	08007cf8 	.word	0x08007cf8
 8005d78:	08007d18 	.word	0x08007d18
 8005d7c:	08007cd8 	.word	0x08007cd8

08005d80 <__utoa>:
 8005d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d82:	b08b      	sub	sp, #44	; 0x2c
 8005d84:	4605      	mov	r5, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	466e      	mov	r6, sp
 8005d8a:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <__utoa+0x78>)
 8005d8c:	f103 0c20 	add.w	ip, r3, #32
 8005d90:	4637      	mov	r7, r6
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	3308      	adds	r3, #8
 8005d98:	c703      	stmia	r7!, {r0, r1}
 8005d9a:	4563      	cmp	r3, ip
 8005d9c:	463e      	mov	r6, r7
 8005d9e:	d1f7      	bne.n	8005d90 <__utoa+0x10>
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	791b      	ldrb	r3, [r3, #4]
 8005da4:	6038      	str	r0, [r7, #0]
 8005da6:	713b      	strb	r3, [r7, #4]
 8005da8:	1e93      	subs	r3, r2, #2
 8005daa:	2b22      	cmp	r3, #34	; 0x22
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	d904      	bls.n	8005dbc <__utoa+0x3c>
 8005db2:	7023      	strb	r3, [r4, #0]
 8005db4:	461c      	mov	r4, r3
 8005db6:	4620      	mov	r0, r4
 8005db8:	b00b      	add	sp, #44	; 0x2c
 8005dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbc:	1e66      	subs	r6, r4, #1
 8005dbe:	fbb5 f0f2 	udiv	r0, r5, r2
 8005dc2:	fb02 5510 	mls	r5, r2, r0, r5
 8005dc6:	af0a      	add	r7, sp, #40	; 0x28
 8005dc8:	443d      	add	r5, r7
 8005dca:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	f806 5f01 	strb.w	r5, [r6, #1]!
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	b968      	cbnz	r0, 8005df4 <__utoa+0x74>
 8005dd8:	4622      	mov	r2, r4
 8005dda:	5460      	strb	r0, [r4, r1]
 8005ddc:	4423      	add	r3, r4
 8005dde:	1b19      	subs	r1, r3, r4
 8005de0:	1b10      	subs	r0, r2, r4
 8005de2:	4281      	cmp	r1, r0
 8005de4:	dde7      	ble.n	8005db6 <__utoa+0x36>
 8005de6:	7811      	ldrb	r1, [r2, #0]
 8005de8:	7818      	ldrb	r0, [r3, #0]
 8005dea:	f802 0b01 	strb.w	r0, [r2], #1
 8005dee:	f803 1901 	strb.w	r1, [r3], #-1
 8005df2:	e7f4      	b.n	8005dde <__utoa+0x5e>
 8005df4:	460b      	mov	r3, r1
 8005df6:	e7e2      	b.n	8005dbe <__utoa+0x3e>
 8005df8:	08007ca4 	.word	0x08007ca4

08005dfc <quorem>:
 8005dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e00:	6903      	ldr	r3, [r0, #16]
 8005e02:	690c      	ldr	r4, [r1, #16]
 8005e04:	4680      	mov	r8, r0
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	f2c0 8084 	blt.w	8005f14 <quorem+0x118>
 8005e0c:	3c01      	subs	r4, #1
 8005e0e:	f101 0714 	add.w	r7, r1, #20
 8005e12:	f100 0614 	add.w	r6, r0, #20
 8005e16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005e1e:	3501      	adds	r5, #1
 8005e20:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e24:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005e28:	eb06 030c 	add.w	r3, r6, ip
 8005e2c:	eb07 090c 	add.w	r9, r7, ip
 8005e30:	9301      	str	r3, [sp, #4]
 8005e32:	b39d      	cbz	r5, 8005e9c <quorem+0xa0>
 8005e34:	f04f 0a00 	mov.w	sl, #0
 8005e38:	4638      	mov	r0, r7
 8005e3a:	46b6      	mov	lr, r6
 8005e3c:	46d3      	mov	fp, sl
 8005e3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e42:	b293      	uxth	r3, r2
 8005e44:	fb05 a303 	mla	r3, r5, r3, sl
 8005e48:	0c12      	lsrs	r2, r2, #16
 8005e4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e4e:	fb05 a202 	mla	r2, r5, r2, sl
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	ebab 0303 	sub.w	r3, fp, r3
 8005e58:	f8de b000 	ldr.w	fp, [lr]
 8005e5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005e60:	fa1f fb8b 	uxth.w	fp, fp
 8005e64:	445b      	add	r3, fp
 8005e66:	fa1f fb82 	uxth.w	fp, r2
 8005e6a:	f8de 2000 	ldr.w	r2, [lr]
 8005e6e:	4581      	cmp	r9, r0
 8005e70:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e7e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005e82:	f84e 3b04 	str.w	r3, [lr], #4
 8005e86:	d2da      	bcs.n	8005e3e <quorem+0x42>
 8005e88:	f856 300c 	ldr.w	r3, [r6, ip]
 8005e8c:	b933      	cbnz	r3, 8005e9c <quorem+0xa0>
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	3b04      	subs	r3, #4
 8005e92:	429e      	cmp	r6, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	d331      	bcc.n	8005efc <quorem+0x100>
 8005e98:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	f001 fa11 	bl	80072c4 <__mcmp>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	db26      	blt.n	8005ef4 <quorem+0xf8>
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f04f 0c00 	mov.w	ip, #0
 8005eac:	3501      	adds	r5, #1
 8005eae:	f857 1b04 	ldr.w	r1, [r7], #4
 8005eb2:	f8d0 e000 	ldr.w	lr, [r0]
 8005eb6:	b28b      	uxth	r3, r1
 8005eb8:	ebac 0303 	sub.w	r3, ip, r3
 8005ebc:	fa1f f28e 	uxth.w	r2, lr
 8005ec0:	4413      	add	r3, r2
 8005ec2:	0c0a      	lsrs	r2, r1, #16
 8005ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed2:	45b9      	cmp	r9, r7
 8005ed4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ed8:	f840 3b04 	str.w	r3, [r0], #4
 8005edc:	d2e7      	bcs.n	8005eae <quorem+0xb2>
 8005ede:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005ee2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ee6:	b92a      	cbnz	r2, 8005ef4 <quorem+0xf8>
 8005ee8:	3b04      	subs	r3, #4
 8005eea:	429e      	cmp	r6, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	d30b      	bcc.n	8005f08 <quorem+0x10c>
 8005ef0:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	b003      	add	sp, #12
 8005ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	3b04      	subs	r3, #4
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	d1c9      	bne.n	8005e98 <quorem+0x9c>
 8005f04:	3c01      	subs	r4, #1
 8005f06:	e7c4      	b.n	8005e92 <quorem+0x96>
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	3b04      	subs	r3, #4
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d1ef      	bne.n	8005ef0 <quorem+0xf4>
 8005f10:	3c01      	subs	r4, #1
 8005f12:	e7ea      	b.n	8005eea <quorem+0xee>
 8005f14:	2000      	movs	r0, #0
 8005f16:	e7ee      	b.n	8005ef6 <quorem+0xfa>

08005f18 <_dtoa_r>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	461f      	mov	r7, r3
 8005f20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f22:	b095      	sub	sp, #84	; 0x54
 8005f24:	4604      	mov	r4, r0
 8005f26:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005f2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005f2e:	b93d      	cbnz	r5, 8005f40 <_dtoa_r+0x28>
 8005f30:	2010      	movs	r0, #16
 8005f32:	f000 ff91 	bl	8006e58 <malloc>
 8005f36:	6260      	str	r0, [r4, #36]	; 0x24
 8005f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f3c:	6005      	str	r5, [r0, #0]
 8005f3e:	60c5      	str	r5, [r0, #12]
 8005f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	b151      	cbz	r1, 8005f5c <_dtoa_r+0x44>
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	2301      	movs	r3, #1
 8005f4a:	4093      	lsls	r3, r2
 8005f4c:	604a      	str	r2, [r1, #4]
 8005f4e:	608b      	str	r3, [r1, #8]
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 ffd6 	bl	8006f02 <_Bfree>
 8005f56:	2200      	movs	r2, #0
 8005f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	1e3b      	subs	r3, r7, #0
 8005f5e:	bfaf      	iteee	ge
 8005f60:	2300      	movge	r3, #0
 8005f62:	2201      	movlt	r2, #1
 8005f64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f68:	9303      	strlt	r3, [sp, #12]
 8005f6a:	bfac      	ite	ge
 8005f6c:	f8c8 3000 	strge.w	r3, [r8]
 8005f70:	f8c8 2000 	strlt.w	r2, [r8]
 8005f74:	4bae      	ldr	r3, [pc, #696]	; (8006230 <_dtoa_r+0x318>)
 8005f76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f7a:	ea33 0308 	bics.w	r3, r3, r8
 8005f7e:	d11b      	bne.n	8005fb8 <_dtoa_r+0xa0>
 8005f80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	9b02      	ldr	r3, [sp, #8]
 8005f8a:	b923      	cbnz	r3, 8005f96 <_dtoa_r+0x7e>
 8005f8c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f000 8545 	beq.w	8006a20 <_dtoa_r+0xb08>
 8005f96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f98:	b953      	cbnz	r3, 8005fb0 <_dtoa_r+0x98>
 8005f9a:	4ba6      	ldr	r3, [pc, #664]	; (8006234 <_dtoa_r+0x31c>)
 8005f9c:	e021      	b.n	8005fe2 <_dtoa_r+0xca>
 8005f9e:	4ba6      	ldr	r3, [pc, #664]	; (8006238 <_dtoa_r+0x320>)
 8005fa0:	9306      	str	r3, [sp, #24]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	9806      	ldr	r0, [sp, #24]
 8005faa:	b015      	add	sp, #84	; 0x54
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	4ba0      	ldr	r3, [pc, #640]	; (8006234 <_dtoa_r+0x31c>)
 8005fb2:	9306      	str	r3, [sp, #24]
 8005fb4:	3303      	adds	r3, #3
 8005fb6:	e7f5      	b.n	8005fa4 <_dtoa_r+0x8c>
 8005fb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa fcf0 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc8:	4682      	mov	sl, r0
 8005fca:	b160      	cbz	r0, 8005fe6 <_dtoa_r+0xce>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fd0:	6013      	str	r3, [r2, #0]
 8005fd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8520 	beq.w	8006a1a <_dtoa_r+0xb02>
 8005fda:	4b98      	ldr	r3, [pc, #608]	; (800623c <_dtoa_r+0x324>)
 8005fdc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	e7e0      	b.n	8005fa8 <_dtoa_r+0x90>
 8005fe6:	ab12      	add	r3, sp, #72	; 0x48
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	ab13      	add	r3, sp, #76	; 0x4c
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	4632      	mov	r2, r6
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f001 f9de 	bl	80073b4 <__d2b>
 8005ff8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ffc:	4683      	mov	fp, r0
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	d07d      	beq.n	80060fe <_dtoa_r+0x1e6>
 8006002:	46b0      	mov	r8, r6
 8006004:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006008:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800600c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006010:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006014:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006018:	2200      	movs	r2, #0
 800601a:	4b89      	ldr	r3, [pc, #548]	; (8006240 <_dtoa_r+0x328>)
 800601c:	4640      	mov	r0, r8
 800601e:	4649      	mov	r1, r9
 8006020:	f7fa f8a2 	bl	8000168 <__aeabi_dsub>
 8006024:	a37c      	add	r3, pc, #496	; (adr r3, 8006218 <_dtoa_r+0x300>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f7fa fa55 	bl	80004d8 <__aeabi_dmul>
 800602e:	a37c      	add	r3, pc, #496	; (adr r3, 8006220 <_dtoa_r+0x308>)
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f7fa f89a 	bl	800016c <__adddf3>
 8006038:	4606      	mov	r6, r0
 800603a:	4628      	mov	r0, r5
 800603c:	460f      	mov	r7, r1
 800603e:	f7fa f9e1 	bl	8000404 <__aeabi_i2d>
 8006042:	a379      	add	r3, pc, #484	; (adr r3, 8006228 <_dtoa_r+0x310>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa fa46 	bl	80004d8 <__aeabi_dmul>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4630      	mov	r0, r6
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa f88a 	bl	800016c <__adddf3>
 8006058:	4606      	mov	r6, r0
 800605a:	460f      	mov	r7, r1
 800605c:	f7fa fcec 	bl	8000a38 <__aeabi_d2iz>
 8006060:	2200      	movs	r2, #0
 8006062:	4682      	mov	sl, r0
 8006064:	2300      	movs	r3, #0
 8006066:	4630      	mov	r0, r6
 8006068:	4639      	mov	r1, r7
 800606a:	f7fa fca7 	bl	80009bc <__aeabi_dcmplt>
 800606e:	b148      	cbz	r0, 8006084 <_dtoa_r+0x16c>
 8006070:	4650      	mov	r0, sl
 8006072:	f7fa f9c7 	bl	8000404 <__aeabi_i2d>
 8006076:	4632      	mov	r2, r6
 8006078:	463b      	mov	r3, r7
 800607a:	f7fa fc95 	bl	80009a8 <__aeabi_dcmpeq>
 800607e:	b908      	cbnz	r0, 8006084 <_dtoa_r+0x16c>
 8006080:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006084:	f1ba 0f16 	cmp.w	sl, #22
 8006088:	d85a      	bhi.n	8006140 <_dtoa_r+0x228>
 800608a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800608e:	496d      	ldr	r1, [pc, #436]	; (8006244 <_dtoa_r+0x32c>)
 8006090:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006098:	f7fa fcae 	bl	80009f8 <__aeabi_dcmpgt>
 800609c:	2800      	cmp	r0, #0
 800609e:	d051      	beq.n	8006144 <_dtoa_r+0x22c>
 80060a0:	2300      	movs	r3, #0
 80060a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060a6:	930d      	str	r3, [sp, #52]	; 0x34
 80060a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060aa:	1b5d      	subs	r5, r3, r5
 80060ac:	1e6b      	subs	r3, r5, #1
 80060ae:	9307      	str	r3, [sp, #28]
 80060b0:	bf43      	ittte	mi
 80060b2:	2300      	movmi	r3, #0
 80060b4:	f1c5 0901 	rsbmi	r9, r5, #1
 80060b8:	9307      	strmi	r3, [sp, #28]
 80060ba:	f04f 0900 	movpl.w	r9, #0
 80060be:	f1ba 0f00 	cmp.w	sl, #0
 80060c2:	db41      	blt.n	8006148 <_dtoa_r+0x230>
 80060c4:	9b07      	ldr	r3, [sp, #28]
 80060c6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80060ca:	4453      	add	r3, sl
 80060cc:	9307      	str	r3, [sp, #28]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9308      	str	r3, [sp, #32]
 80060d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	f200 808f 	bhi.w	80061f8 <_dtoa_r+0x2e0>
 80060da:	2b05      	cmp	r3, #5
 80060dc:	bfc4      	itt	gt
 80060de:	3b04      	subgt	r3, #4
 80060e0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80060e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80060e4:	bfc8      	it	gt
 80060e6:	2500      	movgt	r5, #0
 80060e8:	f1a3 0302 	sub.w	r3, r3, #2
 80060ec:	bfd8      	it	le
 80060ee:	2501      	movle	r5, #1
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	f200 808d 	bhi.w	8006210 <_dtoa_r+0x2f8>
 80060f6:	e8df f003 	tbb	[pc, r3]
 80060fa:	7d7b      	.short	0x7d7b
 80060fc:	6f2f      	.short	0x6f2f
 80060fe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006102:	441d      	add	r5, r3
 8006104:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006108:	2820      	cmp	r0, #32
 800610a:	dd13      	ble.n	8006134 <_dtoa_r+0x21c>
 800610c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006110:	9b02      	ldr	r3, [sp, #8]
 8006112:	fa08 f800 	lsl.w	r8, r8, r0
 8006116:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800611a:	fa23 f000 	lsr.w	r0, r3, r0
 800611e:	ea48 0000 	orr.w	r0, r8, r0
 8006122:	f7fa f95f 	bl	80003e4 <__aeabi_ui2d>
 8006126:	2301      	movs	r3, #1
 8006128:	4680      	mov	r8, r0
 800612a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800612e:	3d01      	subs	r5, #1
 8006130:	9310      	str	r3, [sp, #64]	; 0x40
 8006132:	e771      	b.n	8006018 <_dtoa_r+0x100>
 8006134:	9b02      	ldr	r3, [sp, #8]
 8006136:	f1c0 0020 	rsb	r0, r0, #32
 800613a:	fa03 f000 	lsl.w	r0, r3, r0
 800613e:	e7f0      	b.n	8006122 <_dtoa_r+0x20a>
 8006140:	2301      	movs	r3, #1
 8006142:	e7b0      	b.n	80060a6 <_dtoa_r+0x18e>
 8006144:	900d      	str	r0, [sp, #52]	; 0x34
 8006146:	e7af      	b.n	80060a8 <_dtoa_r+0x190>
 8006148:	f1ca 0300 	rsb	r3, sl, #0
 800614c:	9308      	str	r3, [sp, #32]
 800614e:	2300      	movs	r3, #0
 8006150:	eba9 090a 	sub.w	r9, r9, sl
 8006154:	930c      	str	r3, [sp, #48]	; 0x30
 8006156:	e7bc      	b.n	80060d2 <_dtoa_r+0x1ba>
 8006158:	2301      	movs	r3, #1
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd74      	ble.n	800624c <_dtoa_r+0x334>
 8006162:	4698      	mov	r8, r3
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	2200      	movs	r2, #0
 8006168:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800616a:	6072      	str	r2, [r6, #4]
 800616c:	2204      	movs	r2, #4
 800616e:	f102 0014 	add.w	r0, r2, #20
 8006172:	4298      	cmp	r0, r3
 8006174:	6871      	ldr	r1, [r6, #4]
 8006176:	d96e      	bls.n	8006256 <_dtoa_r+0x33e>
 8006178:	4620      	mov	r0, r4
 800617a:	f000 fe8e 	bl	8006e9a <_Balloc>
 800617e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006180:	6030      	str	r0, [r6, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f1b8 0f0e 	cmp.w	r8, #14
 8006188:	9306      	str	r3, [sp, #24]
 800618a:	f200 80ed 	bhi.w	8006368 <_dtoa_r+0x450>
 800618e:	2d00      	cmp	r5, #0
 8006190:	f000 80ea 	beq.w	8006368 <_dtoa_r+0x450>
 8006194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006198:	f1ba 0f00 	cmp.w	sl, #0
 800619c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80061a0:	dd77      	ble.n	8006292 <_dtoa_r+0x37a>
 80061a2:	4a28      	ldr	r2, [pc, #160]	; (8006244 <_dtoa_r+0x32c>)
 80061a4:	f00a 030f 	and.w	r3, sl, #15
 80061a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80061ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061b0:	06f0      	lsls	r0, r6, #27
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80061ba:	d568      	bpl.n	800628e <_dtoa_r+0x376>
 80061bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80061c0:	4b21      	ldr	r3, [pc, #132]	; (8006248 <_dtoa_r+0x330>)
 80061c2:	2503      	movs	r5, #3
 80061c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061c8:	f7fa fab0 	bl	800072c <__aeabi_ddiv>
 80061cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d0:	f006 060f 	and.w	r6, r6, #15
 80061d4:	4f1c      	ldr	r7, [pc, #112]	; (8006248 <_dtoa_r+0x330>)
 80061d6:	e04f      	b.n	8006278 <_dtoa_r+0x360>
 80061d8:	2301      	movs	r3, #1
 80061da:	9309      	str	r3, [sp, #36]	; 0x24
 80061dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80061de:	4453      	add	r3, sl
 80061e0:	f103 0801 	add.w	r8, r3, #1
 80061e4:	9304      	str	r3, [sp, #16]
 80061e6:	4643      	mov	r3, r8
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	bfb8      	it	lt
 80061ec:	2301      	movlt	r3, #1
 80061ee:	e7ba      	b.n	8006166 <_dtoa_r+0x24e>
 80061f0:	2300      	movs	r3, #0
 80061f2:	e7b2      	b.n	800615a <_dtoa_r+0x242>
 80061f4:	2300      	movs	r3, #0
 80061f6:	e7f0      	b.n	80061da <_dtoa_r+0x2c2>
 80061f8:	2501      	movs	r5, #1
 80061fa:	2300      	movs	r3, #0
 80061fc:	9509      	str	r5, [sp, #36]	; 0x24
 80061fe:	931e      	str	r3, [sp, #120]	; 0x78
 8006200:	f04f 33ff 	mov.w	r3, #4294967295
 8006204:	2200      	movs	r2, #0
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	4698      	mov	r8, r3
 800620a:	2312      	movs	r3, #18
 800620c:	921f      	str	r2, [sp, #124]	; 0x7c
 800620e:	e7aa      	b.n	8006166 <_dtoa_r+0x24e>
 8006210:	2301      	movs	r3, #1
 8006212:	9309      	str	r3, [sp, #36]	; 0x24
 8006214:	e7f4      	b.n	8006200 <_dtoa_r+0x2e8>
 8006216:	bf00      	nop
 8006218:	636f4361 	.word	0x636f4361
 800621c:	3fd287a7 	.word	0x3fd287a7
 8006220:	8b60c8b3 	.word	0x8b60c8b3
 8006224:	3fc68a28 	.word	0x3fc68a28
 8006228:	509f79fb 	.word	0x509f79fb
 800622c:	3fd34413 	.word	0x3fd34413
 8006230:	7ff00000 	.word	0x7ff00000
 8006234:	08007cd2 	.word	0x08007cd2
 8006238:	08007cc9 	.word	0x08007cc9
 800623c:	08007c81 	.word	0x08007c81
 8006240:	3ff80000 	.word	0x3ff80000
 8006244:	08007d60 	.word	0x08007d60
 8006248:	08007d38 	.word	0x08007d38
 800624c:	2301      	movs	r3, #1
 800624e:	9304      	str	r3, [sp, #16]
 8006250:	4698      	mov	r8, r3
 8006252:	461a      	mov	r2, r3
 8006254:	e7da      	b.n	800620c <_dtoa_r+0x2f4>
 8006256:	3101      	adds	r1, #1
 8006258:	6071      	str	r1, [r6, #4]
 800625a:	0052      	lsls	r2, r2, #1
 800625c:	e787      	b.n	800616e <_dtoa_r+0x256>
 800625e:	07f1      	lsls	r1, r6, #31
 8006260:	d508      	bpl.n	8006274 <_dtoa_r+0x35c>
 8006262:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626a:	f7fa f935 	bl	80004d8 <__aeabi_dmul>
 800626e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006272:	3501      	adds	r5, #1
 8006274:	1076      	asrs	r6, r6, #1
 8006276:	3708      	adds	r7, #8
 8006278:	2e00      	cmp	r6, #0
 800627a:	d1f0      	bne.n	800625e <_dtoa_r+0x346>
 800627c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006284:	f7fa fa52 	bl	800072c <__aeabi_ddiv>
 8006288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800628c:	e01b      	b.n	80062c6 <_dtoa_r+0x3ae>
 800628e:	2502      	movs	r5, #2
 8006290:	e7a0      	b.n	80061d4 <_dtoa_r+0x2bc>
 8006292:	f000 80a4 	beq.w	80063de <_dtoa_r+0x4c6>
 8006296:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800629a:	f1ca 0600 	rsb	r6, sl, #0
 800629e:	4ba0      	ldr	r3, [pc, #640]	; (8006520 <_dtoa_r+0x608>)
 80062a0:	f006 020f 	and.w	r2, r6, #15
 80062a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f7fa f914 	bl	80004d8 <__aeabi_dmul>
 80062b0:	2502      	movs	r5, #2
 80062b2:	2300      	movs	r3, #0
 80062b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b8:	4f9a      	ldr	r7, [pc, #616]	; (8006524 <_dtoa_r+0x60c>)
 80062ba:	1136      	asrs	r6, r6, #4
 80062bc:	2e00      	cmp	r6, #0
 80062be:	f040 8083 	bne.w	80063c8 <_dtoa_r+0x4b0>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e0      	bne.n	8006288 <_dtoa_r+0x370>
 80062c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 808a 	beq.w	80063e2 <_dtoa_r+0x4ca>
 80062ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80062d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062da:	2200      	movs	r2, #0
 80062dc:	4b92      	ldr	r3, [pc, #584]	; (8006528 <_dtoa_r+0x610>)
 80062de:	f7fa fb6d 	bl	80009bc <__aeabi_dcmplt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d07d      	beq.n	80063e2 <_dtoa_r+0x4ca>
 80062e6:	f1b8 0f00 	cmp.w	r8, #0
 80062ea:	d07a      	beq.n	80063e2 <_dtoa_r+0x4ca>
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dd36      	ble.n	8006360 <_dtoa_r+0x448>
 80062f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062f6:	2200      	movs	r2, #0
 80062f8:	4b8c      	ldr	r3, [pc, #560]	; (800652c <_dtoa_r+0x614>)
 80062fa:	f7fa f8ed 	bl	80004d8 <__aeabi_dmul>
 80062fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006302:	9e04      	ldr	r6, [sp, #16]
 8006304:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006308:	3501      	adds	r5, #1
 800630a:	4628      	mov	r0, r5
 800630c:	f7fa f87a 	bl	8000404 <__aeabi_i2d>
 8006310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006314:	f7fa f8e0 	bl	80004d8 <__aeabi_dmul>
 8006318:	2200      	movs	r2, #0
 800631a:	4b85      	ldr	r3, [pc, #532]	; (8006530 <_dtoa_r+0x618>)
 800631c:	f7f9 ff26 	bl	800016c <__adddf3>
 8006320:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006324:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006328:	950b      	str	r5, [sp, #44]	; 0x2c
 800632a:	2e00      	cmp	r6, #0
 800632c:	d15c      	bne.n	80063e8 <_dtoa_r+0x4d0>
 800632e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	4b7f      	ldr	r3, [pc, #508]	; (8006534 <_dtoa_r+0x61c>)
 8006336:	f7f9 ff17 	bl	8000168 <__aeabi_dsub>
 800633a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800633c:	462b      	mov	r3, r5
 800633e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006342:	f7fa fb59 	bl	80009f8 <__aeabi_dcmpgt>
 8006346:	2800      	cmp	r0, #0
 8006348:	f040 8281 	bne.w	800684e <_dtoa_r+0x936>
 800634c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006352:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006356:	f7fa fb31 	bl	80009bc <__aeabi_dcmplt>
 800635a:	2800      	cmp	r0, #0
 800635c:	f040 8275 	bne.w	800684a <_dtoa_r+0x932>
 8006360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800636a:	2b00      	cmp	r3, #0
 800636c:	f2c0 814b 	blt.w	8006606 <_dtoa_r+0x6ee>
 8006370:	f1ba 0f0e 	cmp.w	sl, #14
 8006374:	f300 8147 	bgt.w	8006606 <_dtoa_r+0x6ee>
 8006378:	4b69      	ldr	r3, [pc, #420]	; (8006520 <_dtoa_r+0x608>)
 800637a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006386:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006388:	2b00      	cmp	r3, #0
 800638a:	f280 80d7 	bge.w	800653c <_dtoa_r+0x624>
 800638e:	f1b8 0f00 	cmp.w	r8, #0
 8006392:	f300 80d3 	bgt.w	800653c <_dtoa_r+0x624>
 8006396:	f040 8257 	bne.w	8006848 <_dtoa_r+0x930>
 800639a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800639e:	2200      	movs	r2, #0
 80063a0:	4b64      	ldr	r3, [pc, #400]	; (8006534 <_dtoa_r+0x61c>)
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063aa:	f7fa fb1b 	bl	80009e4 <__aeabi_dcmpge>
 80063ae:	4646      	mov	r6, r8
 80063b0:	4647      	mov	r7, r8
 80063b2:	2800      	cmp	r0, #0
 80063b4:	f040 822d 	bne.w	8006812 <_dtoa_r+0x8fa>
 80063b8:	9b06      	ldr	r3, [sp, #24]
 80063ba:	9a06      	ldr	r2, [sp, #24]
 80063bc:	1c5d      	adds	r5, r3, #1
 80063be:	2331      	movs	r3, #49	; 0x31
 80063c0:	f10a 0a01 	add.w	sl, sl, #1
 80063c4:	7013      	strb	r3, [r2, #0]
 80063c6:	e228      	b.n	800681a <_dtoa_r+0x902>
 80063c8:	07f2      	lsls	r2, r6, #31
 80063ca:	d505      	bpl.n	80063d8 <_dtoa_r+0x4c0>
 80063cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d0:	f7fa f882 	bl	80004d8 <__aeabi_dmul>
 80063d4:	2301      	movs	r3, #1
 80063d6:	3501      	adds	r5, #1
 80063d8:	1076      	asrs	r6, r6, #1
 80063da:	3708      	adds	r7, #8
 80063dc:	e76e      	b.n	80062bc <_dtoa_r+0x3a4>
 80063de:	2502      	movs	r5, #2
 80063e0:	e771      	b.n	80062c6 <_dtoa_r+0x3ae>
 80063e2:	4657      	mov	r7, sl
 80063e4:	4646      	mov	r6, r8
 80063e6:	e790      	b.n	800630a <_dtoa_r+0x3f2>
 80063e8:	4b4d      	ldr	r3, [pc, #308]	; (8006520 <_dtoa_r+0x608>)
 80063ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063ee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80063f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d048      	beq.n	800648a <_dtoa_r+0x572>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	2000      	movs	r0, #0
 80063fe:	494e      	ldr	r1, [pc, #312]	; (8006538 <_dtoa_r+0x620>)
 8006400:	f7fa f994 	bl	800072c <__aeabi_ddiv>
 8006404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006408:	f7f9 feae 	bl	8000168 <__aeabi_dsub>
 800640c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006410:	9d06      	ldr	r5, [sp, #24]
 8006412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006416:	f7fa fb0f 	bl	8000a38 <__aeabi_d2iz>
 800641a:	9011      	str	r0, [sp, #68]	; 0x44
 800641c:	f7f9 fff2 	bl	8000404 <__aeabi_i2d>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006428:	f7f9 fe9e 	bl	8000168 <__aeabi_dsub>
 800642c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800642e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006432:	3330      	adds	r3, #48	; 0x30
 8006434:	f805 3b01 	strb.w	r3, [r5], #1
 8006438:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800643c:	f7fa fabe 	bl	80009bc <__aeabi_dcmplt>
 8006440:	2800      	cmp	r0, #0
 8006442:	d163      	bne.n	800650c <_dtoa_r+0x5f4>
 8006444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006448:	2000      	movs	r0, #0
 800644a:	4937      	ldr	r1, [pc, #220]	; (8006528 <_dtoa_r+0x610>)
 800644c:	f7f9 fe8c 	bl	8000168 <__aeabi_dsub>
 8006450:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006454:	f7fa fab2 	bl	80009bc <__aeabi_dcmplt>
 8006458:	2800      	cmp	r0, #0
 800645a:	f040 80b5 	bne.w	80065c8 <_dtoa_r+0x6b0>
 800645e:	9b06      	ldr	r3, [sp, #24]
 8006460:	1aeb      	subs	r3, r5, r3
 8006462:	429e      	cmp	r6, r3
 8006464:	f77f af7c 	ble.w	8006360 <_dtoa_r+0x448>
 8006468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800646c:	2200      	movs	r2, #0
 800646e:	4b2f      	ldr	r3, [pc, #188]	; (800652c <_dtoa_r+0x614>)
 8006470:	f7fa f832 	bl	80004d8 <__aeabi_dmul>
 8006474:	2200      	movs	r2, #0
 8006476:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800647a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800647e:	4b2b      	ldr	r3, [pc, #172]	; (800652c <_dtoa_r+0x614>)
 8006480:	f7fa f82a 	bl	80004d8 <__aeabi_dmul>
 8006484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006488:	e7c3      	b.n	8006412 <_dtoa_r+0x4fa>
 800648a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800648e:	f7fa f823 	bl	80004d8 <__aeabi_dmul>
 8006492:	9b06      	ldr	r3, [sp, #24]
 8006494:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006498:	199d      	adds	r5, r3, r6
 800649a:	461e      	mov	r6, r3
 800649c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a0:	f7fa faca 	bl	8000a38 <__aeabi_d2iz>
 80064a4:	9011      	str	r0, [sp, #68]	; 0x44
 80064a6:	f7f9 ffad 	bl	8000404 <__aeabi_i2d>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b2:	f7f9 fe59 	bl	8000168 <__aeabi_dsub>
 80064b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064bc:	3330      	adds	r3, #48	; 0x30
 80064be:	f806 3b01 	strb.w	r3, [r6], #1
 80064c2:	42ae      	cmp	r6, r5
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	d124      	bne.n	8006514 <_dtoa_r+0x5fc>
 80064ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064ce:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <_dtoa_r+0x620>)
 80064d0:	f7f9 fe4c 	bl	800016c <__adddf3>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064dc:	f7fa fa8c 	bl	80009f8 <__aeabi_dcmpgt>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d171      	bne.n	80065c8 <_dtoa_r+0x6b0>
 80064e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064e8:	2000      	movs	r0, #0
 80064ea:	4913      	ldr	r1, [pc, #76]	; (8006538 <_dtoa_r+0x620>)
 80064ec:	f7f9 fe3c 	bl	8000168 <__aeabi_dsub>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f8:	f7fa fa60 	bl	80009bc <__aeabi_dcmplt>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f43f af2f 	beq.w	8006360 <_dtoa_r+0x448>
 8006502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006506:	1e6a      	subs	r2, r5, #1
 8006508:	2b30      	cmp	r3, #48	; 0x30
 800650a:	d001      	beq.n	8006510 <_dtoa_r+0x5f8>
 800650c:	46ba      	mov	sl, r7
 800650e:	e04a      	b.n	80065a6 <_dtoa_r+0x68e>
 8006510:	4615      	mov	r5, r2
 8006512:	e7f6      	b.n	8006502 <_dtoa_r+0x5ea>
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <_dtoa_r+0x614>)
 8006516:	f7f9 ffdf 	bl	80004d8 <__aeabi_dmul>
 800651a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800651e:	e7bd      	b.n	800649c <_dtoa_r+0x584>
 8006520:	08007d60 	.word	0x08007d60
 8006524:	08007d38 	.word	0x08007d38
 8006528:	3ff00000 	.word	0x3ff00000
 800652c:	40240000 	.word	0x40240000
 8006530:	401c0000 	.word	0x401c0000
 8006534:	40140000 	.word	0x40140000
 8006538:	3fe00000 	.word	0x3fe00000
 800653c:	9d06      	ldr	r5, [sp, #24]
 800653e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006546:	4630      	mov	r0, r6
 8006548:	4639      	mov	r1, r7
 800654a:	f7fa f8ef 	bl	800072c <__aeabi_ddiv>
 800654e:	f7fa fa73 	bl	8000a38 <__aeabi_d2iz>
 8006552:	4681      	mov	r9, r0
 8006554:	f7f9 ff56 	bl	8000404 <__aeabi_i2d>
 8006558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800655c:	f7f9 ffbc 	bl	80004d8 <__aeabi_dmul>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4630      	mov	r0, r6
 8006566:	4639      	mov	r1, r7
 8006568:	f7f9 fdfe 	bl	8000168 <__aeabi_dsub>
 800656c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006570:	f805 6b01 	strb.w	r6, [r5], #1
 8006574:	9e06      	ldr	r6, [sp, #24]
 8006576:	4602      	mov	r2, r0
 8006578:	1bae      	subs	r6, r5, r6
 800657a:	45b0      	cmp	r8, r6
 800657c:	460b      	mov	r3, r1
 800657e:	d135      	bne.n	80065ec <_dtoa_r+0x6d4>
 8006580:	f7f9 fdf4 	bl	800016c <__adddf3>
 8006584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006588:	4606      	mov	r6, r0
 800658a:	460f      	mov	r7, r1
 800658c:	f7fa fa34 	bl	80009f8 <__aeabi_dcmpgt>
 8006590:	b9c8      	cbnz	r0, 80065c6 <_dtoa_r+0x6ae>
 8006592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006596:	4630      	mov	r0, r6
 8006598:	4639      	mov	r1, r7
 800659a:	f7fa fa05 	bl	80009a8 <__aeabi_dcmpeq>
 800659e:	b110      	cbz	r0, 80065a6 <_dtoa_r+0x68e>
 80065a0:	f019 0f01 	tst.w	r9, #1
 80065a4:	d10f      	bne.n	80065c6 <_dtoa_r+0x6ae>
 80065a6:	4659      	mov	r1, fp
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 fcaa 	bl	8006f02 <_Bfree>
 80065ae:	2300      	movs	r3, #0
 80065b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065b2:	702b      	strb	r3, [r5, #0]
 80065b4:	f10a 0301 	add.w	r3, sl, #1
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f43f acf3 	beq.w	8005fa8 <_dtoa_r+0x90>
 80065c2:	601d      	str	r5, [r3, #0]
 80065c4:	e4f0      	b.n	8005fa8 <_dtoa_r+0x90>
 80065c6:	4657      	mov	r7, sl
 80065c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065cc:	1e6b      	subs	r3, r5, #1
 80065ce:	2a39      	cmp	r2, #57	; 0x39
 80065d0:	d106      	bne.n	80065e0 <_dtoa_r+0x6c8>
 80065d2:	9a06      	ldr	r2, [sp, #24]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d107      	bne.n	80065e8 <_dtoa_r+0x6d0>
 80065d8:	2330      	movs	r3, #48	; 0x30
 80065da:	7013      	strb	r3, [r2, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	3701      	adds	r7, #1
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	3201      	adds	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e791      	b.n	800650c <_dtoa_r+0x5f4>
 80065e8:	461d      	mov	r5, r3
 80065ea:	e7ed      	b.n	80065c8 <_dtoa_r+0x6b0>
 80065ec:	2200      	movs	r2, #0
 80065ee:	4b99      	ldr	r3, [pc, #612]	; (8006854 <_dtoa_r+0x93c>)
 80065f0:	f7f9 ff72 	bl	80004d8 <__aeabi_dmul>
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4606      	mov	r6, r0
 80065fa:	460f      	mov	r7, r1
 80065fc:	f7fa f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8006600:	2800      	cmp	r0, #0
 8006602:	d09e      	beq.n	8006542 <_dtoa_r+0x62a>
 8006604:	e7cf      	b.n	80065a6 <_dtoa_r+0x68e>
 8006606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006608:	2a00      	cmp	r2, #0
 800660a:	f000 8088 	beq.w	800671e <_dtoa_r+0x806>
 800660e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006610:	2a01      	cmp	r2, #1
 8006612:	dc6d      	bgt.n	80066f0 <_dtoa_r+0x7d8>
 8006614:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006616:	2a00      	cmp	r2, #0
 8006618:	d066      	beq.n	80066e8 <_dtoa_r+0x7d0>
 800661a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800661e:	464d      	mov	r5, r9
 8006620:	9e08      	ldr	r6, [sp, #32]
 8006622:	9a07      	ldr	r2, [sp, #28]
 8006624:	2101      	movs	r1, #1
 8006626:	441a      	add	r2, r3
 8006628:	4620      	mov	r0, r4
 800662a:	4499      	add	r9, r3
 800662c:	9207      	str	r2, [sp, #28]
 800662e:	f000 fd08 	bl	8007042 <__i2b>
 8006632:	4607      	mov	r7, r0
 8006634:	2d00      	cmp	r5, #0
 8006636:	dd0b      	ble.n	8006650 <_dtoa_r+0x738>
 8006638:	9b07      	ldr	r3, [sp, #28]
 800663a:	2b00      	cmp	r3, #0
 800663c:	dd08      	ble.n	8006650 <_dtoa_r+0x738>
 800663e:	42ab      	cmp	r3, r5
 8006640:	bfa8      	it	ge
 8006642:	462b      	movge	r3, r5
 8006644:	9a07      	ldr	r2, [sp, #28]
 8006646:	eba9 0903 	sub.w	r9, r9, r3
 800664a:	1aed      	subs	r5, r5, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	9307      	str	r3, [sp, #28]
 8006650:	9b08      	ldr	r3, [sp, #32]
 8006652:	b1eb      	cbz	r3, 8006690 <_dtoa_r+0x778>
 8006654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d065      	beq.n	8006726 <_dtoa_r+0x80e>
 800665a:	b18e      	cbz	r6, 8006680 <_dtoa_r+0x768>
 800665c:	4639      	mov	r1, r7
 800665e:	4632      	mov	r2, r6
 8006660:	4620      	mov	r0, r4
 8006662:	f000 fd8d 	bl	8007180 <__pow5mult>
 8006666:	465a      	mov	r2, fp
 8006668:	4601      	mov	r1, r0
 800666a:	4607      	mov	r7, r0
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fcf1 	bl	8007054 <__multiply>
 8006672:	4659      	mov	r1, fp
 8006674:	900a      	str	r0, [sp, #40]	; 0x28
 8006676:	4620      	mov	r0, r4
 8006678:	f000 fc43 	bl	8006f02 <_Bfree>
 800667c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667e:	469b      	mov	fp, r3
 8006680:	9b08      	ldr	r3, [sp, #32]
 8006682:	1b9a      	subs	r2, r3, r6
 8006684:	d004      	beq.n	8006690 <_dtoa_r+0x778>
 8006686:	4659      	mov	r1, fp
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fd79 	bl	8007180 <__pow5mult>
 800668e:	4683      	mov	fp, r0
 8006690:	2101      	movs	r1, #1
 8006692:	4620      	mov	r0, r4
 8006694:	f000 fcd5 	bl	8007042 <__i2b>
 8006698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800669a:	4606      	mov	r6, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 81c6 	beq.w	8006a2e <_dtoa_r+0xb16>
 80066a2:	461a      	mov	r2, r3
 80066a4:	4601      	mov	r1, r0
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fd6a 	bl	8007180 <__pow5mult>
 80066ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066ae:	4606      	mov	r6, r0
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	dc3e      	bgt.n	8006732 <_dtoa_r+0x81a>
 80066b4:	9b02      	ldr	r3, [sp, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d137      	bne.n	800672a <_dtoa_r+0x812>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d134      	bne.n	800672e <_dtoa_r+0x816>
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066ca:	0d1b      	lsrs	r3, r3, #20
 80066cc:	051b      	lsls	r3, r3, #20
 80066ce:	b12b      	cbz	r3, 80066dc <_dtoa_r+0x7c4>
 80066d0:	9b07      	ldr	r3, [sp, #28]
 80066d2:	f109 0901 	add.w	r9, r9, #1
 80066d6:	3301      	adds	r3, #1
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	2301      	movs	r3, #1
 80066dc:	9308      	str	r3, [sp, #32]
 80066de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d128      	bne.n	8006736 <_dtoa_r+0x81e>
 80066e4:	2001      	movs	r0, #1
 80066e6:	e02e      	b.n	8006746 <_dtoa_r+0x82e>
 80066e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80066ee:	e796      	b.n	800661e <_dtoa_r+0x706>
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	f108 36ff 	add.w	r6, r8, #4294967295
 80066f6:	42b3      	cmp	r3, r6
 80066f8:	bfb7      	itett	lt
 80066fa:	9b08      	ldrlt	r3, [sp, #32]
 80066fc:	1b9e      	subge	r6, r3, r6
 80066fe:	1af2      	sublt	r2, r6, r3
 8006700:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006702:	bfbf      	itttt	lt
 8006704:	9608      	strlt	r6, [sp, #32]
 8006706:	189b      	addlt	r3, r3, r2
 8006708:	930c      	strlt	r3, [sp, #48]	; 0x30
 800670a:	2600      	movlt	r6, #0
 800670c:	f1b8 0f00 	cmp.w	r8, #0
 8006710:	bfb9      	ittee	lt
 8006712:	eba9 0508 	sublt.w	r5, r9, r8
 8006716:	2300      	movlt	r3, #0
 8006718:	464d      	movge	r5, r9
 800671a:	4643      	movge	r3, r8
 800671c:	e781      	b.n	8006622 <_dtoa_r+0x70a>
 800671e:	9e08      	ldr	r6, [sp, #32]
 8006720:	464d      	mov	r5, r9
 8006722:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006724:	e786      	b.n	8006634 <_dtoa_r+0x71c>
 8006726:	9a08      	ldr	r2, [sp, #32]
 8006728:	e7ad      	b.n	8006686 <_dtoa_r+0x76e>
 800672a:	2300      	movs	r3, #0
 800672c:	e7d6      	b.n	80066dc <_dtoa_r+0x7c4>
 800672e:	9b02      	ldr	r3, [sp, #8]
 8006730:	e7d4      	b.n	80066dc <_dtoa_r+0x7c4>
 8006732:	2300      	movs	r3, #0
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	6933      	ldr	r3, [r6, #16]
 8006738:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800673c:	6918      	ldr	r0, [r3, #16]
 800673e:	f000 fc32 	bl	8006fa6 <__hi0bits>
 8006742:	f1c0 0020 	rsb	r0, r0, #32
 8006746:	9b07      	ldr	r3, [sp, #28]
 8006748:	4418      	add	r0, r3
 800674a:	f010 001f 	ands.w	r0, r0, #31
 800674e:	d047      	beq.n	80067e0 <_dtoa_r+0x8c8>
 8006750:	f1c0 0320 	rsb	r3, r0, #32
 8006754:	2b04      	cmp	r3, #4
 8006756:	dd3b      	ble.n	80067d0 <_dtoa_r+0x8b8>
 8006758:	9b07      	ldr	r3, [sp, #28]
 800675a:	f1c0 001c 	rsb	r0, r0, #28
 800675e:	4481      	add	r9, r0
 8006760:	4405      	add	r5, r0
 8006762:	4403      	add	r3, r0
 8006764:	9307      	str	r3, [sp, #28]
 8006766:	f1b9 0f00 	cmp.w	r9, #0
 800676a:	dd05      	ble.n	8006778 <_dtoa_r+0x860>
 800676c:	4659      	mov	r1, fp
 800676e:	464a      	mov	r2, r9
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fd53 	bl	800721c <__lshift>
 8006776:	4683      	mov	fp, r0
 8006778:	9b07      	ldr	r3, [sp, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	dd05      	ble.n	800678a <_dtoa_r+0x872>
 800677e:	4631      	mov	r1, r6
 8006780:	461a      	mov	r2, r3
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fd4a 	bl	800721c <__lshift>
 8006788:	4606      	mov	r6, r0
 800678a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800678c:	b353      	cbz	r3, 80067e4 <_dtoa_r+0x8cc>
 800678e:	4631      	mov	r1, r6
 8006790:	4658      	mov	r0, fp
 8006792:	f000 fd97 	bl	80072c4 <__mcmp>
 8006796:	2800      	cmp	r0, #0
 8006798:	da24      	bge.n	80067e4 <_dtoa_r+0x8cc>
 800679a:	2300      	movs	r3, #0
 800679c:	4659      	mov	r1, fp
 800679e:	220a      	movs	r2, #10
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fbc5 	bl	8006f30 <__multadd>
 80067a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ac:	4683      	mov	fp, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8144 	beq.w	8006a3c <_dtoa_r+0xb24>
 80067b4:	2300      	movs	r3, #0
 80067b6:	4639      	mov	r1, r7
 80067b8:	220a      	movs	r2, #10
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 fbb8 	bl	8006f30 <__multadd>
 80067c0:	9b04      	ldr	r3, [sp, #16]
 80067c2:	4607      	mov	r7, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	dc4d      	bgt.n	8006864 <_dtoa_r+0x94c>
 80067c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	dd4a      	ble.n	8006864 <_dtoa_r+0x94c>
 80067ce:	e011      	b.n	80067f4 <_dtoa_r+0x8dc>
 80067d0:	d0c9      	beq.n	8006766 <_dtoa_r+0x84e>
 80067d2:	9a07      	ldr	r2, [sp, #28]
 80067d4:	331c      	adds	r3, #28
 80067d6:	441a      	add	r2, r3
 80067d8:	4499      	add	r9, r3
 80067da:	441d      	add	r5, r3
 80067dc:	4613      	mov	r3, r2
 80067de:	e7c1      	b.n	8006764 <_dtoa_r+0x84c>
 80067e0:	4603      	mov	r3, r0
 80067e2:	e7f6      	b.n	80067d2 <_dtoa_r+0x8ba>
 80067e4:	f1b8 0f00 	cmp.w	r8, #0
 80067e8:	dc36      	bgt.n	8006858 <_dtoa_r+0x940>
 80067ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	dd33      	ble.n	8006858 <_dtoa_r+0x940>
 80067f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80067f4:	9b04      	ldr	r3, [sp, #16]
 80067f6:	b963      	cbnz	r3, 8006812 <_dtoa_r+0x8fa>
 80067f8:	4631      	mov	r1, r6
 80067fa:	2205      	movs	r2, #5
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 fb97 	bl	8006f30 <__multadd>
 8006802:	4601      	mov	r1, r0
 8006804:	4606      	mov	r6, r0
 8006806:	4658      	mov	r0, fp
 8006808:	f000 fd5c 	bl	80072c4 <__mcmp>
 800680c:	2800      	cmp	r0, #0
 800680e:	f73f add3 	bgt.w	80063b8 <_dtoa_r+0x4a0>
 8006812:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006814:	9d06      	ldr	r5, [sp, #24]
 8006816:	ea6f 0a03 	mvn.w	sl, r3
 800681a:	f04f 0900 	mov.w	r9, #0
 800681e:	4631      	mov	r1, r6
 8006820:	4620      	mov	r0, r4
 8006822:	f000 fb6e 	bl	8006f02 <_Bfree>
 8006826:	2f00      	cmp	r7, #0
 8006828:	f43f aebd 	beq.w	80065a6 <_dtoa_r+0x68e>
 800682c:	f1b9 0f00 	cmp.w	r9, #0
 8006830:	d005      	beq.n	800683e <_dtoa_r+0x926>
 8006832:	45b9      	cmp	r9, r7
 8006834:	d003      	beq.n	800683e <_dtoa_r+0x926>
 8006836:	4649      	mov	r1, r9
 8006838:	4620      	mov	r0, r4
 800683a:	f000 fb62 	bl	8006f02 <_Bfree>
 800683e:	4639      	mov	r1, r7
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fb5e 	bl	8006f02 <_Bfree>
 8006846:	e6ae      	b.n	80065a6 <_dtoa_r+0x68e>
 8006848:	2600      	movs	r6, #0
 800684a:	4637      	mov	r7, r6
 800684c:	e7e1      	b.n	8006812 <_dtoa_r+0x8fa>
 800684e:	46ba      	mov	sl, r7
 8006850:	4637      	mov	r7, r6
 8006852:	e5b1      	b.n	80063b8 <_dtoa_r+0x4a0>
 8006854:	40240000 	.word	0x40240000
 8006858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685a:	f8cd 8010 	str.w	r8, [sp, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80f3 	beq.w	8006a4a <_dtoa_r+0xb32>
 8006864:	2d00      	cmp	r5, #0
 8006866:	dd05      	ble.n	8006874 <_dtoa_r+0x95c>
 8006868:	4639      	mov	r1, r7
 800686a:	462a      	mov	r2, r5
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fcd5 	bl	800721c <__lshift>
 8006872:	4607      	mov	r7, r0
 8006874:	9b08      	ldr	r3, [sp, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04c      	beq.n	8006914 <_dtoa_r+0x9fc>
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fb0c 	bl	8006e9a <_Balloc>
 8006882:	4605      	mov	r5, r0
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	f107 010c 	add.w	r1, r7, #12
 800688a:	3202      	adds	r2, #2
 800688c:	0092      	lsls	r2, r2, #2
 800688e:	300c      	adds	r0, #12
 8006890:	f000 faf8 	bl	8006e84 <memcpy>
 8006894:	2201      	movs	r2, #1
 8006896:	4629      	mov	r1, r5
 8006898:	4620      	mov	r0, r4
 800689a:	f000 fcbf 	bl	800721c <__lshift>
 800689e:	46b9      	mov	r9, r7
 80068a0:	4607      	mov	r7, r0
 80068a2:	9b06      	ldr	r3, [sp, #24]
 80068a4:	9307      	str	r3, [sp, #28]
 80068a6:	9b02      	ldr	r3, [sp, #8]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	9308      	str	r3, [sp, #32]
 80068ae:	4631      	mov	r1, r6
 80068b0:	4658      	mov	r0, fp
 80068b2:	f7ff faa3 	bl	8005dfc <quorem>
 80068b6:	4649      	mov	r1, r9
 80068b8:	4605      	mov	r5, r0
 80068ba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80068be:	4658      	mov	r0, fp
 80068c0:	f000 fd00 	bl	80072c4 <__mcmp>
 80068c4:	463a      	mov	r2, r7
 80068c6:	9002      	str	r0, [sp, #8]
 80068c8:	4631      	mov	r1, r6
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fd14 	bl	80072f8 <__mdiff>
 80068d0:	68c3      	ldr	r3, [r0, #12]
 80068d2:	4602      	mov	r2, r0
 80068d4:	bb03      	cbnz	r3, 8006918 <_dtoa_r+0xa00>
 80068d6:	4601      	mov	r1, r0
 80068d8:	9009      	str	r0, [sp, #36]	; 0x24
 80068da:	4658      	mov	r0, fp
 80068dc:	f000 fcf2 	bl	80072c4 <__mcmp>
 80068e0:	4603      	mov	r3, r0
 80068e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e4:	4611      	mov	r1, r2
 80068e6:	4620      	mov	r0, r4
 80068e8:	9309      	str	r3, [sp, #36]	; 0x24
 80068ea:	f000 fb0a 	bl	8006f02 <_Bfree>
 80068ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f0:	b9a3      	cbnz	r3, 800691c <_dtoa_r+0xa04>
 80068f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068f4:	b992      	cbnz	r2, 800691c <_dtoa_r+0xa04>
 80068f6:	9a08      	ldr	r2, [sp, #32]
 80068f8:	b982      	cbnz	r2, 800691c <_dtoa_r+0xa04>
 80068fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068fe:	d029      	beq.n	8006954 <_dtoa_r+0xa3c>
 8006900:	9b02      	ldr	r3, [sp, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	dd01      	ble.n	800690a <_dtoa_r+0x9f2>
 8006906:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800690a:	9b07      	ldr	r3, [sp, #28]
 800690c:	1c5d      	adds	r5, r3, #1
 800690e:	f883 8000 	strb.w	r8, [r3]
 8006912:	e784      	b.n	800681e <_dtoa_r+0x906>
 8006914:	4638      	mov	r0, r7
 8006916:	e7c2      	b.n	800689e <_dtoa_r+0x986>
 8006918:	2301      	movs	r3, #1
 800691a:	e7e3      	b.n	80068e4 <_dtoa_r+0x9cc>
 800691c:	9a02      	ldr	r2, [sp, #8]
 800691e:	2a00      	cmp	r2, #0
 8006920:	db04      	blt.n	800692c <_dtoa_r+0xa14>
 8006922:	d123      	bne.n	800696c <_dtoa_r+0xa54>
 8006924:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006926:	bb0a      	cbnz	r2, 800696c <_dtoa_r+0xa54>
 8006928:	9a08      	ldr	r2, [sp, #32]
 800692a:	b9fa      	cbnz	r2, 800696c <_dtoa_r+0xa54>
 800692c:	2b00      	cmp	r3, #0
 800692e:	ddec      	ble.n	800690a <_dtoa_r+0x9f2>
 8006930:	4659      	mov	r1, fp
 8006932:	2201      	movs	r2, #1
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fc71 	bl	800721c <__lshift>
 800693a:	4631      	mov	r1, r6
 800693c:	4683      	mov	fp, r0
 800693e:	f000 fcc1 	bl	80072c4 <__mcmp>
 8006942:	2800      	cmp	r0, #0
 8006944:	dc03      	bgt.n	800694e <_dtoa_r+0xa36>
 8006946:	d1e0      	bne.n	800690a <_dtoa_r+0x9f2>
 8006948:	f018 0f01 	tst.w	r8, #1
 800694c:	d0dd      	beq.n	800690a <_dtoa_r+0x9f2>
 800694e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006952:	d1d8      	bne.n	8006906 <_dtoa_r+0x9ee>
 8006954:	9b07      	ldr	r3, [sp, #28]
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	1c5d      	adds	r5, r3, #1
 800695a:	2339      	movs	r3, #57	; 0x39
 800695c:	7013      	strb	r3, [r2, #0]
 800695e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006962:	1e6a      	subs	r2, r5, #1
 8006964:	2b39      	cmp	r3, #57	; 0x39
 8006966:	d04d      	beq.n	8006a04 <_dtoa_r+0xaec>
 8006968:	3301      	adds	r3, #1
 800696a:	e052      	b.n	8006a12 <_dtoa_r+0xafa>
 800696c:	9a07      	ldr	r2, [sp, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f102 0501 	add.w	r5, r2, #1
 8006974:	dd06      	ble.n	8006984 <_dtoa_r+0xa6c>
 8006976:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800697a:	d0eb      	beq.n	8006954 <_dtoa_r+0xa3c>
 800697c:	f108 0801 	add.w	r8, r8, #1
 8006980:	9b07      	ldr	r3, [sp, #28]
 8006982:	e7c4      	b.n	800690e <_dtoa_r+0x9f6>
 8006984:	9b06      	ldr	r3, [sp, #24]
 8006986:	9a04      	ldr	r2, [sp, #16]
 8006988:	1aeb      	subs	r3, r5, r3
 800698a:	4293      	cmp	r3, r2
 800698c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006990:	d021      	beq.n	80069d6 <_dtoa_r+0xabe>
 8006992:	4659      	mov	r1, fp
 8006994:	2300      	movs	r3, #0
 8006996:	220a      	movs	r2, #10
 8006998:	4620      	mov	r0, r4
 800699a:	f000 fac9 	bl	8006f30 <__multadd>
 800699e:	45b9      	cmp	r9, r7
 80069a0:	4683      	mov	fp, r0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	f04f 020a 	mov.w	r2, #10
 80069aa:	4649      	mov	r1, r9
 80069ac:	4620      	mov	r0, r4
 80069ae:	d105      	bne.n	80069bc <_dtoa_r+0xaa4>
 80069b0:	f000 fabe 	bl	8006f30 <__multadd>
 80069b4:	4681      	mov	r9, r0
 80069b6:	4607      	mov	r7, r0
 80069b8:	9507      	str	r5, [sp, #28]
 80069ba:	e778      	b.n	80068ae <_dtoa_r+0x996>
 80069bc:	f000 fab8 	bl	8006f30 <__multadd>
 80069c0:	4639      	mov	r1, r7
 80069c2:	4681      	mov	r9, r0
 80069c4:	2300      	movs	r3, #0
 80069c6:	220a      	movs	r2, #10
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fab1 	bl	8006f30 <__multadd>
 80069ce:	4607      	mov	r7, r0
 80069d0:	e7f2      	b.n	80069b8 <_dtoa_r+0xaa0>
 80069d2:	f04f 0900 	mov.w	r9, #0
 80069d6:	4659      	mov	r1, fp
 80069d8:	2201      	movs	r2, #1
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fc1e 	bl	800721c <__lshift>
 80069e0:	4631      	mov	r1, r6
 80069e2:	4683      	mov	fp, r0
 80069e4:	f000 fc6e 	bl	80072c4 <__mcmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	dcb8      	bgt.n	800695e <_dtoa_r+0xa46>
 80069ec:	d102      	bne.n	80069f4 <_dtoa_r+0xadc>
 80069ee:	f018 0f01 	tst.w	r8, #1
 80069f2:	d1b4      	bne.n	800695e <_dtoa_r+0xa46>
 80069f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069f8:	1e6a      	subs	r2, r5, #1
 80069fa:	2b30      	cmp	r3, #48	; 0x30
 80069fc:	f47f af0f 	bne.w	800681e <_dtoa_r+0x906>
 8006a00:	4615      	mov	r5, r2
 8006a02:	e7f7      	b.n	80069f4 <_dtoa_r+0xadc>
 8006a04:	9b06      	ldr	r3, [sp, #24]
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d105      	bne.n	8006a16 <_dtoa_r+0xafe>
 8006a0a:	2331      	movs	r3, #49	; 0x31
 8006a0c:	9a06      	ldr	r2, [sp, #24]
 8006a0e:	f10a 0a01 	add.w	sl, sl, #1
 8006a12:	7013      	strb	r3, [r2, #0]
 8006a14:	e703      	b.n	800681e <_dtoa_r+0x906>
 8006a16:	4615      	mov	r5, r2
 8006a18:	e7a1      	b.n	800695e <_dtoa_r+0xa46>
 8006a1a:	4b17      	ldr	r3, [pc, #92]	; (8006a78 <_dtoa_r+0xb60>)
 8006a1c:	f7ff bae1 	b.w	8005fe2 <_dtoa_r+0xca>
 8006a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f47f aabb 	bne.w	8005f9e <_dtoa_r+0x86>
 8006a28:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <_dtoa_r+0xb64>)
 8006a2a:	f7ff bada 	b.w	8005fe2 <_dtoa_r+0xca>
 8006a2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	f77f ae3f 	ble.w	80066b4 <_dtoa_r+0x79c>
 8006a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a38:	9308      	str	r3, [sp, #32]
 8006a3a:	e653      	b.n	80066e4 <_dtoa_r+0x7cc>
 8006a3c:	9b04      	ldr	r3, [sp, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dc03      	bgt.n	8006a4a <_dtoa_r+0xb32>
 8006a42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	f73f aed5 	bgt.w	80067f4 <_dtoa_r+0x8dc>
 8006a4a:	9d06      	ldr	r5, [sp, #24]
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4658      	mov	r0, fp
 8006a50:	f7ff f9d4 	bl	8005dfc <quorem>
 8006a54:	9b06      	ldr	r3, [sp, #24]
 8006a56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a5a:	f805 8b01 	strb.w	r8, [r5], #1
 8006a5e:	9a04      	ldr	r2, [sp, #16]
 8006a60:	1aeb      	subs	r3, r5, r3
 8006a62:	429a      	cmp	r2, r3
 8006a64:	ddb5      	ble.n	80069d2 <_dtoa_r+0xaba>
 8006a66:	4659      	mov	r1, fp
 8006a68:	2300      	movs	r3, #0
 8006a6a:	220a      	movs	r2, #10
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fa5f 	bl	8006f30 <__multadd>
 8006a72:	4683      	mov	fp, r0
 8006a74:	e7ea      	b.n	8006a4c <_dtoa_r+0xb34>
 8006a76:	bf00      	nop
 8006a78:	08007c80 	.word	0x08007c80
 8006a7c:	08007cc9 	.word	0x08007cc9

08006a80 <__sflush_r>:
 8006a80:	898a      	ldrh	r2, [r1, #12]
 8006a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a86:	4605      	mov	r5, r0
 8006a88:	0710      	lsls	r0, r2, #28
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	d458      	bmi.n	8006b40 <__sflush_r+0xc0>
 8006a8e:	684b      	ldr	r3, [r1, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dc05      	bgt.n	8006aa0 <__sflush_r+0x20>
 8006a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc02      	bgt.n	8006aa0 <__sflush_r+0x20>
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aa2:	2e00      	cmp	r6, #0
 8006aa4:	d0f9      	beq.n	8006a9a <__sflush_r+0x1a>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006aac:	682f      	ldr	r7, [r5, #0]
 8006aae:	6a21      	ldr	r1, [r4, #32]
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	d032      	beq.n	8006b1a <__sflush_r+0x9a>
 8006ab4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	075a      	lsls	r2, r3, #29
 8006aba:	d505      	bpl.n	8006ac8 <__sflush_r+0x48>
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	1ac0      	subs	r0, r0, r3
 8006ac0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac2:	b10b      	cbz	r3, 8006ac8 <__sflush_r+0x48>
 8006ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ac6:	1ac0      	subs	r0, r0, r3
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4602      	mov	r2, r0
 8006acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ace:	6a21      	ldr	r1, [r4, #32]
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b0      	blx	r6
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	d106      	bne.n	8006ae8 <__sflush_r+0x68>
 8006ada:	6829      	ldr	r1, [r5, #0]
 8006adc:	291d      	cmp	r1, #29
 8006ade:	d848      	bhi.n	8006b72 <__sflush_r+0xf2>
 8006ae0:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <__sflush_r+0x108>)
 8006ae2:	40ca      	lsrs	r2, r1
 8006ae4:	07d6      	lsls	r6, r2, #31
 8006ae6:	d544      	bpl.n	8006b72 <__sflush_r+0xf2>
 8006ae8:	2200      	movs	r2, #0
 8006aea:	6062      	str	r2, [r4, #4]
 8006aec:	6922      	ldr	r2, [r4, #16]
 8006aee:	04d9      	lsls	r1, r3, #19
 8006af0:	6022      	str	r2, [r4, #0]
 8006af2:	d504      	bpl.n	8006afe <__sflush_r+0x7e>
 8006af4:	1c42      	adds	r2, r0, #1
 8006af6:	d101      	bne.n	8006afc <__sflush_r+0x7c>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b903      	cbnz	r3, 8006afe <__sflush_r+0x7e>
 8006afc:	6560      	str	r0, [r4, #84]	; 0x54
 8006afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b00:	602f      	str	r7, [r5, #0]
 8006b02:	2900      	cmp	r1, #0
 8006b04:	d0c9      	beq.n	8006a9a <__sflush_r+0x1a>
 8006b06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	d002      	beq.n	8006b14 <__sflush_r+0x94>
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 fcae 	bl	8007470 <_free_r>
 8006b14:	2000      	movs	r0, #0
 8006b16:	6360      	str	r0, [r4, #52]	; 0x34
 8006b18:	e7c0      	b.n	8006a9c <__sflush_r+0x1c>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b0      	blx	r6
 8006b20:	1c41      	adds	r1, r0, #1
 8006b22:	d1c8      	bne.n	8006ab6 <__sflush_r+0x36>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0c5      	beq.n	8006ab6 <__sflush_r+0x36>
 8006b2a:	2b1d      	cmp	r3, #29
 8006b2c:	d001      	beq.n	8006b32 <__sflush_r+0xb2>
 8006b2e:	2b16      	cmp	r3, #22
 8006b30:	d101      	bne.n	8006b36 <__sflush_r+0xb6>
 8006b32:	602f      	str	r7, [r5, #0]
 8006b34:	e7b1      	b.n	8006a9a <__sflush_r+0x1a>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	e7ad      	b.n	8006a9c <__sflush_r+0x1c>
 8006b40:	690f      	ldr	r7, [r1, #16]
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	d0a9      	beq.n	8006a9a <__sflush_r+0x1a>
 8006b46:	0793      	lsls	r3, r2, #30
 8006b48:	bf18      	it	ne
 8006b4a:	2300      	movne	r3, #0
 8006b4c:	680e      	ldr	r6, [r1, #0]
 8006b4e:	bf08      	it	eq
 8006b50:	694b      	ldreq	r3, [r1, #20]
 8006b52:	eba6 0807 	sub.w	r8, r6, r7
 8006b56:	600f      	str	r7, [r1, #0]
 8006b58:	608b      	str	r3, [r1, #8]
 8006b5a:	f1b8 0f00 	cmp.w	r8, #0
 8006b5e:	dd9c      	ble.n	8006a9a <__sflush_r+0x1a>
 8006b60:	4643      	mov	r3, r8
 8006b62:	463a      	mov	r2, r7
 8006b64:	6a21      	ldr	r1, [r4, #32]
 8006b66:	4628      	mov	r0, r5
 8006b68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b6a:	47b0      	blx	r6
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	dc06      	bgt.n	8006b7e <__sflush_r+0xfe>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7c:	e78e      	b.n	8006a9c <__sflush_r+0x1c>
 8006b7e:	4407      	add	r7, r0
 8006b80:	eba8 0800 	sub.w	r8, r8, r0
 8006b84:	e7e9      	b.n	8006b5a <__sflush_r+0xda>
 8006b86:	bf00      	nop
 8006b88:	20400001 	.word	0x20400001

08006b8c <_fflush_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	690b      	ldr	r3, [r1, #16]
 8006b90:	4605      	mov	r5, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	b1db      	cbz	r3, 8006bce <_fflush_r+0x42>
 8006b96:	b118      	cbz	r0, 8006ba0 <_fflush_r+0x14>
 8006b98:	6983      	ldr	r3, [r0, #24]
 8006b9a:	b90b      	cbnz	r3, 8006ba0 <_fflush_r+0x14>
 8006b9c:	f000 f860 	bl	8006c60 <__sinit>
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <_fflush_r+0x48>)
 8006ba2:	429c      	cmp	r4, r3
 8006ba4:	d109      	bne.n	8006bba <_fflush_r+0x2e>
 8006ba6:	686c      	ldr	r4, [r5, #4]
 8006ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bac:	b17b      	cbz	r3, 8006bce <_fflush_r+0x42>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb6:	f7ff bf63 	b.w	8006a80 <__sflush_r>
 8006bba:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <_fflush_r+0x4c>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	d101      	bne.n	8006bc4 <_fflush_r+0x38>
 8006bc0:	68ac      	ldr	r4, [r5, #8]
 8006bc2:	e7f1      	b.n	8006ba8 <_fflush_r+0x1c>
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <_fflush_r+0x50>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	bf08      	it	eq
 8006bca:	68ec      	ldreq	r4, [r5, #12]
 8006bcc:	e7ec      	b.n	8006ba8 <_fflush_r+0x1c>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08007cf8 	.word	0x08007cf8
 8006bd8:	08007d18 	.word	0x08007d18
 8006bdc:	08007cd8 	.word	0x08007cd8

08006be0 <std>:
 8006be0:	2300      	movs	r3, #0
 8006be2:	b510      	push	{r4, lr}
 8006be4:	4604      	mov	r4, r0
 8006be6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bea:	6083      	str	r3, [r0, #8]
 8006bec:	8181      	strh	r1, [r0, #12]
 8006bee:	6643      	str	r3, [r0, #100]	; 0x64
 8006bf0:	81c2      	strh	r2, [r0, #14]
 8006bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf6:	6183      	str	r3, [r0, #24]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	305c      	adds	r0, #92	; 0x5c
 8006bfe:	f7fe fba1 	bl	8005344 <memset>
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <std+0x38>)
 8006c04:	6224      	str	r4, [r4, #32]
 8006c06:	6263      	str	r3, [r4, #36]	; 0x24
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <std+0x3c>)
 8006c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c0c:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <std+0x40>)
 8006c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c10:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <std+0x44>)
 8006c12:	6323      	str	r3, [r4, #48]	; 0x30
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	bf00      	nop
 8006c18:	08007859 	.word	0x08007859
 8006c1c:	0800787b 	.word	0x0800787b
 8006c20:	080078b3 	.word	0x080078b3
 8006c24:	080078d7 	.word	0x080078d7

08006c28 <_cleanup_r>:
 8006c28:	4901      	ldr	r1, [pc, #4]	; (8006c30 <_cleanup_r+0x8>)
 8006c2a:	f000 b885 	b.w	8006d38 <_fwalk_reent>
 8006c2e:	bf00      	nop
 8006c30:	08006b8d 	.word	0x08006b8d

08006c34 <__sfmoreglue>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	2568      	movs	r5, #104	; 0x68
 8006c38:	1e4a      	subs	r2, r1, #1
 8006c3a:	4355      	muls	r5, r2
 8006c3c:	460e      	mov	r6, r1
 8006c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c42:	f000 fc61 	bl	8007508 <_malloc_r>
 8006c46:	4604      	mov	r4, r0
 8006c48:	b140      	cbz	r0, 8006c5c <__sfmoreglue+0x28>
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c50:	300c      	adds	r0, #12
 8006c52:	60a0      	str	r0, [r4, #8]
 8006c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c58:	f7fe fb74 	bl	8005344 <memset>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}

08006c60 <__sinit>:
 8006c60:	6983      	ldr	r3, [r0, #24]
 8006c62:	b510      	push	{r4, lr}
 8006c64:	4604      	mov	r4, r0
 8006c66:	bb33      	cbnz	r3, 8006cb6 <__sinit+0x56>
 8006c68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006c6c:	6503      	str	r3, [r0, #80]	; 0x50
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <__sinit+0x58>)
 8006c70:	4a12      	ldr	r2, [pc, #72]	; (8006cbc <__sinit+0x5c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6282      	str	r2, [r0, #40]	; 0x28
 8006c76:	4298      	cmp	r0, r3
 8006c78:	bf04      	itt	eq
 8006c7a:	2301      	moveq	r3, #1
 8006c7c:	6183      	streq	r3, [r0, #24]
 8006c7e:	f000 f81f 	bl	8006cc0 <__sfp>
 8006c82:	6060      	str	r0, [r4, #4]
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 f81b 	bl	8006cc0 <__sfp>
 8006c8a:	60a0      	str	r0, [r4, #8]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 f817 	bl	8006cc0 <__sfp>
 8006c92:	2200      	movs	r2, #0
 8006c94:	60e0      	str	r0, [r4, #12]
 8006c96:	2104      	movs	r1, #4
 8006c98:	6860      	ldr	r0, [r4, #4]
 8006c9a:	f7ff ffa1 	bl	8006be0 <std>
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	2109      	movs	r1, #9
 8006ca2:	68a0      	ldr	r0, [r4, #8]
 8006ca4:	f7ff ff9c 	bl	8006be0 <std>
 8006ca8:	2202      	movs	r2, #2
 8006caa:	2112      	movs	r1, #18
 8006cac:	68e0      	ldr	r0, [r4, #12]
 8006cae:	f7ff ff97 	bl	8006be0 <std>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	61a3      	str	r3, [r4, #24]
 8006cb6:	bd10      	pop	{r4, pc}
 8006cb8:	08007c6c 	.word	0x08007c6c
 8006cbc:	08006c29 	.word	0x08006c29

08006cc0 <__sfp>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	4b1b      	ldr	r3, [pc, #108]	; (8006d30 <__sfp+0x70>)
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	681e      	ldr	r6, [r3, #0]
 8006cc8:	69b3      	ldr	r3, [r6, #24]
 8006cca:	b913      	cbnz	r3, 8006cd2 <__sfp+0x12>
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff ffc7 	bl	8006c60 <__sinit>
 8006cd2:	3648      	adds	r6, #72	; 0x48
 8006cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	d503      	bpl.n	8006ce4 <__sfp+0x24>
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	b133      	cbz	r3, 8006cee <__sfp+0x2e>
 8006ce0:	6836      	ldr	r6, [r6, #0]
 8006ce2:	e7f7      	b.n	8006cd4 <__sfp+0x14>
 8006ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ce8:	b16d      	cbz	r5, 8006d06 <__sfp+0x46>
 8006cea:	3468      	adds	r4, #104	; 0x68
 8006cec:	e7f4      	b.n	8006cd8 <__sfp+0x18>
 8006cee:	2104      	movs	r1, #4
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	f7ff ff9f 	bl	8006c34 <__sfmoreglue>
 8006cf6:	6030      	str	r0, [r6, #0]
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d1f1      	bne.n	8006ce0 <__sfp+0x20>
 8006cfc:	230c      	movs	r3, #12
 8006cfe:	4604      	mov	r4, r0
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	4620      	mov	r0, r4
 8006d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <__sfp+0x74>)
 8006d08:	6665      	str	r5, [r4, #100]	; 0x64
 8006d0a:	e9c4 5500 	strd	r5, r5, [r4]
 8006d0e:	60a5      	str	r5, [r4, #8]
 8006d10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006d14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006d18:	2208      	movs	r2, #8
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d20:	f7fe fb10 	bl	8005344 <memset>
 8006d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d2c:	e7e9      	b.n	8006d02 <__sfp+0x42>
 8006d2e:	bf00      	nop
 8006d30:	08007c6c 	.word	0x08007c6c
 8006d34:	ffff0001 	.word	0xffff0001

08006d38 <_fwalk_reent>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	4689      	mov	r9, r1
 8006d40:	2600      	movs	r6, #0
 8006d42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d46:	b914      	cbnz	r4, 8006d4e <_fwalk_reent+0x16>
 8006d48:	4630      	mov	r0, r6
 8006d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006d52:	3f01      	subs	r7, #1
 8006d54:	d501      	bpl.n	8006d5a <_fwalk_reent+0x22>
 8006d56:	6824      	ldr	r4, [r4, #0]
 8006d58:	e7f5      	b.n	8006d46 <_fwalk_reent+0xe>
 8006d5a:	89ab      	ldrh	r3, [r5, #12]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d907      	bls.n	8006d70 <_fwalk_reent+0x38>
 8006d60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d64:	3301      	adds	r3, #1
 8006d66:	d003      	beq.n	8006d70 <_fwalk_reent+0x38>
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	47c8      	blx	r9
 8006d6e:	4306      	orrs	r6, r0
 8006d70:	3568      	adds	r5, #104	; 0x68
 8006d72:	e7ee      	b.n	8006d52 <_fwalk_reent+0x1a>

08006d74 <_localeconv_r>:
 8006d74:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <_localeconv_r+0x14>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6a18      	ldr	r0, [r3, #32]
 8006d7a:	4b04      	ldr	r3, [pc, #16]	; (8006d8c <_localeconv_r+0x18>)
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	bf08      	it	eq
 8006d80:	4618      	moveq	r0, r3
 8006d82:	30f0      	adds	r0, #240	; 0xf0
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000018 	.word	0x20000018
 8006d8c:	2000007c 	.word	0x2000007c

08006d90 <__swhatbuf_r>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	460e      	mov	r6, r1
 8006d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d98:	b096      	sub	sp, #88	; 0x58
 8006d9a:	2900      	cmp	r1, #0
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	461d      	mov	r5, r3
 8006da0:	da07      	bge.n	8006db2 <__swhatbuf_r+0x22>
 8006da2:	2300      	movs	r3, #0
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	89b3      	ldrh	r3, [r6, #12]
 8006da8:	061a      	lsls	r2, r3, #24
 8006daa:	d410      	bmi.n	8006dce <__swhatbuf_r+0x3e>
 8006dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db0:	e00e      	b.n	8006dd0 <__swhatbuf_r+0x40>
 8006db2:	466a      	mov	r2, sp
 8006db4:	f000 fe76 	bl	8007aa4 <_fstat_r>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	dbf2      	blt.n	8006da2 <__swhatbuf_r+0x12>
 8006dbc:	9a01      	ldr	r2, [sp, #4]
 8006dbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006dc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006dc6:	425a      	negs	r2, r3
 8006dc8:	415a      	adcs	r2, r3
 8006dca:	602a      	str	r2, [r5, #0]
 8006dcc:	e7ee      	b.n	8006dac <__swhatbuf_r+0x1c>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	2000      	movs	r0, #0
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	b016      	add	sp, #88	; 0x58
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}

08006dd8 <__smakebuf_r>:
 8006dd8:	898b      	ldrh	r3, [r1, #12]
 8006dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ddc:	079d      	lsls	r5, r3, #30
 8006dde:	4606      	mov	r6, r0
 8006de0:	460c      	mov	r4, r1
 8006de2:	d507      	bpl.n	8006df4 <__smakebuf_r+0x1c>
 8006de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	6123      	str	r3, [r4, #16]
 8006dec:	2301      	movs	r3, #1
 8006dee:	6163      	str	r3, [r4, #20]
 8006df0:	b002      	add	sp, #8
 8006df2:	bd70      	pop	{r4, r5, r6, pc}
 8006df4:	ab01      	add	r3, sp, #4
 8006df6:	466a      	mov	r2, sp
 8006df8:	f7ff ffca 	bl	8006d90 <__swhatbuf_r>
 8006dfc:	9900      	ldr	r1, [sp, #0]
 8006dfe:	4605      	mov	r5, r0
 8006e00:	4630      	mov	r0, r6
 8006e02:	f000 fb81 	bl	8007508 <_malloc_r>
 8006e06:	b948      	cbnz	r0, 8006e1c <__smakebuf_r+0x44>
 8006e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0c:	059a      	lsls	r2, r3, #22
 8006e0e:	d4ef      	bmi.n	8006df0 <__smakebuf_r+0x18>
 8006e10:	f023 0303 	bic.w	r3, r3, #3
 8006e14:	f043 0302 	orr.w	r3, r3, #2
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	e7e3      	b.n	8006de4 <__smakebuf_r+0xc>
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <__smakebuf_r+0x7c>)
 8006e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	6020      	str	r0, [r4, #0]
 8006e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e28:	81a3      	strh	r3, [r4, #12]
 8006e2a:	9b00      	ldr	r3, [sp, #0]
 8006e2c:	6120      	str	r0, [r4, #16]
 8006e2e:	6163      	str	r3, [r4, #20]
 8006e30:	9b01      	ldr	r3, [sp, #4]
 8006e32:	b15b      	cbz	r3, 8006e4c <__smakebuf_r+0x74>
 8006e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f000 fe45 	bl	8007ac8 <_isatty_r>
 8006e3e:	b128      	cbz	r0, 8006e4c <__smakebuf_r+0x74>
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	f023 0303 	bic.w	r3, r3, #3
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	431d      	orrs	r5, r3
 8006e50:	81a5      	strh	r5, [r4, #12]
 8006e52:	e7cd      	b.n	8006df0 <__smakebuf_r+0x18>
 8006e54:	08006c29 	.word	0x08006c29

08006e58 <malloc>:
 8006e58:	4b02      	ldr	r3, [pc, #8]	; (8006e64 <malloc+0xc>)
 8006e5a:	4601      	mov	r1, r0
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	f000 bb53 	b.w	8007508 <_malloc_r>
 8006e62:	bf00      	nop
 8006e64:	20000018 	.word	0x20000018

08006e68 <memchr>:
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	b2c9      	uxtb	r1, r1
 8006e6c:	4402      	add	r2, r0
 8006e6e:	4290      	cmp	r0, r2
 8006e70:	4603      	mov	r3, r0
 8006e72:	d101      	bne.n	8006e78 <memchr+0x10>
 8006e74:	2300      	movs	r3, #0
 8006e76:	e003      	b.n	8006e80 <memchr+0x18>
 8006e78:	781c      	ldrb	r4, [r3, #0]
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	428c      	cmp	r4, r1
 8006e7e:	d1f6      	bne.n	8006e6e <memchr+0x6>
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd10      	pop	{r4, pc}

08006e84 <memcpy>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	1e43      	subs	r3, r0, #1
 8006e88:	440a      	add	r2, r1
 8006e8a:	4291      	cmp	r1, r2
 8006e8c:	d100      	bne.n	8006e90 <memcpy+0xc>
 8006e8e:	bd10      	pop	{r4, pc}
 8006e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e98:	e7f7      	b.n	8006e8a <memcpy+0x6>

08006e9a <_Balloc>:
 8006e9a:	b570      	push	{r4, r5, r6, lr}
 8006e9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	b93d      	cbnz	r5, 8006eb4 <_Balloc+0x1a>
 8006ea4:	2010      	movs	r0, #16
 8006ea6:	f7ff ffd7 	bl	8006e58 <malloc>
 8006eaa:	6260      	str	r0, [r4, #36]	; 0x24
 8006eac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006eb0:	6005      	str	r5, [r0, #0]
 8006eb2:	60c5      	str	r5, [r0, #12]
 8006eb4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006eb6:	68eb      	ldr	r3, [r5, #12]
 8006eb8:	b183      	cbz	r3, 8006edc <_Balloc+0x42>
 8006eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006ec2:	b9b8      	cbnz	r0, 8006ef4 <_Balloc+0x5a>
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	fa01 f506 	lsl.w	r5, r1, r6
 8006eca:	1d6a      	adds	r2, r5, #5
 8006ecc:	0092      	lsls	r2, r2, #2
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fabf 	bl	8007452 <_calloc_r>
 8006ed4:	b160      	cbz	r0, 8006ef0 <_Balloc+0x56>
 8006ed6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006eda:	e00e      	b.n	8006efa <_Balloc+0x60>
 8006edc:	2221      	movs	r2, #33	; 0x21
 8006ede:	2104      	movs	r1, #4
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 fab6 	bl	8007452 <_calloc_r>
 8006ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee8:	60e8      	str	r0, [r5, #12]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e4      	bne.n	8006eba <_Balloc+0x20>
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	6802      	ldr	r2, [r0, #0]
 8006ef6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006efa:	2300      	movs	r3, #0
 8006efc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f00:	e7f7      	b.n	8006ef2 <_Balloc+0x58>

08006f02 <_Bfree>:
 8006f02:	b570      	push	{r4, r5, r6, lr}
 8006f04:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006f06:	4606      	mov	r6, r0
 8006f08:	460d      	mov	r5, r1
 8006f0a:	b93c      	cbnz	r4, 8006f1c <_Bfree+0x1a>
 8006f0c:	2010      	movs	r0, #16
 8006f0e:	f7ff ffa3 	bl	8006e58 <malloc>
 8006f12:	6270      	str	r0, [r6, #36]	; 0x24
 8006f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f18:	6004      	str	r4, [r0, #0]
 8006f1a:	60c4      	str	r4, [r0, #12]
 8006f1c:	b13d      	cbz	r5, 8006f2e <_Bfree+0x2c>
 8006f1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f20:	686a      	ldr	r2, [r5, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f28:	6029      	str	r1, [r5, #0]
 8006f2a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}

08006f30 <__multadd>:
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	461f      	mov	r7, r3
 8006f36:	4606      	mov	r6, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	690d      	ldr	r5, [r1, #16]
 8006f3e:	f101 0c14 	add.w	ip, r1, #20
 8006f42:	f8dc 0000 	ldr.w	r0, [ip]
 8006f46:	3301      	adds	r3, #1
 8006f48:	b281      	uxth	r1, r0
 8006f4a:	fb02 7101 	mla	r1, r2, r1, r7
 8006f4e:	0c00      	lsrs	r0, r0, #16
 8006f50:	0c0f      	lsrs	r7, r1, #16
 8006f52:	fb02 7000 	mla	r0, r2, r0, r7
 8006f56:	b289      	uxth	r1, r1
 8006f58:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006f5c:	429d      	cmp	r5, r3
 8006f5e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006f62:	f84c 1b04 	str.w	r1, [ip], #4
 8006f66:	dcec      	bgt.n	8006f42 <__multadd+0x12>
 8006f68:	b1d7      	cbz	r7, 8006fa0 <__multadd+0x70>
 8006f6a:	68a3      	ldr	r3, [r4, #8]
 8006f6c:	42ab      	cmp	r3, r5
 8006f6e:	dc12      	bgt.n	8006f96 <__multadd+0x66>
 8006f70:	6861      	ldr	r1, [r4, #4]
 8006f72:	4630      	mov	r0, r6
 8006f74:	3101      	adds	r1, #1
 8006f76:	f7ff ff90 	bl	8006e9a <_Balloc>
 8006f7a:	4680      	mov	r8, r0
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	f104 010c 	add.w	r1, r4, #12
 8006f82:	3202      	adds	r2, #2
 8006f84:	0092      	lsls	r2, r2, #2
 8006f86:	300c      	adds	r0, #12
 8006f88:	f7ff ff7c 	bl	8006e84 <memcpy>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ffb7 	bl	8006f02 <_Bfree>
 8006f94:	4644      	mov	r4, r8
 8006f96:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f9a:	3501      	adds	r5, #1
 8006f9c:	615f      	str	r7, [r3, #20]
 8006f9e:	6125      	str	r5, [r4, #16]
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006fa6 <__hi0bits>:
 8006fa6:	0c02      	lsrs	r2, r0, #16
 8006fa8:	0412      	lsls	r2, r2, #16
 8006faa:	4603      	mov	r3, r0
 8006fac:	b9b2      	cbnz	r2, 8006fdc <__hi0bits+0x36>
 8006fae:	0403      	lsls	r3, r0, #16
 8006fb0:	2010      	movs	r0, #16
 8006fb2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006fb6:	bf04      	itt	eq
 8006fb8:	021b      	lsleq	r3, r3, #8
 8006fba:	3008      	addeq	r0, #8
 8006fbc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006fc0:	bf04      	itt	eq
 8006fc2:	011b      	lsleq	r3, r3, #4
 8006fc4:	3004      	addeq	r0, #4
 8006fc6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006fca:	bf04      	itt	eq
 8006fcc:	009b      	lsleq	r3, r3, #2
 8006fce:	3002      	addeq	r0, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	db06      	blt.n	8006fe2 <__hi0bits+0x3c>
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	d503      	bpl.n	8006fe0 <__hi0bits+0x3a>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	4770      	bx	lr
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e7e8      	b.n	8006fb2 <__hi0bits+0xc>
 8006fe0:	2020      	movs	r0, #32
 8006fe2:	4770      	bx	lr

08006fe4 <__lo0bits>:
 8006fe4:	6803      	ldr	r3, [r0, #0]
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	f013 0207 	ands.w	r2, r3, #7
 8006fec:	d00b      	beq.n	8007006 <__lo0bits+0x22>
 8006fee:	07da      	lsls	r2, r3, #31
 8006ff0:	d423      	bmi.n	800703a <__lo0bits+0x56>
 8006ff2:	0798      	lsls	r0, r3, #30
 8006ff4:	bf49      	itett	mi
 8006ff6:	085b      	lsrmi	r3, r3, #1
 8006ff8:	089b      	lsrpl	r3, r3, #2
 8006ffa:	2001      	movmi	r0, #1
 8006ffc:	600b      	strmi	r3, [r1, #0]
 8006ffe:	bf5c      	itt	pl
 8007000:	600b      	strpl	r3, [r1, #0]
 8007002:	2002      	movpl	r0, #2
 8007004:	4770      	bx	lr
 8007006:	b298      	uxth	r0, r3
 8007008:	b9a8      	cbnz	r0, 8007036 <__lo0bits+0x52>
 800700a:	2010      	movs	r0, #16
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007012:	bf04      	itt	eq
 8007014:	0a1b      	lsreq	r3, r3, #8
 8007016:	3008      	addeq	r0, #8
 8007018:	071a      	lsls	r2, r3, #28
 800701a:	bf04      	itt	eq
 800701c:	091b      	lsreq	r3, r3, #4
 800701e:	3004      	addeq	r0, #4
 8007020:	079a      	lsls	r2, r3, #30
 8007022:	bf04      	itt	eq
 8007024:	089b      	lsreq	r3, r3, #2
 8007026:	3002      	addeq	r0, #2
 8007028:	07da      	lsls	r2, r3, #31
 800702a:	d402      	bmi.n	8007032 <__lo0bits+0x4e>
 800702c:	085b      	lsrs	r3, r3, #1
 800702e:	d006      	beq.n	800703e <__lo0bits+0x5a>
 8007030:	3001      	adds	r0, #1
 8007032:	600b      	str	r3, [r1, #0]
 8007034:	4770      	bx	lr
 8007036:	4610      	mov	r0, r2
 8007038:	e7e9      	b.n	800700e <__lo0bits+0x2a>
 800703a:	2000      	movs	r0, #0
 800703c:	4770      	bx	lr
 800703e:	2020      	movs	r0, #32
 8007040:	4770      	bx	lr

08007042 <__i2b>:
 8007042:	b510      	push	{r4, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	2101      	movs	r1, #1
 8007048:	f7ff ff27 	bl	8006e9a <_Balloc>
 800704c:	2201      	movs	r2, #1
 800704e:	6144      	str	r4, [r0, #20]
 8007050:	6102      	str	r2, [r0, #16]
 8007052:	bd10      	pop	{r4, pc}

08007054 <__multiply>:
 8007054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	4614      	mov	r4, r2
 800705a:	690a      	ldr	r2, [r1, #16]
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	4688      	mov	r8, r1
 8007060:	429a      	cmp	r2, r3
 8007062:	bfbe      	ittt	lt
 8007064:	460b      	movlt	r3, r1
 8007066:	46a0      	movlt	r8, r4
 8007068:	461c      	movlt	r4, r3
 800706a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800706e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007072:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007076:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800707a:	eb07 0609 	add.w	r6, r7, r9
 800707e:	42b3      	cmp	r3, r6
 8007080:	bfb8      	it	lt
 8007082:	3101      	addlt	r1, #1
 8007084:	f7ff ff09 	bl	8006e9a <_Balloc>
 8007088:	f100 0514 	add.w	r5, r0, #20
 800708c:	462b      	mov	r3, r5
 800708e:	2200      	movs	r2, #0
 8007090:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007094:	4573      	cmp	r3, lr
 8007096:	d316      	bcc.n	80070c6 <__multiply+0x72>
 8007098:	f104 0214 	add.w	r2, r4, #20
 800709c:	f108 0114 	add.w	r1, r8, #20
 80070a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80070a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	9b00      	ldr	r3, [sp, #0]
 80070ac:	9201      	str	r2, [sp, #4]
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d80c      	bhi.n	80070cc <__multiply+0x78>
 80070b2:	2e00      	cmp	r6, #0
 80070b4:	dd03      	ble.n	80070be <__multiply+0x6a>
 80070b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d05d      	beq.n	800717a <__multiply+0x126>
 80070be:	6106      	str	r6, [r0, #16]
 80070c0:	b003      	add	sp, #12
 80070c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c6:	f843 2b04 	str.w	r2, [r3], #4
 80070ca:	e7e3      	b.n	8007094 <__multiply+0x40>
 80070cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80070d0:	f1bb 0f00 	cmp.w	fp, #0
 80070d4:	d023      	beq.n	800711e <__multiply+0xca>
 80070d6:	4689      	mov	r9, r1
 80070d8:	46ac      	mov	ip, r5
 80070da:	f04f 0800 	mov.w	r8, #0
 80070de:	f859 4b04 	ldr.w	r4, [r9], #4
 80070e2:	f8dc a000 	ldr.w	sl, [ip]
 80070e6:	b2a3      	uxth	r3, r4
 80070e8:	fa1f fa8a 	uxth.w	sl, sl
 80070ec:	fb0b a303 	mla	r3, fp, r3, sl
 80070f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070f4:	f8dc 4000 	ldr.w	r4, [ip]
 80070f8:	4443      	add	r3, r8
 80070fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8007102:	46e2      	mov	sl, ip
 8007104:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007108:	b29b      	uxth	r3, r3
 800710a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800710e:	454f      	cmp	r7, r9
 8007110:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007114:	f84a 3b04 	str.w	r3, [sl], #4
 8007118:	d82b      	bhi.n	8007172 <__multiply+0x11e>
 800711a:	f8cc 8004 	str.w	r8, [ip, #4]
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	3204      	adds	r2, #4
 8007122:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007126:	f1ba 0f00 	cmp.w	sl, #0
 800712a:	d020      	beq.n	800716e <__multiply+0x11a>
 800712c:	4689      	mov	r9, r1
 800712e:	46a8      	mov	r8, r5
 8007130:	f04f 0b00 	mov.w	fp, #0
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	f8b9 c000 	ldrh.w	ip, [r9]
 800713a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800713e:	b29b      	uxth	r3, r3
 8007140:	fb0a 440c 	mla	r4, sl, ip, r4
 8007144:	46c4      	mov	ip, r8
 8007146:	445c      	add	r4, fp
 8007148:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800714c:	f84c 3b04 	str.w	r3, [ip], #4
 8007150:	f859 3b04 	ldr.w	r3, [r9], #4
 8007154:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007158:	0c1b      	lsrs	r3, r3, #16
 800715a:	fb0a b303 	mla	r3, sl, r3, fp
 800715e:	454f      	cmp	r7, r9
 8007160:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007164:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007168:	d805      	bhi.n	8007176 <__multiply+0x122>
 800716a:	f8c8 3004 	str.w	r3, [r8, #4]
 800716e:	3504      	adds	r5, #4
 8007170:	e79b      	b.n	80070aa <__multiply+0x56>
 8007172:	46d4      	mov	ip, sl
 8007174:	e7b3      	b.n	80070de <__multiply+0x8a>
 8007176:	46e0      	mov	r8, ip
 8007178:	e7dd      	b.n	8007136 <__multiply+0xe2>
 800717a:	3e01      	subs	r6, #1
 800717c:	e799      	b.n	80070b2 <__multiply+0x5e>
	...

08007180 <__pow5mult>:
 8007180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007184:	4615      	mov	r5, r2
 8007186:	f012 0203 	ands.w	r2, r2, #3
 800718a:	4606      	mov	r6, r0
 800718c:	460f      	mov	r7, r1
 800718e:	d007      	beq.n	80071a0 <__pow5mult+0x20>
 8007190:	4c21      	ldr	r4, [pc, #132]	; (8007218 <__pow5mult+0x98>)
 8007192:	3a01      	subs	r2, #1
 8007194:	2300      	movs	r3, #0
 8007196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800719a:	f7ff fec9 	bl	8006f30 <__multadd>
 800719e:	4607      	mov	r7, r0
 80071a0:	10ad      	asrs	r5, r5, #2
 80071a2:	d035      	beq.n	8007210 <__pow5mult+0x90>
 80071a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071a6:	b93c      	cbnz	r4, 80071b8 <__pow5mult+0x38>
 80071a8:	2010      	movs	r0, #16
 80071aa:	f7ff fe55 	bl	8006e58 <malloc>
 80071ae:	6270      	str	r0, [r6, #36]	; 0x24
 80071b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071b4:	6004      	str	r4, [r0, #0]
 80071b6:	60c4      	str	r4, [r0, #12]
 80071b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071c0:	b94c      	cbnz	r4, 80071d6 <__pow5mult+0x56>
 80071c2:	f240 2171 	movw	r1, #625	; 0x271
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ff3b 	bl	8007042 <__i2b>
 80071cc:	2300      	movs	r3, #0
 80071ce:	4604      	mov	r4, r0
 80071d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80071d4:	6003      	str	r3, [r0, #0]
 80071d6:	f04f 0800 	mov.w	r8, #0
 80071da:	07eb      	lsls	r3, r5, #31
 80071dc:	d50a      	bpl.n	80071f4 <__pow5mult+0x74>
 80071de:	4639      	mov	r1, r7
 80071e0:	4622      	mov	r2, r4
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7ff ff36 	bl	8007054 <__multiply>
 80071e8:	4681      	mov	r9, r0
 80071ea:	4639      	mov	r1, r7
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7ff fe88 	bl	8006f02 <_Bfree>
 80071f2:	464f      	mov	r7, r9
 80071f4:	106d      	asrs	r5, r5, #1
 80071f6:	d00b      	beq.n	8007210 <__pow5mult+0x90>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	b938      	cbnz	r0, 800720c <__pow5mult+0x8c>
 80071fc:	4622      	mov	r2, r4
 80071fe:	4621      	mov	r1, r4
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff ff27 	bl	8007054 <__multiply>
 8007206:	6020      	str	r0, [r4, #0]
 8007208:	f8c0 8000 	str.w	r8, [r0]
 800720c:	4604      	mov	r4, r0
 800720e:	e7e4      	b.n	80071da <__pow5mult+0x5a>
 8007210:	4638      	mov	r0, r7
 8007212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007216:	bf00      	nop
 8007218:	08007e28 	.word	0x08007e28

0800721c <__lshift>:
 800721c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007220:	460c      	mov	r4, r1
 8007222:	4607      	mov	r7, r0
 8007224:	4616      	mov	r6, r2
 8007226:	6923      	ldr	r3, [r4, #16]
 8007228:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800722c:	eb0a 0903 	add.w	r9, sl, r3
 8007230:	6849      	ldr	r1, [r1, #4]
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	f109 0501 	add.w	r5, r9, #1
 8007238:	42ab      	cmp	r3, r5
 800723a:	db32      	blt.n	80072a2 <__lshift+0x86>
 800723c:	4638      	mov	r0, r7
 800723e:	f7ff fe2c 	bl	8006e9a <_Balloc>
 8007242:	2300      	movs	r3, #0
 8007244:	4680      	mov	r8, r0
 8007246:	461a      	mov	r2, r3
 8007248:	f100 0114 	add.w	r1, r0, #20
 800724c:	4553      	cmp	r3, sl
 800724e:	db2b      	blt.n	80072a8 <__lshift+0x8c>
 8007250:	6920      	ldr	r0, [r4, #16]
 8007252:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007256:	f104 0314 	add.w	r3, r4, #20
 800725a:	f016 021f 	ands.w	r2, r6, #31
 800725e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007262:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007266:	d025      	beq.n	80072b4 <__lshift+0x98>
 8007268:	2000      	movs	r0, #0
 800726a:	f1c2 0e20 	rsb	lr, r2, #32
 800726e:	468a      	mov	sl, r1
 8007270:	681e      	ldr	r6, [r3, #0]
 8007272:	4096      	lsls	r6, r2
 8007274:	4330      	orrs	r0, r6
 8007276:	f84a 0b04 	str.w	r0, [sl], #4
 800727a:	f853 0b04 	ldr.w	r0, [r3], #4
 800727e:	459c      	cmp	ip, r3
 8007280:	fa20 f00e 	lsr.w	r0, r0, lr
 8007284:	d814      	bhi.n	80072b0 <__lshift+0x94>
 8007286:	6048      	str	r0, [r1, #4]
 8007288:	b108      	cbz	r0, 800728e <__lshift+0x72>
 800728a:	f109 0502 	add.w	r5, r9, #2
 800728e:	3d01      	subs	r5, #1
 8007290:	4638      	mov	r0, r7
 8007292:	f8c8 5010 	str.w	r5, [r8, #16]
 8007296:	4621      	mov	r1, r4
 8007298:	f7ff fe33 	bl	8006f02 <_Bfree>
 800729c:	4640      	mov	r0, r8
 800729e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a2:	3101      	adds	r1, #1
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	e7c7      	b.n	8007238 <__lshift+0x1c>
 80072a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80072ac:	3301      	adds	r3, #1
 80072ae:	e7cd      	b.n	800724c <__lshift+0x30>
 80072b0:	4651      	mov	r1, sl
 80072b2:	e7dc      	b.n	800726e <__lshift+0x52>
 80072b4:	3904      	subs	r1, #4
 80072b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ba:	459c      	cmp	ip, r3
 80072bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80072c0:	d8f9      	bhi.n	80072b6 <__lshift+0x9a>
 80072c2:	e7e4      	b.n	800728e <__lshift+0x72>

080072c4 <__mcmp>:
 80072c4:	6903      	ldr	r3, [r0, #16]
 80072c6:	690a      	ldr	r2, [r1, #16]
 80072c8:	b530      	push	{r4, r5, lr}
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	d10c      	bne.n	80072e8 <__mcmp+0x24>
 80072ce:	0092      	lsls	r2, r2, #2
 80072d0:	3014      	adds	r0, #20
 80072d2:	3114      	adds	r1, #20
 80072d4:	1884      	adds	r4, r0, r2
 80072d6:	4411      	add	r1, r2
 80072d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072e0:	4295      	cmp	r5, r2
 80072e2:	d003      	beq.n	80072ec <__mcmp+0x28>
 80072e4:	d305      	bcc.n	80072f2 <__mcmp+0x2e>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd30      	pop	{r4, r5, pc}
 80072ec:	42a0      	cmp	r0, r4
 80072ee:	d3f3      	bcc.n	80072d8 <__mcmp+0x14>
 80072f0:	e7fa      	b.n	80072e8 <__mcmp+0x24>
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295
 80072f6:	e7f7      	b.n	80072e8 <__mcmp+0x24>

080072f8 <__mdiff>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	460d      	mov	r5, r1
 80072fe:	4607      	mov	r7, r0
 8007300:	4611      	mov	r1, r2
 8007302:	4628      	mov	r0, r5
 8007304:	4614      	mov	r4, r2
 8007306:	f7ff ffdd 	bl	80072c4 <__mcmp>
 800730a:	1e06      	subs	r6, r0, #0
 800730c:	d108      	bne.n	8007320 <__mdiff+0x28>
 800730e:	4631      	mov	r1, r6
 8007310:	4638      	mov	r0, r7
 8007312:	f7ff fdc2 	bl	8006e9a <_Balloc>
 8007316:	2301      	movs	r3, #1
 8007318:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800731c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007320:	bfa4      	itt	ge
 8007322:	4623      	movge	r3, r4
 8007324:	462c      	movge	r4, r5
 8007326:	4638      	mov	r0, r7
 8007328:	6861      	ldr	r1, [r4, #4]
 800732a:	bfa6      	itte	ge
 800732c:	461d      	movge	r5, r3
 800732e:	2600      	movge	r6, #0
 8007330:	2601      	movlt	r6, #1
 8007332:	f7ff fdb2 	bl	8006e9a <_Balloc>
 8007336:	f04f 0e00 	mov.w	lr, #0
 800733a:	60c6      	str	r6, [r0, #12]
 800733c:	692b      	ldr	r3, [r5, #16]
 800733e:	6926      	ldr	r6, [r4, #16]
 8007340:	f104 0214 	add.w	r2, r4, #20
 8007344:	f105 0914 	add.w	r9, r5, #20
 8007348:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800734c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007350:	f100 0114 	add.w	r1, r0, #20
 8007354:	f852 ab04 	ldr.w	sl, [r2], #4
 8007358:	f859 5b04 	ldr.w	r5, [r9], #4
 800735c:	fa1f f38a 	uxth.w	r3, sl
 8007360:	4473      	add	r3, lr
 8007362:	b2ac      	uxth	r4, r5
 8007364:	1b1b      	subs	r3, r3, r4
 8007366:	0c2c      	lsrs	r4, r5, #16
 8007368:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800736c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007370:	b29b      	uxth	r3, r3
 8007372:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007376:	45c8      	cmp	r8, r9
 8007378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800737c:	4694      	mov	ip, r2
 800737e:	f841 4b04 	str.w	r4, [r1], #4
 8007382:	d8e7      	bhi.n	8007354 <__mdiff+0x5c>
 8007384:	45bc      	cmp	ip, r7
 8007386:	d304      	bcc.n	8007392 <__mdiff+0x9a>
 8007388:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800738c:	b183      	cbz	r3, 80073b0 <__mdiff+0xb8>
 800738e:	6106      	str	r6, [r0, #16]
 8007390:	e7c4      	b.n	800731c <__mdiff+0x24>
 8007392:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007396:	b2a2      	uxth	r2, r4
 8007398:	4472      	add	r2, lr
 800739a:	1413      	asrs	r3, r2, #16
 800739c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80073a0:	b292      	uxth	r2, r2
 80073a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80073a6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80073aa:	f841 2b04 	str.w	r2, [r1], #4
 80073ae:	e7e9      	b.n	8007384 <__mdiff+0x8c>
 80073b0:	3e01      	subs	r6, #1
 80073b2:	e7e9      	b.n	8007388 <__mdiff+0x90>

080073b4 <__d2b>:
 80073b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80073b8:	461c      	mov	r4, r3
 80073ba:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80073be:	2101      	movs	r1, #1
 80073c0:	4690      	mov	r8, r2
 80073c2:	f7ff fd6a 	bl	8006e9a <_Balloc>
 80073c6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80073ca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80073ce:	4607      	mov	r7, r0
 80073d0:	bb34      	cbnz	r4, 8007420 <__d2b+0x6c>
 80073d2:	9201      	str	r2, [sp, #4]
 80073d4:	f1b8 0200 	subs.w	r2, r8, #0
 80073d8:	d027      	beq.n	800742a <__d2b+0x76>
 80073da:	a802      	add	r0, sp, #8
 80073dc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80073e0:	f7ff fe00 	bl	8006fe4 <__lo0bits>
 80073e4:	9900      	ldr	r1, [sp, #0]
 80073e6:	b1f0      	cbz	r0, 8007426 <__d2b+0x72>
 80073e8:	9a01      	ldr	r2, [sp, #4]
 80073ea:	f1c0 0320 	rsb	r3, r0, #32
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	430b      	orrs	r3, r1
 80073f4:	40c2      	lsrs	r2, r0
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	9201      	str	r2, [sp, #4]
 80073fa:	9b01      	ldr	r3, [sp, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bf14      	ite	ne
 8007400:	2102      	movne	r1, #2
 8007402:	2101      	moveq	r1, #1
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	6139      	str	r1, [r7, #16]
 8007408:	b1c4      	cbz	r4, 800743c <__d2b+0x88>
 800740a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800740e:	4404      	add	r4, r0
 8007410:	6034      	str	r4, [r6, #0]
 8007412:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007416:	6028      	str	r0, [r5, #0]
 8007418:	4638      	mov	r0, r7
 800741a:	b002      	add	sp, #8
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007424:	e7d5      	b.n	80073d2 <__d2b+0x1e>
 8007426:	6179      	str	r1, [r7, #20]
 8007428:	e7e7      	b.n	80073fa <__d2b+0x46>
 800742a:	a801      	add	r0, sp, #4
 800742c:	f7ff fdda 	bl	8006fe4 <__lo0bits>
 8007430:	2101      	movs	r1, #1
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	6139      	str	r1, [r7, #16]
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	3020      	adds	r0, #32
 800743a:	e7e5      	b.n	8007408 <__d2b+0x54>
 800743c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007440:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007444:	6030      	str	r0, [r6, #0]
 8007446:	6918      	ldr	r0, [r3, #16]
 8007448:	f7ff fdad 	bl	8006fa6 <__hi0bits>
 800744c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007450:	e7e1      	b.n	8007416 <__d2b+0x62>

08007452 <_calloc_r>:
 8007452:	b538      	push	{r3, r4, r5, lr}
 8007454:	fb02 f401 	mul.w	r4, r2, r1
 8007458:	4621      	mov	r1, r4
 800745a:	f000 f855 	bl	8007508 <_malloc_r>
 800745e:	4605      	mov	r5, r0
 8007460:	b118      	cbz	r0, 800746a <_calloc_r+0x18>
 8007462:	4622      	mov	r2, r4
 8007464:	2100      	movs	r1, #0
 8007466:	f7fd ff6d 	bl	8005344 <memset>
 800746a:	4628      	mov	r0, r5
 800746c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007470 <_free_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4605      	mov	r5, r0
 8007474:	2900      	cmp	r1, #0
 8007476:	d043      	beq.n	8007500 <_free_r+0x90>
 8007478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747c:	1f0c      	subs	r4, r1, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfb8      	it	lt
 8007482:	18e4      	addlt	r4, r4, r3
 8007484:	f000 fb54 	bl	8007b30 <__malloc_lock>
 8007488:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <_free_r+0x94>)
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	4610      	mov	r0, r2
 800748e:	b933      	cbnz	r3, 800749e <_free_r+0x2e>
 8007490:	6063      	str	r3, [r4, #4]
 8007492:	6014      	str	r4, [r2, #0]
 8007494:	4628      	mov	r0, r5
 8007496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800749a:	f000 bb4a 	b.w	8007b32 <__malloc_unlock>
 800749e:	42a3      	cmp	r3, r4
 80074a0:	d90b      	bls.n	80074ba <_free_r+0x4a>
 80074a2:	6821      	ldr	r1, [r4, #0]
 80074a4:	1862      	adds	r2, r4, r1
 80074a6:	4293      	cmp	r3, r2
 80074a8:	bf01      	itttt	eq
 80074aa:	681a      	ldreq	r2, [r3, #0]
 80074ac:	685b      	ldreq	r3, [r3, #4]
 80074ae:	1852      	addeq	r2, r2, r1
 80074b0:	6022      	streq	r2, [r4, #0]
 80074b2:	6063      	str	r3, [r4, #4]
 80074b4:	6004      	str	r4, [r0, #0]
 80074b6:	e7ed      	b.n	8007494 <_free_r+0x24>
 80074b8:	4613      	mov	r3, r2
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	b10a      	cbz	r2, 80074c2 <_free_r+0x52>
 80074be:	42a2      	cmp	r2, r4
 80074c0:	d9fa      	bls.n	80074b8 <_free_r+0x48>
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	1858      	adds	r0, r3, r1
 80074c6:	42a0      	cmp	r0, r4
 80074c8:	d10b      	bne.n	80074e2 <_free_r+0x72>
 80074ca:	6820      	ldr	r0, [r4, #0]
 80074cc:	4401      	add	r1, r0
 80074ce:	1858      	adds	r0, r3, r1
 80074d0:	4282      	cmp	r2, r0
 80074d2:	6019      	str	r1, [r3, #0]
 80074d4:	d1de      	bne.n	8007494 <_free_r+0x24>
 80074d6:	6810      	ldr	r0, [r2, #0]
 80074d8:	6852      	ldr	r2, [r2, #4]
 80074da:	4401      	add	r1, r0
 80074dc:	6019      	str	r1, [r3, #0]
 80074de:	605a      	str	r2, [r3, #4]
 80074e0:	e7d8      	b.n	8007494 <_free_r+0x24>
 80074e2:	d902      	bls.n	80074ea <_free_r+0x7a>
 80074e4:	230c      	movs	r3, #12
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	e7d4      	b.n	8007494 <_free_r+0x24>
 80074ea:	6820      	ldr	r0, [r4, #0]
 80074ec:	1821      	adds	r1, r4, r0
 80074ee:	428a      	cmp	r2, r1
 80074f0:	bf01      	itttt	eq
 80074f2:	6811      	ldreq	r1, [r2, #0]
 80074f4:	6852      	ldreq	r2, [r2, #4]
 80074f6:	1809      	addeq	r1, r1, r0
 80074f8:	6021      	streq	r1, [r4, #0]
 80074fa:	6062      	str	r2, [r4, #4]
 80074fc:	605c      	str	r4, [r3, #4]
 80074fe:	e7c9      	b.n	8007494 <_free_r+0x24>
 8007500:	bd38      	pop	{r3, r4, r5, pc}
 8007502:	bf00      	nop
 8007504:	20000218 	.word	0x20000218

08007508 <_malloc_r>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	1ccd      	adds	r5, r1, #3
 800750c:	f025 0503 	bic.w	r5, r5, #3
 8007510:	3508      	adds	r5, #8
 8007512:	2d0c      	cmp	r5, #12
 8007514:	bf38      	it	cc
 8007516:	250c      	movcc	r5, #12
 8007518:	2d00      	cmp	r5, #0
 800751a:	4606      	mov	r6, r0
 800751c:	db01      	blt.n	8007522 <_malloc_r+0x1a>
 800751e:	42a9      	cmp	r1, r5
 8007520:	d903      	bls.n	800752a <_malloc_r+0x22>
 8007522:	230c      	movs	r3, #12
 8007524:	6033      	str	r3, [r6, #0]
 8007526:	2000      	movs	r0, #0
 8007528:	bd70      	pop	{r4, r5, r6, pc}
 800752a:	f000 fb01 	bl	8007b30 <__malloc_lock>
 800752e:	4a21      	ldr	r2, [pc, #132]	; (80075b4 <_malloc_r+0xac>)
 8007530:	6814      	ldr	r4, [r2, #0]
 8007532:	4621      	mov	r1, r4
 8007534:	b991      	cbnz	r1, 800755c <_malloc_r+0x54>
 8007536:	4c20      	ldr	r4, [pc, #128]	; (80075b8 <_malloc_r+0xb0>)
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	b91b      	cbnz	r3, 8007544 <_malloc_r+0x3c>
 800753c:	4630      	mov	r0, r6
 800753e:	f000 f97b 	bl	8007838 <_sbrk_r>
 8007542:	6020      	str	r0, [r4, #0]
 8007544:	4629      	mov	r1, r5
 8007546:	4630      	mov	r0, r6
 8007548:	f000 f976 	bl	8007838 <_sbrk_r>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d124      	bne.n	800759a <_malloc_r+0x92>
 8007550:	230c      	movs	r3, #12
 8007552:	4630      	mov	r0, r6
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	f000 faec 	bl	8007b32 <__malloc_unlock>
 800755a:	e7e4      	b.n	8007526 <_malloc_r+0x1e>
 800755c:	680b      	ldr	r3, [r1, #0]
 800755e:	1b5b      	subs	r3, r3, r5
 8007560:	d418      	bmi.n	8007594 <_malloc_r+0x8c>
 8007562:	2b0b      	cmp	r3, #11
 8007564:	d90f      	bls.n	8007586 <_malloc_r+0x7e>
 8007566:	600b      	str	r3, [r1, #0]
 8007568:	18cc      	adds	r4, r1, r3
 800756a:	50cd      	str	r5, [r1, r3]
 800756c:	4630      	mov	r0, r6
 800756e:	f000 fae0 	bl	8007b32 <__malloc_unlock>
 8007572:	f104 000b 	add.w	r0, r4, #11
 8007576:	1d23      	adds	r3, r4, #4
 8007578:	f020 0007 	bic.w	r0, r0, #7
 800757c:	1ac3      	subs	r3, r0, r3
 800757e:	d0d3      	beq.n	8007528 <_malloc_r+0x20>
 8007580:	425a      	negs	r2, r3
 8007582:	50e2      	str	r2, [r4, r3]
 8007584:	e7d0      	b.n	8007528 <_malloc_r+0x20>
 8007586:	684b      	ldr	r3, [r1, #4]
 8007588:	428c      	cmp	r4, r1
 800758a:	bf16      	itet	ne
 800758c:	6063      	strne	r3, [r4, #4]
 800758e:	6013      	streq	r3, [r2, #0]
 8007590:	460c      	movne	r4, r1
 8007592:	e7eb      	b.n	800756c <_malloc_r+0x64>
 8007594:	460c      	mov	r4, r1
 8007596:	6849      	ldr	r1, [r1, #4]
 8007598:	e7cc      	b.n	8007534 <_malloc_r+0x2c>
 800759a:	1cc4      	adds	r4, r0, #3
 800759c:	f024 0403 	bic.w	r4, r4, #3
 80075a0:	42a0      	cmp	r0, r4
 80075a2:	d005      	beq.n	80075b0 <_malloc_r+0xa8>
 80075a4:	1a21      	subs	r1, r4, r0
 80075a6:	4630      	mov	r0, r6
 80075a8:	f000 f946 	bl	8007838 <_sbrk_r>
 80075ac:	3001      	adds	r0, #1
 80075ae:	d0cf      	beq.n	8007550 <_malloc_r+0x48>
 80075b0:	6025      	str	r5, [r4, #0]
 80075b2:	e7db      	b.n	800756c <_malloc_r+0x64>
 80075b4:	20000218 	.word	0x20000218
 80075b8:	2000021c 	.word	0x2000021c

080075bc <__sfputc_r>:
 80075bc:	6893      	ldr	r3, [r2, #8]
 80075be:	b410      	push	{r4}
 80075c0:	3b01      	subs	r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	6093      	str	r3, [r2, #8]
 80075c6:	da07      	bge.n	80075d8 <__sfputc_r+0x1c>
 80075c8:	6994      	ldr	r4, [r2, #24]
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	db01      	blt.n	80075d2 <__sfputc_r+0x16>
 80075ce:	290a      	cmp	r1, #10
 80075d0:	d102      	bne.n	80075d8 <__sfputc_r+0x1c>
 80075d2:	bc10      	pop	{r4}
 80075d4:	f000 b984 	b.w	80078e0 <__swbuf_r>
 80075d8:	6813      	ldr	r3, [r2, #0]
 80075da:	1c58      	adds	r0, r3, #1
 80075dc:	6010      	str	r0, [r2, #0]
 80075de:	7019      	strb	r1, [r3, #0]
 80075e0:	4608      	mov	r0, r1
 80075e2:	bc10      	pop	{r4}
 80075e4:	4770      	bx	lr

080075e6 <__sfputs_r>:
 80075e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e8:	4606      	mov	r6, r0
 80075ea:	460f      	mov	r7, r1
 80075ec:	4614      	mov	r4, r2
 80075ee:	18d5      	adds	r5, r2, r3
 80075f0:	42ac      	cmp	r4, r5
 80075f2:	d101      	bne.n	80075f8 <__sfputs_r+0x12>
 80075f4:	2000      	movs	r0, #0
 80075f6:	e007      	b.n	8007608 <__sfputs_r+0x22>
 80075f8:	463a      	mov	r2, r7
 80075fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fe:	4630      	mov	r0, r6
 8007600:	f7ff ffdc 	bl	80075bc <__sfputc_r>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d1f3      	bne.n	80075f0 <__sfputs_r+0xa>
 8007608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800760c <_vfiprintf_r>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	460c      	mov	r4, r1
 8007612:	b09d      	sub	sp, #116	; 0x74
 8007614:	4617      	mov	r7, r2
 8007616:	461d      	mov	r5, r3
 8007618:	4606      	mov	r6, r0
 800761a:	b118      	cbz	r0, 8007624 <_vfiprintf_r+0x18>
 800761c:	6983      	ldr	r3, [r0, #24]
 800761e:	b90b      	cbnz	r3, 8007624 <_vfiprintf_r+0x18>
 8007620:	f7ff fb1e 	bl	8006c60 <__sinit>
 8007624:	4b7c      	ldr	r3, [pc, #496]	; (8007818 <_vfiprintf_r+0x20c>)
 8007626:	429c      	cmp	r4, r3
 8007628:	d158      	bne.n	80076dc <_vfiprintf_r+0xd0>
 800762a:	6874      	ldr	r4, [r6, #4]
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	0718      	lsls	r0, r3, #28
 8007630:	d55e      	bpl.n	80076f0 <_vfiprintf_r+0xe4>
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d05b      	beq.n	80076f0 <_vfiprintf_r+0xe4>
 8007638:	2300      	movs	r3, #0
 800763a:	9309      	str	r3, [sp, #36]	; 0x24
 800763c:	2320      	movs	r3, #32
 800763e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007642:	2330      	movs	r3, #48	; 0x30
 8007644:	f04f 0b01 	mov.w	fp, #1
 8007648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800764c:	9503      	str	r5, [sp, #12]
 800764e:	46b8      	mov	r8, r7
 8007650:	4645      	mov	r5, r8
 8007652:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007656:	b10b      	cbz	r3, 800765c <_vfiprintf_r+0x50>
 8007658:	2b25      	cmp	r3, #37	; 0x25
 800765a:	d154      	bne.n	8007706 <_vfiprintf_r+0xfa>
 800765c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007660:	d00b      	beq.n	800767a <_vfiprintf_r+0x6e>
 8007662:	4653      	mov	r3, sl
 8007664:	463a      	mov	r2, r7
 8007666:	4621      	mov	r1, r4
 8007668:	4630      	mov	r0, r6
 800766a:	f7ff ffbc 	bl	80075e6 <__sfputs_r>
 800766e:	3001      	adds	r0, #1
 8007670:	f000 80c2 	beq.w	80077f8 <_vfiprintf_r+0x1ec>
 8007674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007676:	4453      	add	r3, sl
 8007678:	9309      	str	r3, [sp, #36]	; 0x24
 800767a:	f898 3000 	ldrb.w	r3, [r8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80ba 	beq.w	80077f8 <_vfiprintf_r+0x1ec>
 8007684:	2300      	movs	r3, #0
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007696:	931a      	str	r3, [sp, #104]	; 0x68
 8007698:	46a8      	mov	r8, r5
 800769a:	2205      	movs	r2, #5
 800769c:	f818 1b01 	ldrb.w	r1, [r8], #1
 80076a0:	485e      	ldr	r0, [pc, #376]	; (800781c <_vfiprintf_r+0x210>)
 80076a2:	f7ff fbe1 	bl	8006e68 <memchr>
 80076a6:	9b04      	ldr	r3, [sp, #16]
 80076a8:	bb78      	cbnz	r0, 800770a <_vfiprintf_r+0xfe>
 80076aa:	06d9      	lsls	r1, r3, #27
 80076ac:	bf44      	itt	mi
 80076ae:	2220      	movmi	r2, #32
 80076b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076b4:	071a      	lsls	r2, r3, #28
 80076b6:	bf44      	itt	mi
 80076b8:	222b      	movmi	r2, #43	; 0x2b
 80076ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076be:	782a      	ldrb	r2, [r5, #0]
 80076c0:	2a2a      	cmp	r2, #42	; 0x2a
 80076c2:	d02a      	beq.n	800771a <_vfiprintf_r+0x10e>
 80076c4:	46a8      	mov	r8, r5
 80076c6:	2000      	movs	r0, #0
 80076c8:	250a      	movs	r5, #10
 80076ca:	9a07      	ldr	r2, [sp, #28]
 80076cc:	4641      	mov	r1, r8
 80076ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d2:	3b30      	subs	r3, #48	; 0x30
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	d969      	bls.n	80077ac <_vfiprintf_r+0x1a0>
 80076d8:	b360      	cbz	r0, 8007734 <_vfiprintf_r+0x128>
 80076da:	e024      	b.n	8007726 <_vfiprintf_r+0x11a>
 80076dc:	4b50      	ldr	r3, [pc, #320]	; (8007820 <_vfiprintf_r+0x214>)
 80076de:	429c      	cmp	r4, r3
 80076e0:	d101      	bne.n	80076e6 <_vfiprintf_r+0xda>
 80076e2:	68b4      	ldr	r4, [r6, #8]
 80076e4:	e7a2      	b.n	800762c <_vfiprintf_r+0x20>
 80076e6:	4b4f      	ldr	r3, [pc, #316]	; (8007824 <_vfiprintf_r+0x218>)
 80076e8:	429c      	cmp	r4, r3
 80076ea:	bf08      	it	eq
 80076ec:	68f4      	ldreq	r4, [r6, #12]
 80076ee:	e79d      	b.n	800762c <_vfiprintf_r+0x20>
 80076f0:	4621      	mov	r1, r4
 80076f2:	4630      	mov	r0, r6
 80076f4:	f000 f958 	bl	80079a8 <__swsetup_r>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d09d      	beq.n	8007638 <_vfiprintf_r+0x2c>
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	b01d      	add	sp, #116	; 0x74
 8007702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007706:	46a8      	mov	r8, r5
 8007708:	e7a2      	b.n	8007650 <_vfiprintf_r+0x44>
 800770a:	4a44      	ldr	r2, [pc, #272]	; (800781c <_vfiprintf_r+0x210>)
 800770c:	4645      	mov	r5, r8
 800770e:	1a80      	subs	r0, r0, r2
 8007710:	fa0b f000 	lsl.w	r0, fp, r0
 8007714:	4318      	orrs	r0, r3
 8007716:	9004      	str	r0, [sp, #16]
 8007718:	e7be      	b.n	8007698 <_vfiprintf_r+0x8c>
 800771a:	9a03      	ldr	r2, [sp, #12]
 800771c:	1d11      	adds	r1, r2, #4
 800771e:	6812      	ldr	r2, [r2, #0]
 8007720:	9103      	str	r1, [sp, #12]
 8007722:	2a00      	cmp	r2, #0
 8007724:	db01      	blt.n	800772a <_vfiprintf_r+0x11e>
 8007726:	9207      	str	r2, [sp, #28]
 8007728:	e004      	b.n	8007734 <_vfiprintf_r+0x128>
 800772a:	4252      	negs	r2, r2
 800772c:	f043 0302 	orr.w	r3, r3, #2
 8007730:	9207      	str	r2, [sp, #28]
 8007732:	9304      	str	r3, [sp, #16]
 8007734:	f898 3000 	ldrb.w	r3, [r8]
 8007738:	2b2e      	cmp	r3, #46	; 0x2e
 800773a:	d10e      	bne.n	800775a <_vfiprintf_r+0x14e>
 800773c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007740:	2b2a      	cmp	r3, #42	; 0x2a
 8007742:	d138      	bne.n	80077b6 <_vfiprintf_r+0x1aa>
 8007744:	9b03      	ldr	r3, [sp, #12]
 8007746:	f108 0802 	add.w	r8, r8, #2
 800774a:	1d1a      	adds	r2, r3, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	9203      	str	r2, [sp, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	bfb8      	it	lt
 8007754:	f04f 33ff 	movlt.w	r3, #4294967295
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	4d33      	ldr	r5, [pc, #204]	; (8007828 <_vfiprintf_r+0x21c>)
 800775c:	2203      	movs	r2, #3
 800775e:	f898 1000 	ldrb.w	r1, [r8]
 8007762:	4628      	mov	r0, r5
 8007764:	f7ff fb80 	bl	8006e68 <memchr>
 8007768:	b140      	cbz	r0, 800777c <_vfiprintf_r+0x170>
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	1b40      	subs	r0, r0, r5
 800776e:	fa03 f000 	lsl.w	r0, r3, r0
 8007772:	9b04      	ldr	r3, [sp, #16]
 8007774:	f108 0801 	add.w	r8, r8, #1
 8007778:	4303      	orrs	r3, r0
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	f898 1000 	ldrb.w	r1, [r8]
 8007780:	2206      	movs	r2, #6
 8007782:	482a      	ldr	r0, [pc, #168]	; (800782c <_vfiprintf_r+0x220>)
 8007784:	f108 0701 	add.w	r7, r8, #1
 8007788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800778c:	f7ff fb6c 	bl	8006e68 <memchr>
 8007790:	2800      	cmp	r0, #0
 8007792:	d037      	beq.n	8007804 <_vfiprintf_r+0x1f8>
 8007794:	4b26      	ldr	r3, [pc, #152]	; (8007830 <_vfiprintf_r+0x224>)
 8007796:	bb1b      	cbnz	r3, 80077e0 <_vfiprintf_r+0x1d4>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	3307      	adds	r3, #7
 800779c:	f023 0307 	bic.w	r3, r3, #7
 80077a0:	3308      	adds	r3, #8
 80077a2:	9303      	str	r3, [sp, #12]
 80077a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a6:	444b      	add	r3, r9
 80077a8:	9309      	str	r3, [sp, #36]	; 0x24
 80077aa:	e750      	b.n	800764e <_vfiprintf_r+0x42>
 80077ac:	fb05 3202 	mla	r2, r5, r2, r3
 80077b0:	2001      	movs	r0, #1
 80077b2:	4688      	mov	r8, r1
 80077b4:	e78a      	b.n	80076cc <_vfiprintf_r+0xc0>
 80077b6:	2300      	movs	r3, #0
 80077b8:	250a      	movs	r5, #10
 80077ba:	4619      	mov	r1, r3
 80077bc:	f108 0801 	add.w	r8, r8, #1
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	4640      	mov	r0, r8
 80077c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c8:	3a30      	subs	r2, #48	; 0x30
 80077ca:	2a09      	cmp	r2, #9
 80077cc:	d903      	bls.n	80077d6 <_vfiprintf_r+0x1ca>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0c3      	beq.n	800775a <_vfiprintf_r+0x14e>
 80077d2:	9105      	str	r1, [sp, #20]
 80077d4:	e7c1      	b.n	800775a <_vfiprintf_r+0x14e>
 80077d6:	fb05 2101 	mla	r1, r5, r1, r2
 80077da:	2301      	movs	r3, #1
 80077dc:	4680      	mov	r8, r0
 80077de:	e7f0      	b.n	80077c2 <_vfiprintf_r+0x1b6>
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	4622      	mov	r2, r4
 80077e6:	4b13      	ldr	r3, [pc, #76]	; (8007834 <_vfiprintf_r+0x228>)
 80077e8:	a904      	add	r1, sp, #16
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7fd fe44 	bl	8005478 <_printf_float>
 80077f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077f4:	4681      	mov	r9, r0
 80077f6:	d1d5      	bne.n	80077a4 <_vfiprintf_r+0x198>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	065b      	lsls	r3, r3, #25
 80077fc:	f53f af7e 	bmi.w	80076fc <_vfiprintf_r+0xf0>
 8007800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007802:	e77d      	b.n	8007700 <_vfiprintf_r+0xf4>
 8007804:	ab03      	add	r3, sp, #12
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	4622      	mov	r2, r4
 800780a:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <_vfiprintf_r+0x228>)
 800780c:	a904      	add	r1, sp, #16
 800780e:	4630      	mov	r0, r6
 8007810:	f7fe f8de 	bl	80059d0 <_printf_i>
 8007814:	e7ec      	b.n	80077f0 <_vfiprintf_r+0x1e4>
 8007816:	bf00      	nop
 8007818:	08007cf8 	.word	0x08007cf8
 800781c:	08007e34 	.word	0x08007e34
 8007820:	08007d18 	.word	0x08007d18
 8007824:	08007cd8 	.word	0x08007cd8
 8007828:	08007e3a 	.word	0x08007e3a
 800782c:	08007e3e 	.word	0x08007e3e
 8007830:	08005479 	.word	0x08005479
 8007834:	080075e7 	.word	0x080075e7

08007838 <_sbrk_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	2300      	movs	r3, #0
 800783c:	4c05      	ldr	r4, [pc, #20]	; (8007854 <_sbrk_r+0x1c>)
 800783e:	4605      	mov	r5, r0
 8007840:	4608      	mov	r0, r1
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	f7fc fb98 	bl	8003f78 <_sbrk>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_sbrk_r+0x1a>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	b103      	cbz	r3, 8007852 <_sbrk_r+0x1a>
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	20000230 	.word	0x20000230

08007858 <__sread>:
 8007858:	b510      	push	{r4, lr}
 800785a:	460c      	mov	r4, r1
 800785c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007860:	f000 f968 	bl	8007b34 <_read_r>
 8007864:	2800      	cmp	r0, #0
 8007866:	bfab      	itete	ge
 8007868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800786a:	89a3      	ldrhlt	r3, [r4, #12]
 800786c:	181b      	addge	r3, r3, r0
 800786e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007872:	bfac      	ite	ge
 8007874:	6563      	strge	r3, [r4, #84]	; 0x54
 8007876:	81a3      	strhlt	r3, [r4, #12]
 8007878:	bd10      	pop	{r4, pc}

0800787a <__swrite>:
 800787a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	461f      	mov	r7, r3
 8007880:	898b      	ldrh	r3, [r1, #12]
 8007882:	4605      	mov	r5, r0
 8007884:	05db      	lsls	r3, r3, #23
 8007886:	460c      	mov	r4, r1
 8007888:	4616      	mov	r6, r2
 800788a:	d505      	bpl.n	8007898 <__swrite+0x1e>
 800788c:	2302      	movs	r3, #2
 800788e:	2200      	movs	r2, #0
 8007890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007894:	f000 f928 	bl	8007ae8 <_lseek_r>
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	4632      	mov	r2, r6
 800789c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078a6:	463b      	mov	r3, r7
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	f000 b869 	b.w	8007984 <_write_r>

080078b2 <__sseek>:
 80078b2:	b510      	push	{r4, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 f915 	bl	8007ae8 <_lseek_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	bf15      	itete	ne
 80078c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ce:	81a3      	strheq	r3, [r4, #12]
 80078d0:	bf18      	it	ne
 80078d2:	81a3      	strhne	r3, [r4, #12]
 80078d4:	bd10      	pop	{r4, pc}

080078d6 <__sclose>:
 80078d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078da:	f000 b8d3 	b.w	8007a84 <_close_r>
	...

080078e0 <__swbuf_r>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	460e      	mov	r6, r1
 80078e4:	4614      	mov	r4, r2
 80078e6:	4605      	mov	r5, r0
 80078e8:	b118      	cbz	r0, 80078f2 <__swbuf_r+0x12>
 80078ea:	6983      	ldr	r3, [r0, #24]
 80078ec:	b90b      	cbnz	r3, 80078f2 <__swbuf_r+0x12>
 80078ee:	f7ff f9b7 	bl	8006c60 <__sinit>
 80078f2:	4b21      	ldr	r3, [pc, #132]	; (8007978 <__swbuf_r+0x98>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	d12a      	bne.n	800794e <__swbuf_r+0x6e>
 80078f8:	686c      	ldr	r4, [r5, #4]
 80078fa:	69a3      	ldr	r3, [r4, #24]
 80078fc:	60a3      	str	r3, [r4, #8]
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	071a      	lsls	r2, r3, #28
 8007902:	d52e      	bpl.n	8007962 <__swbuf_r+0x82>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	b363      	cbz	r3, 8007962 <__swbuf_r+0x82>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	6820      	ldr	r0, [r4, #0]
 800790c:	b2f6      	uxtb	r6, r6
 800790e:	1ac0      	subs	r0, r0, r3
 8007910:	6963      	ldr	r3, [r4, #20]
 8007912:	4637      	mov	r7, r6
 8007914:	4283      	cmp	r3, r0
 8007916:	dc04      	bgt.n	8007922 <__swbuf_r+0x42>
 8007918:	4621      	mov	r1, r4
 800791a:	4628      	mov	r0, r5
 800791c:	f7ff f936 	bl	8006b8c <_fflush_r>
 8007920:	bb28      	cbnz	r0, 800796e <__swbuf_r+0x8e>
 8007922:	68a3      	ldr	r3, [r4, #8]
 8007924:	3001      	adds	r0, #1
 8007926:	3b01      	subs	r3, #1
 8007928:	60a3      	str	r3, [r4, #8]
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	6022      	str	r2, [r4, #0]
 8007930:	701e      	strb	r6, [r3, #0]
 8007932:	6963      	ldr	r3, [r4, #20]
 8007934:	4283      	cmp	r3, r0
 8007936:	d004      	beq.n	8007942 <__swbuf_r+0x62>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	07db      	lsls	r3, r3, #31
 800793c:	d519      	bpl.n	8007972 <__swbuf_r+0x92>
 800793e:	2e0a      	cmp	r6, #10
 8007940:	d117      	bne.n	8007972 <__swbuf_r+0x92>
 8007942:	4621      	mov	r1, r4
 8007944:	4628      	mov	r0, r5
 8007946:	f7ff f921 	bl	8006b8c <_fflush_r>
 800794a:	b190      	cbz	r0, 8007972 <__swbuf_r+0x92>
 800794c:	e00f      	b.n	800796e <__swbuf_r+0x8e>
 800794e:	4b0b      	ldr	r3, [pc, #44]	; (800797c <__swbuf_r+0x9c>)
 8007950:	429c      	cmp	r4, r3
 8007952:	d101      	bne.n	8007958 <__swbuf_r+0x78>
 8007954:	68ac      	ldr	r4, [r5, #8]
 8007956:	e7d0      	b.n	80078fa <__swbuf_r+0x1a>
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <__swbuf_r+0xa0>)
 800795a:	429c      	cmp	r4, r3
 800795c:	bf08      	it	eq
 800795e:	68ec      	ldreq	r4, [r5, #12]
 8007960:	e7cb      	b.n	80078fa <__swbuf_r+0x1a>
 8007962:	4621      	mov	r1, r4
 8007964:	4628      	mov	r0, r5
 8007966:	f000 f81f 	bl	80079a8 <__swsetup_r>
 800796a:	2800      	cmp	r0, #0
 800796c:	d0cc      	beq.n	8007908 <__swbuf_r+0x28>
 800796e:	f04f 37ff 	mov.w	r7, #4294967295
 8007972:	4638      	mov	r0, r7
 8007974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007976:	bf00      	nop
 8007978:	08007cf8 	.word	0x08007cf8
 800797c:	08007d18 	.word	0x08007d18
 8007980:	08007cd8 	.word	0x08007cd8

08007984 <_write_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4605      	mov	r5, r0
 8007988:	4608      	mov	r0, r1
 800798a:	4611      	mov	r1, r2
 800798c:	2200      	movs	r2, #0
 800798e:	4c05      	ldr	r4, [pc, #20]	; (80079a4 <_write_r+0x20>)
 8007990:	6022      	str	r2, [r4, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f7fc faa3 	bl	8003ede <_write>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_write_r+0x1e>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_write_r+0x1e>
 80079a0:	602b      	str	r3, [r5, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	20000230 	.word	0x20000230

080079a8 <__swsetup_r>:
 80079a8:	4b32      	ldr	r3, [pc, #200]	; (8007a74 <__swsetup_r+0xcc>)
 80079aa:	b570      	push	{r4, r5, r6, lr}
 80079ac:	681d      	ldr	r5, [r3, #0]
 80079ae:	4606      	mov	r6, r0
 80079b0:	460c      	mov	r4, r1
 80079b2:	b125      	cbz	r5, 80079be <__swsetup_r+0x16>
 80079b4:	69ab      	ldr	r3, [r5, #24]
 80079b6:	b913      	cbnz	r3, 80079be <__swsetup_r+0x16>
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7ff f951 	bl	8006c60 <__sinit>
 80079be:	4b2e      	ldr	r3, [pc, #184]	; (8007a78 <__swsetup_r+0xd0>)
 80079c0:	429c      	cmp	r4, r3
 80079c2:	d10f      	bne.n	80079e4 <__swsetup_r+0x3c>
 80079c4:	686c      	ldr	r4, [r5, #4]
 80079c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	0715      	lsls	r5, r2, #28
 80079ce:	d42c      	bmi.n	8007a2a <__swsetup_r+0x82>
 80079d0:	06d0      	lsls	r0, r2, #27
 80079d2:	d411      	bmi.n	80079f8 <__swsetup_r+0x50>
 80079d4:	2209      	movs	r2, #9
 80079d6:	6032      	str	r2, [r6, #0]
 80079d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079dc:	81a3      	strh	r3, [r4, #12]
 80079de:	f04f 30ff 	mov.w	r0, #4294967295
 80079e2:	e03e      	b.n	8007a62 <__swsetup_r+0xba>
 80079e4:	4b25      	ldr	r3, [pc, #148]	; (8007a7c <__swsetup_r+0xd4>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d101      	bne.n	80079ee <__swsetup_r+0x46>
 80079ea:	68ac      	ldr	r4, [r5, #8]
 80079ec:	e7eb      	b.n	80079c6 <__swsetup_r+0x1e>
 80079ee:	4b24      	ldr	r3, [pc, #144]	; (8007a80 <__swsetup_r+0xd8>)
 80079f0:	429c      	cmp	r4, r3
 80079f2:	bf08      	it	eq
 80079f4:	68ec      	ldreq	r4, [r5, #12]
 80079f6:	e7e6      	b.n	80079c6 <__swsetup_r+0x1e>
 80079f8:	0751      	lsls	r1, r2, #29
 80079fa:	d512      	bpl.n	8007a22 <__swsetup_r+0x7a>
 80079fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079fe:	b141      	cbz	r1, 8007a12 <__swsetup_r+0x6a>
 8007a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a04:	4299      	cmp	r1, r3
 8007a06:	d002      	beq.n	8007a0e <__swsetup_r+0x66>
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f7ff fd31 	bl	8007470 <_free_r>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6363      	str	r3, [r4, #52]	; 0x34
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a18:	81a3      	strh	r3, [r4, #12]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	6063      	str	r3, [r4, #4]
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f043 0308 	orr.w	r3, r3, #8
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	b94b      	cbnz	r3, 8007a42 <__swsetup_r+0x9a>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a38:	d003      	beq.n	8007a42 <__swsetup_r+0x9a>
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff f9cb 	bl	8006dd8 <__smakebuf_r>
 8007a42:	89a2      	ldrh	r2, [r4, #12]
 8007a44:	f012 0301 	ands.w	r3, r2, #1
 8007a48:	d00c      	beq.n	8007a64 <__swsetup_r+0xbc>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60a3      	str	r3, [r4, #8]
 8007a4e:	6963      	ldr	r3, [r4, #20]
 8007a50:	425b      	negs	r3, r3
 8007a52:	61a3      	str	r3, [r4, #24]
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	b953      	cbnz	r3, 8007a6e <__swsetup_r+0xc6>
 8007a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007a60:	d1ba      	bne.n	80079d8 <__swsetup_r+0x30>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	0792      	lsls	r2, r2, #30
 8007a66:	bf58      	it	pl
 8007a68:	6963      	ldrpl	r3, [r4, #20]
 8007a6a:	60a3      	str	r3, [r4, #8]
 8007a6c:	e7f2      	b.n	8007a54 <__swsetup_r+0xac>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	e7f7      	b.n	8007a62 <__swsetup_r+0xba>
 8007a72:	bf00      	nop
 8007a74:	20000018 	.word	0x20000018
 8007a78:	08007cf8 	.word	0x08007cf8
 8007a7c:	08007d18 	.word	0x08007d18
 8007a80:	08007cd8 	.word	0x08007cd8

08007a84 <_close_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	2300      	movs	r3, #0
 8007a88:	4c05      	ldr	r4, [pc, #20]	; (8007aa0 <_close_r+0x1c>)
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	f7fc fa41 	bl	8003f16 <_close>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d102      	bne.n	8007a9e <_close_r+0x1a>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	b103      	cbz	r3, 8007a9e <_close_r+0x1a>
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	20000230 	.word	0x20000230

08007aa4 <_fstat_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4c06      	ldr	r4, [pc, #24]	; (8007ac4 <_fstat_r+0x20>)
 8007aaa:	4605      	mov	r5, r0
 8007aac:	4608      	mov	r0, r1
 8007aae:	4611      	mov	r1, r2
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	f7fc fa3b 	bl	8003f2c <_fstat>
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	d102      	bne.n	8007ac0 <_fstat_r+0x1c>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	b103      	cbz	r3, 8007ac0 <_fstat_r+0x1c>
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000230 	.word	0x20000230

08007ac8 <_isatty_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	2300      	movs	r3, #0
 8007acc:	4c05      	ldr	r4, [pc, #20]	; (8007ae4 <_isatty_r+0x1c>)
 8007ace:	4605      	mov	r5, r0
 8007ad0:	4608      	mov	r0, r1
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	f7fc fa39 	bl	8003f4a <_isatty>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_isatty_r+0x1a>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_isatty_r+0x1a>
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	20000230 	.word	0x20000230

08007ae8 <_lseek_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4605      	mov	r5, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	2200      	movs	r2, #0
 8007af2:	4c05      	ldr	r4, [pc, #20]	; (8007b08 <_lseek_r+0x20>)
 8007af4:	6022      	str	r2, [r4, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f7fc fa31 	bl	8003f5e <_lseek>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d102      	bne.n	8007b06 <_lseek_r+0x1e>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	b103      	cbz	r3, 8007b06 <_lseek_r+0x1e>
 8007b04:	602b      	str	r3, [r5, #0]
 8007b06:	bd38      	pop	{r3, r4, r5, pc}
 8007b08:	20000230 	.word	0x20000230

08007b0c <__ascii_mbtowc>:
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	b901      	cbnz	r1, 8007b12 <__ascii_mbtowc+0x6>
 8007b10:	a901      	add	r1, sp, #4
 8007b12:	b142      	cbz	r2, 8007b26 <__ascii_mbtowc+0x1a>
 8007b14:	b14b      	cbz	r3, 8007b2a <__ascii_mbtowc+0x1e>
 8007b16:	7813      	ldrb	r3, [r2, #0]
 8007b18:	600b      	str	r3, [r1, #0]
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	1c10      	adds	r0, r2, #0
 8007b1e:	bf18      	it	ne
 8007b20:	2001      	movne	r0, #1
 8007b22:	b002      	add	sp, #8
 8007b24:	4770      	bx	lr
 8007b26:	4610      	mov	r0, r2
 8007b28:	e7fb      	b.n	8007b22 <__ascii_mbtowc+0x16>
 8007b2a:	f06f 0001 	mvn.w	r0, #1
 8007b2e:	e7f8      	b.n	8007b22 <__ascii_mbtowc+0x16>

08007b30 <__malloc_lock>:
 8007b30:	4770      	bx	lr

08007b32 <__malloc_unlock>:
 8007b32:	4770      	bx	lr

08007b34 <_read_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4605      	mov	r5, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4c05      	ldr	r4, [pc, #20]	; (8007b54 <_read_r+0x20>)
 8007b40:	6022      	str	r2, [r4, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f7fc f9ae 	bl	8003ea4 <_read>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_read_r+0x1e>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_read_r+0x1e>
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	20000230 	.word	0x20000230

08007b58 <__ascii_wctomb>:
 8007b58:	b149      	cbz	r1, 8007b6e <__ascii_wctomb+0x16>
 8007b5a:	2aff      	cmp	r2, #255	; 0xff
 8007b5c:	bf8b      	itete	hi
 8007b5e:	238a      	movhi	r3, #138	; 0x8a
 8007b60:	700a      	strbls	r2, [r1, #0]
 8007b62:	6003      	strhi	r3, [r0, #0]
 8007b64:	2001      	movls	r0, #1
 8007b66:	bf88      	it	hi
 8007b68:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b6c:	4770      	bx	lr
 8007b6e:	4608      	mov	r0, r1
 8007b70:	4770      	bx	lr
	...

08007b74 <_init>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr

08007b80 <_fini>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr

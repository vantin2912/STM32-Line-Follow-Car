
Line Following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000580c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a70  08005a70  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a70  08005a70  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a70  08005a70  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000007c  08005af4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08005af4  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c64  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c94  00000000  00000000  00029d09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002b9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001582f  00000000  00000000  0002ce28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bc0  00000000  00000000  00042657  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006db39  00000000  00000000  00049217  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6d50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e8  00000000  00000000  000b6dcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005904 	.word	0x08005904

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005904 	.word	0x08005904

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	; 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009f8:	f1a2 0201 	sub.w	r2, r2, #1
 80009fc:	d1ed      	bne.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_fmul>:
 8000b58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b60:	bf1e      	ittt	ne
 8000b62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b66:	ea92 0f0c 	teqne	r2, ip
 8000b6a:	ea93 0f0c 	teqne	r3, ip
 8000b6e:	d06f      	beq.n	8000c50 <__aeabi_fmul+0xf8>
 8000b70:	441a      	add	r2, r3
 8000b72:	ea80 0c01 	eor.w	ip, r0, r1
 8000b76:	0240      	lsls	r0, r0, #9
 8000b78:	bf18      	it	ne
 8000b7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b7e:	d01e      	beq.n	8000bbe <__aeabi_fmul+0x66>
 8000b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b98:	bf3e      	ittt	cc
 8000b9a:	0049      	lslcc	r1, r1, #1
 8000b9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	ea40 0001 	orr.w	r0, r0, r1
 8000ba6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000baa:	2afd      	cmp	r2, #253	; 0xfd
 8000bac:	d81d      	bhi.n	8000bea <__aeabi_fmul+0x92>
 8000bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	4770      	bx	lr
 8000bbe:	f090 0f00 	teq	r0, #0
 8000bc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bc6:	bf08      	it	eq
 8000bc8:	0249      	lsleq	r1, r1, #9
 8000bca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bd2:	3a7f      	subs	r2, #127	; 0x7f
 8000bd4:	bfc2      	ittt	gt
 8000bd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bde:	4770      	bxgt	lr
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	3a01      	subs	r2, #1
 8000bea:	dc5d      	bgt.n	8000ca8 <__aeabi_fmul+0x150>
 8000bec:	f112 0f19 	cmn.w	r2, #25
 8000bf0:	bfdc      	itt	le
 8000bf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bxle	lr
 8000bf8:	f1c2 0200 	rsb	r2, r2, #0
 8000bfc:	0041      	lsls	r1, r0, #1
 8000bfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000c02:	f1c2 0220 	rsb	r2, r2, #32
 8000c06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c0e:	f140 0000 	adc.w	r0, r0, #0
 8000c12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c16:	bf08      	it	eq
 8000c18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c1c:	4770      	bx	lr
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fmul+0xce>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fmul+0xe6>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e78f      	b.n	8000b70 <__aeabi_fmul+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	bf18      	it	ne
 8000c5a:	ea93 0f0c 	teqne	r3, ip
 8000c5e:	d00a      	beq.n	8000c76 <__aeabi_fmul+0x11e>
 8000c60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c64:	bf18      	it	ne
 8000c66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c6a:	d1d8      	bne.n	8000c1e <__aeabi_fmul+0xc6>
 8000c6c:	ea80 0001 	eor.w	r0, r0, r1
 8000c70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c74:	4770      	bx	lr
 8000c76:	f090 0f00 	teq	r0, #0
 8000c7a:	bf17      	itett	ne
 8000c7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c80:	4608      	moveq	r0, r1
 8000c82:	f091 0f00 	teqne	r1, #0
 8000c86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c8a:	d014      	beq.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c8c:	ea92 0f0c 	teq	r2, ip
 8000c90:	d101      	bne.n	8000c96 <__aeabi_fmul+0x13e>
 8000c92:	0242      	lsls	r2, r0, #9
 8000c94:	d10f      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000c96:	ea93 0f0c 	teq	r3, ip
 8000c9a:	d103      	bne.n	8000ca4 <__aeabi_fmul+0x14c>
 8000c9c:	024b      	lsls	r3, r1, #9
 8000c9e:	bf18      	it	ne
 8000ca0:	4608      	movne	r0, r1
 8000ca2:	d108      	bne.n	8000cb6 <__aeabi_fmul+0x15e>
 8000ca4:	ea80 0001 	eor.w	r0, r0, r1
 8000ca8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_fdiv>:
 8000cc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc8:	bf1e      	ittt	ne
 8000cca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cce:	ea92 0f0c 	teqne	r2, ip
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d069      	beq.n	8000dac <__aeabi_fdiv+0xec>
 8000cd8:	eba2 0203 	sub.w	r2, r2, r3
 8000cdc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ce6:	d037      	beq.n	8000d58 <__aeabi_fdiv+0x98>
 8000ce8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	bf38      	it	cc
 8000cfc:	005b      	lslcc	r3, r3, #1
 8000cfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d06:	428b      	cmp	r3, r1
 8000d08:	bf24      	itt	cs
 8000d0a:	1a5b      	subcs	r3, r3, r1
 8000d0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d14:	bf24      	itt	cs
 8000d16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d22:	bf24      	itt	cs
 8000d24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d30:	bf24      	itt	cs
 8000d32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d42:	d1e0      	bne.n	8000d06 <__aeabi_fdiv+0x46>
 8000d44:	2afd      	cmp	r2, #253	; 0xfd
 8000d46:	f63f af50 	bhi.w	8000bea <__aeabi_fmul+0x92>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d60:	327f      	adds	r2, #127	; 0x7f
 8000d62:	bfc2      	ittt	gt
 8000d64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6c:	4770      	bxgt	lr
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d72:	f04f 0300 	mov.w	r3, #0
 8000d76:	3a01      	subs	r2, #1
 8000d78:	e737      	b.n	8000bea <__aeabi_fmul+0x92>
 8000d7a:	f092 0f00 	teq	r2, #0
 8000d7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d82:	bf02      	ittt	eq
 8000d84:	0040      	lsleq	r0, r0, #1
 8000d86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8a:	3a01      	subeq	r2, #1
 8000d8c:	d0f9      	beq.n	8000d82 <__aeabi_fdiv+0xc2>
 8000d8e:	ea40 000c 	orr.w	r0, r0, ip
 8000d92:	f093 0f00 	teq	r3, #0
 8000d96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9a:	bf02      	ittt	eq
 8000d9c:	0049      	lsleq	r1, r1, #1
 8000d9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da2:	3b01      	subeq	r3, #1
 8000da4:	d0f9      	beq.n	8000d9a <__aeabi_fdiv+0xda>
 8000da6:	ea41 010c 	orr.w	r1, r1, ip
 8000daa:	e795      	b.n	8000cd8 <__aeabi_fdiv+0x18>
 8000dac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db0:	ea92 0f0c 	teq	r2, ip
 8000db4:	d108      	bne.n	8000dc8 <__aeabi_fdiv+0x108>
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	f47f af7d 	bne.w	8000cb6 <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	f47f af70 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e776      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dc8:	ea93 0f0c 	teq	r3, ip
 8000dcc:	d104      	bne.n	8000dd8 <__aeabi_fdiv+0x118>
 8000dce:	024b      	lsls	r3, r1, #9
 8000dd0:	f43f af4c 	beq.w	8000c6c <__aeabi_fmul+0x114>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e76e      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	d1ca      	bne.n	8000d7a <__aeabi_fdiv+0xba>
 8000de4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000de8:	f47f af5c 	bne.w	8000ca4 <__aeabi_fmul+0x14c>
 8000dec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000df0:	f47f af3c 	bne.w	8000c6c <__aeabi_fmul+0x114>
 8000df4:	e75f      	b.n	8000cb6 <__aeabi_fmul+0x15e>
 8000df6:	bf00      	nop

08000df8 <__gesf2>:
 8000df8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dfc:	e006      	b.n	8000e0c <__cmpsf2+0x4>
 8000dfe:	bf00      	nop

08000e00 <__lesf2>:
 8000e00:	f04f 0c01 	mov.w	ip, #1
 8000e04:	e002      	b.n	8000e0c <__cmpsf2+0x4>
 8000e06:	bf00      	nop

08000e08 <__cmpsf2>:
 8000e08:	f04f 0c01 	mov.w	ip, #1
 8000e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d011      	beq.n	8000e48 <__cmpsf2+0x40>
 8000e24:	b001      	add	sp, #4
 8000e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e2a:	bf18      	it	ne
 8000e2c:	ea90 0f01 	teqne	r0, r1
 8000e30:	bf58      	it	pl
 8000e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e36:	bf88      	it	hi
 8000e38:	17c8      	asrhi	r0, r1, #31
 8000e3a:	bf38      	it	cc
 8000e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e40:	bf18      	it	ne
 8000e42:	f040 0001 	orrne.w	r0, r0, #1
 8000e46:	4770      	bx	lr
 8000e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e4c:	d102      	bne.n	8000e54 <__cmpsf2+0x4c>
 8000e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e52:	d105      	bne.n	8000e60 <__cmpsf2+0x58>
 8000e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e58:	d1e4      	bne.n	8000e24 <__cmpsf2+0x1c>
 8000e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5e:	d0e1      	beq.n	8000e24 <__cmpsf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cfrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	e7ff      	b.n	8000e70 <__aeabi_cfcmpeq>

08000e70 <__aeabi_cfcmpeq>:
 8000e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e72:	f7ff ffc9 	bl	8000e08 <__cmpsf2>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	bf48      	it	mi
 8000e7a:	f110 0f00 	cmnmi.w	r0, #0
 8000e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e80 <__aeabi_fcmpeq>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff fff4 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e88:	bf0c      	ite	eq
 8000e8a:	2001      	moveq	r0, #1
 8000e8c:	2000      	movne	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_fcmplt>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff ffea 	bl	8000e70 <__aeabi_cfcmpeq>
 8000e9c:	bf34      	ite	cc
 8000e9e:	2001      	movcc	r0, #1
 8000ea0:	2000      	movcs	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmple>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffe0 	bl	8000e70 <__aeabi_cfcmpeq>
 8000eb0:	bf94      	ite	ls
 8000eb2:	2001      	movls	r0, #1
 8000eb4:	2000      	movhi	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmpge>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffd2 	bl	8000e68 <__aeabi_cfrcmple>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpgt>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffc8 	bl	8000e68 <__aeabi_cfrcmple>
 8000ed8:	bf34      	ite	cc
 8000eda:	2001      	movcc	r0, #1
 8000edc:	2000      	movcs	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_f2uiz>:
 8000ee4:	0042      	lsls	r2, r0, #1
 8000ee6:	d20e      	bcs.n	8000f06 <__aeabi_f2uiz+0x22>
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eec:	d30b      	bcc.n	8000f06 <__aeabi_f2uiz+0x22>
 8000eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d409      	bmi.n	8000f0c <__aeabi_f2uiz+0x28>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0000 	mov.w	r0, #0
 8000f0a:	4770      	bx	lr
 8000f0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f10:	d101      	bne.n	8000f16 <__aeabi_f2uiz+0x32>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d102      	bne.n	8000f1c <__aeabi_f2uiz+0x38>
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	4770      	bx	lr
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1a      	ldr	r2, [r3, #32]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	621a      	str	r2, [r3, #32]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	611a      	str	r2, [r3, #16]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	615a      	str	r2, [r3, #20]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <MotorL_EnablePWM>:
 */
#include "MotorControl.h"


void MotorL_EnablePWM(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
 8000fb8:	2101      	movs	r1, #1
 8000fba:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <MotorL_EnablePWM+0x10>)
 8000fbc:	f7ff ffb2 	bl	8000f24 <LL_TIM_CC_EnableChannel>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40012c00 	.word	0x40012c00

08000fc8 <MotorR_EnablePWM>:
	LL_TIM_CC_DisableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}


void MotorR_EnablePWM(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH3);
 8000fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <MotorR_EnablePWM+0x14>)
 8000fd2:	f7ff ffa7 	bl	8000f24 <LL_TIM_CC_EnableChannel>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40012c00 	.word	0x40012c00

08000fe0 <MotorL_SetPWM>:
{
	LL_TIM_CC_EnableChannel(TIM1,LL_TIM_CHANNEL_CH1);
}

void MotorL_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000fee:	db03      	blt.n	8000ff8 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 8000ff0:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	e005      	b.n	8001004 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8000ffe:	dc01      	bgt.n	8001004 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MotorL_SetPWM+0x60>)
 8001002:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0a      	blt.n	8001020 <MotorL_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH1(TIM1, (uint16_t)PWMVal);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	b29b      	uxth	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MotorL_SetPWM+0x64>)
 8001012:	f7ff ff97 	bl	8000f44 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8001016:	490c      	ldr	r1, [pc, #48]	; (8001048 <MotorL_SetPWM+0x68>)
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <MotorL_SetPWM+0x6c>)
 800101a:	f7ff ffbc 	bl	8000f96 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
	}
}
 800101e:	e00a      	b.n	8001036 <MotorL_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH1(TIM1,7200 + PWMVal);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001026:	4619      	mov	r1, r3
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <MotorL_SetPWM+0x64>)
 800102a:	f7ff ff8b 	bl	8000f44 <LL_TIM_OC_SetCompareCH1>
		LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800102e:	4906      	ldr	r1, [pc, #24]	; (8001048 <MotorL_SetPWM+0x68>)
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <MotorL_SetPWM+0x6c>)
 8001032:	f7ff ffa1 	bl	8000f78 <LL_GPIO_SetOutputPin>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	ffffe3e0 	.word	0xffffe3e0
 8001044:	40012c00 	.word	0x40012c00
 8001048:	04800080 	.word	0x04800080
 800104c:	40010c00 	.word	0x40010c00

08001050 <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal) // PWM Val between 0-7200
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800105e:	db03      	blt.n	8001068 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 8001060:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	e005      	b.n	8001074 <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800106e:	dc01      	bgt.n	8001074 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MotorR_SetPWM+0x60>)
 8001072:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0a      	blt.n	8001090 <MotorR_SetPWM+0x40>
	{
		LL_TIM_OC_SetCompareCH3(TIM1, (uint16_t)PWMVal);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MotorR_SetPWM+0x64>)
 8001082:	f7ff ff6c 	bl	8000f5e <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 8001086:	490c      	ldr	r1, [pc, #48]	; (80010b8 <MotorR_SetPWM+0x68>)
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <MotorR_SetPWM+0x6c>)
 800108a:	f7ff ff84 	bl	8000f96 <LL_GPIO_ResetOutputPin>
	} else
	{
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
	}
}
 800108e:	e00a      	b.n	80010a6 <MotorR_SetPWM+0x56>
		LL_TIM_OC_SetCompareCH3(TIM1, 7200 + PWMVal);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8001096:	4619      	mov	r1, r3
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MotorR_SetPWM+0x64>)
 800109a:	f7ff ff60 	bl	8000f5e <LL_TIM_OC_SetCompareCH3>
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_9);
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <MotorR_SetPWM+0x68>)
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <MotorR_SetPWM+0x6c>)
 80010a2:	f7ff ff69 	bl	8000f78 <LL_GPIO_SetOutputPin>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	ffffe3e0 	.word	0xffffe3e0
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	04020002 	.word	0x04020002
 80010bc:	40010800 	.word	0x40010800

080010c0 <Servo_SetAngle>:

void Servo_SetAngle(float ServoAngle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

	if (ServoAngle > 90) ServoAngle = 90;
 80010c8:	4911      	ldr	r1, [pc, #68]	; (8001110 <Servo_SetAngle+0x50>)
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff00 	bl	8000ed0 <__aeabi_fcmpgt>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <Servo_SetAngle+0x1c>
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <Servo_SetAngle+0x50>)
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	e008      	b.n	80010ee <Servo_SetAngle+0x2e>
	else if (ServoAngle < -90) ServoAngle = -90;
 80010dc:	490d      	ldr	r1, [pc, #52]	; (8001114 <Servo_SetAngle+0x54>)
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fed8 	bl	8000e94 <__aeabi_fcmplt>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <Servo_SetAngle+0x2e>
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <Servo_SetAngle+0x54>)
 80010ec:	607b      	str	r3, [r7, #4]
	SetServoCompare(15+ServoAngle/18);
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <Servo_SetAngle+0x58>)
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff fde5 	bl	8000cc0 <__aeabi_fdiv>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4908      	ldr	r1, [pc, #32]	; (800111c <Servo_SetAngle+0x5c>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fc24 	bl	8000948 <__addsf3>
 8001100:	4603      	mov	r3, r0
 8001102:	4618      	mov	r0, r3
 8001104:	f002 f9ae 	bl	8003464 <SetServoCompare>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	42b40000 	.word	0x42b40000
 8001114:	c2b40000 	.word	0xc2b40000
 8001118:	41900000 	.word	0x41900000
 800111c:	41700000 	.word	0x41700000

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4906      	ldr	r1, [pc, #24]	; (80011b8 <__NVIC_EnableIRQ+0x34>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <LL_ADC_REG_SetSequencerRanks>:
  *         
  *         (1) On STM32F1, parameter available only on ADC instance: ADC1.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001274:	b490      	push	{r4, r7}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	332c      	adds	r3, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800128c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001290:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	fa92 f2a2 	rbit	r2, r2
 8001298:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	fab2 f282 	clz	r2, r2
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	40d3      	lsrs	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	211f      	movs	r1, #31
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	401a      	ands	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 011f 	and.w	r1, r3, #31
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc90      	pop	{r4, r7}
 80012d8:	4770      	bx	lr

080012da <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012fe:	b490      	push	{r4, r7}
 8001300:	b08a      	sub	sp, #40	; 0x28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	4619      	mov	r1, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800131a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	fa92 f2a2 	rbit	r2, r2
 8001322:	613a      	str	r2, [r7, #16]
  return result;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	fab2 f282 	clz	r2, r2
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	40d3      	lsrs	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800133c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001340:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	69f9      	ldr	r1, [r7, #28]
 8001344:	fa91 f1a1 	rbit	r1, r1
 8001348:	61b9      	str	r1, [r7, #24]
  return result;
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	fab1 f181 	clz	r1, r1
 8001350:	b2c9      	uxtb	r1, r1
 8001352:	40cb      	lsrs	r3, r1
 8001354:	2107      	movs	r1, #7
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	401a      	ands	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001364:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001368:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136c:	fa91 f1a1 	rbit	r1, r1
 8001370:	6239      	str	r1, [r7, #32]
  return result;
 8001372:	6a39      	ldr	r1, [r7, #32]
 8001374:	fab1 f181 	clz	r1, r1
 8001378:	b2c9      	uxtb	r1, r1
 800137a:	40cb      	lsrs	r3, r1
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	6023      	str	r3, [r4, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bc90      	pop	{r4, r7}
 800138e:	4770      	bx	lr

08001390 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f043 0201 	orr.w	r2, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f043 0204 	orr.w	r2, r3, #4
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR2      CAL            LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b04      	cmp	r3, #4
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LL_DMA_EnableChannel+0x38>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	461a      	mov	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	3a01      	subs	r2, #1
 800142e:	4906      	ldr	r1, [pc, #24]	; (8001448 <LL_DMA_EnableChannel+0x38>)
 8001430:	5c8a      	ldrb	r2, [r1, r2]
 8001432:	4611      	mov	r1, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	440a      	add	r2, r1
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6013      	str	r3, [r2, #0]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	08005998 	.word	0x08005998

0800144c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	3b01      	subs	r3, #1
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <LL_DMA_SetDataTransferDirection+0x44>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	461a      	mov	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4413      	add	r3, r2
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800146c:	f023 0310 	bic.w	r3, r3, #16
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	3a01      	subs	r2, #1
 8001474:	4906      	ldr	r1, [pc, #24]	; (8001490 <LL_DMA_SetDataTransferDirection+0x44>)
 8001476:	5c8a      	ldrb	r2, [r1, r2]
 8001478:	4611      	mov	r1, r2
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	440a      	add	r2, r1
 800147e:	4611      	mov	r1, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	08005998 	.word	0x08005998

08001494 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LL_DMA_SetMode+0x40>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 0220 	bic.w	r2, r3, #32
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	4906      	ldr	r1, [pc, #24]	; (80014d4 <LL_DMA_SetMode+0x40>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	4619      	mov	r1, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	440b      	add	r3, r1
 80014c2:	4619      	mov	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	08005998 	.word	0x08005998

080014d8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LL_DMA_SetPeriphIncMode+0x40>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	4906      	ldr	r1, [pc, #24]	; (8001518 <LL_DMA_SetPeriphIncMode+0x40>)
 80014fe:	5ccb      	ldrb	r3, [r1, r3]
 8001500:	4619      	mov	r1, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	440b      	add	r3, r1
 8001506:	4619      	mov	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	08005998 	.word	0x08005998

0800151c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3b01      	subs	r3, #1
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LL_DMA_SetMemoryIncMode+0x40>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	461a      	mov	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3b01      	subs	r3, #1
 8001540:	4906      	ldr	r1, [pc, #24]	; (800155c <LL_DMA_SetMemoryIncMode+0x40>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	4619      	mov	r1, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	440b      	add	r3, r1
 800154a:	4619      	mov	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	08005998 	.word	0x08005998

08001560 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <LL_DMA_SetPeriphSize+0x40>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	461a      	mov	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	3b01      	subs	r3, #1
 8001584:	4906      	ldr	r1, [pc, #24]	; (80015a0 <LL_DMA_SetPeriphSize+0x40>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	4619      	mov	r1, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	440b      	add	r3, r1
 800158e:	4619      	mov	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	08005998 	.word	0x08005998

080015a4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <LL_DMA_SetMemorySize+0x40>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	461a      	mov	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4413      	add	r3, r2
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	4906      	ldr	r1, [pc, #24]	; (80015e4 <LL_DMA_SetMemorySize+0x40>)
 80015ca:	5ccb      	ldrb	r3, [r1, r3]
 80015cc:	4619      	mov	r1, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	440b      	add	r3, r1
 80015d2:	4619      	mov	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	08005998 	.word	0x08005998

080015e8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	4906      	ldr	r1, [pc, #24]	; (8001628 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	4619      	mov	r1, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	440b      	add	r3, r1
 8001616:	4619      	mov	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	08005998 	.word	0x08005998

0800162c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3b01      	subs	r3, #1
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <LL_DMA_SetDataLength+0x40>)
 800163e:	5cd3      	ldrb	r3, [r2, r3]
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	3a01      	subs	r2, #1
 8001650:	4906      	ldr	r1, [pc, #24]	; (800166c <LL_DMA_SetDataLength+0x40>)
 8001652:	5c8a      	ldrb	r2, [r1, r2]
 8001654:	4611      	mov	r1, r2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	440a      	add	r2, r1
 800165a:	4611      	mov	r1, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	08005998 	.word	0x08005998

08001670 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3b01      	subs	r3, #1
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <LL_DMA_SetMemoryAddress+0x2c>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	08005998 	.word	0x08005998

080016a0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <LL_DMA_SetPeriphAddress+0x2c>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	461a      	mov	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6093      	str	r3, [r2, #8]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	08005998 	.word	0x08005998

080016d0 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f023 0201 	bic.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60da      	str	r2, [r3, #12]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <LL_RCC_HSE_Enable+0x18>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <LL_RCC_HSE_Enable+0x18>)
 8001776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000

08001788 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <LL_RCC_HSE_IsReady+0x20>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001798:	bf0c      	ite	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	2300      	movne	r3, #0
 800179e:	b2db      	uxtb	r3, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000

080017ac <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <LL_RCC_SetSysClkSource+0x24>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 0203 	bic.w	r2, r3, #3
 80017bc:	4904      	ldr	r1, [pc, #16]	; (80017d0 <LL_RCC_SetSysClkSource+0x24>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <LL_RCC_GetSysClkSource+0x14>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000

080017ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <LL_RCC_SetAHBPrescaler+0x24>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	4904      	ldr	r1, [pc, #16]	; (8001810 <LL_RCC_SetAHBPrescaler+0x24>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <LL_RCC_SetAPB1Prescaler+0x24>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800184c:	4904      	ldr	r1, [pc, #16]	; (8001860 <LL_RCC_SetAPB2Prescaler+0x24>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <LL_RCC_SetADCClockSource+0x24>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001874:	4904      	ldr	r1, [pc, #16]	; (8001888 <LL_RCC_SetADCClockSource+0x24>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000

0800188c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <LL_RCC_PLL_Enable+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <LL_RCC_PLL_Enable+0x18>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr
 80018a4:	40021000 	.word	0x40021000

080018a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <LL_RCC_PLL_IsReady+0x20>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000

080018cc <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	430b      	orrs	r3, r1
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000

080018fc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4313      	orrs	r3, r2
 800190e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4013      	ands	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001936:	69da      	ldr	r2, [r3, #28]
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000

0800198c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 0207 	bic.w	r2, r3, #7
 800199c:	4904      	ldr	r1, [pc, #16]	; (80019b0 <LL_FLASH_SetLatency+0x24>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000

080019b4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <LL_FLASH_GetLatency+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40022000 	.word	0x40022000

080019cc <LL_TIM_EnableCounter>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	601a      	str	r2, [r3, #0]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <LL_TIM_EnableARRPreload>:
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	601a      	str	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <LL_TIM_DisableARRPreload>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <LL_TIM_SetCounter>:
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <LL_TIM_OC_DisableFast>:
{
 8001a40:	b4b0      	push	{r4, r5, r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d01c      	beq.n	8001a8a <LL_TIM_OC_DisableFast+0x4a>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d017      	beq.n	8001a86 <LL_TIM_OC_DisableFast+0x46>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d012      	beq.n	8001a82 <LL_TIM_OC_DisableFast+0x42>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2b40      	cmp	r3, #64	; 0x40
 8001a60:	d00d      	beq.n	8001a7e <LL_TIM_OC_DisableFast+0x3e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a68:	d007      	beq.n	8001a7a <LL_TIM_OC_DisableFast+0x3a>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a70:	d101      	bne.n	8001a76 <LL_TIM_OC_DisableFast+0x36>
 8001a72:	2305      	movs	r3, #5
 8001a74:	e00a      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e008      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <LL_TIM_OC_DisableFast+0x4c>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3318      	adds	r3, #24
 8001a92:	461a      	mov	r2, r3
 8001a94:	4629      	mov	r1, r5
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <LL_TIM_OC_DisableFast+0x7c>)
 8001a98:	5c5b      	ldrb	r3, [r3, r1]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <LL_TIM_OC_DisableFast+0x80>)
 8001aa4:	5c5b      	ldrb	r3, [r3, r1]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	408b      	lsls	r3, r1
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	6023      	str	r3, [r4, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bcb0      	pop	{r4, r5, r7}
 8001aba:	4770      	bx	lr
 8001abc:	080059a0 	.word	0x080059a0
 8001ac0:	080059a8 	.word	0x080059a8

08001ac4 <LL_TIM_OC_EnablePreload>:
{
 8001ac4:	b4b0      	push	{r4, r5, r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d01c      	beq.n	8001b0e <LL_TIM_OC_EnablePreload+0x4a>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d017      	beq.n	8001b0a <LL_TIM_OC_EnablePreload+0x46>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d012      	beq.n	8001b06 <LL_TIM_OC_EnablePreload+0x42>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b40      	cmp	r3, #64	; 0x40
 8001ae4:	d00d      	beq.n	8001b02 <LL_TIM_OC_EnablePreload+0x3e>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aec:	d007      	beq.n	8001afe <LL_TIM_OC_EnablePreload+0x3a>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af4:	d101      	bne.n	8001afa <LL_TIM_OC_EnablePreload+0x36>
 8001af6:	2305      	movs	r3, #5
 8001af8:	e00a      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e008      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e006      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_TIM_OC_EnablePreload+0x4c>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3318      	adds	r3, #24
 8001b16:	461a      	mov	r2, r3
 8001b18:	4629      	mov	r1, r5
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <LL_TIM_OC_EnablePreload+0x7c>)
 8001b1c:	5c5b      	ldrb	r3, [r3, r1]
 8001b1e:	4413      	add	r3, r2
 8001b20:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001b22:	6822      	ldr	r2, [r4, #0]
 8001b24:	4629      	mov	r1, r5
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <LL_TIM_OC_EnablePreload+0x80>)
 8001b28:	5c5b      	ldrb	r3, [r3, r1]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	408b      	lsls	r3, r1
 8001b30:	4313      	orrs	r3, r2
 8001b32:	6023      	str	r3, [r4, #0]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bcb0      	pop	{r4, r5, r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	080059a0 	.word	0x080059a0
 8001b44:	080059a8 	.word	0x080059a8

08001b48 <LL_TIM_IC_SetActiveInput>:
  *         @arg @ref LL_TIM_ACTIVEINPUT_INDIRECTTI
  *         @arg @ref LL_TIM_ACTIVEINPUT_TRC
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
 8001b48:	b4b0      	push	{r4, r5, r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d01c      	beq.n	8001b94 <LL_TIM_IC_SetActiveInput+0x4c>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d017      	beq.n	8001b90 <LL_TIM_IC_SetActiveInput+0x48>
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d012      	beq.n	8001b8c <LL_TIM_IC_SetActiveInput+0x44>
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b40      	cmp	r3, #64	; 0x40
 8001b6a:	d00d      	beq.n	8001b88 <LL_TIM_IC_SetActiveInput+0x40>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b72:	d007      	beq.n	8001b84 <LL_TIM_IC_SetActiveInput+0x3c>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7a:	d101      	bne.n	8001b80 <LL_TIM_IC_SetActiveInput+0x38>
 8001b7c:	2305      	movs	r3, #5
 8001b7e:	e00a      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b80:	2306      	movs	r3, #6
 8001b82:	e008      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e006      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e004      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_TIM_IC_SetActiveInput+0x4e>
 8001b94:	2300      	movs	r3, #0
 8001b96:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3318      	adds	r3, #24
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <LL_TIM_IC_SetActiveInput+0x8c>)
 8001ba2:	5c5b      	ldrb	r3, [r3, r1]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	4629      	mov	r1, r5
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001bae:	5c5b      	ldrb	r3, [r3, r1]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	408b      	lsls	r3, r1
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	401a      	ands	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	4905      	ldr	r1, [pc, #20]	; (8001bd8 <LL_TIM_IC_SetActiveInput+0x90>)
 8001bc2:	5c09      	ldrb	r1, [r1, r0]
 8001bc4:	408b      	lsls	r3, r1
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	6023      	str	r3, [r4, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bcb0      	pop	{r4, r5, r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	080059a0 	.word	0x080059a0
 8001bd8:	080059b0 	.word	0x080059b0

08001bdc <LL_TIM_IC_SetPrescaler>:
  *         @arg @ref LL_TIM_ICPSC_DIV4
  *         @arg @ref LL_TIM_ICPSC_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
 8001bdc:	b4b0      	push	{r4, r5, r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d01c      	beq.n	8001c28 <LL_TIM_IC_SetPrescaler+0x4c>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d017      	beq.n	8001c24 <LL_TIM_IC_SetPrescaler+0x48>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d012      	beq.n	8001c20 <LL_TIM_IC_SetPrescaler+0x44>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d00d      	beq.n	8001c1c <LL_TIM_IC_SetPrescaler+0x40>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c06:	d007      	beq.n	8001c18 <LL_TIM_IC_SetPrescaler+0x3c>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d101      	bne.n	8001c14 <LL_TIM_IC_SetPrescaler+0x38>
 8001c10:	2305      	movs	r3, #5
 8001c12:	e00a      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c14:	2306      	movs	r3, #6
 8001c16:	e008      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <LL_TIM_IC_SetPrescaler+0x4e>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	3318      	adds	r3, #24
 8001c30:	461a      	mov	r2, r3
 8001c32:	4629      	mov	r1, r5
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <LL_TIM_IC_SetPrescaler+0x8c>)
 8001c36:	5c5b      	ldrb	r3, [r3, r1]
 8001c38:	4413      	add	r3, r2
 8001c3a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	4629      	mov	r1, r5
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <LL_TIM_IC_SetPrescaler+0x90>)
 8001c42:	5c5b      	ldrb	r3, [r3, r1]
 8001c44:	4619      	mov	r1, r3
 8001c46:	230c      	movs	r3, #12
 8001c48:	408b      	lsls	r3, r1
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	4628      	mov	r0, r5
 8001c54:	4905      	ldr	r1, [pc, #20]	; (8001c6c <LL_TIM_IC_SetPrescaler+0x90>)
 8001c56:	5c09      	ldrb	r1, [r1, r0]
 8001c58:	408b      	lsls	r3, r1
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	6023      	str	r3, [r4, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bcb0      	pop	{r4, r5, r7}
 8001c66:	4770      	bx	lr
 8001c68:	080059a0 	.word	0x080059a0
 8001c6c:	080059b0 	.word	0x080059b0

08001c70 <LL_TIM_IC_SetFilter>:
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N6
  *         @arg @ref LL_TIM_IC_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
 8001c70:	b4b0      	push	{r4, r5, r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d01c      	beq.n	8001cbc <LL_TIM_IC_SetFilter+0x4c>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d017      	beq.n	8001cb8 <LL_TIM_IC_SetFilter+0x48>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d012      	beq.n	8001cb4 <LL_TIM_IC_SetFilter+0x44>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	d00d      	beq.n	8001cb0 <LL_TIM_IC_SetFilter+0x40>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c9a:	d007      	beq.n	8001cac <LL_TIM_IC_SetFilter+0x3c>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca2:	d101      	bne.n	8001ca8 <LL_TIM_IC_SetFilter+0x38>
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	e00a      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001ca8:	2306      	movs	r3, #6
 8001caa:	e008      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e006      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e004      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e002      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_TIM_IC_SetFilter+0x4e>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3318      	adds	r3, #24
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LL_TIM_IC_SetFilter+0x8c>)
 8001cca:	5c5b      	ldrb	r3, [r3, r1]
 8001ccc:	4413      	add	r3, r2
 8001cce:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001cd0:	6822      	ldr	r2, [r4, #0]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <LL_TIM_IC_SetFilter+0x90>)
 8001cd6:	5c5b      	ldrb	r3, [r3, r1]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	23f0      	movs	r3, #240	; 0xf0
 8001cdc:	408b      	lsls	r3, r1
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	4905      	ldr	r1, [pc, #20]	; (8001d00 <LL_TIM_IC_SetFilter+0x90>)
 8001cea:	5c09      	ldrb	r1, [r1, r0]
 8001cec:	408b      	lsls	r3, r1
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	6023      	str	r3, [r4, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bcb0      	pop	{r4, r5, r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	080059a0 	.word	0x080059a0
 8001d00:	080059b0 	.word	0x080059b0

08001d04 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_RISING
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8001d04:	b490      	push	{r4, r7}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d01c      	beq.n	8001d50 <LL_TIM_IC_SetPolarity+0x4c>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d017      	beq.n	8001d4c <LL_TIM_IC_SetPolarity+0x48>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d012      	beq.n	8001d48 <LL_TIM_IC_SetPolarity+0x44>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d00d      	beq.n	8001d44 <LL_TIM_IC_SetPolarity+0x40>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2e:	d007      	beq.n	8001d40 <LL_TIM_IC_SetPolarity+0x3c>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d101      	bne.n	8001d3c <LL_TIM_IC_SetPolarity+0x38>
 8001d38:	2305      	movs	r3, #5
 8001d3a:	e00a      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e008      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e006      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d44:	2303      	movs	r3, #3
 8001d46:	e004      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e002      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <LL_TIM_IC_SetPolarity+0x4e>
 8001d50:	2300      	movs	r3, #0
 8001d52:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	4621      	mov	r1, r4
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <LL_TIM_IC_SetPolarity+0x80>)
 8001d5c:	5c5b      	ldrb	r3, [r3, r1]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	230a      	movs	r3, #10
 8001d62:	408b      	lsls	r3, r1
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	4621      	mov	r1, r4
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <LL_TIM_IC_SetPolarity+0x80>)
 8001d6c:	5c5b      	ldrb	r3, [r3, r1]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	408b      	lsls	r3, r1
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc90      	pop	{r4, r7}
 8001d82:	4770      	bx	lr
 8001d84:	080059b8 	.word	0x080059b8

08001d88 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d9a:	f023 0307 	bic.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	609a      	str	r2, [r3, #8]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <LL_TIM_SetEncoderMode>:
  *         @arg @ref LL_TIM_ENCODERMODE_X2_TI2
  *         @arg @ref LL_TIM_ENCODERMODE_X4_TI12
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, EncoderMode);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 0207 	bic.w	r2, r3, #7
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	605a      	str	r2, [r3, #4]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f06f 0201 	mvn.w	r2, #1
 8001e42:	611a      	str	r2, [r3, #16]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60da      	str	r2, [r3, #12]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	615a      	str	r2, [r3, #20]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	605a      	str	r2, [r3, #4]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <LL_GPIO_SetPinMode>:
{
 8001ef4:	b490      	push	{r4, r7}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0e1b      	lsrs	r3, r3, #24
 8001f08:	4413      	add	r3, r2
 8001f0a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	613b      	str	r3, [r7, #16]
  return result;
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	210f      	movs	r1, #15
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	401a      	ands	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	61bb      	str	r3, [r7, #24]
  return result;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	6023      	str	r3, [r4, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc90      	pop	{r4, r7}
 8001f56:	4770      	bx	lr

08001f58 <LL_GPIO_ResetOutputPin>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	615a      	str	r2, [r3, #20]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <LL_GPIO_AF_EnableRemap_I2C1>:
  * @rmtoll MAPR          I2C1_REMAP           LL_GPIO_AF_EnableRemap_I2C1
  * @note  ENABLE: Remap     (SCL/PB8, SDA/PB9)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_I2C1(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_I2C1_REMAP | AFIO_MAPR_SWJ_CFG);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <LL_GPIO_AF_EnableRemap_I2C1+0x1c>)
 8001f82:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	6053      	str	r3, [r2, #4]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40010000 	.word	0x40010000

08001f98 <LL_GPIO_AF_EnableRemap_USART1>:
  * @rmtoll MAPR          USART1_REMAP           LL_GPIO_AF_EnableRemap_USART1
  * @note  ENABLE: Remap     (TX/PB6, RX/PB7)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_USART1(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  SET_BIT(AFIO->MAPR, AFIO_MAPR_USART1_REMAP | AFIO_MAPR_SWJ_CFG);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <LL_GPIO_AF_EnableRemap_USART1+0x1c>)
 8001fa2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	6053      	str	r3, [r2, #4]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40010000 	.word	0x40010000

08001fb8 <LL_GPIO_AF_EnableRemap_TIM2>:
  * @rmtoll MAPR          TIM2_REMAP           LL_GPIO_AF_EnableRemap_TIM2
  * @note  ENABLE: Full remap       (CH1/ETR/PA15, CH2/PB3, CH3/PB10, CH4/PB11)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_EnableRemap_TIM2(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM2_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM2_REMAP_FULLREMAP | AFIO_MAPR_SWJ_CFG));
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <LL_GPIO_AF_EnableRemap_TIM2+0x1c>)
 8001fc2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fc6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001fca:	6053      	str	r3, [r2, #4]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <LL_GPIO_AF_RemapPartial_TIM3>:
  * @note  PARTIAL: Partial remap (CH1/PB4, CH2/PB5, CH3/PB0, CH4/PB1)
  * @note  TIM3_ETR on PE0 is not re-mapped.
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_RemapPartial_TIM3(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, (AFIO_MAPR_TIM3_REMAP | AFIO_MAPR_SWJ_CFG), (AFIO_MAPR_TIM3_REMAP_PARTIALREMAP | AFIO_MAPR_SWJ_CFG));
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <LL_GPIO_AF_RemapPartial_TIM3+0x24>)
 8001fea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ff2:	6053      	str	r3, [r2, #4]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	40010000 	.word	0x40010000

08002000 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800200a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800200e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a03      	ldr	r2, [pc, #12]	; (8002024 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8002016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201a:	6053      	str	r3, [r2, #4]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40010000 	.word	0x40010000

08002028 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	3302      	adds	r3, #2
 800203a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	43db      	mvns	r3, r3
 8002044:	ea02 0103 	and.w	r1, r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	0c1b      	lsrs	r3, r3, #16
 800204c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	60bb      	str	r3, [r7, #8]
  return result;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	fa03 f202 	lsl.w	r2, r3, r2
 8002066:	4806      	ldr	r0, [pc, #24]	; (8002080 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	430a      	orrs	r2, r1
 800206e:	3302      	adds	r3, #2
 8002070:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40010000 	.word	0x40010000

08002084 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 800208c:	bf00      	nop
 800208e:	4808      	ldr	r0, [pc, #32]	; (80020b0 <__io_putchar+0x2c>)
 8002090:	f7ff ff10 	bl	8001eb4 <LL_USART_IsActiveFlag_TC>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f9      	beq.n	800208e <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <__io_putchar+0x2c>)
 80020a2:	f7ff ff19 	bl	8001ed8 <LL_USART_TransmitData8>

  	return ch;
 80020a6:	687b      	ldr	r3, [r7, #4]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013800 	.word	0x40013800
 80020b4:	00000000 	.word	0x00000000

080020b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b8:	b598      	push	{r3, r4, r7, lr}
 80020ba:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff fc4d 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80020c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80020c6:	f7ff fc31 	bl	800192c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ca:	2003      	movs	r0, #3
 80020cc:	f7ff f828 	bl	8001120 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  NVIC_SetPriority(MemoryManagement_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80020d0:	f7ff f84a 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2200      	movs	r2, #0
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f898 	bl	8001210 <NVIC_EncodePriority>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4619      	mov	r1, r3
 80020e4:	f06f 000b 	mvn.w	r0, #11
 80020e8:	f7ff f868 	bl	80011bc <__NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  NVIC_SetPriority(BusFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80020ec:	f7ff f83c 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2200      	movs	r2, #0
 80020f4:	2101      	movs	r1, #1
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff f88a 	bl	8001210 <NVIC_EncodePriority>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	f06f 000a 	mvn.w	r0, #10
 8002104:	f7ff f85a 	bl	80011bc <__NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  NVIC_SetPriority(UsageFault_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002108:	f7ff f82e 	bl	8001168 <__NVIC_GetPriorityGrouping>
 800210c:	4603      	mov	r3, r0
 800210e:	2200      	movs	r2, #0
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f87c 	bl	8001210 <NVIC_EncodePriority>
 8002118:	4603      	mov	r3, r0
 800211a:	4619      	mov	r1, r3
 800211c:	f06f 0009 	mvn.w	r0, #9
 8002120:	f7ff f84c 	bl	80011bc <__NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  NVIC_SetPriority(SVCall_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002124:	f7ff f820 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002128:	4603      	mov	r3, r0
 800212a:	2200      	movs	r2, #0
 800212c:	2101      	movs	r1, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f86e 	bl	8001210 <NVIC_EncodePriority>
 8002134:	4603      	mov	r3, r0
 8002136:	4619      	mov	r1, r3
 8002138:	f06f 0004 	mvn.w	r0, #4
 800213c:	f7ff f83e 	bl	80011bc <__NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  NVIC_SetPriority(DebugMonitor_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002140:	f7ff f812 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002144:	4603      	mov	r3, r0
 8002146:	2200      	movs	r2, #0
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f860 	bl	8001210 <NVIC_EncodePriority>
 8002150:	4603      	mov	r3, r0
 8002152:	4619      	mov	r1, r3
 8002154:	f06f 0003 	mvn.w	r0, #3
 8002158:	f7ff f830 	bl	80011bc <__NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800215c:	f7ff f804 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002160:	4603      	mov	r3, r0
 8002162:	2200      	movs	r2, #0
 8002164:	2101      	movs	r1, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f852 	bl	8001210 <NVIC_EncodePriority>
 800216c:	4603      	mov	r3, r0
 800216e:	4619      	mov	r1, r3
 8002170:	f06f 0001 	mvn.w	r0, #1
 8002174:	f7ff f822 	bl	80011bc <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002178:	f7fe fff6 	bl	8001168 <__NVIC_GetPriorityGrouping>
 800217c:	4603      	mov	r3, r0
 800217e:	2200      	movs	r2, #0
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f844 	bl	8001210 <NVIC_EncodePriority>
 8002188:	4603      	mov	r3, r0
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f7ff f814 	bl	80011bc <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8002194:	f7ff ff34 	bl	8002000 <LL_GPIO_AF_Remap_SWJ_NOJTAG>

  /* USER CODE BEGIN Init */
  setvbuf(stdin, NULL, _IONBF, 0);
 8002198:	4bc5      	ldr	r3, [pc, #788]	; (80024b0 <main+0x3f8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6858      	ldr	r0, [r3, #4]
 800219e:	2300      	movs	r3, #0
 80021a0:	2202      	movs	r2, #2
 80021a2:	2100      	movs	r1, #0
 80021a4:	f002 fbec 	bl	8004980 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80021a8:	4bc1      	ldr	r3, [pc, #772]	; (80024b0 <main+0x3f8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6898      	ldr	r0, [r3, #8]
 80021ae:	2300      	movs	r3, #0
 80021b0:	2202      	movs	r2, #2
 80021b2:	2100      	movs	r1, #0
 80021b4:	f002 fbe4 	bl	8004980 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80021b8:	4bbd      	ldr	r3, [pc, #756]	; (80024b0 <main+0x3f8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68d8      	ldr	r0, [r3, #12]
 80021be:	2300      	movs	r3, #0
 80021c0:	2202      	movs	r2, #2
 80021c2:	2100      	movs	r1, #0
 80021c4:	f002 fbdc 	bl	8004980 <setvbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c8:	f000 faaa 	bl	8002720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021cc:	f000 ff2c 	bl	8003028 <MX_GPIO_Init>
  MX_DMA_Init();
 80021d0:	f000 ff12 	bl	8002ff8 <MX_DMA_Init>
  MX_TIM1_Init();
 80021d4:	f000 fc56 	bl	8002a84 <MX_TIM1_Init>
  MX_ADC1_Init();
 80021d8:	f000 fae4 	bl	80027a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80021dc:	f000 fbf8 	bl	80029d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021e0:	f000 fea0 	bl	8002f24 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80021e4:	f000 fd14 	bl	8002c10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80021e8:	f000 fdc2 	bl	8002d70 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021ec:	f000 fe50 	bl	8002e90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MotorL_EnablePWM();
 80021f0:	f7fe fee0 	bl	8000fb4 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 80021f4:	f7fe fee8 	bl	8000fc8 <MotorR_EnablePWM>
  MotorL_SetPWM(0);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7fe fef1 	bl	8000fe0 <MotorL_SetPWM>
  MotorR_SetPWM(0);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe ff26 	bl	8001050 <MotorR_SetPWM>
  Servo_SetAngle(0);
 8002204:	f04f 0000 	mov.w	r0, #0
 8002208:	f7fe ff5a 	bl	80010c0 <Servo_SetAngle>

//  uint32_t Count = LL_TIM_GetCounter(TIM2);

  while (1)
  {
	  LineDetect = 0;
 800220c:	4ba9      	ldr	r3, [pc, #676]	; (80024b4 <main+0x3fc>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
	  Sensor_Convert_A2D();
 8002212:	f000 ffc7 	bl	80031a4 <Sensor_Convert_A2D>
//	  Sensor_Print_Thres();
	  Sensor_PrintValue();
 8002216:	f000 fff7 	bl	8003208 <Sensor_PrintValue>
//	  LL_mDelay(200);
//	  Servo_SetAngle(20);
//	  LL_mDelay(200);

//	  LL_mDelay(2);
	  if(LineDetect == 0b00011000)
 800221a:	4ba6      	ldr	r3, [pc, #664]	; (80024b4 <main+0x3fc>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b18      	cmp	r3, #24
 8002220:	d111      	bne.n	8002246 <main+0x18e>
	  {
		  CarState = DiThang;
 8002222:	4ba5      	ldr	r3, [pc, #660]	; (80024b8 <main+0x400>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
		  MotorL_SetPWM(MaxSpeed);
 8002228:	4ba4      	ldr	r3, [pc, #656]	; (80024bc <main+0x404>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fed7 	bl	8000fe0 <MotorL_SetPWM>
		  MotorR_SetPWM(MaxSpeed);
 8002232:	4ba2      	ldr	r3, [pc, #648]	; (80024bc <main+0x404>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ff0a 	bl	8001050 <MotorR_SetPWM>
		  Servo_SetAngle(0);
 800223c:	f04f 0000 	mov.w	r0, #0
 8002240:	f7fe ff3e 	bl	80010c0 <Servo_SetAngle>
		  continue;
 8002244:	e24e      	b.n	80026e4 <main+0x62c>
	  }

	  if(LineDetect == 0b10000000 || LineDetect == 0b11000000 || LineDetect == 0b11100000 ||
 8002246:	4b9b      	ldr	r3, [pc, #620]	; (80024b4 <main+0x3fc>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b80      	cmp	r3, #128	; 0x80
 800224c:	d00f      	beq.n	800226e <main+0x1b6>
 800224e:	4b99      	ldr	r3, [pc, #612]	; (80024b4 <main+0x3fc>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2bc0      	cmp	r3, #192	; 0xc0
 8002254:	d00b      	beq.n	800226e <main+0x1b6>
 8002256:	4b97      	ldr	r3, [pc, #604]	; (80024b4 <main+0x3fc>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2be0      	cmp	r3, #224	; 0xe0
 800225c:	d007      	beq.n	800226e <main+0x1b6>
			  LineDetect == 0b01110000 || LineDetect == 0b00110000)
 800225e:	4b95      	ldr	r3, [pc, #596]	; (80024b4 <main+0x3fc>)
 8002260:	781b      	ldrb	r3, [r3, #0]
	  if(LineDetect == 0b10000000 || LineDetect == 0b11000000 || LineDetect == 0b11100000 ||
 8002262:	2b70      	cmp	r3, #112	; 0x70
 8002264:	d003      	beq.n	800226e <main+0x1b6>
			  LineDetect == 0b01110000 || LineDetect == 0b00110000)
 8002266:	4b93      	ldr	r3, [pc, #588]	; (80024b4 <main+0x3fc>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b30      	cmp	r3, #48	; 0x30
 800226c:	d102      	bne.n	8002274 <main+0x1bc>
	  {
		  CarState = LechPhai;
 800226e:	4b92      	ldr	r3, [pc, #584]	; (80024b8 <main+0x400>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
	  }
	  if (LineDetect == 0b00000001 || LineDetect == 0b00000011 || LineDetect == 0b00000111 ||
 8002274:	4b8f      	ldr	r3, [pc, #572]	; (80024b4 <main+0x3fc>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d00f      	beq.n	800229c <main+0x1e4>
 800227c:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <main+0x3fc>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d00b      	beq.n	800229c <main+0x1e4>
 8002284:	4b8b      	ldr	r3, [pc, #556]	; (80024b4 <main+0x3fc>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b07      	cmp	r3, #7
 800228a:	d007      	beq.n	800229c <main+0x1e4>
			  LineDetect == 0b00001110 || LineDetect == 0b00001100)
 800228c:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <main+0x3fc>)
 800228e:	781b      	ldrb	r3, [r3, #0]
	  if (LineDetect == 0b00000001 || LineDetect == 0b00000011 || LineDetect == 0b00000111 ||
 8002290:	2b0e      	cmp	r3, #14
 8002292:	d003      	beq.n	800229c <main+0x1e4>
			  LineDetect == 0b00001110 || LineDetect == 0b00001100)
 8002294:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <main+0x3fc>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d102      	bne.n	80022a2 <main+0x1ea>
	  {
		  CarState = LechTrai;
 800229c:	4b86      	ldr	r3, [pc, #536]	; (80024b8 <main+0x400>)
 800229e:	22ff      	movs	r2, #255	; 0xff
 80022a0:	701a      	strb	r2, [r3, #0]
	  }

	  if (CarState == LechTrai)
 80022a2:	4b85      	ldr	r3, [pc, #532]	; (80024b8 <main+0x400>)
 80022a4:	f993 3000 	ldrsb.w	r3, [r3]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	f040 812f 	bne.w	800250e <main+0x456>
	  {
		  switch (LineDetect)
 80022b0:	4b80      	ldr	r3, [pc, #512]	; (80024b4 <main+0x3fc>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	2b1b      	cmp	r3, #27
 80022b8:	f200 8213 	bhi.w	80026e2 <main+0x62a>
 80022bc:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <main+0x20c>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	08002335 	.word	0x08002335
 80022c8:	080026e3 	.word	0x080026e3
 80022cc:	0800238d 	.word	0x0800238d
 80022d0:	080026e3 	.word	0x080026e3
 80022d4:	080026e3 	.word	0x080026e3
 80022d8:	080026e3 	.word	0x080026e3
 80022dc:	080023e5 	.word	0x080023e5
 80022e0:	080026e3 	.word	0x080026e3
 80022e4:	080026e3 	.word	0x080026e3
 80022e8:	080026e3 	.word	0x080026e3
 80022ec:	080026e3 	.word	0x080026e3
 80022f0:	08002459 	.word	0x08002459
 80022f4:	080026e3 	.word	0x080026e3
 80022f8:	0800241f 	.word	0x0800241f
 80022fc:	080026e3 	.word	0x080026e3
 8002300:	080026e3 	.word	0x080026e3
 8002304:	080026e3 	.word	0x080026e3
 8002308:	080026e3 	.word	0x080026e3
 800230c:	080026e3 	.word	0x080026e3
 8002310:	080026e3 	.word	0x080026e3
 8002314:	080026e3 	.word	0x080026e3
 8002318:	080026e3 	.word	0x080026e3
 800231c:	080026e3 	.word	0x080026e3
 8002320:	080026e3 	.word	0x080026e3
 8002324:	080026e3 	.word	0x080026e3
 8002328:	080026e3 	.word	0x080026e3
 800232c:	080026e3 	.word	0x080026e3
 8002330:	080024d1 	.word	0x080024d1
		  {
			  case	0b00000001:
				  MotorR_SetPWM(MaxSpeed * 0.75);
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <main+0x404>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f85b 	bl	80003f4 <__aeabi_i2d>
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <main+0x408>)
 8002344:	f7fe f8c0 	bl	80004c8 <__aeabi_dmul>
 8002348:	4603      	mov	r3, r0
 800234a:	460c      	mov	r4, r1
 800234c:	4618      	mov	r0, r3
 800234e:	4621      	mov	r1, r4
 8002350:	f7fe facc 	bl	80008ec <__aeabi_d2iz>
 8002354:	4603      	mov	r3, r0
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fe7a 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 0.95);
 800235c:	4b57      	ldr	r3, [pc, #348]	; (80024bc <main+0x404>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f847 	bl	80003f4 <__aeabi_i2d>
 8002366:	a34c      	add	r3, pc, #304	; (adr r3, 8002498 <main+0x3e0>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fe f8ac 	bl	80004c8 <__aeabi_dmul>
 8002370:	4603      	mov	r3, r0
 8002372:	460c      	mov	r4, r1
 8002374:	4618      	mov	r0, r3
 8002376:	4621      	mov	r1, r4
 8002378:	f7fe fab8 	bl	80008ec <__aeabi_d2iz>
 800237c:	4603      	mov	r3, r0
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fe2e 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(54);
 8002384:	484f      	ldr	r0, [pc, #316]	; (80024c4 <main+0x40c>)
 8002386:	f7fe fe9b 	bl	80010c0 <Servo_SetAngle>
				  break;
 800238a:	e0bf      	b.n	800250c <main+0x454>
			  case 0b00000011:
				  MotorR_SetPWM(MaxSpeed * 0.75);
 800238c:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <main+0x404>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f82f 	bl	80003f4 <__aeabi_i2d>
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	4b49      	ldr	r3, [pc, #292]	; (80024c0 <main+0x408>)
 800239c:	f7fe f894 	bl	80004c8 <__aeabi_dmul>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	4618      	mov	r0, r3
 80023a6:	4621      	mov	r1, r4
 80023a8:	f7fe faa0 	bl	80008ec <__aeabi_d2iz>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fe4e 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 0.9);
 80023b4:	4b41      	ldr	r3, [pc, #260]	; (80024bc <main+0x404>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f81b 	bl	80003f4 <__aeabi_i2d>
 80023be:	a338      	add	r3, pc, #224	; (adr r3, 80024a0 <main+0x3e8>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fe f880 	bl	80004c8 <__aeabi_dmul>
 80023c8:	4603      	mov	r3, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	4618      	mov	r0, r3
 80023ce:	4621      	mov	r1, r4
 80023d0:	f7fe fa8c 	bl	80008ec <__aeabi_d2iz>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fe02 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(54);
 80023dc:	4839      	ldr	r0, [pc, #228]	; (80024c4 <main+0x40c>)
 80023de:	f7fe fe6f 	bl	80010c0 <Servo_SetAngle>
				  break;
 80023e2:	e093      	b.n	800250c <main+0x454>
			  case 0b00000111:
				  MotorR_SetPWM(MaxSpeed * 0.85);
 80023e4:	4b35      	ldr	r3, [pc, #212]	; (80024bc <main+0x404>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f803 	bl	80003f4 <__aeabi_i2d>
 80023ee:	a32e      	add	r3, pc, #184	; (adr r3, 80024a8 <main+0x3f0>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fe f868 	bl	80004c8 <__aeabi_dmul>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	4618      	mov	r0, r3
 80023fe:	4621      	mov	r1, r4
 8002400:	f7fe fa74 	bl	80008ec <__aeabi_d2iz>
 8002404:	4603      	mov	r3, r0
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fe22 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <main+0x404>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fde5 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(36);
 8002416:	482c      	ldr	r0, [pc, #176]	; (80024c8 <main+0x410>)
 8002418:	f7fe fe52 	bl	80010c0 <Servo_SetAngle>
				  break;
 800241c:	e076      	b.n	800250c <main+0x454>
			  case 0b00001110:
				  MotorR_SetPWM(MaxSpeed * 0.9);
 800241e:	4b27      	ldr	r3, [pc, #156]	; (80024bc <main+0x404>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd ffe6 	bl	80003f4 <__aeabi_i2d>
 8002428:	a31d      	add	r3, pc, #116	; (adr r3, 80024a0 <main+0x3e8>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe f84b 	bl	80004c8 <__aeabi_dmul>
 8002432:	4603      	mov	r3, r0
 8002434:	460c      	mov	r4, r1
 8002436:	4618      	mov	r0, r3
 8002438:	4621      	mov	r1, r4
 800243a:	f7fe fa57 	bl	80008ec <__aeabi_d2iz>
 800243e:	4603      	mov	r3, r0
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fe05 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <main+0x404>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fdc8 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(18);
 8002450:	481e      	ldr	r0, [pc, #120]	; (80024cc <main+0x414>)
 8002452:	f7fe fe35 	bl	80010c0 <Servo_SetAngle>
				  break;
 8002456:	e059      	b.n	800250c <main+0x454>
			  case 0b00001100:
				  MotorR_SetPWM(MaxSpeed * 0.85);
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <main+0x404>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fd ffc9 	bl	80003f4 <__aeabi_i2d>
 8002462:	a311      	add	r3, pc, #68	; (adr r3, 80024a8 <main+0x3f0>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fe f82e 	bl	80004c8 <__aeabi_dmul>
 800246c:	4603      	mov	r3, r0
 800246e:	460c      	mov	r4, r1
 8002470:	4618      	mov	r0, r3
 8002472:	4621      	mov	r1, r4
 8002474:	f7fe fa3a 	bl	80008ec <__aeabi_d2iz>
 8002478:	4603      	mov	r3, r0
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fde8 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <main+0x404>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fdab 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(0);
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f7fe fe17 	bl	80010c0 <Servo_SetAngle>
				  break;
 8002492:	e03b      	b.n	800250c <main+0x454>
 8002494:	f3af 8000 	nop.w
 8002498:	66666666 	.word	0x66666666
 800249c:	3fee6666 	.word	0x3fee6666
 80024a0:	cccccccd 	.word	0xcccccccd
 80024a4:	3feccccc 	.word	0x3feccccc
 80024a8:	33333333 	.word	0x33333333
 80024ac:	3feb3333 	.word	0x3feb3333
 80024b0:	20000018 	.word	0x20000018
 80024b4:	20000099 	.word	0x20000099
 80024b8:	2000009a 	.word	0x2000009a
 80024bc:	20000010 	.word	0x20000010
 80024c0:	3fe80000 	.word	0x3fe80000
 80024c4:	42580000 	.word	0x42580000
 80024c8:	42100000 	.word	0x42100000
 80024cc:	41900000 	.word	0x41900000
			  case 0b00011100:
				  MotorR_SetPWM(MaxSpeed * 0.9);
 80024d0:	4b8b      	ldr	r3, [pc, #556]	; (8002700 <main+0x648>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd ff8d 	bl	80003f4 <__aeabi_i2d>
 80024da:	a383      	add	r3, pc, #524	; (adr r3, 80026e8 <main+0x630>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fd fff2 	bl	80004c8 <__aeabi_dmul>
 80024e4:	4603      	mov	r3, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	4618      	mov	r0, r3
 80024ea:	4621      	mov	r1, r4
 80024ec:	f7fe f9fe 	bl	80008ec <__aeabi_d2iz>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fdac 	bl	8001050 <MotorR_SetPWM>
				  MotorL_SetPWM(MaxSpeed * 1);
 80024f8:	4b81      	ldr	r3, [pc, #516]	; (8002700 <main+0x648>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fd6f 	bl	8000fe0 <MotorL_SetPWM>
				  Servo_SetAngle(0);
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f7fe fddb 	bl	80010c0 <Servo_SetAngle>
		  }
		  continue;
 800250a:	e0ea      	b.n	80026e2 <main+0x62a>
 800250c:	e0e9      	b.n	80026e2 <main+0x62a>
	  }
	  if (CarState == LechPhai)
 800250e:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <main+0x64c>)
 8002510:	f993 3000 	ldrsb.w	r3, [r3]
 8002514:	2b01      	cmp	r3, #1
 8002516:	f47f ae79 	bne.w	800220c <main+0x154>
	  {
		  switch (LineDetect)
 800251a:	4b7b      	ldr	r3, [pc, #492]	; (8002708 <main+0x650>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b70      	cmp	r3, #112	; 0x70
 8002520:	f000 8085 	beq.w	800262e <main+0x576>
 8002524:	2b70      	cmp	r3, #112	; 0x70
 8002526:	dc06      	bgt.n	8002536 <main+0x47e>
 8002528:	2b30      	cmp	r3, #48	; 0x30
 800252a:	f000 809d 	beq.w	8002668 <main+0x5b0>
 800252e:	2b38      	cmp	r3, #56	; 0x38
 8002530:	f000 80b8 	beq.w	80026a4 <main+0x5ec>
			  case 0b00111000:
				  MotorL_SetPWM(MaxSpeed * 0.5);
				  MotorR_SetPWM(MaxSpeed * 1);
				  Servo_SetAngle(-0);
		  }
		  continue;
 8002534:	e0d6      	b.n	80026e4 <main+0x62c>
		  switch (LineDetect)
 8002536:	2bc0      	cmp	r3, #192	; 0xc0
 8002538:	d030      	beq.n	800259c <main+0x4e4>
 800253a:	2be0      	cmp	r3, #224	; 0xe0
 800253c:	d05a      	beq.n	80025f4 <main+0x53c>
 800253e:	2b80      	cmp	r3, #128	; 0x80
 8002540:	d000      	beq.n	8002544 <main+0x48c>
		  continue;
 8002542:	e0cf      	b.n	80026e4 <main+0x62c>
				  MotorL_SetPWM(MaxSpeed * 0.75);
 8002544:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <main+0x648>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd ff53 	bl	80003f4 <__aeabi_i2d>
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b6e      	ldr	r3, [pc, #440]	; (800270c <main+0x654>)
 8002554:	f7fd ffb8 	bl	80004c8 <__aeabi_dmul>
 8002558:	4603      	mov	r3, r0
 800255a:	460c      	mov	r4, r1
 800255c:	4618      	mov	r0, r3
 800255e:	4621      	mov	r1, r4
 8002560:	f7fe f9c4 	bl	80008ec <__aeabi_d2iz>
 8002564:	4603      	mov	r3, r0
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fd3a 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.95);
 800256c:	4b64      	ldr	r3, [pc, #400]	; (8002700 <main+0x648>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ff3f 	bl	80003f4 <__aeabi_i2d>
 8002576:	a35e      	add	r3, pc, #376	; (adr r3, 80026f0 <main+0x638>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fd ffa4 	bl	80004c8 <__aeabi_dmul>
 8002580:	4603      	mov	r3, r0
 8002582:	460c      	mov	r4, r1
 8002584:	4618      	mov	r0, r3
 8002586:	4621      	mov	r1, r4
 8002588:	f7fe f9b0 	bl	80008ec <__aeabi_d2iz>
 800258c:	4603      	mov	r3, r0
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fd5e 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(-54);
 8002594:	485e      	ldr	r0, [pc, #376]	; (8002710 <main+0x658>)
 8002596:	f7fe fd93 	bl	80010c0 <Servo_SetAngle>
				  break;
 800259a:	e0a1      	b.n	80026e0 <main+0x628>
				  MotorL_SetPWM(MaxSpeed * 0.75);
 800259c:	4b58      	ldr	r3, [pc, #352]	; (8002700 <main+0x648>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ff27 	bl	80003f4 <__aeabi_i2d>
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	4b58      	ldr	r3, [pc, #352]	; (800270c <main+0x654>)
 80025ac:	f7fd ff8c 	bl	80004c8 <__aeabi_dmul>
 80025b0:	4603      	mov	r3, r0
 80025b2:	460c      	mov	r4, r1
 80025b4:	4618      	mov	r0, r3
 80025b6:	4621      	mov	r1, r4
 80025b8:	f7fe f998 	bl	80008ec <__aeabi_d2iz>
 80025bc:	4603      	mov	r3, r0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fd0e 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 0.9);
 80025c4:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <main+0x648>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ff13 	bl	80003f4 <__aeabi_i2d>
 80025ce:	a346      	add	r3, pc, #280	; (adr r3, 80026e8 <main+0x630>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fd ff78 	bl	80004c8 <__aeabi_dmul>
 80025d8:	4603      	mov	r3, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	4618      	mov	r0, r3
 80025de:	4621      	mov	r1, r4
 80025e0:	f7fe f984 	bl	80008ec <__aeabi_d2iz>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fd32 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(-54);
 80025ec:	4848      	ldr	r0, [pc, #288]	; (8002710 <main+0x658>)
 80025ee:	f7fe fd67 	bl	80010c0 <Servo_SetAngle>
				  break;
 80025f2:	e075      	b.n	80026e0 <main+0x628>
				  MotorL_SetPWM(MaxSpeed * 0.85);
 80025f4:	4b42      	ldr	r3, [pc, #264]	; (8002700 <main+0x648>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd fefb 	bl	80003f4 <__aeabi_i2d>
 80025fe:	a33e      	add	r3, pc, #248	; (adr r3, 80026f8 <main+0x640>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd ff60 	bl	80004c8 <__aeabi_dmul>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4618      	mov	r0, r3
 800260e:	4621      	mov	r1, r4
 8002610:	f7fe f96c 	bl	80008ec <__aeabi_d2iz>
 8002614:	4603      	mov	r3, r0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fce2 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 800261c:	4b38      	ldr	r3, [pc, #224]	; (8002700 <main+0x648>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fd15 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(-36);
 8002626:	483b      	ldr	r0, [pc, #236]	; (8002714 <main+0x65c>)
 8002628:	f7fe fd4a 	bl	80010c0 <Servo_SetAngle>
				  break;
 800262c:	e058      	b.n	80026e0 <main+0x628>
				  MotorL_SetPWM(MaxSpeed * 0.90);
 800262e:	4b34      	ldr	r3, [pc, #208]	; (8002700 <main+0x648>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd fede 	bl	80003f4 <__aeabi_i2d>
 8002638:	a32b      	add	r3, pc, #172	; (adr r3, 80026e8 <main+0x630>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd ff43 	bl	80004c8 <__aeabi_dmul>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	4618      	mov	r0, r3
 8002648:	4621      	mov	r1, r4
 800264a:	f7fe f94f 	bl	80008ec <__aeabi_d2iz>
 800264e:	4603      	mov	r3, r0
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fcc5 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <main+0x648>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fcf8 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(-18);
 8002660:	482d      	ldr	r0, [pc, #180]	; (8002718 <main+0x660>)
 8002662:	f7fe fd2d 	bl	80010c0 <Servo_SetAngle>
				  break;
 8002666:	e03b      	b.n	80026e0 <main+0x628>
				  MotorL_SetPWM(MaxSpeed * 0.85);
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <main+0x648>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fd fec1 	bl	80003f4 <__aeabi_i2d>
 8002672:	a321      	add	r3, pc, #132	; (adr r3, 80026f8 <main+0x640>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fd ff26 	bl	80004c8 <__aeabi_dmul>
 800267c:	4603      	mov	r3, r0
 800267e:	460c      	mov	r4, r1
 8002680:	4618      	mov	r0, r3
 8002682:	4621      	mov	r1, r4
 8002684:	f7fe f932 	bl	80008ec <__aeabi_d2iz>
 8002688:	4603      	mov	r3, r0
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fca8 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <main+0x648>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fcdb 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(-0);
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f7fe fd0f 	bl	80010c0 <Servo_SetAngle>
				  break;
 80026a2:	e01d      	b.n	80026e0 <main+0x628>
				  MotorL_SetPWM(MaxSpeed * 0.5);
 80026a4:	4b16      	ldr	r3, [pc, #88]	; (8002700 <main+0x648>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd fea3 	bl	80003f4 <__aeabi_i2d>
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <main+0x664>)
 80026b4:	f7fd ff08 	bl	80004c8 <__aeabi_dmul>
 80026b8:	4603      	mov	r3, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	4618      	mov	r0, r3
 80026be:	4621      	mov	r1, r4
 80026c0:	f7fe f914 	bl	80008ec <__aeabi_d2iz>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fc8a 	bl	8000fe0 <MotorL_SetPWM>
				  MotorR_SetPWM(MaxSpeed * 1);
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <main+0x648>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fcbd 	bl	8001050 <MotorR_SetPWM>
				  Servo_SetAngle(-0);
 80026d6:	f04f 0000 	mov.w	r0, #0
 80026da:	f7fe fcf1 	bl	80010c0 <Servo_SetAngle>
		  continue;
 80026de:	e001      	b.n	80026e4 <main+0x62c>
 80026e0:	e000      	b.n	80026e4 <main+0x62c>
		  continue;
 80026e2:	bf00      	nop
	  LineDetect = 0;
 80026e4:	e592      	b.n	800220c <main+0x154>
 80026e6:	bf00      	nop
 80026e8:	cccccccd 	.word	0xcccccccd
 80026ec:	3feccccc 	.word	0x3feccccc
 80026f0:	66666666 	.word	0x66666666
 80026f4:	3fee6666 	.word	0x3fee6666
 80026f8:	33333333 	.word	0x33333333
 80026fc:	3feb3333 	.word	0x3feb3333
 8002700:	20000010 	.word	0x20000010
 8002704:	2000009a 	.word	0x2000009a
 8002708:	20000099 	.word	0x20000099
 800270c:	3fe80000 	.word	0x3fe80000
 8002710:	c2580000 	.word	0xc2580000
 8002714:	c2100000 	.word	0xc2100000
 8002718:	c1900000 	.word	0xc1900000
 800271c:	3fe00000 	.word	0x3fe00000

08002720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002724:	2002      	movs	r0, #2
 8002726:	f7ff f931 	bl	800198c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800272a:	bf00      	nop
 800272c:	f7ff f942 	bl	80019b4 <LL_FLASH_GetLatency>
 8002730:	4603      	mov	r3, r0
 8002732:	2b02      	cmp	r3, #2
 8002734:	d1fa      	bne.n	800272c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8002736:	f7ff f819 	bl	800176c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800273a:	bf00      	nop
 800273c:	f7ff f824 	bl	8001788 <LL_RCC_HSE_IsReady>
 8002740:	4603      	mov	r3, r0
 8002742:	2b01      	cmp	r3, #1
 8002744:	d1fa      	bne.n	800273c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8002746:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800274a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800274e:	f7ff f8bd 	bl	80018cc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002752:	f7ff f89b 	bl	800188c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002756:	bf00      	nop
 8002758:	f7ff f8a6 	bl	80018a8 <LL_RCC_PLL_IsReady>
 800275c:	4603      	mov	r3, r0
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1fa      	bne.n	8002758 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002762:	2000      	movs	r0, #0
 8002764:	f7ff f842 	bl	80017ec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002768:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800276c:	f7ff f852 	bl	8001814 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff f863 	bl	800183c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002776:	2002      	movs	r0, #2
 8002778:	f7ff f818 	bl	80017ac <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800277c:	bf00      	nop
 800277e:	f7ff f829 	bl	80017d4 <LL_RCC_GetSysClkSource>
 8002782:	4603      	mov	r3, r0
 8002784:	2b08      	cmp	r3, #8
 8002786:	d1fa      	bne.n	800277e <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <SystemClock_Config+0x80>)
 800278a:	f002 f87f 	bl	800488c <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 800278e:	4804      	ldr	r0, [pc, #16]	; (80027a0 <SystemClock_Config+0x80>)
 8002790:	f002 f88a 	bl	80048a8 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_6);
 8002794:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002798:	f7ff f864 	bl	8001864 <LL_RCC_SetADCClockSource>
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	044aa200 	.word	0x044aa200

080027a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08e      	sub	sp, #56	; 0x38
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80027aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80027d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027da:	f7ff f8bf 	bl	800195c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80027de:	2004      	movs	r0, #4
 80027e0:	f7ff f8bc 	bl	800195c <LL_APB2_GRP1_EnableClock>
  PA4   ------> ADC1_IN4
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80027e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e8:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	486b      	ldr	r0, [pc, #428]	; (80029a0 <MX_ADC1_Init+0x1fc>)
 80027f4:	f001 f9dc 	bl	8003bb0 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2101      	movs	r1, #1
 80027fc:	4869      	ldr	r0, [pc, #420]	; (80029a4 <MX_ADC1_Init+0x200>)
 80027fe:	f7fe fe25 	bl	800144c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8002802:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002806:	2101      	movs	r1, #1
 8002808:	4866      	ldr	r0, [pc, #408]	; (80029a4 <MX_ADC1_Init+0x200>)
 800280a:	f7fe feed 	bl	80015e8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 800280e:	2220      	movs	r2, #32
 8002810:	2101      	movs	r1, #1
 8002812:	4864      	ldr	r0, [pc, #400]	; (80029a4 <MX_ADC1_Init+0x200>)
 8002814:	f7fe fe3e 	bl	8001494 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002818:	2200      	movs	r2, #0
 800281a:	2101      	movs	r1, #1
 800281c:	4861      	ldr	r0, [pc, #388]	; (80029a4 <MX_ADC1_Init+0x200>)
 800281e:	f7fe fe5b 	bl	80014d8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	2101      	movs	r1, #1
 8002826:	485f      	ldr	r0, [pc, #380]	; (80029a4 <MX_ADC1_Init+0x200>)
 8002828:	f7fe fe78 	bl	800151c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800282c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002830:	2101      	movs	r1, #1
 8002832:	485c      	ldr	r0, [pc, #368]	; (80029a4 <MX_ADC1_Init+0x200>)
 8002834:	f7fe fe94 	bl	8001560 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800283c:	2101      	movs	r1, #1
 800283e:	4859      	ldr	r0, [pc, #356]	; (80029a4 <MX_ADC1_Init+0x200>)
 8002840:	f7fe feb0 	bl	80015a4 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN ADC1_Init 1 */
  LL_DMA_SetDataLength(DMA1,LL_DMA_CHANNEL_1,8);
 8002844:	2208      	movs	r2, #8
 8002846:	2101      	movs	r1, #1
 8002848:	4856      	ldr	r0, [pc, #344]	; (80029a4 <MX_ADC1_Init+0x200>)
 800284a:	f7fe feef 	bl	800162c <LL_DMA_SetDataLength>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1, (uint32_t) &Sensor_ADC_Value);
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <MX_ADC1_Init+0x204>)
 8002850:	461a      	mov	r2, r3
 8002852:	2101      	movs	r1, #1
 8002854:	4853      	ldr	r0, [pc, #332]	; (80029a4 <MX_ADC1_Init+0x200>)
 8002856:	f7fe ff0b 	bl	8001670 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1,LL_DMA_CHANNEL_1,ADC1_DR_Address);
 800285a:	4a54      	ldr	r2, [pc, #336]	; (80029ac <MX_ADC1_Init+0x208>)
 800285c:	2101      	movs	r1, #1
 800285e:	4851      	ldr	r0, [pc, #324]	; (80029a4 <MX_ADC1_Init+0x200>)
 8002860:	f7fe ff1e 	bl	80016a0 <LL_DMA_SetPeriphAddress>
  LL_DMA_EnableChannel(DMA1,LL_DMA_CHANNEL_1);
 8002864:	2101      	movs	r1, #1
 8002866:	484f      	ldr	r0, [pc, #316]	; (80029a4 <MX_ADC1_Init+0x200>)
 8002868:	f7fe fdd2 	bl	8001410 <LL_DMA_EnableChannel>
  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800286c:	2300      	movs	r3, #0
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800287a:	4619      	mov	r1, r3
 800287c:	484c      	ldr	r0, [pc, #304]	; (80029b0 <MX_ADC1_Init+0x20c>)
 800287e:	f000 ff65 	bl	800374c <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288a:	4619      	mov	r1, r3
 800288c:	4848      	ldr	r0, [pc, #288]	; (80029b0 <MX_ADC1_Init+0x20c>)
 800288e:	f000 ff2b 	bl	80036e8 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002892:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8002896:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
 8002898:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800289c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80028a2:	2302      	movs	r3, #2
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80028a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4619      	mov	r1, r3
 80028b2:	483f      	ldr	r0, [pc, #252]	; (80029b0 <MX_ADC1_Init+0x20c>)
 80028b4:	f000 ff71 	bl	800379a <LL_ADC_REG_Init>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 80028b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028c0:	483b      	ldr	r0, [pc, #236]	; (80029b0 <MX_ADC1_Init+0x20c>)
 80028c2:	f7fe fcd7 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80028c6:	2203      	movs	r2, #3
 80028c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028cc:	4838      	ldr	r0, [pc, #224]	; (80029b0 <MX_ADC1_Init+0x20c>)
 80028ce:	f7fe fd16 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
 80028d2:	4a38      	ldr	r2, [pc, #224]	; (80029b4 <MX_ADC1_Init+0x210>)
 80028d4:	f240 2105 	movw	r1, #517	; 0x205
 80028d8:	4835      	ldr	r0, [pc, #212]	; (80029b0 <MX_ADC1_Init+0x20c>)
 80028da:	f7fe fccb 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80028de:	2203      	movs	r2, #3
 80028e0:	4934      	ldr	r1, [pc, #208]	; (80029b4 <MX_ADC1_Init+0x210>)
 80028e2:	4833      	ldr	r0, [pc, #204]	; (80029b0 <MX_ADC1_Init+0x20c>)
 80028e4:	f7fe fd0b 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
 80028e8:	4a33      	ldr	r2, [pc, #204]	; (80029b8 <MX_ADC1_Init+0x214>)
 80028ea:	f240 210a 	movw	r1, #522	; 0x20a
 80028ee:	4830      	ldr	r0, [pc, #192]	; (80029b0 <MX_ADC1_Init+0x20c>)
 80028f0:	f7fe fcc0 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 80028f4:	2203      	movs	r2, #3
 80028f6:	4930      	ldr	r1, [pc, #192]	; (80029b8 <MX_ADC1_Init+0x214>)
 80028f8:	482d      	ldr	r0, [pc, #180]	; (80029b0 <MX_ADC1_Init+0x20c>)
 80028fa:	f7fe fd00 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
 80028fe:	4a2f      	ldr	r2, [pc, #188]	; (80029bc <MX_ADC1_Init+0x218>)
 8002900:	f240 210f 	movw	r1, #527	; 0x20f
 8002904:	482a      	ldr	r0, [pc, #168]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002906:	f7fe fcb5 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 800290a:	2203      	movs	r2, #3
 800290c:	492b      	ldr	r1, [pc, #172]	; (80029bc <MX_ADC1_Init+0x218>)
 800290e:	4828      	ldr	r0, [pc, #160]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002910:	f7fe fcf5 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_4);
 8002914:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <MX_ADC1_Init+0x21c>)
 8002916:	f44f 7105 	mov.w	r1, #532	; 0x214
 800291a:	4825      	ldr	r0, [pc, #148]	; (80029b0 <MX_ADC1_Init+0x20c>)
 800291c:	f7fe fcaa 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002920:	2203      	movs	r2, #3
 8002922:	4927      	ldr	r1, [pc, #156]	; (80029c0 <MX_ADC1_Init+0x21c>)
 8002924:	4822      	ldr	r0, [pc, #136]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002926:	f7fe fcea 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_5);
 800292a:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <MX_ADC1_Init+0x220>)
 800292c:	f240 2119 	movw	r1, #537	; 0x219
 8002930:	481f      	ldr	r0, [pc, #124]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002932:	f7fe fc9f 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002936:	2203      	movs	r2, #3
 8002938:	4922      	ldr	r1, [pc, #136]	; (80029c4 <MX_ADC1_Init+0x220>)
 800293a:	481d      	ldr	r0, [pc, #116]	; (80029b0 <MX_ADC1_Init+0x20c>)
 800293c:	f7fe fcdf 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_6);
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <MX_ADC1_Init+0x224>)
 8002942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002946:	481a      	ldr	r0, [pc, #104]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002948:	f7fe fc94 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 800294c:	2203      	movs	r2, #3
 800294e:	491e      	ldr	r1, [pc, #120]	; (80029c8 <MX_ADC1_Init+0x224>)
 8002950:	4817      	ldr	r0, [pc, #92]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002952:	f7fe fcd4 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_7);
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <MX_ADC1_Init+0x228>)
 8002958:	f240 1105 	movw	r1, #261	; 0x105
 800295c:	4814      	ldr	r0, [pc, #80]	; (80029b0 <MX_ADC1_Init+0x20c>)
 800295e:	f7fe fc89 	bl	8001274 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_28CYCLES_5);
 8002962:	2203      	movs	r2, #3
 8002964:	4919      	ldr	r1, [pc, #100]	; (80029cc <MX_ADC1_Init+0x228>)
 8002966:	4812      	ldr	r0, [pc, #72]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002968:	f7fe fcc9 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  LL_ADC_REG_SetDMATransfer(ADC1,LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 800296c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002970:	480f      	ldr	r0, [pc, #60]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002972:	f7fe fcb2 	bl	80012da <LL_ADC_REG_SetDMATransfer>
  /* Khoi dong bo ADC */
  LL_ADC_Enable(ADC1);
 8002976:	480e      	ldr	r0, [pc, #56]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002978:	f7fe fd0a 	bl	8001390 <LL_ADC_Enable>
  LL_ADC_StartCalibration(ADC1);
 800297c:	480c      	ldr	r0, [pc, #48]	; (80029b0 <MX_ADC1_Init+0x20c>)
 800297e:	f7fe fd16 	bl	80013ae <LL_ADC_StartCalibration>

  	/* Cho trang thai cablib duoc bat *
  	 *
  	 */
  while(LL_ADC_IsCalibrationOnGoing(ADC1));
 8002982:	bf00      	nop
 8002984:	480a      	ldr	r0, [pc, #40]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002986:	f7fe fd21 	bl	80013cc <LL_ADC_IsCalibrationOnGoing>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <MX_ADC1_Init+0x1e0>

  	/* Bat dau chuyen doi ADC */
  LL_ADC_REG_StartConversionSWStart (ADC1);
 8002990:	4807      	ldr	r0, [pc, #28]	; (80029b0 <MX_ADC1_Init+0x20c>)
 8002992:	f7fe fd2d 	bl	80013f0 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC1_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	3738      	adds	r7, #56	; 0x38
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40010800 	.word	0x40010800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	200000b0 	.word	0x200000b0
 80029ac:	4001244c 	.word	0x4001244c
 80029b0:	40012400 	.word	0x40012400
 80029b4:	02300001 	.word	0x02300001
 80029b8:	02600002 	.word	0x02600002
 80029bc:	02900003 	.word	0x02900003
 80029c0:	02c00004 	.word	0x02c00004
 80029c4:	02f00005 	.word	0x02f00005
 80029c8:	03200006 	.word	0x03200006
 80029cc:	03500007 	.word	0x03500007

080029d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80029d6:	f107 0318 	add.w	r3, r7, #24
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	611a      	str	r2, [r3, #16]
 80029e6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80029f6:	2008      	movs	r0, #8
 80029f8:	f7fe ffb0 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <MX_I2C1_Init+0xa4>)
 80029fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a00:	2309      	movs	r3, #9
 8002a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4819      	ldr	r0, [pc, #100]	; (8002a78 <MX_I2C1_Init+0xa8>)
 8002a12:	f001 f8cd 	bl	8003bb0 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_I2C1();
 8002a16:	f7ff faaf 	bl	8001f78 <LL_GPIO_AF_EnableRemap_I2C1>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002a1a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a1e:	f7fe ff85 	bl	800192c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8002a22:	4816      	ldr	r0, [pc, #88]	; (8002a7c <MX_I2C1_Init+0xac>)
 8002a24:	f7fe fe93 	bl	800174e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002a28:	4814      	ldr	r0, [pc, #80]	; (8002a7c <MX_I2C1_Init+0xac>)
 8002a2a:	f7fe fe6f 	bl	800170c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8002a2e:	4813      	ldr	r0, [pc, #76]	; (8002a7c <MX_I2C1_Init+0xac>)
 8002a30:	f7fe fe5d 	bl	80016ee <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002a34:	2300      	movs	r3, #0
 8002a36:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <MX_I2C1_Init+0xb0>)
 8002a3a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002a50:	f107 0318 	add.w	r3, r7, #24
 8002a54:	4619      	mov	r1, r3
 8002a56:	4809      	ldr	r0, [pc, #36]	; (8002a7c <MX_I2C1_Init+0xac>)
 8002a58:	f001 f9f6 	bl	8003e48 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4807      	ldr	r0, [pc, #28]	; (8002a7c <MX_I2C1_Init+0xac>)
 8002a60:	f7fe fe63 	bl	800172a <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_I2C1_Init+0xac>)
 8002a66:	f7fe fe33 	bl	80016d0 <LL_I2C_Enable>

  /* USER CODE END I2C1_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	3730      	adds	r7, #48	; 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	04030003 	.word	0x04030003
 8002a78:	40010c00 	.word	0x40010c00
 8002a7c:	40005400 	.word	0x40005400
 8002a80:	000186a0 	.word	0x000186a0

08002a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b098      	sub	sp, #96	; 0x60
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 ff38 	bl	8004918 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
 8002ab8:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aba:	463b      	mov	r3, r7
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002ac8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002acc:	f7fe ff46 	bl	800195c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ad0:	f7fe fb4a 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fb98 	bl	8001210 <NVIC_EncodePriority>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	2019      	movs	r0, #25
 8002ae6:	f7fe fb69 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002aea:	2019      	movs	r0, #25
 8002aec:	f7fe fb4a 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002af6:	2300      	movs	r3, #0
 8002af8:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_InitStruct.Autoreload = 7199;
 8002afa:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002afe:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002b00:	2300      	movs	r3, #0
 8002b02:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_InitStruct.RepetitionCounter = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002b0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	483c      	ldr	r0, [pc, #240]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b12:	f001 fb41 	bl	8004198 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8002b16:	483b      	ldr	r0, [pc, #236]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b18:	f7fe ff67 	bl	80019ea <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4839      	ldr	r0, [pc, #228]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b20:	f7fe ffd0 	bl	8001ac4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002b24:	2360      	movs	r3, #96	; 0x60
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_OC_InitStruct.CompareValue = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002b34:	2300      	movs	r3, #0
 8002b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002b40:	2300      	movs	r3, #0
 8002b42:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	482d      	ldr	r0, [pc, #180]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b4e:	f001 fb81 	bl	8004254 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8002b52:	2101      	movs	r1, #1
 8002b54:	482b      	ldr	r0, [pc, #172]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b56:	f7fe ff73 	bl	8001a40 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5e:	4829      	ldr	r0, [pc, #164]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b60:	f7fe ffb0 	bl	8001ac4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b70:	461a      	mov	r2, r3
 8002b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b76:	4823      	ldr	r0, [pc, #140]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b78:	f001 fb6c 	bl	8004254 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b80:	4820      	ldr	r0, [pc, #128]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b82:	f7fe ff5d 	bl	8001a40 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002b86:	2100      	movs	r1, #0
 8002b88:	481e      	ldr	r0, [pc, #120]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b8a:	f7ff f923 	bl	8001dd4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002b8e:	481d      	ldr	r0, [pc, #116]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002b90:	f7ff f932 	bl	8001df8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.DeadTime = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 3020 	strb.w	r3, [r7, #32]
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	847b      	strh	r3, [r7, #34]	; 0x22
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8002baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4812      	ldr	r0, [pc, #72]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002bbc:	f001 fb82 	bl	80042c4 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8002bc0:	4810      	ldr	r0, [pc, #64]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002bc2:	f7ff f944 	bl	8001e4e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM1,0);
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	480e      	ldr	r0, [pc, #56]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002bca:	f7fe ff2c 	bl	8001a26 <LL_TIM_SetCounter>
  LL_TIM_EnableAllOutputs(TIM1);
 8002bce:	480d      	ldr	r0, [pc, #52]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002bd0:	f7ff f921 	bl	8001e16 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8002bd4:	480b      	ldr	r0, [pc, #44]	; (8002c04 <MX_TIM1_Init+0x180>)
 8002bd6:	f7fe fef9 	bl	80019cc <LL_TIM_EnableCounter>

  /* USER CODE END TIM1_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002bda:	2004      	movs	r0, #4
 8002bdc:	f7fe febe 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  PA10   ------> TIM1_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_10;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_TIM1_Init+0x184>)
 8002be2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002be4:	2309      	movs	r3, #9
 8002be6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002be8:	2303      	movs	r3, #3
 8002bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_TIM1_Init+0x188>)
 8002bf6:	f000 ffdb 	bl	8003bb0 <LL_GPIO_Init>

}
 8002bfa:	bf00      	nop
 8002bfc:	3760      	adds	r7, #96	; 0x60
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	04050005 	.word	0x04050005
 8002c0c:	40010800 	.word	0x40010800

08002c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c26:	463b      	mov	r3, r7
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002c34:	2001      	movs	r0, #1
 8002c36:	f7fe fe79 	bl	800192c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002c3a:	2004      	movs	r0, #4
 8002c3c:	f7fe fe8e 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002c40:	2008      	movs	r0, #8
 8002c42:	f7fe fe8b 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA15   ------> TIM2_CH1
  PB3   ------> TIM2_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <MX_TIM2_Init+0x154>)
 8002c48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	463b      	mov	r3, r7
 8002c50:	4619      	mov	r1, r3
 8002c52:	4845      	ldr	r0, [pc, #276]	; (8002d68 <MX_TIM2_Init+0x158>)
 8002c54:	f000 ffac 	bl	8003bb0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002c58:	f640 0308 	movw	r3, #2056	; 0x808
 8002c5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002c5e:	2304      	movs	r3, #4
 8002c60:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c62:	463b      	mov	r3, r7
 8002c64:	4619      	mov	r1, r3
 8002c66:	4841      	ldr	r0, [pc, #260]	; (8002d6c <MX_TIM2_Init+0x15c>)
 8002c68:	f000 ffa2 	bl	8003bb0 <LL_GPIO_Init>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002c6c:	f7fe fa7c 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2200      	movs	r2, #0
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe faca 	bl	8001210 <NVIC_EncodePriority>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4619      	mov	r1, r3
 8002c80:	201c      	movs	r0, #28
 8002c82:	f7fe fa9b 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002c86:	201c      	movs	r0, #28
 8002c88:	f7fe fa7c 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */
  LL_GPIO_AF_EnableRemap_TIM2();
 8002c8c:	f7ff f994 	bl	8001fb8 <LL_GPIO_AF_EnableRemap_TIM2>
  /* USER CODE END TIM2_Init 1 */
  LL_TIM_SetEncoderMode(TIM2, LL_TIM_ENCODERMODE_X4_TI12);
 8002c90:	2103      	movs	r1, #3
 8002c92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c96:	f7ff f88b 	bl	8001db0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002c9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ca4:	f7fe ff50 	bl	8001b48 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2101      	movs	r1, #1
 8002cac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cb0:	f7fe ff94 	bl	8001bdc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cbc:	f7fe ffd8 	bl	8001c70 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cc8:	f7ff f81c 	bl	8001d04 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002ccc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cd0:	2110      	movs	r1, #16
 8002cd2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cd6:	f7fe ff37 	bl	8001b48 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2110      	movs	r1, #16
 8002cde:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ce2:	f7fe ff7b 	bl	8001bdc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2110      	movs	r1, #16
 8002cea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cee:	f7fe ffbf 	bl	8001c70 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM2, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2110      	movs	r1, #16
 8002cf6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002cfa:	f7ff f803 	bl	8001d04 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d0a:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d1a:	f001 fa3d 	bl	8004198 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002d1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d22:	f7fe fe71 	bl	8001a08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002d26:	2100      	movs	r1, #0
 8002d28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d2c:	f7ff f852 	bl	8001dd4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002d30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d34:	f7ff f860 	bl	8001df8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
//  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
  LL_TIM_SetCounter(TIM2,0);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d3e:	f7fe fe72 	bl	8001a26 <LL_TIM_SetCounter>
  LL_TIM_EnableCounter(TIM2);
 8002d42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d46:	f7fe fe41 	bl	80019cc <LL_TIM_EnableCounter>
  LL_TIM_ClearFlag_UPDATE(TIM2);
 8002d4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d4e:	f7ff f871 	bl	8001e34 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8002d52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d56:	f7ff f87a 	bl	8001e4e <LL_TIM_EnableIT_UPDATE>

  /* USER CODE END TIM2_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	04800080 	.word	0x04800080
 8002d68:	40010800 	.word	0x40010800
 8002d6c:	40010c00 	.word	0x40010c00

08002d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	463b      	mov	r3, r7
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002d94:	2002      	movs	r0, #2
 8002d96:	f7fe fdc9 	bl	800192c <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002d9a:	2008      	movs	r0, #8
 8002d9c:	f7fe fdde 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  PB5   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002da0:	f243 0330 	movw	r3, #12336	; 0x3030
 8002da4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002da6:	2304      	movs	r3, #4
 8002da8:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002daa:	463b      	mov	r3, r7
 8002dac:	4619      	mov	r1, r3
 8002dae:	4836      	ldr	r0, [pc, #216]	; (8002e88 <MX_TIM3_Init+0x118>)
 8002db0:	f000 fefe 	bl	8003bb0 <LL_GPIO_Init>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002db4:	f7fe f9d8 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fa26 	bl	8001210 <NVIC_EncodePriority>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	201d      	movs	r0, #29
 8002dca:	f7fe f9f7 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002dce:	201d      	movs	r0, #29
 8002dd0:	f7fe f9d8 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */
  LL_GPIO_AF_RemapPartial_TIM3();
 8002dd4:	f7ff f900 	bl	8001fd8 <LL_GPIO_AF_RemapPartial_TIM3>
  /* USER CODE END TIM3_Init 1 */
  LL_TIM_SetEncoderMode(TIM3, LL_TIM_ENCODERMODE_X4_TI12);
 8002dd8:	2103      	movs	r1, #3
 8002dda:	482c      	ldr	r0, [pc, #176]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002ddc:	f7fe ffe8 	bl	8001db0 <LL_TIM_SetEncoderMode>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002de0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002de4:	2101      	movs	r1, #1
 8002de6:	4829      	ldr	r0, [pc, #164]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002de8:	f7fe feae 	bl	8001b48 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2101      	movs	r1, #1
 8002df0:	4826      	ldr	r0, [pc, #152]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002df2:	f7fe fef3 	bl	8001bdc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2101      	movs	r1, #1
 8002dfa:	4824      	ldr	r0, [pc, #144]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002dfc:	f7fe ff38 	bl	8001c70 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2101      	movs	r1, #1
 8002e04:	4821      	ldr	r0, [pc, #132]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e06:	f7fe ff7d 	bl	8001d04 <LL_TIM_IC_SetPolarity>
  LL_TIM_IC_SetActiveInput(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ACTIVEINPUT_DIRECTTI);
 8002e0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e0e:	2110      	movs	r1, #16
 8002e10:	481e      	ldr	r0, [pc, #120]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e12:	f7fe fe99 	bl	8001b48 <LL_TIM_IC_SetActiveInput>
  LL_TIM_IC_SetPrescaler(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_ICPSC_DIV1);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2110      	movs	r1, #16
 8002e1a:	481c      	ldr	r0, [pc, #112]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e1c:	f7fe fede 	bl	8001bdc <LL_TIM_IC_SetPrescaler>
  LL_TIM_IC_SetFilter(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_FILTER_FDIV1);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2110      	movs	r1, #16
 8002e24:	4819      	ldr	r0, [pc, #100]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e26:	f7fe ff23 	bl	8001c70 <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetPolarity(TIM3, LL_TIM_CHANNEL_CH2, LL_TIM_IC_POLARITY_RISING);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	4817      	ldr	r0, [pc, #92]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e30:	f7fe ff68 	bl	8001d04 <LL_TIM_IC_SetPolarity>
  TIM_InitStruct.Prescaler = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	82bb      	strh	r3, [r7, #20]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
  TIM_InitStruct.Autoreload = 65535;
 8002e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e40:	61fb      	str	r3, [r7, #28]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480f      	ldr	r0, [pc, #60]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e4e:	f001 f9a3 	bl	8004198 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002e52:	480e      	ldr	r0, [pc, #56]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e54:	f7fe fdd8 	bl	8001a08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002e58:	2100      	movs	r1, #0
 8002e5a:	480c      	ldr	r0, [pc, #48]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e5c:	f7fe ffba 	bl	8001dd4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002e60:	480a      	ldr	r0, [pc, #40]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e62:	f7fe ffc9 	bl	8001df8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */
  LL_TIM_SetCounter(TIM3,0);
 8002e66:	2100      	movs	r1, #0
 8002e68:	4808      	ldr	r0, [pc, #32]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e6a:	f7fe fddc 	bl	8001a26 <LL_TIM_SetCounter>
   LL_TIM_EnableCounter(TIM3);
 8002e6e:	4807      	ldr	r0, [pc, #28]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e70:	f7fe fdac 	bl	80019cc <LL_TIM_EnableCounter>
   LL_TIM_ClearFlag_UPDATE(TIM3);
 8002e74:	4805      	ldr	r0, [pc, #20]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e76:	f7fe ffdd 	bl	8001e34 <LL_TIM_ClearFlag_UPDATE>
   LL_TIM_EnableIT_UPDATE(TIM3);
 8002e7a:	4804      	ldr	r0, [pc, #16]	; (8002e8c <MX_TIM3_Init+0x11c>)
 8002e7c:	f7fe ffe7 	bl	8001e4e <LL_TIM_EnableIT_UPDATE>
  /* USER CODE END TIM3_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40010c00 	.word	0x40010c00
 8002e8c:	40000400 	.word	0x40000400

08002e90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002e96:	1d3b      	adds	r3, r7, #4
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8002ea4:	2004      	movs	r0, #4
 8002ea6:	f7fe fd41 	bl	800192c <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8002eaa:	f7fe f95d 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe f9ab 	bl	8001210 <NVIC_EncodePriority>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	201e      	movs	r0, #30
 8002ec0:	f7fe f97c 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8002ec4:	201e      	movs	r0, #30
 8002ec6:	f7fe f95d 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 199;
 8002eca:	23c7      	movs	r3, #199	; 0xc7
 8002ecc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 7199;
 8002ed2:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002ed6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480f      	ldr	r0, [pc, #60]	; (8002f20 <MX_TIM4_Init+0x90>)
 8002ee2:	f001 f959 	bl	8004198 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8002ee6:	480e      	ldr	r0, [pc, #56]	; (8002f20 <MX_TIM4_Init+0x90>)
 8002ee8:	f7fe fd8e 	bl	8001a08 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002eec:	2100      	movs	r1, #0
 8002eee:	480c      	ldr	r0, [pc, #48]	; (8002f20 <MX_TIM4_Init+0x90>)
 8002ef0:	f7fe ff4a 	bl	8001d88 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	480a      	ldr	r0, [pc, #40]	; (8002f20 <MX_TIM4_Init+0x90>)
 8002ef8:	f7fe ff6c 	bl	8001dd4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8002efc:	4808      	ldr	r0, [pc, #32]	; (8002f20 <MX_TIM4_Init+0x90>)
 8002efe:	f7fe ff7b 	bl	8001df8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM4);
 8002f02:	4807      	ldr	r0, [pc, #28]	; (8002f20 <MX_TIM4_Init+0x90>)
 8002f04:	f7fe ffa3 	bl	8001e4e <LL_TIM_EnableIT_UPDATE>
  LL_TIM_SetCounter(TIM4,0);
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <MX_TIM4_Init+0x90>)
 8002f0c:	f7fe fd8b 	bl	8001a26 <LL_TIM_SetCounter>
    LL_TIM_EnableCounter(TIM4);
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <MX_TIM4_Init+0x90>)
 8002f12:	f7fe fd5b 	bl	80019cc <LL_TIM_EnableCounter>

  /* USER CODE END TIM4_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40000800 	.word	0x40000800

08002f24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08c      	sub	sp, #48	; 0x30
 8002f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	615a      	str	r2, [r3, #20]
 8002f3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3e:	463b      	mov	r3, r7
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002f4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f50:	f7fe fd04 	bl	800195c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002f54:	2008      	movs	r0, #8
 8002f56:	f7fe fd01 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002f5a:	f244 0340 	movw	r3, #16448	; 0x4040
 8002f5e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f60:	2309      	movs	r3, #9
 8002f62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f64:	2303      	movs	r3, #3
 8002f66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	4619      	mov	r1, r3
 8002f70:	481f      	ldr	r0, [pc, #124]	; (8002ff0 <MX_USART1_UART_Init+0xcc>)
 8002f72:	f000 fe1d 	bl	8003bb0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002f76:	f248 0380 	movw	r3, #32896	; 0x8080
 8002f7a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f80:	463b      	mov	r3, r7
 8002f82:	4619      	mov	r1, r3
 8002f84:	481a      	ldr	r0, [pc, #104]	; (8002ff0 <MX_USART1_UART_Init+0xcc>)
 8002f86:	f000 fe13 	bl	8003bb0 <LL_GPIO_Init>

  LL_GPIO_AF_EnableRemap_USART1();
 8002f8a:	f7ff f805 	bl	8001f98 <LL_GPIO_AF_EnableRemap_USART1>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002f8e:	f7fe f8eb 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2200      	movs	r2, #0
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe f939 	bl	8001210 <NVIC_EncodePriority>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	2025      	movs	r0, #37	; 0x25
 8002fa4:	f7fe f90a 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002fa8:	2025      	movs	r0, #37	; 0x25
 8002faa:	f7fe f8eb 	bl	8001184 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002fae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002fb2:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb8:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4807      	ldr	r0, [pc, #28]	; (8002ff4 <MX_USART1_UART_Init+0xd0>)
 8002fd6:	f001 fbdf 	bl	8004798 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002fda:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <MX_USART1_UART_Init+0xd0>)
 8002fdc:	f7fe ff55 	bl	8001e8a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002fe0:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <MX_USART1_UART_Init+0xd0>)
 8002fe2:	f7fe ff43 	bl	8001e6c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	3730      	adds	r7, #48	; 0x30
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40010c00 	.word	0x40010c00
 8002ff4:	40013800 	.word	0x40013800

08002ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f7fe fc7d 	bl	80018fc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003002:	f7fe f8b1 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8003006:	4603      	mov	r3, r0
 8003008:	2200      	movs	r2, #0
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe f8ff 	bl	8001210 <NVIC_EncodePriority>
 8003012:	4603      	mov	r3, r0
 8003014:	4619      	mov	r1, r3
 8003016:	200b      	movs	r0, #11
 8003018:	f7fe f8d0 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800301c:	200b      	movs	r0, #11
 800301e:	f7fe f8b1 	bl	8001184 <__NVIC_EnableIRQ>

}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800302e:	f107 0318 	add.w	r3, r7, #24
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	1d3b      	adds	r3, r7, #4
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003046:	2010      	movs	r0, #16
 8003048:	f7fe fc88 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800304c:	2020      	movs	r0, #32
 800304e:	f7fe fc85 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003052:	2004      	movs	r0, #4
 8003054:	f7fe fc82 	bl	800195c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003058:	2008      	movs	r0, #8
 800305a:	f7fe fc7f 	bl	800195c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_15);
 800305e:	4946      	ldr	r1, [pc, #280]	; (8003178 <MX_GPIO_Init+0x150>)
 8003060:	4846      	ldr	r0, [pc, #280]	; (800317c <MX_GPIO_Init+0x154>)
 8003062:	f7fe ff79 	bl	8001f58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 8003066:	4944      	ldr	r1, [pc, #272]	; (8003178 <MX_GPIO_Init+0x150>)
 8003068:	4845      	ldr	r0, [pc, #276]	; (8003180 <MX_GPIO_Init+0x158>)
 800306a:	f7fe ff75 	bl	8001f58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9|LL_GPIO_PIN_11);
 800306e:	4945      	ldr	r1, [pc, #276]	; (8003184 <MX_GPIO_Init+0x15c>)
 8003070:	4845      	ldr	r0, [pc, #276]	; (8003188 <MX_GPIO_Init+0x160>)
 8003072:	f7fe ff71 	bl	8001f58 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003076:	4b40      	ldr	r3, [pc, #256]	; (8003178 <MX_GPIO_Init+0x150>)
 8003078:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800307a:	2301      	movs	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800307e:	2302      	movs	r3, #2
 8003080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	4619      	mov	r1, r3
 800308a:	483c      	ldr	r0, [pc, #240]	; (800317c <MX_GPIO_Init+0x154>)
 800308c:	f000 fd90 	bl	8003bb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <MX_GPIO_Init+0x150>)
 8003092:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003094:	2301      	movs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003098:	2303      	movs	r3, #3
 800309a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	4619      	mov	r1, r3
 80030a4:	4836      	ldr	r0, [pc, #216]	; (8003180 <MX_GPIO_Init+0x158>)
 80030a6:	f000 fd83 	bl	8003bb0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_11;
 80030aa:	4b36      	ldr	r3, [pc, #216]	; (8003184 <MX_GPIO_Init+0x15c>)
 80030ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80030ae:	2301      	movs	r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80030b2:	2303      	movs	r3, #3
 80030b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4832      	ldr	r0, [pc, #200]	; (8003188 <MX_GPIO_Init+0x160>)
 80030c0:	f000 fd76 	bl	8003bb0 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE12);
 80030c4:	4931      	ldr	r1, [pc, #196]	; (800318c <MX_GPIO_Init+0x164>)
 80030c6:	2001      	movs	r0, #1
 80030c8:	f7fe ffae 	bl	8002028 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE13);
 80030cc:	4930      	ldr	r1, [pc, #192]	; (8003190 <MX_GPIO_Init+0x168>)
 80030ce:	2001      	movs	r0, #1
 80030d0:	f7fe ffaa 	bl	8002028 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE14);
 80030d4:	492f      	ldr	r1, [pc, #188]	; (8003194 <MX_GPIO_Init+0x16c>)
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7fe ffa6 	bl	8002028 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80030dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80030e2:	2301      	movs	r3, #1
 80030e4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80030e6:	2300      	movs	r3, #0
 80030e8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80030ea:	2301      	movs	r3, #1
 80030ec:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80030ee:	f107 0318 	add.w	r3, r7, #24
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fc28 	bl	8003948 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80030f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030fc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80030fe:	2301      	movs	r3, #1
 8003100:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003102:	2300      	movs	r3, #0
 8003104:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003106:	2301      	movs	r3, #1
 8003108:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800310a:	f107 0318 	add.w	r3, r7, #24
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fc1a 	bl	8003948 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8003114:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003118:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800311a:	2301      	movs	r3, #1
 800311c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800311e:	2300      	movs	r3, #0
 8003120:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003122:	2301      	movs	r3, #1
 8003124:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003126:	f107 0318 	add.w	r3, r7, #24
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fc0c 	bl	8003948 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_12, LL_GPIO_MODE_FLOATING);
 8003130:	2204      	movs	r2, #4
 8003132:	4919      	ldr	r1, [pc, #100]	; (8003198 <MX_GPIO_Init+0x170>)
 8003134:	4812      	ldr	r0, [pc, #72]	; (8003180 <MX_GPIO_Init+0x158>)
 8003136:	f7fe fedd 	bl	8001ef4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_13, LL_GPIO_MODE_FLOATING);
 800313a:	2204      	movs	r2, #4
 800313c:	4917      	ldr	r1, [pc, #92]	; (800319c <MX_GPIO_Init+0x174>)
 800313e:	4810      	ldr	r0, [pc, #64]	; (8003180 <MX_GPIO_Init+0x158>)
 8003140:	f7fe fed8 	bl	8001ef4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_14, LL_GPIO_MODE_FLOATING);
 8003144:	2204      	movs	r2, #4
 8003146:	4916      	ldr	r1, [pc, #88]	; (80031a0 <MX_GPIO_Init+0x178>)
 8003148:	480d      	ldr	r0, [pc, #52]	; (8003180 <MX_GPIO_Init+0x158>)
 800314a:	f7fe fed3 	bl	8001ef4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800314e:	f7fe f80b 	bl	8001168 <__NVIC_GetPriorityGrouping>
 8003152:	4603      	mov	r3, r0
 8003154:	2200      	movs	r2, #0
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f7fe f859 	bl	8001210 <NVIC_EncodePriority>
 800315e:	4603      	mov	r3, r0
 8003160:	4619      	mov	r1, r3
 8003162:	2028      	movs	r0, #40	; 0x28
 8003164:	f7fe f82a 	bl	80011bc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003168:	2028      	movs	r0, #40	; 0x28
 800316a:	f7fe f80b 	bl	8001184 <__NVIC_EnableIRQ>

}
 800316e:	bf00      	nop
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	04800080 	.word	0x04800080
 800317c:	40011000 	.word	0x40011000
 8003180:	40010c00 	.word	0x40010c00
 8003184:	040a000a 	.word	0x040a000a
 8003188:	40010800 	.word	0x40010800
 800318c:	000f0003 	.word	0x000f0003
 8003190:	00f00003 	.word	0x00f00003
 8003194:	0f000003 	.word	0x0f000003
 8003198:	04100010 	.word	0x04100010
 800319c:	04200020 	.word	0x04200020
 80031a0:	04400040 	.word	0x04400040

080031a4 <Sensor_Convert_A2D>:
	 {
		 Sensor_Threshold[i] = (BlackValue[i] + WhiteValue[i])/2;
	 }
}
void Sensor_Convert_A2D()
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; ++i)
 80031aa:	2300      	movs	r3, #0
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	e01c      	b.n	80031ea <Sensor_Convert_A2D+0x46>
	  {
		  if(Sensor_ADC_Value[i] < Sensor_Threshold[i])
 80031b0:	4a12      	ldr	r2, [pc, #72]	; (80031fc <Sensor_Convert_A2D+0x58>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4911      	ldr	r1, [pc, #68]	; (8003200 <Sensor_Convert_A2D+0x5c>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d20e      	bcs.n	80031e4 <Sensor_Convert_A2D+0x40>
		  {
			  sbi(LineDetect, (7-i));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f1c3 0307 	rsb	r3, r3, #7
 80031cc:	2201      	movs	r2, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	b25a      	sxtb	r2, r3
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <Sensor_Convert_A2D+0x60>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b25b      	sxtb	r3, r3
 80031da:	4313      	orrs	r3, r2
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <Sensor_Convert_A2D+0x60>)
 80031e2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; ++i)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3301      	adds	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	dddf      	ble.n	80031b0 <Sensor_Convert_A2D+0xc>
//			  printf("0 ");
		  }
	  };
//	printf("\n");
//	LL_mDelay(500);
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	200000b0 	.word	0x200000b0
 8003200:	20000000 	.word	0x20000000
 8003204:	20000099 	.word	0x20000099

08003208 <Sensor_PrintValue>:
		  printf("%u ", Sensor_Threshold[i]);
	 }
	  printf("\n");
}
void Sensor_PrintValue()
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
	printf("Sensor Val: ");
 800320e:	480e      	ldr	r0, [pc, #56]	; (8003248 <Sensor_PrintValue+0x40>)
 8003210:	f001 fb8a 	bl	8004928 <iprintf>
  for(int i = 0; i < 8; ++i)
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	e00b      	b.n	8003232 <Sensor_PrintValue+0x2a>
  {
	  printf("%u ", Sensor_ADC_Value[i]);
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <Sensor_PrintValue+0x44>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003222:	b29b      	uxth	r3, r3
 8003224:	4619      	mov	r1, r3
 8003226:	480a      	ldr	r0, [pc, #40]	; (8003250 <Sensor_PrintValue+0x48>)
 8003228:	f001 fb7e 	bl	8004928 <iprintf>
  for(int i = 0; i < 8; ++i)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3301      	adds	r3, #1
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b07      	cmp	r3, #7
 8003236:	ddf0      	ble.n	800321a <Sensor_PrintValue+0x12>
  };
  printf("\n");
 8003238:	200a      	movs	r0, #10
 800323a:	f001 fb8d 	bl	8004958 <putchar>

}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	08005974 	.word	0x08005974
 800324c:	200000b0 	.word	0x200000b0
 8003250:	08005970 	.word	0x08005970

08003254 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4013      	ands	r3, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	429a      	cmp	r2, r3
 8003268:	bf0c      	ite	eq
 800326a:	2301      	moveq	r3, #1
 800326c:	2300      	movne	r3, #0
 800326e:	b2db      	uxtb	r3, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010400 	.word	0x40010400

08003280 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003288:	4a03      	ldr	r2, [pc, #12]	; (8003298 <LL_EXTI_ClearFlag_0_31+0x18>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6153      	str	r3, [r2, #20]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40010400 	.word	0x40010400

0800329c <LL_TIM_ClearFlag_UPDATE>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f06f 0201 	mvn.w	r2, #1
 80032aa:	611a      	str	r2, [r3, #16]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <LL_GPIO_SetOutputPin>:
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	611a      	str	r2, [r3, #16]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <LL_GPIO_ResetOutputPin>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	615a      	str	r2, [r3, #20]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f2:	b480      	push	{r7}
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003302:	e7fe      	b.n	8003302 <HardFault_Handler+0x4>

08003304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <MemManage_Handler+0x4>

0800330a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330e:	e7fe      	b.n	800330e <BusFault_Handler+0x4>

08003310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003314:	e7fe      	b.n	8003314 <UsageFault_Handler+0x4>

08003316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
	...

0800333c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RunTimeMillis++;
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <SysTick_Handler+0x18>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	4a03      	ldr	r2, [pc, #12]	; (8003354 <SysTick_Handler+0x18>)
 8003348:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000009c 	.word	0x2000009c

08003358 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

	++ServoCountValue;
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <TIM1_UP_IRQHandler+0x48>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <TIM1_UP_IRQHandler+0x48>)
 8003372:	701a      	strb	r2, [r3, #0]
	if(ServoCountValue > ServoCompareValue)
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <TIM1_UP_IRQHandler+0x48>)
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <TIM1_UP_IRQHandler+0x4c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d904      	bls.n	800338a <TIM1_UP_IRQHandler+0x26>
	{
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8003380:	490c      	ldr	r1, [pc, #48]	; (80033b4 <TIM1_UP_IRQHandler+0x50>)
 8003382:	480d      	ldr	r0, [pc, #52]	; (80033b8 <TIM1_UP_IRQHandler+0x54>)
 8003384:	f7ff ffa6 	bl	80032d4 <LL_GPIO_ResetOutputPin>
 8003388:	e003      	b.n	8003392 <TIM1_UP_IRQHandler+0x2e>
	} else
	{
		LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 800338a:	490a      	ldr	r1, [pc, #40]	; (80033b4 <TIM1_UP_IRQHandler+0x50>)
 800338c:	480a      	ldr	r0, [pc, #40]	; (80033b8 <TIM1_UP_IRQHandler+0x54>)
 800338e:	f7ff ff92 	bl	80032b6 <LL_GPIO_SetOutputPin>
	};
	if(ServoCountValue >= ServoReloadValue) ServoCountValue = 0;
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <TIM1_UP_IRQHandler+0x48>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2bc7      	cmp	r3, #199	; 0xc7
 8003398:	d902      	bls.n	80033a0 <TIM1_UP_IRQHandler+0x3c>
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <TIM1_UP_IRQHandler+0x48>)
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
	LL_TIM_ClearFlag_UPDATE(TIM1);
 80033a0:	4806      	ldr	r0, [pc, #24]	; (80033bc <TIM1_UP_IRQHandler+0x58>)
 80033a2:	f7ff ff7b 	bl	800329c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM1_UP_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200000a0 	.word	0x200000a0
 80033b0:	200000a1 	.word	0x200000a1
 80033b4:	04080008 	.word	0x04080008
 80033b8:	40010800 	.word	0x40010800
 80033bc:	40012c00 	.word	0x40012c00

080033c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM2);
 80033c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80033c8:	f7ff ff68 	bl	800329c <LL_TIM_ClearFlag_UPDATE>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	LL_TIM_ClearFlag_UPDATE(TIM3);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <TIM3_IRQHandler+0x10>)
 80033d6:	f7ff ff61 	bl	800329c <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40000400 	.word	0x40000400

080033e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */
  LL_TIM_ClearFlag_UPDATE(TIM4);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM4_IRQHandler+0x10>)
 80033ea:	f7ff ff57 	bl	800329c <LL_TIM_ClearFlag_UPDATE>
//  printf ("TIM2 : %d \n", LL_TIM_GetCounter(TIM2));
//  printf ("TIM3 : %d \n", LL_TIM_GetCounter(TIM3));

  /* USER CODE END TIM4_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40000800 	.word	0x40000800

080033f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8003408:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800340c:	f7ff ff22 	bl	8003254 <LL_EXTI_IsActiveFlag_0_31>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <EXTI15_10_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8003416:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800341a:	f7ff ff31 	bl	8003280 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_12 */
    printf("Hello");
 800341e:	480f      	ldr	r0, [pc, #60]	; (800345c <EXTI15_10_IRQHandler+0x58>)
 8003420:	f001 fa82 	bl	8004928 <iprintf>
    GetThreshold_Flag = 1;
 8003424:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <EXTI15_10_IRQHandler+0x5c>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 800342a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800342e:	f7ff ff11 	bl	8003254 <LL_EXTI_IsActiveFlag_0_31>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <EXTI15_10_IRQHandler+0x3c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8003438:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800343c:	f7ff ff20 	bl	8003280 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8003440:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003444:	f7ff ff06 	bl	8003254 <LL_EXTI_IsActiveFlag_0_31>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <EXTI15_10_IRQHandler+0x52>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800344e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003452:	f7ff ff15 	bl	8003280 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	08005990 	.word	0x08005990
 8003460:	20000098 	.word	0x20000098

08003464 <SetServoCompare>:

/* USER CODE BEGIN 1 */
void SetServoCompare(float ServoNewVal)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	if(ServoNewVal != ServoCompareValue)
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <SetServoCompare+0x40>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd fb1d 	bl	8000ab0 <__aeabi_i2f>
 8003476:	4603      	mov	r3, r0
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fd00 	bl	8000e80 <__aeabi_fcmpeq>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d000      	beq.n	8003488 <SetServoCompare+0x24>
	{
		ServoCompareValue = ServoNewVal;
		ServoCountValue = 0;
	}

}
 8003486:	e009      	b.n	800349c <SetServoCompare+0x38>
		ServoCompareValue = ServoNewVal;
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fd fd2b 	bl	8000ee4 <__aeabi_f2uiz>
 800348e:	4603      	mov	r3, r0
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <SetServoCompare+0x40>)
 8003494:	701a      	strb	r2, [r3, #0]
		ServoCountValue = 0;
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <SetServoCompare+0x44>)
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200000a1 	.word	0x200000a1
 80034a8:	200000a0 	.word	0x200000a0

080034ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e00a      	b.n	80034d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034be:	f3af 8000 	nop.w
 80034c2:	4601      	mov	r1, r0
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	60ba      	str	r2, [r7, #8]
 80034ca:	b2ca      	uxtb	r2, r1
 80034cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	dbf0      	blt.n	80034be <_read+0x12>
	}

return len;
 80034dc:	687b      	ldr	r3, [r7, #4]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e009      	b.n	800350c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	60ba      	str	r2, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fdbf 	bl	8002084 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3301      	adds	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	dbf1      	blt.n	80034f8 <_write+0x12>
	}
	return len;
 8003514:	687b      	ldr	r3, [r7, #4]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <_close>:

int _close(int file)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
	return -1;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003544:	605a      	str	r2, [r3, #4]
	return 0;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <_isatty>:

int _isatty(int file)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
	return 1;
 800355a:	2301      	movs	r3, #1
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
	return 0;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
	...

08003580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <_sbrk+0x5c>)
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <_sbrk+0x60>)
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <_sbrk+0x64>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <_sbrk+0x64>)
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <_sbrk+0x68>)
 80035a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <_sbrk+0x64>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d207      	bcs.n	80035c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035b0:	f001 f988 	bl	80048c4 <__errno>
 80035b4:	4602      	mov	r2, r0
 80035b6:	230c      	movs	r3, #12
 80035b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	e009      	b.n	80035d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <_sbrk+0x64>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <_sbrk+0x64>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <_sbrk+0x64>)
 80035d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20005000 	.word	0x20005000
 80035e0:	00000400 	.word	0x00000400
 80035e4:	200000a4 	.word	0x200000a4
 80035e8:	200000c8 	.word	0x200000c8

080035ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <SystemInit+0x5c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <SystemInit+0x5c>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <SystemInit+0x5c>)
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4911      	ldr	r1, [pc, #68]	; (8003648 <SystemInit+0x5c>)
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <SystemInit+0x60>)
 8003604:	4013      	ands	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <SystemInit+0x5c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <SystemInit+0x5c>)
 800360e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <SystemInit+0x5c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <SystemInit+0x5c>)
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <SystemInit+0x5c>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a07      	ldr	r2, [pc, #28]	; (8003648 <SystemInit+0x5c>)
 800362a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800362e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <SystemInit+0x5c>)
 8003632:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003636:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <SystemInit+0x64>)
 800363a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800363e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	40021000 	.word	0x40021000
 800364c:	f8ff0000 	.word	0xf8ff0000
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003654:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003656:	e003      	b.n	8003660 <LoopCopyDataInit>

08003658 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800365a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800365c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800365e:	3104      	adds	r1, #4

08003660 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003660:	480a      	ldr	r0, [pc, #40]	; (800368c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003664:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003666:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003668:	d3f6      	bcc.n	8003658 <CopyDataInit>
  ldr r2, =_sbss
 800366a:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800366c:	e002      	b.n	8003674 <LoopFillZerobss>

0800366e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003670:	f842 3b04 	str.w	r3, [r2], #4

08003674 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003676:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003678:	d3f9      	bcc.n	800366e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800367a:	f7ff ffb7 	bl	80035ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800367e:	f001 f927 	bl	80048d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003682:	f7fe fd19 	bl	80020b8 <main>
  bx lr
 8003686:	4770      	bx	lr
  ldr r3, =_sidata
 8003688:	08005a78 	.word	0x08005a78
  ldr r0, =_sdata
 800368c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003690:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8003694:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8003698:	200000c4 	.word	0x200000c4

0800369c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800369c:	e7fe      	b.n	800369c <ADC1_2_IRQHandler>

0800369e <LL_ADC_REG_SetSequencerLength>:
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <LL_ADC_IsEnabled>:
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	bf0c      	ite	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	2300      	movne	r3, #0
 80036da:	b2db      	uxtb	r3, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
	...

080036e8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80036f6:	4813      	ldr	r0, [pc, #76]	; (8003744 <LL_ADC_CommonInit+0x5c>)
 80036f8:	f7ff ffe3 	bl	80036c2 <LL_ADC_IsEnabled>
 80036fc:	4604      	mov	r4, r0
 80036fe:	4812      	ldr	r0, [pc, #72]	; (8003748 <LL_ADC_CommonInit+0x60>)
 8003700:	f7ff ffdf 	bl	80036c2 <LL_ADC_IsEnabled>
 8003704:	4603      	mov	r3, r0
 8003706:	4323      	orrs	r3, r4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d114      	bne.n	8003736 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	e008      	b.n	800373a <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	e001      	b.n	800373a <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	bd90      	pop	{r4, r7, pc}
 8003744:	40012400 	.word	0x40012400
 8003748:	40012800 	.word	0x40012800

0800374c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffb1 	bl	80036c2 <LL_ADC_IsEnabled>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d112      	bne.n	800378c <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	609a      	str	r2, [r3, #8]
 800378a:	e001      	b.n	8003790 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ff8a 	bl	80036c2 <LL_ADC_IsEnabled>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d131      	bne.n	8003818 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	e008      	b.n	80037e8 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80037f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	6811      	ldr	r1, [r2, #0]
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	68d2      	ldr	r2, [r2, #12]
 80037fc:	4311      	orrs	r1, r2
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	6912      	ldr	r2, [r2, #16]
 8003802:	430a      	orrs	r2, r1
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff44 	bl	800369e <LL_ADC_REG_SetSequencerLength>
 8003816:	e001      	b.n	800381c <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <LL_EXTI_EnableIT_0_31>:
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <LL_EXTI_EnableIT_0_31+0x20>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4904      	ldr	r1, [pc, #16]	; (8003848 <LL_EXTI_EnableIT_0_31+0x20>)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010400 	.word	0x40010400

0800384c <LL_EXTI_DisableIT_0_31>:
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <LL_EXTI_DisableIT_0_31+0x20>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	43db      	mvns	r3, r3
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <LL_EXTI_DisableIT_0_31+0x20>)
 800385e:	4013      	ands	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40010400 	.word	0x40010400

08003870 <LL_EXTI_EnableEvent_0_31>:
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <LL_EXTI_EnableEvent_0_31+0x20>)
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	4904      	ldr	r1, [pc, #16]	; (8003890 <LL_EXTI_EnableEvent_0_31+0x20>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40010400 	.word	0x40010400

08003894 <LL_EXTI_DisableEvent_0_31>:
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <LL_EXTI_DisableEvent_0_31+0x20>)
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40010400 	.word	0x40010400

080038b8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	4904      	ldr	r1, [pc, #16]	; (80038d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	40010400 	.word	0x40010400

080038dc <LL_EXTI_DisableRisingTrig_0_31>:
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	40010400 	.word	0x40010400

08003900 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	4904      	ldr	r1, [pc, #16]	; (8003920 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4313      	orrs	r3, r2
 8003912:	60cb      	str	r3, [r1, #12]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010400 	.word	0x40010400

08003924 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	43db      	mvns	r3, r3
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003936:	4013      	ands	r3, r2
 8003938:	60cb      	str	r3, [r1, #12]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	40010400 	.word	0x40010400

08003948 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	791b      	ldrb	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d060      	beq.n	8003a1e <LL_EXTI_Init+0xd6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d067      	beq.n	8003a34 <LL_EXTI_Init+0xec>
    {
      switch (EXTI_InitStruct->Mode)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	795b      	ldrb	r3, [r3, #5]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d00e      	beq.n	800398a <LL_EXTI_Init+0x42>
 800396c:	2b02      	cmp	r3, #2
 800396e:	d017      	beq.n	80039a0 <LL_EXTI_Init+0x58>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d120      	bne.n	80039b6 <LL_EXTI_Init+0x6e>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff8b 	bl	8003894 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff ff50 	bl	8003828 <LL_EXTI_EnableIT_0_31>
          break;
 8003988:	e018      	b.n	80039bc <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff5c 	bl	800384c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff69 	bl	8003870 <LL_EXTI_EnableEvent_0_31>
          break;
 800399e:	e00d      	b.n	80039bc <LL_EXTI_Init+0x74>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff3f 	bl	8003828 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff5e 	bl	8003870 <LL_EXTI_EnableEvent_0_31>
          break;
 80039b4:	e002      	b.n	80039bc <LL_EXTI_Init+0x74>
        default:
          status = ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
          break;
 80039ba:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	799b      	ldrb	r3, [r3, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d037      	beq.n	8003a34 <LL_EXTI_Init+0xec>
      {
        switch (EXTI_InitStruct->Trigger)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	799b      	ldrb	r3, [r3, #6]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d00e      	beq.n	80039ea <LL_EXTI_Init+0xa2>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d017      	beq.n	8003a00 <LL_EXTI_Init+0xb8>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d120      	bne.n	8003a16 <LL_EXTI_Init+0xce>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ffa3 	bl	8003924 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ff68 	bl	80038b8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80039e8:	e025      	b.n	8003a36 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff74 	bl	80038dc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff81 	bl	8003900 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80039fe:	e01a      	b.n	8003a36 <LL_EXTI_Init+0xee>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff57 	bl	80038b8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff76 	bl	8003900 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003a14:	e00f      	b.n	8003a36 <LL_EXTI_Init+0xee>
          default:
            status = ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
            break;
 8003a1a:	bf00      	nop
 8003a1c:	e00b      	b.n	8003a36 <LL_EXTI_Init+0xee>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff ff12 	bl	800384c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff31 	bl	8003894 <LL_EXTI_DisableEvent_0_31>
 8003a32:	e000      	b.n	8003a36 <LL_EXTI_Init+0xee>
      }
 8003a34:	bf00      	nop
  }
  return status;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <LL_GPIO_SetPinMode>:
{
 8003a40:	b490      	push	{r4, r7}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	0e1b      	lsrs	r3, r3, #24
 8003a54:	4413      	add	r3, r2
 8003a56:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003a58:	6822      	ldr	r2, [r4, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	613b      	str	r3, [r7, #16]
  return result;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	fab3 f383 	clz	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	210f      	movs	r1, #15
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	401a      	ands	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	61bb      	str	r3, [r7, #24]
  return result;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	4313      	orrs	r3, r2
 8003a98:	6023      	str	r3, [r4, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc90      	pop	{r4, r7}
 8003aa2:	4770      	bx	lr

08003aa4 <LL_GPIO_SetPinSpeed>:
{
 8003aa4:	b490      	push	{r4, r7}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	0e1b      	lsrs	r3, r3, #24
 8003ab8:	4413      	add	r3, r2
 8003aba:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8003abc:	6822      	ldr	r2, [r4, #0]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	613b      	str	r3, [r7, #16]
  return result;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	401a      	ands	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa93 f3a3 	rbit	r3, r3
 8003ae8:	61bb      	str	r3, [r7, #24]
  return result;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	4313      	orrs	r3, r2
 8003afc:	6023      	str	r3, [r4, #0]
}
 8003afe:	bf00      	nop
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc90      	pop	{r4, r7}
 8003b06:	4770      	bx	lr

08003b08 <LL_GPIO_SetPinOutputType>:
{
 8003b08:	b490      	push	{r4, r7}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0e1b      	lsrs	r3, r3, #24
 8003b1c:	4413      	add	r3, r2
 8003b1e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	613b      	str	r3, [r7, #16]
  return result;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	2104      	movs	r1, #4
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	401a      	ands	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	61bb      	str	r3, [r7, #24]
  return result;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	6023      	str	r3, [r4, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc90      	pop	{r4, r7}
 8003b6a:	4770      	bx	lr

08003b6c <LL_GPIO_SetPinPull>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	43db      	mvns	r3, r3
 8003b82:	401a      	ands	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	613b      	str	r3, [r7, #16]
  return result;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	fab3 f383 	clz	r3, r3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	408b      	lsls	r3, r1
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	60da      	str	r2, [r3, #12]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	60fb      	str	r3, [r7, #12]
  return result;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8003bda:	e040      	b.n	8003c5e <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	409a      	lsls	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d036      	beq.n	8003c58 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2b07      	cmp	r3, #7
 8003bee:	d806      	bhi.n	8003bfe <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003bf0:	f240 1201 	movw	r2, #257	; 0x101
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e008      	b.n	8003c10 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3b08      	subs	r3, #8
 8003c02:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c0e:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	461a      	mov	r2, r3
 8003c16:	69b9      	ldr	r1, [r7, #24]
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff11 	bl	8003a40 <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	461a      	mov	r2, r3
 8003c24:	69b9      	ldr	r1, [r7, #24]
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffa0 	bl	8003b6c <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d003      	beq.n	8003c3c <LL_GPIO_Init+0x8c>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b09      	cmp	r3, #9
 8003c3a:	d10d      	bne.n	8003c58 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	461a      	mov	r2, r3
 8003c42:	69b9      	ldr	r1, [r7, #24]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff2d 	bl	8003aa4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	69b9      	ldr	r1, [r7, #24]
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ff58 	bl	8003b08 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1b8      	bne.n	8003bdc <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <LL_I2C_Enable>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	601a      	str	r2, [r3, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <LL_I2C_Disable>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0201 	bic.w	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	601a      	str	r2, [r3, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <LL_I2C_SetOwnAddress1>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cc4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
	...

08003ce0 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8003ce0:	b490      	push	{r4, r7}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8003cee:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8003cf0:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4a3f      	ldr	r2, [pc, #252]	; (8003df4 <LL_I2C_ConfigSpeed+0x114>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d04:	ea44 0203 	orr.w	r2, r4, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4938      	ldr	r1, [pc, #224]	; (8003df8 <LL_I2C_ConfigSpeed+0x118>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d801      	bhi.n	8003d20 <LL_I2C_ConfigSpeed+0x40>
 8003d1c:	1c63      	adds	r3, r4, #1
 8003d1e:	e008      	b.n	8003d32 <LL_I2C_ConfigSpeed+0x52>
 8003d20:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003d24:	fb03 f304 	mul.w	r3, r3, r4
 8003d28:	4934      	ldr	r1, [pc, #208]	; (8003dfc <LL_I2C_ConfigSpeed+0x11c>)
 8003d2a:	fba1 1303 	umull	r1, r3, r1, r3
 8003d2e:	099b      	lsrs	r3, r3, #6
 8003d30:	3301      	adds	r3, #1
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <LL_I2C_ConfigSpeed+0x118>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d939      	bls.n	8003db4 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d117      	bne.n	8003d76 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d6e:	e01d      	b.n	8003dac <LL_I2C_ConfigSpeed+0xcc>
 8003d70:	f248 0301 	movw	r3, #32769	; 0x8001
 8003d74:	e01a      	b.n	8003dac <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009a      	lsls	r2, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009a      	lsls	r2, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da6:	e001      	b.n	8003dac <LL_I2C_ConfigSpeed+0xcc>
 8003da8:	f248 0301 	movw	r3, #32769	; 0x8001
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	ea43 0402 	orr.w	r4, r3, r2
 8003db2:	e010      	b.n	8003dd6 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d905      	bls.n	8003dd2 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	e000      	b.n	8003dd4 <LL_I2C_ConfigSpeed+0xf4>
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8003dde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003de2:	ea44 0203 	orr.w	r2, r4, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	61da      	str	r2, [r3, #28]
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc90      	pop	{r4, r7}
 8003df2:	4770      	bx	lr
 8003df4:	431bde83 	.word	0x431bde83
 8003df8:	000186a0 	.word	0x000186a0
 8003dfc:	10624dd3 	.word	0x10624dd3

08003e00 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 021a 	bic.w	r2, r3, #26
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	601a      	str	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ff1d 	bl	8003c92 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003e58:	f107 0308 	add.w	r3, r7, #8
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f87b 	bl	8003f58 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003e62:	6939      	ldr	r1, [r7, #16]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ff37 	bl	8003ce0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68d9      	ldr	r1, [r3, #12]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff17 	bl	8003cb0 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ffb9 	bl	8003e00 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fef0 	bl	8003c74 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ffc2 	bl	8003e24 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <LL_RCC_GetSysClkSource>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <LL_RCC_GetSysClkSource+0x14>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	40021000 	.word	0x40021000

08003ec4 <LL_RCC_GetAHBPrescaler>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <LL_RCC_GetAHBPrescaler+0x14>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	40021000 	.word	0x40021000

08003edc <LL_RCC_GetAPB1Prescaler>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <LL_RCC_GetAPB2Prescaler>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <LL_RCC_GetAPB2Prescaler+0x14>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	40021000 	.word	0x40021000

08003f0c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  register uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  register uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <LL_RCC_PLL_GetMainSource+0x14>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	40021000 	.word	0x40021000

08003f24 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	40021000 	.word	0x40021000

08003f3c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <LL_RCC_PLL_GetPrediv+0x18>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c5b      	lsrs	r3, r3, #17
 8003f46:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000

08003f58 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003f60:	f000 f820 	bl	8003fa4 <RCC_GetSystemClockFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f83a 	bl	8003fe8 <RCC_GetHCLKClockFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f848 	bl	8004014 <RCC_GetPCLK1ClockFreq>
 8003f84:	4602      	mov	r2, r0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f854 	bl	800403c <RCC_GetPCLK2ClockFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003fae:	f7ff ff7d 	bl	8003eac <LL_RCC_GetSysClkSource>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d006      	beq.n	8003fc6 <RCC_GetSystemClockFreq+0x22>
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d007      	beq.n	8003fcc <RCC_GetSystemClockFreq+0x28>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003fc0:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <RCC_GetSystemClockFreq+0x40>)
 8003fc2:	607b      	str	r3, [r7, #4]
      break;
 8003fc4:	e009      	b.n	8003fda <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <RCC_GetSystemClockFreq+0x40>)
 8003fc8:	607b      	str	r3, [r7, #4]
      break;
 8003fca:	e006      	b.n	8003fda <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003fcc:	f000 f84a 	bl	8004064 <RCC_PLL_GetFreqDomain_SYS>
 8003fd0:	6078      	str	r0, [r7, #4]
      break;
 8003fd2:	e002      	b.n	8003fda <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <RCC_GetSystemClockFreq+0x40>)
 8003fd6:	607b      	str	r3, [r7, #4]
      break;
 8003fd8:	bf00      	nop
  }

  return frequency;
 8003fda:	687b      	ldr	r3, [r7, #4]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ff0:	f7ff ff68 	bl	8003ec4 <LL_RCC_GetAHBPrescaler>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <RCC_GetHCLKClockFreq+0x28>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	40d3      	lsrs	r3, r2
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	080059c0 	.word	0x080059c0

08004014 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800401c:	f7ff ff5e 	bl	8003edc <LL_RCC_GetAPB1Prescaler>
 8004020:	4603      	mov	r3, r0
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <RCC_GetPCLK1ClockFreq+0x24>)
 8004026:	5cd3      	ldrb	r3, [r2, r3]
 8004028:	461a      	mov	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	40d3      	lsrs	r3, r2
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	080059d0 	.word	0x080059d0

0800403c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004044:	f7ff ff56 	bl	8003ef4 <LL_RCC_GetAPB2Prescaler>
 8004048:	4603      	mov	r3, r0
 800404a:	0adb      	lsrs	r3, r3, #11
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <RCC_GetPCLK2ClockFreq+0x24>)
 800404e:	5cd3      	ldrb	r3, [r2, r3]
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	40d3      	lsrs	r3, r2
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	080059d0 	.word	0x080059d0

08004064 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	2300      	movs	r3, #0
 8004070:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004072:	f7ff ff4b 	bl	8003f0c <LL_RCC_PLL_GetMainSource>
 8004076:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004082:	d003      	beq.n	800408c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8004084:	e00b      	b.n	800409e <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8004088:	607b      	str	r3, [r7, #4]
      break;
 800408a:	e00b      	b.n	80040a4 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800408c:	f7ff ff56 	bl	8003f3c <LL_RCC_PLL_GetPrediv>
 8004090:	4603      	mov	r3, r0
 8004092:	3301      	adds	r3, #1
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	607b      	str	r3, [r7, #4]
      break;
 800409c:	e002      	b.n	80040a4 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 80040a0:	607b      	str	r3, [r7, #4]
      break;
 80040a2:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80040a4:	f7ff ff3e 	bl	8003f24 <LL_RCC_PLL_GetMultiplicator>
 80040a8:	4603      	mov	r3, r0
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	3302      	adds	r3, #2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	003d0900 	.word	0x003d0900
 80040c0:	007a1200 	.word	0x007a1200

080040c4 <LL_TIM_SetPrescaler>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <LL_TIM_SetAutoReload>:
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <LL_TIM_SetRepetitionCounter>:
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <LL_TIM_OC_SetCompareCH1>:
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <LL_TIM_OC_SetCompareCH2>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <LL_TIM_OC_SetCompareCH3>:
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <LL_TIM_OC_SetCompareCH4>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f043 0201 	orr.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	615a      	str	r2, [r3, #20]
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a27      	ldr	r2, [pc, #156]	; (8004248 <LL_TIM_Init+0xb0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <LL_TIM_Init+0x30>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d007      	beq.n	80041c8 <LL_TIM_Init+0x30>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a24      	ldr	r2, [pc, #144]	; (800424c <LL_TIM_Init+0xb4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <LL_TIM_Init+0x30>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a23      	ldr	r2, [pc, #140]	; (8004250 <LL_TIM_Init+0xb8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d106      	bne.n	80041d6 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <LL_TIM_Init+0xb0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <LL_TIM_Init+0x5e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e4:	d007      	beq.n	80041f6 <LL_TIM_Init+0x5e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <LL_TIM_Init+0xb4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <LL_TIM_Init+0x5e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a17      	ldr	r2, [pc, #92]	; (8004250 <LL_TIM_Init+0xb8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d106      	bne.n	8004204 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff64 	bl	80040de <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff ff51 	bl	80040c4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <LL_TIM_Init+0xb0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d105      	bne.n	8004236 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	7c1b      	ldrb	r3, [r3, #16]
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff ff61 	bl	80040f8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ff9f 	bl	800417a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	40000800 	.word	0x40000800

08004254 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b10      	cmp	r3, #16
 8004268:	d012      	beq.n	8004290 <LL_TIM_OC_Init+0x3c>
 800426a:	2b10      	cmp	r3, #16
 800426c:	d802      	bhi.n	8004274 <LL_TIM_OC_Init+0x20>
 800426e:	2b01      	cmp	r3, #1
 8004270:	d007      	beq.n	8004282 <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004272:	e022      	b.n	80042ba <LL_TIM_OC_Init+0x66>
  switch (Channel)
 8004274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004278:	d011      	beq.n	800429e <LL_TIM_OC_Init+0x4a>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427e:	d015      	beq.n	80042ac <LL_TIM_OC_Init+0x58>
      break;
 8004280:	e01b      	b.n	80042ba <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f865 	bl	8004354 <OC1Config>
 800428a:	4603      	mov	r3, r0
 800428c:	75fb      	strb	r3, [r7, #23]
      break;
 800428e:	e014      	b.n	80042ba <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8c4 	bl	8004420 <OC2Config>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]
      break;
 800429c:	e00d      	b.n	80042ba <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f927 	bl	80044f4 <OC3Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	75fb      	strb	r3, [r7, #23]
      break;
 80042aa:	e006      	b.n	80042ba <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f98a 	bl	80045c8 <OC4Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]
      break;
 80042b8:	bf00      	nop
  }

  return result;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	7b12      	ldrb	r2, [r2, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	89d2      	ldrh	r2, [r2, #14]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 0202 	bic.w	r2, r3, #2
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0201 	bic.w	r2, r3, #1
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a1a      	ldr	r2, [pc, #104]	; (800441c <OC1Config+0xc8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d11e      	bne.n	80043f4 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f023 0208 	bic.w	r2, r3, #8
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 0204 	bic.w	r2, r3, #4
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fe83 	bl	8004112 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40012c00 	.word	0x40012c00

08004420 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f023 0210 	bic.w	r2, r3, #16
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0220 	bic.w	r2, r3, #32
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0210 	bic.w	r2, r3, #16
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <OC2Config+0xd0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d11f      	bne.n	80044c8 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	019b      	lsls	r3, r3, #6
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	019b      	lsls	r3, r3, #6
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4619      	mov	r1, r3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff fe26 	bl	800412c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40012c00 	.word	0x40012c00

080044f4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <OC3Config+0xd0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d11f      	bne.n	800459a <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	029b      	lsls	r3, r3, #10
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	015b      	lsls	r3, r3, #5
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fdca 	bl	8004146 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40012c00 	.word	0x40012c00

080045c8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	031b      	lsls	r3, r3, #12
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	031b      	lsls	r3, r3, #12
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a0f      	ldr	r2, [pc, #60]	; (8004668 <OC4Config+0xa0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d107      	bne.n	8004640 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	019b      	lsls	r3, r3, #6
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fd84 	bl	8004160 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40012c00 	.word	0x40012c00

0800466c <LL_USART_IsEnabled>:
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <LL_USART_SetStopBitsLength>:
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	611a      	str	r2, [r3, #16]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <LL_USART_SetHWFlowCtrl>:
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	615a      	str	r2, [r3, #20]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr
	...

080046dc <LL_USART_SetBaudRate>:
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009a      	lsls	r2, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	4a25      	ldr	r2, [pc, #148]	; (8004794 <LL_USART_SetBaudRate+0xb8>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	b29b      	uxth	r3, r3
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	b299      	uxth	r1, r3
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009a      	lsls	r2, r3, #2
 8004714:	441a      	add	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	fbb2 f2f3 	udiv	r2, r2, r3
 800471e:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <LL_USART_SetBaudRate+0xb8>)
 8004720:	fba3 0302 	umull	r0, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2064      	movs	r0, #100	; 0x64
 8004728:	fb00 f303 	mul.w	r3, r0, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	3332      	adds	r3, #50	; 0x32
 8004732:	4a18      	ldr	r2, [pc, #96]	; (8004794 <LL_USART_SetBaudRate+0xb8>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	b29b      	uxth	r3, r3
 800473c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004740:	b29b      	uxth	r3, r3
 8004742:	440b      	add	r3, r1
 8004744:	b299      	uxth	r1, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009a      	lsls	r2, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	fbb2 f2f3 	udiv	r2, r2, r3
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <LL_USART_SetBaudRate+0xb8>)
 800475c:	fba3 0302 	umull	r0, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	2064      	movs	r0, #100	; 0x64
 8004764:	fb00 f303 	mul.w	r3, r0, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	3332      	adds	r3, #50	; 0x32
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <LL_USART_SetBaudRate+0xb8>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	b29b      	uxth	r3, r3
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	b29b      	uxth	r3, r3
 800477e:	440b      	add	r3, r1
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	609a      	str	r2, [r3, #8]
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff ff5e 	bl	800466c <LL_USART_IsEnabled>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d145      	bne.n	8004842 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047be:	f023 030c 	bic.w	r3, r3, #12
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	6851      	ldr	r1, [r2, #4]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68d2      	ldr	r2, [r2, #12]
 80047ca:	4311      	orrs	r1, r2
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	6912      	ldr	r2, [r2, #16]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4619      	mov	r1, r3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ff57 	bl	8004692 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ff63 	bl	80046b6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fbaf 	bl	8003f58 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <LL_USART_Init+0xb4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d102      	bne.n	8004808 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e00c      	b.n	8004822 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a11      	ldr	r2, [pc, #68]	; (8004850 <LL_USART_Init+0xb8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d102      	bne.n	8004816 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e005      	b.n	8004822 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <LL_USART_Init+0xbc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d101      	bne.n	8004822 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004830:	2300      	movs	r3, #0
 8004832:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	69b9      	ldr	r1, [r7, #24]
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ff4d 	bl	80046dc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004842:	7ffb      	ldrb	r3, [r7, #31]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40013800 	.word	0x40013800
 8004850:	40004400 	.word	0x40004400
 8004854:	40004800 	.word	0x40004800

08004858 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	4a07      	ldr	r2, [pc, #28]	; (8004888 <LL_InitTick+0x30>)
 800486c:	3b01      	subs	r3, #1
 800486e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <LL_InitTick+0x30>)
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <LL_InitTick+0x30>)
 8004878:	2205      	movs	r2, #5
 800487a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	e000e010 	.word	0xe000e010

0800488c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ffdd 	bl	8004858 <LL_InitTick>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80048b0:	4a03      	ldr	r2, [pc, #12]	; (80048c0 <LL_SetSystemCoreClock+0x18>)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	20000014 	.word	0x20000014

080048c4 <__errno>:
 80048c4:	4b01      	ldr	r3, [pc, #4]	; (80048cc <__errno+0x8>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000018 	.word	0x20000018

080048d0 <__libc_init_array>:
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	2500      	movs	r5, #0
 80048d4:	4e0c      	ldr	r6, [pc, #48]	; (8004908 <__libc_init_array+0x38>)
 80048d6:	4c0d      	ldr	r4, [pc, #52]	; (800490c <__libc_init_array+0x3c>)
 80048d8:	1ba4      	subs	r4, r4, r6
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	42a5      	cmp	r5, r4
 80048de:	d109      	bne.n	80048f4 <__libc_init_array+0x24>
 80048e0:	f001 f810 	bl	8005904 <_init>
 80048e4:	2500      	movs	r5, #0
 80048e6:	4e0a      	ldr	r6, [pc, #40]	; (8004910 <__libc_init_array+0x40>)
 80048e8:	4c0a      	ldr	r4, [pc, #40]	; (8004914 <__libc_init_array+0x44>)
 80048ea:	1ba4      	subs	r4, r4, r6
 80048ec:	10a4      	asrs	r4, r4, #2
 80048ee:	42a5      	cmp	r5, r4
 80048f0:	d105      	bne.n	80048fe <__libc_init_array+0x2e>
 80048f2:	bd70      	pop	{r4, r5, r6, pc}
 80048f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f8:	4798      	blx	r3
 80048fa:	3501      	adds	r5, #1
 80048fc:	e7ee      	b.n	80048dc <__libc_init_array+0xc>
 80048fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004902:	4798      	blx	r3
 8004904:	3501      	adds	r5, #1
 8004906:	e7f2      	b.n	80048ee <__libc_init_array+0x1e>
 8004908:	08005a70 	.word	0x08005a70
 800490c:	08005a70 	.word	0x08005a70
 8004910:	08005a70 	.word	0x08005a70
 8004914:	08005a74 	.word	0x08005a74

08004918 <memset>:
 8004918:	4603      	mov	r3, r0
 800491a:	4402      	add	r2, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	d100      	bne.n	8004922 <memset+0xa>
 8004920:	4770      	bx	lr
 8004922:	f803 1b01 	strb.w	r1, [r3], #1
 8004926:	e7f9      	b.n	800491c <memset+0x4>

08004928 <iprintf>:
 8004928:	b40f      	push	{r0, r1, r2, r3}
 800492a:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <iprintf+0x2c>)
 800492c:	b513      	push	{r0, r1, r4, lr}
 800492e:	681c      	ldr	r4, [r3, #0]
 8004930:	b124      	cbz	r4, 800493c <iprintf+0x14>
 8004932:	69a3      	ldr	r3, [r4, #24]
 8004934:	b913      	cbnz	r3, 800493c <iprintf+0x14>
 8004936:	4620      	mov	r0, r4
 8004938:	f000 f9c0 	bl	8004cbc <__sinit>
 800493c:	ab05      	add	r3, sp, #20
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	68a1      	ldr	r1, [r4, #8]
 8004942:	4620      	mov	r0, r4
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	f000 fb7d 	bl	8005044 <_vfiprintf_r>
 800494a:	b002      	add	sp, #8
 800494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004950:	b004      	add	sp, #16
 8004952:	4770      	bx	lr
 8004954:	20000018 	.word	0x20000018

08004958 <putchar>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4b08      	ldr	r3, [pc, #32]	; (800497c <putchar+0x24>)
 800495c:	4605      	mov	r5, r0
 800495e:	681c      	ldr	r4, [r3, #0]
 8004960:	b124      	cbz	r4, 800496c <putchar+0x14>
 8004962:	69a3      	ldr	r3, [r4, #24]
 8004964:	b913      	cbnz	r3, 800496c <putchar+0x14>
 8004966:	4620      	mov	r0, r4
 8004968:	f000 f9a8 	bl	8004cbc <__sinit>
 800496c:	68a2      	ldr	r2, [r4, #8]
 800496e:	4629      	mov	r1, r5
 8004970:	4620      	mov	r0, r4
 8004972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004976:	f000 be03 	b.w	8005580 <_putc_r>
 800497a:	bf00      	nop
 800497c:	20000018 	.word	0x20000018

08004980 <setvbuf>:
 8004980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004984:	461d      	mov	r5, r3
 8004986:	4b51      	ldr	r3, [pc, #324]	; (8004acc <setvbuf+0x14c>)
 8004988:	4604      	mov	r4, r0
 800498a:	681e      	ldr	r6, [r3, #0]
 800498c:	460f      	mov	r7, r1
 800498e:	4690      	mov	r8, r2
 8004990:	b126      	cbz	r6, 800499c <setvbuf+0x1c>
 8004992:	69b3      	ldr	r3, [r6, #24]
 8004994:	b913      	cbnz	r3, 800499c <setvbuf+0x1c>
 8004996:	4630      	mov	r0, r6
 8004998:	f000 f990 	bl	8004cbc <__sinit>
 800499c:	4b4c      	ldr	r3, [pc, #304]	; (8004ad0 <setvbuf+0x150>)
 800499e:	429c      	cmp	r4, r3
 80049a0:	d152      	bne.n	8004a48 <setvbuf+0xc8>
 80049a2:	6874      	ldr	r4, [r6, #4]
 80049a4:	f1b8 0f02 	cmp.w	r8, #2
 80049a8:	d006      	beq.n	80049b8 <setvbuf+0x38>
 80049aa:	f1b8 0f01 	cmp.w	r8, #1
 80049ae:	f200 8089 	bhi.w	8004ac4 <setvbuf+0x144>
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	f2c0 8086 	blt.w	8004ac4 <setvbuf+0x144>
 80049b8:	4621      	mov	r1, r4
 80049ba:	4630      	mov	r0, r6
 80049bc:	f000 f914 	bl	8004be8 <_fflush_r>
 80049c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049c2:	b141      	cbz	r1, 80049d6 <setvbuf+0x56>
 80049c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049c8:	4299      	cmp	r1, r3
 80049ca:	d002      	beq.n	80049d2 <setvbuf+0x52>
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 fa6b 	bl	8004ea8 <_free_r>
 80049d2:	2300      	movs	r3, #0
 80049d4:	6363      	str	r3, [r4, #52]	; 0x34
 80049d6:	2300      	movs	r3, #0
 80049d8:	61a3      	str	r3, [r4, #24]
 80049da:	6063      	str	r3, [r4, #4]
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	061b      	lsls	r3, r3, #24
 80049e0:	d503      	bpl.n	80049ea <setvbuf+0x6a>
 80049e2:	6921      	ldr	r1, [r4, #16]
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 fa5f 	bl	8004ea8 <_free_r>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f1b8 0f02 	cmp.w	r8, #2
 80049f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80049f4:	f023 0303 	bic.w	r3, r3, #3
 80049f8:	81a3      	strh	r3, [r4, #12]
 80049fa:	d05d      	beq.n	8004ab8 <setvbuf+0x138>
 80049fc:	ab01      	add	r3, sp, #4
 80049fe:	466a      	mov	r2, sp
 8004a00:	4621      	mov	r1, r4
 8004a02:	4630      	mov	r0, r6
 8004a04:	f000 f9e4 	bl	8004dd0 <__swhatbuf_r>
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	4318      	orrs	r0, r3
 8004a0c:	81a0      	strh	r0, [r4, #12]
 8004a0e:	bb2d      	cbnz	r5, 8004a5c <setvbuf+0xdc>
 8004a10:	9d00      	ldr	r5, [sp, #0]
 8004a12:	4628      	mov	r0, r5
 8004a14:	f000 fa40 	bl	8004e98 <malloc>
 8004a18:	4607      	mov	r7, r0
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d14e      	bne.n	8004abc <setvbuf+0x13c>
 8004a1e:	f8dd 9000 	ldr.w	r9, [sp]
 8004a22:	45a9      	cmp	r9, r5
 8004a24:	d13c      	bne.n	8004aa0 <setvbuf+0x120>
 8004a26:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	81a3      	strh	r3, [r4, #12]
 8004a32:	2300      	movs	r3, #0
 8004a34:	60a3      	str	r3, [r4, #8]
 8004a36:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a3a:	6023      	str	r3, [r4, #0]
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	2301      	movs	r3, #1
 8004a40:	6163      	str	r3, [r4, #20]
 8004a42:	b003      	add	sp, #12
 8004a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a48:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <setvbuf+0x154>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d101      	bne.n	8004a52 <setvbuf+0xd2>
 8004a4e:	68b4      	ldr	r4, [r6, #8]
 8004a50:	e7a8      	b.n	80049a4 <setvbuf+0x24>
 8004a52:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <setvbuf+0x158>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	bf08      	it	eq
 8004a58:	68f4      	ldreq	r4, [r6, #12]
 8004a5a:	e7a3      	b.n	80049a4 <setvbuf+0x24>
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d0d8      	beq.n	8004a12 <setvbuf+0x92>
 8004a60:	69b3      	ldr	r3, [r6, #24]
 8004a62:	b913      	cbnz	r3, 8004a6a <setvbuf+0xea>
 8004a64:	4630      	mov	r0, r6
 8004a66:	f000 f929 	bl	8004cbc <__sinit>
 8004a6a:	f1b8 0f01 	cmp.w	r8, #1
 8004a6e:	bf08      	it	eq
 8004a70:	89a3      	ldrheq	r3, [r4, #12]
 8004a72:	6027      	str	r7, [r4, #0]
 8004a74:	bf04      	itt	eq
 8004a76:	f043 0301 	orreq.w	r3, r3, #1
 8004a7a:	81a3      	strheq	r3, [r4, #12]
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004a82:	f013 0008 	ands.w	r0, r3, #8
 8004a86:	d01b      	beq.n	8004ac0 <setvbuf+0x140>
 8004a88:	f013 0001 	ands.w	r0, r3, #1
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	bf1f      	itttt	ne
 8004a92:	426d      	negne	r5, r5
 8004a94:	60a3      	strne	r3, [r4, #8]
 8004a96:	61a5      	strne	r5, [r4, #24]
 8004a98:	4618      	movne	r0, r3
 8004a9a:	bf08      	it	eq
 8004a9c:	60a5      	streq	r5, [r4, #8]
 8004a9e:	e7d0      	b.n	8004a42 <setvbuf+0xc2>
 8004aa0:	4648      	mov	r0, r9
 8004aa2:	f000 f9f9 	bl	8004e98 <malloc>
 8004aa6:	4607      	mov	r7, r0
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d0bc      	beq.n	8004a26 <setvbuf+0xa6>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	464d      	mov	r5, r9
 8004ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	e7d3      	b.n	8004a60 <setvbuf+0xe0>
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e7b6      	b.n	8004a2a <setvbuf+0xaa>
 8004abc:	46a9      	mov	r9, r5
 8004abe:	e7f5      	b.n	8004aac <setvbuf+0x12c>
 8004ac0:	60a0      	str	r0, [r4, #8]
 8004ac2:	e7be      	b.n	8004a42 <setvbuf+0xc2>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac8:	e7bb      	b.n	8004a42 <setvbuf+0xc2>
 8004aca:	bf00      	nop
 8004acc:	20000018 	.word	0x20000018
 8004ad0:	080059fc 	.word	0x080059fc
 8004ad4:	08005a1c 	.word	0x08005a1c
 8004ad8:	080059dc 	.word	0x080059dc

08004adc <__sflush_r>:
 8004adc:	898a      	ldrh	r2, [r1, #12]
 8004ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	0710      	lsls	r0, r2, #28
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	d458      	bmi.n	8004b9c <__sflush_r+0xc0>
 8004aea:	684b      	ldr	r3, [r1, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	dc05      	bgt.n	8004afc <__sflush_r+0x20>
 8004af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	dc02      	bgt.n	8004afc <__sflush_r+0x20>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004afe:	2e00      	cmp	r6, #0
 8004b00:	d0f9      	beq.n	8004af6 <__sflush_r+0x1a>
 8004b02:	2300      	movs	r3, #0
 8004b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b08:	682f      	ldr	r7, [r5, #0]
 8004b0a:	6a21      	ldr	r1, [r4, #32]
 8004b0c:	602b      	str	r3, [r5, #0]
 8004b0e:	d032      	beq.n	8004b76 <__sflush_r+0x9a>
 8004b10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	075a      	lsls	r2, r3, #29
 8004b16:	d505      	bpl.n	8004b24 <__sflush_r+0x48>
 8004b18:	6863      	ldr	r3, [r4, #4]
 8004b1a:	1ac0      	subs	r0, r0, r3
 8004b1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b1e:	b10b      	cbz	r3, 8004b24 <__sflush_r+0x48>
 8004b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b22:	1ac0      	subs	r0, r0, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	4602      	mov	r2, r0
 8004b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b2a:	6a21      	ldr	r1, [r4, #32]
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b0      	blx	r6
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	d106      	bne.n	8004b44 <__sflush_r+0x68>
 8004b36:	6829      	ldr	r1, [r5, #0]
 8004b38:	291d      	cmp	r1, #29
 8004b3a:	d848      	bhi.n	8004bce <__sflush_r+0xf2>
 8004b3c:	4a29      	ldr	r2, [pc, #164]	; (8004be4 <__sflush_r+0x108>)
 8004b3e:	40ca      	lsrs	r2, r1
 8004b40:	07d6      	lsls	r6, r2, #31
 8004b42:	d544      	bpl.n	8004bce <__sflush_r+0xf2>
 8004b44:	2200      	movs	r2, #0
 8004b46:	6062      	str	r2, [r4, #4]
 8004b48:	6922      	ldr	r2, [r4, #16]
 8004b4a:	04d9      	lsls	r1, r3, #19
 8004b4c:	6022      	str	r2, [r4, #0]
 8004b4e:	d504      	bpl.n	8004b5a <__sflush_r+0x7e>
 8004b50:	1c42      	adds	r2, r0, #1
 8004b52:	d101      	bne.n	8004b58 <__sflush_r+0x7c>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	b903      	cbnz	r3, 8004b5a <__sflush_r+0x7e>
 8004b58:	6560      	str	r0, [r4, #84]	; 0x54
 8004b5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b5c:	602f      	str	r7, [r5, #0]
 8004b5e:	2900      	cmp	r1, #0
 8004b60:	d0c9      	beq.n	8004af6 <__sflush_r+0x1a>
 8004b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b66:	4299      	cmp	r1, r3
 8004b68:	d002      	beq.n	8004b70 <__sflush_r+0x94>
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 f99c 	bl	8004ea8 <_free_r>
 8004b70:	2000      	movs	r0, #0
 8004b72:	6360      	str	r0, [r4, #52]	; 0x34
 8004b74:	e7c0      	b.n	8004af8 <__sflush_r+0x1c>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b0      	blx	r6
 8004b7c:	1c41      	adds	r1, r0, #1
 8004b7e:	d1c8      	bne.n	8004b12 <__sflush_r+0x36>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0c5      	beq.n	8004b12 <__sflush_r+0x36>
 8004b86:	2b1d      	cmp	r3, #29
 8004b88:	d001      	beq.n	8004b8e <__sflush_r+0xb2>
 8004b8a:	2b16      	cmp	r3, #22
 8004b8c:	d101      	bne.n	8004b92 <__sflush_r+0xb6>
 8004b8e:	602f      	str	r7, [r5, #0]
 8004b90:	e7b1      	b.n	8004af6 <__sflush_r+0x1a>
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b98:	81a3      	strh	r3, [r4, #12]
 8004b9a:	e7ad      	b.n	8004af8 <__sflush_r+0x1c>
 8004b9c:	690f      	ldr	r7, [r1, #16]
 8004b9e:	2f00      	cmp	r7, #0
 8004ba0:	d0a9      	beq.n	8004af6 <__sflush_r+0x1a>
 8004ba2:	0793      	lsls	r3, r2, #30
 8004ba4:	bf18      	it	ne
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	680e      	ldr	r6, [r1, #0]
 8004baa:	bf08      	it	eq
 8004bac:	694b      	ldreq	r3, [r1, #20]
 8004bae:	eba6 0807 	sub.w	r8, r6, r7
 8004bb2:	600f      	str	r7, [r1, #0]
 8004bb4:	608b      	str	r3, [r1, #8]
 8004bb6:	f1b8 0f00 	cmp.w	r8, #0
 8004bba:	dd9c      	ble.n	8004af6 <__sflush_r+0x1a>
 8004bbc:	4643      	mov	r3, r8
 8004bbe:	463a      	mov	r2, r7
 8004bc0:	6a21      	ldr	r1, [r4, #32]
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bc6:	47b0      	blx	r6
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	dc06      	bgt.n	8004bda <__sflush_r+0xfe>
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	e78e      	b.n	8004af8 <__sflush_r+0x1c>
 8004bda:	4407      	add	r7, r0
 8004bdc:	eba8 0800 	sub.w	r8, r8, r0
 8004be0:	e7e9      	b.n	8004bb6 <__sflush_r+0xda>
 8004be2:	bf00      	nop
 8004be4:	20400001 	.word	0x20400001

08004be8 <_fflush_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	690b      	ldr	r3, [r1, #16]
 8004bec:	4605      	mov	r5, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	b1db      	cbz	r3, 8004c2a <_fflush_r+0x42>
 8004bf2:	b118      	cbz	r0, 8004bfc <_fflush_r+0x14>
 8004bf4:	6983      	ldr	r3, [r0, #24]
 8004bf6:	b90b      	cbnz	r3, 8004bfc <_fflush_r+0x14>
 8004bf8:	f000 f860 	bl	8004cbc <__sinit>
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <_fflush_r+0x48>)
 8004bfe:	429c      	cmp	r4, r3
 8004c00:	d109      	bne.n	8004c16 <_fflush_r+0x2e>
 8004c02:	686c      	ldr	r4, [r5, #4]
 8004c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c08:	b17b      	cbz	r3, 8004c2a <_fflush_r+0x42>
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c12:	f7ff bf63 	b.w	8004adc <__sflush_r>
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <_fflush_r+0x4c>)
 8004c18:	429c      	cmp	r4, r3
 8004c1a:	d101      	bne.n	8004c20 <_fflush_r+0x38>
 8004c1c:	68ac      	ldr	r4, [r5, #8]
 8004c1e:	e7f1      	b.n	8004c04 <_fflush_r+0x1c>
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <_fflush_r+0x50>)
 8004c22:	429c      	cmp	r4, r3
 8004c24:	bf08      	it	eq
 8004c26:	68ec      	ldreq	r4, [r5, #12]
 8004c28:	e7ec      	b.n	8004c04 <_fflush_r+0x1c>
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	bd38      	pop	{r3, r4, r5, pc}
 8004c2e:	bf00      	nop
 8004c30:	080059fc 	.word	0x080059fc
 8004c34:	08005a1c 	.word	0x08005a1c
 8004c38:	080059dc 	.word	0x080059dc

08004c3c <std>:
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	4604      	mov	r4, r0
 8004c42:	e9c0 3300 	strd	r3, r3, [r0]
 8004c46:	6083      	str	r3, [r0, #8]
 8004c48:	8181      	strh	r1, [r0, #12]
 8004c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c4c:	81c2      	strh	r2, [r0, #14]
 8004c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c52:	6183      	str	r3, [r0, #24]
 8004c54:	4619      	mov	r1, r3
 8004c56:	2208      	movs	r2, #8
 8004c58:	305c      	adds	r0, #92	; 0x5c
 8004c5a:	f7ff fe5d 	bl	8004918 <memset>
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <std+0x38>)
 8004c60:	6224      	str	r4, [r4, #32]
 8004c62:	6263      	str	r3, [r4, #36]	; 0x24
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <std+0x3c>)
 8004c66:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <std+0x40>)
 8004c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <std+0x44>)
 8004c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c70:	bd10      	pop	{r4, pc}
 8004c72:	bf00      	nop
 8004c74:	0800560d 	.word	0x0800560d
 8004c78:	0800562f 	.word	0x0800562f
 8004c7c:	08005667 	.word	0x08005667
 8004c80:	0800568b 	.word	0x0800568b

08004c84 <_cleanup_r>:
 8004c84:	4901      	ldr	r1, [pc, #4]	; (8004c8c <_cleanup_r+0x8>)
 8004c86:	f000 b885 	b.w	8004d94 <_fwalk_reent>
 8004c8a:	bf00      	nop
 8004c8c:	08004be9 	.word	0x08004be9

08004c90 <__sfmoreglue>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	2568      	movs	r5, #104	; 0x68
 8004c94:	1e4a      	subs	r2, r1, #1
 8004c96:	4355      	muls	r5, r2
 8004c98:	460e      	mov	r6, r1
 8004c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c9e:	f000 f94f 	bl	8004f40 <_malloc_r>
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	b140      	cbz	r0, 8004cb8 <__sfmoreglue+0x28>
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8004cac:	300c      	adds	r0, #12
 8004cae:	60a0      	str	r0, [r4, #8]
 8004cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cb4:	f7ff fe30 	bl	8004918 <memset>
 8004cb8:	4620      	mov	r0, r4
 8004cba:	bd70      	pop	{r4, r5, r6, pc}

08004cbc <__sinit>:
 8004cbc:	6983      	ldr	r3, [r0, #24]
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	bb33      	cbnz	r3, 8004d12 <__sinit+0x56>
 8004cc4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004cc8:	6503      	str	r3, [r0, #80]	; 0x50
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <__sinit+0x58>)
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <__sinit+0x5c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6282      	str	r2, [r0, #40]	; 0x28
 8004cd2:	4298      	cmp	r0, r3
 8004cd4:	bf04      	itt	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	6183      	streq	r3, [r0, #24]
 8004cda:	f000 f81f 	bl	8004d1c <__sfp>
 8004cde:	6060      	str	r0, [r4, #4]
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 f81b 	bl	8004d1c <__sfp>
 8004ce6:	60a0      	str	r0, [r4, #8]
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 f817 	bl	8004d1c <__sfp>
 8004cee:	2200      	movs	r2, #0
 8004cf0:	60e0      	str	r0, [r4, #12]
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	6860      	ldr	r0, [r4, #4]
 8004cf6:	f7ff ffa1 	bl	8004c3c <std>
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2109      	movs	r1, #9
 8004cfe:	68a0      	ldr	r0, [r4, #8]
 8004d00:	f7ff ff9c 	bl	8004c3c <std>
 8004d04:	2202      	movs	r2, #2
 8004d06:	2112      	movs	r1, #18
 8004d08:	68e0      	ldr	r0, [r4, #12]
 8004d0a:	f7ff ff97 	bl	8004c3c <std>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61a3      	str	r3, [r4, #24]
 8004d12:	bd10      	pop	{r4, pc}
 8004d14:	080059d8 	.word	0x080059d8
 8004d18:	08004c85 	.word	0x08004c85

08004d1c <__sfp>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <__sfp+0x70>)
 8004d20:	4607      	mov	r7, r0
 8004d22:	681e      	ldr	r6, [r3, #0]
 8004d24:	69b3      	ldr	r3, [r6, #24]
 8004d26:	b913      	cbnz	r3, 8004d2e <__sfp+0x12>
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f7ff ffc7 	bl	8004cbc <__sinit>
 8004d2e:	3648      	adds	r6, #72	; 0x48
 8004d30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	d503      	bpl.n	8004d40 <__sfp+0x24>
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	b133      	cbz	r3, 8004d4a <__sfp+0x2e>
 8004d3c:	6836      	ldr	r6, [r6, #0]
 8004d3e:	e7f7      	b.n	8004d30 <__sfp+0x14>
 8004d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d44:	b16d      	cbz	r5, 8004d62 <__sfp+0x46>
 8004d46:	3468      	adds	r4, #104	; 0x68
 8004d48:	e7f4      	b.n	8004d34 <__sfp+0x18>
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f7ff ff9f 	bl	8004c90 <__sfmoreglue>
 8004d52:	6030      	str	r0, [r6, #0]
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d1f1      	bne.n	8004d3c <__sfp+0x20>
 8004d58:	230c      	movs	r3, #12
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <__sfp+0x74>)
 8004d64:	6665      	str	r5, [r4, #100]	; 0x64
 8004d66:	e9c4 5500 	strd	r5, r5, [r4]
 8004d6a:	60a5      	str	r5, [r4, #8]
 8004d6c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004d70:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004d74:	2208      	movs	r2, #8
 8004d76:	4629      	mov	r1, r5
 8004d78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d7c:	f7ff fdcc 	bl	8004918 <memset>
 8004d80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d88:	e7e9      	b.n	8004d5e <__sfp+0x42>
 8004d8a:	bf00      	nop
 8004d8c:	080059d8 	.word	0x080059d8
 8004d90:	ffff0001 	.word	0xffff0001

08004d94 <_fwalk_reent>:
 8004d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d98:	4680      	mov	r8, r0
 8004d9a:	4689      	mov	r9, r1
 8004d9c:	2600      	movs	r6, #0
 8004d9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004da2:	b914      	cbnz	r4, 8004daa <_fwalk_reent+0x16>
 8004da4:	4630      	mov	r0, r6
 8004da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004daa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004dae:	3f01      	subs	r7, #1
 8004db0:	d501      	bpl.n	8004db6 <_fwalk_reent+0x22>
 8004db2:	6824      	ldr	r4, [r4, #0]
 8004db4:	e7f5      	b.n	8004da2 <_fwalk_reent+0xe>
 8004db6:	89ab      	ldrh	r3, [r5, #12]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d907      	bls.n	8004dcc <_fwalk_reent+0x38>
 8004dbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	d003      	beq.n	8004dcc <_fwalk_reent+0x38>
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	47c8      	blx	r9
 8004dca:	4306      	orrs	r6, r0
 8004dcc:	3568      	adds	r5, #104	; 0x68
 8004dce:	e7ee      	b.n	8004dae <_fwalk_reent+0x1a>

08004dd0 <__swhatbuf_r>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	460e      	mov	r6, r1
 8004dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd8:	b096      	sub	sp, #88	; 0x58
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	da07      	bge.n	8004df2 <__swhatbuf_r+0x22>
 8004de2:	2300      	movs	r3, #0
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	89b3      	ldrh	r3, [r6, #12]
 8004de8:	061a      	lsls	r2, r3, #24
 8004dea:	d410      	bmi.n	8004e0e <__swhatbuf_r+0x3e>
 8004dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df0:	e00e      	b.n	8004e10 <__swhatbuf_r+0x40>
 8004df2:	466a      	mov	r2, sp
 8004df4:	f000 fd30 	bl	8005858 <_fstat_r>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	dbf2      	blt.n	8004de2 <__swhatbuf_r+0x12>
 8004dfc:	9a01      	ldr	r2, [sp, #4]
 8004dfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e06:	425a      	negs	r2, r3
 8004e08:	415a      	adcs	r2, r3
 8004e0a:	602a      	str	r2, [r5, #0]
 8004e0c:	e7ee      	b.n	8004dec <__swhatbuf_r+0x1c>
 8004e0e:	2340      	movs	r3, #64	; 0x40
 8004e10:	2000      	movs	r0, #0
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	b016      	add	sp, #88	; 0x58
 8004e16:	bd70      	pop	{r4, r5, r6, pc}

08004e18 <__smakebuf_r>:
 8004e18:	898b      	ldrh	r3, [r1, #12]
 8004e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e1c:	079d      	lsls	r5, r3, #30
 8004e1e:	4606      	mov	r6, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	d507      	bpl.n	8004e34 <__smakebuf_r+0x1c>
 8004e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	6163      	str	r3, [r4, #20]
 8004e30:	b002      	add	sp, #8
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	ab01      	add	r3, sp, #4
 8004e36:	466a      	mov	r2, sp
 8004e38:	f7ff ffca 	bl	8004dd0 <__swhatbuf_r>
 8004e3c:	9900      	ldr	r1, [sp, #0]
 8004e3e:	4605      	mov	r5, r0
 8004e40:	4630      	mov	r0, r6
 8004e42:	f000 f87d 	bl	8004f40 <_malloc_r>
 8004e46:	b948      	cbnz	r0, 8004e5c <__smakebuf_r+0x44>
 8004e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e4c:	059a      	lsls	r2, r3, #22
 8004e4e:	d4ef      	bmi.n	8004e30 <__smakebuf_r+0x18>
 8004e50:	f023 0303 	bic.w	r3, r3, #3
 8004e54:	f043 0302 	orr.w	r3, r3, #2
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	e7e3      	b.n	8004e24 <__smakebuf_r+0xc>
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <__smakebuf_r+0x7c>)
 8004e5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	6020      	str	r0, [r4, #0]
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	9b00      	ldr	r3, [sp, #0]
 8004e6c:	6120      	str	r0, [r4, #16]
 8004e6e:	6163      	str	r3, [r4, #20]
 8004e70:	9b01      	ldr	r3, [sp, #4]
 8004e72:	b15b      	cbz	r3, 8004e8c <__smakebuf_r+0x74>
 8004e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f000 fcff 	bl	800587c <_isatty_r>
 8004e7e:	b128      	cbz	r0, 8004e8c <__smakebuf_r+0x74>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	431d      	orrs	r5, r3
 8004e90:	81a5      	strh	r5, [r4, #12]
 8004e92:	e7cd      	b.n	8004e30 <__smakebuf_r+0x18>
 8004e94:	08004c85 	.word	0x08004c85

08004e98 <malloc>:
 8004e98:	4b02      	ldr	r3, [pc, #8]	; (8004ea4 <malloc+0xc>)
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	f000 b84f 	b.w	8004f40 <_malloc_r>
 8004ea2:	bf00      	nop
 8004ea4:	20000018 	.word	0x20000018

08004ea8 <_free_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4605      	mov	r5, r0
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d043      	beq.n	8004f38 <_free_r+0x90>
 8004eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb4:	1f0c      	subs	r4, r1, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfb8      	it	lt
 8004eba:	18e4      	addlt	r4, r4, r3
 8004ebc:	f000 fd0e 	bl	80058dc <__malloc_lock>
 8004ec0:	4a1e      	ldr	r2, [pc, #120]	; (8004f3c <_free_r+0x94>)
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	b933      	cbnz	r3, 8004ed6 <_free_r+0x2e>
 8004ec8:	6063      	str	r3, [r4, #4]
 8004eca:	6014      	str	r4, [r2, #0]
 8004ecc:	4628      	mov	r0, r5
 8004ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ed2:	f000 bd04 	b.w	80058de <__malloc_unlock>
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	d90b      	bls.n	8004ef2 <_free_r+0x4a>
 8004eda:	6821      	ldr	r1, [r4, #0]
 8004edc:	1862      	adds	r2, r4, r1
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	bf01      	itttt	eq
 8004ee2:	681a      	ldreq	r2, [r3, #0]
 8004ee4:	685b      	ldreq	r3, [r3, #4]
 8004ee6:	1852      	addeq	r2, r2, r1
 8004ee8:	6022      	streq	r2, [r4, #0]
 8004eea:	6063      	str	r3, [r4, #4]
 8004eec:	6004      	str	r4, [r0, #0]
 8004eee:	e7ed      	b.n	8004ecc <_free_r+0x24>
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	b10a      	cbz	r2, 8004efa <_free_r+0x52>
 8004ef6:	42a2      	cmp	r2, r4
 8004ef8:	d9fa      	bls.n	8004ef0 <_free_r+0x48>
 8004efa:	6819      	ldr	r1, [r3, #0]
 8004efc:	1858      	adds	r0, r3, r1
 8004efe:	42a0      	cmp	r0, r4
 8004f00:	d10b      	bne.n	8004f1a <_free_r+0x72>
 8004f02:	6820      	ldr	r0, [r4, #0]
 8004f04:	4401      	add	r1, r0
 8004f06:	1858      	adds	r0, r3, r1
 8004f08:	4282      	cmp	r2, r0
 8004f0a:	6019      	str	r1, [r3, #0]
 8004f0c:	d1de      	bne.n	8004ecc <_free_r+0x24>
 8004f0e:	6810      	ldr	r0, [r2, #0]
 8004f10:	6852      	ldr	r2, [r2, #4]
 8004f12:	4401      	add	r1, r0
 8004f14:	6019      	str	r1, [r3, #0]
 8004f16:	605a      	str	r2, [r3, #4]
 8004f18:	e7d8      	b.n	8004ecc <_free_r+0x24>
 8004f1a:	d902      	bls.n	8004f22 <_free_r+0x7a>
 8004f1c:	230c      	movs	r3, #12
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	e7d4      	b.n	8004ecc <_free_r+0x24>
 8004f22:	6820      	ldr	r0, [r4, #0]
 8004f24:	1821      	adds	r1, r4, r0
 8004f26:	428a      	cmp	r2, r1
 8004f28:	bf01      	itttt	eq
 8004f2a:	6811      	ldreq	r1, [r2, #0]
 8004f2c:	6852      	ldreq	r2, [r2, #4]
 8004f2e:	1809      	addeq	r1, r1, r0
 8004f30:	6021      	streq	r1, [r4, #0]
 8004f32:	6062      	str	r2, [r4, #4]
 8004f34:	605c      	str	r4, [r3, #4]
 8004f36:	e7c9      	b.n	8004ecc <_free_r+0x24>
 8004f38:	bd38      	pop	{r3, r4, r5, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200000a8 	.word	0x200000a8

08004f40 <_malloc_r>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	1ccd      	adds	r5, r1, #3
 8004f44:	f025 0503 	bic.w	r5, r5, #3
 8004f48:	3508      	adds	r5, #8
 8004f4a:	2d0c      	cmp	r5, #12
 8004f4c:	bf38      	it	cc
 8004f4e:	250c      	movcc	r5, #12
 8004f50:	2d00      	cmp	r5, #0
 8004f52:	4606      	mov	r6, r0
 8004f54:	db01      	blt.n	8004f5a <_malloc_r+0x1a>
 8004f56:	42a9      	cmp	r1, r5
 8004f58:	d903      	bls.n	8004f62 <_malloc_r+0x22>
 8004f5a:	230c      	movs	r3, #12
 8004f5c:	6033      	str	r3, [r6, #0]
 8004f5e:	2000      	movs	r0, #0
 8004f60:	bd70      	pop	{r4, r5, r6, pc}
 8004f62:	f000 fcbb 	bl	80058dc <__malloc_lock>
 8004f66:	4a21      	ldr	r2, [pc, #132]	; (8004fec <_malloc_r+0xac>)
 8004f68:	6814      	ldr	r4, [r2, #0]
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	b991      	cbnz	r1, 8004f94 <_malloc_r+0x54>
 8004f6e:	4c20      	ldr	r4, [pc, #128]	; (8004ff0 <_malloc_r+0xb0>)
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	b91b      	cbnz	r3, 8004f7c <_malloc_r+0x3c>
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 fb39 	bl	80055ec <_sbrk_r>
 8004f7a:	6020      	str	r0, [r4, #0]
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f000 fb34 	bl	80055ec <_sbrk_r>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d124      	bne.n	8004fd2 <_malloc_r+0x92>
 8004f88:	230c      	movs	r3, #12
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	6033      	str	r3, [r6, #0]
 8004f8e:	f000 fca6 	bl	80058de <__malloc_unlock>
 8004f92:	e7e4      	b.n	8004f5e <_malloc_r+0x1e>
 8004f94:	680b      	ldr	r3, [r1, #0]
 8004f96:	1b5b      	subs	r3, r3, r5
 8004f98:	d418      	bmi.n	8004fcc <_malloc_r+0x8c>
 8004f9a:	2b0b      	cmp	r3, #11
 8004f9c:	d90f      	bls.n	8004fbe <_malloc_r+0x7e>
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	18cc      	adds	r4, r1, r3
 8004fa2:	50cd      	str	r5, [r1, r3]
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f000 fc9a 	bl	80058de <__malloc_unlock>
 8004faa:	f104 000b 	add.w	r0, r4, #11
 8004fae:	1d23      	adds	r3, r4, #4
 8004fb0:	f020 0007 	bic.w	r0, r0, #7
 8004fb4:	1ac3      	subs	r3, r0, r3
 8004fb6:	d0d3      	beq.n	8004f60 <_malloc_r+0x20>
 8004fb8:	425a      	negs	r2, r3
 8004fba:	50e2      	str	r2, [r4, r3]
 8004fbc:	e7d0      	b.n	8004f60 <_malloc_r+0x20>
 8004fbe:	684b      	ldr	r3, [r1, #4]
 8004fc0:	428c      	cmp	r4, r1
 8004fc2:	bf16      	itet	ne
 8004fc4:	6063      	strne	r3, [r4, #4]
 8004fc6:	6013      	streq	r3, [r2, #0]
 8004fc8:	460c      	movne	r4, r1
 8004fca:	e7eb      	b.n	8004fa4 <_malloc_r+0x64>
 8004fcc:	460c      	mov	r4, r1
 8004fce:	6849      	ldr	r1, [r1, #4]
 8004fd0:	e7cc      	b.n	8004f6c <_malloc_r+0x2c>
 8004fd2:	1cc4      	adds	r4, r0, #3
 8004fd4:	f024 0403 	bic.w	r4, r4, #3
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d005      	beq.n	8004fe8 <_malloc_r+0xa8>
 8004fdc:	1a21      	subs	r1, r4, r0
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f000 fb04 	bl	80055ec <_sbrk_r>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d0cf      	beq.n	8004f88 <_malloc_r+0x48>
 8004fe8:	6025      	str	r5, [r4, #0]
 8004fea:	e7db      	b.n	8004fa4 <_malloc_r+0x64>
 8004fec:	200000a8 	.word	0x200000a8
 8004ff0:	200000ac 	.word	0x200000ac

08004ff4 <__sfputc_r>:
 8004ff4:	6893      	ldr	r3, [r2, #8]
 8004ff6:	b410      	push	{r4}
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	6093      	str	r3, [r2, #8]
 8004ffe:	da07      	bge.n	8005010 <__sfputc_r+0x1c>
 8005000:	6994      	ldr	r4, [r2, #24]
 8005002:	42a3      	cmp	r3, r4
 8005004:	db01      	blt.n	800500a <__sfputc_r+0x16>
 8005006:	290a      	cmp	r1, #10
 8005008:	d102      	bne.n	8005010 <__sfputc_r+0x1c>
 800500a:	bc10      	pop	{r4}
 800500c:	f000 bb42 	b.w	8005694 <__swbuf_r>
 8005010:	6813      	ldr	r3, [r2, #0]
 8005012:	1c58      	adds	r0, r3, #1
 8005014:	6010      	str	r0, [r2, #0]
 8005016:	7019      	strb	r1, [r3, #0]
 8005018:	4608      	mov	r0, r1
 800501a:	bc10      	pop	{r4}
 800501c:	4770      	bx	lr

0800501e <__sfputs_r>:
 800501e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005020:	4606      	mov	r6, r0
 8005022:	460f      	mov	r7, r1
 8005024:	4614      	mov	r4, r2
 8005026:	18d5      	adds	r5, r2, r3
 8005028:	42ac      	cmp	r4, r5
 800502a:	d101      	bne.n	8005030 <__sfputs_r+0x12>
 800502c:	2000      	movs	r0, #0
 800502e:	e007      	b.n	8005040 <__sfputs_r+0x22>
 8005030:	463a      	mov	r2, r7
 8005032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005036:	4630      	mov	r0, r6
 8005038:	f7ff ffdc 	bl	8004ff4 <__sfputc_r>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d1f3      	bne.n	8005028 <__sfputs_r+0xa>
 8005040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005044 <_vfiprintf_r>:
 8005044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005048:	460c      	mov	r4, r1
 800504a:	b09d      	sub	sp, #116	; 0x74
 800504c:	4617      	mov	r7, r2
 800504e:	461d      	mov	r5, r3
 8005050:	4606      	mov	r6, r0
 8005052:	b118      	cbz	r0, 800505c <_vfiprintf_r+0x18>
 8005054:	6983      	ldr	r3, [r0, #24]
 8005056:	b90b      	cbnz	r3, 800505c <_vfiprintf_r+0x18>
 8005058:	f7ff fe30 	bl	8004cbc <__sinit>
 800505c:	4b7c      	ldr	r3, [pc, #496]	; (8005250 <_vfiprintf_r+0x20c>)
 800505e:	429c      	cmp	r4, r3
 8005060:	d158      	bne.n	8005114 <_vfiprintf_r+0xd0>
 8005062:	6874      	ldr	r4, [r6, #4]
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	0718      	lsls	r0, r3, #28
 8005068:	d55e      	bpl.n	8005128 <_vfiprintf_r+0xe4>
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d05b      	beq.n	8005128 <_vfiprintf_r+0xe4>
 8005070:	2300      	movs	r3, #0
 8005072:	9309      	str	r3, [sp, #36]	; 0x24
 8005074:	2320      	movs	r3, #32
 8005076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800507a:	2330      	movs	r3, #48	; 0x30
 800507c:	f04f 0b01 	mov.w	fp, #1
 8005080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005084:	9503      	str	r5, [sp, #12]
 8005086:	46b8      	mov	r8, r7
 8005088:	4645      	mov	r5, r8
 800508a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800508e:	b10b      	cbz	r3, 8005094 <_vfiprintf_r+0x50>
 8005090:	2b25      	cmp	r3, #37	; 0x25
 8005092:	d154      	bne.n	800513e <_vfiprintf_r+0xfa>
 8005094:	ebb8 0a07 	subs.w	sl, r8, r7
 8005098:	d00b      	beq.n	80050b2 <_vfiprintf_r+0x6e>
 800509a:	4653      	mov	r3, sl
 800509c:	463a      	mov	r2, r7
 800509e:	4621      	mov	r1, r4
 80050a0:	4630      	mov	r0, r6
 80050a2:	f7ff ffbc 	bl	800501e <__sfputs_r>
 80050a6:	3001      	adds	r0, #1
 80050a8:	f000 80c2 	beq.w	8005230 <_vfiprintf_r+0x1ec>
 80050ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ae:	4453      	add	r3, sl
 80050b0:	9309      	str	r3, [sp, #36]	; 0x24
 80050b2:	f898 3000 	ldrb.w	r3, [r8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80ba 	beq.w	8005230 <_vfiprintf_r+0x1ec>
 80050bc:	2300      	movs	r3, #0
 80050be:	f04f 32ff 	mov.w	r2, #4294967295
 80050c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c6:	9304      	str	r3, [sp, #16]
 80050c8:	9307      	str	r3, [sp, #28]
 80050ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050ce:	931a      	str	r3, [sp, #104]	; 0x68
 80050d0:	46a8      	mov	r8, r5
 80050d2:	2205      	movs	r2, #5
 80050d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80050d8:	485e      	ldr	r0, [pc, #376]	; (8005254 <_vfiprintf_r+0x210>)
 80050da:	f000 fbf1 	bl	80058c0 <memchr>
 80050de:	9b04      	ldr	r3, [sp, #16]
 80050e0:	bb78      	cbnz	r0, 8005142 <_vfiprintf_r+0xfe>
 80050e2:	06d9      	lsls	r1, r3, #27
 80050e4:	bf44      	itt	mi
 80050e6:	2220      	movmi	r2, #32
 80050e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050ec:	071a      	lsls	r2, r3, #28
 80050ee:	bf44      	itt	mi
 80050f0:	222b      	movmi	r2, #43	; 0x2b
 80050f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050f6:	782a      	ldrb	r2, [r5, #0]
 80050f8:	2a2a      	cmp	r2, #42	; 0x2a
 80050fa:	d02a      	beq.n	8005152 <_vfiprintf_r+0x10e>
 80050fc:	46a8      	mov	r8, r5
 80050fe:	2000      	movs	r0, #0
 8005100:	250a      	movs	r5, #10
 8005102:	9a07      	ldr	r2, [sp, #28]
 8005104:	4641      	mov	r1, r8
 8005106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800510a:	3b30      	subs	r3, #48	; 0x30
 800510c:	2b09      	cmp	r3, #9
 800510e:	d969      	bls.n	80051e4 <_vfiprintf_r+0x1a0>
 8005110:	b360      	cbz	r0, 800516c <_vfiprintf_r+0x128>
 8005112:	e024      	b.n	800515e <_vfiprintf_r+0x11a>
 8005114:	4b50      	ldr	r3, [pc, #320]	; (8005258 <_vfiprintf_r+0x214>)
 8005116:	429c      	cmp	r4, r3
 8005118:	d101      	bne.n	800511e <_vfiprintf_r+0xda>
 800511a:	68b4      	ldr	r4, [r6, #8]
 800511c:	e7a2      	b.n	8005064 <_vfiprintf_r+0x20>
 800511e:	4b4f      	ldr	r3, [pc, #316]	; (800525c <_vfiprintf_r+0x218>)
 8005120:	429c      	cmp	r4, r3
 8005122:	bf08      	it	eq
 8005124:	68f4      	ldreq	r4, [r6, #12]
 8005126:	e79d      	b.n	8005064 <_vfiprintf_r+0x20>
 8005128:	4621      	mov	r1, r4
 800512a:	4630      	mov	r0, r6
 800512c:	f000 fb16 	bl	800575c <__swsetup_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	d09d      	beq.n	8005070 <_vfiprintf_r+0x2c>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b01d      	add	sp, #116	; 0x74
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	46a8      	mov	r8, r5
 8005140:	e7a2      	b.n	8005088 <_vfiprintf_r+0x44>
 8005142:	4a44      	ldr	r2, [pc, #272]	; (8005254 <_vfiprintf_r+0x210>)
 8005144:	4645      	mov	r5, r8
 8005146:	1a80      	subs	r0, r0, r2
 8005148:	fa0b f000 	lsl.w	r0, fp, r0
 800514c:	4318      	orrs	r0, r3
 800514e:	9004      	str	r0, [sp, #16]
 8005150:	e7be      	b.n	80050d0 <_vfiprintf_r+0x8c>
 8005152:	9a03      	ldr	r2, [sp, #12]
 8005154:	1d11      	adds	r1, r2, #4
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	9103      	str	r1, [sp, #12]
 800515a:	2a00      	cmp	r2, #0
 800515c:	db01      	blt.n	8005162 <_vfiprintf_r+0x11e>
 800515e:	9207      	str	r2, [sp, #28]
 8005160:	e004      	b.n	800516c <_vfiprintf_r+0x128>
 8005162:	4252      	negs	r2, r2
 8005164:	f043 0302 	orr.w	r3, r3, #2
 8005168:	9207      	str	r2, [sp, #28]
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	f898 3000 	ldrb.w	r3, [r8]
 8005170:	2b2e      	cmp	r3, #46	; 0x2e
 8005172:	d10e      	bne.n	8005192 <_vfiprintf_r+0x14e>
 8005174:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005178:	2b2a      	cmp	r3, #42	; 0x2a
 800517a:	d138      	bne.n	80051ee <_vfiprintf_r+0x1aa>
 800517c:	9b03      	ldr	r3, [sp, #12]
 800517e:	f108 0802 	add.w	r8, r8, #2
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	9203      	str	r2, [sp, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	bfb8      	it	lt
 800518c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005190:	9305      	str	r3, [sp, #20]
 8005192:	4d33      	ldr	r5, [pc, #204]	; (8005260 <_vfiprintf_r+0x21c>)
 8005194:	2203      	movs	r2, #3
 8005196:	f898 1000 	ldrb.w	r1, [r8]
 800519a:	4628      	mov	r0, r5
 800519c:	f000 fb90 	bl	80058c0 <memchr>
 80051a0:	b140      	cbz	r0, 80051b4 <_vfiprintf_r+0x170>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	1b40      	subs	r0, r0, r5
 80051a6:	fa03 f000 	lsl.w	r0, r3, r0
 80051aa:	9b04      	ldr	r3, [sp, #16]
 80051ac:	f108 0801 	add.w	r8, r8, #1
 80051b0:	4303      	orrs	r3, r0
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	f898 1000 	ldrb.w	r1, [r8]
 80051b8:	2206      	movs	r2, #6
 80051ba:	482a      	ldr	r0, [pc, #168]	; (8005264 <_vfiprintf_r+0x220>)
 80051bc:	f108 0701 	add.w	r7, r8, #1
 80051c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051c4:	f000 fb7c 	bl	80058c0 <memchr>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d037      	beq.n	800523c <_vfiprintf_r+0x1f8>
 80051cc:	4b26      	ldr	r3, [pc, #152]	; (8005268 <_vfiprintf_r+0x224>)
 80051ce:	bb1b      	cbnz	r3, 8005218 <_vfiprintf_r+0x1d4>
 80051d0:	9b03      	ldr	r3, [sp, #12]
 80051d2:	3307      	adds	r3, #7
 80051d4:	f023 0307 	bic.w	r3, r3, #7
 80051d8:	3308      	adds	r3, #8
 80051da:	9303      	str	r3, [sp, #12]
 80051dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051de:	444b      	add	r3, r9
 80051e0:	9309      	str	r3, [sp, #36]	; 0x24
 80051e2:	e750      	b.n	8005086 <_vfiprintf_r+0x42>
 80051e4:	fb05 3202 	mla	r2, r5, r2, r3
 80051e8:	2001      	movs	r0, #1
 80051ea:	4688      	mov	r8, r1
 80051ec:	e78a      	b.n	8005104 <_vfiprintf_r+0xc0>
 80051ee:	2300      	movs	r3, #0
 80051f0:	250a      	movs	r5, #10
 80051f2:	4619      	mov	r1, r3
 80051f4:	f108 0801 	add.w	r8, r8, #1
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	4640      	mov	r0, r8
 80051fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005200:	3a30      	subs	r2, #48	; 0x30
 8005202:	2a09      	cmp	r2, #9
 8005204:	d903      	bls.n	800520e <_vfiprintf_r+0x1ca>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0c3      	beq.n	8005192 <_vfiprintf_r+0x14e>
 800520a:	9105      	str	r1, [sp, #20]
 800520c:	e7c1      	b.n	8005192 <_vfiprintf_r+0x14e>
 800520e:	fb05 2101 	mla	r1, r5, r1, r2
 8005212:	2301      	movs	r3, #1
 8005214:	4680      	mov	r8, r0
 8005216:	e7f0      	b.n	80051fa <_vfiprintf_r+0x1b6>
 8005218:	ab03      	add	r3, sp, #12
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	4622      	mov	r2, r4
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <_vfiprintf_r+0x228>)
 8005220:	a904      	add	r1, sp, #16
 8005222:	4630      	mov	r0, r6
 8005224:	f3af 8000 	nop.w
 8005228:	f1b0 3fff 	cmp.w	r0, #4294967295
 800522c:	4681      	mov	r9, r0
 800522e:	d1d5      	bne.n	80051dc <_vfiprintf_r+0x198>
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	065b      	lsls	r3, r3, #25
 8005234:	f53f af7e 	bmi.w	8005134 <_vfiprintf_r+0xf0>
 8005238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800523a:	e77d      	b.n	8005138 <_vfiprintf_r+0xf4>
 800523c:	ab03      	add	r3, sp, #12
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	4622      	mov	r2, r4
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <_vfiprintf_r+0x228>)
 8005244:	a904      	add	r1, sp, #16
 8005246:	4630      	mov	r0, r6
 8005248:	f000 f888 	bl	800535c <_printf_i>
 800524c:	e7ec      	b.n	8005228 <_vfiprintf_r+0x1e4>
 800524e:	bf00      	nop
 8005250:	080059fc 	.word	0x080059fc
 8005254:	08005a3c 	.word	0x08005a3c
 8005258:	08005a1c 	.word	0x08005a1c
 800525c:	080059dc 	.word	0x080059dc
 8005260:	08005a42 	.word	0x08005a42
 8005264:	08005a46 	.word	0x08005a46
 8005268:	00000000 	.word	0x00000000
 800526c:	0800501f 	.word	0x0800501f

08005270 <_printf_common>:
 8005270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	4691      	mov	r9, r2
 8005276:	461f      	mov	r7, r3
 8005278:	688a      	ldr	r2, [r1, #8]
 800527a:	690b      	ldr	r3, [r1, #16]
 800527c:	4606      	mov	r6, r0
 800527e:	4293      	cmp	r3, r2
 8005280:	bfb8      	it	lt
 8005282:	4613      	movlt	r3, r2
 8005284:	f8c9 3000 	str.w	r3, [r9]
 8005288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800528c:	460c      	mov	r4, r1
 800528e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005292:	b112      	cbz	r2, 800529a <_printf_common+0x2a>
 8005294:	3301      	adds	r3, #1
 8005296:	f8c9 3000 	str.w	r3, [r9]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	0699      	lsls	r1, r3, #26
 800529e:	bf42      	ittt	mi
 80052a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052a4:	3302      	addmi	r3, #2
 80052a6:	f8c9 3000 	strmi.w	r3, [r9]
 80052aa:	6825      	ldr	r5, [r4, #0]
 80052ac:	f015 0506 	ands.w	r5, r5, #6
 80052b0:	d107      	bne.n	80052c2 <_printf_common+0x52>
 80052b2:	f104 0a19 	add.w	sl, r4, #25
 80052b6:	68e3      	ldr	r3, [r4, #12]
 80052b8:	f8d9 2000 	ldr.w	r2, [r9]
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	42ab      	cmp	r3, r5
 80052c0:	dc29      	bgt.n	8005316 <_printf_common+0xa6>
 80052c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	3300      	adds	r3, #0
 80052ca:	bf18      	it	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	0692      	lsls	r2, r2, #26
 80052d0:	d42e      	bmi.n	8005330 <_printf_common+0xc0>
 80052d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052d6:	4639      	mov	r1, r7
 80052d8:	4630      	mov	r0, r6
 80052da:	47c0      	blx	r8
 80052dc:	3001      	adds	r0, #1
 80052de:	d021      	beq.n	8005324 <_printf_common+0xb4>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	68e5      	ldr	r5, [r4, #12]
 80052e4:	f003 0306 	and.w	r3, r3, #6
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	bf18      	it	ne
 80052ec:	2500      	movne	r5, #0
 80052ee:	f8d9 2000 	ldr.w	r2, [r9]
 80052f2:	f04f 0900 	mov.w	r9, #0
 80052f6:	bf08      	it	eq
 80052f8:	1aad      	subeq	r5, r5, r2
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	bf08      	it	eq
 8005300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005304:	4293      	cmp	r3, r2
 8005306:	bfc4      	itt	gt
 8005308:	1a9b      	subgt	r3, r3, r2
 800530a:	18ed      	addgt	r5, r5, r3
 800530c:	341a      	adds	r4, #26
 800530e:	454d      	cmp	r5, r9
 8005310:	d11a      	bne.n	8005348 <_printf_common+0xd8>
 8005312:	2000      	movs	r0, #0
 8005314:	e008      	b.n	8005328 <_printf_common+0xb8>
 8005316:	2301      	movs	r3, #1
 8005318:	4652      	mov	r2, sl
 800531a:	4639      	mov	r1, r7
 800531c:	4630      	mov	r0, r6
 800531e:	47c0      	blx	r8
 8005320:	3001      	adds	r0, #1
 8005322:	d103      	bne.n	800532c <_printf_common+0xbc>
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532c:	3501      	adds	r5, #1
 800532e:	e7c2      	b.n	80052b6 <_printf_common+0x46>
 8005330:	2030      	movs	r0, #48	; 0x30
 8005332:	18e1      	adds	r1, r4, r3
 8005334:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800533e:	4422      	add	r2, r4
 8005340:	3302      	adds	r3, #2
 8005342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005346:	e7c4      	b.n	80052d2 <_printf_common+0x62>
 8005348:	2301      	movs	r3, #1
 800534a:	4622      	mov	r2, r4
 800534c:	4639      	mov	r1, r7
 800534e:	4630      	mov	r0, r6
 8005350:	47c0      	blx	r8
 8005352:	3001      	adds	r0, #1
 8005354:	d0e6      	beq.n	8005324 <_printf_common+0xb4>
 8005356:	f109 0901 	add.w	r9, r9, #1
 800535a:	e7d8      	b.n	800530e <_printf_common+0x9e>

0800535c <_printf_i>:
 800535c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005360:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005364:	460c      	mov	r4, r1
 8005366:	7e09      	ldrb	r1, [r1, #24]
 8005368:	b085      	sub	sp, #20
 800536a:	296e      	cmp	r1, #110	; 0x6e
 800536c:	4617      	mov	r7, r2
 800536e:	4606      	mov	r6, r0
 8005370:	4698      	mov	r8, r3
 8005372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005374:	f000 80b3 	beq.w	80054de <_printf_i+0x182>
 8005378:	d822      	bhi.n	80053c0 <_printf_i+0x64>
 800537a:	2963      	cmp	r1, #99	; 0x63
 800537c:	d036      	beq.n	80053ec <_printf_i+0x90>
 800537e:	d80a      	bhi.n	8005396 <_printf_i+0x3a>
 8005380:	2900      	cmp	r1, #0
 8005382:	f000 80b9 	beq.w	80054f8 <_printf_i+0x19c>
 8005386:	2958      	cmp	r1, #88	; 0x58
 8005388:	f000 8083 	beq.w	8005492 <_printf_i+0x136>
 800538c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005390:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005394:	e032      	b.n	80053fc <_printf_i+0xa0>
 8005396:	2964      	cmp	r1, #100	; 0x64
 8005398:	d001      	beq.n	800539e <_printf_i+0x42>
 800539a:	2969      	cmp	r1, #105	; 0x69
 800539c:	d1f6      	bne.n	800538c <_printf_i+0x30>
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	6813      	ldr	r3, [r2, #0]
 80053a2:	0605      	lsls	r5, r0, #24
 80053a4:	f103 0104 	add.w	r1, r3, #4
 80053a8:	d52a      	bpl.n	8005400 <_printf_i+0xa4>
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da03      	bge.n	80053ba <_printf_i+0x5e>
 80053b2:	222d      	movs	r2, #45	; 0x2d
 80053b4:	425b      	negs	r3, r3
 80053b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053ba:	486f      	ldr	r0, [pc, #444]	; (8005578 <_printf_i+0x21c>)
 80053bc:	220a      	movs	r2, #10
 80053be:	e039      	b.n	8005434 <_printf_i+0xd8>
 80053c0:	2973      	cmp	r1, #115	; 0x73
 80053c2:	f000 809d 	beq.w	8005500 <_printf_i+0x1a4>
 80053c6:	d808      	bhi.n	80053da <_printf_i+0x7e>
 80053c8:	296f      	cmp	r1, #111	; 0x6f
 80053ca:	d020      	beq.n	800540e <_printf_i+0xb2>
 80053cc:	2970      	cmp	r1, #112	; 0x70
 80053ce:	d1dd      	bne.n	800538c <_printf_i+0x30>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	f043 0320 	orr.w	r3, r3, #32
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	e003      	b.n	80053e2 <_printf_i+0x86>
 80053da:	2975      	cmp	r1, #117	; 0x75
 80053dc:	d017      	beq.n	800540e <_printf_i+0xb2>
 80053de:	2978      	cmp	r1, #120	; 0x78
 80053e0:	d1d4      	bne.n	800538c <_printf_i+0x30>
 80053e2:	2378      	movs	r3, #120	; 0x78
 80053e4:	4865      	ldr	r0, [pc, #404]	; (800557c <_printf_i+0x220>)
 80053e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ea:	e055      	b.n	8005498 <_printf_i+0x13c>
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f2:	1d19      	adds	r1, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6011      	str	r1, [r2, #0]
 80053f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fc:	2301      	movs	r3, #1
 80053fe:	e08c      	b.n	800551a <_printf_i+0x1be>
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005406:	6011      	str	r1, [r2, #0]
 8005408:	bf18      	it	ne
 800540a:	b21b      	sxthne	r3, r3
 800540c:	e7cf      	b.n	80053ae <_printf_i+0x52>
 800540e:	6813      	ldr	r3, [r2, #0]
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	1d18      	adds	r0, r3, #4
 8005414:	6010      	str	r0, [r2, #0]
 8005416:	0628      	lsls	r0, r5, #24
 8005418:	d501      	bpl.n	800541e <_printf_i+0xc2>
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	e002      	b.n	8005424 <_printf_i+0xc8>
 800541e:	0668      	lsls	r0, r5, #25
 8005420:	d5fb      	bpl.n	800541a <_printf_i+0xbe>
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	296f      	cmp	r1, #111	; 0x6f
 8005426:	bf14      	ite	ne
 8005428:	220a      	movne	r2, #10
 800542a:	2208      	moveq	r2, #8
 800542c:	4852      	ldr	r0, [pc, #328]	; (8005578 <_printf_i+0x21c>)
 800542e:	2100      	movs	r1, #0
 8005430:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005434:	6865      	ldr	r5, [r4, #4]
 8005436:	2d00      	cmp	r5, #0
 8005438:	60a5      	str	r5, [r4, #8]
 800543a:	f2c0 8095 	blt.w	8005568 <_printf_i+0x20c>
 800543e:	6821      	ldr	r1, [r4, #0]
 8005440:	f021 0104 	bic.w	r1, r1, #4
 8005444:	6021      	str	r1, [r4, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d13d      	bne.n	80054c6 <_printf_i+0x16a>
 800544a:	2d00      	cmp	r5, #0
 800544c:	f040 808e 	bne.w	800556c <_printf_i+0x210>
 8005450:	4665      	mov	r5, ip
 8005452:	2a08      	cmp	r2, #8
 8005454:	d10b      	bne.n	800546e <_printf_i+0x112>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	07db      	lsls	r3, r3, #31
 800545a:	d508      	bpl.n	800546e <_printf_i+0x112>
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	bfde      	ittt	le
 8005464:	2330      	movle	r3, #48	; 0x30
 8005466:	f805 3c01 	strble.w	r3, [r5, #-1]
 800546a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800546e:	ebac 0305 	sub.w	r3, ip, r5
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	f8cd 8000 	str.w	r8, [sp]
 8005478:	463b      	mov	r3, r7
 800547a:	aa03      	add	r2, sp, #12
 800547c:	4621      	mov	r1, r4
 800547e:	4630      	mov	r0, r6
 8005480:	f7ff fef6 	bl	8005270 <_printf_common>
 8005484:	3001      	adds	r0, #1
 8005486:	d14d      	bne.n	8005524 <_printf_i+0x1c8>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295
 800548c:	b005      	add	sp, #20
 800548e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005492:	4839      	ldr	r0, [pc, #228]	; (8005578 <_printf_i+0x21c>)
 8005494:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	6821      	ldr	r1, [r4, #0]
 800549c:	1d1d      	adds	r5, r3, #4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6015      	str	r5, [r2, #0]
 80054a2:	060a      	lsls	r2, r1, #24
 80054a4:	d50b      	bpl.n	80054be <_printf_i+0x162>
 80054a6:	07ca      	lsls	r2, r1, #31
 80054a8:	bf44      	itt	mi
 80054aa:	f041 0120 	orrmi.w	r1, r1, #32
 80054ae:	6021      	strmi	r1, [r4, #0]
 80054b0:	b91b      	cbnz	r3, 80054ba <_printf_i+0x15e>
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	f022 0220 	bic.w	r2, r2, #32
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	2210      	movs	r2, #16
 80054bc:	e7b7      	b.n	800542e <_printf_i+0xd2>
 80054be:	064d      	lsls	r5, r1, #25
 80054c0:	bf48      	it	mi
 80054c2:	b29b      	uxthmi	r3, r3
 80054c4:	e7ef      	b.n	80054a6 <_printf_i+0x14a>
 80054c6:	4665      	mov	r5, ip
 80054c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054cc:	fb02 3311 	mls	r3, r2, r1, r3
 80054d0:	5cc3      	ldrb	r3, [r0, r3]
 80054d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054d6:	460b      	mov	r3, r1
 80054d8:	2900      	cmp	r1, #0
 80054da:	d1f5      	bne.n	80054c8 <_printf_i+0x16c>
 80054dc:	e7b9      	b.n	8005452 <_printf_i+0xf6>
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	6825      	ldr	r5, [r4, #0]
 80054e2:	1d18      	adds	r0, r3, #4
 80054e4:	6961      	ldr	r1, [r4, #20]
 80054e6:	6010      	str	r0, [r2, #0]
 80054e8:	0628      	lsls	r0, r5, #24
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	d501      	bpl.n	80054f2 <_printf_i+0x196>
 80054ee:	6019      	str	r1, [r3, #0]
 80054f0:	e002      	b.n	80054f8 <_printf_i+0x19c>
 80054f2:	066a      	lsls	r2, r5, #25
 80054f4:	d5fb      	bpl.n	80054ee <_printf_i+0x192>
 80054f6:	8019      	strh	r1, [r3, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	4665      	mov	r5, ip
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	e7b9      	b.n	8005474 <_printf_i+0x118>
 8005500:	6813      	ldr	r3, [r2, #0]
 8005502:	1d19      	adds	r1, r3, #4
 8005504:	6011      	str	r1, [r2, #0]
 8005506:	681d      	ldr	r5, [r3, #0]
 8005508:	6862      	ldr	r2, [r4, #4]
 800550a:	2100      	movs	r1, #0
 800550c:	4628      	mov	r0, r5
 800550e:	f000 f9d7 	bl	80058c0 <memchr>
 8005512:	b108      	cbz	r0, 8005518 <_printf_i+0x1bc>
 8005514:	1b40      	subs	r0, r0, r5
 8005516:	6060      	str	r0, [r4, #4]
 8005518:	6863      	ldr	r3, [r4, #4]
 800551a:	6123      	str	r3, [r4, #16]
 800551c:	2300      	movs	r3, #0
 800551e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005522:	e7a7      	b.n	8005474 <_printf_i+0x118>
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	462a      	mov	r2, r5
 8005528:	4639      	mov	r1, r7
 800552a:	4630      	mov	r0, r6
 800552c:	47c0      	blx	r8
 800552e:	3001      	adds	r0, #1
 8005530:	d0aa      	beq.n	8005488 <_printf_i+0x12c>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	079b      	lsls	r3, r3, #30
 8005536:	d413      	bmi.n	8005560 <_printf_i+0x204>
 8005538:	68e0      	ldr	r0, [r4, #12]
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	4298      	cmp	r0, r3
 800553e:	bfb8      	it	lt
 8005540:	4618      	movlt	r0, r3
 8005542:	e7a3      	b.n	800548c <_printf_i+0x130>
 8005544:	2301      	movs	r3, #1
 8005546:	464a      	mov	r2, r9
 8005548:	4639      	mov	r1, r7
 800554a:	4630      	mov	r0, r6
 800554c:	47c0      	blx	r8
 800554e:	3001      	adds	r0, #1
 8005550:	d09a      	beq.n	8005488 <_printf_i+0x12c>
 8005552:	3501      	adds	r5, #1
 8005554:	68e3      	ldr	r3, [r4, #12]
 8005556:	9a03      	ldr	r2, [sp, #12]
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	42ab      	cmp	r3, r5
 800555c:	dcf2      	bgt.n	8005544 <_printf_i+0x1e8>
 800555e:	e7eb      	b.n	8005538 <_printf_i+0x1dc>
 8005560:	2500      	movs	r5, #0
 8005562:	f104 0919 	add.w	r9, r4, #25
 8005566:	e7f5      	b.n	8005554 <_printf_i+0x1f8>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1ac      	bne.n	80054c6 <_printf_i+0x16a>
 800556c:	7803      	ldrb	r3, [r0, #0]
 800556e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005576:	e76c      	b.n	8005452 <_printf_i+0xf6>
 8005578:	08005a4d 	.word	0x08005a4d
 800557c:	08005a5e 	.word	0x08005a5e

08005580 <_putc_r>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	460d      	mov	r5, r1
 8005584:	4614      	mov	r4, r2
 8005586:	4606      	mov	r6, r0
 8005588:	b118      	cbz	r0, 8005592 <_putc_r+0x12>
 800558a:	6983      	ldr	r3, [r0, #24]
 800558c:	b90b      	cbnz	r3, 8005592 <_putc_r+0x12>
 800558e:	f7ff fb95 	bl	8004cbc <__sinit>
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <_putc_r+0x60>)
 8005594:	429c      	cmp	r4, r3
 8005596:	d112      	bne.n	80055be <_putc_r+0x3e>
 8005598:	6874      	ldr	r4, [r6, #4]
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	3b01      	subs	r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	60a3      	str	r3, [r4, #8]
 80055a2:	da16      	bge.n	80055d2 <_putc_r+0x52>
 80055a4:	69a2      	ldr	r2, [r4, #24]
 80055a6:	4293      	cmp	r3, r2
 80055a8:	db02      	blt.n	80055b0 <_putc_r+0x30>
 80055aa:	b2eb      	uxtb	r3, r5
 80055ac:	2b0a      	cmp	r3, #10
 80055ae:	d110      	bne.n	80055d2 <_putc_r+0x52>
 80055b0:	4622      	mov	r2, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	4630      	mov	r0, r6
 80055b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055ba:	f000 b86b 	b.w	8005694 <__swbuf_r>
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <_putc_r+0x64>)
 80055c0:	429c      	cmp	r4, r3
 80055c2:	d101      	bne.n	80055c8 <_putc_r+0x48>
 80055c4:	68b4      	ldr	r4, [r6, #8]
 80055c6:	e7e8      	b.n	800559a <_putc_r+0x1a>
 80055c8:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <_putc_r+0x68>)
 80055ca:	429c      	cmp	r4, r3
 80055cc:	bf08      	it	eq
 80055ce:	68f4      	ldreq	r4, [r6, #12]
 80055d0:	e7e3      	b.n	800559a <_putc_r+0x1a>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	b2e8      	uxtb	r0, r5
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	6022      	str	r2, [r4, #0]
 80055da:	701d      	strb	r5, [r3, #0]
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	bf00      	nop
 80055e0:	080059fc 	.word	0x080059fc
 80055e4:	08005a1c 	.word	0x08005a1c
 80055e8:	080059dc 	.word	0x080059dc

080055ec <_sbrk_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	2300      	movs	r3, #0
 80055f0:	4c05      	ldr	r4, [pc, #20]	; (8005608 <_sbrk_r+0x1c>)
 80055f2:	4605      	mov	r5, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	f7fd ffc2 	bl	8003580 <_sbrk>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_sbrk_r+0x1a>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	b103      	cbz	r3, 8005606 <_sbrk_r+0x1a>
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	200000c0 	.word	0x200000c0

0800560c <__sread>:
 800560c:	b510      	push	{r4, lr}
 800560e:	460c      	mov	r4, r1
 8005610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005614:	f000 f964 	bl	80058e0 <_read_r>
 8005618:	2800      	cmp	r0, #0
 800561a:	bfab      	itete	ge
 800561c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800561e:	89a3      	ldrhlt	r3, [r4, #12]
 8005620:	181b      	addge	r3, r3, r0
 8005622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005626:	bfac      	ite	ge
 8005628:	6563      	strge	r3, [r4, #84]	; 0x54
 800562a:	81a3      	strhlt	r3, [r4, #12]
 800562c:	bd10      	pop	{r4, pc}

0800562e <__swrite>:
 800562e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005632:	461f      	mov	r7, r3
 8005634:	898b      	ldrh	r3, [r1, #12]
 8005636:	4605      	mov	r5, r0
 8005638:	05db      	lsls	r3, r3, #23
 800563a:	460c      	mov	r4, r1
 800563c:	4616      	mov	r6, r2
 800563e:	d505      	bpl.n	800564c <__swrite+0x1e>
 8005640:	2302      	movs	r3, #2
 8005642:	2200      	movs	r2, #0
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	f000 f928 	bl	800589c <_lseek_r>
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	4632      	mov	r2, r6
 8005650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800565a:	463b      	mov	r3, r7
 800565c:	4628      	mov	r0, r5
 800565e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005662:	f000 b869 	b.w	8005738 <_write_r>

08005666 <__sseek>:
 8005666:	b510      	push	{r4, lr}
 8005668:	460c      	mov	r4, r1
 800566a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566e:	f000 f915 	bl	800589c <_lseek_r>
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	bf15      	itete	ne
 8005678:	6560      	strne	r0, [r4, #84]	; 0x54
 800567a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800567e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005682:	81a3      	strheq	r3, [r4, #12]
 8005684:	bf18      	it	ne
 8005686:	81a3      	strhne	r3, [r4, #12]
 8005688:	bd10      	pop	{r4, pc}

0800568a <__sclose>:
 800568a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568e:	f000 b8d3 	b.w	8005838 <_close_r>
	...

08005694 <__swbuf_r>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	460e      	mov	r6, r1
 8005698:	4614      	mov	r4, r2
 800569a:	4605      	mov	r5, r0
 800569c:	b118      	cbz	r0, 80056a6 <__swbuf_r+0x12>
 800569e:	6983      	ldr	r3, [r0, #24]
 80056a0:	b90b      	cbnz	r3, 80056a6 <__swbuf_r+0x12>
 80056a2:	f7ff fb0b 	bl	8004cbc <__sinit>
 80056a6:	4b21      	ldr	r3, [pc, #132]	; (800572c <__swbuf_r+0x98>)
 80056a8:	429c      	cmp	r4, r3
 80056aa:	d12a      	bne.n	8005702 <__swbuf_r+0x6e>
 80056ac:	686c      	ldr	r4, [r5, #4]
 80056ae:	69a3      	ldr	r3, [r4, #24]
 80056b0:	60a3      	str	r3, [r4, #8]
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	071a      	lsls	r2, r3, #28
 80056b6:	d52e      	bpl.n	8005716 <__swbuf_r+0x82>
 80056b8:	6923      	ldr	r3, [r4, #16]
 80056ba:	b363      	cbz	r3, 8005716 <__swbuf_r+0x82>
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	6820      	ldr	r0, [r4, #0]
 80056c0:	b2f6      	uxtb	r6, r6
 80056c2:	1ac0      	subs	r0, r0, r3
 80056c4:	6963      	ldr	r3, [r4, #20]
 80056c6:	4637      	mov	r7, r6
 80056c8:	4283      	cmp	r3, r0
 80056ca:	dc04      	bgt.n	80056d6 <__swbuf_r+0x42>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7ff fa8a 	bl	8004be8 <_fflush_r>
 80056d4:	bb28      	cbnz	r0, 8005722 <__swbuf_r+0x8e>
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	3001      	adds	r0, #1
 80056da:	3b01      	subs	r3, #1
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	701e      	strb	r6, [r3, #0]
 80056e6:	6963      	ldr	r3, [r4, #20]
 80056e8:	4283      	cmp	r3, r0
 80056ea:	d004      	beq.n	80056f6 <__swbuf_r+0x62>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	07db      	lsls	r3, r3, #31
 80056f0:	d519      	bpl.n	8005726 <__swbuf_r+0x92>
 80056f2:	2e0a      	cmp	r6, #10
 80056f4:	d117      	bne.n	8005726 <__swbuf_r+0x92>
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f7ff fa75 	bl	8004be8 <_fflush_r>
 80056fe:	b190      	cbz	r0, 8005726 <__swbuf_r+0x92>
 8005700:	e00f      	b.n	8005722 <__swbuf_r+0x8e>
 8005702:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <__swbuf_r+0x9c>)
 8005704:	429c      	cmp	r4, r3
 8005706:	d101      	bne.n	800570c <__swbuf_r+0x78>
 8005708:	68ac      	ldr	r4, [r5, #8]
 800570a:	e7d0      	b.n	80056ae <__swbuf_r+0x1a>
 800570c:	4b09      	ldr	r3, [pc, #36]	; (8005734 <__swbuf_r+0xa0>)
 800570e:	429c      	cmp	r4, r3
 8005710:	bf08      	it	eq
 8005712:	68ec      	ldreq	r4, [r5, #12]
 8005714:	e7cb      	b.n	80056ae <__swbuf_r+0x1a>
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	f000 f81f 	bl	800575c <__swsetup_r>
 800571e:	2800      	cmp	r0, #0
 8005720:	d0cc      	beq.n	80056bc <__swbuf_r+0x28>
 8005722:	f04f 37ff 	mov.w	r7, #4294967295
 8005726:	4638      	mov	r0, r7
 8005728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800572a:	bf00      	nop
 800572c:	080059fc 	.word	0x080059fc
 8005730:	08005a1c 	.word	0x08005a1c
 8005734:	080059dc 	.word	0x080059dc

08005738 <_write_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4605      	mov	r5, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	2200      	movs	r2, #0
 8005742:	4c05      	ldr	r4, [pc, #20]	; (8005758 <_write_r+0x20>)
 8005744:	6022      	str	r2, [r4, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	f7fd fecd 	bl	80034e6 <_write>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_write_r+0x1e>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	b103      	cbz	r3, 8005756 <_write_r+0x1e>
 8005754:	602b      	str	r3, [r5, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	200000c0 	.word	0x200000c0

0800575c <__swsetup_r>:
 800575c:	4b32      	ldr	r3, [pc, #200]	; (8005828 <__swsetup_r+0xcc>)
 800575e:	b570      	push	{r4, r5, r6, lr}
 8005760:	681d      	ldr	r5, [r3, #0]
 8005762:	4606      	mov	r6, r0
 8005764:	460c      	mov	r4, r1
 8005766:	b125      	cbz	r5, 8005772 <__swsetup_r+0x16>
 8005768:	69ab      	ldr	r3, [r5, #24]
 800576a:	b913      	cbnz	r3, 8005772 <__swsetup_r+0x16>
 800576c:	4628      	mov	r0, r5
 800576e:	f7ff faa5 	bl	8004cbc <__sinit>
 8005772:	4b2e      	ldr	r3, [pc, #184]	; (800582c <__swsetup_r+0xd0>)
 8005774:	429c      	cmp	r4, r3
 8005776:	d10f      	bne.n	8005798 <__swsetup_r+0x3c>
 8005778:	686c      	ldr	r4, [r5, #4]
 800577a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800577e:	b29a      	uxth	r2, r3
 8005780:	0715      	lsls	r5, r2, #28
 8005782:	d42c      	bmi.n	80057de <__swsetup_r+0x82>
 8005784:	06d0      	lsls	r0, r2, #27
 8005786:	d411      	bmi.n	80057ac <__swsetup_r+0x50>
 8005788:	2209      	movs	r2, #9
 800578a:	6032      	str	r2, [r6, #0]
 800578c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	e03e      	b.n	8005816 <__swsetup_r+0xba>
 8005798:	4b25      	ldr	r3, [pc, #148]	; (8005830 <__swsetup_r+0xd4>)
 800579a:	429c      	cmp	r4, r3
 800579c:	d101      	bne.n	80057a2 <__swsetup_r+0x46>
 800579e:	68ac      	ldr	r4, [r5, #8]
 80057a0:	e7eb      	b.n	800577a <__swsetup_r+0x1e>
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <__swsetup_r+0xd8>)
 80057a4:	429c      	cmp	r4, r3
 80057a6:	bf08      	it	eq
 80057a8:	68ec      	ldreq	r4, [r5, #12]
 80057aa:	e7e6      	b.n	800577a <__swsetup_r+0x1e>
 80057ac:	0751      	lsls	r1, r2, #29
 80057ae:	d512      	bpl.n	80057d6 <__swsetup_r+0x7a>
 80057b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b2:	b141      	cbz	r1, 80057c6 <__swsetup_r+0x6a>
 80057b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b8:	4299      	cmp	r1, r3
 80057ba:	d002      	beq.n	80057c2 <__swsetup_r+0x66>
 80057bc:	4630      	mov	r0, r6
 80057be:	f7ff fb73 	bl	8004ea8 <_free_r>
 80057c2:	2300      	movs	r3, #0
 80057c4:	6363      	str	r3, [r4, #52]	; 0x34
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057cc:	81a3      	strh	r3, [r4, #12]
 80057ce:	2300      	movs	r3, #0
 80057d0:	6063      	str	r3, [r4, #4]
 80057d2:	6923      	ldr	r3, [r4, #16]
 80057d4:	6023      	str	r3, [r4, #0]
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	f043 0308 	orr.w	r3, r3, #8
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	b94b      	cbnz	r3, 80057f6 <__swsetup_r+0x9a>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ec:	d003      	beq.n	80057f6 <__swsetup_r+0x9a>
 80057ee:	4621      	mov	r1, r4
 80057f0:	4630      	mov	r0, r6
 80057f2:	f7ff fb11 	bl	8004e18 <__smakebuf_r>
 80057f6:	89a2      	ldrh	r2, [r4, #12]
 80057f8:	f012 0301 	ands.w	r3, r2, #1
 80057fc:	d00c      	beq.n	8005818 <__swsetup_r+0xbc>
 80057fe:	2300      	movs	r3, #0
 8005800:	60a3      	str	r3, [r4, #8]
 8005802:	6963      	ldr	r3, [r4, #20]
 8005804:	425b      	negs	r3, r3
 8005806:	61a3      	str	r3, [r4, #24]
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	b953      	cbnz	r3, 8005822 <__swsetup_r+0xc6>
 800580c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005810:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005814:	d1ba      	bne.n	800578c <__swsetup_r+0x30>
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	0792      	lsls	r2, r2, #30
 800581a:	bf58      	it	pl
 800581c:	6963      	ldrpl	r3, [r4, #20]
 800581e:	60a3      	str	r3, [r4, #8]
 8005820:	e7f2      	b.n	8005808 <__swsetup_r+0xac>
 8005822:	2000      	movs	r0, #0
 8005824:	e7f7      	b.n	8005816 <__swsetup_r+0xba>
 8005826:	bf00      	nop
 8005828:	20000018 	.word	0x20000018
 800582c:	080059fc 	.word	0x080059fc
 8005830:	08005a1c 	.word	0x08005a1c
 8005834:	080059dc 	.word	0x080059dc

08005838 <_close_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	2300      	movs	r3, #0
 800583c:	4c05      	ldr	r4, [pc, #20]	; (8005854 <_close_r+0x1c>)
 800583e:	4605      	mov	r5, r0
 8005840:	4608      	mov	r0, r1
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	f7fd fe6b 	bl	800351e <_close>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_close_r+0x1a>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	b103      	cbz	r3, 8005852 <_close_r+0x1a>
 8005850:	602b      	str	r3, [r5, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	200000c0 	.word	0x200000c0

08005858 <_fstat_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	2300      	movs	r3, #0
 800585c:	4c06      	ldr	r4, [pc, #24]	; (8005878 <_fstat_r+0x20>)
 800585e:	4605      	mov	r5, r0
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	f7fd fe65 	bl	8003534 <_fstat>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	d102      	bne.n	8005874 <_fstat_r+0x1c>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	b103      	cbz	r3, 8005874 <_fstat_r+0x1c>
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	bd38      	pop	{r3, r4, r5, pc}
 8005876:	bf00      	nop
 8005878:	200000c0 	.word	0x200000c0

0800587c <_isatty_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	2300      	movs	r3, #0
 8005880:	4c05      	ldr	r4, [pc, #20]	; (8005898 <_isatty_r+0x1c>)
 8005882:	4605      	mov	r5, r0
 8005884:	4608      	mov	r0, r1
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	f7fd fe63 	bl	8003552 <_isatty>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_isatty_r+0x1a>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	b103      	cbz	r3, 8005896 <_isatty_r+0x1a>
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	200000c0 	.word	0x200000c0

0800589c <_lseek_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4605      	mov	r5, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	4611      	mov	r1, r2
 80058a4:	2200      	movs	r2, #0
 80058a6:	4c05      	ldr	r4, [pc, #20]	; (80058bc <_lseek_r+0x20>)
 80058a8:	6022      	str	r2, [r4, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f7fd fe5b 	bl	8003566 <_lseek>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_lseek_r+0x1e>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_lseek_r+0x1e>
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	200000c0 	.word	0x200000c0

080058c0 <memchr>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	b2c9      	uxtb	r1, r1
 80058c4:	4402      	add	r2, r0
 80058c6:	4290      	cmp	r0, r2
 80058c8:	4603      	mov	r3, r0
 80058ca:	d101      	bne.n	80058d0 <memchr+0x10>
 80058cc:	2300      	movs	r3, #0
 80058ce:	e003      	b.n	80058d8 <memchr+0x18>
 80058d0:	781c      	ldrb	r4, [r3, #0]
 80058d2:	3001      	adds	r0, #1
 80058d4:	428c      	cmp	r4, r1
 80058d6:	d1f6      	bne.n	80058c6 <memchr+0x6>
 80058d8:	4618      	mov	r0, r3
 80058da:	bd10      	pop	{r4, pc}

080058dc <__malloc_lock>:
 80058dc:	4770      	bx	lr

080058de <__malloc_unlock>:
 80058de:	4770      	bx	lr

080058e0 <_read_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4605      	mov	r5, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	2200      	movs	r2, #0
 80058ea:	4c05      	ldr	r4, [pc, #20]	; (8005900 <_read_r+0x20>)
 80058ec:	6022      	str	r2, [r4, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f7fd fddc 	bl	80034ac <_read>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_read_r+0x1e>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_read_r+0x1e>
 80058fc:	602b      	str	r3, [r5, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	200000c0 	.word	0x200000c0

08005904 <_init>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr

08005910 <_fini>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr
